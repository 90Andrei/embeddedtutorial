
l476rg_adc2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c80  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08004e10  08004e10  00014e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e94  08004e94  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004e94  08004e94  00014e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e9c  08004e9c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e9c  08004e9c  00014e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ea0  08004ea0  00014ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004ea4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000070  08004f14  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08004f14  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb6d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002106  00000000  00000000  0002fc0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  00031d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf8  00000000  00000000  000329f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002843c  00000000  00000000  000335f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f963  00000000  00000000  0005ba2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fcded  00000000  00000000  0006b38f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016817c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038d4  00000000  00000000  001681cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004df8 	.word	0x08004df8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004df8 	.word	0x08004df8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08a      	sub	sp, #40	; 0x28
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800058a:	f107 031c 	add.w	r3, r7, #28
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]
 80005a4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005a6:	4b2f      	ldr	r3, [pc, #188]	; (8000664 <MX_ADC1_Init+0xe0>)
 80005a8:	4a2f      	ldr	r2, [pc, #188]	; (8000668 <MX_ADC1_Init+0xe4>)
 80005aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005ac:	4b2d      	ldr	r3, [pc, #180]	; (8000664 <MX_ADC1_Init+0xe0>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005b2:	4b2c      	ldr	r3, [pc, #176]	; (8000664 <MX_ADC1_Init+0xe0>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005b8:	4b2a      	ldr	r3, [pc, #168]	; (8000664 <MX_ADC1_Init+0xe0>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005be:	4b29      	ldr	r3, [pc, #164]	; (8000664 <MX_ADC1_Init+0xe0>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005c4:	4b27      	ldr	r3, [pc, #156]	; (8000664 <MX_ADC1_Init+0xe0>)
 80005c6:	2204      	movs	r2, #4
 80005c8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005ca:	4b26      	ldr	r3, [pc, #152]	; (8000664 <MX_ADC1_Init+0xe0>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005d0:	4b24      	ldr	r3, [pc, #144]	; (8000664 <MX_ADC1_Init+0xe0>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005d6:	4b23      	ldr	r3, [pc, #140]	; (8000664 <MX_ADC1_Init+0xe0>)
 80005d8:	2201      	movs	r2, #1
 80005da:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005dc:	4b21      	ldr	r3, [pc, #132]	; (8000664 <MX_ADC1_Init+0xe0>)
 80005de:	2200      	movs	r2, #0
 80005e0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005e4:	4b1f      	ldr	r3, [pc, #124]	; (8000664 <MX_ADC1_Init+0xe0>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ea:	4b1e      	ldr	r3, [pc, #120]	; (8000664 <MX_ADC1_Init+0xe0>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005f0:	4b1c      	ldr	r3, [pc, #112]	; (8000664 <MX_ADC1_Init+0xe0>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005f8:	4b1a      	ldr	r3, [pc, #104]	; (8000664 <MX_ADC1_Init+0xe0>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005fe:	4b19      	ldr	r3, [pc, #100]	; (8000664 <MX_ADC1_Init+0xe0>)
 8000600:	2200      	movs	r2, #0
 8000602:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000606:	4817      	ldr	r0, [pc, #92]	; (8000664 <MX_ADC1_Init+0xe0>)
 8000608:	f000 fd42 	bl	8001090 <HAL_ADC_Init>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000612:	f000 f990 	bl	8000936 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000616:	2300      	movs	r3, #0
 8000618:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800061a:	f107 031c 	add.w	r3, r7, #28
 800061e:	4619      	mov	r1, r3
 8000620:	4810      	ldr	r0, [pc, #64]	; (8000664 <MX_ADC1_Init+0xe0>)
 8000622:	f001 fb87 	bl	8001d34 <HAL_ADCEx_MultiModeConfigChannel>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800062c:	f000 f983 	bl	8000936 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000630:	4b0e      	ldr	r3, [pc, #56]	; (800066c <MX_ADC1_Init+0xe8>)
 8000632:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000634:	2306      	movs	r3, #6
 8000636:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000638:	2300      	movs	r3, #0
 800063a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800063c:	237f      	movs	r3, #127	; 0x7f
 800063e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000640:	2304      	movs	r3, #4
 8000642:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	4619      	mov	r1, r3
 800064c:	4805      	ldr	r0, [pc, #20]	; (8000664 <MX_ADC1_Init+0xe0>)
 800064e:	f000 ff5b 	bl	8001508 <HAL_ADC_ConfigChannel>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000658:	f000 f96d 	bl	8000936 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800065c:	bf00      	nop
 800065e:	3728      	adds	r7, #40	; 0x28
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	2000008c 	.word	0x2000008c
 8000668:	50040000 	.word	0x50040000
 800066c:	14f00020 	.word	0x14f00020

08000670 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b0ac      	sub	sp, #176	; 0xb0
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000678:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	2288      	movs	r2, #136	; 0x88
 800068e:	2100      	movs	r1, #0
 8000690:	4618      	mov	r0, r3
 8000692:	f003 ff3b 	bl	800450c <memset>
  if(adcHandle->Instance==ADC1)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a27      	ldr	r2, [pc, #156]	; (8000738 <HAL_ADC_MspInit+0xc8>)
 800069c:	4293      	cmp	r3, r2
 800069e:	d147      	bne.n	8000730 <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006a4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80006a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80006aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80006ae:	2302      	movs	r3, #2
 80006b0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006b2:	2301      	movs	r3, #1
 80006b4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80006b6:	2308      	movs	r3, #8
 80006b8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80006ba:	2307      	movs	r3, #7
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006be:	2302      	movs	r3, #2
 80006c0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80006c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80006ca:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	4618      	mov	r0, r3
 80006d2:	f002 fceb 	bl	80030ac <HAL_RCCEx_PeriphCLKConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80006dc:	f000 f92b 	bl	8000936 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80006e0:	4b16      	ldr	r3, [pc, #88]	; (800073c <HAL_ADC_MspInit+0xcc>)
 80006e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e4:	4a15      	ldr	r2, [pc, #84]	; (800073c <HAL_ADC_MspInit+0xcc>)
 80006e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ec:	4b13      	ldr	r3, [pc, #76]	; (800073c <HAL_ADC_MspInit+0xcc>)
 80006ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006f4:	613b      	str	r3, [r7, #16]
 80006f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f8:	4b10      	ldr	r3, [pc, #64]	; (800073c <HAL_ADC_MspInit+0xcc>)
 80006fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fc:	4a0f      	ldr	r2, [pc, #60]	; (800073c <HAL_ADC_MspInit+0xcc>)
 80006fe:	f043 0301 	orr.w	r3, r3, #1
 8000702:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000704:	4b0d      	ldr	r3, [pc, #52]	; (800073c <HAL_ADC_MspInit+0xcc>)
 8000706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000708:	f003 0301 	and.w	r3, r3, #1
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000710:	2301      	movs	r3, #1
 8000712:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000716:	230b      	movs	r3, #11
 8000718:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000722:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000726:	4619      	mov	r1, r3
 8000728:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072c:	f001 fc98 	bl	8002060 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000730:	bf00      	nop
 8000732:	37b0      	adds	r7, #176	; 0xb0
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	50040000 	.word	0x50040000
 800073c:	40021000 	.word	0x40021000

08000740 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	; 0x28
 8000744:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000746:	f107 0314 	add.w	r3, r7, #20
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000756:	4b2c      	ldr	r3, [pc, #176]	; (8000808 <MX_GPIO_Init+0xc8>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	4a2b      	ldr	r2, [pc, #172]	; (8000808 <MX_GPIO_Init+0xc8>)
 800075c:	f043 0304 	orr.w	r3, r3, #4
 8000760:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000762:	4b29      	ldr	r3, [pc, #164]	; (8000808 <MX_GPIO_Init+0xc8>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	f003 0304 	and.w	r3, r3, #4
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076e:	4b26      	ldr	r3, [pc, #152]	; (8000808 <MX_GPIO_Init+0xc8>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	4a25      	ldr	r2, [pc, #148]	; (8000808 <MX_GPIO_Init+0xc8>)
 8000774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000778:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077a:	4b23      	ldr	r3, [pc, #140]	; (8000808 <MX_GPIO_Init+0xc8>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	4b20      	ldr	r3, [pc, #128]	; (8000808 <MX_GPIO_Init+0xc8>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	4a1f      	ldr	r2, [pc, #124]	; (8000808 <MX_GPIO_Init+0xc8>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000792:	4b1d      	ldr	r3, [pc, #116]	; (8000808 <MX_GPIO_Init+0xc8>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	4b1a      	ldr	r3, [pc, #104]	; (8000808 <MX_GPIO_Init+0xc8>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	4a19      	ldr	r2, [pc, #100]	; (8000808 <MX_GPIO_Init+0xc8>)
 80007a4:	f043 0302 	orr.w	r3, r3, #2
 80007a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007aa:	4b17      	ldr	r3, [pc, #92]	; (8000808 <MX_GPIO_Init+0xc8>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80007bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c0:	f001 fdf8 	bl	80023b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ca:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	4619      	mov	r1, r3
 80007da:	480c      	ldr	r0, [pc, #48]	; (800080c <MX_GPIO_Init+0xcc>)
 80007dc:	f001 fc40 	bl	8002060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_10;
 80007e0:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80007e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e6:	2301      	movs	r3, #1
 80007e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ee:	2300      	movs	r3, #0
 80007f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	4619      	mov	r1, r3
 80007f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007fc:	f001 fc30 	bl	8002060 <HAL_GPIO_Init>

}
 8000800:	bf00      	nop
 8000802:	3728      	adds	r7, #40	; 0x28
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40021000 	.word	0x40021000
 800080c:	48000800 	.word	0x48000800

08000810 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000816:	f000 f9df 	bl	8000bd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800081a:	f000 f83b 	bl	8000894 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800081e:	f7ff ff8f 	bl	8000740 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000822:	f000 f923 	bl	8000a6c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000826:	f7ff fead 	bl	8000584 <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800082a:	2201      	movs	r2, #1
 800082c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000830:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000834:	f001 fdbe 	bl	80023b4 <HAL_GPIO_WritePin>

	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000838:	f04f 31ff 	mov.w	r1, #4294967295
 800083c:	4812      	ldr	r0, [pc, #72]	; (8000888 <main+0x78>)
 800083e:	f000 fd7d 	bl	800133c <HAL_ADC_PollForConversion>
	  raw = HAL_ADC_GetValue(&hadc1);
 8000842:	4811      	ldr	r0, [pc, #68]	; (8000888 <main+0x78>)
 8000844:	f000 fe52 	bl	80014ec <HAL_ADC_GetValue>
 8000848:	4603      	mov	r3, r0
 800084a:	81fb      	strh	r3, [r7, #14]

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800084c:	2200      	movs	r2, #0
 800084e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000852:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000856:	f001 fdad 	bl	80023b4 <HAL_GPIO_WritePin>

	  sprintf(msg,"%hu\r\n",raw);
 800085a:	89fa      	ldrh	r2, [r7, #14]
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	490b      	ldr	r1, [pc, #44]	; (800088c <main+0x7c>)
 8000860:	4618      	mov	r0, r3
 8000862:	f003 fe5b 	bl	800451c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff fcb1 	bl	80001d0 <strlen>
 800086e:	4603      	mov	r3, r0
 8000870:	b29a      	uxth	r2, r3
 8000872:	1d39      	adds	r1, r7, #4
 8000874:	f04f 33ff 	mov.w	r3, #4294967295
 8000878:	4805      	ldr	r0, [pc, #20]	; (8000890 <main+0x80>)
 800087a:	f003 f921 	bl	8003ac0 <HAL_UART_Transmit>
	  HAL_Delay(500);
 800087e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000882:	f000 fa25 	bl	8000cd0 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000886:	e7d0      	b.n	800082a <main+0x1a>
 8000888:	2000008c 	.word	0x2000008c
 800088c:	08004e10 	.word	0x08004e10
 8000890:	200000f4 	.word	0x200000f4

08000894 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b096      	sub	sp, #88	; 0x58
 8000898:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	2244      	movs	r2, #68	; 0x44
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f003 fe32 	bl	800450c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a8:	463b      	mov	r3, r7
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008ba:	f001 fda1 	bl	8002400 <HAL_PWREx_ControlVoltageScaling>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008c4:	f000 f837 	bl	8000936 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008c8:	2302      	movs	r3, #2
 80008ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008d2:	2310      	movs	r3, #16
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d6:	2302      	movs	r3, #2
 80008d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008da:	2302      	movs	r3, #2
 80008dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008de:	2301      	movs	r3, #1
 80008e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80008e2:	230a      	movs	r3, #10
 80008e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008e6:	2307      	movs	r3, #7
 80008e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008ea:	2302      	movs	r3, #2
 80008ec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008ee:	2302      	movs	r3, #2
 80008f0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4618      	mov	r0, r3
 80008f8:	f001 fdd8 	bl	80024ac <HAL_RCC_OscConfig>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000902:	f000 f818 	bl	8000936 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000906:	230f      	movs	r3, #15
 8000908:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800090a:	2303      	movs	r3, #3
 800090c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800090e:	2300      	movs	r3, #0
 8000910:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000916:	2300      	movs	r3, #0
 8000918:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800091a:	463b      	mov	r3, r7
 800091c:	2104      	movs	r1, #4
 800091e:	4618      	mov	r0, r3
 8000920:	f002 f9a0 	bl	8002c64 <HAL_RCC_ClockConfig>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800092a:	f000 f804 	bl	8000936 <Error_Handler>
  }
}
 800092e:	bf00      	nop
 8000930:	3758      	adds	r7, #88	; 0x58
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800093a:	b672      	cpsid	i
}
 800093c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800093e:	e7fe      	b.n	800093e <Error_Handler+0x8>

08000940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <HAL_MspInit+0x44>)
 8000948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800094a:	4a0e      	ldr	r2, [pc, #56]	; (8000984 <HAL_MspInit+0x44>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6613      	str	r3, [r2, #96]	; 0x60
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <HAL_MspInit+0x44>)
 8000954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <HAL_MspInit+0x44>)
 8000960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000962:	4a08      	ldr	r2, [pc, #32]	; (8000984 <HAL_MspInit+0x44>)
 8000964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000968:	6593      	str	r3, [r2, #88]	; 0x58
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <HAL_MspInit+0x44>)
 800096c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800096e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	40021000 	.word	0x40021000

08000988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800098c:	e7fe      	b.n	800098c <NMI_Handler+0x4>

0800098e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000992:	e7fe      	b.n	8000992 <HardFault_Handler+0x4>

08000994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <MemManage_Handler+0x4>

0800099a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800099e:	e7fe      	b.n	800099e <BusFault_Handler+0x4>

080009a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <UsageFault_Handler+0x4>

080009a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr

080009c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d4:	f000 f95c 	bl	8000c90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}

080009dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009e4:	4a14      	ldr	r2, [pc, #80]	; (8000a38 <_sbrk+0x5c>)
 80009e6:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <_sbrk+0x60>)
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009f0:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <_sbrk+0x64>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d102      	bne.n	80009fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009f8:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <_sbrk+0x64>)
 80009fa:	4a12      	ldr	r2, [pc, #72]	; (8000a44 <_sbrk+0x68>)
 80009fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <_sbrk+0x64>)
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4413      	add	r3, r2
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d207      	bcs.n	8000a1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a0c:	f003 fd54 	bl	80044b8 <__errno>
 8000a10:	4603      	mov	r3, r0
 8000a12:	220c      	movs	r2, #12
 8000a14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a16:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1a:	e009      	b.n	8000a30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a1c:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <_sbrk+0x64>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a22:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <_sbrk+0x64>)
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4413      	add	r3, r2
 8000a2a:	4a05      	ldr	r2, [pc, #20]	; (8000a40 <_sbrk+0x64>)
 8000a2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3718      	adds	r7, #24
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20018000 	.word	0x20018000
 8000a3c:	00000400 	.word	0x00000400
 8000a40:	200000f0 	.word	0x200000f0
 8000a44:	20000190 	.word	0x20000190

08000a48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <SystemInit+0x20>)
 8000a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a52:	4a05      	ldr	r2, [pc, #20]	; (8000a68 <SystemInit+0x20>)
 8000a54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a70:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000a72:	4a15      	ldr	r2, [pc, #84]	; (8000ac8 <MX_USART2_UART_Init+0x5c>)
 8000a74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a76:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000a78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7e:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a84:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000a92:	220c      	movs	r2, #12
 8000a94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aa2:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aae:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <MX_USART2_UART_Init+0x58>)
 8000ab0:	f002 ffb8 	bl	8003a24 <HAL_UART_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000aba:	f7ff ff3c 	bl	8000936 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	200000f4 	.word	0x200000f4
 8000ac8:	40004400 	.word	0x40004400

08000acc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b0ac      	sub	sp, #176	; 0xb0
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	2288      	movs	r2, #136	; 0x88
 8000aea:	2100      	movs	r1, #0
 8000aec:	4618      	mov	r0, r3
 8000aee:	f003 fd0d 	bl	800450c <memset>
  if(uartHandle->Instance==USART2)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a21      	ldr	r2, [pc, #132]	; (8000b7c <HAL_UART_MspInit+0xb0>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d13b      	bne.n	8000b74 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000afc:	2302      	movs	r3, #2
 8000afe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b00:	2300      	movs	r3, #0
 8000b02:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f002 facf 	bl	80030ac <HAL_RCCEx_PeriphCLKConfig>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b14:	f7ff ff0f 	bl	8000936 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b18:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <HAL_UART_MspInit+0xb4>)
 8000b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b1c:	4a18      	ldr	r2, [pc, #96]	; (8000b80 <HAL_UART_MspInit+0xb4>)
 8000b1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b22:	6593      	str	r3, [r2, #88]	; 0x58
 8000b24:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <HAL_UART_MspInit+0xb4>)
 8000b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b30:	4b13      	ldr	r3, [pc, #76]	; (8000b80 <HAL_UART_MspInit+0xb4>)
 8000b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b34:	4a12      	ldr	r2, [pc, #72]	; (8000b80 <HAL_UART_MspInit+0xb4>)
 8000b36:	f043 0301 	orr.w	r3, r3, #1
 8000b3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b3c:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <HAL_UART_MspInit+0xb4>)
 8000b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b40:	f003 0301 	and.w	r3, r3, #1
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b48:	230c      	movs	r3, #12
 8000b4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b60:	2307      	movs	r3, #7
 8000b62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b66:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b70:	f001 fa76 	bl	8002060 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b74:	bf00      	nop
 8000b76:	37b0      	adds	r7, #176	; 0xb0
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40004400 	.word	0x40004400
 8000b80:	40021000 	.word	0x40021000

08000b84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bbc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b88:	f7ff ff5e 	bl	8000a48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b8c:	480c      	ldr	r0, [pc, #48]	; (8000bc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b8e:	490d      	ldr	r1, [pc, #52]	; (8000bc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b90:	4a0d      	ldr	r2, [pc, #52]	; (8000bc8 <LoopForever+0xe>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b94:	e002      	b.n	8000b9c <LoopCopyDataInit>

08000b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9a:	3304      	adds	r3, #4

08000b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba0:	d3f9      	bcc.n	8000b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba2:	4a0a      	ldr	r2, [pc, #40]	; (8000bcc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ba4:	4c0a      	ldr	r4, [pc, #40]	; (8000bd0 <LoopForever+0x16>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba8:	e001      	b.n	8000bae <LoopFillZerobss>

08000baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bac:	3204      	adds	r2, #4

08000bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb0:	d3fb      	bcc.n	8000baa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bb2:	f003 fc87 	bl	80044c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bb6:	f7ff fe2b 	bl	8000810 <main>

08000bba <LoopForever>:

LoopForever:
    b LoopForever
 8000bba:	e7fe      	b.n	8000bba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bbc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000bc8:	08004ea4 	.word	0x08004ea4
  ldr r2, =_sbss
 8000bcc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000bd0:	2000018c 	.word	0x2000018c

08000bd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bd4:	e7fe      	b.n	8000bd4 <ADC1_2_IRQHandler>
	...

08000bd8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bde:	2300      	movs	r3, #0
 8000be0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be2:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <HAL_Init+0x3c>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a0b      	ldr	r2, [pc, #44]	; (8000c14 <HAL_Init+0x3c>)
 8000be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bec:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bee:	2003      	movs	r0, #3
 8000bf0:	f001 fa02 	bl	8001ff8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	f000 f80f 	bl	8000c18 <HAL_InitTick>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d002      	beq.n	8000c06 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c00:	2301      	movs	r3, #1
 8000c02:	71fb      	strb	r3, [r7, #7]
 8000c04:	e001      	b.n	8000c0a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c06:	f7ff fe9b 	bl	8000940 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40022000 	.word	0x40022000

08000c18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c20:	2300      	movs	r3, #0
 8000c22:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c24:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <HAL_InitTick+0x6c>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d023      	beq.n	8000c74 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c2c:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <HAL_InitTick+0x70>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <HAL_InitTick+0x6c>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	4619      	mov	r1, r3
 8000c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c42:	4618      	mov	r0, r3
 8000c44:	f001 f9ff 	bl	8002046 <HAL_SYSTICK_Config>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d10f      	bne.n	8000c6e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2b0f      	cmp	r3, #15
 8000c52:	d809      	bhi.n	8000c68 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c54:	2200      	movs	r2, #0
 8000c56:	6879      	ldr	r1, [r7, #4]
 8000c58:	f04f 30ff 	mov.w	r0, #4294967295
 8000c5c:	f001 f9d7 	bl	800200e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c60:	4a0a      	ldr	r2, [pc, #40]	; (8000c8c <HAL_InitTick+0x74>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6013      	str	r3, [r2, #0]
 8000c66:	e007      	b.n	8000c78 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	73fb      	strb	r3, [r7, #15]
 8000c6c:	e004      	b.n	8000c78 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	73fb      	strb	r3, [r7, #15]
 8000c72:	e001      	b.n	8000c78 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c74:	2301      	movs	r3, #1
 8000c76:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000008 	.word	0x20000008
 8000c88:	20000000 	.word	0x20000000
 8000c8c:	20000004 	.word	0x20000004

08000c90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_IncTick+0x20>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_IncTick+0x24>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <HAL_IncTick+0x24>)
 8000ca2:	6013      	str	r3, [r2, #0]
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20000008 	.word	0x20000008
 8000cb4:	20000178 	.word	0x20000178

08000cb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return uwTick;
 8000cbc:	4b03      	ldr	r3, [pc, #12]	; (8000ccc <HAL_GetTick+0x14>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	20000178 	.word	0x20000178

08000cd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cd8:	f7ff ffee 	bl	8000cb8 <HAL_GetTick>
 8000cdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ce8:	d005      	beq.n	8000cf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000cea:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <HAL_Delay+0x44>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	461a      	mov	r2, r3
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cf6:	bf00      	nop
 8000cf8:	f7ff ffde 	bl	8000cb8 <HAL_GetTick>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	68fa      	ldr	r2, [r7, #12]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d8f7      	bhi.n	8000cf8 <HAL_Delay+0x28>
  {
  }
}
 8000d08:	bf00      	nop
 8000d0a:	bf00      	nop
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000008 	.word	0x20000008

08000d18 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	431a      	orrs	r2, r3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	609a      	str	r2, [r3, #8]
}
 8000d32:	bf00      	nop
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	b083      	sub	sp, #12
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
 8000d46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	431a      	orrs	r2, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	609a      	str	r2, [r3, #8]
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b087      	sub	sp, #28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
 8000d8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	3360      	adds	r3, #96	; 0x60
 8000d92:	461a      	mov	r2, r3
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	4413      	add	r3, r2
 8000d9a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <LL_ADC_SetOffset+0x44>)
 8000da2:	4013      	ands	r3, r2
 8000da4:	687a      	ldr	r2, [r7, #4]
 8000da6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000daa:	683a      	ldr	r2, [r7, #0]
 8000dac:	430a      	orrs	r2, r1
 8000dae:	4313      	orrs	r3, r2
 8000db0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000db8:	bf00      	nop
 8000dba:	371c      	adds	r7, #28
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	03fff000 	.word	0x03fff000

08000dc8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	3360      	adds	r3, #96	; 0x60
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	4413      	add	r3, r2
 8000dde:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b087      	sub	sp, #28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	3360      	adds	r3, #96	; 0x60
 8000e04:	461a      	mov	r2, r3
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	4413      	add	r3, r2
 8000e0c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	431a      	orrs	r2, r3
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000e1e:	bf00      	nop
 8000e20:	371c      	adds	r7, #28
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	b083      	sub	sp, #12
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	68db      	ldr	r3, [r3, #12]
 8000e36:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d101      	bne.n	8000e42 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e000      	b.n	8000e44 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000e42:	2300      	movs	r3, #0
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b087      	sub	sp, #28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	3330      	adds	r3, #48	; 0x30
 8000e60:	461a      	mov	r2, r3
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	0a1b      	lsrs	r3, r3, #8
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	f003 030c 	and.w	r3, r3, #12
 8000e6c:	4413      	add	r3, r2
 8000e6e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	f003 031f 	and.w	r3, r3, #31
 8000e7a:	211f      	movs	r1, #31
 8000e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	401a      	ands	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	0e9b      	lsrs	r3, r3, #26
 8000e88:	f003 011f 	and.w	r1, r3, #31
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	f003 031f 	and.w	r3, r3, #31
 8000e92:	fa01 f303 	lsl.w	r3, r1, r3
 8000e96:	431a      	orrs	r2, r3
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e9c:	bf00      	nop
 8000e9e:	371c      	adds	r7, #28
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b087      	sub	sp, #28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	3314      	adds	r3, #20
 8000eb8:	461a      	mov	r2, r3
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	0e5b      	lsrs	r3, r3, #25
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	f003 0304 	and.w	r3, r3, #4
 8000ec4:	4413      	add	r3, r2
 8000ec6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	0d1b      	lsrs	r3, r3, #20
 8000ed0:	f003 031f 	and.w	r3, r3, #31
 8000ed4:	2107      	movs	r1, #7
 8000ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	401a      	ands	r2, r3
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	0d1b      	lsrs	r3, r3, #20
 8000ee2:	f003 031f 	and.w	r3, r3, #31
 8000ee6:	6879      	ldr	r1, [r7, #4]
 8000ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8000eec:	431a      	orrs	r2, r3
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000ef2:	bf00      	nop
 8000ef4:	371c      	adds	r7, #28
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
	...

08000f00 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	401a      	ands	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f003 0318 	and.w	r3, r3, #24
 8000f22:	4908      	ldr	r1, [pc, #32]	; (8000f44 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000f24:	40d9      	lsrs	r1, r3
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	400b      	ands	r3, r1
 8000f2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f2e:	431a      	orrs	r2, r3
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000f36:	bf00      	nop
 8000f38:	3714      	adds	r7, #20
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	0007ffff 	.word	0x0007ffff

08000f48 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	f003 031f 	and.w	r3, r3, #31
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000f90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	6093      	str	r3, [r2, #8]
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000fb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000fb8:	d101      	bne.n	8000fbe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e000      	b.n	8000fc0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000fbe:	2300      	movs	r3, #0
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000fdc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fe0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001004:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001008:	d101      	bne.n	800100e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800100a:	2301      	movs	r3, #1
 800100c:	e000      	b.n	8001010 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800100e:	2300      	movs	r3, #0
}
 8001010:	4618      	mov	r0, r3
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	f003 0301 	and.w	r3, r3, #1
 800102c:	2b01      	cmp	r3, #1
 800102e:	d101      	bne.n	8001034 <LL_ADC_IsEnabled+0x18>
 8001030:	2301      	movs	r3, #1
 8001032:	e000      	b.n	8001036 <LL_ADC_IsEnabled+0x1a>
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	f003 0304 	and.w	r3, r3, #4
 8001052:	2b04      	cmp	r3, #4
 8001054:	d101      	bne.n	800105a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001056:	2301      	movs	r3, #1
 8001058:	e000      	b.n	800105c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800105a:	2300      	movs	r3, #0
}
 800105c:	4618      	mov	r0, r3
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	f003 0308 	and.w	r3, r3, #8
 8001078:	2b08      	cmp	r3, #8
 800107a:	d101      	bne.n	8001080 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800107c:	2301      	movs	r3, #1
 800107e:	e000      	b.n	8001082 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
	...

08001090 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001090:	b590      	push	{r4, r7, lr}
 8001092:	b089      	sub	sp, #36	; 0x24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001098:	2300      	movs	r3, #0
 800109a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800109c:	2300      	movs	r3, #0
 800109e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d101      	bne.n	80010aa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e136      	b.n	8001318 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	691b      	ldr	r3, [r3, #16]
 80010ae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d109      	bne.n	80010cc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f7ff fad9 	bl	8000670 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2200      	movs	r2, #0
 80010c2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff67 	bl	8000fa4 <LL_ADC_IsDeepPowerDownEnabled>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d004      	beq.n	80010e6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff4d 	bl	8000f80 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff ff82 	bl	8000ff4 <LL_ADC_IsInternalRegulatorEnabled>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d115      	bne.n	8001122 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff ff66 	bl	8000fcc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001100:	4b87      	ldr	r3, [pc, #540]	; (8001320 <HAL_ADC_Init+0x290>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	099b      	lsrs	r3, r3, #6
 8001106:	4a87      	ldr	r2, [pc, #540]	; (8001324 <HAL_ADC_Init+0x294>)
 8001108:	fba2 2303 	umull	r2, r3, r2, r3
 800110c:	099b      	lsrs	r3, r3, #6
 800110e:	3301      	adds	r3, #1
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001114:	e002      	b.n	800111c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	3b01      	subs	r3, #1
 800111a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d1f9      	bne.n	8001116 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff ff64 	bl	8000ff4 <LL_ADC_IsInternalRegulatorEnabled>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d10d      	bne.n	800114e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001136:	f043 0210 	orr.w	r2, r3, #16
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001142:	f043 0201 	orr.w	r2, r3, #1
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff ff75 	bl	8001042 <LL_ADC_REG_IsConversionOngoing>
 8001158:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800115e:	f003 0310 	and.w	r3, r3, #16
 8001162:	2b00      	cmp	r3, #0
 8001164:	f040 80cf 	bne.w	8001306 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	2b00      	cmp	r3, #0
 800116c:	f040 80cb 	bne.w	8001306 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001174:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001178:	f043 0202 	orr.w	r2, r3, #2
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff ff49 	bl	800101c <LL_ADC_IsEnabled>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d115      	bne.n	80011bc <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001190:	4865      	ldr	r0, [pc, #404]	; (8001328 <HAL_ADC_Init+0x298>)
 8001192:	f7ff ff43 	bl	800101c <LL_ADC_IsEnabled>
 8001196:	4604      	mov	r4, r0
 8001198:	4864      	ldr	r0, [pc, #400]	; (800132c <HAL_ADC_Init+0x29c>)
 800119a:	f7ff ff3f 	bl	800101c <LL_ADC_IsEnabled>
 800119e:	4603      	mov	r3, r0
 80011a0:	431c      	orrs	r4, r3
 80011a2:	4863      	ldr	r0, [pc, #396]	; (8001330 <HAL_ADC_Init+0x2a0>)
 80011a4:	f7ff ff3a 	bl	800101c <LL_ADC_IsEnabled>
 80011a8:	4603      	mov	r3, r0
 80011aa:	4323      	orrs	r3, r4
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d105      	bne.n	80011bc <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	4619      	mov	r1, r3
 80011b6:	485f      	ldr	r0, [pc, #380]	; (8001334 <HAL_ADC_Init+0x2a4>)
 80011b8:	f7ff fdae 	bl	8000d18 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	7e5b      	ldrb	r3, [r3, #25]
 80011c0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011c6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80011cc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80011d2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011da:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011dc:	4313      	orrs	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d106      	bne.n	80011f8 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ee:	3b01      	subs	r3, #1
 80011f0:	045b      	lsls	r3, r3, #17
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d009      	beq.n	8001214 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001204:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800120c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4313      	orrs	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	68da      	ldr	r2, [r3, #12]
 800121a:	4b47      	ldr	r3, [pc, #284]	; (8001338 <HAL_ADC_Init+0x2a8>)
 800121c:	4013      	ands	r3, r2
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	6812      	ldr	r2, [r2, #0]
 8001222:	69b9      	ldr	r1, [r7, #24]
 8001224:	430b      	orrs	r3, r1
 8001226:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff08 	bl	8001042 <LL_ADC_REG_IsConversionOngoing>
 8001232:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff ff15 	bl	8001068 <LL_ADC_INJ_IsConversionOngoing>
 800123e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d13d      	bne.n	80012c2 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d13a      	bne.n	80012c2 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001250:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001258:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800125a:	4313      	orrs	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001268:	f023 0302 	bic.w	r3, r3, #2
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	6812      	ldr	r2, [r2, #0]
 8001270:	69b9      	ldr	r1, [r7, #24]
 8001272:	430b      	orrs	r3, r1
 8001274:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800127c:	2b01      	cmp	r3, #1
 800127e:	d118      	bne.n	80012b2 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	691b      	ldr	r3, [r3, #16]
 8001286:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800128a:	f023 0304 	bic.w	r3, r3, #4
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001296:	4311      	orrs	r1, r2
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800129c:	4311      	orrs	r1, r2
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80012a2:	430a      	orrs	r2, r1
 80012a4:	431a      	orrs	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f042 0201 	orr.w	r2, r2, #1
 80012ae:	611a      	str	r2, [r3, #16]
 80012b0:	e007      	b.n	80012c2 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	691a      	ldr	r2, [r3, #16]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f022 0201 	bic.w	r2, r2, #1
 80012c0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	691b      	ldr	r3, [r3, #16]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d10c      	bne.n	80012e4 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d0:	f023 010f 	bic.w	r1, r3, #15
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	69db      	ldr	r3, [r3, #28]
 80012d8:	1e5a      	subs	r2, r3, #1
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	430a      	orrs	r2, r1
 80012e0:	631a      	str	r2, [r3, #48]	; 0x30
 80012e2:	e007      	b.n	80012f4 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f022 020f 	bic.w	r2, r2, #15
 80012f2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012f8:	f023 0303 	bic.w	r3, r3, #3
 80012fc:	f043 0201 	orr.w	r2, r3, #1
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	655a      	str	r2, [r3, #84]	; 0x54
 8001304:	e007      	b.n	8001316 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800130a:	f043 0210 	orr.w	r2, r3, #16
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001316:	7ffb      	ldrb	r3, [r7, #31]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3724      	adds	r7, #36	; 0x24
 800131c:	46bd      	mov	sp, r7
 800131e:	bd90      	pop	{r4, r7, pc}
 8001320:	20000000 	.word	0x20000000
 8001324:	053e2d63 	.word	0x053e2d63
 8001328:	50040000 	.word	0x50040000
 800132c:	50040100 	.word	0x50040100
 8001330:	50040200 	.word	0x50040200
 8001334:	50040300 	.word	0x50040300
 8001338:	fff0c007 	.word	0xfff0c007

0800133c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b088      	sub	sp, #32
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001346:	4866      	ldr	r0, [pc, #408]	; (80014e0 <HAL_ADC_PollForConversion+0x1a4>)
 8001348:	f7ff fdfe 	bl	8000f48 <LL_ADC_GetMultimode>
 800134c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	2b08      	cmp	r3, #8
 8001354:	d102      	bne.n	800135c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001356:	2308      	movs	r3, #8
 8001358:	61fb      	str	r3, [r7, #28]
 800135a:	e02a      	b.n	80013b2 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d005      	beq.n	800136e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	2b05      	cmp	r3, #5
 8001366:	d002      	beq.n	800136e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	2b09      	cmp	r3, #9
 800136c:	d111      	bne.n	8001392 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	2b00      	cmp	r3, #0
 800137a:	d007      	beq.n	800138c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001380:	f043 0220 	orr.w	r2, r3, #32
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e0a4      	b.n	80014d6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800138c:	2304      	movs	r3, #4
 800138e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001390:	e00f      	b.n	80013b2 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001392:	4853      	ldr	r0, [pc, #332]	; (80014e0 <HAL_ADC_PollForConversion+0x1a4>)
 8001394:	f7ff fde6 	bl	8000f64 <LL_ADC_GetMultiDMATransfer>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d007      	beq.n	80013ae <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013a2:	f043 0220 	orr.w	r2, r3, #32
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e093      	b.n	80014d6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80013ae:	2304      	movs	r3, #4
 80013b0:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80013b2:	f7ff fc81 	bl	8000cb8 <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80013b8:	e021      	b.n	80013fe <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c0:	d01d      	beq.n	80013fe <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80013c2:	f7ff fc79 	bl	8000cb8 <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	683a      	ldr	r2, [r7, #0]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d302      	bcc.n	80013d8 <HAL_ADC_PollForConversion+0x9c>
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d112      	bne.n	80013fe <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	4013      	ands	r3, r2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d10b      	bne.n	80013fe <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ea:	f043 0204 	orr.w	r2, r3, #4
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2200      	movs	r2, #0
 80013f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e06b      	b.n	80014d6 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	4013      	ands	r3, r2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d0d6      	beq.n	80013ba <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001410:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff fd04 	bl	8000e2a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d01c      	beq.n	8001462 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	7e5b      	ldrb	r3, [r3, #25]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d118      	bne.n	8001462 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0308 	and.w	r3, r3, #8
 800143a:	2b08      	cmp	r3, #8
 800143c:	d111      	bne.n	8001462 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001442:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800144e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d105      	bne.n	8001462 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800145a:	f043 0201 	orr.w	r2, r3, #1
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a1f      	ldr	r2, [pc, #124]	; (80014e4 <HAL_ADC_PollForConversion+0x1a8>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d002      	beq.n	8001472 <HAL_ADC_PollForConversion+0x136>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	e000      	b.n	8001474 <HAL_ADC_PollForConversion+0x138>
 8001472:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <HAL_ADC_PollForConversion+0x1ac>)
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	6812      	ldr	r2, [r2, #0]
 8001478:	4293      	cmp	r3, r2
 800147a:	d008      	beq.n	800148e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d005      	beq.n	800148e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	2b05      	cmp	r3, #5
 8001486:	d002      	beq.n	800148e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	2b09      	cmp	r3, #9
 800148c:	d104      	bne.n	8001498 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	61bb      	str	r3, [r7, #24]
 8001496:	e00c      	b.n	80014b2 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a11      	ldr	r2, [pc, #68]	; (80014e4 <HAL_ADC_PollForConversion+0x1a8>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d002      	beq.n	80014a8 <HAL_ADC_PollForConversion+0x16c>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	e000      	b.n	80014aa <HAL_ADC_PollForConversion+0x16e>
 80014a8:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <HAL_ADC_PollForConversion+0x1ac>)
 80014aa:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	2b08      	cmp	r3, #8
 80014b6:	d104      	bne.n	80014c2 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2208      	movs	r2, #8
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	e008      	b.n	80014d4 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d103      	bne.n	80014d4 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	220c      	movs	r2, #12
 80014d2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3720      	adds	r7, #32
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	50040300 	.word	0x50040300
 80014e4:	50040100 	.word	0x50040100
 80014e8:	50040000 	.word	0x50040000

080014ec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
	...

08001508 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b0b6      	sub	sp, #216	; 0xd8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001512:	2300      	movs	r3, #0
 8001514:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001518:	2300      	movs	r3, #0
 800151a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001522:	2b01      	cmp	r3, #1
 8001524:	d101      	bne.n	800152a <HAL_ADC_ConfigChannel+0x22>
 8001526:	2302      	movs	r3, #2
 8001528:	e3c7      	b.n	8001cba <HAL_ADC_ConfigChannel+0x7b2>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2201      	movs	r2, #1
 800152e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff fd83 	bl	8001042 <LL_ADC_REG_IsConversionOngoing>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	f040 83a8 	bne.w	8001c94 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	2b05      	cmp	r3, #5
 800154a:	d824      	bhi.n	8001596 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	3b02      	subs	r3, #2
 8001552:	2b03      	cmp	r3, #3
 8001554:	d81b      	bhi.n	800158e <HAL_ADC_ConfigChannel+0x86>
 8001556:	a201      	add	r2, pc, #4	; (adr r2, 800155c <HAL_ADC_ConfigChannel+0x54>)
 8001558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800155c:	0800156d 	.word	0x0800156d
 8001560:	08001575 	.word	0x08001575
 8001564:	0800157d 	.word	0x0800157d
 8001568:	08001585 	.word	0x08001585
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	220c      	movs	r2, #12
 8001570:	605a      	str	r2, [r3, #4]
          break;
 8001572:	e011      	b.n	8001598 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	2212      	movs	r2, #18
 8001578:	605a      	str	r2, [r3, #4]
          break;
 800157a:	e00d      	b.n	8001598 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	2218      	movs	r2, #24
 8001580:	605a      	str	r2, [r3, #4]
          break;
 8001582:	e009      	b.n	8001598 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	f44f 7280 	mov.w	r2, #256	; 0x100
 800158a:	605a      	str	r2, [r3, #4]
          break;
 800158c:	e004      	b.n	8001598 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	2206      	movs	r2, #6
 8001592:	605a      	str	r2, [r3, #4]
          break;
 8001594:	e000      	b.n	8001598 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001596:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6818      	ldr	r0, [r3, #0]
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	6859      	ldr	r1, [r3, #4]
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	461a      	mov	r2, r3
 80015a6:	f7ff fc53 	bl	8000e50 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fd47 	bl	8001042 <LL_ADC_REG_IsConversionOngoing>
 80015b4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff fd53 	bl	8001068 <LL_ADC_INJ_IsConversionOngoing>
 80015c2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80015c6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f040 81a6 	bne.w	800191c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80015d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f040 81a1 	bne.w	800191c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6818      	ldr	r0, [r3, #0]
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	6819      	ldr	r1, [r3, #0]
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	461a      	mov	r2, r3
 80015e8:	f7ff fc5e 	bl	8000ea8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	695a      	ldr	r2, [r3, #20]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	08db      	lsrs	r3, r3, #3
 80015f8:	f003 0303 	and.w	r3, r3, #3
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	2b04      	cmp	r3, #4
 800160c:	d00a      	beq.n	8001624 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6818      	ldr	r0, [r3, #0]
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	6919      	ldr	r1, [r3, #16]
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800161e:	f7ff fbaf 	bl	8000d80 <LL_ADC_SetOffset>
 8001622:	e17b      	b.n	800191c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2100      	movs	r1, #0
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff fbcc 	bl	8000dc8 <LL_ADC_GetOffsetChannel>
 8001630:	4603      	mov	r3, r0
 8001632:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001636:	2b00      	cmp	r3, #0
 8001638:	d10a      	bne.n	8001650 <HAL_ADC_ConfigChannel+0x148>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2100      	movs	r1, #0
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fbc1 	bl	8000dc8 <LL_ADC_GetOffsetChannel>
 8001646:	4603      	mov	r3, r0
 8001648:	0e9b      	lsrs	r3, r3, #26
 800164a:	f003 021f 	and.w	r2, r3, #31
 800164e:	e01e      	b.n	800168e <HAL_ADC_ConfigChannel+0x186>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2100      	movs	r1, #0
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff fbb6 	bl	8000dc8 <LL_ADC_GetOffsetChannel>
 800165c:	4603      	mov	r3, r0
 800165e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001662:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001666:	fa93 f3a3 	rbit	r3, r3
 800166a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800166e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001672:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001676:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800167e:	2320      	movs	r3, #32
 8001680:	e004      	b.n	800168c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001682:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001686:	fab3 f383 	clz	r3, r3
 800168a:	b2db      	uxtb	r3, r3
 800168c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001696:	2b00      	cmp	r3, #0
 8001698:	d105      	bne.n	80016a6 <HAL_ADC_ConfigChannel+0x19e>
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	0e9b      	lsrs	r3, r3, #26
 80016a0:	f003 031f 	and.w	r3, r3, #31
 80016a4:	e018      	b.n	80016d8 <HAL_ADC_ConfigChannel+0x1d0>
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80016b2:	fa93 f3a3 	rbit	r3, r3
 80016b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80016ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80016c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80016ca:	2320      	movs	r3, #32
 80016cc:	e004      	b.n	80016d8 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80016ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80016d2:	fab3 f383 	clz	r3, r3
 80016d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80016d8:	429a      	cmp	r2, r3
 80016da:	d106      	bne.n	80016ea <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2200      	movs	r2, #0
 80016e2:	2100      	movs	r1, #0
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff fb85 	bl	8000df4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2101      	movs	r1, #1
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fb69 	bl	8000dc8 <LL_ADC_GetOffsetChannel>
 80016f6:	4603      	mov	r3, r0
 80016f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d10a      	bne.n	8001716 <HAL_ADC_ConfigChannel+0x20e>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2101      	movs	r1, #1
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff fb5e 	bl	8000dc8 <LL_ADC_GetOffsetChannel>
 800170c:	4603      	mov	r3, r0
 800170e:	0e9b      	lsrs	r3, r3, #26
 8001710:	f003 021f 	and.w	r2, r3, #31
 8001714:	e01e      	b.n	8001754 <HAL_ADC_ConfigChannel+0x24c>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2101      	movs	r1, #1
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fb53 	bl	8000dc8 <LL_ADC_GetOffsetChannel>
 8001722:	4603      	mov	r3, r0
 8001724:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001728:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800172c:	fa93 f3a3 	rbit	r3, r3
 8001730:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001734:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001738:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800173c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001740:	2b00      	cmp	r3, #0
 8001742:	d101      	bne.n	8001748 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001744:	2320      	movs	r3, #32
 8001746:	e004      	b.n	8001752 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001748:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800174c:	fab3 f383 	clz	r3, r3
 8001750:	b2db      	uxtb	r3, r3
 8001752:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800175c:	2b00      	cmp	r3, #0
 800175e:	d105      	bne.n	800176c <HAL_ADC_ConfigChannel+0x264>
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	0e9b      	lsrs	r3, r3, #26
 8001766:	f003 031f 	and.w	r3, r3, #31
 800176a:	e018      	b.n	800179e <HAL_ADC_ConfigChannel+0x296>
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001774:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001778:	fa93 f3a3 	rbit	r3, r3
 800177c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001780:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001784:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001788:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800178c:	2b00      	cmp	r3, #0
 800178e:	d101      	bne.n	8001794 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001790:	2320      	movs	r3, #32
 8001792:	e004      	b.n	800179e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001794:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001798:	fab3 f383 	clz	r3, r3
 800179c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800179e:	429a      	cmp	r2, r3
 80017a0:	d106      	bne.n	80017b0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2200      	movs	r2, #0
 80017a8:	2101      	movs	r1, #1
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff fb22 	bl	8000df4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2102      	movs	r1, #2
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff fb06 	bl	8000dc8 <LL_ADC_GetOffsetChannel>
 80017bc:	4603      	mov	r3, r0
 80017be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d10a      	bne.n	80017dc <HAL_ADC_ConfigChannel+0x2d4>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2102      	movs	r1, #2
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff fafb 	bl	8000dc8 <LL_ADC_GetOffsetChannel>
 80017d2:	4603      	mov	r3, r0
 80017d4:	0e9b      	lsrs	r3, r3, #26
 80017d6:	f003 021f 	and.w	r2, r3, #31
 80017da:	e01e      	b.n	800181a <HAL_ADC_ConfigChannel+0x312>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2102      	movs	r1, #2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff faf0 	bl	8000dc8 <LL_ADC_GetOffsetChannel>
 80017e8:	4603      	mov	r3, r0
 80017ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80017f2:	fa93 f3a3 	rbit	r3, r3
 80017f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80017fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80017fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001802:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800180a:	2320      	movs	r3, #32
 800180c:	e004      	b.n	8001818 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800180e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001812:	fab3 f383 	clz	r3, r3
 8001816:	b2db      	uxtb	r3, r3
 8001818:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001822:	2b00      	cmp	r3, #0
 8001824:	d105      	bne.n	8001832 <HAL_ADC_ConfigChannel+0x32a>
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	0e9b      	lsrs	r3, r3, #26
 800182c:	f003 031f 	and.w	r3, r3, #31
 8001830:	e016      	b.n	8001860 <HAL_ADC_ConfigChannel+0x358>
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800183e:	fa93 f3a3 	rbit	r3, r3
 8001842:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001844:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001846:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800184a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001852:	2320      	movs	r3, #32
 8001854:	e004      	b.n	8001860 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001856:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800185a:	fab3 f383 	clz	r3, r3
 800185e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001860:	429a      	cmp	r2, r3
 8001862:	d106      	bne.n	8001872 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2200      	movs	r2, #0
 800186a:	2102      	movs	r1, #2
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff fac1 	bl	8000df4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2103      	movs	r1, #3
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff faa5 	bl	8000dc8 <LL_ADC_GetOffsetChannel>
 800187e:	4603      	mov	r3, r0
 8001880:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001884:	2b00      	cmp	r3, #0
 8001886:	d10a      	bne.n	800189e <HAL_ADC_ConfigChannel+0x396>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2103      	movs	r1, #3
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff fa9a 	bl	8000dc8 <LL_ADC_GetOffsetChannel>
 8001894:	4603      	mov	r3, r0
 8001896:	0e9b      	lsrs	r3, r3, #26
 8001898:	f003 021f 	and.w	r2, r3, #31
 800189c:	e017      	b.n	80018ce <HAL_ADC_ConfigChannel+0x3c6>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2103      	movs	r1, #3
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff fa8f 	bl	8000dc8 <LL_ADC_GetOffsetChannel>
 80018aa:	4603      	mov	r3, r0
 80018ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018b0:	fa93 f3a3 	rbit	r3, r3
 80018b4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80018b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018b8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80018ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d101      	bne.n	80018c4 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80018c0:	2320      	movs	r3, #32
 80018c2:	e003      	b.n	80018cc <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80018c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80018c6:	fab3 f383 	clz	r3, r3
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d105      	bne.n	80018e6 <HAL_ADC_ConfigChannel+0x3de>
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	0e9b      	lsrs	r3, r3, #26
 80018e0:	f003 031f 	and.w	r3, r3, #31
 80018e4:	e011      	b.n	800190a <HAL_ADC_ConfigChannel+0x402>
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80018ee:	fa93 f3a3 	rbit	r3, r3
 80018f2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80018f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80018f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80018fe:	2320      	movs	r3, #32
 8001900:	e003      	b.n	800190a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001904:	fab3 f383 	clz	r3, r3
 8001908:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800190a:	429a      	cmp	r2, r3
 800190c:	d106      	bne.n	800191c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2200      	movs	r2, #0
 8001914:	2103      	movs	r1, #3
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff fa6c 	bl	8000df4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff fb7b 	bl	800101c <LL_ADC_IsEnabled>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	f040 813f 	bne.w	8001bac <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6818      	ldr	r0, [r3, #0]
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	6819      	ldr	r1, [r3, #0]
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	461a      	mov	r2, r3
 800193c:	f7ff fae0 	bl	8000f00 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	4a8e      	ldr	r2, [pc, #568]	; (8001b80 <HAL_ADC_ConfigChannel+0x678>)
 8001946:	4293      	cmp	r3, r2
 8001948:	f040 8130 	bne.w	8001bac <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001958:	2b00      	cmp	r3, #0
 800195a:	d10b      	bne.n	8001974 <HAL_ADC_ConfigChannel+0x46c>
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	0e9b      	lsrs	r3, r3, #26
 8001962:	3301      	adds	r3, #1
 8001964:	f003 031f 	and.w	r3, r3, #31
 8001968:	2b09      	cmp	r3, #9
 800196a:	bf94      	ite	ls
 800196c:	2301      	movls	r3, #1
 800196e:	2300      	movhi	r3, #0
 8001970:	b2db      	uxtb	r3, r3
 8001972:	e019      	b.n	80019a8 <HAL_ADC_ConfigChannel+0x4a0>
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800197c:	fa93 f3a3 	rbit	r3, r3
 8001980:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001982:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001984:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001986:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001988:	2b00      	cmp	r3, #0
 800198a:	d101      	bne.n	8001990 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800198c:	2320      	movs	r3, #32
 800198e:	e003      	b.n	8001998 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001990:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001992:	fab3 f383 	clz	r3, r3
 8001996:	b2db      	uxtb	r3, r3
 8001998:	3301      	adds	r3, #1
 800199a:	f003 031f 	and.w	r3, r3, #31
 800199e:	2b09      	cmp	r3, #9
 80019a0:	bf94      	ite	ls
 80019a2:	2301      	movls	r3, #1
 80019a4:	2300      	movhi	r3, #0
 80019a6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d079      	beq.n	8001aa0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d107      	bne.n	80019c8 <HAL_ADC_ConfigChannel+0x4c0>
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	0e9b      	lsrs	r3, r3, #26
 80019be:	3301      	adds	r3, #1
 80019c0:	069b      	lsls	r3, r3, #26
 80019c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019c6:	e015      	b.n	80019f4 <HAL_ADC_ConfigChannel+0x4ec>
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019d0:	fa93 f3a3 	rbit	r3, r3
 80019d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80019d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019d8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80019da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80019e0:	2320      	movs	r3, #32
 80019e2:	e003      	b.n	80019ec <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80019e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019e6:	fab3 f383 	clz	r3, r3
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	3301      	adds	r3, #1
 80019ee:	069b      	lsls	r3, r3, #26
 80019f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d109      	bne.n	8001a14 <HAL_ADC_ConfigChannel+0x50c>
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	0e9b      	lsrs	r3, r3, #26
 8001a06:	3301      	adds	r3, #1
 8001a08:	f003 031f 	and.w	r3, r3, #31
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a12:	e017      	b.n	8001a44 <HAL_ADC_ConfigChannel+0x53c>
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a1c:	fa93 f3a3 	rbit	r3, r3
 8001a20:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001a22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a24:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001a26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d101      	bne.n	8001a30 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001a2c:	2320      	movs	r3, #32
 8001a2e:	e003      	b.n	8001a38 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001a30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a32:	fab3 f383 	clz	r3, r3
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	3301      	adds	r3, #1
 8001a3a:	f003 031f 	and.w	r3, r3, #31
 8001a3e:	2101      	movs	r1, #1
 8001a40:	fa01 f303 	lsl.w	r3, r1, r3
 8001a44:	ea42 0103 	orr.w	r1, r2, r3
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d10a      	bne.n	8001a6a <HAL_ADC_ConfigChannel+0x562>
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	0e9b      	lsrs	r3, r3, #26
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	f003 021f 	and.w	r2, r3, #31
 8001a60:	4613      	mov	r3, r2
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	4413      	add	r3, r2
 8001a66:	051b      	lsls	r3, r3, #20
 8001a68:	e018      	b.n	8001a9c <HAL_ADC_ConfigChannel+0x594>
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a72:	fa93 f3a3 	rbit	r3, r3
 8001a76:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001a82:	2320      	movs	r3, #32
 8001a84:	e003      	b.n	8001a8e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a88:	fab3 f383 	clz	r3, r3
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	3301      	adds	r3, #1
 8001a90:	f003 021f 	and.w	r2, r3, #31
 8001a94:	4613      	mov	r3, r2
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	4413      	add	r3, r2
 8001a9a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a9c:	430b      	orrs	r3, r1
 8001a9e:	e080      	b.n	8001ba2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d107      	bne.n	8001abc <HAL_ADC_ConfigChannel+0x5b4>
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	0e9b      	lsrs	r3, r3, #26
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	069b      	lsls	r3, r3, #26
 8001ab6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001aba:	e015      	b.n	8001ae8 <HAL_ADC_ConfigChannel+0x5e0>
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac4:	fa93 f3a3 	rbit	r3, r3
 8001ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001acc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001ad4:	2320      	movs	r3, #32
 8001ad6:	e003      	b.n	8001ae0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ada:	fab3 f383 	clz	r3, r3
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	069b      	lsls	r3, r3, #26
 8001ae4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d109      	bne.n	8001b08 <HAL_ADC_ConfigChannel+0x600>
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	0e9b      	lsrs	r3, r3, #26
 8001afa:	3301      	adds	r3, #1
 8001afc:	f003 031f 	and.w	r3, r3, #31
 8001b00:	2101      	movs	r1, #1
 8001b02:	fa01 f303 	lsl.w	r3, r1, r3
 8001b06:	e017      	b.n	8001b38 <HAL_ADC_ConfigChannel+0x630>
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0e:	6a3b      	ldr	r3, [r7, #32]
 8001b10:	fa93 f3a3 	rbit	r3, r3
 8001b14:	61fb      	str	r3, [r7, #28]
  return result;
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d101      	bne.n	8001b24 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001b20:	2320      	movs	r3, #32
 8001b22:	e003      	b.n	8001b2c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b26:	fab3 f383 	clz	r3, r3
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	f003 031f 	and.w	r3, r3, #31
 8001b32:	2101      	movs	r1, #1
 8001b34:	fa01 f303 	lsl.w	r3, r1, r3
 8001b38:	ea42 0103 	orr.w	r1, r2, r3
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d10d      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x65c>
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	0e9b      	lsrs	r3, r3, #26
 8001b4e:	3301      	adds	r3, #1
 8001b50:	f003 021f 	and.w	r2, r3, #31
 8001b54:	4613      	mov	r3, r2
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	4413      	add	r3, r2
 8001b5a:	3b1e      	subs	r3, #30
 8001b5c:	051b      	lsls	r3, r3, #20
 8001b5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b62:	e01d      	b.n	8001ba0 <HAL_ADC_ConfigChannel+0x698>
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	fa93 f3a3 	rbit	r3, r3
 8001b70:	613b      	str	r3, [r7, #16]
  return result;
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d103      	bne.n	8001b84 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8001b7c:	2320      	movs	r3, #32
 8001b7e:	e005      	b.n	8001b8c <HAL_ADC_ConfigChannel+0x684>
 8001b80:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	fab3 f383 	clz	r3, r3
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	f003 021f 	and.w	r2, r3, #31
 8001b92:	4613      	mov	r3, r2
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	4413      	add	r3, r2
 8001b98:	3b1e      	subs	r3, #30
 8001b9a:	051b      	lsls	r3, r3, #20
 8001b9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ba0:	430b      	orrs	r3, r1
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	6892      	ldr	r2, [r2, #8]
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	f7ff f97e 	bl	8000ea8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4b44      	ldr	r3, [pc, #272]	; (8001cc4 <HAL_ADC_ConfigChannel+0x7bc>)
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d07a      	beq.n	8001cae <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001bb8:	4843      	ldr	r0, [pc, #268]	; (8001cc8 <HAL_ADC_ConfigChannel+0x7c0>)
 8001bba:	f7ff f8d3 	bl	8000d64 <LL_ADC_GetCommonPathInternalCh>
 8001bbe:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a41      	ldr	r2, [pc, #260]	; (8001ccc <HAL_ADC_ConfigChannel+0x7c4>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d12c      	bne.n	8001c26 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001bcc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001bd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d126      	bne.n	8001c26 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a3c      	ldr	r2, [pc, #240]	; (8001cd0 <HAL_ADC_ConfigChannel+0x7c8>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d004      	beq.n	8001bec <HAL_ADC_ConfigChannel+0x6e4>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a3b      	ldr	r2, [pc, #236]	; (8001cd4 <HAL_ADC_ConfigChannel+0x7cc>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d15d      	bne.n	8001ca8 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001bf0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4834      	ldr	r0, [pc, #208]	; (8001cc8 <HAL_ADC_ConfigChannel+0x7c0>)
 8001bf8:	f7ff f8a1 	bl	8000d3e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bfc:	4b36      	ldr	r3, [pc, #216]	; (8001cd8 <HAL_ADC_ConfigChannel+0x7d0>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	099b      	lsrs	r3, r3, #6
 8001c02:	4a36      	ldr	r2, [pc, #216]	; (8001cdc <HAL_ADC_ConfigChannel+0x7d4>)
 8001c04:	fba2 2303 	umull	r2, r3, r2, r3
 8001c08:	099b      	lsrs	r3, r3, #6
 8001c0a:	1c5a      	adds	r2, r3, #1
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	4413      	add	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c16:	e002      	b.n	8001c1e <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1f9      	bne.n	8001c18 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c24:	e040      	b.n	8001ca8 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a2d      	ldr	r2, [pc, #180]	; (8001ce0 <HAL_ADC_ConfigChannel+0x7d8>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d118      	bne.n	8001c62 <HAL_ADC_ConfigChannel+0x75a>
 8001c30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d112      	bne.n	8001c62 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a23      	ldr	r2, [pc, #140]	; (8001cd0 <HAL_ADC_ConfigChannel+0x7c8>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d004      	beq.n	8001c50 <HAL_ADC_ConfigChannel+0x748>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a22      	ldr	r2, [pc, #136]	; (8001cd4 <HAL_ADC_ConfigChannel+0x7cc>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d12d      	bne.n	8001cac <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c58:	4619      	mov	r1, r3
 8001c5a:	481b      	ldr	r0, [pc, #108]	; (8001cc8 <HAL_ADC_ConfigChannel+0x7c0>)
 8001c5c:	f7ff f86f 	bl	8000d3e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001c60:	e024      	b.n	8001cac <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a1f      	ldr	r2, [pc, #124]	; (8001ce4 <HAL_ADC_ConfigChannel+0x7dc>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d120      	bne.n	8001cae <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001c6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d11a      	bne.n	8001cae <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a14      	ldr	r2, [pc, #80]	; (8001cd0 <HAL_ADC_ConfigChannel+0x7c8>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d115      	bne.n	8001cae <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	480e      	ldr	r0, [pc, #56]	; (8001cc8 <HAL_ADC_ConfigChannel+0x7c0>)
 8001c8e:	f7ff f856 	bl	8000d3e <LL_ADC_SetCommonPathInternalCh>
 8001c92:	e00c      	b.n	8001cae <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c98:	f043 0220 	orr.w	r2, r3, #32
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001ca6:	e002      	b.n	8001cae <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ca8:	bf00      	nop
 8001caa:	e000      	b.n	8001cae <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001cac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001cb6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	37d8      	adds	r7, #216	; 0xd8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	80080000 	.word	0x80080000
 8001cc8:	50040300 	.word	0x50040300
 8001ccc:	c7520000 	.word	0xc7520000
 8001cd0:	50040000 	.word	0x50040000
 8001cd4:	50040200 	.word	0x50040200
 8001cd8:	20000000 	.word	0x20000000
 8001cdc:	053e2d63 	.word	0x053e2d63
 8001ce0:	cb840000 	.word	0xcb840000
 8001ce4:	80000001 	.word	0x80000001

08001ce8 <LL_ADC_IsEnabled>:
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d101      	bne.n	8001d00 <LL_ADC_IsEnabled+0x18>
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e000      	b.n	8001d02 <LL_ADC_IsEnabled+0x1a>
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <LL_ADC_REG_IsConversionOngoing>:
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 0304 	and.w	r3, r3, #4
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	d101      	bne.n	8001d26 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d22:	2301      	movs	r3, #1
 8001d24:	e000      	b.n	8001d28 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001d34:	b590      	push	{r4, r7, lr}
 8001d36:	b09f      	sub	sp, #124	; 0x7c
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d101      	bne.n	8001d52 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001d4e:	2302      	movs	r3, #2
 8001d50:	e093      	b.n	8001e7a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001d5e:	2300      	movs	r3, #0
 8001d60:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a47      	ldr	r2, [pc, #284]	; (8001e84 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d102      	bne.n	8001d72 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001d6c:	4b46      	ldr	r3, [pc, #280]	; (8001e88 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001d6e:	60bb      	str	r3, [r7, #8]
 8001d70:	e001      	b.n	8001d76 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001d72:	2300      	movs	r3, #0
 8001d74:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d10b      	bne.n	8001d94 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d80:	f043 0220 	orr.w	r2, r3, #32
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e072      	b.n	8001e7a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff ffb9 	bl	8001d0e <LL_ADC_REG_IsConversionOngoing>
 8001d9c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff ffb3 	bl	8001d0e <LL_ADC_REG_IsConversionOngoing>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d154      	bne.n	8001e58 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001dae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d151      	bne.n	8001e58 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001db4:	4b35      	ldr	r3, [pc, #212]	; (8001e8c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001db6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d02c      	beq.n	8001e1a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001dc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	6859      	ldr	r1, [r3, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001dd2:	035b      	lsls	r3, r3, #13
 8001dd4:	430b      	orrs	r3, r1
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dda:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ddc:	4829      	ldr	r0, [pc, #164]	; (8001e84 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001dde:	f7ff ff83 	bl	8001ce8 <LL_ADC_IsEnabled>
 8001de2:	4604      	mov	r4, r0
 8001de4:	4828      	ldr	r0, [pc, #160]	; (8001e88 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001de6:	f7ff ff7f 	bl	8001ce8 <LL_ADC_IsEnabled>
 8001dea:	4603      	mov	r3, r0
 8001dec:	431c      	orrs	r4, r3
 8001dee:	4828      	ldr	r0, [pc, #160]	; (8001e90 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001df0:	f7ff ff7a 	bl	8001ce8 <LL_ADC_IsEnabled>
 8001df4:	4603      	mov	r3, r0
 8001df6:	4323      	orrs	r3, r4
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d137      	bne.n	8001e6c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001e04:	f023 030f 	bic.w	r3, r3, #15
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	6811      	ldr	r1, [r2, #0]
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	6892      	ldr	r2, [r2, #8]
 8001e10:	430a      	orrs	r2, r1
 8001e12:	431a      	orrs	r2, r3
 8001e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e16:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e18:	e028      	b.n	8001e6c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001e1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e24:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e26:	4817      	ldr	r0, [pc, #92]	; (8001e84 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001e28:	f7ff ff5e 	bl	8001ce8 <LL_ADC_IsEnabled>
 8001e2c:	4604      	mov	r4, r0
 8001e2e:	4816      	ldr	r0, [pc, #88]	; (8001e88 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001e30:	f7ff ff5a 	bl	8001ce8 <LL_ADC_IsEnabled>
 8001e34:	4603      	mov	r3, r0
 8001e36:	431c      	orrs	r4, r3
 8001e38:	4815      	ldr	r0, [pc, #84]	; (8001e90 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001e3a:	f7ff ff55 	bl	8001ce8 <LL_ADC_IsEnabled>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	4323      	orrs	r3, r4
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d112      	bne.n	8001e6c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001e4e:	f023 030f 	bic.w	r3, r3, #15
 8001e52:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001e54:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e56:	e009      	b.n	8001e6c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e5c:	f043 0220 	orr.w	r2, r3, #32
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001e6a:	e000      	b.n	8001e6e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e6c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001e76:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	377c      	adds	r7, #124	; 0x7c
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd90      	pop	{r4, r7, pc}
 8001e82:	bf00      	nop
 8001e84:	50040000 	.word	0x50040000
 8001e88:	50040100 	.word	0x50040100
 8001e8c:	50040300 	.word	0x50040300
 8001e90:	50040200 	.word	0x50040200

08001e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ebc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ec6:	4a04      	ldr	r2, [pc, #16]	; (8001ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	60d3      	str	r3, [r2, #12]
}
 8001ecc:	bf00      	nop
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ee0:	4b04      	ldr	r3, [pc, #16]	; (8001ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	0a1b      	lsrs	r3, r3, #8
 8001ee6:	f003 0307 	and.w	r3, r3, #7
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	6039      	str	r1, [r7, #0]
 8001f02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	db0a      	blt.n	8001f22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	490c      	ldr	r1, [pc, #48]	; (8001f44 <__NVIC_SetPriority+0x4c>)
 8001f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f16:	0112      	lsls	r2, r2, #4
 8001f18:	b2d2      	uxtb	r2, r2
 8001f1a:	440b      	add	r3, r1
 8001f1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f20:	e00a      	b.n	8001f38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	4908      	ldr	r1, [pc, #32]	; (8001f48 <__NVIC_SetPriority+0x50>)
 8001f28:	79fb      	ldrb	r3, [r7, #7]
 8001f2a:	f003 030f 	and.w	r3, r3, #15
 8001f2e:	3b04      	subs	r3, #4
 8001f30:	0112      	lsls	r2, r2, #4
 8001f32:	b2d2      	uxtb	r2, r2
 8001f34:	440b      	add	r3, r1
 8001f36:	761a      	strb	r2, [r3, #24]
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	e000e100 	.word	0xe000e100
 8001f48:	e000ed00 	.word	0xe000ed00

08001f4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b089      	sub	sp, #36	; 0x24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	f1c3 0307 	rsb	r3, r3, #7
 8001f66:	2b04      	cmp	r3, #4
 8001f68:	bf28      	it	cs
 8001f6a:	2304      	movcs	r3, #4
 8001f6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	3304      	adds	r3, #4
 8001f72:	2b06      	cmp	r3, #6
 8001f74:	d902      	bls.n	8001f7c <NVIC_EncodePriority+0x30>
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	3b03      	subs	r3, #3
 8001f7a:	e000      	b.n	8001f7e <NVIC_EncodePriority+0x32>
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f80:	f04f 32ff 	mov.w	r2, #4294967295
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	43da      	mvns	r2, r3
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	401a      	ands	r2, r3
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f94:	f04f 31ff 	mov.w	r1, #4294967295
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9e:	43d9      	mvns	r1, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa4:	4313      	orrs	r3, r2
         );
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3724      	adds	r7, #36	; 0x24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
	...

08001fb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fc4:	d301      	bcc.n	8001fca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e00f      	b.n	8001fea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fca:	4a0a      	ldr	r2, [pc, #40]	; (8001ff4 <SysTick_Config+0x40>)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fd2:	210f      	movs	r1, #15
 8001fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd8:	f7ff ff8e 	bl	8001ef8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fdc:	4b05      	ldr	r3, [pc, #20]	; (8001ff4 <SysTick_Config+0x40>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fe2:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <SysTick_Config+0x40>)
 8001fe4:	2207      	movs	r2, #7
 8001fe6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	e000e010 	.word	0xe000e010

08001ff8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f7ff ff47 	bl	8001e94 <__NVIC_SetPriorityGrouping>
}
 8002006:	bf00      	nop
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b086      	sub	sp, #24
 8002012:	af00      	add	r7, sp, #0
 8002014:	4603      	mov	r3, r0
 8002016:	60b9      	str	r1, [r7, #8]
 8002018:	607a      	str	r2, [r7, #4]
 800201a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002020:	f7ff ff5c 	bl	8001edc <__NVIC_GetPriorityGrouping>
 8002024:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	68b9      	ldr	r1, [r7, #8]
 800202a:	6978      	ldr	r0, [r7, #20]
 800202c:	f7ff ff8e 	bl	8001f4c <NVIC_EncodePriority>
 8002030:	4602      	mov	r2, r0
 8002032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002036:	4611      	mov	r1, r2
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff ff5d 	bl	8001ef8 <__NVIC_SetPriority>
}
 800203e:	bf00      	nop
 8002040:	3718      	adds	r7, #24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b082      	sub	sp, #8
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7ff ffb0 	bl	8001fb4 <SysTick_Config>
 8002054:	4603      	mov	r3, r0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
	...

08002060 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002060:	b480      	push	{r7}
 8002062:	b087      	sub	sp, #28
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800206a:	2300      	movs	r3, #0
 800206c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800206e:	e17f      	b.n	8002370 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	2101      	movs	r1, #1
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	fa01 f303 	lsl.w	r3, r1, r3
 800207c:	4013      	ands	r3, r2
 800207e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2b00      	cmp	r3, #0
 8002084:	f000 8171 	beq.w	800236a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 0303 	and.w	r3, r3, #3
 8002090:	2b01      	cmp	r3, #1
 8002092:	d005      	beq.n	80020a0 <HAL_GPIO_Init+0x40>
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f003 0303 	and.w	r3, r3, #3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d130      	bne.n	8002102 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	2203      	movs	r2, #3
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	4013      	ands	r3, r2
 80020b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	68da      	ldr	r2, [r3, #12]
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020d6:	2201      	movs	r2, #1
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	43db      	mvns	r3, r3
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	4013      	ands	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	091b      	lsrs	r3, r3, #4
 80020ec:	f003 0201 	and.w	r2, r3, #1
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f003 0303 	and.w	r3, r3, #3
 800210a:	2b03      	cmp	r3, #3
 800210c:	d118      	bne.n	8002140 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002112:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002114:	2201      	movs	r2, #1
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	43db      	mvns	r3, r3
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	4013      	ands	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	08db      	lsrs	r3, r3, #3
 800212a:	f003 0201 	and.w	r2, r3, #1
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	4313      	orrs	r3, r2
 8002138:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 0303 	and.w	r3, r3, #3
 8002148:	2b03      	cmp	r3, #3
 800214a:	d017      	beq.n	800217c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	2203      	movs	r2, #3
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	4013      	ands	r3, r2
 8002162:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	4313      	orrs	r3, r2
 8002174:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 0303 	and.w	r3, r3, #3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d123      	bne.n	80021d0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	08da      	lsrs	r2, r3, #3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3208      	adds	r2, #8
 8002190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002194:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	f003 0307 	and.w	r3, r3, #7
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	220f      	movs	r2, #15
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	43db      	mvns	r3, r3
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	4013      	ands	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	691a      	ldr	r2, [r3, #16]
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	4313      	orrs	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	08da      	lsrs	r2, r3, #3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3208      	adds	r2, #8
 80021ca:	6939      	ldr	r1, [r7, #16]
 80021cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	2203      	movs	r2, #3
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	4013      	ands	r3, r2
 80021e6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 0203 	and.w	r2, r3, #3
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 80ac 	beq.w	800236a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002212:	4b5f      	ldr	r3, [pc, #380]	; (8002390 <HAL_GPIO_Init+0x330>)
 8002214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002216:	4a5e      	ldr	r2, [pc, #376]	; (8002390 <HAL_GPIO_Init+0x330>)
 8002218:	f043 0301 	orr.w	r3, r3, #1
 800221c:	6613      	str	r3, [r2, #96]	; 0x60
 800221e:	4b5c      	ldr	r3, [pc, #368]	; (8002390 <HAL_GPIO_Init+0x330>)
 8002220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	60bb      	str	r3, [r7, #8]
 8002228:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800222a:	4a5a      	ldr	r2, [pc, #360]	; (8002394 <HAL_GPIO_Init+0x334>)
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	089b      	lsrs	r3, r3, #2
 8002230:	3302      	adds	r3, #2
 8002232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002236:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	220f      	movs	r2, #15
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	43db      	mvns	r3, r3
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	4013      	ands	r3, r2
 800224c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002254:	d025      	beq.n	80022a2 <HAL_GPIO_Init+0x242>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a4f      	ldr	r2, [pc, #316]	; (8002398 <HAL_GPIO_Init+0x338>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d01f      	beq.n	800229e <HAL_GPIO_Init+0x23e>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a4e      	ldr	r2, [pc, #312]	; (800239c <HAL_GPIO_Init+0x33c>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d019      	beq.n	800229a <HAL_GPIO_Init+0x23a>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a4d      	ldr	r2, [pc, #308]	; (80023a0 <HAL_GPIO_Init+0x340>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d013      	beq.n	8002296 <HAL_GPIO_Init+0x236>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a4c      	ldr	r2, [pc, #304]	; (80023a4 <HAL_GPIO_Init+0x344>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d00d      	beq.n	8002292 <HAL_GPIO_Init+0x232>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a4b      	ldr	r2, [pc, #300]	; (80023a8 <HAL_GPIO_Init+0x348>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d007      	beq.n	800228e <HAL_GPIO_Init+0x22e>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a4a      	ldr	r2, [pc, #296]	; (80023ac <HAL_GPIO_Init+0x34c>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d101      	bne.n	800228a <HAL_GPIO_Init+0x22a>
 8002286:	2306      	movs	r3, #6
 8002288:	e00c      	b.n	80022a4 <HAL_GPIO_Init+0x244>
 800228a:	2307      	movs	r3, #7
 800228c:	e00a      	b.n	80022a4 <HAL_GPIO_Init+0x244>
 800228e:	2305      	movs	r3, #5
 8002290:	e008      	b.n	80022a4 <HAL_GPIO_Init+0x244>
 8002292:	2304      	movs	r3, #4
 8002294:	e006      	b.n	80022a4 <HAL_GPIO_Init+0x244>
 8002296:	2303      	movs	r3, #3
 8002298:	e004      	b.n	80022a4 <HAL_GPIO_Init+0x244>
 800229a:	2302      	movs	r3, #2
 800229c:	e002      	b.n	80022a4 <HAL_GPIO_Init+0x244>
 800229e:	2301      	movs	r3, #1
 80022a0:	e000      	b.n	80022a4 <HAL_GPIO_Init+0x244>
 80022a2:	2300      	movs	r3, #0
 80022a4:	697a      	ldr	r2, [r7, #20]
 80022a6:	f002 0203 	and.w	r2, r2, #3
 80022aa:	0092      	lsls	r2, r2, #2
 80022ac:	4093      	lsls	r3, r2
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022b4:	4937      	ldr	r1, [pc, #220]	; (8002394 <HAL_GPIO_Init+0x334>)
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	089b      	lsrs	r3, r3, #2
 80022ba:	3302      	adds	r3, #2
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022c2:	4b3b      	ldr	r3, [pc, #236]	; (80023b0 <HAL_GPIO_Init+0x350>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	43db      	mvns	r3, r3
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	4013      	ands	r3, r2
 80022d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022e6:	4a32      	ldr	r2, [pc, #200]	; (80023b0 <HAL_GPIO_Init+0x350>)
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80022ec:	4b30      	ldr	r3, [pc, #192]	; (80023b0 <HAL_GPIO_Init+0x350>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	43db      	mvns	r3, r3
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	4013      	ands	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	4313      	orrs	r3, r2
 800230e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002310:	4a27      	ldr	r2, [pc, #156]	; (80023b0 <HAL_GPIO_Init+0x350>)
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002316:	4b26      	ldr	r3, [pc, #152]	; (80023b0 <HAL_GPIO_Init+0x350>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	43db      	mvns	r3, r3
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	4013      	ands	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4313      	orrs	r3, r2
 8002338:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800233a:	4a1d      	ldr	r2, [pc, #116]	; (80023b0 <HAL_GPIO_Init+0x350>)
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002340:	4b1b      	ldr	r3, [pc, #108]	; (80023b0 <HAL_GPIO_Init+0x350>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	43db      	mvns	r3, r3
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	4013      	ands	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	4313      	orrs	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002364:	4a12      	ldr	r2, [pc, #72]	; (80023b0 <HAL_GPIO_Init+0x350>)
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	3301      	adds	r3, #1
 800236e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	fa22 f303 	lsr.w	r3, r2, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	f47f ae78 	bne.w	8002070 <HAL_GPIO_Init+0x10>
  }
}
 8002380:	bf00      	nop
 8002382:	bf00      	nop
 8002384:	371c      	adds	r7, #28
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	40021000 	.word	0x40021000
 8002394:	40010000 	.word	0x40010000
 8002398:	48000400 	.word	0x48000400
 800239c:	48000800 	.word	0x48000800
 80023a0:	48000c00 	.word	0x48000c00
 80023a4:	48001000 	.word	0x48001000
 80023a8:	48001400 	.word	0x48001400
 80023ac:	48001800 	.word	0x48001800
 80023b0:	40010400 	.word	0x40010400

080023b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	460b      	mov	r3, r1
 80023be:	807b      	strh	r3, [r7, #2]
 80023c0:	4613      	mov	r3, r2
 80023c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023c4:	787b      	ldrb	r3, [r7, #1]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023ca:	887a      	ldrh	r2, [r7, #2]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023d0:	e002      	b.n	80023d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023d2:	887a      	ldrh	r2, [r7, #2]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80023e8:	4b04      	ldr	r3, [pc, #16]	; (80023fc <HAL_PWREx_GetVoltageRange+0x18>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	40007000 	.word	0x40007000

08002400 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800240e:	d130      	bne.n	8002472 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002410:	4b23      	ldr	r3, [pc, #140]	; (80024a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002418:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800241c:	d038      	beq.n	8002490 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800241e:	4b20      	ldr	r3, [pc, #128]	; (80024a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002426:	4a1e      	ldr	r2, [pc, #120]	; (80024a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002428:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800242c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800242e:	4b1d      	ldr	r3, [pc, #116]	; (80024a4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2232      	movs	r2, #50	; 0x32
 8002434:	fb02 f303 	mul.w	r3, r2, r3
 8002438:	4a1b      	ldr	r2, [pc, #108]	; (80024a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800243a:	fba2 2303 	umull	r2, r3, r2, r3
 800243e:	0c9b      	lsrs	r3, r3, #18
 8002440:	3301      	adds	r3, #1
 8002442:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002444:	e002      	b.n	800244c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	3b01      	subs	r3, #1
 800244a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800244c:	4b14      	ldr	r3, [pc, #80]	; (80024a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002458:	d102      	bne.n	8002460 <HAL_PWREx_ControlVoltageScaling+0x60>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1f2      	bne.n	8002446 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002460:	4b0f      	ldr	r3, [pc, #60]	; (80024a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002468:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800246c:	d110      	bne.n	8002490 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e00f      	b.n	8002492 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002472:	4b0b      	ldr	r3, [pc, #44]	; (80024a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800247a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800247e:	d007      	beq.n	8002490 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002480:	4b07      	ldr	r3, [pc, #28]	; (80024a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002488:	4a05      	ldr	r2, [pc, #20]	; (80024a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800248a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800248e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	40007000 	.word	0x40007000
 80024a4:	20000000 	.word	0x20000000
 80024a8:	431bde83 	.word	0x431bde83

080024ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b088      	sub	sp, #32
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e3ca      	b.n	8002c54 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024be:	4b97      	ldr	r3, [pc, #604]	; (800271c <HAL_RCC_OscConfig+0x270>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 030c 	and.w	r3, r3, #12
 80024c6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024c8:	4b94      	ldr	r3, [pc, #592]	; (800271c <HAL_RCC_OscConfig+0x270>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	f003 0303 	and.w	r3, r3, #3
 80024d0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0310 	and.w	r3, r3, #16
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 80e4 	beq.w	80026a8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d007      	beq.n	80024f6 <HAL_RCC_OscConfig+0x4a>
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	2b0c      	cmp	r3, #12
 80024ea:	f040 808b 	bne.w	8002604 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	f040 8087 	bne.w	8002604 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024f6:	4b89      	ldr	r3, [pc, #548]	; (800271c <HAL_RCC_OscConfig+0x270>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d005      	beq.n	800250e <HAL_RCC_OscConfig+0x62>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e3a2      	b.n	8002c54 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a1a      	ldr	r2, [r3, #32]
 8002512:	4b82      	ldr	r3, [pc, #520]	; (800271c <HAL_RCC_OscConfig+0x270>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0308 	and.w	r3, r3, #8
 800251a:	2b00      	cmp	r3, #0
 800251c:	d004      	beq.n	8002528 <HAL_RCC_OscConfig+0x7c>
 800251e:	4b7f      	ldr	r3, [pc, #508]	; (800271c <HAL_RCC_OscConfig+0x270>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002526:	e005      	b.n	8002534 <HAL_RCC_OscConfig+0x88>
 8002528:	4b7c      	ldr	r3, [pc, #496]	; (800271c <HAL_RCC_OscConfig+0x270>)
 800252a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800252e:	091b      	lsrs	r3, r3, #4
 8002530:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002534:	4293      	cmp	r3, r2
 8002536:	d223      	bcs.n	8002580 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	4618      	mov	r0, r3
 800253e:	f000 fd55 	bl	8002fec <RCC_SetFlashLatencyFromMSIRange>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e383      	b.n	8002c54 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800254c:	4b73      	ldr	r3, [pc, #460]	; (800271c <HAL_RCC_OscConfig+0x270>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a72      	ldr	r2, [pc, #456]	; (800271c <HAL_RCC_OscConfig+0x270>)
 8002552:	f043 0308 	orr.w	r3, r3, #8
 8002556:	6013      	str	r3, [r2, #0]
 8002558:	4b70      	ldr	r3, [pc, #448]	; (800271c <HAL_RCC_OscConfig+0x270>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	496d      	ldr	r1, [pc, #436]	; (800271c <HAL_RCC_OscConfig+0x270>)
 8002566:	4313      	orrs	r3, r2
 8002568:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800256a:	4b6c      	ldr	r3, [pc, #432]	; (800271c <HAL_RCC_OscConfig+0x270>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	021b      	lsls	r3, r3, #8
 8002578:	4968      	ldr	r1, [pc, #416]	; (800271c <HAL_RCC_OscConfig+0x270>)
 800257a:	4313      	orrs	r3, r2
 800257c:	604b      	str	r3, [r1, #4]
 800257e:	e025      	b.n	80025cc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002580:	4b66      	ldr	r3, [pc, #408]	; (800271c <HAL_RCC_OscConfig+0x270>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a65      	ldr	r2, [pc, #404]	; (800271c <HAL_RCC_OscConfig+0x270>)
 8002586:	f043 0308 	orr.w	r3, r3, #8
 800258a:	6013      	str	r3, [r2, #0]
 800258c:	4b63      	ldr	r3, [pc, #396]	; (800271c <HAL_RCC_OscConfig+0x270>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	4960      	ldr	r1, [pc, #384]	; (800271c <HAL_RCC_OscConfig+0x270>)
 800259a:	4313      	orrs	r3, r2
 800259c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800259e:	4b5f      	ldr	r3, [pc, #380]	; (800271c <HAL_RCC_OscConfig+0x270>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	021b      	lsls	r3, r3, #8
 80025ac:	495b      	ldr	r1, [pc, #364]	; (800271c <HAL_RCC_OscConfig+0x270>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d109      	bne.n	80025cc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	4618      	mov	r0, r3
 80025be:	f000 fd15 	bl	8002fec <RCC_SetFlashLatencyFromMSIRange>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e343      	b.n	8002c54 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025cc:	f000 fc4a 	bl	8002e64 <HAL_RCC_GetSysClockFreq>
 80025d0:	4602      	mov	r2, r0
 80025d2:	4b52      	ldr	r3, [pc, #328]	; (800271c <HAL_RCC_OscConfig+0x270>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	091b      	lsrs	r3, r3, #4
 80025d8:	f003 030f 	and.w	r3, r3, #15
 80025dc:	4950      	ldr	r1, [pc, #320]	; (8002720 <HAL_RCC_OscConfig+0x274>)
 80025de:	5ccb      	ldrb	r3, [r1, r3]
 80025e0:	f003 031f 	and.w	r3, r3, #31
 80025e4:	fa22 f303 	lsr.w	r3, r2, r3
 80025e8:	4a4e      	ldr	r2, [pc, #312]	; (8002724 <HAL_RCC_OscConfig+0x278>)
 80025ea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80025ec:	4b4e      	ldr	r3, [pc, #312]	; (8002728 <HAL_RCC_OscConfig+0x27c>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7fe fb11 	bl	8000c18 <HAL_InitTick>
 80025f6:	4603      	mov	r3, r0
 80025f8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80025fa:	7bfb      	ldrb	r3, [r7, #15]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d052      	beq.n	80026a6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002600:	7bfb      	ldrb	r3, [r7, #15]
 8002602:	e327      	b.n	8002c54 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d032      	beq.n	8002672 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800260c:	4b43      	ldr	r3, [pc, #268]	; (800271c <HAL_RCC_OscConfig+0x270>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a42      	ldr	r2, [pc, #264]	; (800271c <HAL_RCC_OscConfig+0x270>)
 8002612:	f043 0301 	orr.w	r3, r3, #1
 8002616:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002618:	f7fe fb4e 	bl	8000cb8 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002620:	f7fe fb4a 	bl	8000cb8 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e310      	b.n	8002c54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002632:	4b3a      	ldr	r3, [pc, #232]	; (800271c <HAL_RCC_OscConfig+0x270>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d0f0      	beq.n	8002620 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800263e:	4b37      	ldr	r3, [pc, #220]	; (800271c <HAL_RCC_OscConfig+0x270>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a36      	ldr	r2, [pc, #216]	; (800271c <HAL_RCC_OscConfig+0x270>)
 8002644:	f043 0308 	orr.w	r3, r3, #8
 8002648:	6013      	str	r3, [r2, #0]
 800264a:	4b34      	ldr	r3, [pc, #208]	; (800271c <HAL_RCC_OscConfig+0x270>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	4931      	ldr	r1, [pc, #196]	; (800271c <HAL_RCC_OscConfig+0x270>)
 8002658:	4313      	orrs	r3, r2
 800265a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800265c:	4b2f      	ldr	r3, [pc, #188]	; (800271c <HAL_RCC_OscConfig+0x270>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	69db      	ldr	r3, [r3, #28]
 8002668:	021b      	lsls	r3, r3, #8
 800266a:	492c      	ldr	r1, [pc, #176]	; (800271c <HAL_RCC_OscConfig+0x270>)
 800266c:	4313      	orrs	r3, r2
 800266e:	604b      	str	r3, [r1, #4]
 8002670:	e01a      	b.n	80026a8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002672:	4b2a      	ldr	r3, [pc, #168]	; (800271c <HAL_RCC_OscConfig+0x270>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a29      	ldr	r2, [pc, #164]	; (800271c <HAL_RCC_OscConfig+0x270>)
 8002678:	f023 0301 	bic.w	r3, r3, #1
 800267c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800267e:	f7fe fb1b 	bl	8000cb8 <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002684:	e008      	b.n	8002698 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002686:	f7fe fb17 	bl	8000cb8 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e2dd      	b.n	8002c54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002698:	4b20      	ldr	r3, [pc, #128]	; (800271c <HAL_RCC_OscConfig+0x270>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1f0      	bne.n	8002686 <HAL_RCC_OscConfig+0x1da>
 80026a4:	e000      	b.n	80026a8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026a6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d074      	beq.n	800279e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	2b08      	cmp	r3, #8
 80026b8:	d005      	beq.n	80026c6 <HAL_RCC_OscConfig+0x21a>
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	2b0c      	cmp	r3, #12
 80026be:	d10e      	bne.n	80026de <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	d10b      	bne.n	80026de <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c6:	4b15      	ldr	r3, [pc, #84]	; (800271c <HAL_RCC_OscConfig+0x270>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d064      	beq.n	800279c <HAL_RCC_OscConfig+0x2f0>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d160      	bne.n	800279c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e2ba      	b.n	8002c54 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026e6:	d106      	bne.n	80026f6 <HAL_RCC_OscConfig+0x24a>
 80026e8:	4b0c      	ldr	r3, [pc, #48]	; (800271c <HAL_RCC_OscConfig+0x270>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a0b      	ldr	r2, [pc, #44]	; (800271c <HAL_RCC_OscConfig+0x270>)
 80026ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f2:	6013      	str	r3, [r2, #0]
 80026f4:	e026      	b.n	8002744 <HAL_RCC_OscConfig+0x298>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026fe:	d115      	bne.n	800272c <HAL_RCC_OscConfig+0x280>
 8002700:	4b06      	ldr	r3, [pc, #24]	; (800271c <HAL_RCC_OscConfig+0x270>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a05      	ldr	r2, [pc, #20]	; (800271c <HAL_RCC_OscConfig+0x270>)
 8002706:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800270a:	6013      	str	r3, [r2, #0]
 800270c:	4b03      	ldr	r3, [pc, #12]	; (800271c <HAL_RCC_OscConfig+0x270>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a02      	ldr	r2, [pc, #8]	; (800271c <HAL_RCC_OscConfig+0x270>)
 8002712:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002716:	6013      	str	r3, [r2, #0]
 8002718:	e014      	b.n	8002744 <HAL_RCC_OscConfig+0x298>
 800271a:	bf00      	nop
 800271c:	40021000 	.word	0x40021000
 8002720:	08004e18 	.word	0x08004e18
 8002724:	20000000 	.word	0x20000000
 8002728:	20000004 	.word	0x20000004
 800272c:	4ba0      	ldr	r3, [pc, #640]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a9f      	ldr	r2, [pc, #636]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 8002732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002736:	6013      	str	r3, [r2, #0]
 8002738:	4b9d      	ldr	r3, [pc, #628]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a9c      	ldr	r2, [pc, #624]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 800273e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002742:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d013      	beq.n	8002774 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274c:	f7fe fab4 	bl	8000cb8 <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002754:	f7fe fab0 	bl	8000cb8 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b64      	cmp	r3, #100	; 0x64
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e276      	b.n	8002c54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002766:	4b92      	ldr	r3, [pc, #584]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0f0      	beq.n	8002754 <HAL_RCC_OscConfig+0x2a8>
 8002772:	e014      	b.n	800279e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002774:	f7fe faa0 	bl	8000cb8 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800277c:	f7fe fa9c 	bl	8000cb8 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b64      	cmp	r3, #100	; 0x64
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e262      	b.n	8002c54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800278e:	4b88      	ldr	r3, [pc, #544]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1f0      	bne.n	800277c <HAL_RCC_OscConfig+0x2d0>
 800279a:	e000      	b.n	800279e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800279c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d060      	beq.n	800286c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	2b04      	cmp	r3, #4
 80027ae:	d005      	beq.n	80027bc <HAL_RCC_OscConfig+0x310>
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	2b0c      	cmp	r3, #12
 80027b4:	d119      	bne.n	80027ea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d116      	bne.n	80027ea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027bc:	4b7c      	ldr	r3, [pc, #496]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d005      	beq.n	80027d4 <HAL_RCC_OscConfig+0x328>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e23f      	b.n	8002c54 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d4:	4b76      	ldr	r3, [pc, #472]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	061b      	lsls	r3, r3, #24
 80027e2:	4973      	ldr	r1, [pc, #460]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027e8:	e040      	b.n	800286c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d023      	beq.n	800283a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027f2:	4b6f      	ldr	r3, [pc, #444]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a6e      	ldr	r2, [pc, #440]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 80027f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fe:	f7fe fa5b 	bl	8000cb8 <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002804:	e008      	b.n	8002818 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002806:	f7fe fa57 	bl	8000cb8 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e21d      	b.n	8002c54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002818:	4b65      	ldr	r3, [pc, #404]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0f0      	beq.n	8002806 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002824:	4b62      	ldr	r3, [pc, #392]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	061b      	lsls	r3, r3, #24
 8002832:	495f      	ldr	r1, [pc, #380]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 8002834:	4313      	orrs	r3, r2
 8002836:	604b      	str	r3, [r1, #4]
 8002838:	e018      	b.n	800286c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800283a:	4b5d      	ldr	r3, [pc, #372]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a5c      	ldr	r2, [pc, #368]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 8002840:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002844:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002846:	f7fe fa37 	bl	8000cb8 <HAL_GetTick>
 800284a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800284c:	e008      	b.n	8002860 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800284e:	f7fe fa33 	bl	8000cb8 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e1f9      	b.n	8002c54 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002860:	4b53      	ldr	r3, [pc, #332]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1f0      	bne.n	800284e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0308 	and.w	r3, r3, #8
 8002874:	2b00      	cmp	r3, #0
 8002876:	d03c      	beq.n	80028f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d01c      	beq.n	80028ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002880:	4b4b      	ldr	r3, [pc, #300]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 8002882:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002886:	4a4a      	ldr	r2, [pc, #296]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002890:	f7fe fa12 	bl	8000cb8 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002898:	f7fe fa0e 	bl	8000cb8 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e1d4      	b.n	8002c54 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028aa:	4b41      	ldr	r3, [pc, #260]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 80028ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0ef      	beq.n	8002898 <HAL_RCC_OscConfig+0x3ec>
 80028b8:	e01b      	b.n	80028f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ba:	4b3d      	ldr	r3, [pc, #244]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 80028bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028c0:	4a3b      	ldr	r2, [pc, #236]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 80028c2:	f023 0301 	bic.w	r3, r3, #1
 80028c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ca:	f7fe f9f5 	bl	8000cb8 <HAL_GetTick>
 80028ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028d0:	e008      	b.n	80028e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028d2:	f7fe f9f1 	bl	8000cb8 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e1b7      	b.n	8002c54 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028e4:	4b32      	ldr	r3, [pc, #200]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 80028e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1ef      	bne.n	80028d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0304 	and.w	r3, r3, #4
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f000 80a6 	beq.w	8002a4c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002900:	2300      	movs	r3, #0
 8002902:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002904:	4b2a      	ldr	r3, [pc, #168]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 8002906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d10d      	bne.n	800292c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002910:	4b27      	ldr	r3, [pc, #156]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 8002912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002914:	4a26      	ldr	r2, [pc, #152]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 8002916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800291a:	6593      	str	r3, [r2, #88]	; 0x58
 800291c:	4b24      	ldr	r3, [pc, #144]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 800291e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002924:	60bb      	str	r3, [r7, #8]
 8002926:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002928:	2301      	movs	r3, #1
 800292a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800292c:	4b21      	ldr	r3, [pc, #132]	; (80029b4 <HAL_RCC_OscConfig+0x508>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002934:	2b00      	cmp	r3, #0
 8002936:	d118      	bne.n	800296a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002938:	4b1e      	ldr	r3, [pc, #120]	; (80029b4 <HAL_RCC_OscConfig+0x508>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a1d      	ldr	r2, [pc, #116]	; (80029b4 <HAL_RCC_OscConfig+0x508>)
 800293e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002942:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002944:	f7fe f9b8 	bl	8000cb8 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800294c:	f7fe f9b4 	bl	8000cb8 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e17a      	b.n	8002c54 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800295e:	4b15      	ldr	r3, [pc, #84]	; (80029b4 <HAL_RCC_OscConfig+0x508>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002966:	2b00      	cmp	r3, #0
 8002968:	d0f0      	beq.n	800294c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d108      	bne.n	8002984 <HAL_RCC_OscConfig+0x4d8>
 8002972:	4b0f      	ldr	r3, [pc, #60]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 8002974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002978:	4a0d      	ldr	r2, [pc, #52]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 800297a:	f043 0301 	orr.w	r3, r3, #1
 800297e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002982:	e029      	b.n	80029d8 <HAL_RCC_OscConfig+0x52c>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	2b05      	cmp	r3, #5
 800298a:	d115      	bne.n	80029b8 <HAL_RCC_OscConfig+0x50c>
 800298c:	4b08      	ldr	r3, [pc, #32]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 800298e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002992:	4a07      	ldr	r2, [pc, #28]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 8002994:	f043 0304 	orr.w	r3, r3, #4
 8002998:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800299c:	4b04      	ldr	r3, [pc, #16]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 800299e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a2:	4a03      	ldr	r2, [pc, #12]	; (80029b0 <HAL_RCC_OscConfig+0x504>)
 80029a4:	f043 0301 	orr.w	r3, r3, #1
 80029a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029ac:	e014      	b.n	80029d8 <HAL_RCC_OscConfig+0x52c>
 80029ae:	bf00      	nop
 80029b0:	40021000 	.word	0x40021000
 80029b4:	40007000 	.word	0x40007000
 80029b8:	4b9c      	ldr	r3, [pc, #624]	; (8002c2c <HAL_RCC_OscConfig+0x780>)
 80029ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029be:	4a9b      	ldr	r2, [pc, #620]	; (8002c2c <HAL_RCC_OscConfig+0x780>)
 80029c0:	f023 0301 	bic.w	r3, r3, #1
 80029c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029c8:	4b98      	ldr	r3, [pc, #608]	; (8002c2c <HAL_RCC_OscConfig+0x780>)
 80029ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ce:	4a97      	ldr	r2, [pc, #604]	; (8002c2c <HAL_RCC_OscConfig+0x780>)
 80029d0:	f023 0304 	bic.w	r3, r3, #4
 80029d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d016      	beq.n	8002a0e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e0:	f7fe f96a 	bl	8000cb8 <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029e6:	e00a      	b.n	80029fe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029e8:	f7fe f966 	bl	8000cb8 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e12a      	b.n	8002c54 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029fe:	4b8b      	ldr	r3, [pc, #556]	; (8002c2c <HAL_RCC_OscConfig+0x780>)
 8002a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d0ed      	beq.n	80029e8 <HAL_RCC_OscConfig+0x53c>
 8002a0c:	e015      	b.n	8002a3a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a0e:	f7fe f953 	bl	8000cb8 <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a14:	e00a      	b.n	8002a2c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a16:	f7fe f94f 	bl	8000cb8 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e113      	b.n	8002c54 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a2c:	4b7f      	ldr	r3, [pc, #508]	; (8002c2c <HAL_RCC_OscConfig+0x780>)
 8002a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1ed      	bne.n	8002a16 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a3a:	7ffb      	ldrb	r3, [r7, #31]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d105      	bne.n	8002a4c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a40:	4b7a      	ldr	r3, [pc, #488]	; (8002c2c <HAL_RCC_OscConfig+0x780>)
 8002a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a44:	4a79      	ldr	r2, [pc, #484]	; (8002c2c <HAL_RCC_OscConfig+0x780>)
 8002a46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a4a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f000 80fe 	beq.w	8002c52 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	f040 80d0 	bne.w	8002c00 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a60:	4b72      	ldr	r3, [pc, #456]	; (8002c2c <HAL_RCC_OscConfig+0x780>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	f003 0203 	and.w	r2, r3, #3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d130      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d127      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a90:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d11f      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002aa0:	2a07      	cmp	r2, #7
 8002aa2:	bf14      	ite	ne
 8002aa4:	2201      	movne	r2, #1
 8002aa6:	2200      	moveq	r2, #0
 8002aa8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d113      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab8:	085b      	lsrs	r3, r3, #1
 8002aba:	3b01      	subs	r3, #1
 8002abc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d109      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002acc:	085b      	lsrs	r3, r3, #1
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d06e      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	2b0c      	cmp	r3, #12
 8002ada:	d069      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002adc:	4b53      	ldr	r3, [pc, #332]	; (8002c2c <HAL_RCC_OscConfig+0x780>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d105      	bne.n	8002af4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002ae8:	4b50      	ldr	r3, [pc, #320]	; (8002c2c <HAL_RCC_OscConfig+0x780>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e0ad      	b.n	8002c54 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002af8:	4b4c      	ldr	r3, [pc, #304]	; (8002c2c <HAL_RCC_OscConfig+0x780>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a4b      	ldr	r2, [pc, #300]	; (8002c2c <HAL_RCC_OscConfig+0x780>)
 8002afe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b02:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b04:	f7fe f8d8 	bl	8000cb8 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b0c:	f7fe f8d4 	bl	8000cb8 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e09a      	b.n	8002c54 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b1e:	4b43      	ldr	r3, [pc, #268]	; (8002c2c <HAL_RCC_OscConfig+0x780>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f0      	bne.n	8002b0c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b2a:	4b40      	ldr	r3, [pc, #256]	; (8002c2c <HAL_RCC_OscConfig+0x780>)
 8002b2c:	68da      	ldr	r2, [r3, #12]
 8002b2e:	4b40      	ldr	r3, [pc, #256]	; (8002c30 <HAL_RCC_OscConfig+0x784>)
 8002b30:	4013      	ands	r3, r2
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b3a:	3a01      	subs	r2, #1
 8002b3c:	0112      	lsls	r2, r2, #4
 8002b3e:	4311      	orrs	r1, r2
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b44:	0212      	lsls	r2, r2, #8
 8002b46:	4311      	orrs	r1, r2
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b4c:	0852      	lsrs	r2, r2, #1
 8002b4e:	3a01      	subs	r2, #1
 8002b50:	0552      	lsls	r2, r2, #21
 8002b52:	4311      	orrs	r1, r2
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b58:	0852      	lsrs	r2, r2, #1
 8002b5a:	3a01      	subs	r2, #1
 8002b5c:	0652      	lsls	r2, r2, #25
 8002b5e:	4311      	orrs	r1, r2
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b64:	0912      	lsrs	r2, r2, #4
 8002b66:	0452      	lsls	r2, r2, #17
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	4930      	ldr	r1, [pc, #192]	; (8002c2c <HAL_RCC_OscConfig+0x780>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b70:	4b2e      	ldr	r3, [pc, #184]	; (8002c2c <HAL_RCC_OscConfig+0x780>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a2d      	ldr	r2, [pc, #180]	; (8002c2c <HAL_RCC_OscConfig+0x780>)
 8002b76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b7a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b7c:	4b2b      	ldr	r3, [pc, #172]	; (8002c2c <HAL_RCC_OscConfig+0x780>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	4a2a      	ldr	r2, [pc, #168]	; (8002c2c <HAL_RCC_OscConfig+0x780>)
 8002b82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b86:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b88:	f7fe f896 	bl	8000cb8 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b90:	f7fe f892 	bl	8000cb8 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e058      	b.n	8002c54 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ba2:	4b22      	ldr	r3, [pc, #136]	; (8002c2c <HAL_RCC_OscConfig+0x780>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d0f0      	beq.n	8002b90 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bae:	e050      	b.n	8002c52 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e04f      	b.n	8002c54 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bb4:	4b1d      	ldr	r3, [pc, #116]	; (8002c2c <HAL_RCC_OscConfig+0x780>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d148      	bne.n	8002c52 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002bc0:	4b1a      	ldr	r3, [pc, #104]	; (8002c2c <HAL_RCC_OscConfig+0x780>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a19      	ldr	r2, [pc, #100]	; (8002c2c <HAL_RCC_OscConfig+0x780>)
 8002bc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bcc:	4b17      	ldr	r3, [pc, #92]	; (8002c2c <HAL_RCC_OscConfig+0x780>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	4a16      	ldr	r2, [pc, #88]	; (8002c2c <HAL_RCC_OscConfig+0x780>)
 8002bd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bd6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002bd8:	f7fe f86e 	bl	8000cb8 <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be0:	f7fe f86a 	bl	8000cb8 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e030      	b.n	8002c54 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bf2:	4b0e      	ldr	r3, [pc, #56]	; (8002c2c <HAL_RCC_OscConfig+0x780>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d0f0      	beq.n	8002be0 <HAL_RCC_OscConfig+0x734>
 8002bfe:	e028      	b.n	8002c52 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	2b0c      	cmp	r3, #12
 8002c04:	d023      	beq.n	8002c4e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c06:	4b09      	ldr	r3, [pc, #36]	; (8002c2c <HAL_RCC_OscConfig+0x780>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a08      	ldr	r2, [pc, #32]	; (8002c2c <HAL_RCC_OscConfig+0x780>)
 8002c0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c12:	f7fe f851 	bl	8000cb8 <HAL_GetTick>
 8002c16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c18:	e00c      	b.n	8002c34 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c1a:	f7fe f84d 	bl	8000cb8 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d905      	bls.n	8002c34 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e013      	b.n	8002c54 <HAL_RCC_OscConfig+0x7a8>
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c34:	4b09      	ldr	r3, [pc, #36]	; (8002c5c <HAL_RCC_OscConfig+0x7b0>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1ec      	bne.n	8002c1a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c40:	4b06      	ldr	r3, [pc, #24]	; (8002c5c <HAL_RCC_OscConfig+0x7b0>)
 8002c42:	68da      	ldr	r2, [r3, #12]
 8002c44:	4905      	ldr	r1, [pc, #20]	; (8002c5c <HAL_RCC_OscConfig+0x7b0>)
 8002c46:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <HAL_RCC_OscConfig+0x7b4>)
 8002c48:	4013      	ands	r3, r2
 8002c4a:	60cb      	str	r3, [r1, #12]
 8002c4c:	e001      	b.n	8002c52 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e000      	b.n	8002c54 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3720      	adds	r7, #32
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	feeefffc 	.word	0xfeeefffc

08002c64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e0e7      	b.n	8002e48 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c78:	4b75      	ldr	r3, [pc, #468]	; (8002e50 <HAL_RCC_ClockConfig+0x1ec>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d910      	bls.n	8002ca8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c86:	4b72      	ldr	r3, [pc, #456]	; (8002e50 <HAL_RCC_ClockConfig+0x1ec>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f023 0207 	bic.w	r2, r3, #7
 8002c8e:	4970      	ldr	r1, [pc, #448]	; (8002e50 <HAL_RCC_ClockConfig+0x1ec>)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c96:	4b6e      	ldr	r3, [pc, #440]	; (8002e50 <HAL_RCC_ClockConfig+0x1ec>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d001      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e0cf      	b.n	8002e48 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d010      	beq.n	8002cd6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	4b66      	ldr	r3, [pc, #408]	; (8002e54 <HAL_RCC_ClockConfig+0x1f0>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d908      	bls.n	8002cd6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cc4:	4b63      	ldr	r3, [pc, #396]	; (8002e54 <HAL_RCC_ClockConfig+0x1f0>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	4960      	ldr	r1, [pc, #384]	; (8002e54 <HAL_RCC_ClockConfig+0x1f0>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d04c      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2b03      	cmp	r3, #3
 8002ce8:	d107      	bne.n	8002cfa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cea:	4b5a      	ldr	r3, [pc, #360]	; (8002e54 <HAL_RCC_ClockConfig+0x1f0>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d121      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e0a6      	b.n	8002e48 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d107      	bne.n	8002d12 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d02:	4b54      	ldr	r3, [pc, #336]	; (8002e54 <HAL_RCC_ClockConfig+0x1f0>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d115      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e09a      	b.n	8002e48 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d107      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d1a:	4b4e      	ldr	r3, [pc, #312]	; (8002e54 <HAL_RCC_ClockConfig+0x1f0>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d109      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e08e      	b.n	8002e48 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d2a:	4b4a      	ldr	r3, [pc, #296]	; (8002e54 <HAL_RCC_ClockConfig+0x1f0>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e086      	b.n	8002e48 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d3a:	4b46      	ldr	r3, [pc, #280]	; (8002e54 <HAL_RCC_ClockConfig+0x1f0>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f023 0203 	bic.w	r2, r3, #3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	4943      	ldr	r1, [pc, #268]	; (8002e54 <HAL_RCC_ClockConfig+0x1f0>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d4c:	f7fd ffb4 	bl	8000cb8 <HAL_GetTick>
 8002d50:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d52:	e00a      	b.n	8002d6a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d54:	f7fd ffb0 	bl	8000cb8 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e06e      	b.n	8002e48 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d6a:	4b3a      	ldr	r3, [pc, #232]	; (8002e54 <HAL_RCC_ClockConfig+0x1f0>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 020c 	and.w	r2, r3, #12
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d1eb      	bne.n	8002d54 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d010      	beq.n	8002daa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	4b31      	ldr	r3, [pc, #196]	; (8002e54 <HAL_RCC_ClockConfig+0x1f0>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d208      	bcs.n	8002daa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d98:	4b2e      	ldr	r3, [pc, #184]	; (8002e54 <HAL_RCC_ClockConfig+0x1f0>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	492b      	ldr	r1, [pc, #172]	; (8002e54 <HAL_RCC_ClockConfig+0x1f0>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002daa:	4b29      	ldr	r3, [pc, #164]	; (8002e50 <HAL_RCC_ClockConfig+0x1ec>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d210      	bcs.n	8002dda <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db8:	4b25      	ldr	r3, [pc, #148]	; (8002e50 <HAL_RCC_ClockConfig+0x1ec>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f023 0207 	bic.w	r2, r3, #7
 8002dc0:	4923      	ldr	r1, [pc, #140]	; (8002e50 <HAL_RCC_ClockConfig+0x1ec>)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc8:	4b21      	ldr	r3, [pc, #132]	; (8002e50 <HAL_RCC_ClockConfig+0x1ec>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d001      	beq.n	8002dda <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e036      	b.n	8002e48 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0304 	and.w	r3, r3, #4
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d008      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002de6:	4b1b      	ldr	r3, [pc, #108]	; (8002e54 <HAL_RCC_ClockConfig+0x1f0>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	4918      	ldr	r1, [pc, #96]	; (8002e54 <HAL_RCC_ClockConfig+0x1f0>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0308 	and.w	r3, r3, #8
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d009      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e04:	4b13      	ldr	r3, [pc, #76]	; (8002e54 <HAL_RCC_ClockConfig+0x1f0>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	4910      	ldr	r1, [pc, #64]	; (8002e54 <HAL_RCC_ClockConfig+0x1f0>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e18:	f000 f824 	bl	8002e64 <HAL_RCC_GetSysClockFreq>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	4b0d      	ldr	r3, [pc, #52]	; (8002e54 <HAL_RCC_ClockConfig+0x1f0>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	091b      	lsrs	r3, r3, #4
 8002e24:	f003 030f 	and.w	r3, r3, #15
 8002e28:	490b      	ldr	r1, [pc, #44]	; (8002e58 <HAL_RCC_ClockConfig+0x1f4>)
 8002e2a:	5ccb      	ldrb	r3, [r1, r3]
 8002e2c:	f003 031f 	and.w	r3, r3, #31
 8002e30:	fa22 f303 	lsr.w	r3, r2, r3
 8002e34:	4a09      	ldr	r2, [pc, #36]	; (8002e5c <HAL_RCC_ClockConfig+0x1f8>)
 8002e36:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e38:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <HAL_RCC_ClockConfig+0x1fc>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7fd feeb 	bl	8000c18 <HAL_InitTick>
 8002e42:	4603      	mov	r3, r0
 8002e44:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e46:	7afb      	ldrb	r3, [r7, #11]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	40022000 	.word	0x40022000
 8002e54:	40021000 	.word	0x40021000
 8002e58:	08004e18 	.word	0x08004e18
 8002e5c:	20000000 	.word	0x20000000
 8002e60:	20000004 	.word	0x20000004

08002e64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b089      	sub	sp, #36	; 0x24
 8002e68:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	61fb      	str	r3, [r7, #28]
 8002e6e:	2300      	movs	r3, #0
 8002e70:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e72:	4b3e      	ldr	r3, [pc, #248]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 030c 	and.w	r3, r3, #12
 8002e7a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e7c:	4b3b      	ldr	r3, [pc, #236]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	f003 0303 	and.w	r3, r3, #3
 8002e84:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d005      	beq.n	8002e98 <HAL_RCC_GetSysClockFreq+0x34>
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	2b0c      	cmp	r3, #12
 8002e90:	d121      	bne.n	8002ed6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d11e      	bne.n	8002ed6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e98:	4b34      	ldr	r3, [pc, #208]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0308 	and.w	r3, r3, #8
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d107      	bne.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ea4:	4b31      	ldr	r3, [pc, #196]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ea6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eaa:	0a1b      	lsrs	r3, r3, #8
 8002eac:	f003 030f 	and.w	r3, r3, #15
 8002eb0:	61fb      	str	r3, [r7, #28]
 8002eb2:	e005      	b.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002eb4:	4b2d      	ldr	r3, [pc, #180]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x108>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	091b      	lsrs	r3, r3, #4
 8002eba:	f003 030f 	and.w	r3, r3, #15
 8002ebe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ec0:	4a2b      	ldr	r2, [pc, #172]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ec8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10d      	bne.n	8002eec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ed4:	e00a      	b.n	8002eec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	2b04      	cmp	r3, #4
 8002eda:	d102      	bne.n	8002ee2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002edc:	4b25      	ldr	r3, [pc, #148]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ede:	61bb      	str	r3, [r7, #24]
 8002ee0:	e004      	b.n	8002eec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	2b08      	cmp	r3, #8
 8002ee6:	d101      	bne.n	8002eec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ee8:	4b23      	ldr	r3, [pc, #140]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x114>)
 8002eea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	2b0c      	cmp	r3, #12
 8002ef0:	d134      	bne.n	8002f5c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ef2:	4b1e      	ldr	r3, [pc, #120]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	f003 0303 	and.w	r3, r3, #3
 8002efa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d003      	beq.n	8002f0a <HAL_RCC_GetSysClockFreq+0xa6>
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	2b03      	cmp	r3, #3
 8002f06:	d003      	beq.n	8002f10 <HAL_RCC_GetSysClockFreq+0xac>
 8002f08:	e005      	b.n	8002f16 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f0a:	4b1a      	ldr	r3, [pc, #104]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f0c:	617b      	str	r3, [r7, #20]
      break;
 8002f0e:	e005      	b.n	8002f1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f10:	4b19      	ldr	r3, [pc, #100]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f12:	617b      	str	r3, [r7, #20]
      break;
 8002f14:	e002      	b.n	8002f1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	617b      	str	r3, [r7, #20]
      break;
 8002f1a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f1c:	4b13      	ldr	r3, [pc, #76]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	091b      	lsrs	r3, r3, #4
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	3301      	adds	r3, #1
 8002f28:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f2a:	4b10      	ldr	r3, [pc, #64]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	0a1b      	lsrs	r3, r3, #8
 8002f30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	fb03 f202 	mul.w	r2, r3, r2
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f40:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f42:	4b0a      	ldr	r3, [pc, #40]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	0e5b      	lsrs	r3, r3, #25
 8002f48:	f003 0303 	and.w	r3, r3, #3
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f5a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f5c:	69bb      	ldr	r3, [r7, #24]
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3724      	adds	r7, #36	; 0x24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	08004e30 	.word	0x08004e30
 8002f74:	00f42400 	.word	0x00f42400
 8002f78:	007a1200 	.word	0x007a1200

08002f7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f80:	4b03      	ldr	r3, [pc, #12]	; (8002f90 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f82:	681b      	ldr	r3, [r3, #0]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	20000000 	.word	0x20000000

08002f94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f98:	f7ff fff0 	bl	8002f7c <HAL_RCC_GetHCLKFreq>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	0a1b      	lsrs	r3, r3, #8
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	4904      	ldr	r1, [pc, #16]	; (8002fbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002faa:	5ccb      	ldrb	r3, [r1, r3]
 8002fac:	f003 031f 	and.w	r3, r3, #31
 8002fb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	08004e28 	.word	0x08004e28

08002fc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002fc4:	f7ff ffda 	bl	8002f7c <HAL_RCC_GetHCLKFreq>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	0adb      	lsrs	r3, r3, #11
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	4904      	ldr	r1, [pc, #16]	; (8002fe8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002fd6:	5ccb      	ldrb	r3, [r1, r3]
 8002fd8:	f003 031f 	and.w	r3, r3, #31
 8002fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	08004e28 	.word	0x08004e28

08002fec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ff8:	4b2a      	ldr	r3, [pc, #168]	; (80030a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003004:	f7ff f9ee 	bl	80023e4 <HAL_PWREx_GetVoltageRange>
 8003008:	6178      	str	r0, [r7, #20]
 800300a:	e014      	b.n	8003036 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800300c:	4b25      	ldr	r3, [pc, #148]	; (80030a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800300e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003010:	4a24      	ldr	r2, [pc, #144]	; (80030a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003016:	6593      	str	r3, [r2, #88]	; 0x58
 8003018:	4b22      	ldr	r3, [pc, #136]	; (80030a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800301a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003020:	60fb      	str	r3, [r7, #12]
 8003022:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003024:	f7ff f9de 	bl	80023e4 <HAL_PWREx_GetVoltageRange>
 8003028:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800302a:	4b1e      	ldr	r3, [pc, #120]	; (80030a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800302c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800302e:	4a1d      	ldr	r2, [pc, #116]	; (80030a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003030:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003034:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800303c:	d10b      	bne.n	8003056 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b80      	cmp	r3, #128	; 0x80
 8003042:	d919      	bls.n	8003078 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2ba0      	cmp	r3, #160	; 0xa0
 8003048:	d902      	bls.n	8003050 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800304a:	2302      	movs	r3, #2
 800304c:	613b      	str	r3, [r7, #16]
 800304e:	e013      	b.n	8003078 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003050:	2301      	movs	r3, #1
 8003052:	613b      	str	r3, [r7, #16]
 8003054:	e010      	b.n	8003078 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2b80      	cmp	r3, #128	; 0x80
 800305a:	d902      	bls.n	8003062 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800305c:	2303      	movs	r3, #3
 800305e:	613b      	str	r3, [r7, #16]
 8003060:	e00a      	b.n	8003078 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b80      	cmp	r3, #128	; 0x80
 8003066:	d102      	bne.n	800306e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003068:	2302      	movs	r3, #2
 800306a:	613b      	str	r3, [r7, #16]
 800306c:	e004      	b.n	8003078 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2b70      	cmp	r3, #112	; 0x70
 8003072:	d101      	bne.n	8003078 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003074:	2301      	movs	r3, #1
 8003076:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003078:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f023 0207 	bic.w	r2, r3, #7
 8003080:	4909      	ldr	r1, [pc, #36]	; (80030a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	4313      	orrs	r3, r2
 8003086:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003088:	4b07      	ldr	r3, [pc, #28]	; (80030a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0307 	and.w	r3, r3, #7
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	429a      	cmp	r2, r3
 8003094:	d001      	beq.n	800309a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e000      	b.n	800309c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3718      	adds	r7, #24
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	40021000 	.word	0x40021000
 80030a8:	40022000 	.word	0x40022000

080030ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030b4:	2300      	movs	r3, #0
 80030b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030b8:	2300      	movs	r3, #0
 80030ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d041      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030cc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030d0:	d02a      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80030d2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030d6:	d824      	bhi.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80030d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030dc:	d008      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80030de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030e2:	d81e      	bhi.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00a      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x52>
 80030e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030ec:	d010      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80030ee:	e018      	b.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030f0:	4b86      	ldr	r3, [pc, #536]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	4a85      	ldr	r2, [pc, #532]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030fa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030fc:	e015      	b.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	3304      	adds	r3, #4
 8003102:	2100      	movs	r1, #0
 8003104:	4618      	mov	r0, r3
 8003106:	f000 fabb 	bl	8003680 <RCCEx_PLLSAI1_Config>
 800310a:	4603      	mov	r3, r0
 800310c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800310e:	e00c      	b.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	3320      	adds	r3, #32
 8003114:	2100      	movs	r1, #0
 8003116:	4618      	mov	r0, r3
 8003118:	f000 fba6 	bl	8003868 <RCCEx_PLLSAI2_Config>
 800311c:	4603      	mov	r3, r0
 800311e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003120:	e003      	b.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	74fb      	strb	r3, [r7, #19]
      break;
 8003126:	e000      	b.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003128:	bf00      	nop
    }

    if(ret == HAL_OK)
 800312a:	7cfb      	ldrb	r3, [r7, #19]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d10b      	bne.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003130:	4b76      	ldr	r3, [pc, #472]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003136:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800313e:	4973      	ldr	r1, [pc, #460]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003140:	4313      	orrs	r3, r2
 8003142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003146:	e001      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003148:	7cfb      	ldrb	r3, [r7, #19]
 800314a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d041      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800315c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003160:	d02a      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003162:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003166:	d824      	bhi.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003168:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800316c:	d008      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800316e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003172:	d81e      	bhi.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00a      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003178:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800317c:	d010      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800317e:	e018      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003180:	4b62      	ldr	r3, [pc, #392]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	4a61      	ldr	r2, [pc, #388]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003186:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800318a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800318c:	e015      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	3304      	adds	r3, #4
 8003192:	2100      	movs	r1, #0
 8003194:	4618      	mov	r0, r3
 8003196:	f000 fa73 	bl	8003680 <RCCEx_PLLSAI1_Config>
 800319a:	4603      	mov	r3, r0
 800319c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800319e:	e00c      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	3320      	adds	r3, #32
 80031a4:	2100      	movs	r1, #0
 80031a6:	4618      	mov	r0, r3
 80031a8:	f000 fb5e 	bl	8003868 <RCCEx_PLLSAI2_Config>
 80031ac:	4603      	mov	r3, r0
 80031ae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031b0:	e003      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	74fb      	strb	r3, [r7, #19]
      break;
 80031b6:	e000      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80031b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031ba:	7cfb      	ldrb	r3, [r7, #19]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d10b      	bne.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031c0:	4b52      	ldr	r3, [pc, #328]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031ce:	494f      	ldr	r1, [pc, #316]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80031d6:	e001      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031d8:	7cfb      	ldrb	r3, [r7, #19]
 80031da:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f000 80a0 	beq.w	800332a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031ea:	2300      	movs	r3, #0
 80031ec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031ee:	4b47      	ldr	r3, [pc, #284]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x152>
 80031fa:	2301      	movs	r3, #1
 80031fc:	e000      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80031fe:	2300      	movs	r3, #0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00d      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003204:	4b41      	ldr	r3, [pc, #260]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003208:	4a40      	ldr	r2, [pc, #256]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800320a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800320e:	6593      	str	r3, [r2, #88]	; 0x58
 8003210:	4b3e      	ldr	r3, [pc, #248]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003218:	60bb      	str	r3, [r7, #8]
 800321a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800321c:	2301      	movs	r3, #1
 800321e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003220:	4b3b      	ldr	r3, [pc, #236]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a3a      	ldr	r2, [pc, #232]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800322a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800322c:	f7fd fd44 	bl	8000cb8 <HAL_GetTick>
 8003230:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003232:	e009      	b.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003234:	f7fd fd40 	bl	8000cb8 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b02      	cmp	r3, #2
 8003240:	d902      	bls.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	74fb      	strb	r3, [r7, #19]
        break;
 8003246:	e005      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003248:	4b31      	ldr	r3, [pc, #196]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0ef      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003254:	7cfb      	ldrb	r3, [r7, #19]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d15c      	bne.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800325a:	4b2c      	ldr	r3, [pc, #176]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800325c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003260:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003264:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d01f      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x200>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	429a      	cmp	r2, r3
 8003276:	d019      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003278:	4b24      	ldr	r3, [pc, #144]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800327a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800327e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003282:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003284:	4b21      	ldr	r3, [pc, #132]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328a:	4a20      	ldr	r2, [pc, #128]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800328c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003290:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003294:	4b1d      	ldr	r3, [pc, #116]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329a:	4a1c      	ldr	r2, [pc, #112]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800329c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032a4:	4a19      	ldr	r2, [pc, #100]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d016      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b6:	f7fd fcff 	bl	8000cb8 <HAL_GetTick>
 80032ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032bc:	e00b      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032be:	f7fd fcfb 	bl	8000cb8 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d902      	bls.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	74fb      	strb	r3, [r7, #19]
            break;
 80032d4:	e006      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032d6:	4b0d      	ldr	r3, [pc, #52]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d0ec      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80032e4:	7cfb      	ldrb	r3, [r7, #19]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10c      	bne.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032ea:	4b08      	ldr	r3, [pc, #32]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032fa:	4904      	ldr	r1, [pc, #16]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003302:	e009      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003304:	7cfb      	ldrb	r3, [r7, #19]
 8003306:	74bb      	strb	r3, [r7, #18]
 8003308:	e006      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800330a:	bf00      	nop
 800330c:	40021000 	.word	0x40021000
 8003310:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003314:	7cfb      	ldrb	r3, [r7, #19]
 8003316:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003318:	7c7b      	ldrb	r3, [r7, #17]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d105      	bne.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800331e:	4b9e      	ldr	r3, [pc, #632]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003322:	4a9d      	ldr	r2, [pc, #628]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003324:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003328:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00a      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003336:	4b98      	ldr	r3, [pc, #608]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333c:	f023 0203 	bic.w	r2, r3, #3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003344:	4994      	ldr	r1, [pc, #592]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003346:	4313      	orrs	r3, r2
 8003348:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00a      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003358:	4b8f      	ldr	r3, [pc, #572]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800335a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335e:	f023 020c 	bic.w	r2, r3, #12
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003366:	498c      	ldr	r1, [pc, #560]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003368:	4313      	orrs	r3, r2
 800336a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0304 	and.w	r3, r3, #4
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00a      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800337a:	4b87      	ldr	r3, [pc, #540]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800337c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003380:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003388:	4983      	ldr	r1, [pc, #524]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800338a:	4313      	orrs	r3, r2
 800338c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0308 	and.w	r3, r3, #8
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00a      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800339c:	4b7e      	ldr	r3, [pc, #504]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800339e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033aa:	497b      	ldr	r1, [pc, #492]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0310 	and.w	r3, r3, #16
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00a      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033be:	4b76      	ldr	r3, [pc, #472]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033cc:	4972      	ldr	r1, [pc, #456]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0320 	and.w	r3, r3, #32
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00a      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033e0:	4b6d      	ldr	r3, [pc, #436]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ee:	496a      	ldr	r1, [pc, #424]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00a      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003402:	4b65      	ldr	r3, [pc, #404]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003408:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003410:	4961      	ldr	r1, [pc, #388]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003412:	4313      	orrs	r3, r2
 8003414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00a      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003424:	4b5c      	ldr	r3, [pc, #368]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003432:	4959      	ldr	r1, [pc, #356]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003434:	4313      	orrs	r3, r2
 8003436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00a      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003446:	4b54      	ldr	r3, [pc, #336]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003454:	4950      	ldr	r1, [pc, #320]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003456:	4313      	orrs	r3, r2
 8003458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00a      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003468:	4b4b      	ldr	r3, [pc, #300]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800346a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003476:	4948      	ldr	r1, [pc, #288]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003478:	4313      	orrs	r3, r2
 800347a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00a      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800348a:	4b43      	ldr	r3, [pc, #268]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003490:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003498:	493f      	ldr	r1, [pc, #252]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800349a:	4313      	orrs	r3, r2
 800349c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d028      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034ac:	4b3a      	ldr	r3, [pc, #232]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034ba:	4937      	ldr	r1, [pc, #220]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034ca:	d106      	bne.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034cc:	4b32      	ldr	r3, [pc, #200]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	4a31      	ldr	r2, [pc, #196]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034d6:	60d3      	str	r3, [r2, #12]
 80034d8:	e011      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034e2:	d10c      	bne.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	3304      	adds	r3, #4
 80034e8:	2101      	movs	r1, #1
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 f8c8 	bl	8003680 <RCCEx_PLLSAI1_Config>
 80034f0:	4603      	mov	r3, r0
 80034f2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80034f4:	7cfb      	ldrb	r3, [r7, #19]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80034fa:	7cfb      	ldrb	r3, [r7, #19]
 80034fc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d028      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800350a:	4b23      	ldr	r3, [pc, #140]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800350c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003510:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003518:	491f      	ldr	r1, [pc, #124]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800351a:	4313      	orrs	r3, r2
 800351c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003524:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003528:	d106      	bne.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800352a:	4b1b      	ldr	r3, [pc, #108]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	4a1a      	ldr	r2, [pc, #104]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003530:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003534:	60d3      	str	r3, [r2, #12]
 8003536:	e011      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003540:	d10c      	bne.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	3304      	adds	r3, #4
 8003546:	2101      	movs	r1, #1
 8003548:	4618      	mov	r0, r3
 800354a:	f000 f899 	bl	8003680 <RCCEx_PLLSAI1_Config>
 800354e:	4603      	mov	r3, r0
 8003550:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003552:	7cfb      	ldrb	r3, [r7, #19]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d001      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003558:	7cfb      	ldrb	r3, [r7, #19]
 800355a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d02b      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003568:	4b0b      	ldr	r3, [pc, #44]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800356a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003576:	4908      	ldr	r1, [pc, #32]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003578:	4313      	orrs	r3, r2
 800357a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003582:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003586:	d109      	bne.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003588:	4b03      	ldr	r3, [pc, #12]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	4a02      	ldr	r2, [pc, #8]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800358e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003592:	60d3      	str	r3, [r2, #12]
 8003594:	e014      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003596:	bf00      	nop
 8003598:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035a4:	d10c      	bne.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	3304      	adds	r3, #4
 80035aa:	2101      	movs	r1, #1
 80035ac:	4618      	mov	r0, r3
 80035ae:	f000 f867 	bl	8003680 <RCCEx_PLLSAI1_Config>
 80035b2:	4603      	mov	r3, r0
 80035b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035b6:	7cfb      	ldrb	r3, [r7, #19]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80035bc:	7cfb      	ldrb	r3, [r7, #19]
 80035be:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d02f      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035cc:	4b2b      	ldr	r3, [pc, #172]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035da:	4928      	ldr	r1, [pc, #160]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035ea:	d10d      	bne.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3304      	adds	r3, #4
 80035f0:	2102      	movs	r1, #2
 80035f2:	4618      	mov	r0, r3
 80035f4:	f000 f844 	bl	8003680 <RCCEx_PLLSAI1_Config>
 80035f8:	4603      	mov	r3, r0
 80035fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035fc:	7cfb      	ldrb	r3, [r7, #19]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d014      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003602:	7cfb      	ldrb	r3, [r7, #19]
 8003604:	74bb      	strb	r3, [r7, #18]
 8003606:	e011      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800360c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003610:	d10c      	bne.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	3320      	adds	r3, #32
 8003616:	2102      	movs	r1, #2
 8003618:	4618      	mov	r0, r3
 800361a:	f000 f925 	bl	8003868 <RCCEx_PLLSAI2_Config>
 800361e:	4603      	mov	r3, r0
 8003620:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003622:	7cfb      	ldrb	r3, [r7, #19]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003628:	7cfb      	ldrb	r3, [r7, #19]
 800362a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00a      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003638:	4b10      	ldr	r3, [pc, #64]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800363a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800363e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003646:	490d      	ldr	r1, [pc, #52]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003648:	4313      	orrs	r3, r2
 800364a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00b      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800365a:	4b08      	ldr	r3, [pc, #32]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800365c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003660:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800366a:	4904      	ldr	r1, [pc, #16]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800366c:	4313      	orrs	r3, r2
 800366e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003672:	7cbb      	ldrb	r3, [r7, #18]
}
 8003674:	4618      	mov	r0, r3
 8003676:	3718      	adds	r7, #24
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40021000 	.word	0x40021000

08003680 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800368a:	2300      	movs	r3, #0
 800368c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800368e:	4b75      	ldr	r3, [pc, #468]	; (8003864 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	f003 0303 	and.w	r3, r3, #3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d018      	beq.n	80036cc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800369a:	4b72      	ldr	r3, [pc, #456]	; (8003864 <RCCEx_PLLSAI1_Config+0x1e4>)
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	f003 0203 	and.w	r2, r3, #3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d10d      	bne.n	80036c6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
       ||
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d009      	beq.n	80036c6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80036b2:	4b6c      	ldr	r3, [pc, #432]	; (8003864 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	091b      	lsrs	r3, r3, #4
 80036b8:	f003 0307 	and.w	r3, r3, #7
 80036bc:	1c5a      	adds	r2, r3, #1
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
       ||
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d047      	beq.n	8003756 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	73fb      	strb	r3, [r7, #15]
 80036ca:	e044      	b.n	8003756 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2b03      	cmp	r3, #3
 80036d2:	d018      	beq.n	8003706 <RCCEx_PLLSAI1_Config+0x86>
 80036d4:	2b03      	cmp	r3, #3
 80036d6:	d825      	bhi.n	8003724 <RCCEx_PLLSAI1_Config+0xa4>
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d002      	beq.n	80036e2 <RCCEx_PLLSAI1_Config+0x62>
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d009      	beq.n	80036f4 <RCCEx_PLLSAI1_Config+0x74>
 80036e0:	e020      	b.n	8003724 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036e2:	4b60      	ldr	r3, [pc, #384]	; (8003864 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d11d      	bne.n	800372a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036f2:	e01a      	b.n	800372a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036f4:	4b5b      	ldr	r3, [pc, #364]	; (8003864 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d116      	bne.n	800372e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003704:	e013      	b.n	800372e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003706:	4b57      	ldr	r3, [pc, #348]	; (8003864 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10f      	bne.n	8003732 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003712:	4b54      	ldr	r3, [pc, #336]	; (8003864 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d109      	bne.n	8003732 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003722:	e006      	b.n	8003732 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	73fb      	strb	r3, [r7, #15]
      break;
 8003728:	e004      	b.n	8003734 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800372a:	bf00      	nop
 800372c:	e002      	b.n	8003734 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800372e:	bf00      	nop
 8003730:	e000      	b.n	8003734 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003732:	bf00      	nop
    }

    if(status == HAL_OK)
 8003734:	7bfb      	ldrb	r3, [r7, #15]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10d      	bne.n	8003756 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800373a:	4b4a      	ldr	r3, [pc, #296]	; (8003864 <RCCEx_PLLSAI1_Config+0x1e4>)
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6819      	ldr	r1, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	3b01      	subs	r3, #1
 800374c:	011b      	lsls	r3, r3, #4
 800374e:	430b      	orrs	r3, r1
 8003750:	4944      	ldr	r1, [pc, #272]	; (8003864 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003752:	4313      	orrs	r3, r2
 8003754:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003756:	7bfb      	ldrb	r3, [r7, #15]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d17d      	bne.n	8003858 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800375c:	4b41      	ldr	r3, [pc, #260]	; (8003864 <RCCEx_PLLSAI1_Config+0x1e4>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a40      	ldr	r2, [pc, #256]	; (8003864 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003762:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003766:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003768:	f7fd faa6 	bl	8000cb8 <HAL_GetTick>
 800376c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800376e:	e009      	b.n	8003784 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003770:	f7fd faa2 	bl	8000cb8 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d902      	bls.n	8003784 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	73fb      	strb	r3, [r7, #15]
        break;
 8003782:	e005      	b.n	8003790 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003784:	4b37      	ldr	r3, [pc, #220]	; (8003864 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1ef      	bne.n	8003770 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003790:	7bfb      	ldrb	r3, [r7, #15]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d160      	bne.n	8003858 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d111      	bne.n	80037c0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800379c:	4b31      	ldr	r3, [pc, #196]	; (8003864 <RCCEx_PLLSAI1_Config+0x1e4>)
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80037a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6892      	ldr	r2, [r2, #8]
 80037ac:	0211      	lsls	r1, r2, #8
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	68d2      	ldr	r2, [r2, #12]
 80037b2:	0912      	lsrs	r2, r2, #4
 80037b4:	0452      	lsls	r2, r2, #17
 80037b6:	430a      	orrs	r2, r1
 80037b8:	492a      	ldr	r1, [pc, #168]	; (8003864 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	610b      	str	r3, [r1, #16]
 80037be:	e027      	b.n	8003810 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d112      	bne.n	80037ec <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037c6:	4b27      	ldr	r3, [pc, #156]	; (8003864 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80037ce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	6892      	ldr	r2, [r2, #8]
 80037d6:	0211      	lsls	r1, r2, #8
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	6912      	ldr	r2, [r2, #16]
 80037dc:	0852      	lsrs	r2, r2, #1
 80037de:	3a01      	subs	r2, #1
 80037e0:	0552      	lsls	r2, r2, #21
 80037e2:	430a      	orrs	r2, r1
 80037e4:	491f      	ldr	r1, [pc, #124]	; (8003864 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	610b      	str	r3, [r1, #16]
 80037ea:	e011      	b.n	8003810 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037ec:	4b1d      	ldr	r3, [pc, #116]	; (8003864 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80037f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	6892      	ldr	r2, [r2, #8]
 80037fc:	0211      	lsls	r1, r2, #8
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	6952      	ldr	r2, [r2, #20]
 8003802:	0852      	lsrs	r2, r2, #1
 8003804:	3a01      	subs	r2, #1
 8003806:	0652      	lsls	r2, r2, #25
 8003808:	430a      	orrs	r2, r1
 800380a:	4916      	ldr	r1, [pc, #88]	; (8003864 <RCCEx_PLLSAI1_Config+0x1e4>)
 800380c:	4313      	orrs	r3, r2
 800380e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003810:	4b14      	ldr	r3, [pc, #80]	; (8003864 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a13      	ldr	r2, [pc, #76]	; (8003864 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003816:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800381a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800381c:	f7fd fa4c 	bl	8000cb8 <HAL_GetTick>
 8003820:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003822:	e009      	b.n	8003838 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003824:	f7fd fa48 	bl	8000cb8 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d902      	bls.n	8003838 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	73fb      	strb	r3, [r7, #15]
          break;
 8003836:	e005      	b.n	8003844 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003838:	4b0a      	ldr	r3, [pc, #40]	; (8003864 <RCCEx_PLLSAI1_Config+0x1e4>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0ef      	beq.n	8003824 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003844:	7bfb      	ldrb	r3, [r7, #15]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d106      	bne.n	8003858 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800384a:	4b06      	ldr	r3, [pc, #24]	; (8003864 <RCCEx_PLLSAI1_Config+0x1e4>)
 800384c:	691a      	ldr	r2, [r3, #16]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	4904      	ldr	r1, [pc, #16]	; (8003864 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003854:	4313      	orrs	r3, r2
 8003856:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003858:	7bfb      	ldrb	r3, [r7, #15]
}
 800385a:	4618      	mov	r0, r3
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	40021000 	.word	0x40021000

08003868 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003872:	2300      	movs	r3, #0
 8003874:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003876:	4b6a      	ldr	r3, [pc, #424]	; (8003a20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	f003 0303 	and.w	r3, r3, #3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d018      	beq.n	80038b4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003882:	4b67      	ldr	r3, [pc, #412]	; (8003a20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	f003 0203 	and.w	r2, r3, #3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	429a      	cmp	r2, r3
 8003890:	d10d      	bne.n	80038ae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
       ||
 8003896:	2b00      	cmp	r3, #0
 8003898:	d009      	beq.n	80038ae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800389a:	4b61      	ldr	r3, [pc, #388]	; (8003a20 <RCCEx_PLLSAI2_Config+0x1b8>)
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	091b      	lsrs	r3, r3, #4
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	1c5a      	adds	r2, r3, #1
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
       ||
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d047      	beq.n	800393e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	73fb      	strb	r3, [r7, #15]
 80038b2:	e044      	b.n	800393e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2b03      	cmp	r3, #3
 80038ba:	d018      	beq.n	80038ee <RCCEx_PLLSAI2_Config+0x86>
 80038bc:	2b03      	cmp	r3, #3
 80038be:	d825      	bhi.n	800390c <RCCEx_PLLSAI2_Config+0xa4>
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d002      	beq.n	80038ca <RCCEx_PLLSAI2_Config+0x62>
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d009      	beq.n	80038dc <RCCEx_PLLSAI2_Config+0x74>
 80038c8:	e020      	b.n	800390c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038ca:	4b55      	ldr	r3, [pc, #340]	; (8003a20 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d11d      	bne.n	8003912 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038da:	e01a      	b.n	8003912 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038dc:	4b50      	ldr	r3, [pc, #320]	; (8003a20 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d116      	bne.n	8003916 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038ec:	e013      	b.n	8003916 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038ee:	4b4c      	ldr	r3, [pc, #304]	; (8003a20 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10f      	bne.n	800391a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038fa:	4b49      	ldr	r3, [pc, #292]	; (8003a20 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d109      	bne.n	800391a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800390a:	e006      	b.n	800391a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	73fb      	strb	r3, [r7, #15]
      break;
 8003910:	e004      	b.n	800391c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003912:	bf00      	nop
 8003914:	e002      	b.n	800391c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003916:	bf00      	nop
 8003918:	e000      	b.n	800391c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800391a:	bf00      	nop
    }

    if(status == HAL_OK)
 800391c:	7bfb      	ldrb	r3, [r7, #15]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10d      	bne.n	800393e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003922:	4b3f      	ldr	r3, [pc, #252]	; (8003a20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6819      	ldr	r1, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	3b01      	subs	r3, #1
 8003934:	011b      	lsls	r3, r3, #4
 8003936:	430b      	orrs	r3, r1
 8003938:	4939      	ldr	r1, [pc, #228]	; (8003a20 <RCCEx_PLLSAI2_Config+0x1b8>)
 800393a:	4313      	orrs	r3, r2
 800393c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800393e:	7bfb      	ldrb	r3, [r7, #15]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d167      	bne.n	8003a14 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003944:	4b36      	ldr	r3, [pc, #216]	; (8003a20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a35      	ldr	r2, [pc, #212]	; (8003a20 <RCCEx_PLLSAI2_Config+0x1b8>)
 800394a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800394e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003950:	f7fd f9b2 	bl	8000cb8 <HAL_GetTick>
 8003954:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003956:	e009      	b.n	800396c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003958:	f7fd f9ae 	bl	8000cb8 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d902      	bls.n	800396c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	73fb      	strb	r3, [r7, #15]
        break;
 800396a:	e005      	b.n	8003978 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800396c:	4b2c      	ldr	r3, [pc, #176]	; (8003a20 <RCCEx_PLLSAI2_Config+0x1b8>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1ef      	bne.n	8003958 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003978:	7bfb      	ldrb	r3, [r7, #15]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d14a      	bne.n	8003a14 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d111      	bne.n	80039a8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003984:	4b26      	ldr	r3, [pc, #152]	; (8003a20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800398c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	6892      	ldr	r2, [r2, #8]
 8003994:	0211      	lsls	r1, r2, #8
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	68d2      	ldr	r2, [r2, #12]
 800399a:	0912      	lsrs	r2, r2, #4
 800399c:	0452      	lsls	r2, r2, #17
 800399e:	430a      	orrs	r2, r1
 80039a0:	491f      	ldr	r1, [pc, #124]	; (8003a20 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	614b      	str	r3, [r1, #20]
 80039a6:	e011      	b.n	80039cc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039a8:	4b1d      	ldr	r3, [pc, #116]	; (8003a20 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039aa:	695b      	ldr	r3, [r3, #20]
 80039ac:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80039b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	6892      	ldr	r2, [r2, #8]
 80039b8:	0211      	lsls	r1, r2, #8
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	6912      	ldr	r2, [r2, #16]
 80039be:	0852      	lsrs	r2, r2, #1
 80039c0:	3a01      	subs	r2, #1
 80039c2:	0652      	lsls	r2, r2, #25
 80039c4:	430a      	orrs	r2, r1
 80039c6:	4916      	ldr	r1, [pc, #88]	; (8003a20 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80039cc:	4b14      	ldr	r3, [pc, #80]	; (8003a20 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a13      	ldr	r2, [pc, #76]	; (8003a20 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d8:	f7fd f96e 	bl	8000cb8 <HAL_GetTick>
 80039dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039de:	e009      	b.n	80039f4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039e0:	f7fd f96a 	bl	8000cb8 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d902      	bls.n	80039f4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	73fb      	strb	r3, [r7, #15]
          break;
 80039f2:	e005      	b.n	8003a00 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039f4:	4b0a      	ldr	r3, [pc, #40]	; (8003a20 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0ef      	beq.n	80039e0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003a00:	7bfb      	ldrb	r3, [r7, #15]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d106      	bne.n	8003a14 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003a06:	4b06      	ldr	r3, [pc, #24]	; (8003a20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a08:	695a      	ldr	r2, [r3, #20]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	4904      	ldr	r1, [pc, #16]	; (8003a20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40021000 	.word	0x40021000

08003a24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e040      	b.n	8003ab8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d106      	bne.n	8003a4c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7fd f840 	bl	8000acc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2224      	movs	r2, #36	; 0x24
 8003a50:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 0201 	bic.w	r2, r2, #1
 8003a60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f8c0 	bl	8003be8 <UART_SetConfig>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d101      	bne.n	8003a72 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e022      	b.n	8003ab8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d002      	beq.n	8003a80 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 fb6c 	bl	8004158 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689a      	ldr	r2, [r3, #8]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f042 0201 	orr.w	r2, r2, #1
 8003aae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 fbf3 	bl	800429c <UART_CheckIdleState>
 8003ab6:	4603      	mov	r3, r0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3708      	adds	r7, #8
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b08a      	sub	sp, #40	; 0x28
 8003ac4:	af02      	add	r7, sp, #8
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	603b      	str	r3, [r7, #0]
 8003acc:	4613      	mov	r3, r2
 8003ace:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ad4:	2b20      	cmp	r3, #32
 8003ad6:	f040 8082 	bne.w	8003bde <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d002      	beq.n	8003ae6 <HAL_UART_Transmit+0x26>
 8003ae0:	88fb      	ldrh	r3, [r7, #6]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e07a      	b.n	8003be0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d101      	bne.n	8003af8 <HAL_UART_Transmit+0x38>
 8003af4:	2302      	movs	r3, #2
 8003af6:	e073      	b.n	8003be0 <HAL_UART_Transmit+0x120>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2221      	movs	r2, #33	; 0x21
 8003b0c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b0e:	f7fd f8d3 	bl	8000cb8 <HAL_GetTick>
 8003b12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	88fa      	ldrh	r2, [r7, #6]
 8003b18:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	88fa      	ldrh	r2, [r7, #6]
 8003b20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b2c:	d108      	bne.n	8003b40 <HAL_UART_Transmit+0x80>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d104      	bne.n	8003b40 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003b36:	2300      	movs	r3, #0
 8003b38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	61bb      	str	r3, [r7, #24]
 8003b3e:	e003      	b.n	8003b48 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b44:	2300      	movs	r3, #0
 8003b46:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003b50:	e02d      	b.n	8003bae <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	2180      	movs	r1, #128	; 0x80
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f000 fbe6 	bl	800432e <UART_WaitOnFlagUntilTimeout>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e039      	b.n	8003be0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10b      	bne.n	8003b8a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	881a      	ldrh	r2, [r3, #0]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b7e:	b292      	uxth	r2, r2
 8003b80:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	3302      	adds	r3, #2
 8003b86:	61bb      	str	r3, [r7, #24]
 8003b88:	e008      	b.n	8003b9c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	781a      	ldrb	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	b292      	uxth	r2, r2
 8003b94:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1cb      	bne.n	8003b52 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	2140      	movs	r1, #64	; 0x40
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f000 fbb2 	bl	800432e <UART_WaitOnFlagUntilTimeout>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d001      	beq.n	8003bd4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e005      	b.n	8003be0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	e000      	b.n	8003be0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003bde:	2302      	movs	r3, #2
  }
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3720      	adds	r7, #32
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003be8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bec:	b08a      	sub	sp, #40	; 0x28
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	431a      	orrs	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	431a      	orrs	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	69db      	ldr	r3, [r3, #28]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	4ba4      	ldr	r3, [pc, #656]	; (8003ea8 <UART_SetConfig+0x2c0>)
 8003c18:	4013      	ands	r3, r2
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	6812      	ldr	r2, [r2, #0]
 8003c1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c20:	430b      	orrs	r3, r1
 8003c22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	68da      	ldr	r2, [r3, #12]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a99      	ldr	r2, [pc, #612]	; (8003eac <UART_SetConfig+0x2c4>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d004      	beq.n	8003c54 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c50:	4313      	orrs	r3, r2
 8003c52:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c64:	430a      	orrs	r2, r1
 8003c66:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a90      	ldr	r2, [pc, #576]	; (8003eb0 <UART_SetConfig+0x2c8>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d126      	bne.n	8003cc0 <UART_SetConfig+0xd8>
 8003c72:	4b90      	ldr	r3, [pc, #576]	; (8003eb4 <UART_SetConfig+0x2cc>)
 8003c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c78:	f003 0303 	and.w	r3, r3, #3
 8003c7c:	2b03      	cmp	r3, #3
 8003c7e:	d81b      	bhi.n	8003cb8 <UART_SetConfig+0xd0>
 8003c80:	a201      	add	r2, pc, #4	; (adr r2, 8003c88 <UART_SetConfig+0xa0>)
 8003c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c86:	bf00      	nop
 8003c88:	08003c99 	.word	0x08003c99
 8003c8c:	08003ca9 	.word	0x08003ca9
 8003c90:	08003ca1 	.word	0x08003ca1
 8003c94:	08003cb1 	.word	0x08003cb1
 8003c98:	2301      	movs	r3, #1
 8003c9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c9e:	e116      	b.n	8003ece <UART_SetConfig+0x2e6>
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ca6:	e112      	b.n	8003ece <UART_SetConfig+0x2e6>
 8003ca8:	2304      	movs	r3, #4
 8003caa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cae:	e10e      	b.n	8003ece <UART_SetConfig+0x2e6>
 8003cb0:	2308      	movs	r3, #8
 8003cb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cb6:	e10a      	b.n	8003ece <UART_SetConfig+0x2e6>
 8003cb8:	2310      	movs	r3, #16
 8003cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cbe:	e106      	b.n	8003ece <UART_SetConfig+0x2e6>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a7c      	ldr	r2, [pc, #496]	; (8003eb8 <UART_SetConfig+0x2d0>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d138      	bne.n	8003d3c <UART_SetConfig+0x154>
 8003cca:	4b7a      	ldr	r3, [pc, #488]	; (8003eb4 <UART_SetConfig+0x2cc>)
 8003ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd0:	f003 030c 	and.w	r3, r3, #12
 8003cd4:	2b0c      	cmp	r3, #12
 8003cd6:	d82d      	bhi.n	8003d34 <UART_SetConfig+0x14c>
 8003cd8:	a201      	add	r2, pc, #4	; (adr r2, 8003ce0 <UART_SetConfig+0xf8>)
 8003cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cde:	bf00      	nop
 8003ce0:	08003d15 	.word	0x08003d15
 8003ce4:	08003d35 	.word	0x08003d35
 8003ce8:	08003d35 	.word	0x08003d35
 8003cec:	08003d35 	.word	0x08003d35
 8003cf0:	08003d25 	.word	0x08003d25
 8003cf4:	08003d35 	.word	0x08003d35
 8003cf8:	08003d35 	.word	0x08003d35
 8003cfc:	08003d35 	.word	0x08003d35
 8003d00:	08003d1d 	.word	0x08003d1d
 8003d04:	08003d35 	.word	0x08003d35
 8003d08:	08003d35 	.word	0x08003d35
 8003d0c:	08003d35 	.word	0x08003d35
 8003d10:	08003d2d 	.word	0x08003d2d
 8003d14:	2300      	movs	r3, #0
 8003d16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d1a:	e0d8      	b.n	8003ece <UART_SetConfig+0x2e6>
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d22:	e0d4      	b.n	8003ece <UART_SetConfig+0x2e6>
 8003d24:	2304      	movs	r3, #4
 8003d26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d2a:	e0d0      	b.n	8003ece <UART_SetConfig+0x2e6>
 8003d2c:	2308      	movs	r3, #8
 8003d2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d32:	e0cc      	b.n	8003ece <UART_SetConfig+0x2e6>
 8003d34:	2310      	movs	r3, #16
 8003d36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d3a:	e0c8      	b.n	8003ece <UART_SetConfig+0x2e6>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a5e      	ldr	r2, [pc, #376]	; (8003ebc <UART_SetConfig+0x2d4>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d125      	bne.n	8003d92 <UART_SetConfig+0x1aa>
 8003d46:	4b5b      	ldr	r3, [pc, #364]	; (8003eb4 <UART_SetConfig+0x2cc>)
 8003d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d4c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d50:	2b30      	cmp	r3, #48	; 0x30
 8003d52:	d016      	beq.n	8003d82 <UART_SetConfig+0x19a>
 8003d54:	2b30      	cmp	r3, #48	; 0x30
 8003d56:	d818      	bhi.n	8003d8a <UART_SetConfig+0x1a2>
 8003d58:	2b20      	cmp	r3, #32
 8003d5a:	d00a      	beq.n	8003d72 <UART_SetConfig+0x18a>
 8003d5c:	2b20      	cmp	r3, #32
 8003d5e:	d814      	bhi.n	8003d8a <UART_SetConfig+0x1a2>
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d002      	beq.n	8003d6a <UART_SetConfig+0x182>
 8003d64:	2b10      	cmp	r3, #16
 8003d66:	d008      	beq.n	8003d7a <UART_SetConfig+0x192>
 8003d68:	e00f      	b.n	8003d8a <UART_SetConfig+0x1a2>
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d70:	e0ad      	b.n	8003ece <UART_SetConfig+0x2e6>
 8003d72:	2302      	movs	r3, #2
 8003d74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d78:	e0a9      	b.n	8003ece <UART_SetConfig+0x2e6>
 8003d7a:	2304      	movs	r3, #4
 8003d7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d80:	e0a5      	b.n	8003ece <UART_SetConfig+0x2e6>
 8003d82:	2308      	movs	r3, #8
 8003d84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d88:	e0a1      	b.n	8003ece <UART_SetConfig+0x2e6>
 8003d8a:	2310      	movs	r3, #16
 8003d8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d90:	e09d      	b.n	8003ece <UART_SetConfig+0x2e6>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a4a      	ldr	r2, [pc, #296]	; (8003ec0 <UART_SetConfig+0x2d8>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d125      	bne.n	8003de8 <UART_SetConfig+0x200>
 8003d9c:	4b45      	ldr	r3, [pc, #276]	; (8003eb4 <UART_SetConfig+0x2cc>)
 8003d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003da6:	2bc0      	cmp	r3, #192	; 0xc0
 8003da8:	d016      	beq.n	8003dd8 <UART_SetConfig+0x1f0>
 8003daa:	2bc0      	cmp	r3, #192	; 0xc0
 8003dac:	d818      	bhi.n	8003de0 <UART_SetConfig+0x1f8>
 8003dae:	2b80      	cmp	r3, #128	; 0x80
 8003db0:	d00a      	beq.n	8003dc8 <UART_SetConfig+0x1e0>
 8003db2:	2b80      	cmp	r3, #128	; 0x80
 8003db4:	d814      	bhi.n	8003de0 <UART_SetConfig+0x1f8>
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d002      	beq.n	8003dc0 <UART_SetConfig+0x1d8>
 8003dba:	2b40      	cmp	r3, #64	; 0x40
 8003dbc:	d008      	beq.n	8003dd0 <UART_SetConfig+0x1e8>
 8003dbe:	e00f      	b.n	8003de0 <UART_SetConfig+0x1f8>
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dc6:	e082      	b.n	8003ece <UART_SetConfig+0x2e6>
 8003dc8:	2302      	movs	r3, #2
 8003dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dce:	e07e      	b.n	8003ece <UART_SetConfig+0x2e6>
 8003dd0:	2304      	movs	r3, #4
 8003dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dd6:	e07a      	b.n	8003ece <UART_SetConfig+0x2e6>
 8003dd8:	2308      	movs	r3, #8
 8003dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dde:	e076      	b.n	8003ece <UART_SetConfig+0x2e6>
 8003de0:	2310      	movs	r3, #16
 8003de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003de6:	e072      	b.n	8003ece <UART_SetConfig+0x2e6>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a35      	ldr	r2, [pc, #212]	; (8003ec4 <UART_SetConfig+0x2dc>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d12a      	bne.n	8003e48 <UART_SetConfig+0x260>
 8003df2:	4b30      	ldr	r3, [pc, #192]	; (8003eb4 <UART_SetConfig+0x2cc>)
 8003df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e00:	d01a      	beq.n	8003e38 <UART_SetConfig+0x250>
 8003e02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e06:	d81b      	bhi.n	8003e40 <UART_SetConfig+0x258>
 8003e08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e0c:	d00c      	beq.n	8003e28 <UART_SetConfig+0x240>
 8003e0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e12:	d815      	bhi.n	8003e40 <UART_SetConfig+0x258>
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d003      	beq.n	8003e20 <UART_SetConfig+0x238>
 8003e18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e1c:	d008      	beq.n	8003e30 <UART_SetConfig+0x248>
 8003e1e:	e00f      	b.n	8003e40 <UART_SetConfig+0x258>
 8003e20:	2300      	movs	r3, #0
 8003e22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e26:	e052      	b.n	8003ece <UART_SetConfig+0x2e6>
 8003e28:	2302      	movs	r3, #2
 8003e2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e2e:	e04e      	b.n	8003ece <UART_SetConfig+0x2e6>
 8003e30:	2304      	movs	r3, #4
 8003e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e36:	e04a      	b.n	8003ece <UART_SetConfig+0x2e6>
 8003e38:	2308      	movs	r3, #8
 8003e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e3e:	e046      	b.n	8003ece <UART_SetConfig+0x2e6>
 8003e40:	2310      	movs	r3, #16
 8003e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e46:	e042      	b.n	8003ece <UART_SetConfig+0x2e6>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a17      	ldr	r2, [pc, #92]	; (8003eac <UART_SetConfig+0x2c4>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d13a      	bne.n	8003ec8 <UART_SetConfig+0x2e0>
 8003e52:	4b18      	ldr	r3, [pc, #96]	; (8003eb4 <UART_SetConfig+0x2cc>)
 8003e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e58:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e60:	d01a      	beq.n	8003e98 <UART_SetConfig+0x2b0>
 8003e62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e66:	d81b      	bhi.n	8003ea0 <UART_SetConfig+0x2b8>
 8003e68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e6c:	d00c      	beq.n	8003e88 <UART_SetConfig+0x2a0>
 8003e6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e72:	d815      	bhi.n	8003ea0 <UART_SetConfig+0x2b8>
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d003      	beq.n	8003e80 <UART_SetConfig+0x298>
 8003e78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e7c:	d008      	beq.n	8003e90 <UART_SetConfig+0x2a8>
 8003e7e:	e00f      	b.n	8003ea0 <UART_SetConfig+0x2b8>
 8003e80:	2300      	movs	r3, #0
 8003e82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e86:	e022      	b.n	8003ece <UART_SetConfig+0x2e6>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e8e:	e01e      	b.n	8003ece <UART_SetConfig+0x2e6>
 8003e90:	2304      	movs	r3, #4
 8003e92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e96:	e01a      	b.n	8003ece <UART_SetConfig+0x2e6>
 8003e98:	2308      	movs	r3, #8
 8003e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e9e:	e016      	b.n	8003ece <UART_SetConfig+0x2e6>
 8003ea0:	2310      	movs	r3, #16
 8003ea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ea6:	e012      	b.n	8003ece <UART_SetConfig+0x2e6>
 8003ea8:	efff69f3 	.word	0xefff69f3
 8003eac:	40008000 	.word	0x40008000
 8003eb0:	40013800 	.word	0x40013800
 8003eb4:	40021000 	.word	0x40021000
 8003eb8:	40004400 	.word	0x40004400
 8003ebc:	40004800 	.word	0x40004800
 8003ec0:	40004c00 	.word	0x40004c00
 8003ec4:	40005000 	.word	0x40005000
 8003ec8:	2310      	movs	r3, #16
 8003eca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a9f      	ldr	r2, [pc, #636]	; (8004150 <UART_SetConfig+0x568>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d17a      	bne.n	8003fce <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ed8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003edc:	2b08      	cmp	r3, #8
 8003ede:	d824      	bhi.n	8003f2a <UART_SetConfig+0x342>
 8003ee0:	a201      	add	r2, pc, #4	; (adr r2, 8003ee8 <UART_SetConfig+0x300>)
 8003ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee6:	bf00      	nop
 8003ee8:	08003f0d 	.word	0x08003f0d
 8003eec:	08003f2b 	.word	0x08003f2b
 8003ef0:	08003f15 	.word	0x08003f15
 8003ef4:	08003f2b 	.word	0x08003f2b
 8003ef8:	08003f1b 	.word	0x08003f1b
 8003efc:	08003f2b 	.word	0x08003f2b
 8003f00:	08003f2b 	.word	0x08003f2b
 8003f04:	08003f2b 	.word	0x08003f2b
 8003f08:	08003f23 	.word	0x08003f23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f0c:	f7ff f842 	bl	8002f94 <HAL_RCC_GetPCLK1Freq>
 8003f10:	61f8      	str	r0, [r7, #28]
        break;
 8003f12:	e010      	b.n	8003f36 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f14:	4b8f      	ldr	r3, [pc, #572]	; (8004154 <UART_SetConfig+0x56c>)
 8003f16:	61fb      	str	r3, [r7, #28]
        break;
 8003f18:	e00d      	b.n	8003f36 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f1a:	f7fe ffa3 	bl	8002e64 <HAL_RCC_GetSysClockFreq>
 8003f1e:	61f8      	str	r0, [r7, #28]
        break;
 8003f20:	e009      	b.n	8003f36 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f26:	61fb      	str	r3, [r7, #28]
        break;
 8003f28:	e005      	b.n	8003f36 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003f34:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f000 80fb 	beq.w	8004134 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	4613      	mov	r3, r2
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	4413      	add	r3, r2
 8003f48:	69fa      	ldr	r2, [r7, #28]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d305      	bcc.n	8003f5a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f54:	69fa      	ldr	r2, [r7, #28]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d903      	bls.n	8003f62 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003f60:	e0e8      	b.n	8004134 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	2200      	movs	r2, #0
 8003f66:	461c      	mov	r4, r3
 8003f68:	4615      	mov	r5, r2
 8003f6a:	f04f 0200 	mov.w	r2, #0
 8003f6e:	f04f 0300 	mov.w	r3, #0
 8003f72:	022b      	lsls	r3, r5, #8
 8003f74:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003f78:	0222      	lsls	r2, r4, #8
 8003f7a:	68f9      	ldr	r1, [r7, #12]
 8003f7c:	6849      	ldr	r1, [r1, #4]
 8003f7e:	0849      	lsrs	r1, r1, #1
 8003f80:	2000      	movs	r0, #0
 8003f82:	4688      	mov	r8, r1
 8003f84:	4681      	mov	r9, r0
 8003f86:	eb12 0a08 	adds.w	sl, r2, r8
 8003f8a:	eb43 0b09 	adc.w	fp, r3, r9
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	603b      	str	r3, [r7, #0]
 8003f96:	607a      	str	r2, [r7, #4]
 8003f98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f9c:	4650      	mov	r0, sl
 8003f9e:	4659      	mov	r1, fp
 8003fa0:	f7fc f96e 	bl	8000280 <__aeabi_uldivmod>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4613      	mov	r3, r2
 8003faa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fb2:	d308      	bcc.n	8003fc6 <UART_SetConfig+0x3de>
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fba:	d204      	bcs.n	8003fc6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	60da      	str	r2, [r3, #12]
 8003fc4:	e0b6      	b.n	8004134 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003fcc:	e0b2      	b.n	8004134 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fd6:	d15e      	bne.n	8004096 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003fd8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d828      	bhi.n	8004032 <UART_SetConfig+0x44a>
 8003fe0:	a201      	add	r2, pc, #4	; (adr r2, 8003fe8 <UART_SetConfig+0x400>)
 8003fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe6:	bf00      	nop
 8003fe8:	0800400d 	.word	0x0800400d
 8003fec:	08004015 	.word	0x08004015
 8003ff0:	0800401d 	.word	0x0800401d
 8003ff4:	08004033 	.word	0x08004033
 8003ff8:	08004023 	.word	0x08004023
 8003ffc:	08004033 	.word	0x08004033
 8004000:	08004033 	.word	0x08004033
 8004004:	08004033 	.word	0x08004033
 8004008:	0800402b 	.word	0x0800402b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800400c:	f7fe ffc2 	bl	8002f94 <HAL_RCC_GetPCLK1Freq>
 8004010:	61f8      	str	r0, [r7, #28]
        break;
 8004012:	e014      	b.n	800403e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004014:	f7fe ffd4 	bl	8002fc0 <HAL_RCC_GetPCLK2Freq>
 8004018:	61f8      	str	r0, [r7, #28]
        break;
 800401a:	e010      	b.n	800403e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800401c:	4b4d      	ldr	r3, [pc, #308]	; (8004154 <UART_SetConfig+0x56c>)
 800401e:	61fb      	str	r3, [r7, #28]
        break;
 8004020:	e00d      	b.n	800403e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004022:	f7fe ff1f 	bl	8002e64 <HAL_RCC_GetSysClockFreq>
 8004026:	61f8      	str	r0, [r7, #28]
        break;
 8004028:	e009      	b.n	800403e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800402a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800402e:	61fb      	str	r3, [r7, #28]
        break;
 8004030:	e005      	b.n	800403e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004032:	2300      	movs	r3, #0
 8004034:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800403c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d077      	beq.n	8004134 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	005a      	lsls	r2, r3, #1
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	085b      	lsrs	r3, r3, #1
 800404e:	441a      	add	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	fbb2 f3f3 	udiv	r3, r2, r3
 8004058:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	2b0f      	cmp	r3, #15
 800405e:	d916      	bls.n	800408e <UART_SetConfig+0x4a6>
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004066:	d212      	bcs.n	800408e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	b29b      	uxth	r3, r3
 800406c:	f023 030f 	bic.w	r3, r3, #15
 8004070:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	085b      	lsrs	r3, r3, #1
 8004076:	b29b      	uxth	r3, r3
 8004078:	f003 0307 	and.w	r3, r3, #7
 800407c:	b29a      	uxth	r2, r3
 800407e:	8afb      	ldrh	r3, [r7, #22]
 8004080:	4313      	orrs	r3, r2
 8004082:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	8afa      	ldrh	r2, [r7, #22]
 800408a:	60da      	str	r2, [r3, #12]
 800408c:	e052      	b.n	8004134 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004094:	e04e      	b.n	8004134 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004096:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800409a:	2b08      	cmp	r3, #8
 800409c:	d827      	bhi.n	80040ee <UART_SetConfig+0x506>
 800409e:	a201      	add	r2, pc, #4	; (adr r2, 80040a4 <UART_SetConfig+0x4bc>)
 80040a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a4:	080040c9 	.word	0x080040c9
 80040a8:	080040d1 	.word	0x080040d1
 80040ac:	080040d9 	.word	0x080040d9
 80040b0:	080040ef 	.word	0x080040ef
 80040b4:	080040df 	.word	0x080040df
 80040b8:	080040ef 	.word	0x080040ef
 80040bc:	080040ef 	.word	0x080040ef
 80040c0:	080040ef 	.word	0x080040ef
 80040c4:	080040e7 	.word	0x080040e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040c8:	f7fe ff64 	bl	8002f94 <HAL_RCC_GetPCLK1Freq>
 80040cc:	61f8      	str	r0, [r7, #28]
        break;
 80040ce:	e014      	b.n	80040fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040d0:	f7fe ff76 	bl	8002fc0 <HAL_RCC_GetPCLK2Freq>
 80040d4:	61f8      	str	r0, [r7, #28]
        break;
 80040d6:	e010      	b.n	80040fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040d8:	4b1e      	ldr	r3, [pc, #120]	; (8004154 <UART_SetConfig+0x56c>)
 80040da:	61fb      	str	r3, [r7, #28]
        break;
 80040dc:	e00d      	b.n	80040fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040de:	f7fe fec1 	bl	8002e64 <HAL_RCC_GetSysClockFreq>
 80040e2:	61f8      	str	r0, [r7, #28]
        break;
 80040e4:	e009      	b.n	80040fa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040ea:	61fb      	str	r3, [r7, #28]
        break;
 80040ec:	e005      	b.n	80040fa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80040ee:	2300      	movs	r3, #0
 80040f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80040f8:	bf00      	nop
    }

    if (pclk != 0U)
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d019      	beq.n	8004134 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	085a      	lsrs	r2, r3, #1
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	441a      	add	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004112:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	2b0f      	cmp	r3, #15
 8004118:	d909      	bls.n	800412e <UART_SetConfig+0x546>
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004120:	d205      	bcs.n	800412e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	b29a      	uxth	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	60da      	str	r2, [r3, #12]
 800412c:	e002      	b.n	8004134 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004140:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004144:	4618      	mov	r0, r3
 8004146:	3728      	adds	r7, #40	; 0x28
 8004148:	46bd      	mov	sp, r7
 800414a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800414e:	bf00      	nop
 8004150:	40008000 	.word	0x40008000
 8004154:	00f42400 	.word	0x00f42400

08004158 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00a      	beq.n	8004182 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	430a      	orrs	r2, r1
 8004180:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00a      	beq.n	80041a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	430a      	orrs	r2, r1
 80041a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00a      	beq.n	80041c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	f003 0308 	and.w	r3, r3, #8
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00a      	beq.n	80041e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ec:	f003 0310 	and.w	r3, r3, #16
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00a      	beq.n	800420a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420e:	f003 0320 	and.w	r3, r3, #32
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00a      	beq.n	800422c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	430a      	orrs	r2, r1
 800422a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004234:	2b00      	cmp	r3, #0
 8004236:	d01a      	beq.n	800426e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	430a      	orrs	r2, r1
 800424c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004256:	d10a      	bne.n	800426e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00a      	beq.n	8004290 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	430a      	orrs	r2, r1
 800428e:	605a      	str	r2, [r3, #4]
  }
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af02      	add	r7, sp, #8
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042ac:	f7fc fd04 	bl	8000cb8 <HAL_GetTick>
 80042b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0308 	and.w	r3, r3, #8
 80042bc:	2b08      	cmp	r3, #8
 80042be:	d10e      	bne.n	80042de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042c4:	9300      	str	r3, [sp, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f82d 	bl	800432e <UART_WaitOnFlagUntilTimeout>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e023      	b.n	8004326 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	2b04      	cmp	r3, #4
 80042ea:	d10e      	bne.n	800430a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f817 	bl	800432e <UART_WaitOnFlagUntilTimeout>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e00d      	b.n	8004326 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2220      	movs	r2, #32
 800430e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2220      	movs	r2, #32
 8004314:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b09c      	sub	sp, #112	; 0x70
 8004332:	af00      	add	r7, sp, #0
 8004334:	60f8      	str	r0, [r7, #12]
 8004336:	60b9      	str	r1, [r7, #8]
 8004338:	603b      	str	r3, [r7, #0]
 800433a:	4613      	mov	r3, r2
 800433c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800433e:	e0a5      	b.n	800448c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004340:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004346:	f000 80a1 	beq.w	800448c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800434a:	f7fc fcb5 	bl	8000cb8 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004356:	429a      	cmp	r2, r3
 8004358:	d302      	bcc.n	8004360 <UART_WaitOnFlagUntilTimeout+0x32>
 800435a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800435c:	2b00      	cmp	r3, #0
 800435e:	d13e      	bne.n	80043de <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004368:	e853 3f00 	ldrex	r3, [r3]
 800436c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800436e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004370:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004374:	667b      	str	r3, [r7, #100]	; 0x64
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	461a      	mov	r2, r3
 800437c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800437e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004380:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004382:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004384:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004386:	e841 2300 	strex	r3, r2, [r1]
 800438a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800438c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1e6      	bne.n	8004360 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	3308      	adds	r3, #8
 8004398:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800439c:	e853 3f00 	ldrex	r3, [r3]
 80043a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a4:	f023 0301 	bic.w	r3, r3, #1
 80043a8:	663b      	str	r3, [r7, #96]	; 0x60
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	3308      	adds	r3, #8
 80043b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80043b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80043b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80043b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043ba:	e841 2300 	strex	r3, r2, [r1]
 80043be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80043c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1e5      	bne.n	8004392 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2220      	movs	r2, #32
 80043ca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2220      	movs	r2, #32
 80043d0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e067      	b.n	80044ae <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0304 	and.w	r3, r3, #4
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d04f      	beq.n	800448c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043fa:	d147      	bne.n	800448c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004404:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440e:	e853 3f00 	ldrex	r3, [r3]
 8004412:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004416:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800441a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	461a      	mov	r2, r3
 8004422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004424:	637b      	str	r3, [r7, #52]	; 0x34
 8004426:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004428:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800442a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800442c:	e841 2300 	strex	r3, r2, [r1]
 8004430:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1e6      	bne.n	8004406 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	3308      	adds	r3, #8
 800443e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	e853 3f00 	ldrex	r3, [r3]
 8004446:	613b      	str	r3, [r7, #16]
   return(result);
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	f023 0301 	bic.w	r3, r3, #1
 800444e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	3308      	adds	r3, #8
 8004456:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004458:	623a      	str	r2, [r7, #32]
 800445a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445c:	69f9      	ldr	r1, [r7, #28]
 800445e:	6a3a      	ldr	r2, [r7, #32]
 8004460:	e841 2300 	strex	r3, r2, [r1]
 8004464:	61bb      	str	r3, [r7, #24]
   return(result);
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1e5      	bne.n	8004438 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2220      	movs	r2, #32
 8004470:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2220      	movs	r2, #32
 8004476:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2220      	movs	r2, #32
 800447c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e010      	b.n	80044ae <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	69da      	ldr	r2, [r3, #28]
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	4013      	ands	r3, r2
 8004496:	68ba      	ldr	r2, [r7, #8]
 8004498:	429a      	cmp	r2, r3
 800449a:	bf0c      	ite	eq
 800449c:	2301      	moveq	r3, #1
 800449e:	2300      	movne	r3, #0
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	461a      	mov	r2, r3
 80044a4:	79fb      	ldrb	r3, [r7, #7]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	f43f af4a 	beq.w	8004340 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3770      	adds	r7, #112	; 0x70
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
	...

080044b8 <__errno>:
 80044b8:	4b01      	ldr	r3, [pc, #4]	; (80044c0 <__errno+0x8>)
 80044ba:	6818      	ldr	r0, [r3, #0]
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	2000000c 	.word	0x2000000c

080044c4 <__libc_init_array>:
 80044c4:	b570      	push	{r4, r5, r6, lr}
 80044c6:	4d0d      	ldr	r5, [pc, #52]	; (80044fc <__libc_init_array+0x38>)
 80044c8:	4c0d      	ldr	r4, [pc, #52]	; (8004500 <__libc_init_array+0x3c>)
 80044ca:	1b64      	subs	r4, r4, r5
 80044cc:	10a4      	asrs	r4, r4, #2
 80044ce:	2600      	movs	r6, #0
 80044d0:	42a6      	cmp	r6, r4
 80044d2:	d109      	bne.n	80044e8 <__libc_init_array+0x24>
 80044d4:	4d0b      	ldr	r5, [pc, #44]	; (8004504 <__libc_init_array+0x40>)
 80044d6:	4c0c      	ldr	r4, [pc, #48]	; (8004508 <__libc_init_array+0x44>)
 80044d8:	f000 fc8e 	bl	8004df8 <_init>
 80044dc:	1b64      	subs	r4, r4, r5
 80044de:	10a4      	asrs	r4, r4, #2
 80044e0:	2600      	movs	r6, #0
 80044e2:	42a6      	cmp	r6, r4
 80044e4:	d105      	bne.n	80044f2 <__libc_init_array+0x2e>
 80044e6:	bd70      	pop	{r4, r5, r6, pc}
 80044e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ec:	4798      	blx	r3
 80044ee:	3601      	adds	r6, #1
 80044f0:	e7ee      	b.n	80044d0 <__libc_init_array+0xc>
 80044f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80044f6:	4798      	blx	r3
 80044f8:	3601      	adds	r6, #1
 80044fa:	e7f2      	b.n	80044e2 <__libc_init_array+0x1e>
 80044fc:	08004e9c 	.word	0x08004e9c
 8004500:	08004e9c 	.word	0x08004e9c
 8004504:	08004e9c 	.word	0x08004e9c
 8004508:	08004ea0 	.word	0x08004ea0

0800450c <memset>:
 800450c:	4402      	add	r2, r0
 800450e:	4603      	mov	r3, r0
 8004510:	4293      	cmp	r3, r2
 8004512:	d100      	bne.n	8004516 <memset+0xa>
 8004514:	4770      	bx	lr
 8004516:	f803 1b01 	strb.w	r1, [r3], #1
 800451a:	e7f9      	b.n	8004510 <memset+0x4>

0800451c <siprintf>:
 800451c:	b40e      	push	{r1, r2, r3}
 800451e:	b500      	push	{lr}
 8004520:	b09c      	sub	sp, #112	; 0x70
 8004522:	ab1d      	add	r3, sp, #116	; 0x74
 8004524:	9002      	str	r0, [sp, #8]
 8004526:	9006      	str	r0, [sp, #24]
 8004528:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800452c:	4809      	ldr	r0, [pc, #36]	; (8004554 <siprintf+0x38>)
 800452e:	9107      	str	r1, [sp, #28]
 8004530:	9104      	str	r1, [sp, #16]
 8004532:	4909      	ldr	r1, [pc, #36]	; (8004558 <siprintf+0x3c>)
 8004534:	f853 2b04 	ldr.w	r2, [r3], #4
 8004538:	9105      	str	r1, [sp, #20]
 800453a:	6800      	ldr	r0, [r0, #0]
 800453c:	9301      	str	r3, [sp, #4]
 800453e:	a902      	add	r1, sp, #8
 8004540:	f000 f868 	bl	8004614 <_svfiprintf_r>
 8004544:	9b02      	ldr	r3, [sp, #8]
 8004546:	2200      	movs	r2, #0
 8004548:	701a      	strb	r2, [r3, #0]
 800454a:	b01c      	add	sp, #112	; 0x70
 800454c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004550:	b003      	add	sp, #12
 8004552:	4770      	bx	lr
 8004554:	2000000c 	.word	0x2000000c
 8004558:	ffff0208 	.word	0xffff0208

0800455c <__ssputs_r>:
 800455c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004560:	688e      	ldr	r6, [r1, #8]
 8004562:	429e      	cmp	r6, r3
 8004564:	4682      	mov	sl, r0
 8004566:	460c      	mov	r4, r1
 8004568:	4690      	mov	r8, r2
 800456a:	461f      	mov	r7, r3
 800456c:	d838      	bhi.n	80045e0 <__ssputs_r+0x84>
 800456e:	898a      	ldrh	r2, [r1, #12]
 8004570:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004574:	d032      	beq.n	80045dc <__ssputs_r+0x80>
 8004576:	6825      	ldr	r5, [r4, #0]
 8004578:	6909      	ldr	r1, [r1, #16]
 800457a:	eba5 0901 	sub.w	r9, r5, r1
 800457e:	6965      	ldr	r5, [r4, #20]
 8004580:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004584:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004588:	3301      	adds	r3, #1
 800458a:	444b      	add	r3, r9
 800458c:	106d      	asrs	r5, r5, #1
 800458e:	429d      	cmp	r5, r3
 8004590:	bf38      	it	cc
 8004592:	461d      	movcc	r5, r3
 8004594:	0553      	lsls	r3, r2, #21
 8004596:	d531      	bpl.n	80045fc <__ssputs_r+0xa0>
 8004598:	4629      	mov	r1, r5
 800459a:	f000 fb63 	bl	8004c64 <_malloc_r>
 800459e:	4606      	mov	r6, r0
 80045a0:	b950      	cbnz	r0, 80045b8 <__ssputs_r+0x5c>
 80045a2:	230c      	movs	r3, #12
 80045a4:	f8ca 3000 	str.w	r3, [sl]
 80045a8:	89a3      	ldrh	r3, [r4, #12]
 80045aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045ae:	81a3      	strh	r3, [r4, #12]
 80045b0:	f04f 30ff 	mov.w	r0, #4294967295
 80045b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045b8:	6921      	ldr	r1, [r4, #16]
 80045ba:	464a      	mov	r2, r9
 80045bc:	f000 fabe 	bl	8004b3c <memcpy>
 80045c0:	89a3      	ldrh	r3, [r4, #12]
 80045c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80045c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ca:	81a3      	strh	r3, [r4, #12]
 80045cc:	6126      	str	r6, [r4, #16]
 80045ce:	6165      	str	r5, [r4, #20]
 80045d0:	444e      	add	r6, r9
 80045d2:	eba5 0509 	sub.w	r5, r5, r9
 80045d6:	6026      	str	r6, [r4, #0]
 80045d8:	60a5      	str	r5, [r4, #8]
 80045da:	463e      	mov	r6, r7
 80045dc:	42be      	cmp	r6, r7
 80045de:	d900      	bls.n	80045e2 <__ssputs_r+0x86>
 80045e0:	463e      	mov	r6, r7
 80045e2:	6820      	ldr	r0, [r4, #0]
 80045e4:	4632      	mov	r2, r6
 80045e6:	4641      	mov	r1, r8
 80045e8:	f000 fab6 	bl	8004b58 <memmove>
 80045ec:	68a3      	ldr	r3, [r4, #8]
 80045ee:	1b9b      	subs	r3, r3, r6
 80045f0:	60a3      	str	r3, [r4, #8]
 80045f2:	6823      	ldr	r3, [r4, #0]
 80045f4:	4433      	add	r3, r6
 80045f6:	6023      	str	r3, [r4, #0]
 80045f8:	2000      	movs	r0, #0
 80045fa:	e7db      	b.n	80045b4 <__ssputs_r+0x58>
 80045fc:	462a      	mov	r2, r5
 80045fe:	f000 fba5 	bl	8004d4c <_realloc_r>
 8004602:	4606      	mov	r6, r0
 8004604:	2800      	cmp	r0, #0
 8004606:	d1e1      	bne.n	80045cc <__ssputs_r+0x70>
 8004608:	6921      	ldr	r1, [r4, #16]
 800460a:	4650      	mov	r0, sl
 800460c:	f000 fabe 	bl	8004b8c <_free_r>
 8004610:	e7c7      	b.n	80045a2 <__ssputs_r+0x46>
	...

08004614 <_svfiprintf_r>:
 8004614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004618:	4698      	mov	r8, r3
 800461a:	898b      	ldrh	r3, [r1, #12]
 800461c:	061b      	lsls	r3, r3, #24
 800461e:	b09d      	sub	sp, #116	; 0x74
 8004620:	4607      	mov	r7, r0
 8004622:	460d      	mov	r5, r1
 8004624:	4614      	mov	r4, r2
 8004626:	d50e      	bpl.n	8004646 <_svfiprintf_r+0x32>
 8004628:	690b      	ldr	r3, [r1, #16]
 800462a:	b963      	cbnz	r3, 8004646 <_svfiprintf_r+0x32>
 800462c:	2140      	movs	r1, #64	; 0x40
 800462e:	f000 fb19 	bl	8004c64 <_malloc_r>
 8004632:	6028      	str	r0, [r5, #0]
 8004634:	6128      	str	r0, [r5, #16]
 8004636:	b920      	cbnz	r0, 8004642 <_svfiprintf_r+0x2e>
 8004638:	230c      	movs	r3, #12
 800463a:	603b      	str	r3, [r7, #0]
 800463c:	f04f 30ff 	mov.w	r0, #4294967295
 8004640:	e0d1      	b.n	80047e6 <_svfiprintf_r+0x1d2>
 8004642:	2340      	movs	r3, #64	; 0x40
 8004644:	616b      	str	r3, [r5, #20]
 8004646:	2300      	movs	r3, #0
 8004648:	9309      	str	r3, [sp, #36]	; 0x24
 800464a:	2320      	movs	r3, #32
 800464c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004650:	f8cd 800c 	str.w	r8, [sp, #12]
 8004654:	2330      	movs	r3, #48	; 0x30
 8004656:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004800 <_svfiprintf_r+0x1ec>
 800465a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800465e:	f04f 0901 	mov.w	r9, #1
 8004662:	4623      	mov	r3, r4
 8004664:	469a      	mov	sl, r3
 8004666:	f813 2b01 	ldrb.w	r2, [r3], #1
 800466a:	b10a      	cbz	r2, 8004670 <_svfiprintf_r+0x5c>
 800466c:	2a25      	cmp	r2, #37	; 0x25
 800466e:	d1f9      	bne.n	8004664 <_svfiprintf_r+0x50>
 8004670:	ebba 0b04 	subs.w	fp, sl, r4
 8004674:	d00b      	beq.n	800468e <_svfiprintf_r+0x7a>
 8004676:	465b      	mov	r3, fp
 8004678:	4622      	mov	r2, r4
 800467a:	4629      	mov	r1, r5
 800467c:	4638      	mov	r0, r7
 800467e:	f7ff ff6d 	bl	800455c <__ssputs_r>
 8004682:	3001      	adds	r0, #1
 8004684:	f000 80aa 	beq.w	80047dc <_svfiprintf_r+0x1c8>
 8004688:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800468a:	445a      	add	r2, fp
 800468c:	9209      	str	r2, [sp, #36]	; 0x24
 800468e:	f89a 3000 	ldrb.w	r3, [sl]
 8004692:	2b00      	cmp	r3, #0
 8004694:	f000 80a2 	beq.w	80047dc <_svfiprintf_r+0x1c8>
 8004698:	2300      	movs	r3, #0
 800469a:	f04f 32ff 	mov.w	r2, #4294967295
 800469e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046a2:	f10a 0a01 	add.w	sl, sl, #1
 80046a6:	9304      	str	r3, [sp, #16]
 80046a8:	9307      	str	r3, [sp, #28]
 80046aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046ae:	931a      	str	r3, [sp, #104]	; 0x68
 80046b0:	4654      	mov	r4, sl
 80046b2:	2205      	movs	r2, #5
 80046b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046b8:	4851      	ldr	r0, [pc, #324]	; (8004800 <_svfiprintf_r+0x1ec>)
 80046ba:	f7fb fd91 	bl	80001e0 <memchr>
 80046be:	9a04      	ldr	r2, [sp, #16]
 80046c0:	b9d8      	cbnz	r0, 80046fa <_svfiprintf_r+0xe6>
 80046c2:	06d0      	lsls	r0, r2, #27
 80046c4:	bf44      	itt	mi
 80046c6:	2320      	movmi	r3, #32
 80046c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046cc:	0711      	lsls	r1, r2, #28
 80046ce:	bf44      	itt	mi
 80046d0:	232b      	movmi	r3, #43	; 0x2b
 80046d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046d6:	f89a 3000 	ldrb.w	r3, [sl]
 80046da:	2b2a      	cmp	r3, #42	; 0x2a
 80046dc:	d015      	beq.n	800470a <_svfiprintf_r+0xf6>
 80046de:	9a07      	ldr	r2, [sp, #28]
 80046e0:	4654      	mov	r4, sl
 80046e2:	2000      	movs	r0, #0
 80046e4:	f04f 0c0a 	mov.w	ip, #10
 80046e8:	4621      	mov	r1, r4
 80046ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046ee:	3b30      	subs	r3, #48	; 0x30
 80046f0:	2b09      	cmp	r3, #9
 80046f2:	d94e      	bls.n	8004792 <_svfiprintf_r+0x17e>
 80046f4:	b1b0      	cbz	r0, 8004724 <_svfiprintf_r+0x110>
 80046f6:	9207      	str	r2, [sp, #28]
 80046f8:	e014      	b.n	8004724 <_svfiprintf_r+0x110>
 80046fa:	eba0 0308 	sub.w	r3, r0, r8
 80046fe:	fa09 f303 	lsl.w	r3, r9, r3
 8004702:	4313      	orrs	r3, r2
 8004704:	9304      	str	r3, [sp, #16]
 8004706:	46a2      	mov	sl, r4
 8004708:	e7d2      	b.n	80046b0 <_svfiprintf_r+0x9c>
 800470a:	9b03      	ldr	r3, [sp, #12]
 800470c:	1d19      	adds	r1, r3, #4
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	9103      	str	r1, [sp, #12]
 8004712:	2b00      	cmp	r3, #0
 8004714:	bfbb      	ittet	lt
 8004716:	425b      	neglt	r3, r3
 8004718:	f042 0202 	orrlt.w	r2, r2, #2
 800471c:	9307      	strge	r3, [sp, #28]
 800471e:	9307      	strlt	r3, [sp, #28]
 8004720:	bfb8      	it	lt
 8004722:	9204      	strlt	r2, [sp, #16]
 8004724:	7823      	ldrb	r3, [r4, #0]
 8004726:	2b2e      	cmp	r3, #46	; 0x2e
 8004728:	d10c      	bne.n	8004744 <_svfiprintf_r+0x130>
 800472a:	7863      	ldrb	r3, [r4, #1]
 800472c:	2b2a      	cmp	r3, #42	; 0x2a
 800472e:	d135      	bne.n	800479c <_svfiprintf_r+0x188>
 8004730:	9b03      	ldr	r3, [sp, #12]
 8004732:	1d1a      	adds	r2, r3, #4
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	9203      	str	r2, [sp, #12]
 8004738:	2b00      	cmp	r3, #0
 800473a:	bfb8      	it	lt
 800473c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004740:	3402      	adds	r4, #2
 8004742:	9305      	str	r3, [sp, #20]
 8004744:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004810 <_svfiprintf_r+0x1fc>
 8004748:	7821      	ldrb	r1, [r4, #0]
 800474a:	2203      	movs	r2, #3
 800474c:	4650      	mov	r0, sl
 800474e:	f7fb fd47 	bl	80001e0 <memchr>
 8004752:	b140      	cbz	r0, 8004766 <_svfiprintf_r+0x152>
 8004754:	2340      	movs	r3, #64	; 0x40
 8004756:	eba0 000a 	sub.w	r0, r0, sl
 800475a:	fa03 f000 	lsl.w	r0, r3, r0
 800475e:	9b04      	ldr	r3, [sp, #16]
 8004760:	4303      	orrs	r3, r0
 8004762:	3401      	adds	r4, #1
 8004764:	9304      	str	r3, [sp, #16]
 8004766:	f814 1b01 	ldrb.w	r1, [r4], #1
 800476a:	4826      	ldr	r0, [pc, #152]	; (8004804 <_svfiprintf_r+0x1f0>)
 800476c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004770:	2206      	movs	r2, #6
 8004772:	f7fb fd35 	bl	80001e0 <memchr>
 8004776:	2800      	cmp	r0, #0
 8004778:	d038      	beq.n	80047ec <_svfiprintf_r+0x1d8>
 800477a:	4b23      	ldr	r3, [pc, #140]	; (8004808 <_svfiprintf_r+0x1f4>)
 800477c:	bb1b      	cbnz	r3, 80047c6 <_svfiprintf_r+0x1b2>
 800477e:	9b03      	ldr	r3, [sp, #12]
 8004780:	3307      	adds	r3, #7
 8004782:	f023 0307 	bic.w	r3, r3, #7
 8004786:	3308      	adds	r3, #8
 8004788:	9303      	str	r3, [sp, #12]
 800478a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800478c:	4433      	add	r3, r6
 800478e:	9309      	str	r3, [sp, #36]	; 0x24
 8004790:	e767      	b.n	8004662 <_svfiprintf_r+0x4e>
 8004792:	fb0c 3202 	mla	r2, ip, r2, r3
 8004796:	460c      	mov	r4, r1
 8004798:	2001      	movs	r0, #1
 800479a:	e7a5      	b.n	80046e8 <_svfiprintf_r+0xd4>
 800479c:	2300      	movs	r3, #0
 800479e:	3401      	adds	r4, #1
 80047a0:	9305      	str	r3, [sp, #20]
 80047a2:	4619      	mov	r1, r3
 80047a4:	f04f 0c0a 	mov.w	ip, #10
 80047a8:	4620      	mov	r0, r4
 80047aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047ae:	3a30      	subs	r2, #48	; 0x30
 80047b0:	2a09      	cmp	r2, #9
 80047b2:	d903      	bls.n	80047bc <_svfiprintf_r+0x1a8>
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d0c5      	beq.n	8004744 <_svfiprintf_r+0x130>
 80047b8:	9105      	str	r1, [sp, #20]
 80047ba:	e7c3      	b.n	8004744 <_svfiprintf_r+0x130>
 80047bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80047c0:	4604      	mov	r4, r0
 80047c2:	2301      	movs	r3, #1
 80047c4:	e7f0      	b.n	80047a8 <_svfiprintf_r+0x194>
 80047c6:	ab03      	add	r3, sp, #12
 80047c8:	9300      	str	r3, [sp, #0]
 80047ca:	462a      	mov	r2, r5
 80047cc:	4b0f      	ldr	r3, [pc, #60]	; (800480c <_svfiprintf_r+0x1f8>)
 80047ce:	a904      	add	r1, sp, #16
 80047d0:	4638      	mov	r0, r7
 80047d2:	f3af 8000 	nop.w
 80047d6:	1c42      	adds	r2, r0, #1
 80047d8:	4606      	mov	r6, r0
 80047da:	d1d6      	bne.n	800478a <_svfiprintf_r+0x176>
 80047dc:	89ab      	ldrh	r3, [r5, #12]
 80047de:	065b      	lsls	r3, r3, #25
 80047e0:	f53f af2c 	bmi.w	800463c <_svfiprintf_r+0x28>
 80047e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80047e6:	b01d      	add	sp, #116	; 0x74
 80047e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047ec:	ab03      	add	r3, sp, #12
 80047ee:	9300      	str	r3, [sp, #0]
 80047f0:	462a      	mov	r2, r5
 80047f2:	4b06      	ldr	r3, [pc, #24]	; (800480c <_svfiprintf_r+0x1f8>)
 80047f4:	a904      	add	r1, sp, #16
 80047f6:	4638      	mov	r0, r7
 80047f8:	f000 f87a 	bl	80048f0 <_printf_i>
 80047fc:	e7eb      	b.n	80047d6 <_svfiprintf_r+0x1c2>
 80047fe:	bf00      	nop
 8004800:	08004e60 	.word	0x08004e60
 8004804:	08004e6a 	.word	0x08004e6a
 8004808:	00000000 	.word	0x00000000
 800480c:	0800455d 	.word	0x0800455d
 8004810:	08004e66 	.word	0x08004e66

08004814 <_printf_common>:
 8004814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004818:	4616      	mov	r6, r2
 800481a:	4699      	mov	r9, r3
 800481c:	688a      	ldr	r2, [r1, #8]
 800481e:	690b      	ldr	r3, [r1, #16]
 8004820:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004824:	4293      	cmp	r3, r2
 8004826:	bfb8      	it	lt
 8004828:	4613      	movlt	r3, r2
 800482a:	6033      	str	r3, [r6, #0]
 800482c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004830:	4607      	mov	r7, r0
 8004832:	460c      	mov	r4, r1
 8004834:	b10a      	cbz	r2, 800483a <_printf_common+0x26>
 8004836:	3301      	adds	r3, #1
 8004838:	6033      	str	r3, [r6, #0]
 800483a:	6823      	ldr	r3, [r4, #0]
 800483c:	0699      	lsls	r1, r3, #26
 800483e:	bf42      	ittt	mi
 8004840:	6833      	ldrmi	r3, [r6, #0]
 8004842:	3302      	addmi	r3, #2
 8004844:	6033      	strmi	r3, [r6, #0]
 8004846:	6825      	ldr	r5, [r4, #0]
 8004848:	f015 0506 	ands.w	r5, r5, #6
 800484c:	d106      	bne.n	800485c <_printf_common+0x48>
 800484e:	f104 0a19 	add.w	sl, r4, #25
 8004852:	68e3      	ldr	r3, [r4, #12]
 8004854:	6832      	ldr	r2, [r6, #0]
 8004856:	1a9b      	subs	r3, r3, r2
 8004858:	42ab      	cmp	r3, r5
 800485a:	dc26      	bgt.n	80048aa <_printf_common+0x96>
 800485c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004860:	1e13      	subs	r3, r2, #0
 8004862:	6822      	ldr	r2, [r4, #0]
 8004864:	bf18      	it	ne
 8004866:	2301      	movne	r3, #1
 8004868:	0692      	lsls	r2, r2, #26
 800486a:	d42b      	bmi.n	80048c4 <_printf_common+0xb0>
 800486c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004870:	4649      	mov	r1, r9
 8004872:	4638      	mov	r0, r7
 8004874:	47c0      	blx	r8
 8004876:	3001      	adds	r0, #1
 8004878:	d01e      	beq.n	80048b8 <_printf_common+0xa4>
 800487a:	6823      	ldr	r3, [r4, #0]
 800487c:	68e5      	ldr	r5, [r4, #12]
 800487e:	6832      	ldr	r2, [r6, #0]
 8004880:	f003 0306 	and.w	r3, r3, #6
 8004884:	2b04      	cmp	r3, #4
 8004886:	bf08      	it	eq
 8004888:	1aad      	subeq	r5, r5, r2
 800488a:	68a3      	ldr	r3, [r4, #8]
 800488c:	6922      	ldr	r2, [r4, #16]
 800488e:	bf0c      	ite	eq
 8004890:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004894:	2500      	movne	r5, #0
 8004896:	4293      	cmp	r3, r2
 8004898:	bfc4      	itt	gt
 800489a:	1a9b      	subgt	r3, r3, r2
 800489c:	18ed      	addgt	r5, r5, r3
 800489e:	2600      	movs	r6, #0
 80048a0:	341a      	adds	r4, #26
 80048a2:	42b5      	cmp	r5, r6
 80048a4:	d11a      	bne.n	80048dc <_printf_common+0xc8>
 80048a6:	2000      	movs	r0, #0
 80048a8:	e008      	b.n	80048bc <_printf_common+0xa8>
 80048aa:	2301      	movs	r3, #1
 80048ac:	4652      	mov	r2, sl
 80048ae:	4649      	mov	r1, r9
 80048b0:	4638      	mov	r0, r7
 80048b2:	47c0      	blx	r8
 80048b4:	3001      	adds	r0, #1
 80048b6:	d103      	bne.n	80048c0 <_printf_common+0xac>
 80048b8:	f04f 30ff 	mov.w	r0, #4294967295
 80048bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048c0:	3501      	adds	r5, #1
 80048c2:	e7c6      	b.n	8004852 <_printf_common+0x3e>
 80048c4:	18e1      	adds	r1, r4, r3
 80048c6:	1c5a      	adds	r2, r3, #1
 80048c8:	2030      	movs	r0, #48	; 0x30
 80048ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048ce:	4422      	add	r2, r4
 80048d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048d8:	3302      	adds	r3, #2
 80048da:	e7c7      	b.n	800486c <_printf_common+0x58>
 80048dc:	2301      	movs	r3, #1
 80048de:	4622      	mov	r2, r4
 80048e0:	4649      	mov	r1, r9
 80048e2:	4638      	mov	r0, r7
 80048e4:	47c0      	blx	r8
 80048e6:	3001      	adds	r0, #1
 80048e8:	d0e6      	beq.n	80048b8 <_printf_common+0xa4>
 80048ea:	3601      	adds	r6, #1
 80048ec:	e7d9      	b.n	80048a2 <_printf_common+0x8e>
	...

080048f0 <_printf_i>:
 80048f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048f4:	7e0f      	ldrb	r7, [r1, #24]
 80048f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80048f8:	2f78      	cmp	r7, #120	; 0x78
 80048fa:	4691      	mov	r9, r2
 80048fc:	4680      	mov	r8, r0
 80048fe:	460c      	mov	r4, r1
 8004900:	469a      	mov	sl, r3
 8004902:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004906:	d807      	bhi.n	8004918 <_printf_i+0x28>
 8004908:	2f62      	cmp	r7, #98	; 0x62
 800490a:	d80a      	bhi.n	8004922 <_printf_i+0x32>
 800490c:	2f00      	cmp	r7, #0
 800490e:	f000 80d8 	beq.w	8004ac2 <_printf_i+0x1d2>
 8004912:	2f58      	cmp	r7, #88	; 0x58
 8004914:	f000 80a3 	beq.w	8004a5e <_printf_i+0x16e>
 8004918:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800491c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004920:	e03a      	b.n	8004998 <_printf_i+0xa8>
 8004922:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004926:	2b15      	cmp	r3, #21
 8004928:	d8f6      	bhi.n	8004918 <_printf_i+0x28>
 800492a:	a101      	add	r1, pc, #4	; (adr r1, 8004930 <_printf_i+0x40>)
 800492c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004930:	08004989 	.word	0x08004989
 8004934:	0800499d 	.word	0x0800499d
 8004938:	08004919 	.word	0x08004919
 800493c:	08004919 	.word	0x08004919
 8004940:	08004919 	.word	0x08004919
 8004944:	08004919 	.word	0x08004919
 8004948:	0800499d 	.word	0x0800499d
 800494c:	08004919 	.word	0x08004919
 8004950:	08004919 	.word	0x08004919
 8004954:	08004919 	.word	0x08004919
 8004958:	08004919 	.word	0x08004919
 800495c:	08004aa9 	.word	0x08004aa9
 8004960:	080049cd 	.word	0x080049cd
 8004964:	08004a8b 	.word	0x08004a8b
 8004968:	08004919 	.word	0x08004919
 800496c:	08004919 	.word	0x08004919
 8004970:	08004acb 	.word	0x08004acb
 8004974:	08004919 	.word	0x08004919
 8004978:	080049cd 	.word	0x080049cd
 800497c:	08004919 	.word	0x08004919
 8004980:	08004919 	.word	0x08004919
 8004984:	08004a93 	.word	0x08004a93
 8004988:	682b      	ldr	r3, [r5, #0]
 800498a:	1d1a      	adds	r2, r3, #4
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	602a      	str	r2, [r5, #0]
 8004990:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004994:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004998:	2301      	movs	r3, #1
 800499a:	e0a3      	b.n	8004ae4 <_printf_i+0x1f4>
 800499c:	6820      	ldr	r0, [r4, #0]
 800499e:	6829      	ldr	r1, [r5, #0]
 80049a0:	0606      	lsls	r6, r0, #24
 80049a2:	f101 0304 	add.w	r3, r1, #4
 80049a6:	d50a      	bpl.n	80049be <_printf_i+0xce>
 80049a8:	680e      	ldr	r6, [r1, #0]
 80049aa:	602b      	str	r3, [r5, #0]
 80049ac:	2e00      	cmp	r6, #0
 80049ae:	da03      	bge.n	80049b8 <_printf_i+0xc8>
 80049b0:	232d      	movs	r3, #45	; 0x2d
 80049b2:	4276      	negs	r6, r6
 80049b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049b8:	485e      	ldr	r0, [pc, #376]	; (8004b34 <_printf_i+0x244>)
 80049ba:	230a      	movs	r3, #10
 80049bc:	e019      	b.n	80049f2 <_printf_i+0x102>
 80049be:	680e      	ldr	r6, [r1, #0]
 80049c0:	602b      	str	r3, [r5, #0]
 80049c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80049c6:	bf18      	it	ne
 80049c8:	b236      	sxthne	r6, r6
 80049ca:	e7ef      	b.n	80049ac <_printf_i+0xbc>
 80049cc:	682b      	ldr	r3, [r5, #0]
 80049ce:	6820      	ldr	r0, [r4, #0]
 80049d0:	1d19      	adds	r1, r3, #4
 80049d2:	6029      	str	r1, [r5, #0]
 80049d4:	0601      	lsls	r1, r0, #24
 80049d6:	d501      	bpl.n	80049dc <_printf_i+0xec>
 80049d8:	681e      	ldr	r6, [r3, #0]
 80049da:	e002      	b.n	80049e2 <_printf_i+0xf2>
 80049dc:	0646      	lsls	r6, r0, #25
 80049de:	d5fb      	bpl.n	80049d8 <_printf_i+0xe8>
 80049e0:	881e      	ldrh	r6, [r3, #0]
 80049e2:	4854      	ldr	r0, [pc, #336]	; (8004b34 <_printf_i+0x244>)
 80049e4:	2f6f      	cmp	r7, #111	; 0x6f
 80049e6:	bf0c      	ite	eq
 80049e8:	2308      	moveq	r3, #8
 80049ea:	230a      	movne	r3, #10
 80049ec:	2100      	movs	r1, #0
 80049ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049f2:	6865      	ldr	r5, [r4, #4]
 80049f4:	60a5      	str	r5, [r4, #8]
 80049f6:	2d00      	cmp	r5, #0
 80049f8:	bfa2      	ittt	ge
 80049fa:	6821      	ldrge	r1, [r4, #0]
 80049fc:	f021 0104 	bicge.w	r1, r1, #4
 8004a00:	6021      	strge	r1, [r4, #0]
 8004a02:	b90e      	cbnz	r6, 8004a08 <_printf_i+0x118>
 8004a04:	2d00      	cmp	r5, #0
 8004a06:	d04d      	beq.n	8004aa4 <_printf_i+0x1b4>
 8004a08:	4615      	mov	r5, r2
 8004a0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a0e:	fb03 6711 	mls	r7, r3, r1, r6
 8004a12:	5dc7      	ldrb	r7, [r0, r7]
 8004a14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a18:	4637      	mov	r7, r6
 8004a1a:	42bb      	cmp	r3, r7
 8004a1c:	460e      	mov	r6, r1
 8004a1e:	d9f4      	bls.n	8004a0a <_printf_i+0x11a>
 8004a20:	2b08      	cmp	r3, #8
 8004a22:	d10b      	bne.n	8004a3c <_printf_i+0x14c>
 8004a24:	6823      	ldr	r3, [r4, #0]
 8004a26:	07de      	lsls	r6, r3, #31
 8004a28:	d508      	bpl.n	8004a3c <_printf_i+0x14c>
 8004a2a:	6923      	ldr	r3, [r4, #16]
 8004a2c:	6861      	ldr	r1, [r4, #4]
 8004a2e:	4299      	cmp	r1, r3
 8004a30:	bfde      	ittt	le
 8004a32:	2330      	movle	r3, #48	; 0x30
 8004a34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a3c:	1b52      	subs	r2, r2, r5
 8004a3e:	6122      	str	r2, [r4, #16]
 8004a40:	f8cd a000 	str.w	sl, [sp]
 8004a44:	464b      	mov	r3, r9
 8004a46:	aa03      	add	r2, sp, #12
 8004a48:	4621      	mov	r1, r4
 8004a4a:	4640      	mov	r0, r8
 8004a4c:	f7ff fee2 	bl	8004814 <_printf_common>
 8004a50:	3001      	adds	r0, #1
 8004a52:	d14c      	bne.n	8004aee <_printf_i+0x1fe>
 8004a54:	f04f 30ff 	mov.w	r0, #4294967295
 8004a58:	b004      	add	sp, #16
 8004a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a5e:	4835      	ldr	r0, [pc, #212]	; (8004b34 <_printf_i+0x244>)
 8004a60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004a64:	6829      	ldr	r1, [r5, #0]
 8004a66:	6823      	ldr	r3, [r4, #0]
 8004a68:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a6c:	6029      	str	r1, [r5, #0]
 8004a6e:	061d      	lsls	r5, r3, #24
 8004a70:	d514      	bpl.n	8004a9c <_printf_i+0x1ac>
 8004a72:	07df      	lsls	r7, r3, #31
 8004a74:	bf44      	itt	mi
 8004a76:	f043 0320 	orrmi.w	r3, r3, #32
 8004a7a:	6023      	strmi	r3, [r4, #0]
 8004a7c:	b91e      	cbnz	r6, 8004a86 <_printf_i+0x196>
 8004a7e:	6823      	ldr	r3, [r4, #0]
 8004a80:	f023 0320 	bic.w	r3, r3, #32
 8004a84:	6023      	str	r3, [r4, #0]
 8004a86:	2310      	movs	r3, #16
 8004a88:	e7b0      	b.n	80049ec <_printf_i+0xfc>
 8004a8a:	6823      	ldr	r3, [r4, #0]
 8004a8c:	f043 0320 	orr.w	r3, r3, #32
 8004a90:	6023      	str	r3, [r4, #0]
 8004a92:	2378      	movs	r3, #120	; 0x78
 8004a94:	4828      	ldr	r0, [pc, #160]	; (8004b38 <_printf_i+0x248>)
 8004a96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a9a:	e7e3      	b.n	8004a64 <_printf_i+0x174>
 8004a9c:	0659      	lsls	r1, r3, #25
 8004a9e:	bf48      	it	mi
 8004aa0:	b2b6      	uxthmi	r6, r6
 8004aa2:	e7e6      	b.n	8004a72 <_printf_i+0x182>
 8004aa4:	4615      	mov	r5, r2
 8004aa6:	e7bb      	b.n	8004a20 <_printf_i+0x130>
 8004aa8:	682b      	ldr	r3, [r5, #0]
 8004aaa:	6826      	ldr	r6, [r4, #0]
 8004aac:	6961      	ldr	r1, [r4, #20]
 8004aae:	1d18      	adds	r0, r3, #4
 8004ab0:	6028      	str	r0, [r5, #0]
 8004ab2:	0635      	lsls	r5, r6, #24
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	d501      	bpl.n	8004abc <_printf_i+0x1cc>
 8004ab8:	6019      	str	r1, [r3, #0]
 8004aba:	e002      	b.n	8004ac2 <_printf_i+0x1d2>
 8004abc:	0670      	lsls	r0, r6, #25
 8004abe:	d5fb      	bpl.n	8004ab8 <_printf_i+0x1c8>
 8004ac0:	8019      	strh	r1, [r3, #0]
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	6123      	str	r3, [r4, #16]
 8004ac6:	4615      	mov	r5, r2
 8004ac8:	e7ba      	b.n	8004a40 <_printf_i+0x150>
 8004aca:	682b      	ldr	r3, [r5, #0]
 8004acc:	1d1a      	adds	r2, r3, #4
 8004ace:	602a      	str	r2, [r5, #0]
 8004ad0:	681d      	ldr	r5, [r3, #0]
 8004ad2:	6862      	ldr	r2, [r4, #4]
 8004ad4:	2100      	movs	r1, #0
 8004ad6:	4628      	mov	r0, r5
 8004ad8:	f7fb fb82 	bl	80001e0 <memchr>
 8004adc:	b108      	cbz	r0, 8004ae2 <_printf_i+0x1f2>
 8004ade:	1b40      	subs	r0, r0, r5
 8004ae0:	6060      	str	r0, [r4, #4]
 8004ae2:	6863      	ldr	r3, [r4, #4]
 8004ae4:	6123      	str	r3, [r4, #16]
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aec:	e7a8      	b.n	8004a40 <_printf_i+0x150>
 8004aee:	6923      	ldr	r3, [r4, #16]
 8004af0:	462a      	mov	r2, r5
 8004af2:	4649      	mov	r1, r9
 8004af4:	4640      	mov	r0, r8
 8004af6:	47d0      	blx	sl
 8004af8:	3001      	adds	r0, #1
 8004afa:	d0ab      	beq.n	8004a54 <_printf_i+0x164>
 8004afc:	6823      	ldr	r3, [r4, #0]
 8004afe:	079b      	lsls	r3, r3, #30
 8004b00:	d413      	bmi.n	8004b2a <_printf_i+0x23a>
 8004b02:	68e0      	ldr	r0, [r4, #12]
 8004b04:	9b03      	ldr	r3, [sp, #12]
 8004b06:	4298      	cmp	r0, r3
 8004b08:	bfb8      	it	lt
 8004b0a:	4618      	movlt	r0, r3
 8004b0c:	e7a4      	b.n	8004a58 <_printf_i+0x168>
 8004b0e:	2301      	movs	r3, #1
 8004b10:	4632      	mov	r2, r6
 8004b12:	4649      	mov	r1, r9
 8004b14:	4640      	mov	r0, r8
 8004b16:	47d0      	blx	sl
 8004b18:	3001      	adds	r0, #1
 8004b1a:	d09b      	beq.n	8004a54 <_printf_i+0x164>
 8004b1c:	3501      	adds	r5, #1
 8004b1e:	68e3      	ldr	r3, [r4, #12]
 8004b20:	9903      	ldr	r1, [sp, #12]
 8004b22:	1a5b      	subs	r3, r3, r1
 8004b24:	42ab      	cmp	r3, r5
 8004b26:	dcf2      	bgt.n	8004b0e <_printf_i+0x21e>
 8004b28:	e7eb      	b.n	8004b02 <_printf_i+0x212>
 8004b2a:	2500      	movs	r5, #0
 8004b2c:	f104 0619 	add.w	r6, r4, #25
 8004b30:	e7f5      	b.n	8004b1e <_printf_i+0x22e>
 8004b32:	bf00      	nop
 8004b34:	08004e71 	.word	0x08004e71
 8004b38:	08004e82 	.word	0x08004e82

08004b3c <memcpy>:
 8004b3c:	440a      	add	r2, r1
 8004b3e:	4291      	cmp	r1, r2
 8004b40:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b44:	d100      	bne.n	8004b48 <memcpy+0xc>
 8004b46:	4770      	bx	lr
 8004b48:	b510      	push	{r4, lr}
 8004b4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b52:	4291      	cmp	r1, r2
 8004b54:	d1f9      	bne.n	8004b4a <memcpy+0xe>
 8004b56:	bd10      	pop	{r4, pc}

08004b58 <memmove>:
 8004b58:	4288      	cmp	r0, r1
 8004b5a:	b510      	push	{r4, lr}
 8004b5c:	eb01 0402 	add.w	r4, r1, r2
 8004b60:	d902      	bls.n	8004b68 <memmove+0x10>
 8004b62:	4284      	cmp	r4, r0
 8004b64:	4623      	mov	r3, r4
 8004b66:	d807      	bhi.n	8004b78 <memmove+0x20>
 8004b68:	1e43      	subs	r3, r0, #1
 8004b6a:	42a1      	cmp	r1, r4
 8004b6c:	d008      	beq.n	8004b80 <memmove+0x28>
 8004b6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b76:	e7f8      	b.n	8004b6a <memmove+0x12>
 8004b78:	4402      	add	r2, r0
 8004b7a:	4601      	mov	r1, r0
 8004b7c:	428a      	cmp	r2, r1
 8004b7e:	d100      	bne.n	8004b82 <memmove+0x2a>
 8004b80:	bd10      	pop	{r4, pc}
 8004b82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b8a:	e7f7      	b.n	8004b7c <memmove+0x24>

08004b8c <_free_r>:
 8004b8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b8e:	2900      	cmp	r1, #0
 8004b90:	d044      	beq.n	8004c1c <_free_r+0x90>
 8004b92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b96:	9001      	str	r0, [sp, #4]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f1a1 0404 	sub.w	r4, r1, #4
 8004b9e:	bfb8      	it	lt
 8004ba0:	18e4      	addlt	r4, r4, r3
 8004ba2:	f000 f913 	bl	8004dcc <__malloc_lock>
 8004ba6:	4a1e      	ldr	r2, [pc, #120]	; (8004c20 <_free_r+0x94>)
 8004ba8:	9801      	ldr	r0, [sp, #4]
 8004baa:	6813      	ldr	r3, [r2, #0]
 8004bac:	b933      	cbnz	r3, 8004bbc <_free_r+0x30>
 8004bae:	6063      	str	r3, [r4, #4]
 8004bb0:	6014      	str	r4, [r2, #0]
 8004bb2:	b003      	add	sp, #12
 8004bb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004bb8:	f000 b90e 	b.w	8004dd8 <__malloc_unlock>
 8004bbc:	42a3      	cmp	r3, r4
 8004bbe:	d908      	bls.n	8004bd2 <_free_r+0x46>
 8004bc0:	6825      	ldr	r5, [r4, #0]
 8004bc2:	1961      	adds	r1, r4, r5
 8004bc4:	428b      	cmp	r3, r1
 8004bc6:	bf01      	itttt	eq
 8004bc8:	6819      	ldreq	r1, [r3, #0]
 8004bca:	685b      	ldreq	r3, [r3, #4]
 8004bcc:	1949      	addeq	r1, r1, r5
 8004bce:	6021      	streq	r1, [r4, #0]
 8004bd0:	e7ed      	b.n	8004bae <_free_r+0x22>
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	b10b      	cbz	r3, 8004bdc <_free_r+0x50>
 8004bd8:	42a3      	cmp	r3, r4
 8004bda:	d9fa      	bls.n	8004bd2 <_free_r+0x46>
 8004bdc:	6811      	ldr	r1, [r2, #0]
 8004bde:	1855      	adds	r5, r2, r1
 8004be0:	42a5      	cmp	r5, r4
 8004be2:	d10b      	bne.n	8004bfc <_free_r+0x70>
 8004be4:	6824      	ldr	r4, [r4, #0]
 8004be6:	4421      	add	r1, r4
 8004be8:	1854      	adds	r4, r2, r1
 8004bea:	42a3      	cmp	r3, r4
 8004bec:	6011      	str	r1, [r2, #0]
 8004bee:	d1e0      	bne.n	8004bb2 <_free_r+0x26>
 8004bf0:	681c      	ldr	r4, [r3, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	6053      	str	r3, [r2, #4]
 8004bf6:	4421      	add	r1, r4
 8004bf8:	6011      	str	r1, [r2, #0]
 8004bfa:	e7da      	b.n	8004bb2 <_free_r+0x26>
 8004bfc:	d902      	bls.n	8004c04 <_free_r+0x78>
 8004bfe:	230c      	movs	r3, #12
 8004c00:	6003      	str	r3, [r0, #0]
 8004c02:	e7d6      	b.n	8004bb2 <_free_r+0x26>
 8004c04:	6825      	ldr	r5, [r4, #0]
 8004c06:	1961      	adds	r1, r4, r5
 8004c08:	428b      	cmp	r3, r1
 8004c0a:	bf04      	itt	eq
 8004c0c:	6819      	ldreq	r1, [r3, #0]
 8004c0e:	685b      	ldreq	r3, [r3, #4]
 8004c10:	6063      	str	r3, [r4, #4]
 8004c12:	bf04      	itt	eq
 8004c14:	1949      	addeq	r1, r1, r5
 8004c16:	6021      	streq	r1, [r4, #0]
 8004c18:	6054      	str	r4, [r2, #4]
 8004c1a:	e7ca      	b.n	8004bb2 <_free_r+0x26>
 8004c1c:	b003      	add	sp, #12
 8004c1e:	bd30      	pop	{r4, r5, pc}
 8004c20:	2000017c 	.word	0x2000017c

08004c24 <sbrk_aligned>:
 8004c24:	b570      	push	{r4, r5, r6, lr}
 8004c26:	4e0e      	ldr	r6, [pc, #56]	; (8004c60 <sbrk_aligned+0x3c>)
 8004c28:	460c      	mov	r4, r1
 8004c2a:	6831      	ldr	r1, [r6, #0]
 8004c2c:	4605      	mov	r5, r0
 8004c2e:	b911      	cbnz	r1, 8004c36 <sbrk_aligned+0x12>
 8004c30:	f000 f8bc 	bl	8004dac <_sbrk_r>
 8004c34:	6030      	str	r0, [r6, #0]
 8004c36:	4621      	mov	r1, r4
 8004c38:	4628      	mov	r0, r5
 8004c3a:	f000 f8b7 	bl	8004dac <_sbrk_r>
 8004c3e:	1c43      	adds	r3, r0, #1
 8004c40:	d00a      	beq.n	8004c58 <sbrk_aligned+0x34>
 8004c42:	1cc4      	adds	r4, r0, #3
 8004c44:	f024 0403 	bic.w	r4, r4, #3
 8004c48:	42a0      	cmp	r0, r4
 8004c4a:	d007      	beq.n	8004c5c <sbrk_aligned+0x38>
 8004c4c:	1a21      	subs	r1, r4, r0
 8004c4e:	4628      	mov	r0, r5
 8004c50:	f000 f8ac 	bl	8004dac <_sbrk_r>
 8004c54:	3001      	adds	r0, #1
 8004c56:	d101      	bne.n	8004c5c <sbrk_aligned+0x38>
 8004c58:	f04f 34ff 	mov.w	r4, #4294967295
 8004c5c:	4620      	mov	r0, r4
 8004c5e:	bd70      	pop	{r4, r5, r6, pc}
 8004c60:	20000180 	.word	0x20000180

08004c64 <_malloc_r>:
 8004c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c68:	1ccd      	adds	r5, r1, #3
 8004c6a:	f025 0503 	bic.w	r5, r5, #3
 8004c6e:	3508      	adds	r5, #8
 8004c70:	2d0c      	cmp	r5, #12
 8004c72:	bf38      	it	cc
 8004c74:	250c      	movcc	r5, #12
 8004c76:	2d00      	cmp	r5, #0
 8004c78:	4607      	mov	r7, r0
 8004c7a:	db01      	blt.n	8004c80 <_malloc_r+0x1c>
 8004c7c:	42a9      	cmp	r1, r5
 8004c7e:	d905      	bls.n	8004c8c <_malloc_r+0x28>
 8004c80:	230c      	movs	r3, #12
 8004c82:	603b      	str	r3, [r7, #0]
 8004c84:	2600      	movs	r6, #0
 8004c86:	4630      	mov	r0, r6
 8004c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c8c:	4e2e      	ldr	r6, [pc, #184]	; (8004d48 <_malloc_r+0xe4>)
 8004c8e:	f000 f89d 	bl	8004dcc <__malloc_lock>
 8004c92:	6833      	ldr	r3, [r6, #0]
 8004c94:	461c      	mov	r4, r3
 8004c96:	bb34      	cbnz	r4, 8004ce6 <_malloc_r+0x82>
 8004c98:	4629      	mov	r1, r5
 8004c9a:	4638      	mov	r0, r7
 8004c9c:	f7ff ffc2 	bl	8004c24 <sbrk_aligned>
 8004ca0:	1c43      	adds	r3, r0, #1
 8004ca2:	4604      	mov	r4, r0
 8004ca4:	d14d      	bne.n	8004d42 <_malloc_r+0xde>
 8004ca6:	6834      	ldr	r4, [r6, #0]
 8004ca8:	4626      	mov	r6, r4
 8004caa:	2e00      	cmp	r6, #0
 8004cac:	d140      	bne.n	8004d30 <_malloc_r+0xcc>
 8004cae:	6823      	ldr	r3, [r4, #0]
 8004cb0:	4631      	mov	r1, r6
 8004cb2:	4638      	mov	r0, r7
 8004cb4:	eb04 0803 	add.w	r8, r4, r3
 8004cb8:	f000 f878 	bl	8004dac <_sbrk_r>
 8004cbc:	4580      	cmp	r8, r0
 8004cbe:	d13a      	bne.n	8004d36 <_malloc_r+0xd2>
 8004cc0:	6821      	ldr	r1, [r4, #0]
 8004cc2:	3503      	adds	r5, #3
 8004cc4:	1a6d      	subs	r5, r5, r1
 8004cc6:	f025 0503 	bic.w	r5, r5, #3
 8004cca:	3508      	adds	r5, #8
 8004ccc:	2d0c      	cmp	r5, #12
 8004cce:	bf38      	it	cc
 8004cd0:	250c      	movcc	r5, #12
 8004cd2:	4629      	mov	r1, r5
 8004cd4:	4638      	mov	r0, r7
 8004cd6:	f7ff ffa5 	bl	8004c24 <sbrk_aligned>
 8004cda:	3001      	adds	r0, #1
 8004cdc:	d02b      	beq.n	8004d36 <_malloc_r+0xd2>
 8004cde:	6823      	ldr	r3, [r4, #0]
 8004ce0:	442b      	add	r3, r5
 8004ce2:	6023      	str	r3, [r4, #0]
 8004ce4:	e00e      	b.n	8004d04 <_malloc_r+0xa0>
 8004ce6:	6822      	ldr	r2, [r4, #0]
 8004ce8:	1b52      	subs	r2, r2, r5
 8004cea:	d41e      	bmi.n	8004d2a <_malloc_r+0xc6>
 8004cec:	2a0b      	cmp	r2, #11
 8004cee:	d916      	bls.n	8004d1e <_malloc_r+0xba>
 8004cf0:	1961      	adds	r1, r4, r5
 8004cf2:	42a3      	cmp	r3, r4
 8004cf4:	6025      	str	r5, [r4, #0]
 8004cf6:	bf18      	it	ne
 8004cf8:	6059      	strne	r1, [r3, #4]
 8004cfa:	6863      	ldr	r3, [r4, #4]
 8004cfc:	bf08      	it	eq
 8004cfe:	6031      	streq	r1, [r6, #0]
 8004d00:	5162      	str	r2, [r4, r5]
 8004d02:	604b      	str	r3, [r1, #4]
 8004d04:	4638      	mov	r0, r7
 8004d06:	f104 060b 	add.w	r6, r4, #11
 8004d0a:	f000 f865 	bl	8004dd8 <__malloc_unlock>
 8004d0e:	f026 0607 	bic.w	r6, r6, #7
 8004d12:	1d23      	adds	r3, r4, #4
 8004d14:	1af2      	subs	r2, r6, r3
 8004d16:	d0b6      	beq.n	8004c86 <_malloc_r+0x22>
 8004d18:	1b9b      	subs	r3, r3, r6
 8004d1a:	50a3      	str	r3, [r4, r2]
 8004d1c:	e7b3      	b.n	8004c86 <_malloc_r+0x22>
 8004d1e:	6862      	ldr	r2, [r4, #4]
 8004d20:	42a3      	cmp	r3, r4
 8004d22:	bf0c      	ite	eq
 8004d24:	6032      	streq	r2, [r6, #0]
 8004d26:	605a      	strne	r2, [r3, #4]
 8004d28:	e7ec      	b.n	8004d04 <_malloc_r+0xa0>
 8004d2a:	4623      	mov	r3, r4
 8004d2c:	6864      	ldr	r4, [r4, #4]
 8004d2e:	e7b2      	b.n	8004c96 <_malloc_r+0x32>
 8004d30:	4634      	mov	r4, r6
 8004d32:	6876      	ldr	r6, [r6, #4]
 8004d34:	e7b9      	b.n	8004caa <_malloc_r+0x46>
 8004d36:	230c      	movs	r3, #12
 8004d38:	603b      	str	r3, [r7, #0]
 8004d3a:	4638      	mov	r0, r7
 8004d3c:	f000 f84c 	bl	8004dd8 <__malloc_unlock>
 8004d40:	e7a1      	b.n	8004c86 <_malloc_r+0x22>
 8004d42:	6025      	str	r5, [r4, #0]
 8004d44:	e7de      	b.n	8004d04 <_malloc_r+0xa0>
 8004d46:	bf00      	nop
 8004d48:	2000017c 	.word	0x2000017c

08004d4c <_realloc_r>:
 8004d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d50:	4680      	mov	r8, r0
 8004d52:	4614      	mov	r4, r2
 8004d54:	460e      	mov	r6, r1
 8004d56:	b921      	cbnz	r1, 8004d62 <_realloc_r+0x16>
 8004d58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d5c:	4611      	mov	r1, r2
 8004d5e:	f7ff bf81 	b.w	8004c64 <_malloc_r>
 8004d62:	b92a      	cbnz	r2, 8004d70 <_realloc_r+0x24>
 8004d64:	f7ff ff12 	bl	8004b8c <_free_r>
 8004d68:	4625      	mov	r5, r4
 8004d6a:	4628      	mov	r0, r5
 8004d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d70:	f000 f838 	bl	8004de4 <_malloc_usable_size_r>
 8004d74:	4284      	cmp	r4, r0
 8004d76:	4607      	mov	r7, r0
 8004d78:	d802      	bhi.n	8004d80 <_realloc_r+0x34>
 8004d7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004d7e:	d812      	bhi.n	8004da6 <_realloc_r+0x5a>
 8004d80:	4621      	mov	r1, r4
 8004d82:	4640      	mov	r0, r8
 8004d84:	f7ff ff6e 	bl	8004c64 <_malloc_r>
 8004d88:	4605      	mov	r5, r0
 8004d8a:	2800      	cmp	r0, #0
 8004d8c:	d0ed      	beq.n	8004d6a <_realloc_r+0x1e>
 8004d8e:	42bc      	cmp	r4, r7
 8004d90:	4622      	mov	r2, r4
 8004d92:	4631      	mov	r1, r6
 8004d94:	bf28      	it	cs
 8004d96:	463a      	movcs	r2, r7
 8004d98:	f7ff fed0 	bl	8004b3c <memcpy>
 8004d9c:	4631      	mov	r1, r6
 8004d9e:	4640      	mov	r0, r8
 8004da0:	f7ff fef4 	bl	8004b8c <_free_r>
 8004da4:	e7e1      	b.n	8004d6a <_realloc_r+0x1e>
 8004da6:	4635      	mov	r5, r6
 8004da8:	e7df      	b.n	8004d6a <_realloc_r+0x1e>
	...

08004dac <_sbrk_r>:
 8004dac:	b538      	push	{r3, r4, r5, lr}
 8004dae:	4d06      	ldr	r5, [pc, #24]	; (8004dc8 <_sbrk_r+0x1c>)
 8004db0:	2300      	movs	r3, #0
 8004db2:	4604      	mov	r4, r0
 8004db4:	4608      	mov	r0, r1
 8004db6:	602b      	str	r3, [r5, #0]
 8004db8:	f7fb fe10 	bl	80009dc <_sbrk>
 8004dbc:	1c43      	adds	r3, r0, #1
 8004dbe:	d102      	bne.n	8004dc6 <_sbrk_r+0x1a>
 8004dc0:	682b      	ldr	r3, [r5, #0]
 8004dc2:	b103      	cbz	r3, 8004dc6 <_sbrk_r+0x1a>
 8004dc4:	6023      	str	r3, [r4, #0]
 8004dc6:	bd38      	pop	{r3, r4, r5, pc}
 8004dc8:	20000184 	.word	0x20000184

08004dcc <__malloc_lock>:
 8004dcc:	4801      	ldr	r0, [pc, #4]	; (8004dd4 <__malloc_lock+0x8>)
 8004dce:	f000 b811 	b.w	8004df4 <__retarget_lock_acquire_recursive>
 8004dd2:	bf00      	nop
 8004dd4:	20000188 	.word	0x20000188

08004dd8 <__malloc_unlock>:
 8004dd8:	4801      	ldr	r0, [pc, #4]	; (8004de0 <__malloc_unlock+0x8>)
 8004dda:	f000 b80c 	b.w	8004df6 <__retarget_lock_release_recursive>
 8004dde:	bf00      	nop
 8004de0:	20000188 	.word	0x20000188

08004de4 <_malloc_usable_size_r>:
 8004de4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004de8:	1f18      	subs	r0, r3, #4
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	bfbc      	itt	lt
 8004dee:	580b      	ldrlt	r3, [r1, r0]
 8004df0:	18c0      	addlt	r0, r0, r3
 8004df2:	4770      	bx	lr

08004df4 <__retarget_lock_acquire_recursive>:
 8004df4:	4770      	bx	lr

08004df6 <__retarget_lock_release_recursive>:
 8004df6:	4770      	bx	lr

08004df8 <_init>:
 8004df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dfa:	bf00      	nop
 8004dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dfe:	bc08      	pop	{r3}
 8004e00:	469e      	mov	lr, r3
 8004e02:	4770      	bx	lr

08004e04 <_fini>:
 8004e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e06:	bf00      	nop
 8004e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e0a:	bc08      	pop	{r3}
 8004e0c:	469e      	mov	lr, r3
 8004e0e:	4770      	bx	lr
