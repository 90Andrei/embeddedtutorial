
proiect25baro2test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a78  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08009c08  08009c08  00019c08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a02c  0800a02c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a02c  0800a02c  0001a02c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a034  0800a034  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a034  0800a034  0001a034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a038  0800a038  0001a038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a03c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  200001dc  0800a218  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000045c  0800a218  0002045c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ce2  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dac  00000000  00000000  00033eee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  00036ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f18  00000000  00000000  00037d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004067  00000000  00000000  00038c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015e24  00000000  00000000  0003cc8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee9f5  00000000  00000000  00052ab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001414a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005288  00000000  00000000  001414f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009bf0 	.word	0x08009bf0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08009bf0 	.word	0x08009bf0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <BMP_DevId>:
static int32_t pres;



bool BMP_DevId(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&hi2c1, BMP_ADDR_WRITE, 5, HAL_MAX_DELAY) == HAL_OK)
 8000eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb4:	2205      	movs	r2, #5
 8000eb6:	21ee      	movs	r1, #238	; 0xee
 8000eb8:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <BMP_DevId+0x24>)
 8000eba:	f002 f953 	bl	8003164 <HAL_I2C_IsDeviceReady>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d101      	bne.n	8000ec8 <BMP_DevId+0x1c>
	{
		return true;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e000      	b.n	8000eca <BMP_DevId+0x1e>
	}
    return false;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	2000022c 	.word	0x2000022c

08000ed4 <BMP_ReadCalibration>:

bool BMP_ReadCalibration(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	; 0x28
 8000ed8:	af04      	add	r7, sp, #16

	uint8_t calibValues[22];
	if(HAL_I2C_Mem_Read(&hi2c1, BMP_ADDR_READ, AC1MSB, I2C_MEMADD_SIZE_8BIT, calibValues, 22, HAL_MAX_DELAY) != HAL_OK)
 8000eda:	f04f 33ff 	mov.w	r3, #4294967295
 8000ede:	9302      	str	r3, [sp, #8]
 8000ee0:	2316      	movs	r3, #22
 8000ee2:	9301      	str	r3, [sp, #4]
 8000ee4:	463b      	mov	r3, r7
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	2301      	movs	r3, #1
 8000eea:	22aa      	movs	r2, #170	; 0xaa
 8000eec:	21ef      	movs	r1, #239	; 0xef
 8000eee:	4839      	ldr	r0, [pc, #228]	; (8000fd4 <BMP_ReadCalibration+0x100>)
 8000ef0:	f001 ff38 	bl	8002d64 <HAL_I2C_Mem_Read>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <BMP_ReadCalibration+0x2a>
	{
		return false;
 8000efa:	2300      	movs	r3, #0
 8000efc:	e066      	b.n	8000fcc <BMP_ReadCalibration+0xf8>
	}
	b1.AC1 = ((int16_t)calibValues[0] << 8) | calibValues[1];
 8000efe:	783b      	ldrb	r3, [r7, #0]
 8000f00:	021b      	lsls	r3, r3, #8
 8000f02:	b21a      	sxth	r2, r3
 8000f04:	787b      	ldrb	r3, [r7, #1]
 8000f06:	b21b      	sxth	r3, r3
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	b21a      	sxth	r2, r3
 8000f0c:	4b32      	ldr	r3, [pc, #200]	; (8000fd8 <BMP_ReadCalibration+0x104>)
 8000f0e:	801a      	strh	r2, [r3, #0]
	b1.AC2 = ((int16_t)calibValues[2] << 8) | calibValues[3];
 8000f10:	78bb      	ldrb	r3, [r7, #2]
 8000f12:	021b      	lsls	r3, r3, #8
 8000f14:	b21a      	sxth	r2, r3
 8000f16:	78fb      	ldrb	r3, [r7, #3]
 8000f18:	b21b      	sxth	r3, r3
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	b21a      	sxth	r2, r3
 8000f1e:	4b2e      	ldr	r3, [pc, #184]	; (8000fd8 <BMP_ReadCalibration+0x104>)
 8000f20:	805a      	strh	r2, [r3, #2]
	b1.AC3 = ((int16_t)calibValues[4] << 8) | calibValues[5];
 8000f22:	793b      	ldrb	r3, [r7, #4]
 8000f24:	021b      	lsls	r3, r3, #8
 8000f26:	b21a      	sxth	r2, r3
 8000f28:	797b      	ldrb	r3, [r7, #5]
 8000f2a:	b21b      	sxth	r3, r3
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	b21a      	sxth	r2, r3
 8000f30:	4b29      	ldr	r3, [pc, #164]	; (8000fd8 <BMP_ReadCalibration+0x104>)
 8000f32:	809a      	strh	r2, [r3, #4]
	b1.AC4 = ((uint16_t)calibValues[6] << 8) | calibValues[7];
 8000f34:	79bb      	ldrb	r3, [r7, #6]
 8000f36:	021b      	lsls	r3, r3, #8
 8000f38:	b21a      	sxth	r2, r3
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	b21b      	sxth	r3, r3
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	b21b      	sxth	r3, r3
 8000f42:	b29a      	uxth	r2, r3
 8000f44:	4b24      	ldr	r3, [pc, #144]	; (8000fd8 <BMP_ReadCalibration+0x104>)
 8000f46:	80da      	strh	r2, [r3, #6]
	b1.AC5 = ((uint16_t)calibValues[8] << 8) | calibValues[9];
 8000f48:	7a3b      	ldrb	r3, [r7, #8]
 8000f4a:	021b      	lsls	r3, r3, #8
 8000f4c:	b21a      	sxth	r2, r3
 8000f4e:	7a7b      	ldrb	r3, [r7, #9]
 8000f50:	b21b      	sxth	r3, r3
 8000f52:	4313      	orrs	r3, r2
 8000f54:	b21b      	sxth	r3, r3
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <BMP_ReadCalibration+0x104>)
 8000f5a:	811a      	strh	r2, [r3, #8]
	b1.AC6 = ((uint16_t)calibValues[10] << 8) | calibValues[11];
 8000f5c:	7abb      	ldrb	r3, [r7, #10]
 8000f5e:	021b      	lsls	r3, r3, #8
 8000f60:	b21a      	sxth	r2, r3
 8000f62:	7afb      	ldrb	r3, [r7, #11]
 8000f64:	b21b      	sxth	r3, r3
 8000f66:	4313      	orrs	r3, r2
 8000f68:	b21b      	sxth	r3, r3
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <BMP_ReadCalibration+0x104>)
 8000f6e:	815a      	strh	r2, [r3, #10]
	b1.B1 = ((int16_t)calibValues[12] << 8) | calibValues[13];
 8000f70:	7b3b      	ldrb	r3, [r7, #12]
 8000f72:	021b      	lsls	r3, r3, #8
 8000f74:	b21a      	sxth	r2, r3
 8000f76:	7b7b      	ldrb	r3, [r7, #13]
 8000f78:	b21b      	sxth	r3, r3
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	b21a      	sxth	r2, r3
 8000f7e:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <BMP_ReadCalibration+0x104>)
 8000f80:	819a      	strh	r2, [r3, #12]
	b1.B2 = ((int16_t)calibValues[14] << 8) | calibValues[15];
 8000f82:	7bbb      	ldrb	r3, [r7, #14]
 8000f84:	021b      	lsls	r3, r3, #8
 8000f86:	b21a      	sxth	r2, r3
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
 8000f8a:	b21b      	sxth	r3, r3
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	b21a      	sxth	r2, r3
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <BMP_ReadCalibration+0x104>)
 8000f92:	81da      	strh	r2, [r3, #14]
	b1.MB = ((int16_t)calibValues[16] << 8) | calibValues[17];
 8000f94:	7c3b      	ldrb	r3, [r7, #16]
 8000f96:	021b      	lsls	r3, r3, #8
 8000f98:	b21a      	sxth	r2, r3
 8000f9a:	7c7b      	ldrb	r3, [r7, #17]
 8000f9c:	b21b      	sxth	r3, r3
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	b21a      	sxth	r2, r3
 8000fa2:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <BMP_ReadCalibration+0x104>)
 8000fa4:	821a      	strh	r2, [r3, #16]
	b1.MC = ((int16_t)calibValues[18] << 8) | calibValues[19];
 8000fa6:	7cbb      	ldrb	r3, [r7, #18]
 8000fa8:	021b      	lsls	r3, r3, #8
 8000faa:	b21a      	sxth	r2, r3
 8000fac:	7cfb      	ldrb	r3, [r7, #19]
 8000fae:	b21b      	sxth	r3, r3
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	b21a      	sxth	r2, r3
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <BMP_ReadCalibration+0x104>)
 8000fb6:	825a      	strh	r2, [r3, #18]
	b1.MD = ((int16_t)calibValues[20] << 8) | calibValues[21];
 8000fb8:	7d3b      	ldrb	r3, [r7, #20]
 8000fba:	021b      	lsls	r3, r3, #8
 8000fbc:	b21a      	sxth	r2, r3
 8000fbe:	7d7b      	ldrb	r3, [r7, #21]
 8000fc0:	b21b      	sxth	r3, r3
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	b21a      	sxth	r2, r3
 8000fc6:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <BMP_ReadCalibration+0x104>)
 8000fc8:	829a      	strh	r2, [r3, #20]

	return true;
 8000fca:	2301      	movs	r3, #1
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3718      	adds	r7, #24
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	2000022c 	.word	0x2000022c
 8000fd8:	200001f8 	.word	0x200001f8

08000fdc <BMP_Init>:

bool BMP_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
	if(BMP_DevId() != true)
 8000fe0:	f7ff ff64 	bl	8000eac <BMP_DevId>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	f083 0301 	eor.w	r3, r3, #1
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <BMP_Init+0x18>
	{
		return false;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	e002      	b.n	8000ffa <BMP_Init+0x1e>
	}
	BMP_ReadCalibration();
 8000ff4:	f7ff ff6e 	bl	8000ed4 <BMP_ReadCalibration>
	return true;
 8000ff8:	2301      	movs	r3, #1
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <BMP_ReadUtemp>:

// read uncompensated temperature

void BMP_ReadUtemp(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af04      	add	r7, sp, #16
	uint8_t tempBuffer = 0x2E;
 8001006:	232e      	movs	r3, #46	; 0x2e
 8001008:	71fb      	strb	r3, [r7, #7]
	uint8_t tempMLsb[2];
	HAL_I2C_Mem_Write(&hi2c1, BMP_ADDR_WRITE, 0xF4, I2C_MEMADD_SIZE_8BIT , &tempBuffer, 1, HAL_MAX_DELAY);
 800100a:	f04f 33ff 	mov.w	r3, #4294967295
 800100e:	9302      	str	r3, [sp, #8]
 8001010:	2301      	movs	r3, #1
 8001012:	9301      	str	r3, [sp, #4]
 8001014:	1dfb      	adds	r3, r7, #7
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	2301      	movs	r3, #1
 800101a:	22f4      	movs	r2, #244	; 0xf4
 800101c:	21ee      	movs	r1, #238	; 0xee
 800101e:	480e      	ldr	r0, [pc, #56]	; (8001058 <BMP_ReadUtemp+0x58>)
 8001020:	f001 fd8c 	bl	8002b3c <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8001024:	2005      	movs	r0, #5
 8001026:	f000 ffa3 	bl	8001f70 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, BMP_ADDR_READ, 0xF6, I2C_MEMADD_SIZE_8BIT, tempMLsb, 2, HAL_MAX_DELAY);
 800102a:	f04f 33ff 	mov.w	r3, #4294967295
 800102e:	9302      	str	r3, [sp, #8]
 8001030:	2302      	movs	r3, #2
 8001032:	9301      	str	r3, [sp, #4]
 8001034:	1d3b      	adds	r3, r7, #4
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	2301      	movs	r3, #1
 800103a:	22f6      	movs	r2, #246	; 0xf6
 800103c:	21ef      	movs	r1, #239	; 0xef
 800103e:	4806      	ldr	r0, [pc, #24]	; (8001058 <BMP_ReadUtemp+0x58>)
 8001040:	f001 fe90 	bl	8002d64 <HAL_I2C_Mem_Read>
	uTemp = (tempMLsb[0] << 8) | tempMLsb[1];  // am sters cast la templsb
 8001044:	793b      	ldrb	r3, [r7, #4]
 8001046:	021b      	lsls	r3, r3, #8
 8001048:	797a      	ldrb	r2, [r7, #5]
 800104a:	4313      	orrs	r3, r2
 800104c:	4a03      	ldr	r2, [pc, #12]	; (800105c <BMP_ReadUtemp+0x5c>)
 800104e:	6013      	str	r3, [r2, #0]
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	2000022c 	.word	0x2000022c
 800105c:	20000210 	.word	0x20000210

08001060 <BMP_CalcTemp>:

//calculate temperature

void BMP_CalcTemp(void)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
	int32_t x1;
	int32_t x2;
	x1 = (uTemp - b1.AC6) * b1.AC5 / 32768;
 8001066:	4b19      	ldr	r3, [pc, #100]	; (80010cc <BMP_CalcTemp+0x6c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a19      	ldr	r2, [pc, #100]	; (80010d0 <BMP_CalcTemp+0x70>)
 800106c:	8952      	ldrh	r2, [r2, #10]
 800106e:	1a9b      	subs	r3, r3, r2
 8001070:	4a17      	ldr	r2, [pc, #92]	; (80010d0 <BMP_CalcTemp+0x70>)
 8001072:	8912      	ldrh	r2, [r2, #8]
 8001074:	fb02 f303 	mul.w	r3, r2, r3
 8001078:	2b00      	cmp	r3, #0
 800107a:	da02      	bge.n	8001082 <BMP_CalcTemp+0x22>
 800107c:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001080:	337f      	adds	r3, #127	; 0x7f
 8001082:	13db      	asrs	r3, r3, #15
 8001084:	607b      	str	r3, [r7, #4]
	x2 = ((int32_t)(b1.MC * 2048)) / ((int32_t)(x1 + b1.MD));
 8001086:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <BMP_CalcTemp+0x70>)
 8001088:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800108c:	02da      	lsls	r2, r3, #11
 800108e:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <BMP_CalcTemp+0x70>)
 8001090:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001094:	4619      	mov	r1, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	440b      	add	r3, r1
 800109a:	fb92 f3f3 	sdiv	r3, r2, r3
 800109e:	603b      	str	r3, [r7, #0]
	B5 = x1 + x2;
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	4413      	add	r3, r2
 80010a6:	4a0b      	ldr	r2, [pc, #44]	; (80010d4 <BMP_CalcTemp+0x74>)
 80010a8:	6013      	str	r3, [r2, #0]
	temp =(B5 + 8) / 16;
 80010aa:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <BMP_CalcTemp+0x74>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	3308      	adds	r3, #8
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	da00      	bge.n	80010b6 <BMP_CalcTemp+0x56>
 80010b4:	330f      	adds	r3, #15
 80010b6:	111b      	asrs	r3, r3, #4
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <BMP_CalcTemp+0x78>)
 80010bc:	601a      	str	r2, [r3, #0]
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	20000210 	.word	0x20000210
 80010d0:	200001f8 	.word	0x200001f8
 80010d4:	20000218 	.word	0x20000218
 80010d8:	20000214 	.word	0x20000214

080010dc <BMP_GetTemp>:

int32_t BMP_GetTemp(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
	BMP_ReadUtemp();
 80010e0:	f7ff ff8e 	bl	8001000 <BMP_ReadUtemp>
	BMP_CalcTemp();
 80010e4:	f7ff ffbc 	bl	8001060 <BMP_CalcTemp>
	return temp;
 80010e8:	4b01      	ldr	r3, [pc, #4]	; (80010f0 <BMP_GetTemp+0x14>)
 80010ea:	681b      	ldr	r3, [r3, #0]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000214 	.word	0x20000214

080010f4 <BMP_ReadUpres>:

//read uncompensated pressure

void BMP_ReadUpres (void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af04      	add	r7, sp, #16
	uint8_t writePres = 0x34;
 80010fa:	2334      	movs	r3, #52	; 0x34
 80010fc:	71fb      	strb	r3, [r7, #7]
    uint8_t presMLsb[2];


    HAL_I2C_Mem_Write(&hi2c1, BMP_ADDR_WRITE, 0xF4, I2C_MEMADD_SIZE_8BIT , &writePres, 1, HAL_MAX_DELAY);
 80010fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001102:	9302      	str	r3, [sp, #8]
 8001104:	2301      	movs	r3, #1
 8001106:	9301      	str	r3, [sp, #4]
 8001108:	1dfb      	adds	r3, r7, #7
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	2301      	movs	r3, #1
 800110e:	22f4      	movs	r2, #244	; 0xf4
 8001110:	21ee      	movs	r1, #238	; 0xee
 8001112:	480e      	ldr	r0, [pc, #56]	; (800114c <BMP_ReadUpres+0x58>)
 8001114:	f001 fd12 	bl	8002b3c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8001118:	200a      	movs	r0, #10
 800111a:	f000 ff29 	bl	8001f70 <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, BMP_ADDR_READ, 0xF6, I2C_MEMADD_SIZE_8BIT, presMLsb, 2, HAL_MAX_DELAY);
 800111e:	f04f 33ff 	mov.w	r3, #4294967295
 8001122:	9302      	str	r3, [sp, #8]
 8001124:	2302      	movs	r3, #2
 8001126:	9301      	str	r3, [sp, #4]
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	2301      	movs	r3, #1
 800112e:	22f6      	movs	r2, #246	; 0xf6
 8001130:	21ef      	movs	r1, #239	; 0xef
 8001132:	4806      	ldr	r0, [pc, #24]	; (800114c <BMP_ReadUpres+0x58>)
 8001134:	f001 fe16 	bl	8002d64 <HAL_I2C_Mem_Read>
//	uPres = ((presMLsb[0] << 16U) | (presMLsb[1] << 8U)) >> 8;
	uPres = (presMLsb[0] << 8) | presMLsb[1];
 8001138:	793b      	ldrb	r3, [r7, #4]
 800113a:	021b      	lsls	r3, r3, #8
 800113c:	797a      	ldrb	r2, [r7, #5]
 800113e:	4313      	orrs	r3, r2
 8001140:	4a03      	ldr	r2, [pc, #12]	; (8001150 <BMP_ReadUpres+0x5c>)
 8001142:	6013      	str	r3, [r2, #0]

}
 8001144:	bf00      	nop
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	2000022c 	.word	0x2000022c
 8001150:	2000021c 	.word	0x2000021c

08001154 <BMP_CalcPres>:

//calculate true pressure

void BMP_CalcPres(void)
{
 8001154:	b480      	push	{r7}
 8001156:	b089      	sub	sp, #36	; 0x24
 8001158:	af00      	add	r7, sp, #0
    int32_t B6;
    int32_t B3;
    uint32_t B4;
    uint32_t B7;

    B6 = B5 - 4000;
 800115a:	4b63      	ldr	r3, [pc, #396]	; (80012e8 <BMP_CalcPres+0x194>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001162:	61fb      	str	r3, [r7, #28]
	x1 = ((int32_t)b1.B2 * ((B6*B6) / 4096)) / 2048;
 8001164:	4b61      	ldr	r3, [pc, #388]	; (80012ec <BMP_CalcPres+0x198>)
 8001166:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800116a:	461a      	mov	r2, r3
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	fb03 f303 	mul.w	r3, r3, r3
 8001172:	2b00      	cmp	r3, #0
 8001174:	da01      	bge.n	800117a <BMP_CalcPres+0x26>
 8001176:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800117a:	131b      	asrs	r3, r3, #12
 800117c:	fb02 f303 	mul.w	r3, r2, r3
 8001180:	2b00      	cmp	r3, #0
 8001182:	da01      	bge.n	8001188 <BMP_CalcPres+0x34>
 8001184:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001188:	12db      	asrs	r3, r3, #11
 800118a:	61bb      	str	r3, [r7, #24]
	x2 = ((int32_t)b1.AC2 * B6) / 2048;
 800118c:	4b57      	ldr	r3, [pc, #348]	; (80012ec <BMP_CalcPres+0x198>)
 800118e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001192:	461a      	mov	r2, r3
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	fb02 f303 	mul.w	r3, r2, r3
 800119a:	2b00      	cmp	r3, #0
 800119c:	da01      	bge.n	80011a2 <BMP_CalcPres+0x4e>
 800119e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80011a2:	12db      	asrs	r3, r3, #11
 80011a4:	617b      	str	r3, [r7, #20]
	x3 = x1 + x2;
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	4413      	add	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
	B3 = ((int32_t)b1.AC1 * 4 + x3 + 2) / 4;
 80011ae:	4b4f      	ldr	r3, [pc, #316]	; (80012ec <BMP_CalcPres+0x198>)
 80011b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011b4:	009a      	lsls	r2, r3, #2
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	4413      	add	r3, r2
 80011ba:	3302      	adds	r3, #2
 80011bc:	2b00      	cmp	r3, #0
 80011be:	da00      	bge.n	80011c2 <BMP_CalcPres+0x6e>
 80011c0:	3303      	adds	r3, #3
 80011c2:	109b      	asrs	r3, r3, #2
 80011c4:	60fb      	str	r3, [r7, #12]
	x1 = ((int32_t)b1.AC3 * B6) / 8192;
 80011c6:	4b49      	ldr	r3, [pc, #292]	; (80012ec <BMP_CalcPres+0x198>)
 80011c8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80011cc:	461a      	mov	r2, r3
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	fb02 f303 	mul.w	r3, r2, r3
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	da02      	bge.n	80011de <BMP_CalcPres+0x8a>
 80011d8:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 80011dc:	331f      	adds	r3, #31
 80011de:	135b      	asrs	r3, r3, #13
 80011e0:	61bb      	str	r3, [r7, #24]
	x2 = ((int32_t)b1.B1 * ((B6 * B6) / 4096)) / 65536;
 80011e2:	4b42      	ldr	r3, [pc, #264]	; (80012ec <BMP_CalcPres+0x198>)
 80011e4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80011e8:	461a      	mov	r2, r3
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	fb03 f303 	mul.w	r3, r3, r3
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	da01      	bge.n	80011f8 <BMP_CalcPres+0xa4>
 80011f4:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80011f8:	131b      	asrs	r3, r3, #12
 80011fa:	fb02 f303 	mul.w	r3, r2, r3
 80011fe:	2b00      	cmp	r3, #0
 8001200:	da02      	bge.n	8001208 <BMP_CalcPres+0xb4>
 8001202:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001206:	33ff      	adds	r3, #255	; 0xff
 8001208:	141b      	asrs	r3, r3, #16
 800120a:	617b      	str	r3, [r7, #20]
	x3 = (x1 + x2 + 2) / 4;
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	4413      	add	r3, r2
 8001212:	3302      	adds	r3, #2
 8001214:	2b00      	cmp	r3, #0
 8001216:	da00      	bge.n	800121a <BMP_CalcPres+0xc6>
 8001218:	3303      	adds	r3, #3
 800121a:	109b      	asrs	r3, r3, #2
 800121c:	613b      	str	r3, [r7, #16]
	B4 = ((uint32_t)b1.AC4 * ((uint32_t)(x3+32768))) / 32768;
 800121e:	4b33      	ldr	r3, [pc, #204]	; (80012ec <BMP_CalcPres+0x198>)
 8001220:	88db      	ldrh	r3, [r3, #6]
 8001222:	461a      	mov	r2, r3
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800122a:	fb02 f303 	mul.w	r3, r2, r3
 800122e:	0bdb      	lsrs	r3, r3, #15
 8001230:	60bb      	str	r3, [r7, #8]
	B7 = ((uint32_t)uPres - (uint32_t)B3) * 50000;
 8001232:	4b2f      	ldr	r3, [pc, #188]	; (80012f0 <BMP_CalcPres+0x19c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	461a      	mov	r2, r3
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001240:	fb02 f303 	mul.w	r3, r2, r3
 8001244:	607b      	str	r3, [r7, #4]
	if(B7 < 0x80000000)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2b00      	cmp	r3, #0
 800124a:	db08      	blt.n	800125e <BMP_CalcPres+0x10a>
	{
		pres = ((B7 * 2) / B4);  //pos sa trb cast?
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	005a      	lsls	r2, r3, #1
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	fbb2 f3f3 	udiv	r3, r2, r3
 8001256:	461a      	mov	r2, r3
 8001258:	4b26      	ldr	r3, [pc, #152]	; (80012f4 <BMP_CalcPres+0x1a0>)
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	e007      	b.n	800126e <BMP_CalcPres+0x11a>
	}
	else
	{
		pres = (B7 / B4) * 2;
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	fbb2 f3f3 	udiv	r3, r2, r3
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	461a      	mov	r2, r3
 800126a:	4b22      	ldr	r3, [pc, #136]	; (80012f4 <BMP_CalcPres+0x1a0>)
 800126c:	601a      	str	r2, [r3, #0]
	}
	x1 = (pres / 256) * (pres / 256);
 800126e:	4b21      	ldr	r3, [pc, #132]	; (80012f4 <BMP_CalcPres+0x1a0>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	da00      	bge.n	8001278 <BMP_CalcPres+0x124>
 8001276:	33ff      	adds	r3, #255	; 0xff
 8001278:	121b      	asrs	r3, r3, #8
 800127a:	461a      	mov	r2, r3
 800127c:	4b1d      	ldr	r3, [pc, #116]	; (80012f4 <BMP_CalcPres+0x1a0>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	da00      	bge.n	8001286 <BMP_CalcPres+0x132>
 8001284:	33ff      	adds	r3, #255	; 0xff
 8001286:	121b      	asrs	r3, r3, #8
 8001288:	fb02 f303 	mul.w	r3, r2, r3
 800128c:	61bb      	str	r3, [r7, #24]
	x1 = (x1 * 3038) / 65536;
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	f640 32de 	movw	r2, #3038	; 0xbde
 8001294:	fb02 f303 	mul.w	r3, r2, r3
 8001298:	2b00      	cmp	r3, #0
 800129a:	da02      	bge.n	80012a2 <BMP_CalcPres+0x14e>
 800129c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80012a0:	33ff      	adds	r3, #255	; 0xff
 80012a2:	141b      	asrs	r3, r3, #16
 80012a4:	61bb      	str	r3, [r7, #24]
	x2 = (-7357 * pres) / 65536;
 80012a6:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <BMP_CalcPres+0x1a0>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a13      	ldr	r2, [pc, #76]	; (80012f8 <BMP_CalcPres+0x1a4>)
 80012ac:	fb02 f303 	mul.w	r3, r2, r3
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	da02      	bge.n	80012ba <BMP_CalcPres+0x166>
 80012b4:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80012b8:	33ff      	adds	r3, #255	; 0xff
 80012ba:	141b      	asrs	r3, r3, #16
 80012bc:	617b      	str	r3, [r7, #20]
	pres = pres + (x1 +x2 + 3791) / 16;
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	4413      	add	r3, r2
 80012c4:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	da00      	bge.n	80012ce <BMP_CalcPres+0x17a>
 80012cc:	330f      	adds	r3, #15
 80012ce:	111b      	asrs	r3, r3, #4
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <BMP_CalcPres+0x1a0>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4413      	add	r3, r2
 80012d8:	4a06      	ldr	r2, [pc, #24]	; (80012f4 <BMP_CalcPres+0x1a0>)
 80012da:	6013      	str	r3, [r2, #0]

}
 80012dc:	bf00      	nop
 80012de:	3724      	adds	r7, #36	; 0x24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	20000218 	.word	0x20000218
 80012ec:	200001f8 	.word	0x200001f8
 80012f0:	2000021c 	.word	0x2000021c
 80012f4:	20000220 	.word	0x20000220
 80012f8:	ffffe343 	.word	0xffffe343

080012fc <BMP_GetPres>:
int32_t BMP_GetPres(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
    BMP_GetTemp();
 8001300:	f7ff feec 	bl	80010dc <BMP_GetTemp>
	BMP_ReadUpres();
 8001304:	f7ff fef6 	bl	80010f4 <BMP_ReadUpres>
    BMP_CalcPres();
 8001308:	f7ff ff24 	bl	8001154 <BMP_CalcPres>
	return pres;
 800130c:	4b01      	ldr	r3, [pc, #4]	; (8001314 <BMP_GetPres+0x18>)
 800130e:	681b      	ldr	r3, [r3, #0]
}
 8001310:	4618      	mov	r0, r3
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000220 	.word	0x20000220

08001318 <HMC_ReadValues>:
{
	HAL_I2C_Mem_Read(&hi2c1, HMC_ADDR_WRITE, HMC_DATAXO, I2C_MEMADD_SIZE_8BIT, databuffer, 6,HAL_MAX_DELAY);
}

bool HMC_ReadValues ()
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af02      	add	r7, sp, #8
	if(HAL_I2C_Mem_Read_DMA(&hi2c1, HMC_ADDR_WRITE, HMC_DATAXO, I2C_MEMADD_SIZE_8BIT, databuffer, 6) != HAL_OK)
 800131e:	2306      	movs	r3, #6
 8001320:	9301      	str	r3, [sp, #4]
 8001322:	4b08      	ldr	r3, [pc, #32]	; (8001344 <HMC_ReadValues+0x2c>)
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	2301      	movs	r3, #1
 8001328:	2203      	movs	r2, #3
 800132a:	213c      	movs	r1, #60	; 0x3c
 800132c:	4806      	ldr	r0, [pc, #24]	; (8001348 <HMC_ReadValues+0x30>)
 800132e:	f001 fe33 	bl	8002f98 <HAL_I2C_Mem_Read_DMA>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <HMC_ReadValues+0x24>
	{
		return false;
 8001338:	2300      	movs	r3, #0
 800133a:	e000      	b.n	800133e <HMC_ReadValues+0x26>
	}

	return true;
 800133c:	2301      	movs	r3, #1
}
 800133e:	4618      	mov	r0, r3
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000224 	.word	0x20000224
 8001348:	2000022c 	.word	0x2000022c

0800134c <Set_SingleMeasureMode>:



bool Set_SingleMeasureMode()
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af04      	add	r7, sp, #16
	uint8_t single = 0x1;  //punel pe 1 sa fie in sigle measurement mode, daca lam setat pe 0 ii in continous measure mode
 8001352:	2301      	movs	r3, #1
 8001354:	71fb      	strb	r3, [r7, #7]

	if(HAL_I2C_Mem_Write(&hi2c1, HMC_ADDR_WRITE, 0x2, I2C_MEMADD_SIZE_8BIT, &single, 1, HAL_MAX_DELAY) != HAL_OK)
 8001356:	f04f 33ff 	mov.w	r3, #4294967295
 800135a:	9302      	str	r3, [sp, #8]
 800135c:	2301      	movs	r3, #1
 800135e:	9301      	str	r3, [sp, #4]
 8001360:	1dfb      	adds	r3, r7, #7
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	2301      	movs	r3, #1
 8001366:	2202      	movs	r2, #2
 8001368:	213c      	movs	r1, #60	; 0x3c
 800136a:	4806      	ldr	r0, [pc, #24]	; (8001384 <Set_SingleMeasureMode+0x38>)
 800136c:	f001 fbe6 	bl	8002b3c <HAL_I2C_Mem_Write>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <Set_SingleMeasureMode+0x2e>
	{
		return false;
 8001376:	2300      	movs	r3, #0
 8001378:	e000      	b.n	800137c <Set_SingleMeasureMode+0x30>
	}
	return true;
 800137a:	2301      	movs	r3, #1
}
 800137c:	4618      	mov	r0, r3
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	2000022c 	.word	0x2000022c

08001388 <HAL_I2C_MemRxCpltCallback>:
}



void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{  // uint8_t idle = 0x3;
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]

	if(HMC_EXTI_Ready)
 8001390:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <HAL_I2C_MemRxCpltCallback+0x38>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d008      	beq.n	80013aa <HAL_I2C_MemRxCpltCallback+0x22>
	{
		Set_SingleMeasureMode();
 8001398:	f7ff ffd8 	bl	800134c <Set_SingleMeasureMode>
		HMC_EXTI_Ready = false;
 800139c:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <HAL_I2C_MemRxCpltCallback+0x38>)
 800139e:	2200      	movs	r2, #0
 80013a0:	701a      	strb	r2, [r3, #0]
		HMC_IT_Ready = true;
 80013a2:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <HAL_I2C_MemRxCpltCallback+0x3c>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		BMP_IT_Status++;
	}
}
 80013a8:	e005      	b.n	80013b6 <HAL_I2C_MemRxCpltCallback+0x2e>
		BMP_IT_Status++;
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <HAL_I2C_MemRxCpltCallback+0x40>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	3301      	adds	r3, #1
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <HAL_I2C_MemRxCpltCallback+0x40>)
 80013b4:	701a      	strb	r2, [r3, #0]
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	200002c8 	.word	0x200002c8
 80013c4:	200002c9 	.word	0x200002c9
 80013c8:	200002ca 	.word	0x200002ca

080013cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013d2:	4b14      	ldr	r3, [pc, #80]	; (8001424 <MX_DMA_Init+0x58>)
 80013d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013d6:	4a13      	ldr	r2, [pc, #76]	; (8001424 <MX_DMA_Init+0x58>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6493      	str	r3, [r2, #72]	; 0x48
 80013de:	4b11      	ldr	r3, [pc, #68]	; (8001424 <MX_DMA_Init+0x58>)
 80013e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2102      	movs	r1, #2
 80013ee:	200c      	movs	r0, #12
 80013f0:	f000 febd 	bl	800216e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80013f4:	200c      	movs	r0, #12
 80013f6:	f000 fed6 	bl	80021a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 2, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2102      	movs	r1, #2
 80013fe:	200d      	movs	r0, #13
 8001400:	f000 feb5 	bl	800216e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001404:	200d      	movs	r0, #13
 8001406:	f000 fece 	bl	80021a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	2100      	movs	r1, #0
 800140e:	2011      	movs	r0, #17
 8001410:	f000 fead 	bl	800216e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001414:	2011      	movs	r0, #17
 8001416:	f000 fec6 	bl	80021a6 <HAL_NVIC_EnableIRQ>

}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40021000 	.word	0x40021000

08001428 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08a      	sub	sp, #40	; 0x28
 800142c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142e:	f107 0314 	add.w	r3, r7, #20
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
 800143c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143e:	4b58      	ldr	r3, [pc, #352]	; (80015a0 <MX_GPIO_Init+0x178>)
 8001440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001442:	4a57      	ldr	r2, [pc, #348]	; (80015a0 <MX_GPIO_Init+0x178>)
 8001444:	f043 0304 	orr.w	r3, r3, #4
 8001448:	64d3      	str	r3, [r2, #76]	; 0x4c
 800144a:	4b55      	ldr	r3, [pc, #340]	; (80015a0 <MX_GPIO_Init+0x178>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144e:	f003 0304 	and.w	r3, r3, #4
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001456:	4b52      	ldr	r3, [pc, #328]	; (80015a0 <MX_GPIO_Init+0x178>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145a:	4a51      	ldr	r2, [pc, #324]	; (80015a0 <MX_GPIO_Init+0x178>)
 800145c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001460:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001462:	4b4f      	ldr	r3, [pc, #316]	; (80015a0 <MX_GPIO_Init+0x178>)
 8001464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	4b4c      	ldr	r3, [pc, #304]	; (80015a0 <MX_GPIO_Init+0x178>)
 8001470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001472:	4a4b      	ldr	r2, [pc, #300]	; (80015a0 <MX_GPIO_Init+0x178>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	64d3      	str	r3, [r2, #76]	; 0x4c
 800147a:	4b49      	ldr	r3, [pc, #292]	; (80015a0 <MX_GPIO_Init+0x178>)
 800147c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001486:	4b46      	ldr	r3, [pc, #280]	; (80015a0 <MX_GPIO_Init+0x178>)
 8001488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148a:	4a45      	ldr	r2, [pc, #276]	; (80015a0 <MX_GPIO_Init+0x178>)
 800148c:	f043 0302 	orr.w	r3, r3, #2
 8001490:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001492:	4b43      	ldr	r3, [pc, #268]	; (80015a0 <MX_GPIO_Init+0x178>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GYRO_GPIO_Port, SPI_CS_GYRO_Pin, GPIO_PIN_SET);
 800149e:	2201      	movs	r2, #1
 80014a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a8:	f001 fa88 	bl	80029bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADXL_RESET_GPIO_Port, ADXL_RESET_Pin, GPIO_PIN_RESET);
 80014ac:	2200      	movs	r2, #0
 80014ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014b2:	483c      	ldr	r0, [pc, #240]	; (80015a4 <MX_GPIO_Init+0x17c>)
 80014b4:	f001 fa82 	bl	80029bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_ACC_GPIO_Port, SPI_CS_ACC_Pin, GPIO_PIN_SET);
 80014b8:	2201      	movs	r2, #1
 80014ba:	2140      	movs	r1, #64	; 0x40
 80014bc:	483a      	ldr	r0, [pc, #232]	; (80015a8 <MX_GPIO_Init+0x180>)
 80014be:	f001 fa7d 	bl	80029bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014c8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014d2:	f107 0314 	add.w	r3, r7, #20
 80014d6:	4619      	mov	r1, r3
 80014d8:	4832      	ldr	r0, [pc, #200]	; (80015a4 <MX_GPIO_Init+0x17c>)
 80014da:	f001 f8c5 	bl	8002668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_EXTI_ACC_Pin;
 80014de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e4:	2300      	movs	r3, #0
 80014e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_EXTI_ACC_GPIO_Port, &GPIO_InitStruct);
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	4619      	mov	r1, r3
 80014f2:	482c      	ldr	r0, [pc, #176]	; (80015a4 <MX_GPIO_Init+0x17c>)
 80014f4:	f001 f8b8 	bl	8002668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_GYRO_Pin;
 80014f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fe:	2301      	movs	r3, #1
 8001500:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001506:	2302      	movs	r3, #2
 8001508:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GYRO_GPIO_Port, &GPIO_InitStruct);
 800150a:	f107 0314 	add.w	r3, r7, #20
 800150e:	4619      	mov	r1, r3
 8001510:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001514:	f001 f8a8 	bl	8002668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADXL_RESET_Pin;
 8001518:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800151c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151e:	2301      	movs	r3, #1
 8001520:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001526:	2300      	movs	r3, #0
 8001528:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ADXL_RESET_GPIO_Port, &GPIO_InitStruct);
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	4619      	mov	r1, r3
 8001530:	481c      	ldr	r0, [pc, #112]	; (80015a4 <MX_GPIO_Init+0x17c>)
 8001532:	f001 f899 	bl	8002668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_EXTI5_HMC_Pin;
 8001536:	2320      	movs	r3, #32
 8001538:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800153a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800153e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001540:	2301      	movs	r3, #1
 8001542:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_EXTI5_HMC_GPIO_Port, &GPIO_InitStruct);
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	4619      	mov	r1, r3
 800154a:	4817      	ldr	r0, [pc, #92]	; (80015a8 <MX_GPIO_Init+0x180>)
 800154c:	f001 f88c 	bl	8002668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_ACC_Pin;
 8001550:	2340      	movs	r3, #64	; 0x40
 8001552:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001554:	2301      	movs	r3, #1
 8001556:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800155c:	2302      	movs	r3, #2
 800155e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_ACC_GPIO_Port, &GPIO_InitStruct);
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	4619      	mov	r1, r3
 8001566:	4810      	ldr	r0, [pc, #64]	; (80015a8 <MX_GPIO_Init+0x180>)
 8001568:	f001 f87e 	bl	8002668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_EXTI_GYRO_Pin;
 800156c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001570:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001572:	2300      	movs	r3, #0
 8001574:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_EXTI_GYRO_GPIO_Port, &GPIO_InitStruct);
 800157a:	f107 0314 	add.w	r3, r7, #20
 800157e:	4619      	mov	r1, r3
 8001580:	4809      	ldr	r0, [pc, #36]	; (80015a8 <MX_GPIO_Init+0x180>)
 8001582:	f001 f871 	bl	8002668 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8001586:	2200      	movs	r2, #0
 8001588:	2102      	movs	r1, #2
 800158a:	2017      	movs	r0, #23
 800158c:	f000 fdef 	bl	800216e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001590:	2017      	movs	r0, #23
 8001592:	f000 fe08 	bl	80021a6 <HAL_NVIC_EnableIRQ>

}
 8001596:	bf00      	nop
 8001598:	3728      	adds	r7, #40	; 0x28
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40021000 	.word	0x40021000
 80015a4:	48000800 	.word	0x48000800
 80015a8:	48000400 	.word	0x48000400

080015ac <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_EXTI5_HMC_Pin)
 80015b6:	88fb      	ldrh	r3, [r7, #6]
 80015b8:	2b20      	cmp	r3, #32
 80015ba:	d104      	bne.n	80015c6 <HAL_GPIO_EXTI_Callback+0x1a>
  {
	  HMC_EXTI_Ready = true;
 80015bc:	4b04      	ldr	r3, [pc, #16]	; (80015d0 <HAL_GPIO_EXTI_Callback+0x24>)
 80015be:	2201      	movs	r2, #1
 80015c0:	701a      	strb	r2, [r3, #0]
	  HMC_ReadValues();
 80015c2:	f7ff fea9 	bl	8001318 <HMC_ReadValues>
  }
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	200002c8 	.word	0x200002c8

080015d4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015d8:	4b1b      	ldr	r3, [pc, #108]	; (8001648 <MX_I2C1_Init+0x74>)
 80015da:	4a1c      	ldr	r2, [pc, #112]	; (800164c <MX_I2C1_Init+0x78>)
 80015dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 80015de:	4b1a      	ldr	r3, [pc, #104]	; (8001648 <MX_I2C1_Init+0x74>)
 80015e0:	4a1b      	ldr	r2, [pc, #108]	; (8001650 <MX_I2C1_Init+0x7c>)
 80015e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80015e4:	4b18      	ldr	r3, [pc, #96]	; (8001648 <MX_I2C1_Init+0x74>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015ea:	4b17      	ldr	r3, [pc, #92]	; (8001648 <MX_I2C1_Init+0x74>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015f0:	4b15      	ldr	r3, [pc, #84]	; (8001648 <MX_I2C1_Init+0x74>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80015f6:	4b14      	ldr	r3, [pc, #80]	; (8001648 <MX_I2C1_Init+0x74>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015fc:	4b12      	ldr	r3, [pc, #72]	; (8001648 <MX_I2C1_Init+0x74>)
 80015fe:	2200      	movs	r2, #0
 8001600:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001602:	4b11      	ldr	r3, [pc, #68]	; (8001648 <MX_I2C1_Init+0x74>)
 8001604:	2200      	movs	r2, #0
 8001606:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001608:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <MX_I2C1_Init+0x74>)
 800160a:	2200      	movs	r2, #0
 800160c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800160e:	480e      	ldr	r0, [pc, #56]	; (8001648 <MX_I2C1_Init+0x74>)
 8001610:	f001 fa04 	bl	8002a1c <HAL_I2C_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800161a:	f000 f91d 	bl	8001858 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800161e:	2100      	movs	r1, #0
 8001620:	4809      	ldr	r0, [pc, #36]	; (8001648 <MX_I2C1_Init+0x74>)
 8001622:	f003 fb49 	bl	8004cb8 <HAL_I2CEx_ConfigAnalogFilter>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800162c:	f000 f914 	bl	8001858 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001630:	2100      	movs	r1, #0
 8001632:	4805      	ldr	r0, [pc, #20]	; (8001648 <MX_I2C1_Init+0x74>)
 8001634:	f003 fb8b 	bl	8004d4e <HAL_I2CEx_ConfigDigitalFilter>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800163e:	f000 f90b 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	2000022c 	.word	0x2000022c
 800164c:	40005400 	.word	0x40005400
 8001650:	00702991 	.word	0x00702991

08001654 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b0ac      	sub	sp, #176	; 0xb0
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	2288      	movs	r2, #136	; 0x88
 8001672:	2100      	movs	r1, #0
 8001674:	4618      	mov	r0, r3
 8001676:	f005 fd9b 	bl	80071b0 <memset>
  if(i2cHandle->Instance==I2C1)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a3e      	ldr	r2, [pc, #248]	; (8001778 <HAL_I2C_MspInit+0x124>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d174      	bne.n	800176e <HAL_I2C_MspInit+0x11a>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001684:	2340      	movs	r3, #64	; 0x40
 8001686:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001688:	2300      	movs	r3, #0
 800168a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	4618      	mov	r0, r3
 8001692:	f004 fa2d 	bl	8005af0 <HAL_RCCEx_PeriphCLKConfig>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800169c:	f000 f8dc 	bl	8001858 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a0:	4b36      	ldr	r3, [pc, #216]	; (800177c <HAL_I2C_MspInit+0x128>)
 80016a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a4:	4a35      	ldr	r2, [pc, #212]	; (800177c <HAL_I2C_MspInit+0x128>)
 80016a6:	f043 0302 	orr.w	r3, r3, #2
 80016aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ac:	4b33      	ldr	r3, [pc, #204]	; (800177c <HAL_I2C_MspInit+0x128>)
 80016ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	613b      	str	r3, [r7, #16]
 80016b6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80016b8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80016bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016c0:	2312      	movs	r3, #18
 80016c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016c6:	2301      	movs	r3, #1
 80016c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016cc:	2303      	movs	r3, #3
 80016ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016d2:	2304      	movs	r3, #4
 80016d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016dc:	4619      	mov	r1, r3
 80016de:	4828      	ldr	r0, [pc, #160]	; (8001780 <HAL_I2C_MspInit+0x12c>)
 80016e0:	f000 ffc2 	bl	8002668 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB7);
 80016e4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80016e8:	f003 fb7e 	bl	8004de8 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB8);
 80016ec:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80016f0:	f003 fb7a 	bl	8004de8 <HAL_I2CEx_EnableFastModePlus>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016f4:	4b21      	ldr	r3, [pc, #132]	; (800177c <HAL_I2C_MspInit+0x128>)
 80016f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f8:	4a20      	ldr	r2, [pc, #128]	; (800177c <HAL_I2C_MspInit+0x128>)
 80016fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016fe:	6593      	str	r3, [r2, #88]	; 0x58
 8001700:	4b1e      	ldr	r3, [pc, #120]	; (800177c <HAL_I2C_MspInit+0x128>)
 8001702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001704:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 800170c:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <HAL_I2C_MspInit+0x130>)
 800170e:	4a1e      	ldr	r2, [pc, #120]	; (8001788 <HAL_I2C_MspInit+0x134>)
 8001710:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_3;
 8001712:	4b1c      	ldr	r3, [pc, #112]	; (8001784 <HAL_I2C_MspInit+0x130>)
 8001714:	2203      	movs	r2, #3
 8001716:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001718:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <HAL_I2C_MspInit+0x130>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800171e:	4b19      	ldr	r3, [pc, #100]	; (8001784 <HAL_I2C_MspInit+0x130>)
 8001720:	2200      	movs	r2, #0
 8001722:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001724:	4b17      	ldr	r3, [pc, #92]	; (8001784 <HAL_I2C_MspInit+0x130>)
 8001726:	2280      	movs	r2, #128	; 0x80
 8001728:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800172a:	4b16      	ldr	r3, [pc, #88]	; (8001784 <HAL_I2C_MspInit+0x130>)
 800172c:	2200      	movs	r2, #0
 800172e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001730:	4b14      	ldr	r3, [pc, #80]	; (8001784 <HAL_I2C_MspInit+0x130>)
 8001732:	2200      	movs	r2, #0
 8001734:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001736:	4b13      	ldr	r3, [pc, #76]	; (8001784 <HAL_I2C_MspInit+0x130>)
 8001738:	2200      	movs	r2, #0
 800173a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800173c:	4b11      	ldr	r3, [pc, #68]	; (8001784 <HAL_I2C_MspInit+0x130>)
 800173e:	2200      	movs	r2, #0
 8001740:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001742:	4810      	ldr	r0, [pc, #64]	; (8001784 <HAL_I2C_MspInit+0x130>)
 8001744:	f000 fd4a 	bl	80021dc <HAL_DMA_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <HAL_I2C_MspInit+0xfe>
    {
      Error_Handler();
 800174e:	f000 f883 	bl	8001858 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a0b      	ldr	r2, [pc, #44]	; (8001784 <HAL_I2C_MspInit+0x130>)
 8001756:	63da      	str	r2, [r3, #60]	; 0x3c
 8001758:	4a0a      	ldr	r2, [pc, #40]	; (8001784 <HAL_I2C_MspInit+0x130>)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 2, 0);
 800175e:	2200      	movs	r2, #0
 8001760:	2102      	movs	r1, #2
 8001762:	201f      	movs	r0, #31
 8001764:	f000 fd03 	bl	800216e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001768:	201f      	movs	r0, #31
 800176a:	f000 fd1c 	bl	80021a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800176e:	bf00      	nop
 8001770:	37b0      	adds	r7, #176	; 0xb0
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40005400 	.word	0x40005400
 800177c:	40021000 	.word	0x40021000
 8001780:	48000400 	.word	0x48000400
 8001784:	20000280 	.word	0x20000280
 8001788:	40020080 	.word	0x40020080

0800178c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001790:	f000 fb72 	bl	8001e78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001794:	f000 f80f 	bl	80017b6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001798:	f7ff fe46 	bl	8001428 <MX_GPIO_Init>
  MX_DMA_Init();
 800179c:	f7ff fe16 	bl	80013cc <MX_DMA_Init>
  MX_USART2_UART_Init();
 80017a0:	f000 fab4 	bl	8001d0c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80017a4:	f000 f85e 	bl	8001864 <MX_SPI1_Init>
  MX_I2C1_Init();
 80017a8:	f7ff ff14 	bl	80015d4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  BMP_Init();
 80017ac:	f7ff fc16 	bl	8000fdc <BMP_Init>
  	    GYRO_XYZConv(&x, &y, &z);

  	 //   USART_TransmitGYROValues(&x, &y, &z);
    }
*/
	  BMP_GetPres();
 80017b0:	f7ff fda4 	bl	80012fc <BMP_GetPres>
 80017b4:	e7fc      	b.n	80017b0 <main+0x24>

080017b6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b096      	sub	sp, #88	; 0x58
 80017ba:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	2244      	movs	r2, #68	; 0x44
 80017c2:	2100      	movs	r1, #0
 80017c4:	4618      	mov	r0, r3
 80017c6:	f005 fcf3 	bl	80071b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017ca:	463b      	mov	r3, r7
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80017d8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80017dc:	f003 fb32 	bl	8004e44 <HAL_PWREx_ControlVoltageScaling>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <SystemClock_Config+0x34>
  {
    Error_Handler();
 80017e6:	f000 f837 	bl	8001858 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017ea:	2302      	movs	r3, #2
 80017ec:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017f4:	2310      	movs	r3, #16
 80017f6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017f8:	2302      	movs	r3, #2
 80017fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017fc:	2302      	movs	r3, #2
 80017fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001800:	2301      	movs	r3, #1
 8001802:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001804:	230a      	movs	r3, #10
 8001806:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001808:	2307      	movs	r3, #7
 800180a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800180c:	2302      	movs	r3, #2
 800180e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001810:	2302      	movs	r3, #2
 8001812:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001814:	f107 0314 	add.w	r3, r7, #20
 8001818:	4618      	mov	r0, r3
 800181a:	f003 fb69 	bl	8004ef0 <HAL_RCC_OscConfig>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001824:	f000 f818 	bl	8001858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001828:	230f      	movs	r3, #15
 800182a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800182c:	2303      	movs	r3, #3
 800182e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001830:	2300      	movs	r3, #0
 8001832:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001834:	2300      	movs	r3, #0
 8001836:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001838:	2300      	movs	r3, #0
 800183a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800183c:	463b      	mov	r3, r7
 800183e:	2104      	movs	r1, #4
 8001840:	4618      	mov	r0, r3
 8001842:	f003 ff31 	bl	80056a8 <HAL_RCC_ClockConfig>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800184c:	f000 f804 	bl	8001858 <Error_Handler>
  }
}
 8001850:	bf00      	nop
 8001852:	3758      	adds	r7, #88	; 0x58
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800185c:	b672      	cpsid	i
}
 800185e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001860:	e7fe      	b.n	8001860 <Error_Handler+0x8>
	...

08001864 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001868:	4b1b      	ldr	r3, [pc, #108]	; (80018d8 <MX_SPI1_Init+0x74>)
 800186a:	4a1c      	ldr	r2, [pc, #112]	; (80018dc <MX_SPI1_Init+0x78>)
 800186c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800186e:	4b1a      	ldr	r3, [pc, #104]	; (80018d8 <MX_SPI1_Init+0x74>)
 8001870:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001874:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001876:	4b18      	ldr	r3, [pc, #96]	; (80018d8 <MX_SPI1_Init+0x74>)
 8001878:	2200      	movs	r2, #0
 800187a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800187c:	4b16      	ldr	r3, [pc, #88]	; (80018d8 <MX_SPI1_Init+0x74>)
 800187e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001882:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001884:	4b14      	ldr	r3, [pc, #80]	; (80018d8 <MX_SPI1_Init+0x74>)
 8001886:	2202      	movs	r2, #2
 8001888:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800188a:	4b13      	ldr	r3, [pc, #76]	; (80018d8 <MX_SPI1_Init+0x74>)
 800188c:	2201      	movs	r2, #1
 800188e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001890:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <MX_SPI1_Init+0x74>)
 8001892:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001896:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001898:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <MX_SPI1_Init+0x74>)
 800189a:	2238      	movs	r2, #56	; 0x38
 800189c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800189e:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <MX_SPI1_Init+0x74>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018a4:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <MX_SPI1_Init+0x74>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018aa:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <MX_SPI1_Init+0x74>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80018b0:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <MX_SPI1_Init+0x74>)
 80018b2:	2207      	movs	r2, #7
 80018b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018b6:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <MX_SPI1_Init+0x74>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80018bc:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <MX_SPI1_Init+0x74>)
 80018be:	2200      	movs	r2, #0
 80018c0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018c2:	4805      	ldr	r0, [pc, #20]	; (80018d8 <MX_SPI1_Init+0x74>)
 80018c4:	f004 fdd0 	bl	8006468 <HAL_SPI_Init>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80018ce:	f7ff ffc3 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	200002cc 	.word	0x200002cc
 80018dc:	40013000 	.word	0x40013000

080018e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08a      	sub	sp, #40	; 0x28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a4d      	ldr	r2, [pc, #308]	; (8001a34 <HAL_SPI_MspInit+0x154>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	f040 8094 	bne.w	8001a2c <HAL_SPI_MspInit+0x14c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001904:	4b4c      	ldr	r3, [pc, #304]	; (8001a38 <HAL_SPI_MspInit+0x158>)
 8001906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001908:	4a4b      	ldr	r2, [pc, #300]	; (8001a38 <HAL_SPI_MspInit+0x158>)
 800190a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800190e:	6613      	str	r3, [r2, #96]	; 0x60
 8001910:	4b49      	ldr	r3, [pc, #292]	; (8001a38 <HAL_SPI_MspInit+0x158>)
 8001912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001914:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191c:	4b46      	ldr	r3, [pc, #280]	; (8001a38 <HAL_SPI_MspInit+0x158>)
 800191e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001920:	4a45      	ldr	r2, [pc, #276]	; (8001a38 <HAL_SPI_MspInit+0x158>)
 8001922:	f043 0301 	orr.w	r3, r3, #1
 8001926:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001928:	4b43      	ldr	r3, [pc, #268]	; (8001a38 <HAL_SPI_MspInit+0x158>)
 800192a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001934:	2320      	movs	r3, #32
 8001936:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001938:	2302      	movs	r3, #2
 800193a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001940:	2303      	movs	r3, #3
 8001942:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001944:	2305      	movs	r3, #5
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	4619      	mov	r1, r3
 800194e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001952:	f000 fe89 	bl	8002668 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001956:	23c0      	movs	r3, #192	; 0xc0
 8001958:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195a:	2302      	movs	r3, #2
 800195c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800195e:	2301      	movs	r3, #1
 8001960:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001962:	2303      	movs	r3, #3
 8001964:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001966:	2305      	movs	r3, #5
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196a:	f107 0314 	add.w	r3, r7, #20
 800196e:	4619      	mov	r1, r3
 8001970:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001974:	f000 fe78 	bl	8002668 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8001978:	4b30      	ldr	r3, [pc, #192]	; (8001a3c <HAL_SPI_MspInit+0x15c>)
 800197a:	4a31      	ldr	r2, [pc, #196]	; (8001a40 <HAL_SPI_MspInit+0x160>)
 800197c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 800197e:	4b2f      	ldr	r3, [pc, #188]	; (8001a3c <HAL_SPI_MspInit+0x15c>)
 8001980:	2201      	movs	r2, #1
 8001982:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001984:	4b2d      	ldr	r3, [pc, #180]	; (8001a3c <HAL_SPI_MspInit+0x15c>)
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800198a:	4b2c      	ldr	r3, [pc, #176]	; (8001a3c <HAL_SPI_MspInit+0x15c>)
 800198c:	2200      	movs	r2, #0
 800198e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001990:	4b2a      	ldr	r3, [pc, #168]	; (8001a3c <HAL_SPI_MspInit+0x15c>)
 8001992:	2280      	movs	r2, #128	; 0x80
 8001994:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001996:	4b29      	ldr	r3, [pc, #164]	; (8001a3c <HAL_SPI_MspInit+0x15c>)
 8001998:	2200      	movs	r2, #0
 800199a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800199c:	4b27      	ldr	r3, [pc, #156]	; (8001a3c <HAL_SPI_MspInit+0x15c>)
 800199e:	2200      	movs	r2, #0
 80019a0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80019a2:	4b26      	ldr	r3, [pc, #152]	; (8001a3c <HAL_SPI_MspInit+0x15c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019a8:	4b24      	ldr	r3, [pc, #144]	; (8001a3c <HAL_SPI_MspInit+0x15c>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80019ae:	4823      	ldr	r0, [pc, #140]	; (8001a3c <HAL_SPI_MspInit+0x15c>)
 80019b0:	f000 fc14 	bl	80021dc <HAL_DMA_Init>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <HAL_SPI_MspInit+0xde>
    {
      Error_Handler();
 80019ba:	f7ff ff4d 	bl	8001858 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a1e      	ldr	r2, [pc, #120]	; (8001a3c <HAL_SPI_MspInit+0x15c>)
 80019c2:	659a      	str	r2, [r3, #88]	; 0x58
 80019c4:	4a1d      	ldr	r2, [pc, #116]	; (8001a3c <HAL_SPI_MspInit+0x15c>)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80019ca:	4b1e      	ldr	r3, [pc, #120]	; (8001a44 <HAL_SPI_MspInit+0x164>)
 80019cc:	4a1e      	ldr	r2, [pc, #120]	; (8001a48 <HAL_SPI_MspInit+0x168>)
 80019ce:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 80019d0:	4b1c      	ldr	r3, [pc, #112]	; (8001a44 <HAL_SPI_MspInit+0x164>)
 80019d2:	2201      	movs	r2, #1
 80019d4:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019d6:	4b1b      	ldr	r3, [pc, #108]	; (8001a44 <HAL_SPI_MspInit+0x164>)
 80019d8:	2210      	movs	r2, #16
 80019da:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019dc:	4b19      	ldr	r3, [pc, #100]	; (8001a44 <HAL_SPI_MspInit+0x164>)
 80019de:	2200      	movs	r2, #0
 80019e0:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019e2:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <HAL_SPI_MspInit+0x164>)
 80019e4:	2280      	movs	r2, #128	; 0x80
 80019e6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019e8:	4b16      	ldr	r3, [pc, #88]	; (8001a44 <HAL_SPI_MspInit+0x164>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019ee:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <HAL_SPI_MspInit+0x164>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80019f4:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <HAL_SPI_MspInit+0x164>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019fa:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <HAL_SPI_MspInit+0x164>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001a00:	4810      	ldr	r0, [pc, #64]	; (8001a44 <HAL_SPI_MspInit+0x164>)
 8001a02:	f000 fbeb 	bl	80021dc <HAL_DMA_Init>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <HAL_SPI_MspInit+0x130>
    {
      Error_Handler();
 8001a0c:	f7ff ff24 	bl	8001858 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a0c      	ldr	r2, [pc, #48]	; (8001a44 <HAL_SPI_MspInit+0x164>)
 8001a14:	655a      	str	r2, [r3, #84]	; 0x54
 8001a16:	4a0b      	ldr	r2, [pc, #44]	; (8001a44 <HAL_SPI_MspInit+0x164>)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	2102      	movs	r1, #2
 8001a20:	2023      	movs	r0, #35	; 0x23
 8001a22:	f000 fba4 	bl	800216e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001a26:	2023      	movs	r0, #35	; 0x23
 8001a28:	f000 fbbd 	bl	80021a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001a2c:	bf00      	nop
 8001a2e:	3728      	adds	r7, #40	; 0x28
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40013000 	.word	0x40013000
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	20000330 	.word	0x20000330
 8001a40:	4002001c 	.word	0x4002001c
 8001a44:	20000378 	.word	0x20000378
 8001a48:	40020030 	.word	0x40020030

08001a4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a52:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <HAL_MspInit+0x44>)
 8001a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a56:	4a0e      	ldr	r2, [pc, #56]	; (8001a90 <HAL_MspInit+0x44>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	6613      	str	r3, [r2, #96]	; 0x60
 8001a5e:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <HAL_MspInit+0x44>)
 8001a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	607b      	str	r3, [r7, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a6a:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <HAL_MspInit+0x44>)
 8001a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6e:	4a08      	ldr	r2, [pc, #32]	; (8001a90 <HAL_MspInit+0x44>)
 8001a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a74:	6593      	str	r3, [r2, #88]	; 0x58
 8001a76:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <HAL_MspInit+0x44>)
 8001a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7e:	603b      	str	r3, [r7, #0]
 8001a80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	40021000 	.word	0x40021000

08001a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a98:	e7fe      	b.n	8001a98 <NMI_Handler+0x4>

08001a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a9e:	e7fe      	b.n	8001a9e <HardFault_Handler+0x4>

08001aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aa4:	e7fe      	b.n	8001aa4 <MemManage_Handler+0x4>

08001aa6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aaa:	e7fe      	b.n	8001aaa <BusFault_Handler+0x4>

08001aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ab0:	e7fe      	b.n	8001ab0 <UsageFault_Handler+0x4>

08001ab2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ae0:	f000 fa26 	bl	8001f30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001aec:	4802      	ldr	r0, [pc, #8]	; (8001af8 <DMA1_Channel2_IRQHandler+0x10>)
 8001aee:	f000 fcce 	bl	800248e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000330 	.word	0x20000330

08001afc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001b00:	4802      	ldr	r0, [pc, #8]	; (8001b0c <DMA1_Channel3_IRQHandler+0x10>)
 8001b02:	f000 fcc4 	bl	800248e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000378 	.word	0x20000378

08001b10 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001b14:	4802      	ldr	r0, [pc, #8]	; (8001b20 <DMA1_Channel7_IRQHandler+0x10>)
 8001b16:	f000 fcba 	bl	800248e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000280 	.word	0x20000280

08001b24 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_EXTI5_HMC_Pin);
 8001b28:	2020      	movs	r0, #32
 8001b2a:	f000 ff5f 	bl	80029ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
	...

08001b34 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001b38:	4802      	ldr	r0, [pc, #8]	; (8001b44 <I2C1_EV_IRQHandler+0x10>)
 8001b3a:	f001 fc1a 	bl	8003372 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	2000022c 	.word	0x2000022c

08001b48 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001b4c:	4802      	ldr	r0, [pc, #8]	; (8001b58 <SPI1_IRQHandler+0x10>)
 8001b4e:	f004 fd2f 	bl	80065b0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	200002cc 	.word	0x200002cc

08001b5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
	return 1;
 8001b60:	2301      	movs	r3, #1
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <_kill>:

int _kill(int pid, int sig)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b76:	f005 faf1 	bl	800715c <__errno>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2216      	movs	r2, #22
 8001b7e:	601a      	str	r2, [r3, #0]
	return -1;
 8001b80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <_exit>:

void _exit (int status)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b94:	f04f 31ff 	mov.w	r1, #4294967295
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f7ff ffe7 	bl	8001b6c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b9e:	e7fe      	b.n	8001b9e <_exit+0x12>

08001ba0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bac:	2300      	movs	r3, #0
 8001bae:	617b      	str	r3, [r7, #20]
 8001bb0:	e00a      	b.n	8001bc8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001bb2:	f3af 8000 	nop.w
 8001bb6:	4601      	mov	r1, r0
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	1c5a      	adds	r2, r3, #1
 8001bbc:	60ba      	str	r2, [r7, #8]
 8001bbe:	b2ca      	uxtb	r2, r1
 8001bc0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	617b      	str	r3, [r7, #20]
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	dbf0      	blt.n	8001bb2 <_read+0x12>
	}

return len;
 8001bd0:	687b      	ldr	r3, [r7, #4]
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3718      	adds	r7, #24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b086      	sub	sp, #24
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	60f8      	str	r0, [r7, #12]
 8001be2:	60b9      	str	r1, [r7, #8]
 8001be4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be6:	2300      	movs	r3, #0
 8001be8:	617b      	str	r3, [r7, #20]
 8001bea:	e009      	b.n	8001c00 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	1c5a      	adds	r2, r3, #1
 8001bf0:	60ba      	str	r2, [r7, #8]
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	617b      	str	r3, [r7, #20]
 8001c00:	697a      	ldr	r2, [r7, #20]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	dbf1      	blt.n	8001bec <_write+0x12>
	}
	return len;
 8001c08:	687b      	ldr	r3, [r7, #4]
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3718      	adds	r7, #24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <_close>:

int _close(int file)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
	return -1;
 8001c1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
 8001c32:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c3a:	605a      	str	r2, [r3, #4]
	return 0;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <_isatty>:

int _isatty(int file)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b083      	sub	sp, #12
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
	return 1;
 8001c52:	2301      	movs	r3, #1
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
	return 0;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3714      	adds	r7, #20
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
	...

08001c7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c84:	4a14      	ldr	r2, [pc, #80]	; (8001cd8 <_sbrk+0x5c>)
 8001c86:	4b15      	ldr	r3, [pc, #84]	; (8001cdc <_sbrk+0x60>)
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c90:	4b13      	ldr	r3, [pc, #76]	; (8001ce0 <_sbrk+0x64>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d102      	bne.n	8001c9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c98:	4b11      	ldr	r3, [pc, #68]	; (8001ce0 <_sbrk+0x64>)
 8001c9a:	4a12      	ldr	r2, [pc, #72]	; (8001ce4 <_sbrk+0x68>)
 8001c9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c9e:	4b10      	ldr	r3, [pc, #64]	; (8001ce0 <_sbrk+0x64>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d207      	bcs.n	8001cbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cac:	f005 fa56 	bl	800715c <__errno>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	220c      	movs	r2, #12
 8001cb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cba:	e009      	b.n	8001cd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cbc:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <_sbrk+0x64>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cc2:	4b07      	ldr	r3, [pc, #28]	; (8001ce0 <_sbrk+0x64>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4413      	add	r3, r2
 8001cca:	4a05      	ldr	r2, [pc, #20]	; (8001ce0 <_sbrk+0x64>)
 8001ccc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cce:	68fb      	ldr	r3, [r7, #12]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3718      	adds	r7, #24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20018000 	.word	0x20018000
 8001cdc:	00000400 	.word	0x00000400
 8001ce0:	200003c0 	.word	0x200003c0
 8001ce4:	20000460 	.word	0x20000460

08001ce8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001cec:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <SystemInit+0x20>)
 8001cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cf2:	4a05      	ldr	r2, [pc, #20]	; (8001d08 <SystemInit+0x20>)
 8001cf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d10:	4b14      	ldr	r3, [pc, #80]	; (8001d64 <MX_USART2_UART_Init+0x58>)
 8001d12:	4a15      	ldr	r2, [pc, #84]	; (8001d68 <MX_USART2_UART_Init+0x5c>)
 8001d14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d16:	4b13      	ldr	r3, [pc, #76]	; (8001d64 <MX_USART2_UART_Init+0x58>)
 8001d18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d1e:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <MX_USART2_UART_Init+0x58>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d24:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <MX_USART2_UART_Init+0x58>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d2a:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <MX_USART2_UART_Init+0x58>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d30:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <MX_USART2_UART_Init+0x58>)
 8001d32:	220c      	movs	r2, #12
 8001d34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d36:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <MX_USART2_UART_Init+0x58>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d3c:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <MX_USART2_UART_Init+0x58>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d42:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <MX_USART2_UART_Init+0x58>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d48:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <MX_USART2_UART_Init+0x58>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d4e:	4805      	ldr	r0, [pc, #20]	; (8001d64 <MX_USART2_UART_Init+0x58>)
 8001d50:	f004 fd4d 	bl	80067ee <HAL_UART_Init>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001d5a:	f7ff fd7d 	bl	8001858 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	200003c4 	.word	0x200003c4
 8001d68:	40004400 	.word	0x40004400

08001d6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b0ac      	sub	sp, #176	; 0xb0
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d74:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d84:	f107 0314 	add.w	r3, r7, #20
 8001d88:	2288      	movs	r2, #136	; 0x88
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f005 fa0f 	bl	80071b0 <memset>
  if(uartHandle->Instance==USART2)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a21      	ldr	r2, [pc, #132]	; (8001e1c <HAL_UART_MspInit+0xb0>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d13b      	bne.n	8001e14 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001da0:	2300      	movs	r3, #0
 8001da2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	4618      	mov	r0, r3
 8001daa:	f003 fea1 	bl	8005af0 <HAL_RCCEx_PeriphCLKConfig>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001db4:	f7ff fd50 	bl	8001858 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001db8:	4b19      	ldr	r3, [pc, #100]	; (8001e20 <HAL_UART_MspInit+0xb4>)
 8001dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dbc:	4a18      	ldr	r2, [pc, #96]	; (8001e20 <HAL_UART_MspInit+0xb4>)
 8001dbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dc2:	6593      	str	r3, [r2, #88]	; 0x58
 8001dc4:	4b16      	ldr	r3, [pc, #88]	; (8001e20 <HAL_UART_MspInit+0xb4>)
 8001dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd0:	4b13      	ldr	r3, [pc, #76]	; (8001e20 <HAL_UART_MspInit+0xb4>)
 8001dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd4:	4a12      	ldr	r2, [pc, #72]	; (8001e20 <HAL_UART_MspInit+0xb4>)
 8001dd6:	f043 0301 	orr.w	r3, r3, #1
 8001dda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ddc:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <HAL_UART_MspInit+0xb4>)
 8001dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001de8:	230c      	movs	r3, #12
 8001dea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dee:	2302      	movs	r3, #2
 8001df0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e00:	2307      	movs	r3, #7
 8001e02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e06:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e10:	f000 fc2a 	bl	8002668 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e14:	bf00      	nop
 8001e16:	37b0      	adds	r7, #176	; 0xb0
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40004400 	.word	0x40004400
 8001e20:	40021000 	.word	0x40021000

08001e24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e5c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e28:	f7ff ff5e 	bl	8001ce8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e2c:	480c      	ldr	r0, [pc, #48]	; (8001e60 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e2e:	490d      	ldr	r1, [pc, #52]	; (8001e64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e30:	4a0d      	ldr	r2, [pc, #52]	; (8001e68 <LoopForever+0xe>)
  movs r3, #0
 8001e32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e34:	e002      	b.n	8001e3c <LoopCopyDataInit>

08001e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e3a:	3304      	adds	r3, #4

08001e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e40:	d3f9      	bcc.n	8001e36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e42:	4a0a      	ldr	r2, [pc, #40]	; (8001e6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e44:	4c0a      	ldr	r4, [pc, #40]	; (8001e70 <LoopForever+0x16>)
  movs r3, #0
 8001e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e48:	e001      	b.n	8001e4e <LoopFillZerobss>

08001e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e4c:	3204      	adds	r2, #4

08001e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e50:	d3fb      	bcc.n	8001e4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e52:	f005 f989 	bl	8007168 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e56:	f7ff fc99 	bl	800178c <main>

08001e5a <LoopForever>:

LoopForever:
    b LoopForever
 8001e5a:	e7fe      	b.n	8001e5a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e5c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e64:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001e68:	0800a03c 	.word	0x0800a03c
  ldr r2, =_sbss
 8001e6c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001e70:	2000045c 	.word	0x2000045c

08001e74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e74:	e7fe      	b.n	8001e74 <ADC1_2_IRQHandler>
	...

08001e78 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e82:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <HAL_Init+0x3c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a0b      	ldr	r2, [pc, #44]	; (8001eb4 <HAL_Init+0x3c>)
 8001e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e8c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e8e:	2003      	movs	r0, #3
 8001e90:	f000 f962 	bl	8002158 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e94:	2000      	movs	r0, #0
 8001e96:	f000 f80f 	bl	8001eb8 <HAL_InitTick>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d002      	beq.n	8001ea6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	71fb      	strb	r3, [r7, #7]
 8001ea4:	e001      	b.n	8001eaa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ea6:	f7ff fdd1 	bl	8001a4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001eaa:	79fb      	ldrb	r3, [r7, #7]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40022000 	.word	0x40022000

08001eb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ec4:	4b17      	ldr	r3, [pc, #92]	; (8001f24 <HAL_InitTick+0x6c>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d023      	beq.n	8001f14 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ecc:	4b16      	ldr	r3, [pc, #88]	; (8001f28 <HAL_InitTick+0x70>)
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	4b14      	ldr	r3, [pc, #80]	; (8001f24 <HAL_InitTick+0x6c>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f000 f96d 	bl	80021c2 <HAL_SYSTICK_Config>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10f      	bne.n	8001f0e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b0f      	cmp	r3, #15
 8001ef2:	d809      	bhi.n	8001f08 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8001efc:	f000 f937 	bl	800216e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f00:	4a0a      	ldr	r2, [pc, #40]	; (8001f2c <HAL_InitTick+0x74>)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6013      	str	r3, [r2, #0]
 8001f06:	e007      	b.n	8001f18 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	73fb      	strb	r3, [r7, #15]
 8001f0c:	e004      	b.n	8001f18 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	73fb      	strb	r3, [r7, #15]
 8001f12:	e001      	b.n	8001f18 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	20000008 	.word	0x20000008
 8001f28:	20000000 	.word	0x20000000
 8001f2c:	20000004 	.word	0x20000004

08001f30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f34:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <HAL_IncTick+0x20>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <HAL_IncTick+0x24>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4413      	add	r3, r2
 8001f40:	4a04      	ldr	r2, [pc, #16]	; (8001f54 <HAL_IncTick+0x24>)
 8001f42:	6013      	str	r3, [r2, #0]
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	20000008 	.word	0x20000008
 8001f54:	20000448 	.word	0x20000448

08001f58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f5c:	4b03      	ldr	r3, [pc, #12]	; (8001f6c <HAL_GetTick+0x14>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	20000448 	.word	0x20000448

08001f70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f78:	f7ff ffee 	bl	8001f58 <HAL_GetTick>
 8001f7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f88:	d005      	beq.n	8001f96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f8a:	4b0a      	ldr	r3, [pc, #40]	; (8001fb4 <HAL_Delay+0x44>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4413      	add	r3, r2
 8001f94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f96:	bf00      	nop
 8001f98:	f7ff ffde 	bl	8001f58 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d8f7      	bhi.n	8001f98 <HAL_Delay+0x28>
  {
  }
}
 8001fa8:	bf00      	nop
 8001faa:	bf00      	nop
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000008 	.word	0x20000008

08001fb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <__NVIC_SetPriorityGrouping+0x44>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fe0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fea:	4a04      	ldr	r2, [pc, #16]	; (8001ffc <__NVIC_SetPriorityGrouping+0x44>)
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	60d3      	str	r3, [r2, #12]
}
 8001ff0:	bf00      	nop
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002004:	4b04      	ldr	r3, [pc, #16]	; (8002018 <__NVIC_GetPriorityGrouping+0x18>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	0a1b      	lsrs	r3, r3, #8
 800200a:	f003 0307 	and.w	r3, r3, #7
}
 800200e:	4618      	mov	r0, r3
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202a:	2b00      	cmp	r3, #0
 800202c:	db0b      	blt.n	8002046 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800202e:	79fb      	ldrb	r3, [r7, #7]
 8002030:	f003 021f 	and.w	r2, r3, #31
 8002034:	4907      	ldr	r1, [pc, #28]	; (8002054 <__NVIC_EnableIRQ+0x38>)
 8002036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203a:	095b      	lsrs	r3, r3, #5
 800203c:	2001      	movs	r0, #1
 800203e:	fa00 f202 	lsl.w	r2, r0, r2
 8002042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	e000e100 	.word	0xe000e100

08002058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	6039      	str	r1, [r7, #0]
 8002062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002068:	2b00      	cmp	r3, #0
 800206a:	db0a      	blt.n	8002082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	b2da      	uxtb	r2, r3
 8002070:	490c      	ldr	r1, [pc, #48]	; (80020a4 <__NVIC_SetPriority+0x4c>)
 8002072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002076:	0112      	lsls	r2, r2, #4
 8002078:	b2d2      	uxtb	r2, r2
 800207a:	440b      	add	r3, r1
 800207c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002080:	e00a      	b.n	8002098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	b2da      	uxtb	r2, r3
 8002086:	4908      	ldr	r1, [pc, #32]	; (80020a8 <__NVIC_SetPriority+0x50>)
 8002088:	79fb      	ldrb	r3, [r7, #7]
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	3b04      	subs	r3, #4
 8002090:	0112      	lsls	r2, r2, #4
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	440b      	add	r3, r1
 8002096:	761a      	strb	r2, [r3, #24]
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	e000e100 	.word	0xe000e100
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b089      	sub	sp, #36	; 0x24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	f1c3 0307 	rsb	r3, r3, #7
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	bf28      	it	cs
 80020ca:	2304      	movcs	r3, #4
 80020cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	3304      	adds	r3, #4
 80020d2:	2b06      	cmp	r3, #6
 80020d4:	d902      	bls.n	80020dc <NVIC_EncodePriority+0x30>
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	3b03      	subs	r3, #3
 80020da:	e000      	b.n	80020de <NVIC_EncodePriority+0x32>
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e0:	f04f 32ff 	mov.w	r2, #4294967295
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43da      	mvns	r2, r3
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	401a      	ands	r2, r3
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020f4:	f04f 31ff 	mov.w	r1, #4294967295
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	fa01 f303 	lsl.w	r3, r1, r3
 80020fe:	43d9      	mvns	r1, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002104:	4313      	orrs	r3, r2
         );
}
 8002106:	4618      	mov	r0, r3
 8002108:	3724      	adds	r7, #36	; 0x24
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
	...

08002114 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3b01      	subs	r3, #1
 8002120:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002124:	d301      	bcc.n	800212a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002126:	2301      	movs	r3, #1
 8002128:	e00f      	b.n	800214a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800212a:	4a0a      	ldr	r2, [pc, #40]	; (8002154 <SysTick_Config+0x40>)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3b01      	subs	r3, #1
 8002130:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002132:	210f      	movs	r1, #15
 8002134:	f04f 30ff 	mov.w	r0, #4294967295
 8002138:	f7ff ff8e 	bl	8002058 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800213c:	4b05      	ldr	r3, [pc, #20]	; (8002154 <SysTick_Config+0x40>)
 800213e:	2200      	movs	r2, #0
 8002140:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002142:	4b04      	ldr	r3, [pc, #16]	; (8002154 <SysTick_Config+0x40>)
 8002144:	2207      	movs	r2, #7
 8002146:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	e000e010 	.word	0xe000e010

08002158 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f7ff ff29 	bl	8001fb8 <__NVIC_SetPriorityGrouping>
}
 8002166:	bf00      	nop
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b086      	sub	sp, #24
 8002172:	af00      	add	r7, sp, #0
 8002174:	4603      	mov	r3, r0
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	607a      	str	r2, [r7, #4]
 800217a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800217c:	2300      	movs	r3, #0
 800217e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002180:	f7ff ff3e 	bl	8002000 <__NVIC_GetPriorityGrouping>
 8002184:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	68b9      	ldr	r1, [r7, #8]
 800218a:	6978      	ldr	r0, [r7, #20]
 800218c:	f7ff ff8e 	bl	80020ac <NVIC_EncodePriority>
 8002190:	4602      	mov	r2, r0
 8002192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002196:	4611      	mov	r1, r2
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff ff5d 	bl	8002058 <__NVIC_SetPriority>
}
 800219e:	bf00      	nop
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b082      	sub	sp, #8
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	4603      	mov	r3, r0
 80021ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff ff31 	bl	800201c <__NVIC_EnableIRQ>
}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b082      	sub	sp, #8
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7ff ffa2 	bl	8002114 <SysTick_Config>
 80021d0:	4603      	mov	r3, r0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
	...

080021dc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e098      	b.n	8002320 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	461a      	mov	r2, r3
 80021f4:	4b4d      	ldr	r3, [pc, #308]	; (800232c <HAL_DMA_Init+0x150>)
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d80f      	bhi.n	800221a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	461a      	mov	r2, r3
 8002200:	4b4b      	ldr	r3, [pc, #300]	; (8002330 <HAL_DMA_Init+0x154>)
 8002202:	4413      	add	r3, r2
 8002204:	4a4b      	ldr	r2, [pc, #300]	; (8002334 <HAL_DMA_Init+0x158>)
 8002206:	fba2 2303 	umull	r2, r3, r2, r3
 800220a:	091b      	lsrs	r3, r3, #4
 800220c:	009a      	lsls	r2, r3, #2
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a48      	ldr	r2, [pc, #288]	; (8002338 <HAL_DMA_Init+0x15c>)
 8002216:	641a      	str	r2, [r3, #64]	; 0x40
 8002218:	e00e      	b.n	8002238 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	461a      	mov	r2, r3
 8002220:	4b46      	ldr	r3, [pc, #280]	; (800233c <HAL_DMA_Init+0x160>)
 8002222:	4413      	add	r3, r2
 8002224:	4a43      	ldr	r2, [pc, #268]	; (8002334 <HAL_DMA_Init+0x158>)
 8002226:	fba2 2303 	umull	r2, r3, r2, r3
 800222a:	091b      	lsrs	r3, r3, #4
 800222c:	009a      	lsls	r2, r3, #2
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a42      	ldr	r2, [pc, #264]	; (8002340 <HAL_DMA_Init+0x164>)
 8002236:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2202      	movs	r2, #2
 800223c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800224e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002252:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800225c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002268:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002274:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	4313      	orrs	r3, r2
 8002280:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002292:	d039      	beq.n	8002308 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	4a27      	ldr	r2, [pc, #156]	; (8002338 <HAL_DMA_Init+0x15c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d11a      	bne.n	80022d4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800229e:	4b29      	ldr	r3, [pc, #164]	; (8002344 <HAL_DMA_Init+0x168>)
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a6:	f003 031c 	and.w	r3, r3, #28
 80022aa:	210f      	movs	r1, #15
 80022ac:	fa01 f303 	lsl.w	r3, r1, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	4924      	ldr	r1, [pc, #144]	; (8002344 <HAL_DMA_Init+0x168>)
 80022b4:	4013      	ands	r3, r2
 80022b6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80022b8:	4b22      	ldr	r3, [pc, #136]	; (8002344 <HAL_DMA_Init+0x168>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6859      	ldr	r1, [r3, #4]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c4:	f003 031c 	and.w	r3, r3, #28
 80022c8:	fa01 f303 	lsl.w	r3, r1, r3
 80022cc:	491d      	ldr	r1, [pc, #116]	; (8002344 <HAL_DMA_Init+0x168>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	600b      	str	r3, [r1, #0]
 80022d2:	e019      	b.n	8002308 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80022d4:	4b1c      	ldr	r3, [pc, #112]	; (8002348 <HAL_DMA_Init+0x16c>)
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022dc:	f003 031c 	and.w	r3, r3, #28
 80022e0:	210f      	movs	r1, #15
 80022e2:	fa01 f303 	lsl.w	r3, r1, r3
 80022e6:	43db      	mvns	r3, r3
 80022e8:	4917      	ldr	r1, [pc, #92]	; (8002348 <HAL_DMA_Init+0x16c>)
 80022ea:	4013      	ands	r3, r2
 80022ec:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80022ee:	4b16      	ldr	r3, [pc, #88]	; (8002348 <HAL_DMA_Init+0x16c>)
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6859      	ldr	r1, [r3, #4]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fa:	f003 031c 	and.w	r3, r3, #28
 80022fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002302:	4911      	ldr	r1, [pc, #68]	; (8002348 <HAL_DMA_Init+0x16c>)
 8002304:	4313      	orrs	r3, r2
 8002306:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2201      	movs	r2, #1
 8002312:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	40020407 	.word	0x40020407
 8002330:	bffdfff8 	.word	0xbffdfff8
 8002334:	cccccccd 	.word	0xcccccccd
 8002338:	40020000 	.word	0x40020000
 800233c:	bffdfbf8 	.word	0xbffdfbf8
 8002340:	40020400 	.word	0x40020400
 8002344:	400200a8 	.word	0x400200a8
 8002348:	400204a8 	.word	0x400204a8

0800234c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
 8002358:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800235a:	2300      	movs	r3, #0
 800235c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002364:	2b01      	cmp	r3, #1
 8002366:	d101      	bne.n	800236c <HAL_DMA_Start_IT+0x20>
 8002368:	2302      	movs	r3, #2
 800236a:	e04b      	b.n	8002404 <HAL_DMA_Start_IT+0xb8>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b01      	cmp	r3, #1
 800237e:	d13a      	bne.n	80023f6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2202      	movs	r2, #2
 8002384:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 0201 	bic.w	r2, r2, #1
 800239c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	68b9      	ldr	r1, [r7, #8]
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f000 f92f 	bl	8002608 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d008      	beq.n	80023c4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f042 020e 	orr.w	r2, r2, #14
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	e00f      	b.n	80023e4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 0204 	bic.w	r2, r2, #4
 80023d2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f042 020a 	orr.w	r2, r2, #10
 80023e2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f042 0201 	orr.w	r2, r2, #1
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	e005      	b.n	8002402 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80023fe:	2302      	movs	r3, #2
 8002400:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002402:	7dfb      	ldrb	r3, [r7, #23]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002414:	2300      	movs	r3, #0
 8002416:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d005      	beq.n	8002430 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2204      	movs	r2, #4
 8002428:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	73fb      	strb	r3, [r7, #15]
 800242e:	e029      	b.n	8002484 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 020e 	bic.w	r2, r2, #14
 800243e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f022 0201 	bic.w	r2, r2, #1
 800244e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002454:	f003 021c 	and.w	r2, r3, #28
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245c:	2101      	movs	r1, #1
 800245e:	fa01 f202 	lsl.w	r2, r1, r2
 8002462:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002478:	2b00      	cmp	r3, #0
 800247a:	d003      	beq.n	8002484 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	4798      	blx	r3
    }
  }
  return status;
 8002484:	7bfb      	ldrb	r3, [r7, #15]
}
 8002486:	4618      	mov	r0, r3
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b084      	sub	sp, #16
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024aa:	f003 031c 	and.w	r3, r3, #28
 80024ae:	2204      	movs	r2, #4
 80024b0:	409a      	lsls	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	4013      	ands	r3, r2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d026      	beq.n	8002508 <HAL_DMA_IRQHandler+0x7a>
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d021      	beq.n	8002508 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0320 	and.w	r3, r3, #32
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d107      	bne.n	80024e2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 0204 	bic.w	r2, r2, #4
 80024e0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e6:	f003 021c 	and.w	r2, r3, #28
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	2104      	movs	r1, #4
 80024f0:	fa01 f202 	lsl.w	r2, r1, r2
 80024f4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d071      	beq.n	80025e2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002506:	e06c      	b.n	80025e2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250c:	f003 031c 	and.w	r3, r3, #28
 8002510:	2202      	movs	r2, #2
 8002512:	409a      	lsls	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4013      	ands	r3, r2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d02e      	beq.n	800257a <HAL_DMA_IRQHandler+0xec>
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d029      	beq.n	800257a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0320 	and.w	r3, r3, #32
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10b      	bne.n	800254c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 020a 	bic.w	r2, r2, #10
 8002542:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002550:	f003 021c 	and.w	r2, r3, #28
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002558:	2102      	movs	r1, #2
 800255a:	fa01 f202 	lsl.w	r2, r1, r2
 800255e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256c:	2b00      	cmp	r3, #0
 800256e:	d038      	beq.n	80025e2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002578:	e033      	b.n	80025e2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257e:	f003 031c 	and.w	r3, r3, #28
 8002582:	2208      	movs	r2, #8
 8002584:	409a      	lsls	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	4013      	ands	r3, r2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d02a      	beq.n	80025e4 <HAL_DMA_IRQHandler+0x156>
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	f003 0308 	and.w	r3, r3, #8
 8002594:	2b00      	cmp	r3, #0
 8002596:	d025      	beq.n	80025e4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 020e 	bic.w	r2, r2, #14
 80025a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ac:	f003 021c 	and.w	r2, r3, #28
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b4:	2101      	movs	r1, #1
 80025b6:	fa01 f202 	lsl.w	r2, r1, r2
 80025ba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d004      	beq.n	80025e4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80025e2:	bf00      	nop
 80025e4:	bf00      	nop
}
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80025fa:	b2db      	uxtb	r3, r3
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
 8002614:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261a:	f003 021c 	and.w	r2, r3, #28
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	2101      	movs	r1, #1
 8002624:	fa01 f202 	lsl.w	r2, r1, r2
 8002628:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	2b10      	cmp	r3, #16
 8002638:	d108      	bne.n	800264c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68ba      	ldr	r2, [r7, #8]
 8002648:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800264a:	e007      	b.n	800265c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68ba      	ldr	r2, [r7, #8]
 8002652:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	60da      	str	r2, [r3, #12]
}
 800265c:	bf00      	nop
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002668:	b480      	push	{r7}
 800266a:	b087      	sub	sp, #28
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002672:	2300      	movs	r3, #0
 8002674:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002676:	e17f      	b.n	8002978 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	2101      	movs	r1, #1
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	fa01 f303 	lsl.w	r3, r1, r3
 8002684:	4013      	ands	r3, r2
 8002686:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2b00      	cmp	r3, #0
 800268c:	f000 8171 	beq.w	8002972 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f003 0303 	and.w	r3, r3, #3
 8002698:	2b01      	cmp	r3, #1
 800269a:	d005      	beq.n	80026a8 <HAL_GPIO_Init+0x40>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f003 0303 	and.w	r3, r3, #3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d130      	bne.n	800270a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	2203      	movs	r2, #3
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	43db      	mvns	r3, r3
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	4013      	ands	r3, r2
 80026be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	68da      	ldr	r2, [r3, #12]
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026de:	2201      	movs	r2, #1
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	43db      	mvns	r3, r3
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	4013      	ands	r3, r2
 80026ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	091b      	lsrs	r3, r3, #4
 80026f4:	f003 0201 	and.w	r2, r3, #1
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	4313      	orrs	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f003 0303 	and.w	r3, r3, #3
 8002712:	2b03      	cmp	r3, #3
 8002714:	d118      	bne.n	8002748 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800271c:	2201      	movs	r2, #1
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	43db      	mvns	r3, r3
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	4013      	ands	r3, r2
 800272a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	08db      	lsrs	r3, r3, #3
 8002732:	f003 0201 	and.w	r2, r3, #1
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	4313      	orrs	r3, r2
 8002740:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f003 0303 	and.w	r3, r3, #3
 8002750:	2b03      	cmp	r3, #3
 8002752:	d017      	beq.n	8002784 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	2203      	movs	r2, #3
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43db      	mvns	r3, r3
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	4013      	ands	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	4313      	orrs	r3, r2
 800277c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 0303 	and.w	r3, r3, #3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d123      	bne.n	80027d8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	08da      	lsrs	r2, r3, #3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3208      	adds	r2, #8
 8002798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800279c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	220f      	movs	r2, #15
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	43db      	mvns	r3, r3
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	4013      	ands	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	691a      	ldr	r2, [r3, #16]
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	08da      	lsrs	r2, r3, #3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	3208      	adds	r2, #8
 80027d2:	6939      	ldr	r1, [r7, #16]
 80027d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	2203      	movs	r2, #3
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	43db      	mvns	r3, r3
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	4013      	ands	r3, r2
 80027ee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f003 0203 	and.w	r2, r3, #3
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	4313      	orrs	r3, r2
 8002804:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002814:	2b00      	cmp	r3, #0
 8002816:	f000 80ac 	beq.w	8002972 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800281a:	4b5f      	ldr	r3, [pc, #380]	; (8002998 <HAL_GPIO_Init+0x330>)
 800281c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800281e:	4a5e      	ldr	r2, [pc, #376]	; (8002998 <HAL_GPIO_Init+0x330>)
 8002820:	f043 0301 	orr.w	r3, r3, #1
 8002824:	6613      	str	r3, [r2, #96]	; 0x60
 8002826:	4b5c      	ldr	r3, [pc, #368]	; (8002998 <HAL_GPIO_Init+0x330>)
 8002828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	60bb      	str	r3, [r7, #8]
 8002830:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002832:	4a5a      	ldr	r2, [pc, #360]	; (800299c <HAL_GPIO_Init+0x334>)
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	089b      	lsrs	r3, r3, #2
 8002838:	3302      	adds	r3, #2
 800283a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800283e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	220f      	movs	r2, #15
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43db      	mvns	r3, r3
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	4013      	ands	r3, r2
 8002854:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800285c:	d025      	beq.n	80028aa <HAL_GPIO_Init+0x242>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a4f      	ldr	r2, [pc, #316]	; (80029a0 <HAL_GPIO_Init+0x338>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d01f      	beq.n	80028a6 <HAL_GPIO_Init+0x23e>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a4e      	ldr	r2, [pc, #312]	; (80029a4 <HAL_GPIO_Init+0x33c>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d019      	beq.n	80028a2 <HAL_GPIO_Init+0x23a>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a4d      	ldr	r2, [pc, #308]	; (80029a8 <HAL_GPIO_Init+0x340>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d013      	beq.n	800289e <HAL_GPIO_Init+0x236>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a4c      	ldr	r2, [pc, #304]	; (80029ac <HAL_GPIO_Init+0x344>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d00d      	beq.n	800289a <HAL_GPIO_Init+0x232>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a4b      	ldr	r2, [pc, #300]	; (80029b0 <HAL_GPIO_Init+0x348>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d007      	beq.n	8002896 <HAL_GPIO_Init+0x22e>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a4a      	ldr	r2, [pc, #296]	; (80029b4 <HAL_GPIO_Init+0x34c>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d101      	bne.n	8002892 <HAL_GPIO_Init+0x22a>
 800288e:	2306      	movs	r3, #6
 8002890:	e00c      	b.n	80028ac <HAL_GPIO_Init+0x244>
 8002892:	2307      	movs	r3, #7
 8002894:	e00a      	b.n	80028ac <HAL_GPIO_Init+0x244>
 8002896:	2305      	movs	r3, #5
 8002898:	e008      	b.n	80028ac <HAL_GPIO_Init+0x244>
 800289a:	2304      	movs	r3, #4
 800289c:	e006      	b.n	80028ac <HAL_GPIO_Init+0x244>
 800289e:	2303      	movs	r3, #3
 80028a0:	e004      	b.n	80028ac <HAL_GPIO_Init+0x244>
 80028a2:	2302      	movs	r3, #2
 80028a4:	e002      	b.n	80028ac <HAL_GPIO_Init+0x244>
 80028a6:	2301      	movs	r3, #1
 80028a8:	e000      	b.n	80028ac <HAL_GPIO_Init+0x244>
 80028aa:	2300      	movs	r3, #0
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	f002 0203 	and.w	r2, r2, #3
 80028b2:	0092      	lsls	r2, r2, #2
 80028b4:	4093      	lsls	r3, r2
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028bc:	4937      	ldr	r1, [pc, #220]	; (800299c <HAL_GPIO_Init+0x334>)
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	089b      	lsrs	r3, r3, #2
 80028c2:	3302      	adds	r3, #2
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028ca:	4b3b      	ldr	r3, [pc, #236]	; (80029b8 <HAL_GPIO_Init+0x350>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	43db      	mvns	r3, r3
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	4013      	ands	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80028ee:	4a32      	ldr	r2, [pc, #200]	; (80029b8 <HAL_GPIO_Init+0x350>)
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80028f4:	4b30      	ldr	r3, [pc, #192]	; (80029b8 <HAL_GPIO_Init+0x350>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	43db      	mvns	r3, r3
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	4013      	ands	r3, r2
 8002902:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d003      	beq.n	8002918 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	4313      	orrs	r3, r2
 8002916:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002918:	4a27      	ldr	r2, [pc, #156]	; (80029b8 <HAL_GPIO_Init+0x350>)
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800291e:	4b26      	ldr	r3, [pc, #152]	; (80029b8 <HAL_GPIO_Init+0x350>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	43db      	mvns	r3, r3
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	4013      	ands	r3, r2
 800292c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4313      	orrs	r3, r2
 8002940:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002942:	4a1d      	ldr	r2, [pc, #116]	; (80029b8 <HAL_GPIO_Init+0x350>)
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002948:	4b1b      	ldr	r3, [pc, #108]	; (80029b8 <HAL_GPIO_Init+0x350>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	43db      	mvns	r3, r3
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	4013      	ands	r3, r2
 8002956:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d003      	beq.n	800296c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	4313      	orrs	r3, r2
 800296a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800296c:	4a12      	ldr	r2, [pc, #72]	; (80029b8 <HAL_GPIO_Init+0x350>)
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	3301      	adds	r3, #1
 8002976:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	fa22 f303 	lsr.w	r3, r2, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	f47f ae78 	bne.w	8002678 <HAL_GPIO_Init+0x10>
  }
}
 8002988:	bf00      	nop
 800298a:	bf00      	nop
 800298c:	371c      	adds	r7, #28
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	40021000 	.word	0x40021000
 800299c:	40010000 	.word	0x40010000
 80029a0:	48000400 	.word	0x48000400
 80029a4:	48000800 	.word	0x48000800
 80029a8:	48000c00 	.word	0x48000c00
 80029ac:	48001000 	.word	0x48001000
 80029b0:	48001400 	.word	0x48001400
 80029b4:	48001800 	.word	0x48001800
 80029b8:	40010400 	.word	0x40010400

080029bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	460b      	mov	r3, r1
 80029c6:	807b      	strh	r3, [r7, #2]
 80029c8:	4613      	mov	r3, r2
 80029ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029cc:	787b      	ldrb	r3, [r7, #1]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029d2:	887a      	ldrh	r2, [r7, #2]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029d8:	e002      	b.n	80029e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029da:	887a      	ldrh	r2, [r7, #2]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80029f6:	4b08      	ldr	r3, [pc, #32]	; (8002a18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029f8:	695a      	ldr	r2, [r3, #20]
 80029fa:	88fb      	ldrh	r3, [r7, #6]
 80029fc:	4013      	ands	r3, r2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d006      	beq.n	8002a10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a02:	4a05      	ldr	r2, [pc, #20]	; (8002a18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a04:	88fb      	ldrh	r3, [r7, #6]
 8002a06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a08:	88fb      	ldrh	r3, [r7, #6]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fe fdce 	bl	80015ac <HAL_GPIO_EXTI_Callback>
  }
}
 8002a10:	bf00      	nop
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40010400 	.word	0x40010400

08002a1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e081      	b.n	8002b32 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d106      	bne.n	8002a48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7fe fe06 	bl	8001654 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2224      	movs	r2, #36	; 0x24
 8002a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 0201 	bic.w	r2, r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a6c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a7c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d107      	bne.n	8002a96 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689a      	ldr	r2, [r3, #8]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a92:	609a      	str	r2, [r3, #8]
 8002a94:	e006      	b.n	8002aa4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002aa2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d104      	bne.n	8002ab6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ab4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6812      	ldr	r2, [r2, #0]
 8002ac0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ac4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ac8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68da      	ldr	r2, [r3, #12]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ad8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	691a      	ldr	r2, [r3, #16]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	430a      	orrs	r2, r1
 8002af2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	69d9      	ldr	r1, [r3, #28]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a1a      	ldr	r2, [r3, #32]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 0201 	orr.w	r2, r2, #1
 8002b12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
	...

08002b3c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b088      	sub	sp, #32
 8002b40:	af02      	add	r7, sp, #8
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	4608      	mov	r0, r1
 8002b46:	4611      	mov	r1, r2
 8002b48:	461a      	mov	r2, r3
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	817b      	strh	r3, [r7, #10]
 8002b4e:	460b      	mov	r3, r1
 8002b50:	813b      	strh	r3, [r7, #8]
 8002b52:	4613      	mov	r3, r2
 8002b54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b20      	cmp	r3, #32
 8002b60:	f040 80f9 	bne.w	8002d56 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b64:	6a3b      	ldr	r3, [r7, #32]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d002      	beq.n	8002b70 <HAL_I2C_Mem_Write+0x34>
 8002b6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d105      	bne.n	8002b7c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b76:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e0ed      	b.n	8002d58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d101      	bne.n	8002b8a <HAL_I2C_Mem_Write+0x4e>
 8002b86:	2302      	movs	r3, #2
 8002b88:	e0e6      	b.n	8002d58 <HAL_I2C_Mem_Write+0x21c>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b92:	f7ff f9e1 	bl	8001f58 <HAL_GetTick>
 8002b96:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	9300      	str	r3, [sp, #0]
 8002b9c:	2319      	movs	r3, #25
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f001 fde4 	bl	8004772 <I2C_WaitOnFlagUntilTimeout>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e0d1      	b.n	8002d58 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2221      	movs	r2, #33	; 0x21
 8002bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2240      	movs	r2, #64	; 0x40
 8002bc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6a3a      	ldr	r2, [r7, #32]
 8002bce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bdc:	88f8      	ldrh	r0, [r7, #6]
 8002bde:	893a      	ldrh	r2, [r7, #8]
 8002be0:	8979      	ldrh	r1, [r7, #10]
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	9301      	str	r3, [sp, #4]
 8002be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	4603      	mov	r3, r0
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f001 f833 	bl	8003c58 <I2C_RequestMemoryWrite>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d005      	beq.n	8002c04 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e0a9      	b.n	8002d58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	2bff      	cmp	r3, #255	; 0xff
 8002c0c:	d90e      	bls.n	8002c2c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	22ff      	movs	r2, #255	; 0xff
 8002c12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	8979      	ldrh	r1, [r7, #10]
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	9300      	str	r3, [sp, #0]
 8002c20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f001 ff4d 	bl	8004ac4 <I2C_TransferConfig>
 8002c2a:	e00f      	b.n	8002c4c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	8979      	ldrh	r1, [r7, #10]
 8002c3e:	2300      	movs	r3, #0
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f001 ff3c 	bl	8004ac4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f001 fdce 	bl	80047f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e07b      	b.n	8002d58 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c64:	781a      	ldrb	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c70:	1c5a      	adds	r2, r3, #1
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d034      	beq.n	8002d04 <HAL_I2C_Mem_Write+0x1c8>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d130      	bne.n	8002d04 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca8:	2200      	movs	r2, #0
 8002caa:	2180      	movs	r1, #128	; 0x80
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f001 fd60 	bl	8004772 <I2C_WaitOnFlagUntilTimeout>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e04d      	b.n	8002d58 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	2bff      	cmp	r3, #255	; 0xff
 8002cc4:	d90e      	bls.n	8002ce4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	22ff      	movs	r2, #255	; 0xff
 8002cca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	8979      	ldrh	r1, [r7, #10]
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f001 fef1 	bl	8004ac4 <I2C_TransferConfig>
 8002ce2:	e00f      	b.n	8002d04 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	8979      	ldrh	r1, [r7, #10]
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	9300      	str	r3, [sp, #0]
 8002cfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f001 fee0 	bl	8004ac4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d19e      	bne.n	8002c4c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f001 fdad 	bl	8004872 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e01a      	b.n	8002d58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2220      	movs	r2, #32
 8002d28:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6859      	ldr	r1, [r3, #4]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	4b0a      	ldr	r3, [pc, #40]	; (8002d60 <HAL_I2C_Mem_Write+0x224>)
 8002d36:	400b      	ands	r3, r1
 8002d38:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d52:	2300      	movs	r3, #0
 8002d54:	e000      	b.n	8002d58 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002d56:	2302      	movs	r3, #2
  }
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3718      	adds	r7, #24
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	fe00e800 	.word	0xfe00e800

08002d64 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b088      	sub	sp, #32
 8002d68:	af02      	add	r7, sp, #8
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	4608      	mov	r0, r1
 8002d6e:	4611      	mov	r1, r2
 8002d70:	461a      	mov	r2, r3
 8002d72:	4603      	mov	r3, r0
 8002d74:	817b      	strh	r3, [r7, #10]
 8002d76:	460b      	mov	r3, r1
 8002d78:	813b      	strh	r3, [r7, #8]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b20      	cmp	r3, #32
 8002d88:	f040 80fd 	bne.w	8002f86 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d002      	beq.n	8002d98 <HAL_I2C_Mem_Read+0x34>
 8002d92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d105      	bne.n	8002da4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d9e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e0f1      	b.n	8002f88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d101      	bne.n	8002db2 <HAL_I2C_Mem_Read+0x4e>
 8002dae:	2302      	movs	r3, #2
 8002db0:	e0ea      	b.n	8002f88 <HAL_I2C_Mem_Read+0x224>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002dba:	f7ff f8cd 	bl	8001f58 <HAL_GetTick>
 8002dbe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	2319      	movs	r3, #25
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f001 fcd0 	bl	8004772 <I2C_WaitOnFlagUntilTimeout>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e0d5      	b.n	8002f88 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2222      	movs	r2, #34	; 0x22
 8002de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2240      	movs	r2, #64	; 0x40
 8002de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6a3a      	ldr	r2, [r7, #32]
 8002df6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002dfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e04:	88f8      	ldrh	r0, [r7, #6]
 8002e06:	893a      	ldrh	r2, [r7, #8]
 8002e08:	8979      	ldrh	r1, [r7, #10]
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	9301      	str	r3, [sp, #4]
 8002e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	4603      	mov	r3, r0
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f000 ff73 	bl	8003d00 <I2C_RequestMemoryRead>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d005      	beq.n	8002e2c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e0ad      	b.n	8002f88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	2bff      	cmp	r3, #255	; 0xff
 8002e34:	d90e      	bls.n	8002e54 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	22ff      	movs	r2, #255	; 0xff
 8002e3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e40:	b2da      	uxtb	r2, r3
 8002e42:	8979      	ldrh	r1, [r7, #10]
 8002e44:	4b52      	ldr	r3, [pc, #328]	; (8002f90 <HAL_I2C_Mem_Read+0x22c>)
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f001 fe39 	bl	8004ac4 <I2C_TransferConfig>
 8002e52:	e00f      	b.n	8002e74 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e62:	b2da      	uxtb	r2, r3
 8002e64:	8979      	ldrh	r1, [r7, #10]
 8002e66:	4b4a      	ldr	r3, [pc, #296]	; (8002f90 <HAL_I2C_Mem_Read+0x22c>)
 8002e68:	9300      	str	r3, [sp, #0]
 8002e6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f001 fe28 	bl	8004ac4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	9300      	str	r3, [sp, #0]
 8002e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	2104      	movs	r1, #4
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f001 fc77 	bl	8004772 <I2C_WaitOnFlagUntilTimeout>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e07c      	b.n	8002f88 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	b2d2      	uxtb	r2, r2
 8002e9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	1c5a      	adds	r2, r3, #1
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d034      	beq.n	8002f34 <HAL_I2C_Mem_Read+0x1d0>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d130      	bne.n	8002f34 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed8:	2200      	movs	r2, #0
 8002eda:	2180      	movs	r1, #128	; 0x80
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f001 fc48 	bl	8004772 <I2C_WaitOnFlagUntilTimeout>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e04d      	b.n	8002f88 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	2bff      	cmp	r3, #255	; 0xff
 8002ef4:	d90e      	bls.n	8002f14 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	22ff      	movs	r2, #255	; 0xff
 8002efa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	8979      	ldrh	r1, [r7, #10]
 8002f04:	2300      	movs	r3, #0
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f001 fdd9 	bl	8004ac4 <I2C_TransferConfig>
 8002f12:	e00f      	b.n	8002f34 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f22:	b2da      	uxtb	r2, r3
 8002f24:	8979      	ldrh	r1, [r7, #10]
 8002f26:	2300      	movs	r3, #0
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f001 fdc8 	bl	8004ac4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d19a      	bne.n	8002e74 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f001 fc95 	bl	8004872 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e01a      	b.n	8002f88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2220      	movs	r2, #32
 8002f58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6859      	ldr	r1, [r3, #4]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	4b0b      	ldr	r3, [pc, #44]	; (8002f94 <HAL_I2C_Mem_Read+0x230>)
 8002f66:	400b      	ands	r3, r1
 8002f68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2220      	movs	r2, #32
 8002f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f82:	2300      	movs	r3, #0
 8002f84:	e000      	b.n	8002f88 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002f86:	2302      	movs	r3, #2
  }
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3718      	adds	r7, #24
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	80002400 	.word	0x80002400
 8002f94:	fe00e800 	.word	0xfe00e800

08002f98 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b088      	sub	sp, #32
 8002f9c:	af02      	add	r7, sp, #8
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	4608      	mov	r0, r1
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	817b      	strh	r3, [r7, #10]
 8002faa:	460b      	mov	r3, r1
 8002fac:	813b      	strh	r3, [r7, #8]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b20      	cmp	r3, #32
 8002fbc:	f040 80c2 	bne.w	8003144 <HAL_I2C_Mem_Read_DMA+0x1ac>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fc0:	6a3b      	ldr	r3, [r7, #32]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d002      	beq.n	8002fcc <HAL_I2C_Mem_Read_DMA+0x34>
 8002fc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d105      	bne.n	8002fd8 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fd2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e0b6      	b.n	8003146 <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fe2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fe6:	d101      	bne.n	8002fec <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 8002fe8:	2302      	movs	r3, #2
 8002fea:	e0ac      	b.n	8003146 <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d101      	bne.n	8002ffa <HAL_I2C_Mem_Read_DMA+0x62>
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	e0a5      	b.n	8003146 <HAL_I2C_Mem_Read_DMA+0x1ae>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2222      	movs	r2, #34	; 0x22
 8003006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2240      	movs	r2, #64	; 0x40
 800300e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6a3a      	ldr	r2, [r7, #32]
 800301c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003022:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4a4a      	ldr	r2, [pc, #296]	; (8003150 <HAL_I2C_Mem_Read_DMA+0x1b8>)
 8003028:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	4a49      	ldr	r2, [pc, #292]	; (8003154 <HAL_I2C_Mem_Read_DMA+0x1bc>)
 800302e:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 8003030:	897a      	ldrh	r2, [r7, #10]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	64da      	str	r2, [r3, #76]	; 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800303a:	b29b      	uxth	r3, r3
 800303c:	2bff      	cmp	r3, #255	; 0xff
 800303e:	d903      	bls.n	8003048 <HAL_I2C_Mem_Read_DMA+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	22ff      	movs	r2, #255	; 0xff
 8003044:	851a      	strh	r2, [r3, #40]	; 0x28
 8003046:	e004      	b.n	8003052 <HAL_I2C_Mem_Read_DMA+0xba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800304c:	b29a      	uxth	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003052:	88fb      	ldrh	r3, [r7, #6]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d109      	bne.n	800306c <HAL_I2C_Mem_Read_DMA+0xd4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003058:	893b      	ldrh	r3, [r7, #8]
 800305a:	b2da      	uxtb	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f04f 32ff 	mov.w	r2, #4294967295
 8003068:	651a      	str	r2, [r3, #80]	; 0x50
 800306a:	e00b      	b.n	8003084 <HAL_I2C_Mem_Read_DMA+0xec>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800306c:	893b      	ldrh	r3, [r7, #8]
 800306e:	0a1b      	lsrs	r3, r3, #8
 8003070:	b29b      	uxth	r3, r3
 8003072:	b2da      	uxtb	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800307a:	893b      	ldrh	r3, [r7, #8]
 800307c:	b2db      	uxtb	r3, r3
 800307e:	461a      	mov	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	651a      	str	r2, [r3, #80]	; 0x50
    }

    if (hi2c->hdmarx != NULL)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003088:	2b00      	cmp	r3, #0
 800308a:	d020      	beq.n	80030ce <HAL_I2C_Mem_Read_DMA+0x136>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003090:	4a31      	ldr	r2, [pc, #196]	; (8003158 <HAL_I2C_Mem_Read_DMA+0x1c0>)
 8003092:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003098:	4a30      	ldr	r2, [pc, #192]	; (800315c <HAL_I2C_Mem_Read_DMA+0x1c4>)
 800309a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a0:	2200      	movs	r2, #0
 80030a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a8:	2200      	movs	r2, #0
 80030aa:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	3324      	adds	r3, #36	; 0x24
 80030b6:	4619      	mov	r1, r3
 80030b8:	6a3a      	ldr	r2, [r7, #32]
                                       hi2c->XferSize);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80030be:	f7ff f945 	bl	800234c <HAL_DMA_Start_IT>
 80030c2:	4603      	mov	r3, r0
 80030c4:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80030c6:	7dfb      	ldrb	r3, [r7, #23]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d127      	bne.n	800311c <HAL_I2C_Mem_Read_DMA+0x184>
 80030cc:	e013      	b.n	80030f6 <HAL_I2C_Mem_Read_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2220      	movs	r2, #32
 80030d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e027      	b.n	8003146 <HAL_I2C_Mem_Read_DMA+0x1ae>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80030f6:	88fb      	ldrh	r3, [r7, #6]
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	8979      	ldrh	r1, [r7, #10]
 80030fc:	4b18      	ldr	r3, [pc, #96]	; (8003160 <HAL_I2C_Mem_Read_DMA+0x1c8>)
 80030fe:	9300      	str	r3, [sp, #0]
 8003100:	2300      	movs	r3, #0
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f001 fcde 	bl	8004ac4 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003110:	2101      	movs	r1, #1
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f001 fd08 	bl	8004b28 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8003118:	2300      	movs	r3, #0
 800311a:	e014      	b.n	8003146 <HAL_I2C_Mem_Read_DMA+0x1ae>
      hi2c->State     = HAL_I2C_STATE_READY;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2220      	movs	r2, #32
 8003120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003130:	f043 0210 	orr.w	r2, r3, #16
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e000      	b.n	8003146 <HAL_I2C_Mem_Read_DMA+0x1ae>
  }
  else
  {
    return HAL_BUSY;
 8003144:	2302      	movs	r3, #2
  }
}
 8003146:	4618      	mov	r0, r3
 8003148:	3718      	adds	r7, #24
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	ffff0000 	.word	0xffff0000
 8003154:	08003851 	.word	0x08003851
 8003158:	08004673 	.word	0x08004673
 800315c:	08004709 	.word	0x08004709
 8003160:	80002000 	.word	0x80002000

08003164 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b08a      	sub	sp, #40	; 0x28
 8003168:	af02      	add	r7, sp, #8
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	607a      	str	r2, [r7, #4]
 800316e:	603b      	str	r3, [r7, #0]
 8003170:	460b      	mov	r3, r1
 8003172:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003174:	2300      	movs	r3, #0
 8003176:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2b20      	cmp	r3, #32
 8003182:	f040 80f1 	bne.w	8003368 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003190:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003194:	d101      	bne.n	800319a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003196:	2302      	movs	r3, #2
 8003198:	e0e7      	b.n	800336a <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d101      	bne.n	80031a8 <HAL_I2C_IsDeviceReady+0x44>
 80031a4:	2302      	movs	r3, #2
 80031a6:	e0e0      	b.n	800336a <HAL_I2C_IsDeviceReady+0x206>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2224      	movs	r2, #36	; 0x24
 80031b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d107      	bne.n	80031d6 <HAL_I2C_IsDeviceReady+0x72>
 80031c6:	897b      	ldrh	r3, [r7, #10]
 80031c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80031d4:	e004      	b.n	80031e0 <HAL_I2C_IsDeviceReady+0x7c>
 80031d6:	897b      	ldrh	r3, [r7, #10]
 80031d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031dc:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	6812      	ldr	r2, [r2, #0]
 80031e4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80031e6:	f7fe feb7 	bl	8001f58 <HAL_GetTick>
 80031ea:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	f003 0320 	and.w	r3, r3, #32
 80031f6:	2b20      	cmp	r3, #32
 80031f8:	bf0c      	ite	eq
 80031fa:	2301      	moveq	r3, #1
 80031fc:	2300      	movne	r3, #0
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	f003 0310 	and.w	r3, r3, #16
 800320c:	2b10      	cmp	r3, #16
 800320e:	bf0c      	ite	eq
 8003210:	2301      	moveq	r3, #1
 8003212:	2300      	movne	r3, #0
 8003214:	b2db      	uxtb	r3, r3
 8003216:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003218:	e034      	b.n	8003284 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003220:	d01a      	beq.n	8003258 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003222:	f7fe fe99 	bl	8001f58 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	429a      	cmp	r2, r3
 8003230:	d302      	bcc.n	8003238 <HAL_I2C_IsDeviceReady+0xd4>
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d10f      	bne.n	8003258 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2220      	movs	r2, #32
 800323c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003244:	f043 0220 	orr.w	r2, r3, #32
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e088      	b.n	800336a <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	f003 0320 	and.w	r3, r3, #32
 8003262:	2b20      	cmp	r3, #32
 8003264:	bf0c      	ite	eq
 8003266:	2301      	moveq	r3, #1
 8003268:	2300      	movne	r3, #0
 800326a:	b2db      	uxtb	r3, r3
 800326c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	f003 0310 	and.w	r3, r3, #16
 8003278:	2b10      	cmp	r3, #16
 800327a:	bf0c      	ite	eq
 800327c:	2301      	moveq	r3, #1
 800327e:	2300      	movne	r3, #0
 8003280:	b2db      	uxtb	r3, r3
 8003282:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003284:	7ffb      	ldrb	r3, [r7, #31]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d102      	bne.n	8003290 <HAL_I2C_IsDeviceReady+0x12c>
 800328a:	7fbb      	ldrb	r3, [r7, #30]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0c4      	beq.n	800321a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	f003 0310 	and.w	r3, r3, #16
 800329a:	2b10      	cmp	r3, #16
 800329c:	d01a      	beq.n	80032d4 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2200      	movs	r2, #0
 80032a6:	2120      	movs	r1, #32
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f001 fa62 	bl	8004772 <I2C_WaitOnFlagUntilTimeout>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e058      	b.n	800336a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2220      	movs	r2, #32
 80032be:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2220      	movs	r2, #32
 80032c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80032d0:	2300      	movs	r3, #0
 80032d2:	e04a      	b.n	800336a <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	9300      	str	r3, [sp, #0]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	2200      	movs	r2, #0
 80032dc:	2120      	movs	r1, #32
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f001 fa47 	bl	8004772 <I2C_WaitOnFlagUntilTimeout>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e03d      	b.n	800336a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2210      	movs	r2, #16
 80032f4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2220      	movs	r2, #32
 80032fc:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	429a      	cmp	r2, r3
 8003304:	d118      	bne.n	8003338 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003314:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	2200      	movs	r2, #0
 800331e:	2120      	movs	r1, #32
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f001 fa26 	bl	8004772 <I2C_WaitOnFlagUntilTimeout>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e01c      	b.n	800336a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2220      	movs	r2, #32
 8003336:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	3301      	adds	r3, #1
 800333c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	429a      	cmp	r2, r3
 8003344:	f63f af3b 	bhi.w	80031be <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2220      	movs	r2, #32
 800334c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003354:	f043 0220 	orr.w	r2, r3, #32
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e000      	b.n	800336a <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8003368:	2302      	movs	r3, #2
  }
}
 800336a:	4618      	mov	r0, r3
 800336c:	3720      	adds	r7, #32
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b084      	sub	sp, #16
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800338e:	2b00      	cmp	r3, #0
 8003390:	d005      	beq.n	800339e <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003396:	68ba      	ldr	r2, [r7, #8]
 8003398:	68f9      	ldr	r1, [r7, #12]
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	4798      	blx	r3
  }
}
 800339e:	bf00      	nop
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b083      	sub	sp, #12
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80033ae:	bf00      	nop
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033ba:	b480      	push	{r7}
 80033bc:	b083      	sub	sp, #12
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80033c2:	bf00      	nop
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr

080033ce <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b083      	sub	sp, #12
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80033d6:	bf00      	nop
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80033ea:	bf00      	nop
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b083      	sub	sp, #12
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
 80033fe:	460b      	mov	r3, r1
 8003400:	70fb      	strb	r3, [r7, #3]
 8003402:	4613      	mov	r3, r2
 8003404:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003412:	b480      	push	{r7}
 8003414:	b083      	sub	sp, #12
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003426:	b480      	push	{r7}
 8003428:	b083      	sub	sp, #12
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800342e:	bf00      	nop
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr

0800343a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800343a:	b480      	push	{r7}
 800343c:	b083      	sub	sp, #12
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003456:	bf00      	nop
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr

08003462 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b086      	sub	sp, #24
 8003466:	af00      	add	r7, sp, #0
 8003468:	60f8      	str	r0, [r7, #12]
 800346a:	60b9      	str	r1, [r7, #8]
 800346c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003472:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800347e:	2b01      	cmp	r3, #1
 8003480:	d101      	bne.n	8003486 <I2C_Slave_ISR_IT+0x24>
 8003482:	2302      	movs	r3, #2
 8003484:	e0ec      	b.n	8003660 <I2C_Slave_ISR_IT+0x1fe>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	095b      	lsrs	r3, r3, #5
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	d009      	beq.n	80034ae <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	095b      	lsrs	r3, r3, #5
 800349e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d003      	beq.n	80034ae <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80034a6:	6939      	ldr	r1, [r7, #16]
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f000 fe67 	bl	800417c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	091b      	lsrs	r3, r3, #4
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d04d      	beq.n	8003556 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	091b      	lsrs	r3, r3, #4
 80034be:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d047      	beq.n	8003556 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d128      	bne.n	8003522 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b28      	cmp	r3, #40	; 0x28
 80034da:	d108      	bne.n	80034ee <I2C_Slave_ISR_IT+0x8c>
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034e2:	d104      	bne.n	80034ee <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80034e4:	6939      	ldr	r1, [r7, #16]
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f000 ff52 	bl	8004390 <I2C_ITListenCplt>
 80034ec:	e032      	b.n	8003554 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b29      	cmp	r3, #41	; 0x29
 80034f8:	d10e      	bne.n	8003518 <I2C_Slave_ISR_IT+0xb6>
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003500:	d00a      	beq.n	8003518 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2210      	movs	r2, #16
 8003508:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f001 f88d 	bl	800462a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 fd0a 	bl	8003f2a <I2C_ITSlaveSeqCplt>
 8003516:	e01d      	b.n	8003554 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2210      	movs	r2, #16
 800351e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003520:	e096      	b.n	8003650 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2210      	movs	r2, #16
 8003528:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352e:	f043 0204 	orr.w	r2, r3, #4
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d004      	beq.n	8003546 <I2C_Slave_ISR_IT+0xe4>
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003542:	f040 8085 	bne.w	8003650 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354a:	4619      	mov	r1, r3
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f000 ff75 	bl	800443c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003552:	e07d      	b.n	8003650 <I2C_Slave_ISR_IT+0x1ee>
 8003554:	e07c      	b.n	8003650 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	089b      	lsrs	r3, r3, #2
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d030      	beq.n	80035c4 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	089b      	lsrs	r3, r3, #2
 8003566:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800356a:	2b00      	cmp	r3, #0
 800356c:	d02a      	beq.n	80035c4 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003572:	b29b      	uxth	r3, r3
 8003574:	2b00      	cmp	r3, #0
 8003576:	d018      	beq.n	80035aa <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003582:	b2d2      	uxtb	r2, r2
 8003584:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358a:	1c5a      	adds	r2, r3, #1
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003594:	3b01      	subs	r3, #1
 8003596:	b29a      	uxth	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	3b01      	subs	r3, #1
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d14f      	bne.n	8003654 <I2C_Slave_ISR_IT+0x1f2>
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035ba:	d04b      	beq.n	8003654 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f000 fcb4 	bl	8003f2a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80035c2:	e047      	b.n	8003654 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	08db      	lsrs	r3, r3, #3
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00a      	beq.n	80035e6 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	08db      	lsrs	r3, r3, #3
 80035d4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d004      	beq.n	80035e6 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80035dc:	6939      	ldr	r1, [r7, #16]
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f000 fbe2 	bl	8003da8 <I2C_ITAddrCplt>
 80035e4:	e037      	b.n	8003656 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	085b      	lsrs	r3, r3, #1
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d031      	beq.n	8003656 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	085b      	lsrs	r3, r3, #1
 80035f6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d02b      	beq.n	8003656 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003602:	b29b      	uxth	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	d018      	beq.n	800363a <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360c:	781a      	ldrb	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	1c5a      	adds	r2, r3, #1
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003622:	b29b      	uxth	r3, r3
 8003624:	3b01      	subs	r3, #1
 8003626:	b29a      	uxth	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003630:	3b01      	subs	r3, #1
 8003632:	b29a      	uxth	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	851a      	strh	r2, [r3, #40]	; 0x28
 8003638:	e00d      	b.n	8003656 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003640:	d002      	beq.n	8003648 <I2C_Slave_ISR_IT+0x1e6>
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d106      	bne.n	8003656 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f000 fc6e 	bl	8003f2a <I2C_ITSlaveSeqCplt>
 800364e:	e002      	b.n	8003656 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8003650:	bf00      	nop
 8003652:	e000      	b.n	8003656 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8003654:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3718      	adds	r7, #24
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b088      	sub	sp, #32
 800366c:	af02      	add	r7, sp, #8
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800367a:	2b01      	cmp	r3, #1
 800367c:	d101      	bne.n	8003682 <I2C_Master_ISR_DMA+0x1a>
 800367e:	2302      	movs	r3, #2
 8003680:	e0e1      	b.n	8003846 <I2C_Master_ISR_DMA+0x1de>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	091b      	lsrs	r3, r3, #4
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	d017      	beq.n	80036c6 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	091b      	lsrs	r3, r3, #4
 800369a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d011      	beq.n	80036c6 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2210      	movs	r2, #16
 80036a8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ae:	f043 0204 	orr.w	r2, r3, #4
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80036b6:	2120      	movs	r1, #32
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f001 fa35 	bl	8004b28 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f000 ffb3 	bl	800462a <I2C_Flush_TXDR>
 80036c4:	e0ba      	b.n	800383c <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	09db      	lsrs	r3, r3, #7
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d072      	beq.n	80037b8 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	099b      	lsrs	r3, r3, #6
 80036d6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d06c      	beq.n	80037b8 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036ec:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d04e      	beq.n	8003796 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	b29b      	uxth	r3, r3
 8003700:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003704:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800370a:	b29b      	uxth	r3, r3
 800370c:	2bff      	cmp	r3, #255	; 0xff
 800370e:	d906      	bls.n	800371e <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	22ff      	movs	r2, #255	; 0xff
 8003714:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8003716:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800371a:	617b      	str	r3, [r7, #20]
 800371c:	e010      	b.n	8003740 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003722:	b29a      	uxth	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003730:	d003      	beq.n	800373a <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003736:	617b      	str	r3, [r7, #20]
 8003738:	e002      	b.n	8003740 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800373a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800373e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003744:	b2da      	uxtb	r2, r3
 8003746:	8a79      	ldrh	r1, [r7, #18]
 8003748:	2300      	movs	r3, #0
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f001 f9b8 	bl	8004ac4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003758:	b29a      	uxth	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	b29a      	uxth	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b22      	cmp	r3, #34	; 0x22
 8003770:	d108      	bne.n	8003784 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003780:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003782:	e05b      	b.n	800383c <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003792:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003794:	e052      	b.n	800383c <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037a4:	d003      	beq.n	80037ae <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f000 fb82 	bl	8003eb0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80037ac:	e046      	b.n	800383c <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80037ae:	2140      	movs	r1, #64	; 0x40
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f000 fe43 	bl	800443c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80037b6:	e041      	b.n	800383c <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	099b      	lsrs	r3, r3, #6
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d029      	beq.n	8003818 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	099b      	lsrs	r3, r3, #6
 80037c8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d023      	beq.n	8003818 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d119      	bne.n	800380e <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037e8:	d027      	beq.n	800383a <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037f2:	d108      	bne.n	8003806 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003802:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003804:	e019      	b.n	800383a <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f000 fb52 	bl	8003eb0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800380c:	e015      	b.n	800383a <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800380e:	2140      	movs	r1, #64	; 0x40
 8003810:	68f8      	ldr	r0, [r7, #12]
 8003812:	f000 fe13 	bl	800443c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003816:	e010      	b.n	800383a <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	095b      	lsrs	r3, r3, #5
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00b      	beq.n	800383c <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	095b      	lsrs	r3, r3, #5
 8003828:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800382c:	2b00      	cmp	r3, #0
 800382e:	d005      	beq.n	800383c <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003830:	68b9      	ldr	r1, [r7, #8]
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f000 fbd8 	bl	8003fe8 <I2C_ITMasterCplt>
 8003838:	e000      	b.n	800383c <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800383a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3718      	adds	r7, #24
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
	...

08003850 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b088      	sub	sp, #32
 8003854:	af02      	add	r7, sp, #8
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800385c:	4b8c      	ldr	r3, [pc, #560]	; (8003a90 <I2C_Mem_ISR_DMA+0x240>)
 800385e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003866:	2b01      	cmp	r3, #1
 8003868:	d101      	bne.n	800386e <I2C_Mem_ISR_DMA+0x1e>
 800386a:	2302      	movs	r3, #2
 800386c:	e10c      	b.n	8003a88 <I2C_Mem_ISR_DMA+0x238>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	091b      	lsrs	r3, r3, #4
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b00      	cmp	r3, #0
 8003880:	d017      	beq.n	80038b2 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	091b      	lsrs	r3, r3, #4
 8003886:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800388a:	2b00      	cmp	r3, #0
 800388c:	d011      	beq.n	80038b2 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2210      	movs	r2, #16
 8003894:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389a:	f043 0204 	orr.w	r2, r3, #4
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80038a2:	2120      	movs	r1, #32
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f001 f93f 	bl	8004b28 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f000 febd 	bl	800462a <I2C_Flush_TXDR>
 80038b0:	e0e5      	b.n	8003a7e <I2C_Mem_ISR_DMA+0x22e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	085b      	lsrs	r3, r3, #1
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00f      	beq.n	80038de <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	085b      	lsrs	r3, r3, #1
 80038c2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d009      	beq.n	80038de <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80038d2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f04f 32ff 	mov.w	r2, #4294967295
 80038da:	651a      	str	r2, [r3, #80]	; 0x50
 80038dc:	e0cf      	b.n	8003a7e <I2C_Mem_ISR_DMA+0x22e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	09db      	lsrs	r3, r3, #7
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d05c      	beq.n	80039a4 <I2C_Mem_ISR_DMA+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	099b      	lsrs	r3, r3, #6
 80038ee:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d056      	beq.n	80039a4 <I2C_Mem_ISR_DMA+0x154>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80038f6:	2110      	movs	r1, #16
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f001 f915 	bl	8004b28 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003902:	b29b      	uxth	r3, r3
 8003904:	2b00      	cmp	r3, #0
 8003906:	d048      	beq.n	800399a <I2C_Mem_ISR_DMA+0x14a>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800390c:	b29b      	uxth	r3, r3
 800390e:	2bff      	cmp	r3, #255	; 0xff
 8003910:	d910      	bls.n	8003934 <I2C_Mem_ISR_DMA+0xe4>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	22ff      	movs	r2, #255	; 0xff
 8003916:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800391c:	b299      	uxth	r1, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003922:	b2da      	uxtb	r2, r3
 8003924:	2300      	movs	r3, #0
 8003926:	9300      	str	r3, [sp, #0]
 8003928:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f001 f8c9 	bl	8004ac4 <I2C_TransferConfig>
 8003932:	e011      	b.n	8003958 <I2C_Mem_ISR_DMA+0x108>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003938:	b29a      	uxth	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003942:	b299      	uxth	r1, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003948:	b2da      	uxtb	r2, r3
 800394a:	2300      	movs	r3, #0
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f001 f8b6 	bl	8004ac4 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395c:	b29a      	uxth	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	b29a      	uxth	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b22      	cmp	r3, #34	; 0x22
 8003974:	d108      	bne.n	8003988 <I2C_Mem_ISR_DMA+0x138>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003984:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003986:	e07a      	b.n	8003a7e <I2C_Mem_ISR_DMA+0x22e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003996:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003998:	e071      	b.n	8003a7e <I2C_Mem_ISR_DMA+0x22e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800399a:	2140      	movs	r1, #64	; 0x40
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 fd4d 	bl	800443c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80039a2:	e06c      	b.n	8003a7e <I2C_Mem_ISR_DMA+0x22e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	099b      	lsrs	r3, r3, #6
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d056      	beq.n	8003a5e <I2C_Mem_ISR_DMA+0x20e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	099b      	lsrs	r3, r3, #6
 80039b4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d050      	beq.n	8003a5e <I2C_Mem_ISR_DMA+0x20e>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	2b22      	cmp	r3, #34	; 0x22
 80039c6:	d101      	bne.n	80039cc <I2C_Mem_ISR_DMA+0x17c>
    {
      direction = I2C_GENERATE_START_READ;
 80039c8:	4b32      	ldr	r3, [pc, #200]	; (8003a94 <I2C_Mem_ISR_DMA+0x244>)
 80039ca:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	2bff      	cmp	r3, #255	; 0xff
 80039d4:	d910      	bls.n	80039f8 <I2C_Mem_ISR_DMA+0x1a8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	22ff      	movs	r2, #255	; 0xff
 80039da:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039e0:	b299      	uxth	r1, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e6:	b2da      	uxtb	r2, r3
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f001 f867 	bl	8004ac4 <I2C_TransferConfig>
 80039f6:	e011      	b.n	8003a1c <I2C_Mem_ISR_DMA+0x1cc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a06:	b299      	uxth	r1, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f001 f854 	bl	8004ac4 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b22      	cmp	r3, #34	; 0x22
 8003a38:	d108      	bne.n	8003a4c <I2C_Mem_ISR_DMA+0x1fc>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a48:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a4a:	e018      	b.n	8003a7e <I2C_Mem_ISR_DMA+0x22e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a5a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a5c:	e00f      	b.n	8003a7e <I2C_Mem_ISR_DMA+0x22e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	095b      	lsrs	r3, r3, #5
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d009      	beq.n	8003a7e <I2C_Mem_ISR_DMA+0x22e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	095b      	lsrs	r3, r3, #5
 8003a6e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <I2C_Mem_ISR_DMA+0x22e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003a76:	68b9      	ldr	r1, [r7, #8]
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f000 fab5 	bl	8003fe8 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3718      	adds	r7, #24
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	80002000 	.word	0x80002000
 8003a94:	80002400 	.word	0x80002400

08003a98 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b088      	sub	sp, #32
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d101      	bne.n	8003abc <I2C_Slave_ISR_DMA+0x24>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	e0c9      	b.n	8003c50 <I2C_Slave_ISR_DMA+0x1b8>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	095b      	lsrs	r3, r3, #5
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d009      	beq.n	8003ae4 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	095b      	lsrs	r3, r3, #5
 8003ad4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d003      	beq.n	8003ae4 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003adc:	68b9      	ldr	r1, [r7, #8]
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f000 fb4c 	bl	800417c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	091b      	lsrs	r3, r3, #4
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f000 809a 	beq.w	8003c26 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	091b      	lsrs	r3, r3, #4
 8003af6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f000 8093 	beq.w	8003c26 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	0b9b      	lsrs	r3, r3, #14
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d105      	bne.n	8003b18 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	0bdb      	lsrs	r3, r3, #15
 8003b10:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d07f      	beq.n	8003c18 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00d      	beq.n	8003b3c <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	0bdb      	lsrs	r3, r3, #15
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d007      	beq.n	8003b3c <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00d      	beq.n	8003b60 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	0b9b      	lsrs	r3, r3, #14
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d007      	beq.n	8003b60 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d101      	bne.n	8003b60 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d128      	bne.n	8003bb8 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b28      	cmp	r3, #40	; 0x28
 8003b70:	d108      	bne.n	8003b84 <I2C_Slave_ISR_DMA+0xec>
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b78:	d104      	bne.n	8003b84 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8003b7a:	68b9      	ldr	r1, [r7, #8]
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 fc07 	bl	8004390 <I2C_ITListenCplt>
 8003b82:	e048      	b.n	8003c16 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b29      	cmp	r3, #41	; 0x29
 8003b8e:	d10e      	bne.n	8003bae <I2C_Slave_ISR_DMA+0x116>
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b96:	d00a      	beq.n	8003bae <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2210      	movs	r2, #16
 8003b9e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f000 fd42 	bl	800462a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f000 f9bf 	bl	8003f2a <I2C_ITSlaveSeqCplt>
 8003bac:	e033      	b.n	8003c16 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2210      	movs	r2, #16
 8003bb4:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003bb6:	e034      	b.n	8003c22 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2210      	movs	r2, #16
 8003bbe:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc4:	f043 0204 	orr.w	r2, r3, #4
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bd2:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <I2C_Slave_ISR_DMA+0x14a>
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003be0:	d11f      	bne.n	8003c22 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003be2:	7dfb      	ldrb	r3, [r7, #23]
 8003be4:	2b21      	cmp	r3, #33	; 0x21
 8003be6:	d002      	beq.n	8003bee <I2C_Slave_ISR_DMA+0x156>
 8003be8:	7dfb      	ldrb	r3, [r7, #23]
 8003bea:	2b29      	cmp	r3, #41	; 0x29
 8003bec:	d103      	bne.n	8003bf6 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2221      	movs	r2, #33	; 0x21
 8003bf2:	631a      	str	r2, [r3, #48]	; 0x30
 8003bf4:	e008      	b.n	8003c08 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003bf6:	7dfb      	ldrb	r3, [r7, #23]
 8003bf8:	2b22      	cmp	r3, #34	; 0x22
 8003bfa:	d002      	beq.n	8003c02 <I2C_Slave_ISR_DMA+0x16a>
 8003bfc:	7dfb      	ldrb	r3, [r7, #23]
 8003bfe:	2b2a      	cmp	r3, #42	; 0x2a
 8003c00:	d102      	bne.n	8003c08 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2222      	movs	r2, #34	; 0x22
 8003c06:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f000 fc14 	bl	800443c <I2C_ITError>
      if (treatdmanack == 1U)
 8003c14:	e005      	b.n	8003c22 <I2C_Slave_ISR_DMA+0x18a>
 8003c16:	e004      	b.n	8003c22 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2210      	movs	r2, #16
 8003c1e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003c20:	e011      	b.n	8003c46 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8003c22:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003c24:	e00f      	b.n	8003c46 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	08db      	lsrs	r3, r3, #3
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d009      	beq.n	8003c46 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	08db      	lsrs	r3, r3, #3
 8003c36:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d003      	beq.n	8003c46 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003c3e:	68b9      	ldr	r1, [r7, #8]
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f000 f8b1 	bl	8003da8 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3720      	adds	r7, #32
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af02      	add	r7, sp, #8
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	4608      	mov	r0, r1
 8003c62:	4611      	mov	r1, r2
 8003c64:	461a      	mov	r2, r3
 8003c66:	4603      	mov	r3, r0
 8003c68:	817b      	strh	r3, [r7, #10]
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	813b      	strh	r3, [r7, #8]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003c72:	88fb      	ldrh	r3, [r7, #6]
 8003c74:	b2da      	uxtb	r2, r3
 8003c76:	8979      	ldrh	r1, [r7, #10]
 8003c78:	4b20      	ldr	r3, [pc, #128]	; (8003cfc <I2C_RequestMemoryWrite+0xa4>)
 8003c7a:	9300      	str	r3, [sp, #0]
 8003c7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	f000 ff1f 	bl	8004ac4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c86:	69fa      	ldr	r2, [r7, #28]
 8003c88:	69b9      	ldr	r1, [r7, #24]
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f000 fdb1 	bl	80047f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e02c      	b.n	8003cf4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c9a:	88fb      	ldrh	r3, [r7, #6]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d105      	bne.n	8003cac <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ca0:	893b      	ldrh	r3, [r7, #8]
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	629a      	str	r2, [r3, #40]	; 0x28
 8003caa:	e015      	b.n	8003cd8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003cac:	893b      	ldrh	r3, [r7, #8]
 8003cae:	0a1b      	lsrs	r3, r3, #8
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	b2da      	uxtb	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cba:	69fa      	ldr	r2, [r7, #28]
 8003cbc:	69b9      	ldr	r1, [r7, #24]
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f000 fd97 	bl	80047f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e012      	b.n	8003cf4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003cce:	893b      	ldrh	r3, [r7, #8]
 8003cd0:	b2da      	uxtb	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	9300      	str	r3, [sp, #0]
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	2180      	movs	r1, #128	; 0x80
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f000 fd45 	bl	8004772 <I2C_WaitOnFlagUntilTimeout>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e000      	b.n	8003cf4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	80002000 	.word	0x80002000

08003d00 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af02      	add	r7, sp, #8
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	4608      	mov	r0, r1
 8003d0a:	4611      	mov	r1, r2
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	4603      	mov	r3, r0
 8003d10:	817b      	strh	r3, [r7, #10]
 8003d12:	460b      	mov	r3, r1
 8003d14:	813b      	strh	r3, [r7, #8]
 8003d16:	4613      	mov	r3, r2
 8003d18:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003d1a:	88fb      	ldrh	r3, [r7, #6]
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	8979      	ldrh	r1, [r7, #10]
 8003d20:	4b20      	ldr	r3, [pc, #128]	; (8003da4 <I2C_RequestMemoryRead+0xa4>)
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	2300      	movs	r3, #0
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f000 fecc 	bl	8004ac4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d2c:	69fa      	ldr	r2, [r7, #28]
 8003d2e:	69b9      	ldr	r1, [r7, #24]
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f000 fd5e 	bl	80047f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d001      	beq.n	8003d40 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e02c      	b.n	8003d9a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d40:	88fb      	ldrh	r3, [r7, #6]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d105      	bne.n	8003d52 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d46:	893b      	ldrh	r3, [r7, #8]
 8003d48:	b2da      	uxtb	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	629a      	str	r2, [r3, #40]	; 0x28
 8003d50:	e015      	b.n	8003d7e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003d52:	893b      	ldrh	r3, [r7, #8]
 8003d54:	0a1b      	lsrs	r3, r3, #8
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	b2da      	uxtb	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d60:	69fa      	ldr	r2, [r7, #28]
 8003d62:	69b9      	ldr	r1, [r7, #24]
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f000 fd44 	bl	80047f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e012      	b.n	8003d9a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d74:	893b      	ldrh	r3, [r7, #8]
 8003d76:	b2da      	uxtb	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	2200      	movs	r2, #0
 8003d86:	2140      	movs	r1, #64	; 0x40
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f000 fcf2 	bl	8004772 <I2C_WaitOnFlagUntilTimeout>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e000      	b.n	8003d9a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	80002000 	.word	0x80002000

08003da8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003dbe:	2b28      	cmp	r3, #40	; 0x28
 8003dc0:	d16a      	bne.n	8003e98 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	0c1b      	lsrs	r3, r3, #16
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	0c1b      	lsrs	r3, r3, #16
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003de0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dee:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003dfc:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d138      	bne.n	8003e78 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003e06:	897b      	ldrh	r3, [r7, #10]
 8003e08:	09db      	lsrs	r3, r3, #7
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	89bb      	ldrh	r3, [r7, #12]
 8003e0e:	4053      	eors	r3, r2
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	f003 0306 	and.w	r3, r3, #6
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d11c      	bne.n	8003e54 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003e1a:	897b      	ldrh	r3, [r7, #10]
 8003e1c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e22:	1c5a      	adds	r2, r3, #1
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d13b      	bne.n	8003ea8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2208      	movs	r2, #8
 8003e3c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003e46:	89ba      	ldrh	r2, [r7, #12]
 8003e48:	7bfb      	ldrb	r3, [r7, #15]
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7ff fad2 	bl	80033f6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003e52:	e029      	b.n	8003ea8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003e54:	893b      	ldrh	r3, [r7, #8]
 8003e56:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003e58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 fecd 	bl	8004bfc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003e6a:	89ba      	ldrh	r2, [r7, #12]
 8003e6c:	7bfb      	ldrb	r3, [r7, #15]
 8003e6e:	4619      	mov	r1, r3
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f7ff fac0 	bl	80033f6 <HAL_I2C_AddrCallback>
}
 8003e76:	e017      	b.n	8003ea8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003e78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 febd 	bl	8004bfc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003e8a:	89ba      	ldrh	r2, [r7, #12]
 8003e8c:	7bfb      	ldrb	r3, [r7, #15]
 8003e8e:	4619      	mov	r1, r3
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f7ff fab0 	bl	80033f6 <HAL_I2C_AddrCallback>
}
 8003e96:	e007      	b.n	8003ea8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2208      	movs	r2, #8
 8003e9e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003ea8:	bf00      	nop
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b21      	cmp	r3, #33	; 0x21
 8003eca:	d115      	bne.n	8003ef8 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2220      	movs	r2, #32
 8003ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2211      	movs	r2, #17
 8003ed8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003ee0:	2101      	movs	r1, #1
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 fe8a 	bl	8004bfc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f7ff fa58 	bl	80033a6 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003ef6:	e014      	b.n	8003f22 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2220      	movs	r2, #32
 8003efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2212      	movs	r2, #18
 8003f04:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003f0c:	2102      	movs	r1, #2
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 fe74 	bl	8004bfc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f7ff fa4c 	bl	80033ba <HAL_I2C_MasterRxCpltCallback>
}
 8003f22:	bf00      	nop
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b084      	sub	sp, #16
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	0b9b      	lsrs	r3, r3, #14
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d008      	beq.n	8003f60 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f5c:	601a      	str	r2, [r3, #0]
 8003f5e:	e00d      	b.n	8003f7c <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	0bdb      	lsrs	r3, r3, #15
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d007      	beq.n	8003f7c <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f7a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b29      	cmp	r3, #41	; 0x29
 8003f86:	d112      	bne.n	8003fae <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2228      	movs	r2, #40	; 0x28
 8003f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2221      	movs	r2, #33	; 0x21
 8003f94:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003f96:	2101      	movs	r1, #1
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 fe2f 	bl	8004bfc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7ff fa11 	bl	80033ce <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003fac:	e017      	b.n	8003fde <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b2a      	cmp	r3, #42	; 0x2a
 8003fb8:	d111      	bne.n	8003fde <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2228      	movs	r2, #40	; 0x28
 8003fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2222      	movs	r2, #34	; 0x22
 8003fc6:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003fc8:	2102      	movs	r1, #2
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 fe16 	bl	8004bfc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f7ff fa02 	bl	80033e2 <HAL_I2C_SlaveRxCpltCallback>
}
 8003fde:	bf00      	nop
 8003fe0:	3710      	adds	r7, #16
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
	...

08003fe8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b21      	cmp	r3, #33	; 0x21
 8004008:	d107      	bne.n	800401a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800400a:	2101      	movs	r1, #1
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 fdf5 	bl	8004bfc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2211      	movs	r2, #17
 8004016:	631a      	str	r2, [r3, #48]	; 0x30
 8004018:	e00c      	b.n	8004034 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b22      	cmp	r3, #34	; 0x22
 8004024:	d106      	bne.n	8004034 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004026:	2102      	movs	r1, #2
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 fde7 	bl	8004bfc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2212      	movs	r2, #18
 8004032:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6859      	ldr	r1, [r3, #4]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	4b4d      	ldr	r3, [pc, #308]	; (8004174 <I2C_ITMasterCplt+0x18c>)
 8004040:	400b      	ands	r3, r1
 8004042:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a4a      	ldr	r2, [pc, #296]	; (8004178 <I2C_ITMasterCplt+0x190>)
 800404e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	091b      	lsrs	r3, r3, #4
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	2b00      	cmp	r3, #0
 800405a:	d009      	beq.n	8004070 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2210      	movs	r2, #16
 8004062:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004068:	f043 0204 	orr.w	r2, r3, #4
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b60      	cmp	r3, #96	; 0x60
 800407a:	d10b      	bne.n	8004094 <I2C_ITMasterCplt+0xac>
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	089b      	lsrs	r3, r3, #2
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	2b00      	cmp	r3, #0
 8004086:	d005      	beq.n	8004094 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408e:	b2db      	uxtb	r3, r3
 8004090:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8004092:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 fac8 	bl	800462a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	2b60      	cmp	r3, #96	; 0x60
 80040aa:	d002      	beq.n	80040b2 <I2C_ITMasterCplt+0xca>
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d006      	beq.n	80040c0 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b6:	4619      	mov	r1, r3
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 f9bf 	bl	800443c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80040be:	e054      	b.n	800416a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	2b21      	cmp	r3, #33	; 0x21
 80040ca:	d124      	bne.n	8004116 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2220      	movs	r2, #32
 80040d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b40      	cmp	r3, #64	; 0x40
 80040e4:	d10b      	bne.n	80040fe <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f7ff f995 	bl	8003426 <HAL_I2C_MemTxCpltCallback>
}
 80040fc:	e035      	b.n	800416a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7ff f949 	bl	80033a6 <HAL_I2C_MasterTxCpltCallback>
}
 8004114:	e029      	b.n	800416a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b22      	cmp	r3, #34	; 0x22
 8004120:	d123      	bne.n	800416a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2220      	movs	r2, #32
 8004126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2b40      	cmp	r3, #64	; 0x40
 800413a:	d10b      	bne.n	8004154 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f7fd f91b 	bl	8001388 <HAL_I2C_MemRxCpltCallback>
}
 8004152:	e00a      	b.n	800416a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7ff f928 	bl	80033ba <HAL_I2C_MasterRxCpltCallback>
}
 800416a:	bf00      	nop
 800416c:	3718      	adds	r7, #24
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	fe00e800 	.word	0xfe00e800
 8004178:	ffff0000 	.word	0xffff0000

0800417c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004198:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2220      	movs	r2, #32
 80041a0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80041a2:	7bfb      	ldrb	r3, [r7, #15]
 80041a4:	2b21      	cmp	r3, #33	; 0x21
 80041a6:	d002      	beq.n	80041ae <I2C_ITSlaveCplt+0x32>
 80041a8:	7bfb      	ldrb	r3, [r7, #15]
 80041aa:	2b29      	cmp	r3, #41	; 0x29
 80041ac:	d108      	bne.n	80041c0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80041ae:	f248 0101 	movw	r1, #32769	; 0x8001
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 fd22 	bl	8004bfc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2221      	movs	r2, #33	; 0x21
 80041bc:	631a      	str	r2, [r3, #48]	; 0x30
 80041be:	e00d      	b.n	80041dc <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80041c0:	7bfb      	ldrb	r3, [r7, #15]
 80041c2:	2b22      	cmp	r3, #34	; 0x22
 80041c4:	d002      	beq.n	80041cc <I2C_ITSlaveCplt+0x50>
 80041c6:	7bfb      	ldrb	r3, [r7, #15]
 80041c8:	2b2a      	cmp	r3, #42	; 0x2a
 80041ca:	d107      	bne.n	80041dc <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80041cc:	f248 0102 	movw	r1, #32770	; 0x8002
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 fd13 	bl	8004bfc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2222      	movs	r2, #34	; 0x22
 80041da:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041ea:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6859      	ldr	r1, [r3, #4]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	4b64      	ldr	r3, [pc, #400]	; (8004388 <I2C_ITSlaveCplt+0x20c>)
 80041f8:	400b      	ands	r3, r1
 80041fa:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 fa14 	bl	800462a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	0b9b      	lsrs	r3, r3, #14
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	2b00      	cmp	r3, #0
 800420c:	d013      	beq.n	8004236 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800421c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004222:	2b00      	cmp	r3, #0
 8004224:	d020      	beq.n	8004268 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	b29a      	uxth	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004234:	e018      	b.n	8004268 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	0bdb      	lsrs	r3, r3, #15
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d012      	beq.n	8004268 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004250:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004256:	2b00      	cmp	r3, #0
 8004258:	d006      	beq.n	8004268 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	b29a      	uxth	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	089b      	lsrs	r3, r3, #2
 800426c:	f003 0301 	and.w	r3, r3, #1
 8004270:	2b00      	cmp	r3, #0
 8004272:	d020      	beq.n	80042b6 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	f023 0304 	bic.w	r3, r3, #4
 800427a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004286:	b2d2      	uxtb	r2, r2
 8004288:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428e:	1c5a      	adds	r2, r3, #1
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00c      	beq.n	80042b6 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a0:	3b01      	subs	r3, #1
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	3b01      	subs	r3, #1
 80042b0:	b29a      	uxth	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d005      	beq.n	80042cc <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c4:	f043 0204 	orr.w	r2, r3, #4
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d010      	beq.n	8004304 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e6:	4619      	mov	r1, r3
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 f8a7 	bl	800443c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b28      	cmp	r3, #40	; 0x28
 80042f8:	d141      	bne.n	800437e <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80042fa:	6979      	ldr	r1, [r7, #20]
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 f847 	bl	8004390 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004302:	e03c      	b.n	800437e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004308:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800430c:	d014      	beq.n	8004338 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f7ff fe0b 	bl	8003f2a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a1d      	ldr	r2, [pc, #116]	; (800438c <I2C_ITSlaveCplt+0x210>)
 8004318:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2220      	movs	r2, #32
 800431e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f7ff f86e 	bl	8003412 <HAL_I2C_ListenCpltCallback>
}
 8004336:	e022      	b.n	800437e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b22      	cmp	r3, #34	; 0x22
 8004342:	d10e      	bne.n	8004362 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2220      	movs	r2, #32
 8004348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7ff f841 	bl	80033e2 <HAL_I2C_SlaveRxCpltCallback>
}
 8004360:	e00d      	b.n	800437e <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2220      	movs	r2, #32
 8004366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f7ff f828 	bl	80033ce <HAL_I2C_SlaveTxCpltCallback>
}
 800437e:	bf00      	nop
 8004380:	3718      	adds	r7, #24
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	fe00e800 	.word	0xfe00e800
 800438c:	ffff0000 	.word	0xffff0000

08004390 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a26      	ldr	r2, [pc, #152]	; (8004438 <I2C_ITListenCplt+0xa8>)
 800439e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2220      	movs	r2, #32
 80043aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	089b      	lsrs	r3, r3, #2
 80043c0:	f003 0301 	and.w	r3, r3, #1
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d022      	beq.n	800440e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d2:	b2d2      	uxtb	r2, r2
 80043d4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043da:	1c5a      	adds	r2, r3, #1
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d012      	beq.n	800440e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ec:	3b01      	subs	r3, #1
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	3b01      	subs	r3, #1
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004406:	f043 0204 	orr.w	r2, r3, #4
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800440e:	f248 0103 	movw	r1, #32771	; 0x8003
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 fbf2 	bl	8004bfc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2210      	movs	r2, #16
 800441e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f7fe fff2 	bl	8003412 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800442e:	bf00      	nop
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	ffff0000 	.word	0xffff0000

0800443c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800444c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a5d      	ldr	r2, [pc, #372]	; (80045d0 <I2C_ITError+0x194>)
 800445a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	431a      	orrs	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800446e:	7bfb      	ldrb	r3, [r7, #15]
 8004470:	2b28      	cmp	r3, #40	; 0x28
 8004472:	d005      	beq.n	8004480 <I2C_ITError+0x44>
 8004474:	7bfb      	ldrb	r3, [r7, #15]
 8004476:	2b29      	cmp	r3, #41	; 0x29
 8004478:	d002      	beq.n	8004480 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800447a:	7bfb      	ldrb	r3, [r7, #15]
 800447c:	2b2a      	cmp	r3, #42	; 0x2a
 800447e:	d10b      	bne.n	8004498 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004480:	2103      	movs	r1, #3
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 fbba 	bl	8004bfc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2228      	movs	r2, #40	; 0x28
 800448c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a50      	ldr	r2, [pc, #320]	; (80045d4 <I2C_ITError+0x198>)
 8004494:	635a      	str	r2, [r3, #52]	; 0x34
 8004496:	e011      	b.n	80044bc <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004498:	f248 0103 	movw	r1, #32771	; 0x8003
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 fbad 	bl	8004bfc <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b60      	cmp	r3, #96	; 0x60
 80044ac:	d003      	beq.n	80044b6 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2220      	movs	r2, #32
 80044b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c0:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d039      	beq.n	800453e <I2C_ITError+0x102>
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	2b11      	cmp	r3, #17
 80044ce:	d002      	beq.n	80044d6 <I2C_ITError+0x9a>
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	2b21      	cmp	r3, #33	; 0x21
 80044d4:	d133      	bne.n	800453e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044e4:	d107      	bne.n	80044f6 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80044f4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7fe f876 	bl	80025ec <HAL_DMA_GetState>
 8004500:	4603      	mov	r3, r0
 8004502:	2b01      	cmp	r3, #1
 8004504:	d017      	beq.n	8004536 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450a:	4a33      	ldr	r2, [pc, #204]	; (80045d8 <I2C_ITError+0x19c>)
 800450c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451a:	4618      	mov	r0, r3
 800451c:	f7fd ff76 	bl	800240c <HAL_DMA_Abort_IT>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d04d      	beq.n	80045c2 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004530:	4610      	mov	r0, r2
 8004532:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004534:	e045      	b.n	80045c2 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f850 	bl	80045dc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800453c:	e041      	b.n	80045c2 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004542:	2b00      	cmp	r3, #0
 8004544:	d039      	beq.n	80045ba <I2C_ITError+0x17e>
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	2b12      	cmp	r3, #18
 800454a:	d002      	beq.n	8004552 <I2C_ITError+0x116>
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	2b22      	cmp	r3, #34	; 0x22
 8004550:	d133      	bne.n	80045ba <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800455c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004560:	d107      	bne.n	8004572 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004570:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004576:	4618      	mov	r0, r3
 8004578:	f7fe f838 	bl	80025ec <HAL_DMA_GetState>
 800457c:	4603      	mov	r3, r0
 800457e:	2b01      	cmp	r3, #1
 8004580:	d017      	beq.n	80045b2 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004586:	4a14      	ldr	r2, [pc, #80]	; (80045d8 <I2C_ITError+0x19c>)
 8004588:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004596:	4618      	mov	r0, r3
 8004598:	f7fd ff38 	bl	800240c <HAL_DMA_Abort_IT>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d011      	beq.n	80045c6 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80045ac:	4610      	mov	r0, r2
 80045ae:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80045b0:	e009      	b.n	80045c6 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f812 	bl	80045dc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80045b8:	e005      	b.n	80045c6 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f80e 	bl	80045dc <I2C_TreatErrorCallback>
  }
}
 80045c0:	e002      	b.n	80045c8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80045c2:	bf00      	nop
 80045c4:	e000      	b.n	80045c8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80045c6:	bf00      	nop
}
 80045c8:	bf00      	nop
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	ffff0000 	.word	0xffff0000
 80045d4:	08003463 	.word	0x08003463
 80045d8:	08004737 	.word	0x08004737

080045dc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	2b60      	cmp	r3, #96	; 0x60
 80045ee:	d10e      	bne.n	800460e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2220      	movs	r2, #32
 80045f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7fe ff21 	bl	800344e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800460c:	e009      	b.n	8004622 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f7fe ff0c 	bl	800343a <HAL_I2C_ErrorCallback>
}
 8004622:	bf00      	nop
 8004624:	3708      	adds	r7, #8
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800462a:	b480      	push	{r7}
 800462c:	b083      	sub	sp, #12
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	2b02      	cmp	r3, #2
 800463e:	d103      	bne.n	8004648 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2200      	movs	r2, #0
 8004646:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b01      	cmp	r3, #1
 8004654:	d007      	beq.n	8004666 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	699a      	ldr	r2, [r3, #24]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f042 0201 	orr.w	r2, r2, #1
 8004664:	619a      	str	r2, [r3, #24]
  }
}
 8004666:	bf00      	nop
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr

08004672 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	b084      	sub	sp, #16
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800468e:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004694:	b29b      	uxth	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d104      	bne.n	80046a4 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800469a:	2120      	movs	r1, #32
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f000 fa43 	bl	8004b28 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80046a2:	e02d      	b.n	8004700 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80046ac:	441a      	add	r2, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	2bff      	cmp	r3, #255	; 0xff
 80046ba:	d903      	bls.n	80046c4 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	22ff      	movs	r2, #255	; 0xff
 80046c0:	851a      	strh	r2, [r3, #40]	; 0x28
 80046c2:	e004      	b.n	80046ce <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	3324      	adds	r3, #36	; 0x24
 80046d8:	4619      	mov	r1, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046de:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80046e4:	f7fd fe32 	bl	800234c <HAL_DMA_Start_IT>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d004      	beq.n	80046f8 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80046ee:	2110      	movs	r1, #16
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f7ff fea3 	bl	800443c <I2C_ITError>
}
 80046f6:	e003      	b.n	8004700 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80046f8:	2140      	movs	r1, #64	; 0x40
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f000 fa14 	bl	8004b28 <I2C_Enable_IRQ>
}
 8004700:	bf00      	nop
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004714:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	685a      	ldr	r2, [r3, #4]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004724:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004726:	2110      	movs	r1, #16
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f7ff fe87 	bl	800443c <I2C_ITError>
}
 800472e:	bf00      	nop
 8004730:	3710      	adds	r7, #16
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b084      	sub	sp, #16
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004742:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004748:	2b00      	cmp	r3, #0
 800474a:	d003      	beq.n	8004754 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004750:	2200      	movs	r2, #0
 8004752:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004758:	2b00      	cmp	r3, #0
 800475a:	d003      	beq.n	8004764 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004760:	2200      	movs	r2, #0
 8004762:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f7ff ff39 	bl	80045dc <I2C_TreatErrorCallback>
}
 800476a:	bf00      	nop
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004772:	b580      	push	{r7, lr}
 8004774:	b084      	sub	sp, #16
 8004776:	af00      	add	r7, sp, #0
 8004778:	60f8      	str	r0, [r7, #12]
 800477a:	60b9      	str	r1, [r7, #8]
 800477c:	603b      	str	r3, [r7, #0]
 800477e:	4613      	mov	r3, r2
 8004780:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004782:	e022      	b.n	80047ca <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800478a:	d01e      	beq.n	80047ca <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800478c:	f7fd fbe4 	bl	8001f58 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	429a      	cmp	r2, r3
 800479a:	d302      	bcc.n	80047a2 <I2C_WaitOnFlagUntilTimeout+0x30>
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d113      	bne.n	80047ca <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a6:	f043 0220 	orr.w	r2, r3, #32
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2220      	movs	r2, #32
 80047b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e00f      	b.n	80047ea <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	699a      	ldr	r2, [r3, #24]
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	4013      	ands	r3, r2
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	bf0c      	ite	eq
 80047da:	2301      	moveq	r3, #1
 80047dc:	2300      	movne	r3, #0
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	461a      	mov	r2, r3
 80047e2:	79fb      	ldrb	r3, [r7, #7]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d0cd      	beq.n	8004784 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b084      	sub	sp, #16
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	60f8      	str	r0, [r7, #12]
 80047fa:	60b9      	str	r1, [r7, #8]
 80047fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80047fe:	e02c      	b.n	800485a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	68b9      	ldr	r1, [r7, #8]
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f000 f871 	bl	80048ec <I2C_IsErrorOccurred>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e02a      	b.n	800486a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800481a:	d01e      	beq.n	800485a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800481c:	f7fd fb9c 	bl	8001f58 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	429a      	cmp	r2, r3
 800482a:	d302      	bcc.n	8004832 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d113      	bne.n	800485a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004836:	f043 0220 	orr.w	r2, r3, #32
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2220      	movs	r2, #32
 8004842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e007      	b.n	800486a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	2b02      	cmp	r3, #2
 8004866:	d1cb      	bne.n	8004800 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b084      	sub	sp, #16
 8004876:	af00      	add	r7, sp, #0
 8004878:	60f8      	str	r0, [r7, #12]
 800487a:	60b9      	str	r1, [r7, #8]
 800487c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800487e:	e028      	b.n	80048d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	68b9      	ldr	r1, [r7, #8]
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f000 f831 	bl	80048ec <I2C_IsErrorOccurred>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d001      	beq.n	8004894 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e026      	b.n	80048e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004894:	f7fd fb60 	bl	8001f58 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d302      	bcc.n	80048aa <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d113      	bne.n	80048d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ae:	f043 0220 	orr.w	r2, r3, #32
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2220      	movs	r2, #32
 80048ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e007      	b.n	80048e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	f003 0320 	and.w	r3, r3, #32
 80048dc:	2b20      	cmp	r3, #32
 80048de:	d1cf      	bne.n	8004880 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3710      	adds	r7, #16
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
	...

080048ec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b08a      	sub	sp, #40	; 0x28
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048f8:	2300      	movs	r3, #0
 80048fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	699b      	ldr	r3, [r3, #24]
 8004904:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004906:	2300      	movs	r3, #0
 8004908:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	f003 0310 	and.w	r3, r3, #16
 8004914:	2b00      	cmp	r3, #0
 8004916:	d075      	beq.n	8004a04 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2210      	movs	r2, #16
 800491e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004920:	e056      	b.n	80049d0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004928:	d052      	beq.n	80049d0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800492a:	f7fd fb15 	bl	8001f58 <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	68ba      	ldr	r2, [r7, #8]
 8004936:	429a      	cmp	r2, r3
 8004938:	d302      	bcc.n	8004940 <I2C_IsErrorOccurred+0x54>
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d147      	bne.n	80049d0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800494a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004952:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800495e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004962:	d12e      	bne.n	80049c2 <I2C_IsErrorOccurred+0xd6>
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800496a:	d02a      	beq.n	80049c2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800496c:	7cfb      	ldrb	r3, [r7, #19]
 800496e:	2b20      	cmp	r3, #32
 8004970:	d027      	beq.n	80049c2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004980:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004982:	f7fd fae9 	bl	8001f58 <HAL_GetTick>
 8004986:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004988:	e01b      	b.n	80049c2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800498a:	f7fd fae5 	bl	8001f58 <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	2b19      	cmp	r3, #25
 8004996:	d914      	bls.n	80049c2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800499c:	f043 0220 	orr.w	r2, r3, #32
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2220      	movs	r2, #32
 80049a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	f003 0320 	and.w	r3, r3, #32
 80049cc:	2b20      	cmp	r3, #32
 80049ce:	d1dc      	bne.n	800498a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	f003 0320 	and.w	r3, r3, #32
 80049da:	2b20      	cmp	r3, #32
 80049dc:	d003      	beq.n	80049e6 <I2C_IsErrorOccurred+0xfa>
 80049de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d09d      	beq.n	8004922 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80049e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d103      	bne.n	80049f6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2220      	movs	r2, #32
 80049f4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80049f6:	6a3b      	ldr	r3, [r7, #32]
 80049f8:	f043 0304 	orr.w	r3, r3, #4
 80049fc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00b      	beq.n	8004a2e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004a16:	6a3b      	ldr	r3, [r7, #32]
 8004a18:	f043 0301 	orr.w	r3, r3, #1
 8004a1c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a26:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00b      	beq.n	8004a50 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004a38:	6a3b      	ldr	r3, [r7, #32]
 8004a3a:	f043 0308 	orr.w	r3, r3, #8
 8004a3e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00b      	beq.n	8004a72 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004a5a:	6a3b      	ldr	r3, [r7, #32]
 8004a5c:	f043 0302 	orr.w	r3, r3, #2
 8004a60:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a6a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004a72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d01c      	beq.n	8004ab4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f7ff fdd5 	bl	800462a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6859      	ldr	r1, [r3, #4]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	4b0d      	ldr	r3, [pc, #52]	; (8004ac0 <I2C_IsErrorOccurred+0x1d4>)
 8004a8c:	400b      	ands	r3, r1
 8004a8e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a94:	6a3b      	ldr	r3, [r7, #32]
 8004a96:	431a      	orrs	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2220      	movs	r2, #32
 8004aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004ab4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3728      	adds	r7, #40	; 0x28
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	fe00e800 	.word	0xfe00e800

08004ac4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b087      	sub	sp, #28
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	607b      	str	r3, [r7, #4]
 8004ace:	460b      	mov	r3, r1
 8004ad0:	817b      	strh	r3, [r7, #10]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ad6:	897b      	ldrh	r3, [r7, #10]
 8004ad8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004adc:	7a7b      	ldrb	r3, [r7, #9]
 8004ade:	041b      	lsls	r3, r3, #16
 8004ae0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ae4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004aea:	6a3b      	ldr	r3, [r7, #32]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004af2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	6a3b      	ldr	r3, [r7, #32]
 8004afc:	0d5b      	lsrs	r3, r3, #21
 8004afe:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004b02:	4b08      	ldr	r3, [pc, #32]	; (8004b24 <I2C_TransferConfig+0x60>)
 8004b04:	430b      	orrs	r3, r1
 8004b06:	43db      	mvns	r3, r3
 8004b08:	ea02 0103 	and.w	r1, r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	697a      	ldr	r2, [r7, #20]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004b16:	bf00      	nop
 8004b18:	371c      	adds	r7, #28
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	03ff63ff 	.word	0x03ff63ff

08004b28 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	460b      	mov	r3, r1
 8004b32:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004b34:	2300      	movs	r3, #0
 8004b36:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b3c:	4a2d      	ldr	r2, [pc, #180]	; (8004bf4 <I2C_Enable_IRQ+0xcc>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d004      	beq.n	8004b4c <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8004b46:	4a2c      	ldr	r2, [pc, #176]	; (8004bf8 <I2C_Enable_IRQ+0xd0>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d11d      	bne.n	8004b88 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004b4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	da03      	bge.n	8004b5c <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004b5a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004b5c:	887b      	ldrh	r3, [r7, #2]
 8004b5e:	2b10      	cmp	r3, #16
 8004b60:	d103      	bne.n	8004b6a <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004b68:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004b6a:	887b      	ldrh	r3, [r7, #2]
 8004b6c:	2b20      	cmp	r3, #32
 8004b6e:	d103      	bne.n	8004b78 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004b76:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004b78:	887b      	ldrh	r3, [r7, #2]
 8004b7a:	2b40      	cmp	r3, #64	; 0x40
 8004b7c:	d12c      	bne.n	8004bd8 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b84:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004b86:	e027      	b.n	8004bd8 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004b88:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	da03      	bge.n	8004b98 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004b96:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004b98:	887b      	ldrh	r3, [r7, #2]
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d003      	beq.n	8004baa <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8004ba8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004baa:	887b      	ldrh	r3, [r7, #2]
 8004bac:	f003 0302 	and.w	r3, r3, #2
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d003      	beq.n	8004bbc <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8004bba:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004bbc:	887b      	ldrh	r3, [r7, #2]
 8004bbe:	2b10      	cmp	r3, #16
 8004bc0:	d103      	bne.n	8004bca <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004bc8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004bca:	887b      	ldrh	r3, [r7, #2]
 8004bcc:	2b20      	cmp	r3, #32
 8004bce:	d103      	bne.n	8004bd8 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f043 0320 	orr.w	r3, r3, #32
 8004bd6:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6819      	ldr	r1, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	430a      	orrs	r2, r1
 8004be6:	601a      	str	r2, [r3, #0]
}
 8004be8:	bf00      	nop
 8004bea:	3714      	adds	r7, #20
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr
 8004bf4:	08003669 	.word	0x08003669
 8004bf8:	08003a99 	.word	0x08003a99

08004bfc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	460b      	mov	r3, r1
 8004c06:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004c0c:	887b      	ldrh	r3, [r7, #2]
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00f      	beq.n	8004c36 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004c1c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c2a:	2b28      	cmp	r3, #40	; 0x28
 8004c2c:	d003      	beq.n	8004c36 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004c34:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004c36:	887b      	ldrh	r3, [r7, #2]
 8004c38:	f003 0302 	and.w	r3, r3, #2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00f      	beq.n	8004c60 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8004c46:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c54:	2b28      	cmp	r3, #40	; 0x28
 8004c56:	d003      	beq.n	8004c60 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004c5e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004c60:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	da03      	bge.n	8004c70 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004c6e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004c70:	887b      	ldrh	r3, [r7, #2]
 8004c72:	2b10      	cmp	r3, #16
 8004c74:	d103      	bne.n	8004c7e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004c7c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004c7e:	887b      	ldrh	r3, [r7, #2]
 8004c80:	2b20      	cmp	r3, #32
 8004c82:	d103      	bne.n	8004c8c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f043 0320 	orr.w	r3, r3, #32
 8004c8a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004c8c:	887b      	ldrh	r3, [r7, #2]
 8004c8e:	2b40      	cmp	r3, #64	; 0x40
 8004c90:	d103      	bne.n	8004c9a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c98:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	6819      	ldr	r1, [r3, #0]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	43da      	mvns	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	400a      	ands	r2, r1
 8004caa:	601a      	str	r2, [r3, #0]
}
 8004cac:	bf00      	nop
 8004cae:	3714      	adds	r7, #20
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	2b20      	cmp	r3, #32
 8004ccc:	d138      	bne.n	8004d40 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d101      	bne.n	8004cdc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004cd8:	2302      	movs	r3, #2
 8004cda:	e032      	b.n	8004d42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2224      	movs	r2, #36	; 0x24
 8004ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f022 0201 	bic.w	r2, r2, #1
 8004cfa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d0a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	6819      	ldr	r1, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f042 0201 	orr.w	r2, r2, #1
 8004d2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2220      	movs	r2, #32
 8004d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	e000      	b.n	8004d42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d40:	2302      	movs	r3, #2
  }
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	370c      	adds	r7, #12
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr

08004d4e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b085      	sub	sp, #20
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
 8004d56:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b20      	cmp	r3, #32
 8004d62:	d139      	bne.n	8004dd8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d101      	bne.n	8004d72 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004d6e:	2302      	movs	r3, #2
 8004d70:	e033      	b.n	8004dda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2224      	movs	r2, #36	; 0x24
 8004d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f022 0201 	bic.w	r2, r2, #1
 8004d90:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004da0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	021b      	lsls	r3, r3, #8
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f042 0201 	orr.w	r2, r2, #1
 8004dc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2220      	movs	r2, #32
 8004dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	e000      	b.n	8004dda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004dd8:	2302      	movs	r3, #2
  }
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3714      	adds	r7, #20
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
	...

08004de8 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004df0:	4b0b      	ldr	r3, [pc, #44]	; (8004e20 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8004df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004df4:	4a0a      	ldr	r2, [pc, #40]	; (8004e20 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8004df6:	f043 0301 	orr.w	r3, r3, #1
 8004dfa:	6613      	str	r3, [r2, #96]	; 0x60
 8004dfc:	4b08      	ldr	r3, [pc, #32]	; (8004e20 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8004dfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e00:	f003 0301 	and.w	r3, r3, #1
 8004e04:	60fb      	str	r3, [r7, #12]
 8004e06:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8004e08:	4b06      	ldr	r3, [pc, #24]	; (8004e24 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8004e0a:	685a      	ldr	r2, [r3, #4]
 8004e0c:	4905      	ldr	r1, [pc, #20]	; (8004e24 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	604b      	str	r3, [r1, #4]
}
 8004e14:	bf00      	nop
 8004e16:	3714      	adds	r7, #20
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr
 8004e20:	40021000 	.word	0x40021000
 8004e24:	40010000 	.word	0x40010000

08004e28 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004e2c:	4b04      	ldr	r3, [pc, #16]	; (8004e40 <HAL_PWREx_GetVoltageRange+0x18>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	40007000 	.word	0x40007000

08004e44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e52:	d130      	bne.n	8004eb6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e54:	4b23      	ldr	r3, [pc, #140]	; (8004ee4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e60:	d038      	beq.n	8004ed4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e62:	4b20      	ldr	r3, [pc, #128]	; (8004ee4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e6a:	4a1e      	ldr	r2, [pc, #120]	; (8004ee4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e70:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e72:	4b1d      	ldr	r3, [pc, #116]	; (8004ee8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2232      	movs	r2, #50	; 0x32
 8004e78:	fb02 f303 	mul.w	r3, r2, r3
 8004e7c:	4a1b      	ldr	r2, [pc, #108]	; (8004eec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e82:	0c9b      	lsrs	r3, r3, #18
 8004e84:	3301      	adds	r3, #1
 8004e86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e88:	e002      	b.n	8004e90 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e90:	4b14      	ldr	r3, [pc, #80]	; (8004ee4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e92:	695b      	ldr	r3, [r3, #20]
 8004e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e9c:	d102      	bne.n	8004ea4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d1f2      	bne.n	8004e8a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ea4:	4b0f      	ldr	r3, [pc, #60]	; (8004ee4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ea6:	695b      	ldr	r3, [r3, #20]
 8004ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eb0:	d110      	bne.n	8004ed4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e00f      	b.n	8004ed6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004eb6:	4b0b      	ldr	r3, [pc, #44]	; (8004ee4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ebe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ec2:	d007      	beq.n	8004ed4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004ec4:	4b07      	ldr	r3, [pc, #28]	; (8004ee4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ecc:	4a05      	ldr	r2, [pc, #20]	; (8004ee4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ece:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ed2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	40007000 	.word	0x40007000
 8004ee8:	20000000 	.word	0x20000000
 8004eec:	431bde83 	.word	0x431bde83

08004ef0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b088      	sub	sp, #32
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d101      	bne.n	8004f02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e3ca      	b.n	8005698 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f02:	4b97      	ldr	r3, [pc, #604]	; (8005160 <HAL_RCC_OscConfig+0x270>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f003 030c 	and.w	r3, r3, #12
 8004f0a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f0c:	4b94      	ldr	r3, [pc, #592]	; (8005160 <HAL_RCC_OscConfig+0x270>)
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	f003 0303 	and.w	r3, r3, #3
 8004f14:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0310 	and.w	r3, r3, #16
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	f000 80e4 	beq.w	80050ec <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d007      	beq.n	8004f3a <HAL_RCC_OscConfig+0x4a>
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	2b0c      	cmp	r3, #12
 8004f2e:	f040 808b 	bne.w	8005048 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	f040 8087 	bne.w	8005048 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004f3a:	4b89      	ldr	r3, [pc, #548]	; (8005160 <HAL_RCC_OscConfig+0x270>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d005      	beq.n	8004f52 <HAL_RCC_OscConfig+0x62>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e3a2      	b.n	8005698 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a1a      	ldr	r2, [r3, #32]
 8004f56:	4b82      	ldr	r3, [pc, #520]	; (8005160 <HAL_RCC_OscConfig+0x270>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0308 	and.w	r3, r3, #8
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d004      	beq.n	8004f6c <HAL_RCC_OscConfig+0x7c>
 8004f62:	4b7f      	ldr	r3, [pc, #508]	; (8005160 <HAL_RCC_OscConfig+0x270>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f6a:	e005      	b.n	8004f78 <HAL_RCC_OscConfig+0x88>
 8004f6c:	4b7c      	ldr	r3, [pc, #496]	; (8005160 <HAL_RCC_OscConfig+0x270>)
 8004f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f72:	091b      	lsrs	r3, r3, #4
 8004f74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d223      	bcs.n	8004fc4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	4618      	mov	r0, r3
 8004f82:	f000 fd55 	bl	8005a30 <RCC_SetFlashLatencyFromMSIRange>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d001      	beq.n	8004f90 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e383      	b.n	8005698 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f90:	4b73      	ldr	r3, [pc, #460]	; (8005160 <HAL_RCC_OscConfig+0x270>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a72      	ldr	r2, [pc, #456]	; (8005160 <HAL_RCC_OscConfig+0x270>)
 8004f96:	f043 0308 	orr.w	r3, r3, #8
 8004f9a:	6013      	str	r3, [r2, #0]
 8004f9c:	4b70      	ldr	r3, [pc, #448]	; (8005160 <HAL_RCC_OscConfig+0x270>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a1b      	ldr	r3, [r3, #32]
 8004fa8:	496d      	ldr	r1, [pc, #436]	; (8005160 <HAL_RCC_OscConfig+0x270>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004fae:	4b6c      	ldr	r3, [pc, #432]	; (8005160 <HAL_RCC_OscConfig+0x270>)
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	69db      	ldr	r3, [r3, #28]
 8004fba:	021b      	lsls	r3, r3, #8
 8004fbc:	4968      	ldr	r1, [pc, #416]	; (8005160 <HAL_RCC_OscConfig+0x270>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	604b      	str	r3, [r1, #4]
 8004fc2:	e025      	b.n	8005010 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004fc4:	4b66      	ldr	r3, [pc, #408]	; (8005160 <HAL_RCC_OscConfig+0x270>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a65      	ldr	r2, [pc, #404]	; (8005160 <HAL_RCC_OscConfig+0x270>)
 8004fca:	f043 0308 	orr.w	r3, r3, #8
 8004fce:	6013      	str	r3, [r2, #0]
 8004fd0:	4b63      	ldr	r3, [pc, #396]	; (8005160 <HAL_RCC_OscConfig+0x270>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a1b      	ldr	r3, [r3, #32]
 8004fdc:	4960      	ldr	r1, [pc, #384]	; (8005160 <HAL_RCC_OscConfig+0x270>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004fe2:	4b5f      	ldr	r3, [pc, #380]	; (8005160 <HAL_RCC_OscConfig+0x270>)
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	69db      	ldr	r3, [r3, #28]
 8004fee:	021b      	lsls	r3, r3, #8
 8004ff0:	495b      	ldr	r1, [pc, #364]	; (8005160 <HAL_RCC_OscConfig+0x270>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d109      	bne.n	8005010 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a1b      	ldr	r3, [r3, #32]
 8005000:	4618      	mov	r0, r3
 8005002:	f000 fd15 	bl	8005a30 <RCC_SetFlashLatencyFromMSIRange>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d001      	beq.n	8005010 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e343      	b.n	8005698 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005010:	f000 fc4a 	bl	80058a8 <HAL_RCC_GetSysClockFreq>
 8005014:	4602      	mov	r2, r0
 8005016:	4b52      	ldr	r3, [pc, #328]	; (8005160 <HAL_RCC_OscConfig+0x270>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	091b      	lsrs	r3, r3, #4
 800501c:	f003 030f 	and.w	r3, r3, #15
 8005020:	4950      	ldr	r1, [pc, #320]	; (8005164 <HAL_RCC_OscConfig+0x274>)
 8005022:	5ccb      	ldrb	r3, [r1, r3]
 8005024:	f003 031f 	and.w	r3, r3, #31
 8005028:	fa22 f303 	lsr.w	r3, r2, r3
 800502c:	4a4e      	ldr	r2, [pc, #312]	; (8005168 <HAL_RCC_OscConfig+0x278>)
 800502e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005030:	4b4e      	ldr	r3, [pc, #312]	; (800516c <HAL_RCC_OscConfig+0x27c>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4618      	mov	r0, r3
 8005036:	f7fc ff3f 	bl	8001eb8 <HAL_InitTick>
 800503a:	4603      	mov	r3, r0
 800503c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800503e:	7bfb      	ldrb	r3, [r7, #15]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d052      	beq.n	80050ea <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005044:	7bfb      	ldrb	r3, [r7, #15]
 8005046:	e327      	b.n	8005698 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d032      	beq.n	80050b6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005050:	4b43      	ldr	r3, [pc, #268]	; (8005160 <HAL_RCC_OscConfig+0x270>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a42      	ldr	r2, [pc, #264]	; (8005160 <HAL_RCC_OscConfig+0x270>)
 8005056:	f043 0301 	orr.w	r3, r3, #1
 800505a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800505c:	f7fc ff7c 	bl	8001f58 <HAL_GetTick>
 8005060:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005062:	e008      	b.n	8005076 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005064:	f7fc ff78 	bl	8001f58 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b02      	cmp	r3, #2
 8005070:	d901      	bls.n	8005076 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e310      	b.n	8005698 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005076:	4b3a      	ldr	r3, [pc, #232]	; (8005160 <HAL_RCC_OscConfig+0x270>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0302 	and.w	r3, r3, #2
 800507e:	2b00      	cmp	r3, #0
 8005080:	d0f0      	beq.n	8005064 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005082:	4b37      	ldr	r3, [pc, #220]	; (8005160 <HAL_RCC_OscConfig+0x270>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a36      	ldr	r2, [pc, #216]	; (8005160 <HAL_RCC_OscConfig+0x270>)
 8005088:	f043 0308 	orr.w	r3, r3, #8
 800508c:	6013      	str	r3, [r2, #0]
 800508e:	4b34      	ldr	r3, [pc, #208]	; (8005160 <HAL_RCC_OscConfig+0x270>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a1b      	ldr	r3, [r3, #32]
 800509a:	4931      	ldr	r1, [pc, #196]	; (8005160 <HAL_RCC_OscConfig+0x270>)
 800509c:	4313      	orrs	r3, r2
 800509e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050a0:	4b2f      	ldr	r3, [pc, #188]	; (8005160 <HAL_RCC_OscConfig+0x270>)
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	69db      	ldr	r3, [r3, #28]
 80050ac:	021b      	lsls	r3, r3, #8
 80050ae:	492c      	ldr	r1, [pc, #176]	; (8005160 <HAL_RCC_OscConfig+0x270>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	604b      	str	r3, [r1, #4]
 80050b4:	e01a      	b.n	80050ec <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80050b6:	4b2a      	ldr	r3, [pc, #168]	; (8005160 <HAL_RCC_OscConfig+0x270>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a29      	ldr	r2, [pc, #164]	; (8005160 <HAL_RCC_OscConfig+0x270>)
 80050bc:	f023 0301 	bic.w	r3, r3, #1
 80050c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80050c2:	f7fc ff49 	bl	8001f58 <HAL_GetTick>
 80050c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80050c8:	e008      	b.n	80050dc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80050ca:	f7fc ff45 	bl	8001f58 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d901      	bls.n	80050dc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e2dd      	b.n	8005698 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80050dc:	4b20      	ldr	r3, [pc, #128]	; (8005160 <HAL_RCC_OscConfig+0x270>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1f0      	bne.n	80050ca <HAL_RCC_OscConfig+0x1da>
 80050e8:	e000      	b.n	80050ec <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80050ea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0301 	and.w	r3, r3, #1
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d074      	beq.n	80051e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	2b08      	cmp	r3, #8
 80050fc:	d005      	beq.n	800510a <HAL_RCC_OscConfig+0x21a>
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	2b0c      	cmp	r3, #12
 8005102:	d10e      	bne.n	8005122 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	2b03      	cmp	r3, #3
 8005108:	d10b      	bne.n	8005122 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800510a:	4b15      	ldr	r3, [pc, #84]	; (8005160 <HAL_RCC_OscConfig+0x270>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d064      	beq.n	80051e0 <HAL_RCC_OscConfig+0x2f0>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d160      	bne.n	80051e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e2ba      	b.n	8005698 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800512a:	d106      	bne.n	800513a <HAL_RCC_OscConfig+0x24a>
 800512c:	4b0c      	ldr	r3, [pc, #48]	; (8005160 <HAL_RCC_OscConfig+0x270>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a0b      	ldr	r2, [pc, #44]	; (8005160 <HAL_RCC_OscConfig+0x270>)
 8005132:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005136:	6013      	str	r3, [r2, #0]
 8005138:	e026      	b.n	8005188 <HAL_RCC_OscConfig+0x298>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005142:	d115      	bne.n	8005170 <HAL_RCC_OscConfig+0x280>
 8005144:	4b06      	ldr	r3, [pc, #24]	; (8005160 <HAL_RCC_OscConfig+0x270>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a05      	ldr	r2, [pc, #20]	; (8005160 <HAL_RCC_OscConfig+0x270>)
 800514a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800514e:	6013      	str	r3, [r2, #0]
 8005150:	4b03      	ldr	r3, [pc, #12]	; (8005160 <HAL_RCC_OscConfig+0x270>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a02      	ldr	r2, [pc, #8]	; (8005160 <HAL_RCC_OscConfig+0x270>)
 8005156:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800515a:	6013      	str	r3, [r2, #0]
 800515c:	e014      	b.n	8005188 <HAL_RCC_OscConfig+0x298>
 800515e:	bf00      	nop
 8005160:	40021000 	.word	0x40021000
 8005164:	08009c08 	.word	0x08009c08
 8005168:	20000000 	.word	0x20000000
 800516c:	20000004 	.word	0x20000004
 8005170:	4ba0      	ldr	r3, [pc, #640]	; (80053f4 <HAL_RCC_OscConfig+0x504>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a9f      	ldr	r2, [pc, #636]	; (80053f4 <HAL_RCC_OscConfig+0x504>)
 8005176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800517a:	6013      	str	r3, [r2, #0]
 800517c:	4b9d      	ldr	r3, [pc, #628]	; (80053f4 <HAL_RCC_OscConfig+0x504>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a9c      	ldr	r2, [pc, #624]	; (80053f4 <HAL_RCC_OscConfig+0x504>)
 8005182:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005186:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d013      	beq.n	80051b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005190:	f7fc fee2 	bl	8001f58 <HAL_GetTick>
 8005194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005196:	e008      	b.n	80051aa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005198:	f7fc fede 	bl	8001f58 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	2b64      	cmp	r3, #100	; 0x64
 80051a4:	d901      	bls.n	80051aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e276      	b.n	8005698 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051aa:	4b92      	ldr	r3, [pc, #584]	; (80053f4 <HAL_RCC_OscConfig+0x504>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d0f0      	beq.n	8005198 <HAL_RCC_OscConfig+0x2a8>
 80051b6:	e014      	b.n	80051e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b8:	f7fc fece 	bl	8001f58 <HAL_GetTick>
 80051bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051be:	e008      	b.n	80051d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051c0:	f7fc feca 	bl	8001f58 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	2b64      	cmp	r3, #100	; 0x64
 80051cc:	d901      	bls.n	80051d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e262      	b.n	8005698 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051d2:	4b88      	ldr	r3, [pc, #544]	; (80053f4 <HAL_RCC_OscConfig+0x504>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1f0      	bne.n	80051c0 <HAL_RCC_OscConfig+0x2d0>
 80051de:	e000      	b.n	80051e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d060      	beq.n	80052b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	2b04      	cmp	r3, #4
 80051f2:	d005      	beq.n	8005200 <HAL_RCC_OscConfig+0x310>
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	2b0c      	cmp	r3, #12
 80051f8:	d119      	bne.n	800522e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d116      	bne.n	800522e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005200:	4b7c      	ldr	r3, [pc, #496]	; (80053f4 <HAL_RCC_OscConfig+0x504>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005208:	2b00      	cmp	r3, #0
 800520a:	d005      	beq.n	8005218 <HAL_RCC_OscConfig+0x328>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d101      	bne.n	8005218 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e23f      	b.n	8005698 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005218:	4b76      	ldr	r3, [pc, #472]	; (80053f4 <HAL_RCC_OscConfig+0x504>)
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	061b      	lsls	r3, r3, #24
 8005226:	4973      	ldr	r1, [pc, #460]	; (80053f4 <HAL_RCC_OscConfig+0x504>)
 8005228:	4313      	orrs	r3, r2
 800522a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800522c:	e040      	b.n	80052b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d023      	beq.n	800527e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005236:	4b6f      	ldr	r3, [pc, #444]	; (80053f4 <HAL_RCC_OscConfig+0x504>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a6e      	ldr	r2, [pc, #440]	; (80053f4 <HAL_RCC_OscConfig+0x504>)
 800523c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005240:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005242:	f7fc fe89 	bl	8001f58 <HAL_GetTick>
 8005246:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005248:	e008      	b.n	800525c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800524a:	f7fc fe85 	bl	8001f58 <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	2b02      	cmp	r3, #2
 8005256:	d901      	bls.n	800525c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e21d      	b.n	8005698 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800525c:	4b65      	ldr	r3, [pc, #404]	; (80053f4 <HAL_RCC_OscConfig+0x504>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005264:	2b00      	cmp	r3, #0
 8005266:	d0f0      	beq.n	800524a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005268:	4b62      	ldr	r3, [pc, #392]	; (80053f4 <HAL_RCC_OscConfig+0x504>)
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	061b      	lsls	r3, r3, #24
 8005276:	495f      	ldr	r1, [pc, #380]	; (80053f4 <HAL_RCC_OscConfig+0x504>)
 8005278:	4313      	orrs	r3, r2
 800527a:	604b      	str	r3, [r1, #4]
 800527c:	e018      	b.n	80052b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800527e:	4b5d      	ldr	r3, [pc, #372]	; (80053f4 <HAL_RCC_OscConfig+0x504>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a5c      	ldr	r2, [pc, #368]	; (80053f4 <HAL_RCC_OscConfig+0x504>)
 8005284:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005288:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800528a:	f7fc fe65 	bl	8001f58 <HAL_GetTick>
 800528e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005290:	e008      	b.n	80052a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005292:	f7fc fe61 	bl	8001f58 <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	2b02      	cmp	r3, #2
 800529e:	d901      	bls.n	80052a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e1f9      	b.n	8005698 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052a4:	4b53      	ldr	r3, [pc, #332]	; (80053f4 <HAL_RCC_OscConfig+0x504>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1f0      	bne.n	8005292 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0308 	and.w	r3, r3, #8
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d03c      	beq.n	8005336 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	695b      	ldr	r3, [r3, #20]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d01c      	beq.n	80052fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052c4:	4b4b      	ldr	r3, [pc, #300]	; (80053f4 <HAL_RCC_OscConfig+0x504>)
 80052c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052ca:	4a4a      	ldr	r2, [pc, #296]	; (80053f4 <HAL_RCC_OscConfig+0x504>)
 80052cc:	f043 0301 	orr.w	r3, r3, #1
 80052d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052d4:	f7fc fe40 	bl	8001f58 <HAL_GetTick>
 80052d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052da:	e008      	b.n	80052ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052dc:	f7fc fe3c 	bl	8001f58 <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d901      	bls.n	80052ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e1d4      	b.n	8005698 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052ee:	4b41      	ldr	r3, [pc, #260]	; (80053f4 <HAL_RCC_OscConfig+0x504>)
 80052f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052f4:	f003 0302 	and.w	r3, r3, #2
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d0ef      	beq.n	80052dc <HAL_RCC_OscConfig+0x3ec>
 80052fc:	e01b      	b.n	8005336 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052fe:	4b3d      	ldr	r3, [pc, #244]	; (80053f4 <HAL_RCC_OscConfig+0x504>)
 8005300:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005304:	4a3b      	ldr	r2, [pc, #236]	; (80053f4 <HAL_RCC_OscConfig+0x504>)
 8005306:	f023 0301 	bic.w	r3, r3, #1
 800530a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800530e:	f7fc fe23 	bl	8001f58 <HAL_GetTick>
 8005312:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005314:	e008      	b.n	8005328 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005316:	f7fc fe1f 	bl	8001f58 <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	2b02      	cmp	r3, #2
 8005322:	d901      	bls.n	8005328 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e1b7      	b.n	8005698 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005328:	4b32      	ldr	r3, [pc, #200]	; (80053f4 <HAL_RCC_OscConfig+0x504>)
 800532a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800532e:	f003 0302 	and.w	r3, r3, #2
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1ef      	bne.n	8005316 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0304 	and.w	r3, r3, #4
 800533e:	2b00      	cmp	r3, #0
 8005340:	f000 80a6 	beq.w	8005490 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005344:	2300      	movs	r3, #0
 8005346:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005348:	4b2a      	ldr	r3, [pc, #168]	; (80053f4 <HAL_RCC_OscConfig+0x504>)
 800534a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800534c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10d      	bne.n	8005370 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005354:	4b27      	ldr	r3, [pc, #156]	; (80053f4 <HAL_RCC_OscConfig+0x504>)
 8005356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005358:	4a26      	ldr	r2, [pc, #152]	; (80053f4 <HAL_RCC_OscConfig+0x504>)
 800535a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800535e:	6593      	str	r3, [r2, #88]	; 0x58
 8005360:	4b24      	ldr	r3, [pc, #144]	; (80053f4 <HAL_RCC_OscConfig+0x504>)
 8005362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005368:	60bb      	str	r3, [r7, #8]
 800536a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800536c:	2301      	movs	r3, #1
 800536e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005370:	4b21      	ldr	r3, [pc, #132]	; (80053f8 <HAL_RCC_OscConfig+0x508>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005378:	2b00      	cmp	r3, #0
 800537a:	d118      	bne.n	80053ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800537c:	4b1e      	ldr	r3, [pc, #120]	; (80053f8 <HAL_RCC_OscConfig+0x508>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a1d      	ldr	r2, [pc, #116]	; (80053f8 <HAL_RCC_OscConfig+0x508>)
 8005382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005386:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005388:	f7fc fde6 	bl	8001f58 <HAL_GetTick>
 800538c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800538e:	e008      	b.n	80053a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005390:	f7fc fde2 	bl	8001f58 <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	2b02      	cmp	r3, #2
 800539c:	d901      	bls.n	80053a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e17a      	b.n	8005698 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053a2:	4b15      	ldr	r3, [pc, #84]	; (80053f8 <HAL_RCC_OscConfig+0x508>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d0f0      	beq.n	8005390 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d108      	bne.n	80053c8 <HAL_RCC_OscConfig+0x4d8>
 80053b6:	4b0f      	ldr	r3, [pc, #60]	; (80053f4 <HAL_RCC_OscConfig+0x504>)
 80053b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053bc:	4a0d      	ldr	r2, [pc, #52]	; (80053f4 <HAL_RCC_OscConfig+0x504>)
 80053be:	f043 0301 	orr.w	r3, r3, #1
 80053c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053c6:	e029      	b.n	800541c <HAL_RCC_OscConfig+0x52c>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	2b05      	cmp	r3, #5
 80053ce:	d115      	bne.n	80053fc <HAL_RCC_OscConfig+0x50c>
 80053d0:	4b08      	ldr	r3, [pc, #32]	; (80053f4 <HAL_RCC_OscConfig+0x504>)
 80053d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d6:	4a07      	ldr	r2, [pc, #28]	; (80053f4 <HAL_RCC_OscConfig+0x504>)
 80053d8:	f043 0304 	orr.w	r3, r3, #4
 80053dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053e0:	4b04      	ldr	r3, [pc, #16]	; (80053f4 <HAL_RCC_OscConfig+0x504>)
 80053e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053e6:	4a03      	ldr	r2, [pc, #12]	; (80053f4 <HAL_RCC_OscConfig+0x504>)
 80053e8:	f043 0301 	orr.w	r3, r3, #1
 80053ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053f0:	e014      	b.n	800541c <HAL_RCC_OscConfig+0x52c>
 80053f2:	bf00      	nop
 80053f4:	40021000 	.word	0x40021000
 80053f8:	40007000 	.word	0x40007000
 80053fc:	4b9c      	ldr	r3, [pc, #624]	; (8005670 <HAL_RCC_OscConfig+0x780>)
 80053fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005402:	4a9b      	ldr	r2, [pc, #620]	; (8005670 <HAL_RCC_OscConfig+0x780>)
 8005404:	f023 0301 	bic.w	r3, r3, #1
 8005408:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800540c:	4b98      	ldr	r3, [pc, #608]	; (8005670 <HAL_RCC_OscConfig+0x780>)
 800540e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005412:	4a97      	ldr	r2, [pc, #604]	; (8005670 <HAL_RCC_OscConfig+0x780>)
 8005414:	f023 0304 	bic.w	r3, r3, #4
 8005418:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d016      	beq.n	8005452 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005424:	f7fc fd98 	bl	8001f58 <HAL_GetTick>
 8005428:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800542a:	e00a      	b.n	8005442 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800542c:	f7fc fd94 	bl	8001f58 <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	f241 3288 	movw	r2, #5000	; 0x1388
 800543a:	4293      	cmp	r3, r2
 800543c:	d901      	bls.n	8005442 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e12a      	b.n	8005698 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005442:	4b8b      	ldr	r3, [pc, #556]	; (8005670 <HAL_RCC_OscConfig+0x780>)
 8005444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005448:	f003 0302 	and.w	r3, r3, #2
 800544c:	2b00      	cmp	r3, #0
 800544e:	d0ed      	beq.n	800542c <HAL_RCC_OscConfig+0x53c>
 8005450:	e015      	b.n	800547e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005452:	f7fc fd81 	bl	8001f58 <HAL_GetTick>
 8005456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005458:	e00a      	b.n	8005470 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800545a:	f7fc fd7d 	bl	8001f58 <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	f241 3288 	movw	r2, #5000	; 0x1388
 8005468:	4293      	cmp	r3, r2
 800546a:	d901      	bls.n	8005470 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e113      	b.n	8005698 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005470:	4b7f      	ldr	r3, [pc, #508]	; (8005670 <HAL_RCC_OscConfig+0x780>)
 8005472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005476:	f003 0302 	and.w	r3, r3, #2
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1ed      	bne.n	800545a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800547e:	7ffb      	ldrb	r3, [r7, #31]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d105      	bne.n	8005490 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005484:	4b7a      	ldr	r3, [pc, #488]	; (8005670 <HAL_RCC_OscConfig+0x780>)
 8005486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005488:	4a79      	ldr	r2, [pc, #484]	; (8005670 <HAL_RCC_OscConfig+0x780>)
 800548a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800548e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005494:	2b00      	cmp	r3, #0
 8005496:	f000 80fe 	beq.w	8005696 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549e:	2b02      	cmp	r3, #2
 80054a0:	f040 80d0 	bne.w	8005644 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80054a4:	4b72      	ldr	r3, [pc, #456]	; (8005670 <HAL_RCC_OscConfig+0x780>)
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	f003 0203 	and.w	r2, r3, #3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d130      	bne.n	800551a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c2:	3b01      	subs	r3, #1
 80054c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d127      	bne.n	800551a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d11f      	bne.n	800551a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80054e4:	2a07      	cmp	r2, #7
 80054e6:	bf14      	ite	ne
 80054e8:	2201      	movne	r2, #1
 80054ea:	2200      	moveq	r2, #0
 80054ec:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d113      	bne.n	800551a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054fc:	085b      	lsrs	r3, r3, #1
 80054fe:	3b01      	subs	r3, #1
 8005500:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005502:	429a      	cmp	r2, r3
 8005504:	d109      	bne.n	800551a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005510:	085b      	lsrs	r3, r3, #1
 8005512:	3b01      	subs	r3, #1
 8005514:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005516:	429a      	cmp	r2, r3
 8005518:	d06e      	beq.n	80055f8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	2b0c      	cmp	r3, #12
 800551e:	d069      	beq.n	80055f4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005520:	4b53      	ldr	r3, [pc, #332]	; (8005670 <HAL_RCC_OscConfig+0x780>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d105      	bne.n	8005538 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800552c:	4b50      	ldr	r3, [pc, #320]	; (8005670 <HAL_RCC_OscConfig+0x780>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d001      	beq.n	800553c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e0ad      	b.n	8005698 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800553c:	4b4c      	ldr	r3, [pc, #304]	; (8005670 <HAL_RCC_OscConfig+0x780>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a4b      	ldr	r2, [pc, #300]	; (8005670 <HAL_RCC_OscConfig+0x780>)
 8005542:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005546:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005548:	f7fc fd06 	bl	8001f58 <HAL_GetTick>
 800554c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800554e:	e008      	b.n	8005562 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005550:	f7fc fd02 	bl	8001f58 <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	2b02      	cmp	r3, #2
 800555c:	d901      	bls.n	8005562 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e09a      	b.n	8005698 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005562:	4b43      	ldr	r3, [pc, #268]	; (8005670 <HAL_RCC_OscConfig+0x780>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1f0      	bne.n	8005550 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800556e:	4b40      	ldr	r3, [pc, #256]	; (8005670 <HAL_RCC_OscConfig+0x780>)
 8005570:	68da      	ldr	r2, [r3, #12]
 8005572:	4b40      	ldr	r3, [pc, #256]	; (8005674 <HAL_RCC_OscConfig+0x784>)
 8005574:	4013      	ands	r3, r2
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800557e:	3a01      	subs	r2, #1
 8005580:	0112      	lsls	r2, r2, #4
 8005582:	4311      	orrs	r1, r2
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005588:	0212      	lsls	r2, r2, #8
 800558a:	4311      	orrs	r1, r2
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005590:	0852      	lsrs	r2, r2, #1
 8005592:	3a01      	subs	r2, #1
 8005594:	0552      	lsls	r2, r2, #21
 8005596:	4311      	orrs	r1, r2
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800559c:	0852      	lsrs	r2, r2, #1
 800559e:	3a01      	subs	r2, #1
 80055a0:	0652      	lsls	r2, r2, #25
 80055a2:	4311      	orrs	r1, r2
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80055a8:	0912      	lsrs	r2, r2, #4
 80055aa:	0452      	lsls	r2, r2, #17
 80055ac:	430a      	orrs	r2, r1
 80055ae:	4930      	ldr	r1, [pc, #192]	; (8005670 <HAL_RCC_OscConfig+0x780>)
 80055b0:	4313      	orrs	r3, r2
 80055b2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80055b4:	4b2e      	ldr	r3, [pc, #184]	; (8005670 <HAL_RCC_OscConfig+0x780>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a2d      	ldr	r2, [pc, #180]	; (8005670 <HAL_RCC_OscConfig+0x780>)
 80055ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80055c0:	4b2b      	ldr	r3, [pc, #172]	; (8005670 <HAL_RCC_OscConfig+0x780>)
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	4a2a      	ldr	r2, [pc, #168]	; (8005670 <HAL_RCC_OscConfig+0x780>)
 80055c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80055cc:	f7fc fcc4 	bl	8001f58 <HAL_GetTick>
 80055d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055d2:	e008      	b.n	80055e6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055d4:	f7fc fcc0 	bl	8001f58 <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d901      	bls.n	80055e6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e058      	b.n	8005698 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055e6:	4b22      	ldr	r3, [pc, #136]	; (8005670 <HAL_RCC_OscConfig+0x780>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d0f0      	beq.n	80055d4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80055f2:	e050      	b.n	8005696 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e04f      	b.n	8005698 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055f8:	4b1d      	ldr	r3, [pc, #116]	; (8005670 <HAL_RCC_OscConfig+0x780>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005600:	2b00      	cmp	r3, #0
 8005602:	d148      	bne.n	8005696 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005604:	4b1a      	ldr	r3, [pc, #104]	; (8005670 <HAL_RCC_OscConfig+0x780>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a19      	ldr	r2, [pc, #100]	; (8005670 <HAL_RCC_OscConfig+0x780>)
 800560a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800560e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005610:	4b17      	ldr	r3, [pc, #92]	; (8005670 <HAL_RCC_OscConfig+0x780>)
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	4a16      	ldr	r2, [pc, #88]	; (8005670 <HAL_RCC_OscConfig+0x780>)
 8005616:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800561a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800561c:	f7fc fc9c 	bl	8001f58 <HAL_GetTick>
 8005620:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005622:	e008      	b.n	8005636 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005624:	f7fc fc98 	bl	8001f58 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b02      	cmp	r3, #2
 8005630:	d901      	bls.n	8005636 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e030      	b.n	8005698 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005636:	4b0e      	ldr	r3, [pc, #56]	; (8005670 <HAL_RCC_OscConfig+0x780>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d0f0      	beq.n	8005624 <HAL_RCC_OscConfig+0x734>
 8005642:	e028      	b.n	8005696 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	2b0c      	cmp	r3, #12
 8005648:	d023      	beq.n	8005692 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800564a:	4b09      	ldr	r3, [pc, #36]	; (8005670 <HAL_RCC_OscConfig+0x780>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a08      	ldr	r2, [pc, #32]	; (8005670 <HAL_RCC_OscConfig+0x780>)
 8005650:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005654:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005656:	f7fc fc7f 	bl	8001f58 <HAL_GetTick>
 800565a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800565c:	e00c      	b.n	8005678 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800565e:	f7fc fc7b 	bl	8001f58 <HAL_GetTick>
 8005662:	4602      	mov	r2, r0
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	2b02      	cmp	r3, #2
 800566a:	d905      	bls.n	8005678 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800566c:	2303      	movs	r3, #3
 800566e:	e013      	b.n	8005698 <HAL_RCC_OscConfig+0x7a8>
 8005670:	40021000 	.word	0x40021000
 8005674:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005678:	4b09      	ldr	r3, [pc, #36]	; (80056a0 <HAL_RCC_OscConfig+0x7b0>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1ec      	bne.n	800565e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005684:	4b06      	ldr	r3, [pc, #24]	; (80056a0 <HAL_RCC_OscConfig+0x7b0>)
 8005686:	68da      	ldr	r2, [r3, #12]
 8005688:	4905      	ldr	r1, [pc, #20]	; (80056a0 <HAL_RCC_OscConfig+0x7b0>)
 800568a:	4b06      	ldr	r3, [pc, #24]	; (80056a4 <HAL_RCC_OscConfig+0x7b4>)
 800568c:	4013      	ands	r3, r2
 800568e:	60cb      	str	r3, [r1, #12]
 8005690:	e001      	b.n	8005696 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e000      	b.n	8005698 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3720      	adds	r7, #32
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	40021000 	.word	0x40021000
 80056a4:	feeefffc 	.word	0xfeeefffc

080056a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d101      	bne.n	80056bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e0e7      	b.n	800588c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056bc:	4b75      	ldr	r3, [pc, #468]	; (8005894 <HAL_RCC_ClockConfig+0x1ec>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0307 	and.w	r3, r3, #7
 80056c4:	683a      	ldr	r2, [r7, #0]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d910      	bls.n	80056ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ca:	4b72      	ldr	r3, [pc, #456]	; (8005894 <HAL_RCC_ClockConfig+0x1ec>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f023 0207 	bic.w	r2, r3, #7
 80056d2:	4970      	ldr	r1, [pc, #448]	; (8005894 <HAL_RCC_ClockConfig+0x1ec>)
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056da:	4b6e      	ldr	r3, [pc, #440]	; (8005894 <HAL_RCC_ClockConfig+0x1ec>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0307 	and.w	r3, r3, #7
 80056e2:	683a      	ldr	r2, [r7, #0]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d001      	beq.n	80056ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e0cf      	b.n	800588c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0302 	and.w	r3, r3, #2
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d010      	beq.n	800571a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	689a      	ldr	r2, [r3, #8]
 80056fc:	4b66      	ldr	r3, [pc, #408]	; (8005898 <HAL_RCC_ClockConfig+0x1f0>)
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005704:	429a      	cmp	r2, r3
 8005706:	d908      	bls.n	800571a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005708:	4b63      	ldr	r3, [pc, #396]	; (8005898 <HAL_RCC_ClockConfig+0x1f0>)
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	4960      	ldr	r1, [pc, #384]	; (8005898 <HAL_RCC_ClockConfig+0x1f0>)
 8005716:	4313      	orrs	r3, r2
 8005718:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	2b00      	cmp	r3, #0
 8005724:	d04c      	beq.n	80057c0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	2b03      	cmp	r3, #3
 800572c:	d107      	bne.n	800573e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800572e:	4b5a      	ldr	r3, [pc, #360]	; (8005898 <HAL_RCC_ClockConfig+0x1f0>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d121      	bne.n	800577e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e0a6      	b.n	800588c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	2b02      	cmp	r3, #2
 8005744:	d107      	bne.n	8005756 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005746:	4b54      	ldr	r3, [pc, #336]	; (8005898 <HAL_RCC_ClockConfig+0x1f0>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d115      	bne.n	800577e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e09a      	b.n	800588c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d107      	bne.n	800576e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800575e:	4b4e      	ldr	r3, [pc, #312]	; (8005898 <HAL_RCC_ClockConfig+0x1f0>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0302 	and.w	r3, r3, #2
 8005766:	2b00      	cmp	r3, #0
 8005768:	d109      	bne.n	800577e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e08e      	b.n	800588c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800576e:	4b4a      	ldr	r3, [pc, #296]	; (8005898 <HAL_RCC_ClockConfig+0x1f0>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005776:	2b00      	cmp	r3, #0
 8005778:	d101      	bne.n	800577e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e086      	b.n	800588c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800577e:	4b46      	ldr	r3, [pc, #280]	; (8005898 <HAL_RCC_ClockConfig+0x1f0>)
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	f023 0203 	bic.w	r2, r3, #3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	4943      	ldr	r1, [pc, #268]	; (8005898 <HAL_RCC_ClockConfig+0x1f0>)
 800578c:	4313      	orrs	r3, r2
 800578e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005790:	f7fc fbe2 	bl	8001f58 <HAL_GetTick>
 8005794:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005796:	e00a      	b.n	80057ae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005798:	f7fc fbde 	bl	8001f58 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d901      	bls.n	80057ae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e06e      	b.n	800588c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057ae:	4b3a      	ldr	r3, [pc, #232]	; (8005898 <HAL_RCC_ClockConfig+0x1f0>)
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f003 020c 	and.w	r2, r3, #12
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	429a      	cmp	r2, r3
 80057be:	d1eb      	bne.n	8005798 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0302 	and.w	r3, r3, #2
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d010      	beq.n	80057ee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	689a      	ldr	r2, [r3, #8]
 80057d0:	4b31      	ldr	r3, [pc, #196]	; (8005898 <HAL_RCC_ClockConfig+0x1f0>)
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057d8:	429a      	cmp	r2, r3
 80057da:	d208      	bcs.n	80057ee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057dc:	4b2e      	ldr	r3, [pc, #184]	; (8005898 <HAL_RCC_ClockConfig+0x1f0>)
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	492b      	ldr	r1, [pc, #172]	; (8005898 <HAL_RCC_ClockConfig+0x1f0>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057ee:	4b29      	ldr	r3, [pc, #164]	; (8005894 <HAL_RCC_ClockConfig+0x1ec>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0307 	and.w	r3, r3, #7
 80057f6:	683a      	ldr	r2, [r7, #0]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d210      	bcs.n	800581e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057fc:	4b25      	ldr	r3, [pc, #148]	; (8005894 <HAL_RCC_ClockConfig+0x1ec>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f023 0207 	bic.w	r2, r3, #7
 8005804:	4923      	ldr	r1, [pc, #140]	; (8005894 <HAL_RCC_ClockConfig+0x1ec>)
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	4313      	orrs	r3, r2
 800580a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800580c:	4b21      	ldr	r3, [pc, #132]	; (8005894 <HAL_RCC_ClockConfig+0x1ec>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0307 	and.w	r3, r3, #7
 8005814:	683a      	ldr	r2, [r7, #0]
 8005816:	429a      	cmp	r2, r3
 8005818:	d001      	beq.n	800581e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e036      	b.n	800588c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0304 	and.w	r3, r3, #4
 8005826:	2b00      	cmp	r3, #0
 8005828:	d008      	beq.n	800583c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800582a:	4b1b      	ldr	r3, [pc, #108]	; (8005898 <HAL_RCC_ClockConfig+0x1f0>)
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	4918      	ldr	r1, [pc, #96]	; (8005898 <HAL_RCC_ClockConfig+0x1f0>)
 8005838:	4313      	orrs	r3, r2
 800583a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0308 	and.w	r3, r3, #8
 8005844:	2b00      	cmp	r3, #0
 8005846:	d009      	beq.n	800585c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005848:	4b13      	ldr	r3, [pc, #76]	; (8005898 <HAL_RCC_ClockConfig+0x1f0>)
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	00db      	lsls	r3, r3, #3
 8005856:	4910      	ldr	r1, [pc, #64]	; (8005898 <HAL_RCC_ClockConfig+0x1f0>)
 8005858:	4313      	orrs	r3, r2
 800585a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800585c:	f000 f824 	bl	80058a8 <HAL_RCC_GetSysClockFreq>
 8005860:	4602      	mov	r2, r0
 8005862:	4b0d      	ldr	r3, [pc, #52]	; (8005898 <HAL_RCC_ClockConfig+0x1f0>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	091b      	lsrs	r3, r3, #4
 8005868:	f003 030f 	and.w	r3, r3, #15
 800586c:	490b      	ldr	r1, [pc, #44]	; (800589c <HAL_RCC_ClockConfig+0x1f4>)
 800586e:	5ccb      	ldrb	r3, [r1, r3]
 8005870:	f003 031f 	and.w	r3, r3, #31
 8005874:	fa22 f303 	lsr.w	r3, r2, r3
 8005878:	4a09      	ldr	r2, [pc, #36]	; (80058a0 <HAL_RCC_ClockConfig+0x1f8>)
 800587a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800587c:	4b09      	ldr	r3, [pc, #36]	; (80058a4 <HAL_RCC_ClockConfig+0x1fc>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4618      	mov	r0, r3
 8005882:	f7fc fb19 	bl	8001eb8 <HAL_InitTick>
 8005886:	4603      	mov	r3, r0
 8005888:	72fb      	strb	r3, [r7, #11]

  return status;
 800588a:	7afb      	ldrb	r3, [r7, #11]
}
 800588c:	4618      	mov	r0, r3
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	40022000 	.word	0x40022000
 8005898:	40021000 	.word	0x40021000
 800589c:	08009c08 	.word	0x08009c08
 80058a0:	20000000 	.word	0x20000000
 80058a4:	20000004 	.word	0x20000004

080058a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b089      	sub	sp, #36	; 0x24
 80058ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80058ae:	2300      	movs	r3, #0
 80058b0:	61fb      	str	r3, [r7, #28]
 80058b2:	2300      	movs	r3, #0
 80058b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058b6:	4b3e      	ldr	r3, [pc, #248]	; (80059b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f003 030c 	and.w	r3, r3, #12
 80058be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058c0:	4b3b      	ldr	r3, [pc, #236]	; (80059b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	f003 0303 	and.w	r3, r3, #3
 80058c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d005      	beq.n	80058dc <HAL_RCC_GetSysClockFreq+0x34>
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	2b0c      	cmp	r3, #12
 80058d4:	d121      	bne.n	800591a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d11e      	bne.n	800591a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80058dc:	4b34      	ldr	r3, [pc, #208]	; (80059b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0308 	and.w	r3, r3, #8
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d107      	bne.n	80058f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80058e8:	4b31      	ldr	r3, [pc, #196]	; (80059b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80058ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058ee:	0a1b      	lsrs	r3, r3, #8
 80058f0:	f003 030f 	and.w	r3, r3, #15
 80058f4:	61fb      	str	r3, [r7, #28]
 80058f6:	e005      	b.n	8005904 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80058f8:	4b2d      	ldr	r3, [pc, #180]	; (80059b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	091b      	lsrs	r3, r3, #4
 80058fe:	f003 030f 	and.w	r3, r3, #15
 8005902:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005904:	4a2b      	ldr	r2, [pc, #172]	; (80059b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800590c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10d      	bne.n	8005930 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005918:	e00a      	b.n	8005930 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	2b04      	cmp	r3, #4
 800591e:	d102      	bne.n	8005926 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005920:	4b25      	ldr	r3, [pc, #148]	; (80059b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005922:	61bb      	str	r3, [r7, #24]
 8005924:	e004      	b.n	8005930 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	2b08      	cmp	r3, #8
 800592a:	d101      	bne.n	8005930 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800592c:	4b23      	ldr	r3, [pc, #140]	; (80059bc <HAL_RCC_GetSysClockFreq+0x114>)
 800592e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	2b0c      	cmp	r3, #12
 8005934:	d134      	bne.n	80059a0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005936:	4b1e      	ldr	r3, [pc, #120]	; (80059b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	f003 0303 	and.w	r3, r3, #3
 800593e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	2b02      	cmp	r3, #2
 8005944:	d003      	beq.n	800594e <HAL_RCC_GetSysClockFreq+0xa6>
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	2b03      	cmp	r3, #3
 800594a:	d003      	beq.n	8005954 <HAL_RCC_GetSysClockFreq+0xac>
 800594c:	e005      	b.n	800595a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800594e:	4b1a      	ldr	r3, [pc, #104]	; (80059b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005950:	617b      	str	r3, [r7, #20]
      break;
 8005952:	e005      	b.n	8005960 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005954:	4b19      	ldr	r3, [pc, #100]	; (80059bc <HAL_RCC_GetSysClockFreq+0x114>)
 8005956:	617b      	str	r3, [r7, #20]
      break;
 8005958:	e002      	b.n	8005960 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	617b      	str	r3, [r7, #20]
      break;
 800595e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005960:	4b13      	ldr	r3, [pc, #76]	; (80059b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	091b      	lsrs	r3, r3, #4
 8005966:	f003 0307 	and.w	r3, r3, #7
 800596a:	3301      	adds	r3, #1
 800596c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800596e:	4b10      	ldr	r3, [pc, #64]	; (80059b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	0a1b      	lsrs	r3, r3, #8
 8005974:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	fb03 f202 	mul.w	r2, r3, r2
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	fbb2 f3f3 	udiv	r3, r2, r3
 8005984:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005986:	4b0a      	ldr	r3, [pc, #40]	; (80059b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	0e5b      	lsrs	r3, r3, #25
 800598c:	f003 0303 	and.w	r3, r3, #3
 8005990:	3301      	adds	r3, #1
 8005992:	005b      	lsls	r3, r3, #1
 8005994:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	fbb2 f3f3 	udiv	r3, r2, r3
 800599e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80059a0:	69bb      	ldr	r3, [r7, #24]
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3724      	adds	r7, #36	; 0x24
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	40021000 	.word	0x40021000
 80059b4:	08009c20 	.word	0x08009c20
 80059b8:	00f42400 	.word	0x00f42400
 80059bc:	007a1200 	.word	0x007a1200

080059c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059c0:	b480      	push	{r7}
 80059c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059c4:	4b03      	ldr	r3, [pc, #12]	; (80059d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80059c6:	681b      	ldr	r3, [r3, #0]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	20000000 	.word	0x20000000

080059d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80059dc:	f7ff fff0 	bl	80059c0 <HAL_RCC_GetHCLKFreq>
 80059e0:	4602      	mov	r2, r0
 80059e2:	4b06      	ldr	r3, [pc, #24]	; (80059fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	0a1b      	lsrs	r3, r3, #8
 80059e8:	f003 0307 	and.w	r3, r3, #7
 80059ec:	4904      	ldr	r1, [pc, #16]	; (8005a00 <HAL_RCC_GetPCLK1Freq+0x28>)
 80059ee:	5ccb      	ldrb	r3, [r1, r3]
 80059f0:	f003 031f 	and.w	r3, r3, #31
 80059f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	40021000 	.word	0x40021000
 8005a00:	08009c18 	.word	0x08009c18

08005a04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005a08:	f7ff ffda 	bl	80059c0 <HAL_RCC_GetHCLKFreq>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	4b06      	ldr	r3, [pc, #24]	; (8005a28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	0adb      	lsrs	r3, r3, #11
 8005a14:	f003 0307 	and.w	r3, r3, #7
 8005a18:	4904      	ldr	r1, [pc, #16]	; (8005a2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a1a:	5ccb      	ldrb	r3, [r1, r3]
 8005a1c:	f003 031f 	and.w	r3, r3, #31
 8005a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	40021000 	.word	0x40021000
 8005a2c:	08009c18 	.word	0x08009c18

08005a30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b086      	sub	sp, #24
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005a38:	2300      	movs	r3, #0
 8005a3a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005a3c:	4b2a      	ldr	r3, [pc, #168]	; (8005ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d003      	beq.n	8005a50 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005a48:	f7ff f9ee 	bl	8004e28 <HAL_PWREx_GetVoltageRange>
 8005a4c:	6178      	str	r0, [r7, #20]
 8005a4e:	e014      	b.n	8005a7a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005a50:	4b25      	ldr	r3, [pc, #148]	; (8005ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a54:	4a24      	ldr	r2, [pc, #144]	; (8005ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a5a:	6593      	str	r3, [r2, #88]	; 0x58
 8005a5c:	4b22      	ldr	r3, [pc, #136]	; (8005ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a64:	60fb      	str	r3, [r7, #12]
 8005a66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005a68:	f7ff f9de 	bl	8004e28 <HAL_PWREx_GetVoltageRange>
 8005a6c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005a6e:	4b1e      	ldr	r3, [pc, #120]	; (8005ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a72:	4a1d      	ldr	r2, [pc, #116]	; (8005ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a78:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a80:	d10b      	bne.n	8005a9a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2b80      	cmp	r3, #128	; 0x80
 8005a86:	d919      	bls.n	8005abc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2ba0      	cmp	r3, #160	; 0xa0
 8005a8c:	d902      	bls.n	8005a94 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005a8e:	2302      	movs	r3, #2
 8005a90:	613b      	str	r3, [r7, #16]
 8005a92:	e013      	b.n	8005abc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a94:	2301      	movs	r3, #1
 8005a96:	613b      	str	r3, [r7, #16]
 8005a98:	e010      	b.n	8005abc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2b80      	cmp	r3, #128	; 0x80
 8005a9e:	d902      	bls.n	8005aa6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	613b      	str	r3, [r7, #16]
 8005aa4:	e00a      	b.n	8005abc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2b80      	cmp	r3, #128	; 0x80
 8005aaa:	d102      	bne.n	8005ab2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005aac:	2302      	movs	r3, #2
 8005aae:	613b      	str	r3, [r7, #16]
 8005ab0:	e004      	b.n	8005abc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2b70      	cmp	r3, #112	; 0x70
 8005ab6:	d101      	bne.n	8005abc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005ab8:	2301      	movs	r3, #1
 8005aba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005abc:	4b0b      	ldr	r3, [pc, #44]	; (8005aec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f023 0207 	bic.w	r2, r3, #7
 8005ac4:	4909      	ldr	r1, [pc, #36]	; (8005aec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005acc:	4b07      	ldr	r3, [pc, #28]	; (8005aec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0307 	and.w	r3, r3, #7
 8005ad4:	693a      	ldr	r2, [r7, #16]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d001      	beq.n	8005ade <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e000      	b.n	8005ae0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3718      	adds	r7, #24
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	40021000 	.word	0x40021000
 8005aec:	40022000 	.word	0x40022000

08005af0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b086      	sub	sp, #24
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005af8:	2300      	movs	r3, #0
 8005afa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005afc:	2300      	movs	r3, #0
 8005afe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d041      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b10:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005b14:	d02a      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005b16:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005b1a:	d824      	bhi.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005b1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b20:	d008      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005b22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b26:	d81e      	bhi.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00a      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005b2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b30:	d010      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005b32:	e018      	b.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005b34:	4b86      	ldr	r3, [pc, #536]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	4a85      	ldr	r2, [pc, #532]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b3e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005b40:	e015      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	3304      	adds	r3, #4
 8005b46:	2100      	movs	r1, #0
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f000 fabb 	bl	80060c4 <RCCEx_PLLSAI1_Config>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005b52:	e00c      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	3320      	adds	r3, #32
 8005b58:	2100      	movs	r1, #0
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f000 fba6 	bl	80062ac <RCCEx_PLLSAI2_Config>
 8005b60:	4603      	mov	r3, r0
 8005b62:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005b64:	e003      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	74fb      	strb	r3, [r7, #19]
      break;
 8005b6a:	e000      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005b6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b6e:	7cfb      	ldrb	r3, [r7, #19]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d10b      	bne.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b74:	4b76      	ldr	r3, [pc, #472]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b7a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b82:	4973      	ldr	r1, [pc, #460]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b84:	4313      	orrs	r3, r2
 8005b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005b8a:	e001      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b8c:	7cfb      	ldrb	r3, [r7, #19]
 8005b8e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d041      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ba0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005ba4:	d02a      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005ba6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005baa:	d824      	bhi.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005bac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005bb0:	d008      	beq.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005bb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005bb6:	d81e      	bhi.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00a      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005bbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005bc0:	d010      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005bc2:	e018      	b.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005bc4:	4b62      	ldr	r3, [pc, #392]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	4a61      	ldr	r2, [pc, #388]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bce:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005bd0:	e015      	b.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	3304      	adds	r3, #4
 8005bd6:	2100      	movs	r1, #0
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f000 fa73 	bl	80060c4 <RCCEx_PLLSAI1_Config>
 8005bde:	4603      	mov	r3, r0
 8005be0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005be2:	e00c      	b.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	3320      	adds	r3, #32
 8005be8:	2100      	movs	r1, #0
 8005bea:	4618      	mov	r0, r3
 8005bec:	f000 fb5e 	bl	80062ac <RCCEx_PLLSAI2_Config>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005bf4:	e003      	b.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	74fb      	strb	r3, [r7, #19]
      break;
 8005bfa:	e000      	b.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005bfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bfe:	7cfb      	ldrb	r3, [r7, #19]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d10b      	bne.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005c04:	4b52      	ldr	r3, [pc, #328]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c0a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c12:	494f      	ldr	r1, [pc, #316]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005c1a:	e001      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c1c:	7cfb      	ldrb	r3, [r7, #19]
 8005c1e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	f000 80a0 	beq.w	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005c32:	4b47      	ldr	r3, [pc, #284]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e000      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005c42:	2300      	movs	r3, #0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00d      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c48:	4b41      	ldr	r3, [pc, #260]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c4c:	4a40      	ldr	r2, [pc, #256]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c52:	6593      	str	r3, [r2, #88]	; 0x58
 8005c54:	4b3e      	ldr	r3, [pc, #248]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c5c:	60bb      	str	r3, [r7, #8]
 8005c5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c60:	2301      	movs	r3, #1
 8005c62:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c64:	4b3b      	ldr	r3, [pc, #236]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a3a      	ldr	r2, [pc, #232]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c70:	f7fc f972 	bl	8001f58 <HAL_GetTick>
 8005c74:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005c76:	e009      	b.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c78:	f7fc f96e 	bl	8001f58 <HAL_GetTick>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d902      	bls.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	74fb      	strb	r3, [r7, #19]
        break;
 8005c8a:	e005      	b.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005c8c:	4b31      	ldr	r3, [pc, #196]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d0ef      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005c98:	7cfb      	ldrb	r3, [r7, #19]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d15c      	bne.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c9e:	4b2c      	ldr	r3, [pc, #176]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ca4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ca8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d01f      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cb6:	697a      	ldr	r2, [r7, #20]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d019      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005cbc:	4b24      	ldr	r3, [pc, #144]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cc6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005cc8:	4b21      	ldr	r3, [pc, #132]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cce:	4a20      	ldr	r2, [pc, #128]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005cd8:	4b1d      	ldr	r3, [pc, #116]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cde:	4a1c      	ldr	r2, [pc, #112]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ce0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ce4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005ce8:	4a19      	ldr	r2, [pc, #100]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	f003 0301 	and.w	r3, r3, #1
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d016      	beq.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cfa:	f7fc f92d 	bl	8001f58 <HAL_GetTick>
 8005cfe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d00:	e00b      	b.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d02:	f7fc f929 	bl	8001f58 <HAL_GetTick>
 8005d06:	4602      	mov	r2, r0
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d902      	bls.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005d14:	2303      	movs	r3, #3
 8005d16:	74fb      	strb	r3, [r7, #19]
            break;
 8005d18:	e006      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d1a:	4b0d      	ldr	r3, [pc, #52]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d20:	f003 0302 	and.w	r3, r3, #2
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d0ec      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005d28:	7cfb      	ldrb	r3, [r7, #19]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d10c      	bne.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d2e:	4b08      	ldr	r3, [pc, #32]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d3e:	4904      	ldr	r1, [pc, #16]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d40:	4313      	orrs	r3, r2
 8005d42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005d46:	e009      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d48:	7cfb      	ldrb	r3, [r7, #19]
 8005d4a:	74bb      	strb	r3, [r7, #18]
 8005d4c:	e006      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005d4e:	bf00      	nop
 8005d50:	40021000 	.word	0x40021000
 8005d54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d58:	7cfb      	ldrb	r3, [r7, #19]
 8005d5a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d5c:	7c7b      	ldrb	r3, [r7, #17]
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d105      	bne.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d62:	4b9e      	ldr	r3, [pc, #632]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d66:	4a9d      	ldr	r2, [pc, #628]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d6c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0301 	and.w	r3, r3, #1
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00a      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d7a:	4b98      	ldr	r3, [pc, #608]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d80:	f023 0203 	bic.w	r2, r3, #3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d88:	4994      	ldr	r1, [pc, #592]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0302 	and.w	r3, r3, #2
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00a      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d9c:	4b8f      	ldr	r3, [pc, #572]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005da2:	f023 020c 	bic.w	r2, r3, #12
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005daa:	498c      	ldr	r1, [pc, #560]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dac:	4313      	orrs	r3, r2
 8005dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0304 	and.w	r3, r3, #4
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00a      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005dbe:	4b87      	ldr	r3, [pc, #540]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dc4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dcc:	4983      	ldr	r1, [pc, #524]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 0308 	and.w	r3, r3, #8
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d00a      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005de0:	4b7e      	ldr	r3, [pc, #504]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dee:	497b      	ldr	r1, [pc, #492]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005df0:	4313      	orrs	r3, r2
 8005df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0310 	and.w	r3, r3, #16
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00a      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005e02:	4b76      	ldr	r3, [pc, #472]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e10:	4972      	ldr	r1, [pc, #456]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e12:	4313      	orrs	r3, r2
 8005e14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0320 	and.w	r3, r3, #32
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00a      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e24:	4b6d      	ldr	r3, [pc, #436]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e2a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e32:	496a      	ldr	r1, [pc, #424]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e34:	4313      	orrs	r3, r2
 8005e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00a      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e46:	4b65      	ldr	r3, [pc, #404]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e54:	4961      	ldr	r1, [pc, #388]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e56:	4313      	orrs	r3, r2
 8005e58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00a      	beq.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005e68:	4b5c      	ldr	r3, [pc, #368]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e76:	4959      	ldr	r1, [pc, #356]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00a      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e8a:	4b54      	ldr	r3, [pc, #336]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e90:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e98:	4950      	ldr	r1, [pc, #320]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d00a      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005eac:	4b4b      	ldr	r3, [pc, #300]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eb2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eba:	4948      	ldr	r1, [pc, #288]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00a      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005ece:	4b43      	ldr	r3, [pc, #268]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ed4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005edc:	493f      	ldr	r1, [pc, #252]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d028      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ef0:	4b3a      	ldr	r3, [pc, #232]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ef6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005efe:	4937      	ldr	r1, [pc, #220]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f0e:	d106      	bne.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f10:	4b32      	ldr	r3, [pc, #200]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	4a31      	ldr	r2, [pc, #196]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f1a:	60d3      	str	r3, [r2, #12]
 8005f1c:	e011      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f26:	d10c      	bne.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	3304      	adds	r3, #4
 8005f2c:	2101      	movs	r1, #1
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f000 f8c8 	bl	80060c4 <RCCEx_PLLSAI1_Config>
 8005f34:	4603      	mov	r3, r0
 8005f36:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005f38:	7cfb      	ldrb	r3, [r7, #19]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d001      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005f3e:	7cfb      	ldrb	r3, [r7, #19]
 8005f40:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d028      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005f4e:	4b23      	ldr	r3, [pc, #140]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f54:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f5c:	491f      	ldr	r1, [pc, #124]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f6c:	d106      	bne.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f6e:	4b1b      	ldr	r3, [pc, #108]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	4a1a      	ldr	r2, [pc, #104]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f78:	60d3      	str	r3, [r2, #12]
 8005f7a:	e011      	b.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f84:	d10c      	bne.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	3304      	adds	r3, #4
 8005f8a:	2101      	movs	r1, #1
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f000 f899 	bl	80060c4 <RCCEx_PLLSAI1_Config>
 8005f92:	4603      	mov	r3, r0
 8005f94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f96:	7cfb      	ldrb	r3, [r7, #19]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d001      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005f9c:	7cfb      	ldrb	r3, [r7, #19]
 8005f9e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d02b      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005fac:	4b0b      	ldr	r3, [pc, #44]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fb2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fba:	4908      	ldr	r1, [pc, #32]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fca:	d109      	bne.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fcc:	4b03      	ldr	r3, [pc, #12]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	4a02      	ldr	r2, [pc, #8]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fd6:	60d3      	str	r3, [r2, #12]
 8005fd8:	e014      	b.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005fda:	bf00      	nop
 8005fdc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fe4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005fe8:	d10c      	bne.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	3304      	adds	r3, #4
 8005fee:	2101      	movs	r1, #1
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f000 f867 	bl	80060c4 <RCCEx_PLLSAI1_Config>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ffa:	7cfb      	ldrb	r3, [r7, #19]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d001      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006000:	7cfb      	ldrb	r3, [r7, #19]
 8006002:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800600c:	2b00      	cmp	r3, #0
 800600e:	d02f      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006010:	4b2b      	ldr	r3, [pc, #172]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006016:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800601e:	4928      	ldr	r1, [pc, #160]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006020:	4313      	orrs	r3, r2
 8006022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800602a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800602e:	d10d      	bne.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	3304      	adds	r3, #4
 8006034:	2102      	movs	r1, #2
 8006036:	4618      	mov	r0, r3
 8006038:	f000 f844 	bl	80060c4 <RCCEx_PLLSAI1_Config>
 800603c:	4603      	mov	r3, r0
 800603e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006040:	7cfb      	ldrb	r3, [r7, #19]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d014      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006046:	7cfb      	ldrb	r3, [r7, #19]
 8006048:	74bb      	strb	r3, [r7, #18]
 800604a:	e011      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006050:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006054:	d10c      	bne.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	3320      	adds	r3, #32
 800605a:	2102      	movs	r1, #2
 800605c:	4618      	mov	r0, r3
 800605e:	f000 f925 	bl	80062ac <RCCEx_PLLSAI2_Config>
 8006062:	4603      	mov	r3, r0
 8006064:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006066:	7cfb      	ldrb	r3, [r7, #19]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d001      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800606c:	7cfb      	ldrb	r3, [r7, #19]
 800606e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00a      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800607c:	4b10      	ldr	r3, [pc, #64]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800607e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006082:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800608a:	490d      	ldr	r1, [pc, #52]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800608c:	4313      	orrs	r3, r2
 800608e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00b      	beq.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800609e:	4b08      	ldr	r3, [pc, #32]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80060a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060ae:	4904      	ldr	r1, [pc, #16]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80060b0:	4313      	orrs	r3, r2
 80060b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80060b6:	7cbb      	ldrb	r3, [r7, #18]
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3718      	adds	r7, #24
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	40021000 	.word	0x40021000

080060c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80060ce:	2300      	movs	r3, #0
 80060d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80060d2:	4b75      	ldr	r3, [pc, #468]	; (80062a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	f003 0303 	and.w	r3, r3, #3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d018      	beq.n	8006110 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80060de:	4b72      	ldr	r3, [pc, #456]	; (80062a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	f003 0203 	and.w	r2, r3, #3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d10d      	bne.n	800610a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
       ||
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d009      	beq.n	800610a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80060f6:	4b6c      	ldr	r3, [pc, #432]	; (80062a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	091b      	lsrs	r3, r3, #4
 80060fc:	f003 0307 	and.w	r3, r3, #7
 8006100:	1c5a      	adds	r2, r3, #1
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	685b      	ldr	r3, [r3, #4]
       ||
 8006106:	429a      	cmp	r2, r3
 8006108:	d047      	beq.n	800619a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	73fb      	strb	r3, [r7, #15]
 800610e:	e044      	b.n	800619a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2b03      	cmp	r3, #3
 8006116:	d018      	beq.n	800614a <RCCEx_PLLSAI1_Config+0x86>
 8006118:	2b03      	cmp	r3, #3
 800611a:	d825      	bhi.n	8006168 <RCCEx_PLLSAI1_Config+0xa4>
 800611c:	2b01      	cmp	r3, #1
 800611e:	d002      	beq.n	8006126 <RCCEx_PLLSAI1_Config+0x62>
 8006120:	2b02      	cmp	r3, #2
 8006122:	d009      	beq.n	8006138 <RCCEx_PLLSAI1_Config+0x74>
 8006124:	e020      	b.n	8006168 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006126:	4b60      	ldr	r3, [pc, #384]	; (80062a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 0302 	and.w	r3, r3, #2
 800612e:	2b00      	cmp	r3, #0
 8006130:	d11d      	bne.n	800616e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006136:	e01a      	b.n	800616e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006138:	4b5b      	ldr	r3, [pc, #364]	; (80062a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006140:	2b00      	cmp	r3, #0
 8006142:	d116      	bne.n	8006172 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006148:	e013      	b.n	8006172 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800614a:	4b57      	ldr	r3, [pc, #348]	; (80062a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006152:	2b00      	cmp	r3, #0
 8006154:	d10f      	bne.n	8006176 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006156:	4b54      	ldr	r3, [pc, #336]	; (80062a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d109      	bne.n	8006176 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006166:	e006      	b.n	8006176 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	73fb      	strb	r3, [r7, #15]
      break;
 800616c:	e004      	b.n	8006178 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800616e:	bf00      	nop
 8006170:	e002      	b.n	8006178 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006172:	bf00      	nop
 8006174:	e000      	b.n	8006178 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006176:	bf00      	nop
    }

    if(status == HAL_OK)
 8006178:	7bfb      	ldrb	r3, [r7, #15]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10d      	bne.n	800619a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800617e:	4b4a      	ldr	r3, [pc, #296]	; (80062a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6819      	ldr	r1, [r3, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	3b01      	subs	r3, #1
 8006190:	011b      	lsls	r3, r3, #4
 8006192:	430b      	orrs	r3, r1
 8006194:	4944      	ldr	r1, [pc, #272]	; (80062a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006196:	4313      	orrs	r3, r2
 8006198:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800619a:	7bfb      	ldrb	r3, [r7, #15]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d17d      	bne.n	800629c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80061a0:	4b41      	ldr	r3, [pc, #260]	; (80062a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a40      	ldr	r2, [pc, #256]	; (80062a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80061aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061ac:	f7fb fed4 	bl	8001f58 <HAL_GetTick>
 80061b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80061b2:	e009      	b.n	80061c8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80061b4:	f7fb fed0 	bl	8001f58 <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d902      	bls.n	80061c8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	73fb      	strb	r3, [r7, #15]
        break;
 80061c6:	e005      	b.n	80061d4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80061c8:	4b37      	ldr	r3, [pc, #220]	; (80062a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1ef      	bne.n	80061b4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80061d4:	7bfb      	ldrb	r3, [r7, #15]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d160      	bne.n	800629c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d111      	bne.n	8006204 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80061e0:	4b31      	ldr	r3, [pc, #196]	; (80062a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80061e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	6892      	ldr	r2, [r2, #8]
 80061f0:	0211      	lsls	r1, r2, #8
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	68d2      	ldr	r2, [r2, #12]
 80061f6:	0912      	lsrs	r2, r2, #4
 80061f8:	0452      	lsls	r2, r2, #17
 80061fa:	430a      	orrs	r2, r1
 80061fc:	492a      	ldr	r1, [pc, #168]	; (80062a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061fe:	4313      	orrs	r3, r2
 8006200:	610b      	str	r3, [r1, #16]
 8006202:	e027      	b.n	8006254 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	2b01      	cmp	r3, #1
 8006208:	d112      	bne.n	8006230 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800620a:	4b27      	ldr	r3, [pc, #156]	; (80062a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006212:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	6892      	ldr	r2, [r2, #8]
 800621a:	0211      	lsls	r1, r2, #8
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	6912      	ldr	r2, [r2, #16]
 8006220:	0852      	lsrs	r2, r2, #1
 8006222:	3a01      	subs	r2, #1
 8006224:	0552      	lsls	r2, r2, #21
 8006226:	430a      	orrs	r2, r1
 8006228:	491f      	ldr	r1, [pc, #124]	; (80062a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800622a:	4313      	orrs	r3, r2
 800622c:	610b      	str	r3, [r1, #16]
 800622e:	e011      	b.n	8006254 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006230:	4b1d      	ldr	r3, [pc, #116]	; (80062a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006238:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	6892      	ldr	r2, [r2, #8]
 8006240:	0211      	lsls	r1, r2, #8
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	6952      	ldr	r2, [r2, #20]
 8006246:	0852      	lsrs	r2, r2, #1
 8006248:	3a01      	subs	r2, #1
 800624a:	0652      	lsls	r2, r2, #25
 800624c:	430a      	orrs	r2, r1
 800624e:	4916      	ldr	r1, [pc, #88]	; (80062a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006250:	4313      	orrs	r3, r2
 8006252:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006254:	4b14      	ldr	r3, [pc, #80]	; (80062a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a13      	ldr	r2, [pc, #76]	; (80062a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800625a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800625e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006260:	f7fb fe7a 	bl	8001f58 <HAL_GetTick>
 8006264:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006266:	e009      	b.n	800627c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006268:	f7fb fe76 	bl	8001f58 <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	2b02      	cmp	r3, #2
 8006274:	d902      	bls.n	800627c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	73fb      	strb	r3, [r7, #15]
          break;
 800627a:	e005      	b.n	8006288 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800627c:	4b0a      	ldr	r3, [pc, #40]	; (80062a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006284:	2b00      	cmp	r3, #0
 8006286:	d0ef      	beq.n	8006268 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006288:	7bfb      	ldrb	r3, [r7, #15]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d106      	bne.n	800629c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800628e:	4b06      	ldr	r3, [pc, #24]	; (80062a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006290:	691a      	ldr	r2, [r3, #16]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	699b      	ldr	r3, [r3, #24]
 8006296:	4904      	ldr	r1, [pc, #16]	; (80062a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006298:	4313      	orrs	r3, r2
 800629a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800629c:	7bfb      	ldrb	r3, [r7, #15]
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	40021000 	.word	0x40021000

080062ac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062b6:	2300      	movs	r3, #0
 80062b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80062ba:	4b6a      	ldr	r3, [pc, #424]	; (8006464 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	f003 0303 	and.w	r3, r3, #3
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d018      	beq.n	80062f8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80062c6:	4b67      	ldr	r3, [pc, #412]	; (8006464 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	f003 0203 	and.w	r2, r3, #3
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d10d      	bne.n	80062f2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
       ||
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d009      	beq.n	80062f2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80062de:	4b61      	ldr	r3, [pc, #388]	; (8006464 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	091b      	lsrs	r3, r3, #4
 80062e4:	f003 0307 	and.w	r3, r3, #7
 80062e8:	1c5a      	adds	r2, r3, #1
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685b      	ldr	r3, [r3, #4]
       ||
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d047      	beq.n	8006382 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	73fb      	strb	r3, [r7, #15]
 80062f6:	e044      	b.n	8006382 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2b03      	cmp	r3, #3
 80062fe:	d018      	beq.n	8006332 <RCCEx_PLLSAI2_Config+0x86>
 8006300:	2b03      	cmp	r3, #3
 8006302:	d825      	bhi.n	8006350 <RCCEx_PLLSAI2_Config+0xa4>
 8006304:	2b01      	cmp	r3, #1
 8006306:	d002      	beq.n	800630e <RCCEx_PLLSAI2_Config+0x62>
 8006308:	2b02      	cmp	r3, #2
 800630a:	d009      	beq.n	8006320 <RCCEx_PLLSAI2_Config+0x74>
 800630c:	e020      	b.n	8006350 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800630e:	4b55      	ldr	r3, [pc, #340]	; (8006464 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 0302 	and.w	r3, r3, #2
 8006316:	2b00      	cmp	r3, #0
 8006318:	d11d      	bne.n	8006356 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800631e:	e01a      	b.n	8006356 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006320:	4b50      	ldr	r3, [pc, #320]	; (8006464 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006328:	2b00      	cmp	r3, #0
 800632a:	d116      	bne.n	800635a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006330:	e013      	b.n	800635a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006332:	4b4c      	ldr	r3, [pc, #304]	; (8006464 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d10f      	bne.n	800635e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800633e:	4b49      	ldr	r3, [pc, #292]	; (8006464 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d109      	bne.n	800635e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800634e:	e006      	b.n	800635e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	73fb      	strb	r3, [r7, #15]
      break;
 8006354:	e004      	b.n	8006360 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006356:	bf00      	nop
 8006358:	e002      	b.n	8006360 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800635a:	bf00      	nop
 800635c:	e000      	b.n	8006360 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800635e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006360:	7bfb      	ldrb	r3, [r7, #15]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d10d      	bne.n	8006382 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006366:	4b3f      	ldr	r3, [pc, #252]	; (8006464 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6819      	ldr	r1, [r3, #0]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	3b01      	subs	r3, #1
 8006378:	011b      	lsls	r3, r3, #4
 800637a:	430b      	orrs	r3, r1
 800637c:	4939      	ldr	r1, [pc, #228]	; (8006464 <RCCEx_PLLSAI2_Config+0x1b8>)
 800637e:	4313      	orrs	r3, r2
 8006380:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006382:	7bfb      	ldrb	r3, [r7, #15]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d167      	bne.n	8006458 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006388:	4b36      	ldr	r3, [pc, #216]	; (8006464 <RCCEx_PLLSAI2_Config+0x1b8>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a35      	ldr	r2, [pc, #212]	; (8006464 <RCCEx_PLLSAI2_Config+0x1b8>)
 800638e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006392:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006394:	f7fb fde0 	bl	8001f58 <HAL_GetTick>
 8006398:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800639a:	e009      	b.n	80063b0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800639c:	f7fb fddc 	bl	8001f58 <HAL_GetTick>
 80063a0:	4602      	mov	r2, r0
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d902      	bls.n	80063b0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	73fb      	strb	r3, [r7, #15]
        break;
 80063ae:	e005      	b.n	80063bc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80063b0:	4b2c      	ldr	r3, [pc, #176]	; (8006464 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d1ef      	bne.n	800639c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80063bc:	7bfb      	ldrb	r3, [r7, #15]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d14a      	bne.n	8006458 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d111      	bne.n	80063ec <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80063c8:	4b26      	ldr	r3, [pc, #152]	; (8006464 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063ca:	695b      	ldr	r3, [r3, #20]
 80063cc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80063d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	6892      	ldr	r2, [r2, #8]
 80063d8:	0211      	lsls	r1, r2, #8
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	68d2      	ldr	r2, [r2, #12]
 80063de:	0912      	lsrs	r2, r2, #4
 80063e0:	0452      	lsls	r2, r2, #17
 80063e2:	430a      	orrs	r2, r1
 80063e4:	491f      	ldr	r1, [pc, #124]	; (8006464 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063e6:	4313      	orrs	r3, r2
 80063e8:	614b      	str	r3, [r1, #20]
 80063ea:	e011      	b.n	8006410 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80063ec:	4b1d      	ldr	r3, [pc, #116]	; (8006464 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063ee:	695b      	ldr	r3, [r3, #20]
 80063f0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80063f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	6892      	ldr	r2, [r2, #8]
 80063fc:	0211      	lsls	r1, r2, #8
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	6912      	ldr	r2, [r2, #16]
 8006402:	0852      	lsrs	r2, r2, #1
 8006404:	3a01      	subs	r2, #1
 8006406:	0652      	lsls	r2, r2, #25
 8006408:	430a      	orrs	r2, r1
 800640a:	4916      	ldr	r1, [pc, #88]	; (8006464 <RCCEx_PLLSAI2_Config+0x1b8>)
 800640c:	4313      	orrs	r3, r2
 800640e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006410:	4b14      	ldr	r3, [pc, #80]	; (8006464 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a13      	ldr	r2, [pc, #76]	; (8006464 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800641a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800641c:	f7fb fd9c 	bl	8001f58 <HAL_GetTick>
 8006420:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006422:	e009      	b.n	8006438 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006424:	f7fb fd98 	bl	8001f58 <HAL_GetTick>
 8006428:	4602      	mov	r2, r0
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	2b02      	cmp	r3, #2
 8006430:	d902      	bls.n	8006438 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006432:	2303      	movs	r3, #3
 8006434:	73fb      	strb	r3, [r7, #15]
          break;
 8006436:	e005      	b.n	8006444 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006438:	4b0a      	ldr	r3, [pc, #40]	; (8006464 <RCCEx_PLLSAI2_Config+0x1b8>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d0ef      	beq.n	8006424 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006444:	7bfb      	ldrb	r3, [r7, #15]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d106      	bne.n	8006458 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800644a:	4b06      	ldr	r3, [pc, #24]	; (8006464 <RCCEx_PLLSAI2_Config+0x1b8>)
 800644c:	695a      	ldr	r2, [r3, #20]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	4904      	ldr	r1, [pc, #16]	; (8006464 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006454:	4313      	orrs	r3, r2
 8006456:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006458:	7bfb      	ldrb	r3, [r7, #15]
}
 800645a:	4618      	mov	r0, r3
 800645c:	3710      	adds	r7, #16
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	40021000 	.word	0x40021000

08006468 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d101      	bne.n	800647a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e095      	b.n	80065a6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647e:	2b00      	cmp	r3, #0
 8006480:	d108      	bne.n	8006494 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800648a:	d009      	beq.n	80064a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	61da      	str	r2, [r3, #28]
 8006492:	e005      	b.n	80064a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d106      	bne.n	80064c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f7fb fa10 	bl	80018e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2202      	movs	r2, #2
 80064c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80064e0:	d902      	bls.n	80064e8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80064e2:	2300      	movs	r3, #0
 80064e4:	60fb      	str	r3, [r7, #12]
 80064e6:	e002      	b.n	80064ee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80064e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064ec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80064f6:	d007      	beq.n	8006508 <HAL_SPI_Init+0xa0>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006500:	d002      	beq.n	8006508 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006518:	431a      	orrs	r2, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	f003 0302 	and.w	r3, r3, #2
 8006522:	431a      	orrs	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	695b      	ldr	r3, [r3, #20]
 8006528:	f003 0301 	and.w	r3, r3, #1
 800652c:	431a      	orrs	r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	699b      	ldr	r3, [r3, #24]
 8006532:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006536:	431a      	orrs	r2, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	69db      	ldr	r3, [r3, #28]
 800653c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006540:	431a      	orrs	r2, r3
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a1b      	ldr	r3, [r3, #32]
 8006546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800654a:	ea42 0103 	orr.w	r1, r2, r3
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006552:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	430a      	orrs	r2, r1
 800655c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	0c1b      	lsrs	r3, r3, #16
 8006564:	f003 0204 	and.w	r2, r3, #4
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656c:	f003 0310 	and.w	r3, r3, #16
 8006570:	431a      	orrs	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006576:	f003 0308 	and.w	r3, r3, #8
 800657a:	431a      	orrs	r2, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006584:	ea42 0103 	orr.w	r1, r2, r3
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	430a      	orrs	r2, r1
 8006594:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
	...

080065b0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b088      	sub	sp, #32
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	099b      	lsrs	r3, r3, #6
 80065cc:	f003 0301 	and.w	r3, r3, #1
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d10f      	bne.n	80065f4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d00a      	beq.n	80065f4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	099b      	lsrs	r3, r3, #6
 80065e2:	f003 0301 	and.w	r3, r3, #1
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d004      	beq.n	80065f4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	4798      	blx	r3
    return;
 80065f2:	e0d7      	b.n	80067a4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	085b      	lsrs	r3, r3, #1
 80065f8:	f003 0301 	and.w	r3, r3, #1
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00a      	beq.n	8006616 <HAL_SPI_IRQHandler+0x66>
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	09db      	lsrs	r3, r3, #7
 8006604:	f003 0301 	and.w	r3, r3, #1
 8006608:	2b00      	cmp	r3, #0
 800660a:	d004      	beq.n	8006616 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	4798      	blx	r3
    return;
 8006614:	e0c6      	b.n	80067a4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	095b      	lsrs	r3, r3, #5
 800661a:	f003 0301 	and.w	r3, r3, #1
 800661e:	2b00      	cmp	r3, #0
 8006620:	d10c      	bne.n	800663c <HAL_SPI_IRQHandler+0x8c>
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	099b      	lsrs	r3, r3, #6
 8006626:	f003 0301 	and.w	r3, r3, #1
 800662a:	2b00      	cmp	r3, #0
 800662c:	d106      	bne.n	800663c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	0a1b      	lsrs	r3, r3, #8
 8006632:	f003 0301 	and.w	r3, r3, #1
 8006636:	2b00      	cmp	r3, #0
 8006638:	f000 80b4 	beq.w	80067a4 <HAL_SPI_IRQHandler+0x1f4>
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	095b      	lsrs	r3, r3, #5
 8006640:	f003 0301 	and.w	r3, r3, #1
 8006644:	2b00      	cmp	r3, #0
 8006646:	f000 80ad 	beq.w	80067a4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	099b      	lsrs	r3, r3, #6
 800664e:	f003 0301 	and.w	r3, r3, #1
 8006652:	2b00      	cmp	r3, #0
 8006654:	d023      	beq.n	800669e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800665c:	b2db      	uxtb	r3, r3
 800665e:	2b03      	cmp	r3, #3
 8006660:	d011      	beq.n	8006686 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006666:	f043 0204 	orr.w	r2, r3, #4
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800666e:	2300      	movs	r3, #0
 8006670:	617b      	str	r3, [r7, #20]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	617b      	str	r3, [r7, #20]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	617b      	str	r3, [r7, #20]
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	e00b      	b.n	800669e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006686:	2300      	movs	r3, #0
 8006688:	613b      	str	r3, [r7, #16]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	613b      	str	r3, [r7, #16]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	613b      	str	r3, [r7, #16]
 800669a:	693b      	ldr	r3, [r7, #16]
        return;
 800669c:	e082      	b.n	80067a4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	095b      	lsrs	r3, r3, #5
 80066a2:	f003 0301 	and.w	r3, r3, #1
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d014      	beq.n	80066d4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066ae:	f043 0201 	orr.w	r2, r3, #1
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80066b6:	2300      	movs	r3, #0
 80066b8:	60fb      	str	r3, [r7, #12]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	60fb      	str	r3, [r7, #12]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066d0:	601a      	str	r2, [r3, #0]
 80066d2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	0a1b      	lsrs	r3, r3, #8
 80066d8:	f003 0301 	and.w	r3, r3, #1
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00c      	beq.n	80066fa <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066e4:	f043 0208 	orr.w	r2, r3, #8
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80066ec:	2300      	movs	r3, #0
 80066ee:	60bb      	str	r3, [r7, #8]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	60bb      	str	r3, [r7, #8]
 80066f8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d04f      	beq.n	80067a2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	685a      	ldr	r2, [r3, #4]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006710:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2201      	movs	r2, #1
 8006716:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	f003 0302 	and.w	r3, r3, #2
 8006720:	2b00      	cmp	r3, #0
 8006722:	d104      	bne.n	800672e <HAL_SPI_IRQHandler+0x17e>
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	2b00      	cmp	r3, #0
 800672c:	d034      	beq.n	8006798 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	685a      	ldr	r2, [r3, #4]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f022 0203 	bic.w	r2, r2, #3
 800673c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006742:	2b00      	cmp	r3, #0
 8006744:	d011      	beq.n	800676a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800674a:	4a18      	ldr	r2, [pc, #96]	; (80067ac <HAL_SPI_IRQHandler+0x1fc>)
 800674c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006752:	4618      	mov	r0, r3
 8006754:	f7fb fe5a 	bl	800240c <HAL_DMA_Abort_IT>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d005      	beq.n	800676a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006762:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800676e:	2b00      	cmp	r3, #0
 8006770:	d016      	beq.n	80067a0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006776:	4a0d      	ldr	r2, [pc, #52]	; (80067ac <HAL_SPI_IRQHandler+0x1fc>)
 8006778:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800677e:	4618      	mov	r0, r3
 8006780:	f7fb fe44 	bl	800240c <HAL_DMA_Abort_IT>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00a      	beq.n	80067a0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800678e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006796:	e003      	b.n	80067a0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 f809 	bl	80067b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800679e:	e000      	b.n	80067a2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80067a0:	bf00      	nop
    return;
 80067a2:	bf00      	nop
  }
}
 80067a4:	3720      	adds	r7, #32
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	080067c5 	.word	0x080067c5

080067b0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80067b8:	bf00      	nop
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80067e0:	68f8      	ldr	r0, [r7, #12]
 80067e2:	f7ff ffe5 	bl	80067b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80067e6:	bf00      	nop
 80067e8:	3710      	adds	r7, #16
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b082      	sub	sp, #8
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d101      	bne.n	8006800 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	e040      	b.n	8006882 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006804:	2b00      	cmp	r3, #0
 8006806:	d106      	bne.n	8006816 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f7fb faab 	bl	8001d6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2224      	movs	r2, #36	; 0x24
 800681a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f022 0201 	bic.w	r2, r2, #1
 800682a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 f82d 	bl	800688c <UART_SetConfig>
 8006832:	4603      	mov	r3, r0
 8006834:	2b01      	cmp	r3, #1
 8006836:	d101      	bne.n	800683c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	e022      	b.n	8006882 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006840:	2b00      	cmp	r3, #0
 8006842:	d002      	beq.n	800684a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 fad9 	bl	8006dfc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	685a      	ldr	r2, [r3, #4]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006858:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	689a      	ldr	r2, [r3, #8]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006868:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f042 0201 	orr.w	r2, r2, #1
 8006878:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 fb60 	bl	8006f40 <UART_CheckIdleState>
 8006880:	4603      	mov	r3, r0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3708      	adds	r7, #8
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
	...

0800688c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800688c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006890:	b08a      	sub	sp, #40	; 0x28
 8006892:	af00      	add	r7, sp, #0
 8006894:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006896:	2300      	movs	r3, #0
 8006898:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	689a      	ldr	r2, [r3, #8]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	431a      	orrs	r2, r3
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	431a      	orrs	r2, r3
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	69db      	ldr	r3, [r3, #28]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	4ba4      	ldr	r3, [pc, #656]	; (8006b4c <UART_SetConfig+0x2c0>)
 80068bc:	4013      	ands	r3, r2
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	6812      	ldr	r2, [r2, #0]
 80068c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068c4:	430b      	orrs	r3, r1
 80068c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	68da      	ldr	r2, [r3, #12]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	430a      	orrs	r2, r1
 80068dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a99      	ldr	r2, [pc, #612]	; (8006b50 <UART_SetConfig+0x2c4>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d004      	beq.n	80068f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6a1b      	ldr	r3, [r3, #32]
 80068f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068f4:	4313      	orrs	r3, r2
 80068f6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006908:	430a      	orrs	r2, r1
 800690a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a90      	ldr	r2, [pc, #576]	; (8006b54 <UART_SetConfig+0x2c8>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d126      	bne.n	8006964 <UART_SetConfig+0xd8>
 8006916:	4b90      	ldr	r3, [pc, #576]	; (8006b58 <UART_SetConfig+0x2cc>)
 8006918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800691c:	f003 0303 	and.w	r3, r3, #3
 8006920:	2b03      	cmp	r3, #3
 8006922:	d81b      	bhi.n	800695c <UART_SetConfig+0xd0>
 8006924:	a201      	add	r2, pc, #4	; (adr r2, 800692c <UART_SetConfig+0xa0>)
 8006926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800692a:	bf00      	nop
 800692c:	0800693d 	.word	0x0800693d
 8006930:	0800694d 	.word	0x0800694d
 8006934:	08006945 	.word	0x08006945
 8006938:	08006955 	.word	0x08006955
 800693c:	2301      	movs	r3, #1
 800693e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006942:	e116      	b.n	8006b72 <UART_SetConfig+0x2e6>
 8006944:	2302      	movs	r3, #2
 8006946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800694a:	e112      	b.n	8006b72 <UART_SetConfig+0x2e6>
 800694c:	2304      	movs	r3, #4
 800694e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006952:	e10e      	b.n	8006b72 <UART_SetConfig+0x2e6>
 8006954:	2308      	movs	r3, #8
 8006956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800695a:	e10a      	b.n	8006b72 <UART_SetConfig+0x2e6>
 800695c:	2310      	movs	r3, #16
 800695e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006962:	e106      	b.n	8006b72 <UART_SetConfig+0x2e6>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a7c      	ldr	r2, [pc, #496]	; (8006b5c <UART_SetConfig+0x2d0>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d138      	bne.n	80069e0 <UART_SetConfig+0x154>
 800696e:	4b7a      	ldr	r3, [pc, #488]	; (8006b58 <UART_SetConfig+0x2cc>)
 8006970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006974:	f003 030c 	and.w	r3, r3, #12
 8006978:	2b0c      	cmp	r3, #12
 800697a:	d82d      	bhi.n	80069d8 <UART_SetConfig+0x14c>
 800697c:	a201      	add	r2, pc, #4	; (adr r2, 8006984 <UART_SetConfig+0xf8>)
 800697e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006982:	bf00      	nop
 8006984:	080069b9 	.word	0x080069b9
 8006988:	080069d9 	.word	0x080069d9
 800698c:	080069d9 	.word	0x080069d9
 8006990:	080069d9 	.word	0x080069d9
 8006994:	080069c9 	.word	0x080069c9
 8006998:	080069d9 	.word	0x080069d9
 800699c:	080069d9 	.word	0x080069d9
 80069a0:	080069d9 	.word	0x080069d9
 80069a4:	080069c1 	.word	0x080069c1
 80069a8:	080069d9 	.word	0x080069d9
 80069ac:	080069d9 	.word	0x080069d9
 80069b0:	080069d9 	.word	0x080069d9
 80069b4:	080069d1 	.word	0x080069d1
 80069b8:	2300      	movs	r3, #0
 80069ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069be:	e0d8      	b.n	8006b72 <UART_SetConfig+0x2e6>
 80069c0:	2302      	movs	r3, #2
 80069c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069c6:	e0d4      	b.n	8006b72 <UART_SetConfig+0x2e6>
 80069c8:	2304      	movs	r3, #4
 80069ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069ce:	e0d0      	b.n	8006b72 <UART_SetConfig+0x2e6>
 80069d0:	2308      	movs	r3, #8
 80069d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069d6:	e0cc      	b.n	8006b72 <UART_SetConfig+0x2e6>
 80069d8:	2310      	movs	r3, #16
 80069da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069de:	e0c8      	b.n	8006b72 <UART_SetConfig+0x2e6>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a5e      	ldr	r2, [pc, #376]	; (8006b60 <UART_SetConfig+0x2d4>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d125      	bne.n	8006a36 <UART_SetConfig+0x1aa>
 80069ea:	4b5b      	ldr	r3, [pc, #364]	; (8006b58 <UART_SetConfig+0x2cc>)
 80069ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069f0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80069f4:	2b30      	cmp	r3, #48	; 0x30
 80069f6:	d016      	beq.n	8006a26 <UART_SetConfig+0x19a>
 80069f8:	2b30      	cmp	r3, #48	; 0x30
 80069fa:	d818      	bhi.n	8006a2e <UART_SetConfig+0x1a2>
 80069fc:	2b20      	cmp	r3, #32
 80069fe:	d00a      	beq.n	8006a16 <UART_SetConfig+0x18a>
 8006a00:	2b20      	cmp	r3, #32
 8006a02:	d814      	bhi.n	8006a2e <UART_SetConfig+0x1a2>
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d002      	beq.n	8006a0e <UART_SetConfig+0x182>
 8006a08:	2b10      	cmp	r3, #16
 8006a0a:	d008      	beq.n	8006a1e <UART_SetConfig+0x192>
 8006a0c:	e00f      	b.n	8006a2e <UART_SetConfig+0x1a2>
 8006a0e:	2300      	movs	r3, #0
 8006a10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a14:	e0ad      	b.n	8006b72 <UART_SetConfig+0x2e6>
 8006a16:	2302      	movs	r3, #2
 8006a18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a1c:	e0a9      	b.n	8006b72 <UART_SetConfig+0x2e6>
 8006a1e:	2304      	movs	r3, #4
 8006a20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a24:	e0a5      	b.n	8006b72 <UART_SetConfig+0x2e6>
 8006a26:	2308      	movs	r3, #8
 8006a28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a2c:	e0a1      	b.n	8006b72 <UART_SetConfig+0x2e6>
 8006a2e:	2310      	movs	r3, #16
 8006a30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a34:	e09d      	b.n	8006b72 <UART_SetConfig+0x2e6>
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a4a      	ldr	r2, [pc, #296]	; (8006b64 <UART_SetConfig+0x2d8>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d125      	bne.n	8006a8c <UART_SetConfig+0x200>
 8006a40:	4b45      	ldr	r3, [pc, #276]	; (8006b58 <UART_SetConfig+0x2cc>)
 8006a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a46:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006a4a:	2bc0      	cmp	r3, #192	; 0xc0
 8006a4c:	d016      	beq.n	8006a7c <UART_SetConfig+0x1f0>
 8006a4e:	2bc0      	cmp	r3, #192	; 0xc0
 8006a50:	d818      	bhi.n	8006a84 <UART_SetConfig+0x1f8>
 8006a52:	2b80      	cmp	r3, #128	; 0x80
 8006a54:	d00a      	beq.n	8006a6c <UART_SetConfig+0x1e0>
 8006a56:	2b80      	cmp	r3, #128	; 0x80
 8006a58:	d814      	bhi.n	8006a84 <UART_SetConfig+0x1f8>
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d002      	beq.n	8006a64 <UART_SetConfig+0x1d8>
 8006a5e:	2b40      	cmp	r3, #64	; 0x40
 8006a60:	d008      	beq.n	8006a74 <UART_SetConfig+0x1e8>
 8006a62:	e00f      	b.n	8006a84 <UART_SetConfig+0x1f8>
 8006a64:	2300      	movs	r3, #0
 8006a66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a6a:	e082      	b.n	8006b72 <UART_SetConfig+0x2e6>
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a72:	e07e      	b.n	8006b72 <UART_SetConfig+0x2e6>
 8006a74:	2304      	movs	r3, #4
 8006a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a7a:	e07a      	b.n	8006b72 <UART_SetConfig+0x2e6>
 8006a7c:	2308      	movs	r3, #8
 8006a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a82:	e076      	b.n	8006b72 <UART_SetConfig+0x2e6>
 8006a84:	2310      	movs	r3, #16
 8006a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a8a:	e072      	b.n	8006b72 <UART_SetConfig+0x2e6>
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a35      	ldr	r2, [pc, #212]	; (8006b68 <UART_SetConfig+0x2dc>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d12a      	bne.n	8006aec <UART_SetConfig+0x260>
 8006a96:	4b30      	ldr	r3, [pc, #192]	; (8006b58 <UART_SetConfig+0x2cc>)
 8006a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aa0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006aa4:	d01a      	beq.n	8006adc <UART_SetConfig+0x250>
 8006aa6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006aaa:	d81b      	bhi.n	8006ae4 <UART_SetConfig+0x258>
 8006aac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ab0:	d00c      	beq.n	8006acc <UART_SetConfig+0x240>
 8006ab2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ab6:	d815      	bhi.n	8006ae4 <UART_SetConfig+0x258>
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d003      	beq.n	8006ac4 <UART_SetConfig+0x238>
 8006abc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ac0:	d008      	beq.n	8006ad4 <UART_SetConfig+0x248>
 8006ac2:	e00f      	b.n	8006ae4 <UART_SetConfig+0x258>
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aca:	e052      	b.n	8006b72 <UART_SetConfig+0x2e6>
 8006acc:	2302      	movs	r3, #2
 8006ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ad2:	e04e      	b.n	8006b72 <UART_SetConfig+0x2e6>
 8006ad4:	2304      	movs	r3, #4
 8006ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ada:	e04a      	b.n	8006b72 <UART_SetConfig+0x2e6>
 8006adc:	2308      	movs	r3, #8
 8006ade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ae2:	e046      	b.n	8006b72 <UART_SetConfig+0x2e6>
 8006ae4:	2310      	movs	r3, #16
 8006ae6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aea:	e042      	b.n	8006b72 <UART_SetConfig+0x2e6>
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a17      	ldr	r2, [pc, #92]	; (8006b50 <UART_SetConfig+0x2c4>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d13a      	bne.n	8006b6c <UART_SetConfig+0x2e0>
 8006af6:	4b18      	ldr	r3, [pc, #96]	; (8006b58 <UART_SetConfig+0x2cc>)
 8006af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006afc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b04:	d01a      	beq.n	8006b3c <UART_SetConfig+0x2b0>
 8006b06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b0a:	d81b      	bhi.n	8006b44 <UART_SetConfig+0x2b8>
 8006b0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b10:	d00c      	beq.n	8006b2c <UART_SetConfig+0x2a0>
 8006b12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b16:	d815      	bhi.n	8006b44 <UART_SetConfig+0x2b8>
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d003      	beq.n	8006b24 <UART_SetConfig+0x298>
 8006b1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b20:	d008      	beq.n	8006b34 <UART_SetConfig+0x2a8>
 8006b22:	e00f      	b.n	8006b44 <UART_SetConfig+0x2b8>
 8006b24:	2300      	movs	r3, #0
 8006b26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b2a:	e022      	b.n	8006b72 <UART_SetConfig+0x2e6>
 8006b2c:	2302      	movs	r3, #2
 8006b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b32:	e01e      	b.n	8006b72 <UART_SetConfig+0x2e6>
 8006b34:	2304      	movs	r3, #4
 8006b36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b3a:	e01a      	b.n	8006b72 <UART_SetConfig+0x2e6>
 8006b3c:	2308      	movs	r3, #8
 8006b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b42:	e016      	b.n	8006b72 <UART_SetConfig+0x2e6>
 8006b44:	2310      	movs	r3, #16
 8006b46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b4a:	e012      	b.n	8006b72 <UART_SetConfig+0x2e6>
 8006b4c:	efff69f3 	.word	0xefff69f3
 8006b50:	40008000 	.word	0x40008000
 8006b54:	40013800 	.word	0x40013800
 8006b58:	40021000 	.word	0x40021000
 8006b5c:	40004400 	.word	0x40004400
 8006b60:	40004800 	.word	0x40004800
 8006b64:	40004c00 	.word	0x40004c00
 8006b68:	40005000 	.word	0x40005000
 8006b6c:	2310      	movs	r3, #16
 8006b6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a9f      	ldr	r2, [pc, #636]	; (8006df4 <UART_SetConfig+0x568>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d17a      	bne.n	8006c72 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b80:	2b08      	cmp	r3, #8
 8006b82:	d824      	bhi.n	8006bce <UART_SetConfig+0x342>
 8006b84:	a201      	add	r2, pc, #4	; (adr r2, 8006b8c <UART_SetConfig+0x300>)
 8006b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b8a:	bf00      	nop
 8006b8c:	08006bb1 	.word	0x08006bb1
 8006b90:	08006bcf 	.word	0x08006bcf
 8006b94:	08006bb9 	.word	0x08006bb9
 8006b98:	08006bcf 	.word	0x08006bcf
 8006b9c:	08006bbf 	.word	0x08006bbf
 8006ba0:	08006bcf 	.word	0x08006bcf
 8006ba4:	08006bcf 	.word	0x08006bcf
 8006ba8:	08006bcf 	.word	0x08006bcf
 8006bac:	08006bc7 	.word	0x08006bc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bb0:	f7fe ff12 	bl	80059d8 <HAL_RCC_GetPCLK1Freq>
 8006bb4:	61f8      	str	r0, [r7, #28]
        break;
 8006bb6:	e010      	b.n	8006bda <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bb8:	4b8f      	ldr	r3, [pc, #572]	; (8006df8 <UART_SetConfig+0x56c>)
 8006bba:	61fb      	str	r3, [r7, #28]
        break;
 8006bbc:	e00d      	b.n	8006bda <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bbe:	f7fe fe73 	bl	80058a8 <HAL_RCC_GetSysClockFreq>
 8006bc2:	61f8      	str	r0, [r7, #28]
        break;
 8006bc4:	e009      	b.n	8006bda <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bca:	61fb      	str	r3, [r7, #28]
        break;
 8006bcc:	e005      	b.n	8006bda <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006bd8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f000 80fb 	beq.w	8006dd8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	685a      	ldr	r2, [r3, #4]
 8006be6:	4613      	mov	r3, r2
 8006be8:	005b      	lsls	r3, r3, #1
 8006bea:	4413      	add	r3, r2
 8006bec:	69fa      	ldr	r2, [r7, #28]
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d305      	bcc.n	8006bfe <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006bf8:	69fa      	ldr	r2, [r7, #28]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d903      	bls.n	8006c06 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006c04:	e0e8      	b.n	8006dd8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	461c      	mov	r4, r3
 8006c0c:	4615      	mov	r5, r2
 8006c0e:	f04f 0200 	mov.w	r2, #0
 8006c12:	f04f 0300 	mov.w	r3, #0
 8006c16:	022b      	lsls	r3, r5, #8
 8006c18:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006c1c:	0222      	lsls	r2, r4, #8
 8006c1e:	68f9      	ldr	r1, [r7, #12]
 8006c20:	6849      	ldr	r1, [r1, #4]
 8006c22:	0849      	lsrs	r1, r1, #1
 8006c24:	2000      	movs	r0, #0
 8006c26:	4688      	mov	r8, r1
 8006c28:	4681      	mov	r9, r0
 8006c2a:	eb12 0a08 	adds.w	sl, r2, r8
 8006c2e:	eb43 0b09 	adc.w	fp, r3, r9
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	603b      	str	r3, [r7, #0]
 8006c3a:	607a      	str	r2, [r7, #4]
 8006c3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c40:	4650      	mov	r0, sl
 8006c42:	4659      	mov	r1, fp
 8006c44:	f7f9 ffb0 	bl	8000ba8 <__aeabi_uldivmod>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	4613      	mov	r3, r2
 8006c4e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c56:	d308      	bcc.n	8006c6a <UART_SetConfig+0x3de>
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c5e:	d204      	bcs.n	8006c6a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	69ba      	ldr	r2, [r7, #24]
 8006c66:	60da      	str	r2, [r3, #12]
 8006c68:	e0b6      	b.n	8006dd8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006c70:	e0b2      	b.n	8006dd8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	69db      	ldr	r3, [r3, #28]
 8006c76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c7a:	d15e      	bne.n	8006d3a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006c7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c80:	2b08      	cmp	r3, #8
 8006c82:	d828      	bhi.n	8006cd6 <UART_SetConfig+0x44a>
 8006c84:	a201      	add	r2, pc, #4	; (adr r2, 8006c8c <UART_SetConfig+0x400>)
 8006c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8a:	bf00      	nop
 8006c8c:	08006cb1 	.word	0x08006cb1
 8006c90:	08006cb9 	.word	0x08006cb9
 8006c94:	08006cc1 	.word	0x08006cc1
 8006c98:	08006cd7 	.word	0x08006cd7
 8006c9c:	08006cc7 	.word	0x08006cc7
 8006ca0:	08006cd7 	.word	0x08006cd7
 8006ca4:	08006cd7 	.word	0x08006cd7
 8006ca8:	08006cd7 	.word	0x08006cd7
 8006cac:	08006ccf 	.word	0x08006ccf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cb0:	f7fe fe92 	bl	80059d8 <HAL_RCC_GetPCLK1Freq>
 8006cb4:	61f8      	str	r0, [r7, #28]
        break;
 8006cb6:	e014      	b.n	8006ce2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cb8:	f7fe fea4 	bl	8005a04 <HAL_RCC_GetPCLK2Freq>
 8006cbc:	61f8      	str	r0, [r7, #28]
        break;
 8006cbe:	e010      	b.n	8006ce2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cc0:	4b4d      	ldr	r3, [pc, #308]	; (8006df8 <UART_SetConfig+0x56c>)
 8006cc2:	61fb      	str	r3, [r7, #28]
        break;
 8006cc4:	e00d      	b.n	8006ce2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cc6:	f7fe fdef 	bl	80058a8 <HAL_RCC_GetSysClockFreq>
 8006cca:	61f8      	str	r0, [r7, #28]
        break;
 8006ccc:	e009      	b.n	8006ce2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cd2:	61fb      	str	r3, [r7, #28]
        break;
 8006cd4:	e005      	b.n	8006ce2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006ce0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d077      	beq.n	8006dd8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	005a      	lsls	r2, r3, #1
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	085b      	lsrs	r3, r3, #1
 8006cf2:	441a      	add	r2, r3
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cfc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	2b0f      	cmp	r3, #15
 8006d02:	d916      	bls.n	8006d32 <UART_SetConfig+0x4a6>
 8006d04:	69bb      	ldr	r3, [r7, #24]
 8006d06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d0a:	d212      	bcs.n	8006d32 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	f023 030f 	bic.w	r3, r3, #15
 8006d14:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	085b      	lsrs	r3, r3, #1
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	f003 0307 	and.w	r3, r3, #7
 8006d20:	b29a      	uxth	r2, r3
 8006d22:	8afb      	ldrh	r3, [r7, #22]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	8afa      	ldrh	r2, [r7, #22]
 8006d2e:	60da      	str	r2, [r3, #12]
 8006d30:	e052      	b.n	8006dd8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006d38:	e04e      	b.n	8006dd8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d3e:	2b08      	cmp	r3, #8
 8006d40:	d827      	bhi.n	8006d92 <UART_SetConfig+0x506>
 8006d42:	a201      	add	r2, pc, #4	; (adr r2, 8006d48 <UART_SetConfig+0x4bc>)
 8006d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d48:	08006d6d 	.word	0x08006d6d
 8006d4c:	08006d75 	.word	0x08006d75
 8006d50:	08006d7d 	.word	0x08006d7d
 8006d54:	08006d93 	.word	0x08006d93
 8006d58:	08006d83 	.word	0x08006d83
 8006d5c:	08006d93 	.word	0x08006d93
 8006d60:	08006d93 	.word	0x08006d93
 8006d64:	08006d93 	.word	0x08006d93
 8006d68:	08006d8b 	.word	0x08006d8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d6c:	f7fe fe34 	bl	80059d8 <HAL_RCC_GetPCLK1Freq>
 8006d70:	61f8      	str	r0, [r7, #28]
        break;
 8006d72:	e014      	b.n	8006d9e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d74:	f7fe fe46 	bl	8005a04 <HAL_RCC_GetPCLK2Freq>
 8006d78:	61f8      	str	r0, [r7, #28]
        break;
 8006d7a:	e010      	b.n	8006d9e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d7c:	4b1e      	ldr	r3, [pc, #120]	; (8006df8 <UART_SetConfig+0x56c>)
 8006d7e:	61fb      	str	r3, [r7, #28]
        break;
 8006d80:	e00d      	b.n	8006d9e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d82:	f7fe fd91 	bl	80058a8 <HAL_RCC_GetSysClockFreq>
 8006d86:	61f8      	str	r0, [r7, #28]
        break;
 8006d88:	e009      	b.n	8006d9e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d8e:	61fb      	str	r3, [r7, #28]
        break;
 8006d90:	e005      	b.n	8006d9e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006d92:	2300      	movs	r3, #0
 8006d94:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006d9c:	bf00      	nop
    }

    if (pclk != 0U)
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d019      	beq.n	8006dd8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	085a      	lsrs	r2, r3, #1
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	441a      	add	r2, r3
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006db6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	2b0f      	cmp	r3, #15
 8006dbc:	d909      	bls.n	8006dd2 <UART_SetConfig+0x546>
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dc4:	d205      	bcs.n	8006dd2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	b29a      	uxth	r2, r3
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	60da      	str	r2, [r3, #12]
 8006dd0:	e002      	b.n	8006dd8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2200      	movs	r2, #0
 8006de2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006de4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3728      	adds	r7, #40	; 0x28
 8006dec:	46bd      	mov	sp, r7
 8006dee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006df2:	bf00      	nop
 8006df4:	40008000 	.word	0x40008000
 8006df8:	00f42400 	.word	0x00f42400

08006dfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e08:	f003 0301 	and.w	r3, r3, #1
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d00a      	beq.n	8006e26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	430a      	orrs	r2, r1
 8006e24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2a:	f003 0302 	and.w	r3, r3, #2
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00a      	beq.n	8006e48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	430a      	orrs	r2, r1
 8006e46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4c:	f003 0304 	and.w	r3, r3, #4
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d00a      	beq.n	8006e6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	430a      	orrs	r2, r1
 8006e68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6e:	f003 0308 	and.w	r3, r3, #8
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00a      	beq.n	8006e8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	430a      	orrs	r2, r1
 8006e8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e90:	f003 0310 	and.w	r3, r3, #16
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d00a      	beq.n	8006eae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	430a      	orrs	r2, r1
 8006eac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb2:	f003 0320 	and.w	r3, r3, #32
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d00a      	beq.n	8006ed0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	430a      	orrs	r2, r1
 8006ece:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d01a      	beq.n	8006f12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	430a      	orrs	r2, r1
 8006ef0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006efa:	d10a      	bne.n	8006f12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	430a      	orrs	r2, r1
 8006f10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00a      	beq.n	8006f34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	430a      	orrs	r2, r1
 8006f32:	605a      	str	r2, [r3, #4]
  }
}
 8006f34:	bf00      	nop
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b086      	sub	sp, #24
 8006f44:	af02      	add	r7, sp, #8
 8006f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f50:	f7fb f802 	bl	8001f58 <HAL_GetTick>
 8006f54:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 0308 	and.w	r3, r3, #8
 8006f60:	2b08      	cmp	r3, #8
 8006f62:	d10e      	bne.n	8006f82 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f68:	9300      	str	r3, [sp, #0]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 f82d 	bl	8006fd2 <UART_WaitOnFlagUntilTimeout>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d001      	beq.n	8006f82 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	e023      	b.n	8006fca <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f003 0304 	and.w	r3, r3, #4
 8006f8c:	2b04      	cmp	r3, #4
 8006f8e:	d10e      	bne.n	8006fae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f94:	9300      	str	r3, [sp, #0]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 f817 	bl	8006fd2 <UART_WaitOnFlagUntilTimeout>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d001      	beq.n	8006fae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e00d      	b.n	8006fca <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2220      	movs	r2, #32
 8006fb2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2220      	movs	r2, #32
 8006fb8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3710      	adds	r7, #16
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}

08006fd2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006fd2:	b580      	push	{r7, lr}
 8006fd4:	b09c      	sub	sp, #112	; 0x70
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	60f8      	str	r0, [r7, #12]
 8006fda:	60b9      	str	r1, [r7, #8]
 8006fdc:	603b      	str	r3, [r7, #0]
 8006fde:	4613      	mov	r3, r2
 8006fe0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fe2:	e0a5      	b.n	8007130 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fe4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fea:	f000 80a1 	beq.w	8007130 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fee:	f7fa ffb3 	bl	8001f58 <HAL_GetTick>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	1ad3      	subs	r3, r2, r3
 8006ff8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d302      	bcc.n	8007004 <UART_WaitOnFlagUntilTimeout+0x32>
 8006ffe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007000:	2b00      	cmp	r3, #0
 8007002:	d13e      	bne.n	8007082 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800700c:	e853 3f00 	ldrex	r3, [r3]
 8007010:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007014:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007018:	667b      	str	r3, [r7, #100]	; 0x64
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	461a      	mov	r2, r3
 8007020:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007022:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007024:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007026:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007028:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800702a:	e841 2300 	strex	r3, r2, [r1]
 800702e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007030:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007032:	2b00      	cmp	r3, #0
 8007034:	d1e6      	bne.n	8007004 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	3308      	adds	r3, #8
 800703c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007040:	e853 3f00 	ldrex	r3, [r3]
 8007044:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007048:	f023 0301 	bic.w	r3, r3, #1
 800704c:	663b      	str	r3, [r7, #96]	; 0x60
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	3308      	adds	r3, #8
 8007054:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007056:	64ba      	str	r2, [r7, #72]	; 0x48
 8007058:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800705c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800705e:	e841 2300 	strex	r3, r2, [r1]
 8007062:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007064:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007066:	2b00      	cmp	r3, #0
 8007068:	d1e5      	bne.n	8007036 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2220      	movs	r2, #32
 800706e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2220      	movs	r2, #32
 8007074:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2200      	movs	r2, #0
 800707a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800707e:	2303      	movs	r3, #3
 8007080:	e067      	b.n	8007152 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f003 0304 	and.w	r3, r3, #4
 800708c:	2b00      	cmp	r3, #0
 800708e:	d04f      	beq.n	8007130 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	69db      	ldr	r3, [r3, #28]
 8007096:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800709a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800709e:	d147      	bne.n	8007130 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070a8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b2:	e853 3f00 	ldrex	r3, [r3]
 80070b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80070be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	461a      	mov	r2, r3
 80070c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070c8:	637b      	str	r3, [r7, #52]	; 0x34
 80070ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070d0:	e841 2300 	strex	r3, r2, [r1]
 80070d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80070d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d1e6      	bne.n	80070aa <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	3308      	adds	r3, #8
 80070e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	e853 3f00 	ldrex	r3, [r3]
 80070ea:	613b      	str	r3, [r7, #16]
   return(result);
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	f023 0301 	bic.w	r3, r3, #1
 80070f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	3308      	adds	r3, #8
 80070fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80070fc:	623a      	str	r2, [r7, #32]
 80070fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007100:	69f9      	ldr	r1, [r7, #28]
 8007102:	6a3a      	ldr	r2, [r7, #32]
 8007104:	e841 2300 	strex	r3, r2, [r1]
 8007108:	61bb      	str	r3, [r7, #24]
   return(result);
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d1e5      	bne.n	80070dc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2220      	movs	r2, #32
 8007114:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2220      	movs	r2, #32
 800711a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2220      	movs	r2, #32
 8007120:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2200      	movs	r2, #0
 8007128:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800712c:	2303      	movs	r3, #3
 800712e:	e010      	b.n	8007152 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	69da      	ldr	r2, [r3, #28]
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	4013      	ands	r3, r2
 800713a:	68ba      	ldr	r2, [r7, #8]
 800713c:	429a      	cmp	r2, r3
 800713e:	bf0c      	ite	eq
 8007140:	2301      	moveq	r3, #1
 8007142:	2300      	movne	r3, #0
 8007144:	b2db      	uxtb	r3, r3
 8007146:	461a      	mov	r2, r3
 8007148:	79fb      	ldrb	r3, [r7, #7]
 800714a:	429a      	cmp	r2, r3
 800714c:	f43f af4a 	beq.w	8006fe4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3770      	adds	r7, #112	; 0x70
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
	...

0800715c <__errno>:
 800715c:	4b01      	ldr	r3, [pc, #4]	; (8007164 <__errno+0x8>)
 800715e:	6818      	ldr	r0, [r3, #0]
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	2000000c 	.word	0x2000000c

08007168 <__libc_init_array>:
 8007168:	b570      	push	{r4, r5, r6, lr}
 800716a:	4d0d      	ldr	r5, [pc, #52]	; (80071a0 <__libc_init_array+0x38>)
 800716c:	4c0d      	ldr	r4, [pc, #52]	; (80071a4 <__libc_init_array+0x3c>)
 800716e:	1b64      	subs	r4, r4, r5
 8007170:	10a4      	asrs	r4, r4, #2
 8007172:	2600      	movs	r6, #0
 8007174:	42a6      	cmp	r6, r4
 8007176:	d109      	bne.n	800718c <__libc_init_array+0x24>
 8007178:	4d0b      	ldr	r5, [pc, #44]	; (80071a8 <__libc_init_array+0x40>)
 800717a:	4c0c      	ldr	r4, [pc, #48]	; (80071ac <__libc_init_array+0x44>)
 800717c:	f002 fd38 	bl	8009bf0 <_init>
 8007180:	1b64      	subs	r4, r4, r5
 8007182:	10a4      	asrs	r4, r4, #2
 8007184:	2600      	movs	r6, #0
 8007186:	42a6      	cmp	r6, r4
 8007188:	d105      	bne.n	8007196 <__libc_init_array+0x2e>
 800718a:	bd70      	pop	{r4, r5, r6, pc}
 800718c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007190:	4798      	blx	r3
 8007192:	3601      	adds	r6, #1
 8007194:	e7ee      	b.n	8007174 <__libc_init_array+0xc>
 8007196:	f855 3b04 	ldr.w	r3, [r5], #4
 800719a:	4798      	blx	r3
 800719c:	3601      	adds	r6, #1
 800719e:	e7f2      	b.n	8007186 <__libc_init_array+0x1e>
 80071a0:	0800a034 	.word	0x0800a034
 80071a4:	0800a034 	.word	0x0800a034
 80071a8:	0800a034 	.word	0x0800a034
 80071ac:	0800a038 	.word	0x0800a038

080071b0 <memset>:
 80071b0:	4402      	add	r2, r0
 80071b2:	4603      	mov	r3, r0
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d100      	bne.n	80071ba <memset+0xa>
 80071b8:	4770      	bx	lr
 80071ba:	f803 1b01 	strb.w	r1, [r3], #1
 80071be:	e7f9      	b.n	80071b4 <memset+0x4>

080071c0 <__cvt>:
 80071c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071c4:	ec55 4b10 	vmov	r4, r5, d0
 80071c8:	2d00      	cmp	r5, #0
 80071ca:	460e      	mov	r6, r1
 80071cc:	4619      	mov	r1, r3
 80071ce:	462b      	mov	r3, r5
 80071d0:	bfbb      	ittet	lt
 80071d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80071d6:	461d      	movlt	r5, r3
 80071d8:	2300      	movge	r3, #0
 80071da:	232d      	movlt	r3, #45	; 0x2d
 80071dc:	700b      	strb	r3, [r1, #0]
 80071de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071e0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80071e4:	4691      	mov	r9, r2
 80071e6:	f023 0820 	bic.w	r8, r3, #32
 80071ea:	bfbc      	itt	lt
 80071ec:	4622      	movlt	r2, r4
 80071ee:	4614      	movlt	r4, r2
 80071f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80071f4:	d005      	beq.n	8007202 <__cvt+0x42>
 80071f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80071fa:	d100      	bne.n	80071fe <__cvt+0x3e>
 80071fc:	3601      	adds	r6, #1
 80071fe:	2102      	movs	r1, #2
 8007200:	e000      	b.n	8007204 <__cvt+0x44>
 8007202:	2103      	movs	r1, #3
 8007204:	ab03      	add	r3, sp, #12
 8007206:	9301      	str	r3, [sp, #4]
 8007208:	ab02      	add	r3, sp, #8
 800720a:	9300      	str	r3, [sp, #0]
 800720c:	ec45 4b10 	vmov	d0, r4, r5
 8007210:	4653      	mov	r3, sl
 8007212:	4632      	mov	r2, r6
 8007214:	f000 fccc 	bl	8007bb0 <_dtoa_r>
 8007218:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800721c:	4607      	mov	r7, r0
 800721e:	d102      	bne.n	8007226 <__cvt+0x66>
 8007220:	f019 0f01 	tst.w	r9, #1
 8007224:	d022      	beq.n	800726c <__cvt+0xac>
 8007226:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800722a:	eb07 0906 	add.w	r9, r7, r6
 800722e:	d110      	bne.n	8007252 <__cvt+0x92>
 8007230:	783b      	ldrb	r3, [r7, #0]
 8007232:	2b30      	cmp	r3, #48	; 0x30
 8007234:	d10a      	bne.n	800724c <__cvt+0x8c>
 8007236:	2200      	movs	r2, #0
 8007238:	2300      	movs	r3, #0
 800723a:	4620      	mov	r0, r4
 800723c:	4629      	mov	r1, r5
 800723e:	f7f9 fc43 	bl	8000ac8 <__aeabi_dcmpeq>
 8007242:	b918      	cbnz	r0, 800724c <__cvt+0x8c>
 8007244:	f1c6 0601 	rsb	r6, r6, #1
 8007248:	f8ca 6000 	str.w	r6, [sl]
 800724c:	f8da 3000 	ldr.w	r3, [sl]
 8007250:	4499      	add	r9, r3
 8007252:	2200      	movs	r2, #0
 8007254:	2300      	movs	r3, #0
 8007256:	4620      	mov	r0, r4
 8007258:	4629      	mov	r1, r5
 800725a:	f7f9 fc35 	bl	8000ac8 <__aeabi_dcmpeq>
 800725e:	b108      	cbz	r0, 8007264 <__cvt+0xa4>
 8007260:	f8cd 900c 	str.w	r9, [sp, #12]
 8007264:	2230      	movs	r2, #48	; 0x30
 8007266:	9b03      	ldr	r3, [sp, #12]
 8007268:	454b      	cmp	r3, r9
 800726a:	d307      	bcc.n	800727c <__cvt+0xbc>
 800726c:	9b03      	ldr	r3, [sp, #12]
 800726e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007270:	1bdb      	subs	r3, r3, r7
 8007272:	4638      	mov	r0, r7
 8007274:	6013      	str	r3, [r2, #0]
 8007276:	b004      	add	sp, #16
 8007278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800727c:	1c59      	adds	r1, r3, #1
 800727e:	9103      	str	r1, [sp, #12]
 8007280:	701a      	strb	r2, [r3, #0]
 8007282:	e7f0      	b.n	8007266 <__cvt+0xa6>

08007284 <__exponent>:
 8007284:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007286:	4603      	mov	r3, r0
 8007288:	2900      	cmp	r1, #0
 800728a:	bfb8      	it	lt
 800728c:	4249      	neglt	r1, r1
 800728e:	f803 2b02 	strb.w	r2, [r3], #2
 8007292:	bfb4      	ite	lt
 8007294:	222d      	movlt	r2, #45	; 0x2d
 8007296:	222b      	movge	r2, #43	; 0x2b
 8007298:	2909      	cmp	r1, #9
 800729a:	7042      	strb	r2, [r0, #1]
 800729c:	dd2a      	ble.n	80072f4 <__exponent+0x70>
 800729e:	f10d 0407 	add.w	r4, sp, #7
 80072a2:	46a4      	mov	ip, r4
 80072a4:	270a      	movs	r7, #10
 80072a6:	46a6      	mov	lr, r4
 80072a8:	460a      	mov	r2, r1
 80072aa:	fb91 f6f7 	sdiv	r6, r1, r7
 80072ae:	fb07 1516 	mls	r5, r7, r6, r1
 80072b2:	3530      	adds	r5, #48	; 0x30
 80072b4:	2a63      	cmp	r2, #99	; 0x63
 80072b6:	f104 34ff 	add.w	r4, r4, #4294967295
 80072ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80072be:	4631      	mov	r1, r6
 80072c0:	dcf1      	bgt.n	80072a6 <__exponent+0x22>
 80072c2:	3130      	adds	r1, #48	; 0x30
 80072c4:	f1ae 0502 	sub.w	r5, lr, #2
 80072c8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80072cc:	1c44      	adds	r4, r0, #1
 80072ce:	4629      	mov	r1, r5
 80072d0:	4561      	cmp	r1, ip
 80072d2:	d30a      	bcc.n	80072ea <__exponent+0x66>
 80072d4:	f10d 0209 	add.w	r2, sp, #9
 80072d8:	eba2 020e 	sub.w	r2, r2, lr
 80072dc:	4565      	cmp	r5, ip
 80072de:	bf88      	it	hi
 80072e0:	2200      	movhi	r2, #0
 80072e2:	4413      	add	r3, r2
 80072e4:	1a18      	subs	r0, r3, r0
 80072e6:	b003      	add	sp, #12
 80072e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80072ee:	f804 2f01 	strb.w	r2, [r4, #1]!
 80072f2:	e7ed      	b.n	80072d0 <__exponent+0x4c>
 80072f4:	2330      	movs	r3, #48	; 0x30
 80072f6:	3130      	adds	r1, #48	; 0x30
 80072f8:	7083      	strb	r3, [r0, #2]
 80072fa:	70c1      	strb	r1, [r0, #3]
 80072fc:	1d03      	adds	r3, r0, #4
 80072fe:	e7f1      	b.n	80072e4 <__exponent+0x60>

08007300 <_printf_float>:
 8007300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007304:	ed2d 8b02 	vpush	{d8}
 8007308:	b08d      	sub	sp, #52	; 0x34
 800730a:	460c      	mov	r4, r1
 800730c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007310:	4616      	mov	r6, r2
 8007312:	461f      	mov	r7, r3
 8007314:	4605      	mov	r5, r0
 8007316:	f001 fa39 	bl	800878c <_localeconv_r>
 800731a:	f8d0 a000 	ldr.w	sl, [r0]
 800731e:	4650      	mov	r0, sl
 8007320:	f7f8 ff56 	bl	80001d0 <strlen>
 8007324:	2300      	movs	r3, #0
 8007326:	930a      	str	r3, [sp, #40]	; 0x28
 8007328:	6823      	ldr	r3, [r4, #0]
 800732a:	9305      	str	r3, [sp, #20]
 800732c:	f8d8 3000 	ldr.w	r3, [r8]
 8007330:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007334:	3307      	adds	r3, #7
 8007336:	f023 0307 	bic.w	r3, r3, #7
 800733a:	f103 0208 	add.w	r2, r3, #8
 800733e:	f8c8 2000 	str.w	r2, [r8]
 8007342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007346:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800734a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800734e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007352:	9307      	str	r3, [sp, #28]
 8007354:	f8cd 8018 	str.w	r8, [sp, #24]
 8007358:	ee08 0a10 	vmov	s16, r0
 800735c:	4b9f      	ldr	r3, [pc, #636]	; (80075dc <_printf_float+0x2dc>)
 800735e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007362:	f04f 32ff 	mov.w	r2, #4294967295
 8007366:	f7f9 fbe1 	bl	8000b2c <__aeabi_dcmpun>
 800736a:	bb88      	cbnz	r0, 80073d0 <_printf_float+0xd0>
 800736c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007370:	4b9a      	ldr	r3, [pc, #616]	; (80075dc <_printf_float+0x2dc>)
 8007372:	f04f 32ff 	mov.w	r2, #4294967295
 8007376:	f7f9 fbbb 	bl	8000af0 <__aeabi_dcmple>
 800737a:	bb48      	cbnz	r0, 80073d0 <_printf_float+0xd0>
 800737c:	2200      	movs	r2, #0
 800737e:	2300      	movs	r3, #0
 8007380:	4640      	mov	r0, r8
 8007382:	4649      	mov	r1, r9
 8007384:	f7f9 fbaa 	bl	8000adc <__aeabi_dcmplt>
 8007388:	b110      	cbz	r0, 8007390 <_printf_float+0x90>
 800738a:	232d      	movs	r3, #45	; 0x2d
 800738c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007390:	4b93      	ldr	r3, [pc, #588]	; (80075e0 <_printf_float+0x2e0>)
 8007392:	4894      	ldr	r0, [pc, #592]	; (80075e4 <_printf_float+0x2e4>)
 8007394:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007398:	bf94      	ite	ls
 800739a:	4698      	movls	r8, r3
 800739c:	4680      	movhi	r8, r0
 800739e:	2303      	movs	r3, #3
 80073a0:	6123      	str	r3, [r4, #16]
 80073a2:	9b05      	ldr	r3, [sp, #20]
 80073a4:	f023 0204 	bic.w	r2, r3, #4
 80073a8:	6022      	str	r2, [r4, #0]
 80073aa:	f04f 0900 	mov.w	r9, #0
 80073ae:	9700      	str	r7, [sp, #0]
 80073b0:	4633      	mov	r3, r6
 80073b2:	aa0b      	add	r2, sp, #44	; 0x2c
 80073b4:	4621      	mov	r1, r4
 80073b6:	4628      	mov	r0, r5
 80073b8:	f000 f9d8 	bl	800776c <_printf_common>
 80073bc:	3001      	adds	r0, #1
 80073be:	f040 8090 	bne.w	80074e2 <_printf_float+0x1e2>
 80073c2:	f04f 30ff 	mov.w	r0, #4294967295
 80073c6:	b00d      	add	sp, #52	; 0x34
 80073c8:	ecbd 8b02 	vpop	{d8}
 80073cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073d0:	4642      	mov	r2, r8
 80073d2:	464b      	mov	r3, r9
 80073d4:	4640      	mov	r0, r8
 80073d6:	4649      	mov	r1, r9
 80073d8:	f7f9 fba8 	bl	8000b2c <__aeabi_dcmpun>
 80073dc:	b140      	cbz	r0, 80073f0 <_printf_float+0xf0>
 80073de:	464b      	mov	r3, r9
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	bfbc      	itt	lt
 80073e4:	232d      	movlt	r3, #45	; 0x2d
 80073e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80073ea:	487f      	ldr	r0, [pc, #508]	; (80075e8 <_printf_float+0x2e8>)
 80073ec:	4b7f      	ldr	r3, [pc, #508]	; (80075ec <_printf_float+0x2ec>)
 80073ee:	e7d1      	b.n	8007394 <_printf_float+0x94>
 80073f0:	6863      	ldr	r3, [r4, #4]
 80073f2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80073f6:	9206      	str	r2, [sp, #24]
 80073f8:	1c5a      	adds	r2, r3, #1
 80073fa:	d13f      	bne.n	800747c <_printf_float+0x17c>
 80073fc:	2306      	movs	r3, #6
 80073fe:	6063      	str	r3, [r4, #4]
 8007400:	9b05      	ldr	r3, [sp, #20]
 8007402:	6861      	ldr	r1, [r4, #4]
 8007404:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007408:	2300      	movs	r3, #0
 800740a:	9303      	str	r3, [sp, #12]
 800740c:	ab0a      	add	r3, sp, #40	; 0x28
 800740e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007412:	ab09      	add	r3, sp, #36	; 0x24
 8007414:	ec49 8b10 	vmov	d0, r8, r9
 8007418:	9300      	str	r3, [sp, #0]
 800741a:	6022      	str	r2, [r4, #0]
 800741c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007420:	4628      	mov	r0, r5
 8007422:	f7ff fecd 	bl	80071c0 <__cvt>
 8007426:	9b06      	ldr	r3, [sp, #24]
 8007428:	9909      	ldr	r1, [sp, #36]	; 0x24
 800742a:	2b47      	cmp	r3, #71	; 0x47
 800742c:	4680      	mov	r8, r0
 800742e:	d108      	bne.n	8007442 <_printf_float+0x142>
 8007430:	1cc8      	adds	r0, r1, #3
 8007432:	db02      	blt.n	800743a <_printf_float+0x13a>
 8007434:	6863      	ldr	r3, [r4, #4]
 8007436:	4299      	cmp	r1, r3
 8007438:	dd41      	ble.n	80074be <_printf_float+0x1be>
 800743a:	f1ab 0b02 	sub.w	fp, fp, #2
 800743e:	fa5f fb8b 	uxtb.w	fp, fp
 8007442:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007446:	d820      	bhi.n	800748a <_printf_float+0x18a>
 8007448:	3901      	subs	r1, #1
 800744a:	465a      	mov	r2, fp
 800744c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007450:	9109      	str	r1, [sp, #36]	; 0x24
 8007452:	f7ff ff17 	bl	8007284 <__exponent>
 8007456:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007458:	1813      	adds	r3, r2, r0
 800745a:	2a01      	cmp	r2, #1
 800745c:	4681      	mov	r9, r0
 800745e:	6123      	str	r3, [r4, #16]
 8007460:	dc02      	bgt.n	8007468 <_printf_float+0x168>
 8007462:	6822      	ldr	r2, [r4, #0]
 8007464:	07d2      	lsls	r2, r2, #31
 8007466:	d501      	bpl.n	800746c <_printf_float+0x16c>
 8007468:	3301      	adds	r3, #1
 800746a:	6123      	str	r3, [r4, #16]
 800746c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007470:	2b00      	cmp	r3, #0
 8007472:	d09c      	beq.n	80073ae <_printf_float+0xae>
 8007474:	232d      	movs	r3, #45	; 0x2d
 8007476:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800747a:	e798      	b.n	80073ae <_printf_float+0xae>
 800747c:	9a06      	ldr	r2, [sp, #24]
 800747e:	2a47      	cmp	r2, #71	; 0x47
 8007480:	d1be      	bne.n	8007400 <_printf_float+0x100>
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1bc      	bne.n	8007400 <_printf_float+0x100>
 8007486:	2301      	movs	r3, #1
 8007488:	e7b9      	b.n	80073fe <_printf_float+0xfe>
 800748a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800748e:	d118      	bne.n	80074c2 <_printf_float+0x1c2>
 8007490:	2900      	cmp	r1, #0
 8007492:	6863      	ldr	r3, [r4, #4]
 8007494:	dd0b      	ble.n	80074ae <_printf_float+0x1ae>
 8007496:	6121      	str	r1, [r4, #16]
 8007498:	b913      	cbnz	r3, 80074a0 <_printf_float+0x1a0>
 800749a:	6822      	ldr	r2, [r4, #0]
 800749c:	07d0      	lsls	r0, r2, #31
 800749e:	d502      	bpl.n	80074a6 <_printf_float+0x1a6>
 80074a0:	3301      	adds	r3, #1
 80074a2:	440b      	add	r3, r1
 80074a4:	6123      	str	r3, [r4, #16]
 80074a6:	65a1      	str	r1, [r4, #88]	; 0x58
 80074a8:	f04f 0900 	mov.w	r9, #0
 80074ac:	e7de      	b.n	800746c <_printf_float+0x16c>
 80074ae:	b913      	cbnz	r3, 80074b6 <_printf_float+0x1b6>
 80074b0:	6822      	ldr	r2, [r4, #0]
 80074b2:	07d2      	lsls	r2, r2, #31
 80074b4:	d501      	bpl.n	80074ba <_printf_float+0x1ba>
 80074b6:	3302      	adds	r3, #2
 80074b8:	e7f4      	b.n	80074a4 <_printf_float+0x1a4>
 80074ba:	2301      	movs	r3, #1
 80074bc:	e7f2      	b.n	80074a4 <_printf_float+0x1a4>
 80074be:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80074c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074c4:	4299      	cmp	r1, r3
 80074c6:	db05      	blt.n	80074d4 <_printf_float+0x1d4>
 80074c8:	6823      	ldr	r3, [r4, #0]
 80074ca:	6121      	str	r1, [r4, #16]
 80074cc:	07d8      	lsls	r0, r3, #31
 80074ce:	d5ea      	bpl.n	80074a6 <_printf_float+0x1a6>
 80074d0:	1c4b      	adds	r3, r1, #1
 80074d2:	e7e7      	b.n	80074a4 <_printf_float+0x1a4>
 80074d4:	2900      	cmp	r1, #0
 80074d6:	bfd4      	ite	le
 80074d8:	f1c1 0202 	rsble	r2, r1, #2
 80074dc:	2201      	movgt	r2, #1
 80074de:	4413      	add	r3, r2
 80074e0:	e7e0      	b.n	80074a4 <_printf_float+0x1a4>
 80074e2:	6823      	ldr	r3, [r4, #0]
 80074e4:	055a      	lsls	r2, r3, #21
 80074e6:	d407      	bmi.n	80074f8 <_printf_float+0x1f8>
 80074e8:	6923      	ldr	r3, [r4, #16]
 80074ea:	4642      	mov	r2, r8
 80074ec:	4631      	mov	r1, r6
 80074ee:	4628      	mov	r0, r5
 80074f0:	47b8      	blx	r7
 80074f2:	3001      	adds	r0, #1
 80074f4:	d12c      	bne.n	8007550 <_printf_float+0x250>
 80074f6:	e764      	b.n	80073c2 <_printf_float+0xc2>
 80074f8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80074fc:	f240 80e0 	bls.w	80076c0 <_printf_float+0x3c0>
 8007500:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007504:	2200      	movs	r2, #0
 8007506:	2300      	movs	r3, #0
 8007508:	f7f9 fade 	bl	8000ac8 <__aeabi_dcmpeq>
 800750c:	2800      	cmp	r0, #0
 800750e:	d034      	beq.n	800757a <_printf_float+0x27a>
 8007510:	4a37      	ldr	r2, [pc, #220]	; (80075f0 <_printf_float+0x2f0>)
 8007512:	2301      	movs	r3, #1
 8007514:	4631      	mov	r1, r6
 8007516:	4628      	mov	r0, r5
 8007518:	47b8      	blx	r7
 800751a:	3001      	adds	r0, #1
 800751c:	f43f af51 	beq.w	80073c2 <_printf_float+0xc2>
 8007520:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007524:	429a      	cmp	r2, r3
 8007526:	db02      	blt.n	800752e <_printf_float+0x22e>
 8007528:	6823      	ldr	r3, [r4, #0]
 800752a:	07d8      	lsls	r0, r3, #31
 800752c:	d510      	bpl.n	8007550 <_printf_float+0x250>
 800752e:	ee18 3a10 	vmov	r3, s16
 8007532:	4652      	mov	r2, sl
 8007534:	4631      	mov	r1, r6
 8007536:	4628      	mov	r0, r5
 8007538:	47b8      	blx	r7
 800753a:	3001      	adds	r0, #1
 800753c:	f43f af41 	beq.w	80073c2 <_printf_float+0xc2>
 8007540:	f04f 0800 	mov.w	r8, #0
 8007544:	f104 091a 	add.w	r9, r4, #26
 8007548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800754a:	3b01      	subs	r3, #1
 800754c:	4543      	cmp	r3, r8
 800754e:	dc09      	bgt.n	8007564 <_printf_float+0x264>
 8007550:	6823      	ldr	r3, [r4, #0]
 8007552:	079b      	lsls	r3, r3, #30
 8007554:	f100 8105 	bmi.w	8007762 <_printf_float+0x462>
 8007558:	68e0      	ldr	r0, [r4, #12]
 800755a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800755c:	4298      	cmp	r0, r3
 800755e:	bfb8      	it	lt
 8007560:	4618      	movlt	r0, r3
 8007562:	e730      	b.n	80073c6 <_printf_float+0xc6>
 8007564:	2301      	movs	r3, #1
 8007566:	464a      	mov	r2, r9
 8007568:	4631      	mov	r1, r6
 800756a:	4628      	mov	r0, r5
 800756c:	47b8      	blx	r7
 800756e:	3001      	adds	r0, #1
 8007570:	f43f af27 	beq.w	80073c2 <_printf_float+0xc2>
 8007574:	f108 0801 	add.w	r8, r8, #1
 8007578:	e7e6      	b.n	8007548 <_printf_float+0x248>
 800757a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800757c:	2b00      	cmp	r3, #0
 800757e:	dc39      	bgt.n	80075f4 <_printf_float+0x2f4>
 8007580:	4a1b      	ldr	r2, [pc, #108]	; (80075f0 <_printf_float+0x2f0>)
 8007582:	2301      	movs	r3, #1
 8007584:	4631      	mov	r1, r6
 8007586:	4628      	mov	r0, r5
 8007588:	47b8      	blx	r7
 800758a:	3001      	adds	r0, #1
 800758c:	f43f af19 	beq.w	80073c2 <_printf_float+0xc2>
 8007590:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007594:	4313      	orrs	r3, r2
 8007596:	d102      	bne.n	800759e <_printf_float+0x29e>
 8007598:	6823      	ldr	r3, [r4, #0]
 800759a:	07d9      	lsls	r1, r3, #31
 800759c:	d5d8      	bpl.n	8007550 <_printf_float+0x250>
 800759e:	ee18 3a10 	vmov	r3, s16
 80075a2:	4652      	mov	r2, sl
 80075a4:	4631      	mov	r1, r6
 80075a6:	4628      	mov	r0, r5
 80075a8:	47b8      	blx	r7
 80075aa:	3001      	adds	r0, #1
 80075ac:	f43f af09 	beq.w	80073c2 <_printf_float+0xc2>
 80075b0:	f04f 0900 	mov.w	r9, #0
 80075b4:	f104 0a1a 	add.w	sl, r4, #26
 80075b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075ba:	425b      	negs	r3, r3
 80075bc:	454b      	cmp	r3, r9
 80075be:	dc01      	bgt.n	80075c4 <_printf_float+0x2c4>
 80075c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075c2:	e792      	b.n	80074ea <_printf_float+0x1ea>
 80075c4:	2301      	movs	r3, #1
 80075c6:	4652      	mov	r2, sl
 80075c8:	4631      	mov	r1, r6
 80075ca:	4628      	mov	r0, r5
 80075cc:	47b8      	blx	r7
 80075ce:	3001      	adds	r0, #1
 80075d0:	f43f aef7 	beq.w	80073c2 <_printf_float+0xc2>
 80075d4:	f109 0901 	add.w	r9, r9, #1
 80075d8:	e7ee      	b.n	80075b8 <_printf_float+0x2b8>
 80075da:	bf00      	nop
 80075dc:	7fefffff 	.word	0x7fefffff
 80075e0:	08009c54 	.word	0x08009c54
 80075e4:	08009c58 	.word	0x08009c58
 80075e8:	08009c60 	.word	0x08009c60
 80075ec:	08009c5c 	.word	0x08009c5c
 80075f0:	08009c64 	.word	0x08009c64
 80075f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80075f8:	429a      	cmp	r2, r3
 80075fa:	bfa8      	it	ge
 80075fc:	461a      	movge	r2, r3
 80075fe:	2a00      	cmp	r2, #0
 8007600:	4691      	mov	r9, r2
 8007602:	dc37      	bgt.n	8007674 <_printf_float+0x374>
 8007604:	f04f 0b00 	mov.w	fp, #0
 8007608:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800760c:	f104 021a 	add.w	r2, r4, #26
 8007610:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007612:	9305      	str	r3, [sp, #20]
 8007614:	eba3 0309 	sub.w	r3, r3, r9
 8007618:	455b      	cmp	r3, fp
 800761a:	dc33      	bgt.n	8007684 <_printf_float+0x384>
 800761c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007620:	429a      	cmp	r2, r3
 8007622:	db3b      	blt.n	800769c <_printf_float+0x39c>
 8007624:	6823      	ldr	r3, [r4, #0]
 8007626:	07da      	lsls	r2, r3, #31
 8007628:	d438      	bmi.n	800769c <_printf_float+0x39c>
 800762a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800762c:	9a05      	ldr	r2, [sp, #20]
 800762e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007630:	1a9a      	subs	r2, r3, r2
 8007632:	eba3 0901 	sub.w	r9, r3, r1
 8007636:	4591      	cmp	r9, r2
 8007638:	bfa8      	it	ge
 800763a:	4691      	movge	r9, r2
 800763c:	f1b9 0f00 	cmp.w	r9, #0
 8007640:	dc35      	bgt.n	80076ae <_printf_float+0x3ae>
 8007642:	f04f 0800 	mov.w	r8, #0
 8007646:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800764a:	f104 0a1a 	add.w	sl, r4, #26
 800764e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007652:	1a9b      	subs	r3, r3, r2
 8007654:	eba3 0309 	sub.w	r3, r3, r9
 8007658:	4543      	cmp	r3, r8
 800765a:	f77f af79 	ble.w	8007550 <_printf_float+0x250>
 800765e:	2301      	movs	r3, #1
 8007660:	4652      	mov	r2, sl
 8007662:	4631      	mov	r1, r6
 8007664:	4628      	mov	r0, r5
 8007666:	47b8      	blx	r7
 8007668:	3001      	adds	r0, #1
 800766a:	f43f aeaa 	beq.w	80073c2 <_printf_float+0xc2>
 800766e:	f108 0801 	add.w	r8, r8, #1
 8007672:	e7ec      	b.n	800764e <_printf_float+0x34e>
 8007674:	4613      	mov	r3, r2
 8007676:	4631      	mov	r1, r6
 8007678:	4642      	mov	r2, r8
 800767a:	4628      	mov	r0, r5
 800767c:	47b8      	blx	r7
 800767e:	3001      	adds	r0, #1
 8007680:	d1c0      	bne.n	8007604 <_printf_float+0x304>
 8007682:	e69e      	b.n	80073c2 <_printf_float+0xc2>
 8007684:	2301      	movs	r3, #1
 8007686:	4631      	mov	r1, r6
 8007688:	4628      	mov	r0, r5
 800768a:	9205      	str	r2, [sp, #20]
 800768c:	47b8      	blx	r7
 800768e:	3001      	adds	r0, #1
 8007690:	f43f ae97 	beq.w	80073c2 <_printf_float+0xc2>
 8007694:	9a05      	ldr	r2, [sp, #20]
 8007696:	f10b 0b01 	add.w	fp, fp, #1
 800769a:	e7b9      	b.n	8007610 <_printf_float+0x310>
 800769c:	ee18 3a10 	vmov	r3, s16
 80076a0:	4652      	mov	r2, sl
 80076a2:	4631      	mov	r1, r6
 80076a4:	4628      	mov	r0, r5
 80076a6:	47b8      	blx	r7
 80076a8:	3001      	adds	r0, #1
 80076aa:	d1be      	bne.n	800762a <_printf_float+0x32a>
 80076ac:	e689      	b.n	80073c2 <_printf_float+0xc2>
 80076ae:	9a05      	ldr	r2, [sp, #20]
 80076b0:	464b      	mov	r3, r9
 80076b2:	4442      	add	r2, r8
 80076b4:	4631      	mov	r1, r6
 80076b6:	4628      	mov	r0, r5
 80076b8:	47b8      	blx	r7
 80076ba:	3001      	adds	r0, #1
 80076bc:	d1c1      	bne.n	8007642 <_printf_float+0x342>
 80076be:	e680      	b.n	80073c2 <_printf_float+0xc2>
 80076c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076c2:	2a01      	cmp	r2, #1
 80076c4:	dc01      	bgt.n	80076ca <_printf_float+0x3ca>
 80076c6:	07db      	lsls	r3, r3, #31
 80076c8:	d538      	bpl.n	800773c <_printf_float+0x43c>
 80076ca:	2301      	movs	r3, #1
 80076cc:	4642      	mov	r2, r8
 80076ce:	4631      	mov	r1, r6
 80076d0:	4628      	mov	r0, r5
 80076d2:	47b8      	blx	r7
 80076d4:	3001      	adds	r0, #1
 80076d6:	f43f ae74 	beq.w	80073c2 <_printf_float+0xc2>
 80076da:	ee18 3a10 	vmov	r3, s16
 80076de:	4652      	mov	r2, sl
 80076e0:	4631      	mov	r1, r6
 80076e2:	4628      	mov	r0, r5
 80076e4:	47b8      	blx	r7
 80076e6:	3001      	adds	r0, #1
 80076e8:	f43f ae6b 	beq.w	80073c2 <_printf_float+0xc2>
 80076ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80076f0:	2200      	movs	r2, #0
 80076f2:	2300      	movs	r3, #0
 80076f4:	f7f9 f9e8 	bl	8000ac8 <__aeabi_dcmpeq>
 80076f8:	b9d8      	cbnz	r0, 8007732 <_printf_float+0x432>
 80076fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076fc:	f108 0201 	add.w	r2, r8, #1
 8007700:	3b01      	subs	r3, #1
 8007702:	4631      	mov	r1, r6
 8007704:	4628      	mov	r0, r5
 8007706:	47b8      	blx	r7
 8007708:	3001      	adds	r0, #1
 800770a:	d10e      	bne.n	800772a <_printf_float+0x42a>
 800770c:	e659      	b.n	80073c2 <_printf_float+0xc2>
 800770e:	2301      	movs	r3, #1
 8007710:	4652      	mov	r2, sl
 8007712:	4631      	mov	r1, r6
 8007714:	4628      	mov	r0, r5
 8007716:	47b8      	blx	r7
 8007718:	3001      	adds	r0, #1
 800771a:	f43f ae52 	beq.w	80073c2 <_printf_float+0xc2>
 800771e:	f108 0801 	add.w	r8, r8, #1
 8007722:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007724:	3b01      	subs	r3, #1
 8007726:	4543      	cmp	r3, r8
 8007728:	dcf1      	bgt.n	800770e <_printf_float+0x40e>
 800772a:	464b      	mov	r3, r9
 800772c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007730:	e6dc      	b.n	80074ec <_printf_float+0x1ec>
 8007732:	f04f 0800 	mov.w	r8, #0
 8007736:	f104 0a1a 	add.w	sl, r4, #26
 800773a:	e7f2      	b.n	8007722 <_printf_float+0x422>
 800773c:	2301      	movs	r3, #1
 800773e:	4642      	mov	r2, r8
 8007740:	e7df      	b.n	8007702 <_printf_float+0x402>
 8007742:	2301      	movs	r3, #1
 8007744:	464a      	mov	r2, r9
 8007746:	4631      	mov	r1, r6
 8007748:	4628      	mov	r0, r5
 800774a:	47b8      	blx	r7
 800774c:	3001      	adds	r0, #1
 800774e:	f43f ae38 	beq.w	80073c2 <_printf_float+0xc2>
 8007752:	f108 0801 	add.w	r8, r8, #1
 8007756:	68e3      	ldr	r3, [r4, #12]
 8007758:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800775a:	1a5b      	subs	r3, r3, r1
 800775c:	4543      	cmp	r3, r8
 800775e:	dcf0      	bgt.n	8007742 <_printf_float+0x442>
 8007760:	e6fa      	b.n	8007558 <_printf_float+0x258>
 8007762:	f04f 0800 	mov.w	r8, #0
 8007766:	f104 0919 	add.w	r9, r4, #25
 800776a:	e7f4      	b.n	8007756 <_printf_float+0x456>

0800776c <_printf_common>:
 800776c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007770:	4616      	mov	r6, r2
 8007772:	4699      	mov	r9, r3
 8007774:	688a      	ldr	r2, [r1, #8]
 8007776:	690b      	ldr	r3, [r1, #16]
 8007778:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800777c:	4293      	cmp	r3, r2
 800777e:	bfb8      	it	lt
 8007780:	4613      	movlt	r3, r2
 8007782:	6033      	str	r3, [r6, #0]
 8007784:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007788:	4607      	mov	r7, r0
 800778a:	460c      	mov	r4, r1
 800778c:	b10a      	cbz	r2, 8007792 <_printf_common+0x26>
 800778e:	3301      	adds	r3, #1
 8007790:	6033      	str	r3, [r6, #0]
 8007792:	6823      	ldr	r3, [r4, #0]
 8007794:	0699      	lsls	r1, r3, #26
 8007796:	bf42      	ittt	mi
 8007798:	6833      	ldrmi	r3, [r6, #0]
 800779a:	3302      	addmi	r3, #2
 800779c:	6033      	strmi	r3, [r6, #0]
 800779e:	6825      	ldr	r5, [r4, #0]
 80077a0:	f015 0506 	ands.w	r5, r5, #6
 80077a4:	d106      	bne.n	80077b4 <_printf_common+0x48>
 80077a6:	f104 0a19 	add.w	sl, r4, #25
 80077aa:	68e3      	ldr	r3, [r4, #12]
 80077ac:	6832      	ldr	r2, [r6, #0]
 80077ae:	1a9b      	subs	r3, r3, r2
 80077b0:	42ab      	cmp	r3, r5
 80077b2:	dc26      	bgt.n	8007802 <_printf_common+0x96>
 80077b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80077b8:	1e13      	subs	r3, r2, #0
 80077ba:	6822      	ldr	r2, [r4, #0]
 80077bc:	bf18      	it	ne
 80077be:	2301      	movne	r3, #1
 80077c0:	0692      	lsls	r2, r2, #26
 80077c2:	d42b      	bmi.n	800781c <_printf_common+0xb0>
 80077c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077c8:	4649      	mov	r1, r9
 80077ca:	4638      	mov	r0, r7
 80077cc:	47c0      	blx	r8
 80077ce:	3001      	adds	r0, #1
 80077d0:	d01e      	beq.n	8007810 <_printf_common+0xa4>
 80077d2:	6823      	ldr	r3, [r4, #0]
 80077d4:	68e5      	ldr	r5, [r4, #12]
 80077d6:	6832      	ldr	r2, [r6, #0]
 80077d8:	f003 0306 	and.w	r3, r3, #6
 80077dc:	2b04      	cmp	r3, #4
 80077de:	bf08      	it	eq
 80077e0:	1aad      	subeq	r5, r5, r2
 80077e2:	68a3      	ldr	r3, [r4, #8]
 80077e4:	6922      	ldr	r2, [r4, #16]
 80077e6:	bf0c      	ite	eq
 80077e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077ec:	2500      	movne	r5, #0
 80077ee:	4293      	cmp	r3, r2
 80077f0:	bfc4      	itt	gt
 80077f2:	1a9b      	subgt	r3, r3, r2
 80077f4:	18ed      	addgt	r5, r5, r3
 80077f6:	2600      	movs	r6, #0
 80077f8:	341a      	adds	r4, #26
 80077fa:	42b5      	cmp	r5, r6
 80077fc:	d11a      	bne.n	8007834 <_printf_common+0xc8>
 80077fe:	2000      	movs	r0, #0
 8007800:	e008      	b.n	8007814 <_printf_common+0xa8>
 8007802:	2301      	movs	r3, #1
 8007804:	4652      	mov	r2, sl
 8007806:	4649      	mov	r1, r9
 8007808:	4638      	mov	r0, r7
 800780a:	47c0      	blx	r8
 800780c:	3001      	adds	r0, #1
 800780e:	d103      	bne.n	8007818 <_printf_common+0xac>
 8007810:	f04f 30ff 	mov.w	r0, #4294967295
 8007814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007818:	3501      	adds	r5, #1
 800781a:	e7c6      	b.n	80077aa <_printf_common+0x3e>
 800781c:	18e1      	adds	r1, r4, r3
 800781e:	1c5a      	adds	r2, r3, #1
 8007820:	2030      	movs	r0, #48	; 0x30
 8007822:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007826:	4422      	add	r2, r4
 8007828:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800782c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007830:	3302      	adds	r3, #2
 8007832:	e7c7      	b.n	80077c4 <_printf_common+0x58>
 8007834:	2301      	movs	r3, #1
 8007836:	4622      	mov	r2, r4
 8007838:	4649      	mov	r1, r9
 800783a:	4638      	mov	r0, r7
 800783c:	47c0      	blx	r8
 800783e:	3001      	adds	r0, #1
 8007840:	d0e6      	beq.n	8007810 <_printf_common+0xa4>
 8007842:	3601      	adds	r6, #1
 8007844:	e7d9      	b.n	80077fa <_printf_common+0x8e>
	...

08007848 <_printf_i>:
 8007848:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800784c:	7e0f      	ldrb	r7, [r1, #24]
 800784e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007850:	2f78      	cmp	r7, #120	; 0x78
 8007852:	4691      	mov	r9, r2
 8007854:	4680      	mov	r8, r0
 8007856:	460c      	mov	r4, r1
 8007858:	469a      	mov	sl, r3
 800785a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800785e:	d807      	bhi.n	8007870 <_printf_i+0x28>
 8007860:	2f62      	cmp	r7, #98	; 0x62
 8007862:	d80a      	bhi.n	800787a <_printf_i+0x32>
 8007864:	2f00      	cmp	r7, #0
 8007866:	f000 80d8 	beq.w	8007a1a <_printf_i+0x1d2>
 800786a:	2f58      	cmp	r7, #88	; 0x58
 800786c:	f000 80a3 	beq.w	80079b6 <_printf_i+0x16e>
 8007870:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007874:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007878:	e03a      	b.n	80078f0 <_printf_i+0xa8>
 800787a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800787e:	2b15      	cmp	r3, #21
 8007880:	d8f6      	bhi.n	8007870 <_printf_i+0x28>
 8007882:	a101      	add	r1, pc, #4	; (adr r1, 8007888 <_printf_i+0x40>)
 8007884:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007888:	080078e1 	.word	0x080078e1
 800788c:	080078f5 	.word	0x080078f5
 8007890:	08007871 	.word	0x08007871
 8007894:	08007871 	.word	0x08007871
 8007898:	08007871 	.word	0x08007871
 800789c:	08007871 	.word	0x08007871
 80078a0:	080078f5 	.word	0x080078f5
 80078a4:	08007871 	.word	0x08007871
 80078a8:	08007871 	.word	0x08007871
 80078ac:	08007871 	.word	0x08007871
 80078b0:	08007871 	.word	0x08007871
 80078b4:	08007a01 	.word	0x08007a01
 80078b8:	08007925 	.word	0x08007925
 80078bc:	080079e3 	.word	0x080079e3
 80078c0:	08007871 	.word	0x08007871
 80078c4:	08007871 	.word	0x08007871
 80078c8:	08007a23 	.word	0x08007a23
 80078cc:	08007871 	.word	0x08007871
 80078d0:	08007925 	.word	0x08007925
 80078d4:	08007871 	.word	0x08007871
 80078d8:	08007871 	.word	0x08007871
 80078dc:	080079eb 	.word	0x080079eb
 80078e0:	682b      	ldr	r3, [r5, #0]
 80078e2:	1d1a      	adds	r2, r3, #4
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	602a      	str	r2, [r5, #0]
 80078e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078f0:	2301      	movs	r3, #1
 80078f2:	e0a3      	b.n	8007a3c <_printf_i+0x1f4>
 80078f4:	6820      	ldr	r0, [r4, #0]
 80078f6:	6829      	ldr	r1, [r5, #0]
 80078f8:	0606      	lsls	r6, r0, #24
 80078fa:	f101 0304 	add.w	r3, r1, #4
 80078fe:	d50a      	bpl.n	8007916 <_printf_i+0xce>
 8007900:	680e      	ldr	r6, [r1, #0]
 8007902:	602b      	str	r3, [r5, #0]
 8007904:	2e00      	cmp	r6, #0
 8007906:	da03      	bge.n	8007910 <_printf_i+0xc8>
 8007908:	232d      	movs	r3, #45	; 0x2d
 800790a:	4276      	negs	r6, r6
 800790c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007910:	485e      	ldr	r0, [pc, #376]	; (8007a8c <_printf_i+0x244>)
 8007912:	230a      	movs	r3, #10
 8007914:	e019      	b.n	800794a <_printf_i+0x102>
 8007916:	680e      	ldr	r6, [r1, #0]
 8007918:	602b      	str	r3, [r5, #0]
 800791a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800791e:	bf18      	it	ne
 8007920:	b236      	sxthne	r6, r6
 8007922:	e7ef      	b.n	8007904 <_printf_i+0xbc>
 8007924:	682b      	ldr	r3, [r5, #0]
 8007926:	6820      	ldr	r0, [r4, #0]
 8007928:	1d19      	adds	r1, r3, #4
 800792a:	6029      	str	r1, [r5, #0]
 800792c:	0601      	lsls	r1, r0, #24
 800792e:	d501      	bpl.n	8007934 <_printf_i+0xec>
 8007930:	681e      	ldr	r6, [r3, #0]
 8007932:	e002      	b.n	800793a <_printf_i+0xf2>
 8007934:	0646      	lsls	r6, r0, #25
 8007936:	d5fb      	bpl.n	8007930 <_printf_i+0xe8>
 8007938:	881e      	ldrh	r6, [r3, #0]
 800793a:	4854      	ldr	r0, [pc, #336]	; (8007a8c <_printf_i+0x244>)
 800793c:	2f6f      	cmp	r7, #111	; 0x6f
 800793e:	bf0c      	ite	eq
 8007940:	2308      	moveq	r3, #8
 8007942:	230a      	movne	r3, #10
 8007944:	2100      	movs	r1, #0
 8007946:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800794a:	6865      	ldr	r5, [r4, #4]
 800794c:	60a5      	str	r5, [r4, #8]
 800794e:	2d00      	cmp	r5, #0
 8007950:	bfa2      	ittt	ge
 8007952:	6821      	ldrge	r1, [r4, #0]
 8007954:	f021 0104 	bicge.w	r1, r1, #4
 8007958:	6021      	strge	r1, [r4, #0]
 800795a:	b90e      	cbnz	r6, 8007960 <_printf_i+0x118>
 800795c:	2d00      	cmp	r5, #0
 800795e:	d04d      	beq.n	80079fc <_printf_i+0x1b4>
 8007960:	4615      	mov	r5, r2
 8007962:	fbb6 f1f3 	udiv	r1, r6, r3
 8007966:	fb03 6711 	mls	r7, r3, r1, r6
 800796a:	5dc7      	ldrb	r7, [r0, r7]
 800796c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007970:	4637      	mov	r7, r6
 8007972:	42bb      	cmp	r3, r7
 8007974:	460e      	mov	r6, r1
 8007976:	d9f4      	bls.n	8007962 <_printf_i+0x11a>
 8007978:	2b08      	cmp	r3, #8
 800797a:	d10b      	bne.n	8007994 <_printf_i+0x14c>
 800797c:	6823      	ldr	r3, [r4, #0]
 800797e:	07de      	lsls	r6, r3, #31
 8007980:	d508      	bpl.n	8007994 <_printf_i+0x14c>
 8007982:	6923      	ldr	r3, [r4, #16]
 8007984:	6861      	ldr	r1, [r4, #4]
 8007986:	4299      	cmp	r1, r3
 8007988:	bfde      	ittt	le
 800798a:	2330      	movle	r3, #48	; 0x30
 800798c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007990:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007994:	1b52      	subs	r2, r2, r5
 8007996:	6122      	str	r2, [r4, #16]
 8007998:	f8cd a000 	str.w	sl, [sp]
 800799c:	464b      	mov	r3, r9
 800799e:	aa03      	add	r2, sp, #12
 80079a0:	4621      	mov	r1, r4
 80079a2:	4640      	mov	r0, r8
 80079a4:	f7ff fee2 	bl	800776c <_printf_common>
 80079a8:	3001      	adds	r0, #1
 80079aa:	d14c      	bne.n	8007a46 <_printf_i+0x1fe>
 80079ac:	f04f 30ff 	mov.w	r0, #4294967295
 80079b0:	b004      	add	sp, #16
 80079b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079b6:	4835      	ldr	r0, [pc, #212]	; (8007a8c <_printf_i+0x244>)
 80079b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80079bc:	6829      	ldr	r1, [r5, #0]
 80079be:	6823      	ldr	r3, [r4, #0]
 80079c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80079c4:	6029      	str	r1, [r5, #0]
 80079c6:	061d      	lsls	r5, r3, #24
 80079c8:	d514      	bpl.n	80079f4 <_printf_i+0x1ac>
 80079ca:	07df      	lsls	r7, r3, #31
 80079cc:	bf44      	itt	mi
 80079ce:	f043 0320 	orrmi.w	r3, r3, #32
 80079d2:	6023      	strmi	r3, [r4, #0]
 80079d4:	b91e      	cbnz	r6, 80079de <_printf_i+0x196>
 80079d6:	6823      	ldr	r3, [r4, #0]
 80079d8:	f023 0320 	bic.w	r3, r3, #32
 80079dc:	6023      	str	r3, [r4, #0]
 80079de:	2310      	movs	r3, #16
 80079e0:	e7b0      	b.n	8007944 <_printf_i+0xfc>
 80079e2:	6823      	ldr	r3, [r4, #0]
 80079e4:	f043 0320 	orr.w	r3, r3, #32
 80079e8:	6023      	str	r3, [r4, #0]
 80079ea:	2378      	movs	r3, #120	; 0x78
 80079ec:	4828      	ldr	r0, [pc, #160]	; (8007a90 <_printf_i+0x248>)
 80079ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80079f2:	e7e3      	b.n	80079bc <_printf_i+0x174>
 80079f4:	0659      	lsls	r1, r3, #25
 80079f6:	bf48      	it	mi
 80079f8:	b2b6      	uxthmi	r6, r6
 80079fa:	e7e6      	b.n	80079ca <_printf_i+0x182>
 80079fc:	4615      	mov	r5, r2
 80079fe:	e7bb      	b.n	8007978 <_printf_i+0x130>
 8007a00:	682b      	ldr	r3, [r5, #0]
 8007a02:	6826      	ldr	r6, [r4, #0]
 8007a04:	6961      	ldr	r1, [r4, #20]
 8007a06:	1d18      	adds	r0, r3, #4
 8007a08:	6028      	str	r0, [r5, #0]
 8007a0a:	0635      	lsls	r5, r6, #24
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	d501      	bpl.n	8007a14 <_printf_i+0x1cc>
 8007a10:	6019      	str	r1, [r3, #0]
 8007a12:	e002      	b.n	8007a1a <_printf_i+0x1d2>
 8007a14:	0670      	lsls	r0, r6, #25
 8007a16:	d5fb      	bpl.n	8007a10 <_printf_i+0x1c8>
 8007a18:	8019      	strh	r1, [r3, #0]
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	6123      	str	r3, [r4, #16]
 8007a1e:	4615      	mov	r5, r2
 8007a20:	e7ba      	b.n	8007998 <_printf_i+0x150>
 8007a22:	682b      	ldr	r3, [r5, #0]
 8007a24:	1d1a      	adds	r2, r3, #4
 8007a26:	602a      	str	r2, [r5, #0]
 8007a28:	681d      	ldr	r5, [r3, #0]
 8007a2a:	6862      	ldr	r2, [r4, #4]
 8007a2c:	2100      	movs	r1, #0
 8007a2e:	4628      	mov	r0, r5
 8007a30:	f7f8 fbd6 	bl	80001e0 <memchr>
 8007a34:	b108      	cbz	r0, 8007a3a <_printf_i+0x1f2>
 8007a36:	1b40      	subs	r0, r0, r5
 8007a38:	6060      	str	r0, [r4, #4]
 8007a3a:	6863      	ldr	r3, [r4, #4]
 8007a3c:	6123      	str	r3, [r4, #16]
 8007a3e:	2300      	movs	r3, #0
 8007a40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a44:	e7a8      	b.n	8007998 <_printf_i+0x150>
 8007a46:	6923      	ldr	r3, [r4, #16]
 8007a48:	462a      	mov	r2, r5
 8007a4a:	4649      	mov	r1, r9
 8007a4c:	4640      	mov	r0, r8
 8007a4e:	47d0      	blx	sl
 8007a50:	3001      	adds	r0, #1
 8007a52:	d0ab      	beq.n	80079ac <_printf_i+0x164>
 8007a54:	6823      	ldr	r3, [r4, #0]
 8007a56:	079b      	lsls	r3, r3, #30
 8007a58:	d413      	bmi.n	8007a82 <_printf_i+0x23a>
 8007a5a:	68e0      	ldr	r0, [r4, #12]
 8007a5c:	9b03      	ldr	r3, [sp, #12]
 8007a5e:	4298      	cmp	r0, r3
 8007a60:	bfb8      	it	lt
 8007a62:	4618      	movlt	r0, r3
 8007a64:	e7a4      	b.n	80079b0 <_printf_i+0x168>
 8007a66:	2301      	movs	r3, #1
 8007a68:	4632      	mov	r2, r6
 8007a6a:	4649      	mov	r1, r9
 8007a6c:	4640      	mov	r0, r8
 8007a6e:	47d0      	blx	sl
 8007a70:	3001      	adds	r0, #1
 8007a72:	d09b      	beq.n	80079ac <_printf_i+0x164>
 8007a74:	3501      	adds	r5, #1
 8007a76:	68e3      	ldr	r3, [r4, #12]
 8007a78:	9903      	ldr	r1, [sp, #12]
 8007a7a:	1a5b      	subs	r3, r3, r1
 8007a7c:	42ab      	cmp	r3, r5
 8007a7e:	dcf2      	bgt.n	8007a66 <_printf_i+0x21e>
 8007a80:	e7eb      	b.n	8007a5a <_printf_i+0x212>
 8007a82:	2500      	movs	r5, #0
 8007a84:	f104 0619 	add.w	r6, r4, #25
 8007a88:	e7f5      	b.n	8007a76 <_printf_i+0x22e>
 8007a8a:	bf00      	nop
 8007a8c:	08009c66 	.word	0x08009c66
 8007a90:	08009c77 	.word	0x08009c77

08007a94 <quorem>:
 8007a94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a98:	6903      	ldr	r3, [r0, #16]
 8007a9a:	690c      	ldr	r4, [r1, #16]
 8007a9c:	42a3      	cmp	r3, r4
 8007a9e:	4607      	mov	r7, r0
 8007aa0:	f2c0 8081 	blt.w	8007ba6 <quorem+0x112>
 8007aa4:	3c01      	subs	r4, #1
 8007aa6:	f101 0814 	add.w	r8, r1, #20
 8007aaa:	f100 0514 	add.w	r5, r0, #20
 8007aae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ab2:	9301      	str	r3, [sp, #4]
 8007ab4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007ab8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007abc:	3301      	adds	r3, #1
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007ac4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007ac8:	fbb2 f6f3 	udiv	r6, r2, r3
 8007acc:	d331      	bcc.n	8007b32 <quorem+0x9e>
 8007ace:	f04f 0e00 	mov.w	lr, #0
 8007ad2:	4640      	mov	r0, r8
 8007ad4:	46ac      	mov	ip, r5
 8007ad6:	46f2      	mov	sl, lr
 8007ad8:	f850 2b04 	ldr.w	r2, [r0], #4
 8007adc:	b293      	uxth	r3, r2
 8007ade:	fb06 e303 	mla	r3, r6, r3, lr
 8007ae2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	ebaa 0303 	sub.w	r3, sl, r3
 8007aec:	f8dc a000 	ldr.w	sl, [ip]
 8007af0:	0c12      	lsrs	r2, r2, #16
 8007af2:	fa13 f38a 	uxtah	r3, r3, sl
 8007af6:	fb06 e202 	mla	r2, r6, r2, lr
 8007afa:	9300      	str	r3, [sp, #0]
 8007afc:	9b00      	ldr	r3, [sp, #0]
 8007afe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007b02:	b292      	uxth	r2, r2
 8007b04:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007b08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b0c:	f8bd 3000 	ldrh.w	r3, [sp]
 8007b10:	4581      	cmp	r9, r0
 8007b12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b16:	f84c 3b04 	str.w	r3, [ip], #4
 8007b1a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007b1e:	d2db      	bcs.n	8007ad8 <quorem+0x44>
 8007b20:	f855 300b 	ldr.w	r3, [r5, fp]
 8007b24:	b92b      	cbnz	r3, 8007b32 <quorem+0x9e>
 8007b26:	9b01      	ldr	r3, [sp, #4]
 8007b28:	3b04      	subs	r3, #4
 8007b2a:	429d      	cmp	r5, r3
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	d32e      	bcc.n	8007b8e <quorem+0xfa>
 8007b30:	613c      	str	r4, [r7, #16]
 8007b32:	4638      	mov	r0, r7
 8007b34:	f001 f8c6 	bl	8008cc4 <__mcmp>
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	db24      	blt.n	8007b86 <quorem+0xf2>
 8007b3c:	3601      	adds	r6, #1
 8007b3e:	4628      	mov	r0, r5
 8007b40:	f04f 0c00 	mov.w	ip, #0
 8007b44:	f858 2b04 	ldr.w	r2, [r8], #4
 8007b48:	f8d0 e000 	ldr.w	lr, [r0]
 8007b4c:	b293      	uxth	r3, r2
 8007b4e:	ebac 0303 	sub.w	r3, ip, r3
 8007b52:	0c12      	lsrs	r2, r2, #16
 8007b54:	fa13 f38e 	uxtah	r3, r3, lr
 8007b58:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007b5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b66:	45c1      	cmp	r9, r8
 8007b68:	f840 3b04 	str.w	r3, [r0], #4
 8007b6c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007b70:	d2e8      	bcs.n	8007b44 <quorem+0xb0>
 8007b72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b7a:	b922      	cbnz	r2, 8007b86 <quorem+0xf2>
 8007b7c:	3b04      	subs	r3, #4
 8007b7e:	429d      	cmp	r5, r3
 8007b80:	461a      	mov	r2, r3
 8007b82:	d30a      	bcc.n	8007b9a <quorem+0x106>
 8007b84:	613c      	str	r4, [r7, #16]
 8007b86:	4630      	mov	r0, r6
 8007b88:	b003      	add	sp, #12
 8007b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b8e:	6812      	ldr	r2, [r2, #0]
 8007b90:	3b04      	subs	r3, #4
 8007b92:	2a00      	cmp	r2, #0
 8007b94:	d1cc      	bne.n	8007b30 <quorem+0x9c>
 8007b96:	3c01      	subs	r4, #1
 8007b98:	e7c7      	b.n	8007b2a <quorem+0x96>
 8007b9a:	6812      	ldr	r2, [r2, #0]
 8007b9c:	3b04      	subs	r3, #4
 8007b9e:	2a00      	cmp	r2, #0
 8007ba0:	d1f0      	bne.n	8007b84 <quorem+0xf0>
 8007ba2:	3c01      	subs	r4, #1
 8007ba4:	e7eb      	b.n	8007b7e <quorem+0xea>
 8007ba6:	2000      	movs	r0, #0
 8007ba8:	e7ee      	b.n	8007b88 <quorem+0xf4>
 8007baa:	0000      	movs	r0, r0
 8007bac:	0000      	movs	r0, r0
	...

08007bb0 <_dtoa_r>:
 8007bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bb4:	ed2d 8b04 	vpush	{d8-d9}
 8007bb8:	ec57 6b10 	vmov	r6, r7, d0
 8007bbc:	b093      	sub	sp, #76	; 0x4c
 8007bbe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007bc0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007bc4:	9106      	str	r1, [sp, #24]
 8007bc6:	ee10 aa10 	vmov	sl, s0
 8007bca:	4604      	mov	r4, r0
 8007bcc:	9209      	str	r2, [sp, #36]	; 0x24
 8007bce:	930c      	str	r3, [sp, #48]	; 0x30
 8007bd0:	46bb      	mov	fp, r7
 8007bd2:	b975      	cbnz	r5, 8007bf2 <_dtoa_r+0x42>
 8007bd4:	2010      	movs	r0, #16
 8007bd6:	f000 fddd 	bl	8008794 <malloc>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	6260      	str	r0, [r4, #36]	; 0x24
 8007bde:	b920      	cbnz	r0, 8007bea <_dtoa_r+0x3a>
 8007be0:	4ba7      	ldr	r3, [pc, #668]	; (8007e80 <_dtoa_r+0x2d0>)
 8007be2:	21ea      	movs	r1, #234	; 0xea
 8007be4:	48a7      	ldr	r0, [pc, #668]	; (8007e84 <_dtoa_r+0x2d4>)
 8007be6:	f001 fa75 	bl	80090d4 <__assert_func>
 8007bea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007bee:	6005      	str	r5, [r0, #0]
 8007bf0:	60c5      	str	r5, [r0, #12]
 8007bf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bf4:	6819      	ldr	r1, [r3, #0]
 8007bf6:	b151      	cbz	r1, 8007c0e <_dtoa_r+0x5e>
 8007bf8:	685a      	ldr	r2, [r3, #4]
 8007bfa:	604a      	str	r2, [r1, #4]
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	4093      	lsls	r3, r2
 8007c00:	608b      	str	r3, [r1, #8]
 8007c02:	4620      	mov	r0, r4
 8007c04:	f000 fe1c 	bl	8008840 <_Bfree>
 8007c08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	601a      	str	r2, [r3, #0]
 8007c0e:	1e3b      	subs	r3, r7, #0
 8007c10:	bfaa      	itet	ge
 8007c12:	2300      	movge	r3, #0
 8007c14:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007c18:	f8c8 3000 	strge.w	r3, [r8]
 8007c1c:	4b9a      	ldr	r3, [pc, #616]	; (8007e88 <_dtoa_r+0x2d8>)
 8007c1e:	bfbc      	itt	lt
 8007c20:	2201      	movlt	r2, #1
 8007c22:	f8c8 2000 	strlt.w	r2, [r8]
 8007c26:	ea33 030b 	bics.w	r3, r3, fp
 8007c2a:	d11b      	bne.n	8007c64 <_dtoa_r+0xb4>
 8007c2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c2e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007c32:	6013      	str	r3, [r2, #0]
 8007c34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c38:	4333      	orrs	r3, r6
 8007c3a:	f000 8592 	beq.w	8008762 <_dtoa_r+0xbb2>
 8007c3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c40:	b963      	cbnz	r3, 8007c5c <_dtoa_r+0xac>
 8007c42:	4b92      	ldr	r3, [pc, #584]	; (8007e8c <_dtoa_r+0x2dc>)
 8007c44:	e022      	b.n	8007c8c <_dtoa_r+0xdc>
 8007c46:	4b92      	ldr	r3, [pc, #584]	; (8007e90 <_dtoa_r+0x2e0>)
 8007c48:	9301      	str	r3, [sp, #4]
 8007c4a:	3308      	adds	r3, #8
 8007c4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007c4e:	6013      	str	r3, [r2, #0]
 8007c50:	9801      	ldr	r0, [sp, #4]
 8007c52:	b013      	add	sp, #76	; 0x4c
 8007c54:	ecbd 8b04 	vpop	{d8-d9}
 8007c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c5c:	4b8b      	ldr	r3, [pc, #556]	; (8007e8c <_dtoa_r+0x2dc>)
 8007c5e:	9301      	str	r3, [sp, #4]
 8007c60:	3303      	adds	r3, #3
 8007c62:	e7f3      	b.n	8007c4c <_dtoa_r+0x9c>
 8007c64:	2200      	movs	r2, #0
 8007c66:	2300      	movs	r3, #0
 8007c68:	4650      	mov	r0, sl
 8007c6a:	4659      	mov	r1, fp
 8007c6c:	f7f8 ff2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c70:	ec4b ab19 	vmov	d9, sl, fp
 8007c74:	4680      	mov	r8, r0
 8007c76:	b158      	cbz	r0, 8007c90 <_dtoa_r+0xe0>
 8007c78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	6013      	str	r3, [r2, #0]
 8007c7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f000 856b 	beq.w	800875c <_dtoa_r+0xbac>
 8007c86:	4883      	ldr	r0, [pc, #524]	; (8007e94 <_dtoa_r+0x2e4>)
 8007c88:	6018      	str	r0, [r3, #0]
 8007c8a:	1e43      	subs	r3, r0, #1
 8007c8c:	9301      	str	r3, [sp, #4]
 8007c8e:	e7df      	b.n	8007c50 <_dtoa_r+0xa0>
 8007c90:	ec4b ab10 	vmov	d0, sl, fp
 8007c94:	aa10      	add	r2, sp, #64	; 0x40
 8007c96:	a911      	add	r1, sp, #68	; 0x44
 8007c98:	4620      	mov	r0, r4
 8007c9a:	f001 f8b9 	bl	8008e10 <__d2b>
 8007c9e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007ca2:	ee08 0a10 	vmov	s16, r0
 8007ca6:	2d00      	cmp	r5, #0
 8007ca8:	f000 8084 	beq.w	8007db4 <_dtoa_r+0x204>
 8007cac:	ee19 3a90 	vmov	r3, s19
 8007cb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007cb4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007cb8:	4656      	mov	r6, sl
 8007cba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007cbe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007cc2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007cc6:	4b74      	ldr	r3, [pc, #464]	; (8007e98 <_dtoa_r+0x2e8>)
 8007cc8:	2200      	movs	r2, #0
 8007cca:	4630      	mov	r0, r6
 8007ccc:	4639      	mov	r1, r7
 8007cce:	f7f8 fadb 	bl	8000288 <__aeabi_dsub>
 8007cd2:	a365      	add	r3, pc, #404	; (adr r3, 8007e68 <_dtoa_r+0x2b8>)
 8007cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd8:	f7f8 fc8e 	bl	80005f8 <__aeabi_dmul>
 8007cdc:	a364      	add	r3, pc, #400	; (adr r3, 8007e70 <_dtoa_r+0x2c0>)
 8007cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce2:	f7f8 fad3 	bl	800028c <__adddf3>
 8007ce6:	4606      	mov	r6, r0
 8007ce8:	4628      	mov	r0, r5
 8007cea:	460f      	mov	r7, r1
 8007cec:	f7f8 fc1a 	bl	8000524 <__aeabi_i2d>
 8007cf0:	a361      	add	r3, pc, #388	; (adr r3, 8007e78 <_dtoa_r+0x2c8>)
 8007cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf6:	f7f8 fc7f 	bl	80005f8 <__aeabi_dmul>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	4630      	mov	r0, r6
 8007d00:	4639      	mov	r1, r7
 8007d02:	f7f8 fac3 	bl	800028c <__adddf3>
 8007d06:	4606      	mov	r6, r0
 8007d08:	460f      	mov	r7, r1
 8007d0a:	f7f8 ff25 	bl	8000b58 <__aeabi_d2iz>
 8007d0e:	2200      	movs	r2, #0
 8007d10:	9000      	str	r0, [sp, #0]
 8007d12:	2300      	movs	r3, #0
 8007d14:	4630      	mov	r0, r6
 8007d16:	4639      	mov	r1, r7
 8007d18:	f7f8 fee0 	bl	8000adc <__aeabi_dcmplt>
 8007d1c:	b150      	cbz	r0, 8007d34 <_dtoa_r+0x184>
 8007d1e:	9800      	ldr	r0, [sp, #0]
 8007d20:	f7f8 fc00 	bl	8000524 <__aeabi_i2d>
 8007d24:	4632      	mov	r2, r6
 8007d26:	463b      	mov	r3, r7
 8007d28:	f7f8 fece 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d2c:	b910      	cbnz	r0, 8007d34 <_dtoa_r+0x184>
 8007d2e:	9b00      	ldr	r3, [sp, #0]
 8007d30:	3b01      	subs	r3, #1
 8007d32:	9300      	str	r3, [sp, #0]
 8007d34:	9b00      	ldr	r3, [sp, #0]
 8007d36:	2b16      	cmp	r3, #22
 8007d38:	d85a      	bhi.n	8007df0 <_dtoa_r+0x240>
 8007d3a:	9a00      	ldr	r2, [sp, #0]
 8007d3c:	4b57      	ldr	r3, [pc, #348]	; (8007e9c <_dtoa_r+0x2ec>)
 8007d3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d46:	ec51 0b19 	vmov	r0, r1, d9
 8007d4a:	f7f8 fec7 	bl	8000adc <__aeabi_dcmplt>
 8007d4e:	2800      	cmp	r0, #0
 8007d50:	d050      	beq.n	8007df4 <_dtoa_r+0x244>
 8007d52:	9b00      	ldr	r3, [sp, #0]
 8007d54:	3b01      	subs	r3, #1
 8007d56:	9300      	str	r3, [sp, #0]
 8007d58:	2300      	movs	r3, #0
 8007d5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d5e:	1b5d      	subs	r5, r3, r5
 8007d60:	1e6b      	subs	r3, r5, #1
 8007d62:	9305      	str	r3, [sp, #20]
 8007d64:	bf45      	ittet	mi
 8007d66:	f1c5 0301 	rsbmi	r3, r5, #1
 8007d6a:	9304      	strmi	r3, [sp, #16]
 8007d6c:	2300      	movpl	r3, #0
 8007d6e:	2300      	movmi	r3, #0
 8007d70:	bf4c      	ite	mi
 8007d72:	9305      	strmi	r3, [sp, #20]
 8007d74:	9304      	strpl	r3, [sp, #16]
 8007d76:	9b00      	ldr	r3, [sp, #0]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	db3d      	blt.n	8007df8 <_dtoa_r+0x248>
 8007d7c:	9b05      	ldr	r3, [sp, #20]
 8007d7e:	9a00      	ldr	r2, [sp, #0]
 8007d80:	920a      	str	r2, [sp, #40]	; 0x28
 8007d82:	4413      	add	r3, r2
 8007d84:	9305      	str	r3, [sp, #20]
 8007d86:	2300      	movs	r3, #0
 8007d88:	9307      	str	r3, [sp, #28]
 8007d8a:	9b06      	ldr	r3, [sp, #24]
 8007d8c:	2b09      	cmp	r3, #9
 8007d8e:	f200 8089 	bhi.w	8007ea4 <_dtoa_r+0x2f4>
 8007d92:	2b05      	cmp	r3, #5
 8007d94:	bfc4      	itt	gt
 8007d96:	3b04      	subgt	r3, #4
 8007d98:	9306      	strgt	r3, [sp, #24]
 8007d9a:	9b06      	ldr	r3, [sp, #24]
 8007d9c:	f1a3 0302 	sub.w	r3, r3, #2
 8007da0:	bfcc      	ite	gt
 8007da2:	2500      	movgt	r5, #0
 8007da4:	2501      	movle	r5, #1
 8007da6:	2b03      	cmp	r3, #3
 8007da8:	f200 8087 	bhi.w	8007eba <_dtoa_r+0x30a>
 8007dac:	e8df f003 	tbb	[pc, r3]
 8007db0:	59383a2d 	.word	0x59383a2d
 8007db4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007db8:	441d      	add	r5, r3
 8007dba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007dbe:	2b20      	cmp	r3, #32
 8007dc0:	bfc1      	itttt	gt
 8007dc2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007dc6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007dca:	fa0b f303 	lslgt.w	r3, fp, r3
 8007dce:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007dd2:	bfda      	itte	le
 8007dd4:	f1c3 0320 	rsble	r3, r3, #32
 8007dd8:	fa06 f003 	lslle.w	r0, r6, r3
 8007ddc:	4318      	orrgt	r0, r3
 8007dde:	f7f8 fb91 	bl	8000504 <__aeabi_ui2d>
 8007de2:	2301      	movs	r3, #1
 8007de4:	4606      	mov	r6, r0
 8007de6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007dea:	3d01      	subs	r5, #1
 8007dec:	930e      	str	r3, [sp, #56]	; 0x38
 8007dee:	e76a      	b.n	8007cc6 <_dtoa_r+0x116>
 8007df0:	2301      	movs	r3, #1
 8007df2:	e7b2      	b.n	8007d5a <_dtoa_r+0x1aa>
 8007df4:	900b      	str	r0, [sp, #44]	; 0x2c
 8007df6:	e7b1      	b.n	8007d5c <_dtoa_r+0x1ac>
 8007df8:	9b04      	ldr	r3, [sp, #16]
 8007dfa:	9a00      	ldr	r2, [sp, #0]
 8007dfc:	1a9b      	subs	r3, r3, r2
 8007dfe:	9304      	str	r3, [sp, #16]
 8007e00:	4253      	negs	r3, r2
 8007e02:	9307      	str	r3, [sp, #28]
 8007e04:	2300      	movs	r3, #0
 8007e06:	930a      	str	r3, [sp, #40]	; 0x28
 8007e08:	e7bf      	b.n	8007d8a <_dtoa_r+0x1da>
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	9308      	str	r3, [sp, #32]
 8007e0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	dc55      	bgt.n	8007ec0 <_dtoa_r+0x310>
 8007e14:	2301      	movs	r3, #1
 8007e16:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	9209      	str	r2, [sp, #36]	; 0x24
 8007e1e:	e00c      	b.n	8007e3a <_dtoa_r+0x28a>
 8007e20:	2301      	movs	r3, #1
 8007e22:	e7f3      	b.n	8007e0c <_dtoa_r+0x25c>
 8007e24:	2300      	movs	r3, #0
 8007e26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e28:	9308      	str	r3, [sp, #32]
 8007e2a:	9b00      	ldr	r3, [sp, #0]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	9302      	str	r3, [sp, #8]
 8007e30:	3301      	adds	r3, #1
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	9303      	str	r3, [sp, #12]
 8007e36:	bfb8      	it	lt
 8007e38:	2301      	movlt	r3, #1
 8007e3a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	6042      	str	r2, [r0, #4]
 8007e40:	2204      	movs	r2, #4
 8007e42:	f102 0614 	add.w	r6, r2, #20
 8007e46:	429e      	cmp	r6, r3
 8007e48:	6841      	ldr	r1, [r0, #4]
 8007e4a:	d93d      	bls.n	8007ec8 <_dtoa_r+0x318>
 8007e4c:	4620      	mov	r0, r4
 8007e4e:	f000 fcb7 	bl	80087c0 <_Balloc>
 8007e52:	9001      	str	r0, [sp, #4]
 8007e54:	2800      	cmp	r0, #0
 8007e56:	d13b      	bne.n	8007ed0 <_dtoa_r+0x320>
 8007e58:	4b11      	ldr	r3, [pc, #68]	; (8007ea0 <_dtoa_r+0x2f0>)
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007e60:	e6c0      	b.n	8007be4 <_dtoa_r+0x34>
 8007e62:	2301      	movs	r3, #1
 8007e64:	e7df      	b.n	8007e26 <_dtoa_r+0x276>
 8007e66:	bf00      	nop
 8007e68:	636f4361 	.word	0x636f4361
 8007e6c:	3fd287a7 	.word	0x3fd287a7
 8007e70:	8b60c8b3 	.word	0x8b60c8b3
 8007e74:	3fc68a28 	.word	0x3fc68a28
 8007e78:	509f79fb 	.word	0x509f79fb
 8007e7c:	3fd34413 	.word	0x3fd34413
 8007e80:	08009c95 	.word	0x08009c95
 8007e84:	08009cac 	.word	0x08009cac
 8007e88:	7ff00000 	.word	0x7ff00000
 8007e8c:	08009c91 	.word	0x08009c91
 8007e90:	08009c88 	.word	0x08009c88
 8007e94:	08009c65 	.word	0x08009c65
 8007e98:	3ff80000 	.word	0x3ff80000
 8007e9c:	08009da0 	.word	0x08009da0
 8007ea0:	08009d07 	.word	0x08009d07
 8007ea4:	2501      	movs	r5, #1
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	9306      	str	r3, [sp, #24]
 8007eaa:	9508      	str	r5, [sp, #32]
 8007eac:	f04f 33ff 	mov.w	r3, #4294967295
 8007eb0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	2312      	movs	r3, #18
 8007eb8:	e7b0      	b.n	8007e1c <_dtoa_r+0x26c>
 8007eba:	2301      	movs	r3, #1
 8007ebc:	9308      	str	r3, [sp, #32]
 8007ebe:	e7f5      	b.n	8007eac <_dtoa_r+0x2fc>
 8007ec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ec2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007ec6:	e7b8      	b.n	8007e3a <_dtoa_r+0x28a>
 8007ec8:	3101      	adds	r1, #1
 8007eca:	6041      	str	r1, [r0, #4]
 8007ecc:	0052      	lsls	r2, r2, #1
 8007ece:	e7b8      	b.n	8007e42 <_dtoa_r+0x292>
 8007ed0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ed2:	9a01      	ldr	r2, [sp, #4]
 8007ed4:	601a      	str	r2, [r3, #0]
 8007ed6:	9b03      	ldr	r3, [sp, #12]
 8007ed8:	2b0e      	cmp	r3, #14
 8007eda:	f200 809d 	bhi.w	8008018 <_dtoa_r+0x468>
 8007ede:	2d00      	cmp	r5, #0
 8007ee0:	f000 809a 	beq.w	8008018 <_dtoa_r+0x468>
 8007ee4:	9b00      	ldr	r3, [sp, #0]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	dd32      	ble.n	8007f50 <_dtoa_r+0x3a0>
 8007eea:	4ab7      	ldr	r2, [pc, #732]	; (80081c8 <_dtoa_r+0x618>)
 8007eec:	f003 030f 	and.w	r3, r3, #15
 8007ef0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007ef4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ef8:	9b00      	ldr	r3, [sp, #0]
 8007efa:	05d8      	lsls	r0, r3, #23
 8007efc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007f00:	d516      	bpl.n	8007f30 <_dtoa_r+0x380>
 8007f02:	4bb2      	ldr	r3, [pc, #712]	; (80081cc <_dtoa_r+0x61c>)
 8007f04:	ec51 0b19 	vmov	r0, r1, d9
 8007f08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007f0c:	f7f8 fc9e 	bl	800084c <__aeabi_ddiv>
 8007f10:	f007 070f 	and.w	r7, r7, #15
 8007f14:	4682      	mov	sl, r0
 8007f16:	468b      	mov	fp, r1
 8007f18:	2503      	movs	r5, #3
 8007f1a:	4eac      	ldr	r6, [pc, #688]	; (80081cc <_dtoa_r+0x61c>)
 8007f1c:	b957      	cbnz	r7, 8007f34 <_dtoa_r+0x384>
 8007f1e:	4642      	mov	r2, r8
 8007f20:	464b      	mov	r3, r9
 8007f22:	4650      	mov	r0, sl
 8007f24:	4659      	mov	r1, fp
 8007f26:	f7f8 fc91 	bl	800084c <__aeabi_ddiv>
 8007f2a:	4682      	mov	sl, r0
 8007f2c:	468b      	mov	fp, r1
 8007f2e:	e028      	b.n	8007f82 <_dtoa_r+0x3d2>
 8007f30:	2502      	movs	r5, #2
 8007f32:	e7f2      	b.n	8007f1a <_dtoa_r+0x36a>
 8007f34:	07f9      	lsls	r1, r7, #31
 8007f36:	d508      	bpl.n	8007f4a <_dtoa_r+0x39a>
 8007f38:	4640      	mov	r0, r8
 8007f3a:	4649      	mov	r1, r9
 8007f3c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007f40:	f7f8 fb5a 	bl	80005f8 <__aeabi_dmul>
 8007f44:	3501      	adds	r5, #1
 8007f46:	4680      	mov	r8, r0
 8007f48:	4689      	mov	r9, r1
 8007f4a:	107f      	asrs	r7, r7, #1
 8007f4c:	3608      	adds	r6, #8
 8007f4e:	e7e5      	b.n	8007f1c <_dtoa_r+0x36c>
 8007f50:	f000 809b 	beq.w	800808a <_dtoa_r+0x4da>
 8007f54:	9b00      	ldr	r3, [sp, #0]
 8007f56:	4f9d      	ldr	r7, [pc, #628]	; (80081cc <_dtoa_r+0x61c>)
 8007f58:	425e      	negs	r6, r3
 8007f5a:	4b9b      	ldr	r3, [pc, #620]	; (80081c8 <_dtoa_r+0x618>)
 8007f5c:	f006 020f 	and.w	r2, r6, #15
 8007f60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f68:	ec51 0b19 	vmov	r0, r1, d9
 8007f6c:	f7f8 fb44 	bl	80005f8 <__aeabi_dmul>
 8007f70:	1136      	asrs	r6, r6, #4
 8007f72:	4682      	mov	sl, r0
 8007f74:	468b      	mov	fp, r1
 8007f76:	2300      	movs	r3, #0
 8007f78:	2502      	movs	r5, #2
 8007f7a:	2e00      	cmp	r6, #0
 8007f7c:	d17a      	bne.n	8008074 <_dtoa_r+0x4c4>
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d1d3      	bne.n	8007f2a <_dtoa_r+0x37a>
 8007f82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	f000 8082 	beq.w	800808e <_dtoa_r+0x4de>
 8007f8a:	4b91      	ldr	r3, [pc, #580]	; (80081d0 <_dtoa_r+0x620>)
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	4650      	mov	r0, sl
 8007f90:	4659      	mov	r1, fp
 8007f92:	f7f8 fda3 	bl	8000adc <__aeabi_dcmplt>
 8007f96:	2800      	cmp	r0, #0
 8007f98:	d079      	beq.n	800808e <_dtoa_r+0x4de>
 8007f9a:	9b03      	ldr	r3, [sp, #12]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d076      	beq.n	800808e <_dtoa_r+0x4de>
 8007fa0:	9b02      	ldr	r3, [sp, #8]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	dd36      	ble.n	8008014 <_dtoa_r+0x464>
 8007fa6:	9b00      	ldr	r3, [sp, #0]
 8007fa8:	4650      	mov	r0, sl
 8007faa:	4659      	mov	r1, fp
 8007fac:	1e5f      	subs	r7, r3, #1
 8007fae:	2200      	movs	r2, #0
 8007fb0:	4b88      	ldr	r3, [pc, #544]	; (80081d4 <_dtoa_r+0x624>)
 8007fb2:	f7f8 fb21 	bl	80005f8 <__aeabi_dmul>
 8007fb6:	9e02      	ldr	r6, [sp, #8]
 8007fb8:	4682      	mov	sl, r0
 8007fba:	468b      	mov	fp, r1
 8007fbc:	3501      	adds	r5, #1
 8007fbe:	4628      	mov	r0, r5
 8007fc0:	f7f8 fab0 	bl	8000524 <__aeabi_i2d>
 8007fc4:	4652      	mov	r2, sl
 8007fc6:	465b      	mov	r3, fp
 8007fc8:	f7f8 fb16 	bl	80005f8 <__aeabi_dmul>
 8007fcc:	4b82      	ldr	r3, [pc, #520]	; (80081d8 <_dtoa_r+0x628>)
 8007fce:	2200      	movs	r2, #0
 8007fd0:	f7f8 f95c 	bl	800028c <__adddf3>
 8007fd4:	46d0      	mov	r8, sl
 8007fd6:	46d9      	mov	r9, fp
 8007fd8:	4682      	mov	sl, r0
 8007fda:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007fde:	2e00      	cmp	r6, #0
 8007fe0:	d158      	bne.n	8008094 <_dtoa_r+0x4e4>
 8007fe2:	4b7e      	ldr	r3, [pc, #504]	; (80081dc <_dtoa_r+0x62c>)
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	4640      	mov	r0, r8
 8007fe8:	4649      	mov	r1, r9
 8007fea:	f7f8 f94d 	bl	8000288 <__aeabi_dsub>
 8007fee:	4652      	mov	r2, sl
 8007ff0:	465b      	mov	r3, fp
 8007ff2:	4680      	mov	r8, r0
 8007ff4:	4689      	mov	r9, r1
 8007ff6:	f7f8 fd8f 	bl	8000b18 <__aeabi_dcmpgt>
 8007ffa:	2800      	cmp	r0, #0
 8007ffc:	f040 8295 	bne.w	800852a <_dtoa_r+0x97a>
 8008000:	4652      	mov	r2, sl
 8008002:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008006:	4640      	mov	r0, r8
 8008008:	4649      	mov	r1, r9
 800800a:	f7f8 fd67 	bl	8000adc <__aeabi_dcmplt>
 800800e:	2800      	cmp	r0, #0
 8008010:	f040 8289 	bne.w	8008526 <_dtoa_r+0x976>
 8008014:	ec5b ab19 	vmov	sl, fp, d9
 8008018:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800801a:	2b00      	cmp	r3, #0
 800801c:	f2c0 8148 	blt.w	80082b0 <_dtoa_r+0x700>
 8008020:	9a00      	ldr	r2, [sp, #0]
 8008022:	2a0e      	cmp	r2, #14
 8008024:	f300 8144 	bgt.w	80082b0 <_dtoa_r+0x700>
 8008028:	4b67      	ldr	r3, [pc, #412]	; (80081c8 <_dtoa_r+0x618>)
 800802a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800802e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008034:	2b00      	cmp	r3, #0
 8008036:	f280 80d5 	bge.w	80081e4 <_dtoa_r+0x634>
 800803a:	9b03      	ldr	r3, [sp, #12]
 800803c:	2b00      	cmp	r3, #0
 800803e:	f300 80d1 	bgt.w	80081e4 <_dtoa_r+0x634>
 8008042:	f040 826f 	bne.w	8008524 <_dtoa_r+0x974>
 8008046:	4b65      	ldr	r3, [pc, #404]	; (80081dc <_dtoa_r+0x62c>)
 8008048:	2200      	movs	r2, #0
 800804a:	4640      	mov	r0, r8
 800804c:	4649      	mov	r1, r9
 800804e:	f7f8 fad3 	bl	80005f8 <__aeabi_dmul>
 8008052:	4652      	mov	r2, sl
 8008054:	465b      	mov	r3, fp
 8008056:	f7f8 fd55 	bl	8000b04 <__aeabi_dcmpge>
 800805a:	9e03      	ldr	r6, [sp, #12]
 800805c:	4637      	mov	r7, r6
 800805e:	2800      	cmp	r0, #0
 8008060:	f040 8245 	bne.w	80084ee <_dtoa_r+0x93e>
 8008064:	9d01      	ldr	r5, [sp, #4]
 8008066:	2331      	movs	r3, #49	; 0x31
 8008068:	f805 3b01 	strb.w	r3, [r5], #1
 800806c:	9b00      	ldr	r3, [sp, #0]
 800806e:	3301      	adds	r3, #1
 8008070:	9300      	str	r3, [sp, #0]
 8008072:	e240      	b.n	80084f6 <_dtoa_r+0x946>
 8008074:	07f2      	lsls	r2, r6, #31
 8008076:	d505      	bpl.n	8008084 <_dtoa_r+0x4d4>
 8008078:	e9d7 2300 	ldrd	r2, r3, [r7]
 800807c:	f7f8 fabc 	bl	80005f8 <__aeabi_dmul>
 8008080:	3501      	adds	r5, #1
 8008082:	2301      	movs	r3, #1
 8008084:	1076      	asrs	r6, r6, #1
 8008086:	3708      	adds	r7, #8
 8008088:	e777      	b.n	8007f7a <_dtoa_r+0x3ca>
 800808a:	2502      	movs	r5, #2
 800808c:	e779      	b.n	8007f82 <_dtoa_r+0x3d2>
 800808e:	9f00      	ldr	r7, [sp, #0]
 8008090:	9e03      	ldr	r6, [sp, #12]
 8008092:	e794      	b.n	8007fbe <_dtoa_r+0x40e>
 8008094:	9901      	ldr	r1, [sp, #4]
 8008096:	4b4c      	ldr	r3, [pc, #304]	; (80081c8 <_dtoa_r+0x618>)
 8008098:	4431      	add	r1, r6
 800809a:	910d      	str	r1, [sp, #52]	; 0x34
 800809c:	9908      	ldr	r1, [sp, #32]
 800809e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80080a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80080a6:	2900      	cmp	r1, #0
 80080a8:	d043      	beq.n	8008132 <_dtoa_r+0x582>
 80080aa:	494d      	ldr	r1, [pc, #308]	; (80081e0 <_dtoa_r+0x630>)
 80080ac:	2000      	movs	r0, #0
 80080ae:	f7f8 fbcd 	bl	800084c <__aeabi_ddiv>
 80080b2:	4652      	mov	r2, sl
 80080b4:	465b      	mov	r3, fp
 80080b6:	f7f8 f8e7 	bl	8000288 <__aeabi_dsub>
 80080ba:	9d01      	ldr	r5, [sp, #4]
 80080bc:	4682      	mov	sl, r0
 80080be:	468b      	mov	fp, r1
 80080c0:	4649      	mov	r1, r9
 80080c2:	4640      	mov	r0, r8
 80080c4:	f7f8 fd48 	bl	8000b58 <__aeabi_d2iz>
 80080c8:	4606      	mov	r6, r0
 80080ca:	f7f8 fa2b 	bl	8000524 <__aeabi_i2d>
 80080ce:	4602      	mov	r2, r0
 80080d0:	460b      	mov	r3, r1
 80080d2:	4640      	mov	r0, r8
 80080d4:	4649      	mov	r1, r9
 80080d6:	f7f8 f8d7 	bl	8000288 <__aeabi_dsub>
 80080da:	3630      	adds	r6, #48	; 0x30
 80080dc:	f805 6b01 	strb.w	r6, [r5], #1
 80080e0:	4652      	mov	r2, sl
 80080e2:	465b      	mov	r3, fp
 80080e4:	4680      	mov	r8, r0
 80080e6:	4689      	mov	r9, r1
 80080e8:	f7f8 fcf8 	bl	8000adc <__aeabi_dcmplt>
 80080ec:	2800      	cmp	r0, #0
 80080ee:	d163      	bne.n	80081b8 <_dtoa_r+0x608>
 80080f0:	4642      	mov	r2, r8
 80080f2:	464b      	mov	r3, r9
 80080f4:	4936      	ldr	r1, [pc, #216]	; (80081d0 <_dtoa_r+0x620>)
 80080f6:	2000      	movs	r0, #0
 80080f8:	f7f8 f8c6 	bl	8000288 <__aeabi_dsub>
 80080fc:	4652      	mov	r2, sl
 80080fe:	465b      	mov	r3, fp
 8008100:	f7f8 fcec 	bl	8000adc <__aeabi_dcmplt>
 8008104:	2800      	cmp	r0, #0
 8008106:	f040 80b5 	bne.w	8008274 <_dtoa_r+0x6c4>
 800810a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800810c:	429d      	cmp	r5, r3
 800810e:	d081      	beq.n	8008014 <_dtoa_r+0x464>
 8008110:	4b30      	ldr	r3, [pc, #192]	; (80081d4 <_dtoa_r+0x624>)
 8008112:	2200      	movs	r2, #0
 8008114:	4650      	mov	r0, sl
 8008116:	4659      	mov	r1, fp
 8008118:	f7f8 fa6e 	bl	80005f8 <__aeabi_dmul>
 800811c:	4b2d      	ldr	r3, [pc, #180]	; (80081d4 <_dtoa_r+0x624>)
 800811e:	4682      	mov	sl, r0
 8008120:	468b      	mov	fp, r1
 8008122:	4640      	mov	r0, r8
 8008124:	4649      	mov	r1, r9
 8008126:	2200      	movs	r2, #0
 8008128:	f7f8 fa66 	bl	80005f8 <__aeabi_dmul>
 800812c:	4680      	mov	r8, r0
 800812e:	4689      	mov	r9, r1
 8008130:	e7c6      	b.n	80080c0 <_dtoa_r+0x510>
 8008132:	4650      	mov	r0, sl
 8008134:	4659      	mov	r1, fp
 8008136:	f7f8 fa5f 	bl	80005f8 <__aeabi_dmul>
 800813a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800813c:	9d01      	ldr	r5, [sp, #4]
 800813e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008140:	4682      	mov	sl, r0
 8008142:	468b      	mov	fp, r1
 8008144:	4649      	mov	r1, r9
 8008146:	4640      	mov	r0, r8
 8008148:	f7f8 fd06 	bl	8000b58 <__aeabi_d2iz>
 800814c:	4606      	mov	r6, r0
 800814e:	f7f8 f9e9 	bl	8000524 <__aeabi_i2d>
 8008152:	3630      	adds	r6, #48	; 0x30
 8008154:	4602      	mov	r2, r0
 8008156:	460b      	mov	r3, r1
 8008158:	4640      	mov	r0, r8
 800815a:	4649      	mov	r1, r9
 800815c:	f7f8 f894 	bl	8000288 <__aeabi_dsub>
 8008160:	f805 6b01 	strb.w	r6, [r5], #1
 8008164:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008166:	429d      	cmp	r5, r3
 8008168:	4680      	mov	r8, r0
 800816a:	4689      	mov	r9, r1
 800816c:	f04f 0200 	mov.w	r2, #0
 8008170:	d124      	bne.n	80081bc <_dtoa_r+0x60c>
 8008172:	4b1b      	ldr	r3, [pc, #108]	; (80081e0 <_dtoa_r+0x630>)
 8008174:	4650      	mov	r0, sl
 8008176:	4659      	mov	r1, fp
 8008178:	f7f8 f888 	bl	800028c <__adddf3>
 800817c:	4602      	mov	r2, r0
 800817e:	460b      	mov	r3, r1
 8008180:	4640      	mov	r0, r8
 8008182:	4649      	mov	r1, r9
 8008184:	f7f8 fcc8 	bl	8000b18 <__aeabi_dcmpgt>
 8008188:	2800      	cmp	r0, #0
 800818a:	d173      	bne.n	8008274 <_dtoa_r+0x6c4>
 800818c:	4652      	mov	r2, sl
 800818e:	465b      	mov	r3, fp
 8008190:	4913      	ldr	r1, [pc, #76]	; (80081e0 <_dtoa_r+0x630>)
 8008192:	2000      	movs	r0, #0
 8008194:	f7f8 f878 	bl	8000288 <__aeabi_dsub>
 8008198:	4602      	mov	r2, r0
 800819a:	460b      	mov	r3, r1
 800819c:	4640      	mov	r0, r8
 800819e:	4649      	mov	r1, r9
 80081a0:	f7f8 fc9c 	bl	8000adc <__aeabi_dcmplt>
 80081a4:	2800      	cmp	r0, #0
 80081a6:	f43f af35 	beq.w	8008014 <_dtoa_r+0x464>
 80081aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80081ac:	1e6b      	subs	r3, r5, #1
 80081ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80081b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80081b4:	2b30      	cmp	r3, #48	; 0x30
 80081b6:	d0f8      	beq.n	80081aa <_dtoa_r+0x5fa>
 80081b8:	9700      	str	r7, [sp, #0]
 80081ba:	e049      	b.n	8008250 <_dtoa_r+0x6a0>
 80081bc:	4b05      	ldr	r3, [pc, #20]	; (80081d4 <_dtoa_r+0x624>)
 80081be:	f7f8 fa1b 	bl	80005f8 <__aeabi_dmul>
 80081c2:	4680      	mov	r8, r0
 80081c4:	4689      	mov	r9, r1
 80081c6:	e7bd      	b.n	8008144 <_dtoa_r+0x594>
 80081c8:	08009da0 	.word	0x08009da0
 80081cc:	08009d78 	.word	0x08009d78
 80081d0:	3ff00000 	.word	0x3ff00000
 80081d4:	40240000 	.word	0x40240000
 80081d8:	401c0000 	.word	0x401c0000
 80081dc:	40140000 	.word	0x40140000
 80081e0:	3fe00000 	.word	0x3fe00000
 80081e4:	9d01      	ldr	r5, [sp, #4]
 80081e6:	4656      	mov	r6, sl
 80081e8:	465f      	mov	r7, fp
 80081ea:	4642      	mov	r2, r8
 80081ec:	464b      	mov	r3, r9
 80081ee:	4630      	mov	r0, r6
 80081f0:	4639      	mov	r1, r7
 80081f2:	f7f8 fb2b 	bl	800084c <__aeabi_ddiv>
 80081f6:	f7f8 fcaf 	bl	8000b58 <__aeabi_d2iz>
 80081fa:	4682      	mov	sl, r0
 80081fc:	f7f8 f992 	bl	8000524 <__aeabi_i2d>
 8008200:	4642      	mov	r2, r8
 8008202:	464b      	mov	r3, r9
 8008204:	f7f8 f9f8 	bl	80005f8 <__aeabi_dmul>
 8008208:	4602      	mov	r2, r0
 800820a:	460b      	mov	r3, r1
 800820c:	4630      	mov	r0, r6
 800820e:	4639      	mov	r1, r7
 8008210:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008214:	f7f8 f838 	bl	8000288 <__aeabi_dsub>
 8008218:	f805 6b01 	strb.w	r6, [r5], #1
 800821c:	9e01      	ldr	r6, [sp, #4]
 800821e:	9f03      	ldr	r7, [sp, #12]
 8008220:	1bae      	subs	r6, r5, r6
 8008222:	42b7      	cmp	r7, r6
 8008224:	4602      	mov	r2, r0
 8008226:	460b      	mov	r3, r1
 8008228:	d135      	bne.n	8008296 <_dtoa_r+0x6e6>
 800822a:	f7f8 f82f 	bl	800028c <__adddf3>
 800822e:	4642      	mov	r2, r8
 8008230:	464b      	mov	r3, r9
 8008232:	4606      	mov	r6, r0
 8008234:	460f      	mov	r7, r1
 8008236:	f7f8 fc6f 	bl	8000b18 <__aeabi_dcmpgt>
 800823a:	b9d0      	cbnz	r0, 8008272 <_dtoa_r+0x6c2>
 800823c:	4642      	mov	r2, r8
 800823e:	464b      	mov	r3, r9
 8008240:	4630      	mov	r0, r6
 8008242:	4639      	mov	r1, r7
 8008244:	f7f8 fc40 	bl	8000ac8 <__aeabi_dcmpeq>
 8008248:	b110      	cbz	r0, 8008250 <_dtoa_r+0x6a0>
 800824a:	f01a 0f01 	tst.w	sl, #1
 800824e:	d110      	bne.n	8008272 <_dtoa_r+0x6c2>
 8008250:	4620      	mov	r0, r4
 8008252:	ee18 1a10 	vmov	r1, s16
 8008256:	f000 faf3 	bl	8008840 <_Bfree>
 800825a:	2300      	movs	r3, #0
 800825c:	9800      	ldr	r0, [sp, #0]
 800825e:	702b      	strb	r3, [r5, #0]
 8008260:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008262:	3001      	adds	r0, #1
 8008264:	6018      	str	r0, [r3, #0]
 8008266:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008268:	2b00      	cmp	r3, #0
 800826a:	f43f acf1 	beq.w	8007c50 <_dtoa_r+0xa0>
 800826e:	601d      	str	r5, [r3, #0]
 8008270:	e4ee      	b.n	8007c50 <_dtoa_r+0xa0>
 8008272:	9f00      	ldr	r7, [sp, #0]
 8008274:	462b      	mov	r3, r5
 8008276:	461d      	mov	r5, r3
 8008278:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800827c:	2a39      	cmp	r2, #57	; 0x39
 800827e:	d106      	bne.n	800828e <_dtoa_r+0x6de>
 8008280:	9a01      	ldr	r2, [sp, #4]
 8008282:	429a      	cmp	r2, r3
 8008284:	d1f7      	bne.n	8008276 <_dtoa_r+0x6c6>
 8008286:	9901      	ldr	r1, [sp, #4]
 8008288:	2230      	movs	r2, #48	; 0x30
 800828a:	3701      	adds	r7, #1
 800828c:	700a      	strb	r2, [r1, #0]
 800828e:	781a      	ldrb	r2, [r3, #0]
 8008290:	3201      	adds	r2, #1
 8008292:	701a      	strb	r2, [r3, #0]
 8008294:	e790      	b.n	80081b8 <_dtoa_r+0x608>
 8008296:	4ba6      	ldr	r3, [pc, #664]	; (8008530 <_dtoa_r+0x980>)
 8008298:	2200      	movs	r2, #0
 800829a:	f7f8 f9ad 	bl	80005f8 <__aeabi_dmul>
 800829e:	2200      	movs	r2, #0
 80082a0:	2300      	movs	r3, #0
 80082a2:	4606      	mov	r6, r0
 80082a4:	460f      	mov	r7, r1
 80082a6:	f7f8 fc0f 	bl	8000ac8 <__aeabi_dcmpeq>
 80082aa:	2800      	cmp	r0, #0
 80082ac:	d09d      	beq.n	80081ea <_dtoa_r+0x63a>
 80082ae:	e7cf      	b.n	8008250 <_dtoa_r+0x6a0>
 80082b0:	9a08      	ldr	r2, [sp, #32]
 80082b2:	2a00      	cmp	r2, #0
 80082b4:	f000 80d7 	beq.w	8008466 <_dtoa_r+0x8b6>
 80082b8:	9a06      	ldr	r2, [sp, #24]
 80082ba:	2a01      	cmp	r2, #1
 80082bc:	f300 80ba 	bgt.w	8008434 <_dtoa_r+0x884>
 80082c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80082c2:	2a00      	cmp	r2, #0
 80082c4:	f000 80b2 	beq.w	800842c <_dtoa_r+0x87c>
 80082c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80082cc:	9e07      	ldr	r6, [sp, #28]
 80082ce:	9d04      	ldr	r5, [sp, #16]
 80082d0:	9a04      	ldr	r2, [sp, #16]
 80082d2:	441a      	add	r2, r3
 80082d4:	9204      	str	r2, [sp, #16]
 80082d6:	9a05      	ldr	r2, [sp, #20]
 80082d8:	2101      	movs	r1, #1
 80082da:	441a      	add	r2, r3
 80082dc:	4620      	mov	r0, r4
 80082de:	9205      	str	r2, [sp, #20]
 80082e0:	f000 fb66 	bl	80089b0 <__i2b>
 80082e4:	4607      	mov	r7, r0
 80082e6:	2d00      	cmp	r5, #0
 80082e8:	dd0c      	ble.n	8008304 <_dtoa_r+0x754>
 80082ea:	9b05      	ldr	r3, [sp, #20]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	dd09      	ble.n	8008304 <_dtoa_r+0x754>
 80082f0:	42ab      	cmp	r3, r5
 80082f2:	9a04      	ldr	r2, [sp, #16]
 80082f4:	bfa8      	it	ge
 80082f6:	462b      	movge	r3, r5
 80082f8:	1ad2      	subs	r2, r2, r3
 80082fa:	9204      	str	r2, [sp, #16]
 80082fc:	9a05      	ldr	r2, [sp, #20]
 80082fe:	1aed      	subs	r5, r5, r3
 8008300:	1ad3      	subs	r3, r2, r3
 8008302:	9305      	str	r3, [sp, #20]
 8008304:	9b07      	ldr	r3, [sp, #28]
 8008306:	b31b      	cbz	r3, 8008350 <_dtoa_r+0x7a0>
 8008308:	9b08      	ldr	r3, [sp, #32]
 800830a:	2b00      	cmp	r3, #0
 800830c:	f000 80af 	beq.w	800846e <_dtoa_r+0x8be>
 8008310:	2e00      	cmp	r6, #0
 8008312:	dd13      	ble.n	800833c <_dtoa_r+0x78c>
 8008314:	4639      	mov	r1, r7
 8008316:	4632      	mov	r2, r6
 8008318:	4620      	mov	r0, r4
 800831a:	f000 fc09 	bl	8008b30 <__pow5mult>
 800831e:	ee18 2a10 	vmov	r2, s16
 8008322:	4601      	mov	r1, r0
 8008324:	4607      	mov	r7, r0
 8008326:	4620      	mov	r0, r4
 8008328:	f000 fb58 	bl	80089dc <__multiply>
 800832c:	ee18 1a10 	vmov	r1, s16
 8008330:	4680      	mov	r8, r0
 8008332:	4620      	mov	r0, r4
 8008334:	f000 fa84 	bl	8008840 <_Bfree>
 8008338:	ee08 8a10 	vmov	s16, r8
 800833c:	9b07      	ldr	r3, [sp, #28]
 800833e:	1b9a      	subs	r2, r3, r6
 8008340:	d006      	beq.n	8008350 <_dtoa_r+0x7a0>
 8008342:	ee18 1a10 	vmov	r1, s16
 8008346:	4620      	mov	r0, r4
 8008348:	f000 fbf2 	bl	8008b30 <__pow5mult>
 800834c:	ee08 0a10 	vmov	s16, r0
 8008350:	2101      	movs	r1, #1
 8008352:	4620      	mov	r0, r4
 8008354:	f000 fb2c 	bl	80089b0 <__i2b>
 8008358:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800835a:	2b00      	cmp	r3, #0
 800835c:	4606      	mov	r6, r0
 800835e:	f340 8088 	ble.w	8008472 <_dtoa_r+0x8c2>
 8008362:	461a      	mov	r2, r3
 8008364:	4601      	mov	r1, r0
 8008366:	4620      	mov	r0, r4
 8008368:	f000 fbe2 	bl	8008b30 <__pow5mult>
 800836c:	9b06      	ldr	r3, [sp, #24]
 800836e:	2b01      	cmp	r3, #1
 8008370:	4606      	mov	r6, r0
 8008372:	f340 8081 	ble.w	8008478 <_dtoa_r+0x8c8>
 8008376:	f04f 0800 	mov.w	r8, #0
 800837a:	6933      	ldr	r3, [r6, #16]
 800837c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008380:	6918      	ldr	r0, [r3, #16]
 8008382:	f000 fac5 	bl	8008910 <__hi0bits>
 8008386:	f1c0 0020 	rsb	r0, r0, #32
 800838a:	9b05      	ldr	r3, [sp, #20]
 800838c:	4418      	add	r0, r3
 800838e:	f010 001f 	ands.w	r0, r0, #31
 8008392:	f000 8092 	beq.w	80084ba <_dtoa_r+0x90a>
 8008396:	f1c0 0320 	rsb	r3, r0, #32
 800839a:	2b04      	cmp	r3, #4
 800839c:	f340 808a 	ble.w	80084b4 <_dtoa_r+0x904>
 80083a0:	f1c0 001c 	rsb	r0, r0, #28
 80083a4:	9b04      	ldr	r3, [sp, #16]
 80083a6:	4403      	add	r3, r0
 80083a8:	9304      	str	r3, [sp, #16]
 80083aa:	9b05      	ldr	r3, [sp, #20]
 80083ac:	4403      	add	r3, r0
 80083ae:	4405      	add	r5, r0
 80083b0:	9305      	str	r3, [sp, #20]
 80083b2:	9b04      	ldr	r3, [sp, #16]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	dd07      	ble.n	80083c8 <_dtoa_r+0x818>
 80083b8:	ee18 1a10 	vmov	r1, s16
 80083bc:	461a      	mov	r2, r3
 80083be:	4620      	mov	r0, r4
 80083c0:	f000 fc10 	bl	8008be4 <__lshift>
 80083c4:	ee08 0a10 	vmov	s16, r0
 80083c8:	9b05      	ldr	r3, [sp, #20]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	dd05      	ble.n	80083da <_dtoa_r+0x82a>
 80083ce:	4631      	mov	r1, r6
 80083d0:	461a      	mov	r2, r3
 80083d2:	4620      	mov	r0, r4
 80083d4:	f000 fc06 	bl	8008be4 <__lshift>
 80083d8:	4606      	mov	r6, r0
 80083da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d06e      	beq.n	80084be <_dtoa_r+0x90e>
 80083e0:	ee18 0a10 	vmov	r0, s16
 80083e4:	4631      	mov	r1, r6
 80083e6:	f000 fc6d 	bl	8008cc4 <__mcmp>
 80083ea:	2800      	cmp	r0, #0
 80083ec:	da67      	bge.n	80084be <_dtoa_r+0x90e>
 80083ee:	9b00      	ldr	r3, [sp, #0]
 80083f0:	3b01      	subs	r3, #1
 80083f2:	ee18 1a10 	vmov	r1, s16
 80083f6:	9300      	str	r3, [sp, #0]
 80083f8:	220a      	movs	r2, #10
 80083fa:	2300      	movs	r3, #0
 80083fc:	4620      	mov	r0, r4
 80083fe:	f000 fa41 	bl	8008884 <__multadd>
 8008402:	9b08      	ldr	r3, [sp, #32]
 8008404:	ee08 0a10 	vmov	s16, r0
 8008408:	2b00      	cmp	r3, #0
 800840a:	f000 81b1 	beq.w	8008770 <_dtoa_r+0xbc0>
 800840e:	2300      	movs	r3, #0
 8008410:	4639      	mov	r1, r7
 8008412:	220a      	movs	r2, #10
 8008414:	4620      	mov	r0, r4
 8008416:	f000 fa35 	bl	8008884 <__multadd>
 800841a:	9b02      	ldr	r3, [sp, #8]
 800841c:	2b00      	cmp	r3, #0
 800841e:	4607      	mov	r7, r0
 8008420:	f300 808e 	bgt.w	8008540 <_dtoa_r+0x990>
 8008424:	9b06      	ldr	r3, [sp, #24]
 8008426:	2b02      	cmp	r3, #2
 8008428:	dc51      	bgt.n	80084ce <_dtoa_r+0x91e>
 800842a:	e089      	b.n	8008540 <_dtoa_r+0x990>
 800842c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800842e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008432:	e74b      	b.n	80082cc <_dtoa_r+0x71c>
 8008434:	9b03      	ldr	r3, [sp, #12]
 8008436:	1e5e      	subs	r6, r3, #1
 8008438:	9b07      	ldr	r3, [sp, #28]
 800843a:	42b3      	cmp	r3, r6
 800843c:	bfbf      	itttt	lt
 800843e:	9b07      	ldrlt	r3, [sp, #28]
 8008440:	9607      	strlt	r6, [sp, #28]
 8008442:	1af2      	sublt	r2, r6, r3
 8008444:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008446:	bfb6      	itet	lt
 8008448:	189b      	addlt	r3, r3, r2
 800844a:	1b9e      	subge	r6, r3, r6
 800844c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800844e:	9b03      	ldr	r3, [sp, #12]
 8008450:	bfb8      	it	lt
 8008452:	2600      	movlt	r6, #0
 8008454:	2b00      	cmp	r3, #0
 8008456:	bfb7      	itett	lt
 8008458:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800845c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008460:	1a9d      	sublt	r5, r3, r2
 8008462:	2300      	movlt	r3, #0
 8008464:	e734      	b.n	80082d0 <_dtoa_r+0x720>
 8008466:	9e07      	ldr	r6, [sp, #28]
 8008468:	9d04      	ldr	r5, [sp, #16]
 800846a:	9f08      	ldr	r7, [sp, #32]
 800846c:	e73b      	b.n	80082e6 <_dtoa_r+0x736>
 800846e:	9a07      	ldr	r2, [sp, #28]
 8008470:	e767      	b.n	8008342 <_dtoa_r+0x792>
 8008472:	9b06      	ldr	r3, [sp, #24]
 8008474:	2b01      	cmp	r3, #1
 8008476:	dc18      	bgt.n	80084aa <_dtoa_r+0x8fa>
 8008478:	f1ba 0f00 	cmp.w	sl, #0
 800847c:	d115      	bne.n	80084aa <_dtoa_r+0x8fa>
 800847e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008482:	b993      	cbnz	r3, 80084aa <_dtoa_r+0x8fa>
 8008484:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008488:	0d1b      	lsrs	r3, r3, #20
 800848a:	051b      	lsls	r3, r3, #20
 800848c:	b183      	cbz	r3, 80084b0 <_dtoa_r+0x900>
 800848e:	9b04      	ldr	r3, [sp, #16]
 8008490:	3301      	adds	r3, #1
 8008492:	9304      	str	r3, [sp, #16]
 8008494:	9b05      	ldr	r3, [sp, #20]
 8008496:	3301      	adds	r3, #1
 8008498:	9305      	str	r3, [sp, #20]
 800849a:	f04f 0801 	mov.w	r8, #1
 800849e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	f47f af6a 	bne.w	800837a <_dtoa_r+0x7ca>
 80084a6:	2001      	movs	r0, #1
 80084a8:	e76f      	b.n	800838a <_dtoa_r+0x7da>
 80084aa:	f04f 0800 	mov.w	r8, #0
 80084ae:	e7f6      	b.n	800849e <_dtoa_r+0x8ee>
 80084b0:	4698      	mov	r8, r3
 80084b2:	e7f4      	b.n	800849e <_dtoa_r+0x8ee>
 80084b4:	f43f af7d 	beq.w	80083b2 <_dtoa_r+0x802>
 80084b8:	4618      	mov	r0, r3
 80084ba:	301c      	adds	r0, #28
 80084bc:	e772      	b.n	80083a4 <_dtoa_r+0x7f4>
 80084be:	9b03      	ldr	r3, [sp, #12]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	dc37      	bgt.n	8008534 <_dtoa_r+0x984>
 80084c4:	9b06      	ldr	r3, [sp, #24]
 80084c6:	2b02      	cmp	r3, #2
 80084c8:	dd34      	ble.n	8008534 <_dtoa_r+0x984>
 80084ca:	9b03      	ldr	r3, [sp, #12]
 80084cc:	9302      	str	r3, [sp, #8]
 80084ce:	9b02      	ldr	r3, [sp, #8]
 80084d0:	b96b      	cbnz	r3, 80084ee <_dtoa_r+0x93e>
 80084d2:	4631      	mov	r1, r6
 80084d4:	2205      	movs	r2, #5
 80084d6:	4620      	mov	r0, r4
 80084d8:	f000 f9d4 	bl	8008884 <__multadd>
 80084dc:	4601      	mov	r1, r0
 80084de:	4606      	mov	r6, r0
 80084e0:	ee18 0a10 	vmov	r0, s16
 80084e4:	f000 fbee 	bl	8008cc4 <__mcmp>
 80084e8:	2800      	cmp	r0, #0
 80084ea:	f73f adbb 	bgt.w	8008064 <_dtoa_r+0x4b4>
 80084ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084f0:	9d01      	ldr	r5, [sp, #4]
 80084f2:	43db      	mvns	r3, r3
 80084f4:	9300      	str	r3, [sp, #0]
 80084f6:	f04f 0800 	mov.w	r8, #0
 80084fa:	4631      	mov	r1, r6
 80084fc:	4620      	mov	r0, r4
 80084fe:	f000 f99f 	bl	8008840 <_Bfree>
 8008502:	2f00      	cmp	r7, #0
 8008504:	f43f aea4 	beq.w	8008250 <_dtoa_r+0x6a0>
 8008508:	f1b8 0f00 	cmp.w	r8, #0
 800850c:	d005      	beq.n	800851a <_dtoa_r+0x96a>
 800850e:	45b8      	cmp	r8, r7
 8008510:	d003      	beq.n	800851a <_dtoa_r+0x96a>
 8008512:	4641      	mov	r1, r8
 8008514:	4620      	mov	r0, r4
 8008516:	f000 f993 	bl	8008840 <_Bfree>
 800851a:	4639      	mov	r1, r7
 800851c:	4620      	mov	r0, r4
 800851e:	f000 f98f 	bl	8008840 <_Bfree>
 8008522:	e695      	b.n	8008250 <_dtoa_r+0x6a0>
 8008524:	2600      	movs	r6, #0
 8008526:	4637      	mov	r7, r6
 8008528:	e7e1      	b.n	80084ee <_dtoa_r+0x93e>
 800852a:	9700      	str	r7, [sp, #0]
 800852c:	4637      	mov	r7, r6
 800852e:	e599      	b.n	8008064 <_dtoa_r+0x4b4>
 8008530:	40240000 	.word	0x40240000
 8008534:	9b08      	ldr	r3, [sp, #32]
 8008536:	2b00      	cmp	r3, #0
 8008538:	f000 80ca 	beq.w	80086d0 <_dtoa_r+0xb20>
 800853c:	9b03      	ldr	r3, [sp, #12]
 800853e:	9302      	str	r3, [sp, #8]
 8008540:	2d00      	cmp	r5, #0
 8008542:	dd05      	ble.n	8008550 <_dtoa_r+0x9a0>
 8008544:	4639      	mov	r1, r7
 8008546:	462a      	mov	r2, r5
 8008548:	4620      	mov	r0, r4
 800854a:	f000 fb4b 	bl	8008be4 <__lshift>
 800854e:	4607      	mov	r7, r0
 8008550:	f1b8 0f00 	cmp.w	r8, #0
 8008554:	d05b      	beq.n	800860e <_dtoa_r+0xa5e>
 8008556:	6879      	ldr	r1, [r7, #4]
 8008558:	4620      	mov	r0, r4
 800855a:	f000 f931 	bl	80087c0 <_Balloc>
 800855e:	4605      	mov	r5, r0
 8008560:	b928      	cbnz	r0, 800856e <_dtoa_r+0x9be>
 8008562:	4b87      	ldr	r3, [pc, #540]	; (8008780 <_dtoa_r+0xbd0>)
 8008564:	4602      	mov	r2, r0
 8008566:	f240 21ea 	movw	r1, #746	; 0x2ea
 800856a:	f7ff bb3b 	b.w	8007be4 <_dtoa_r+0x34>
 800856e:	693a      	ldr	r2, [r7, #16]
 8008570:	3202      	adds	r2, #2
 8008572:	0092      	lsls	r2, r2, #2
 8008574:	f107 010c 	add.w	r1, r7, #12
 8008578:	300c      	adds	r0, #12
 800857a:	f000 f913 	bl	80087a4 <memcpy>
 800857e:	2201      	movs	r2, #1
 8008580:	4629      	mov	r1, r5
 8008582:	4620      	mov	r0, r4
 8008584:	f000 fb2e 	bl	8008be4 <__lshift>
 8008588:	9b01      	ldr	r3, [sp, #4]
 800858a:	f103 0901 	add.w	r9, r3, #1
 800858e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008592:	4413      	add	r3, r2
 8008594:	9305      	str	r3, [sp, #20]
 8008596:	f00a 0301 	and.w	r3, sl, #1
 800859a:	46b8      	mov	r8, r7
 800859c:	9304      	str	r3, [sp, #16]
 800859e:	4607      	mov	r7, r0
 80085a0:	4631      	mov	r1, r6
 80085a2:	ee18 0a10 	vmov	r0, s16
 80085a6:	f7ff fa75 	bl	8007a94 <quorem>
 80085aa:	4641      	mov	r1, r8
 80085ac:	9002      	str	r0, [sp, #8]
 80085ae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80085b2:	ee18 0a10 	vmov	r0, s16
 80085b6:	f000 fb85 	bl	8008cc4 <__mcmp>
 80085ba:	463a      	mov	r2, r7
 80085bc:	9003      	str	r0, [sp, #12]
 80085be:	4631      	mov	r1, r6
 80085c0:	4620      	mov	r0, r4
 80085c2:	f000 fb9b 	bl	8008cfc <__mdiff>
 80085c6:	68c2      	ldr	r2, [r0, #12]
 80085c8:	f109 3bff 	add.w	fp, r9, #4294967295
 80085cc:	4605      	mov	r5, r0
 80085ce:	bb02      	cbnz	r2, 8008612 <_dtoa_r+0xa62>
 80085d0:	4601      	mov	r1, r0
 80085d2:	ee18 0a10 	vmov	r0, s16
 80085d6:	f000 fb75 	bl	8008cc4 <__mcmp>
 80085da:	4602      	mov	r2, r0
 80085dc:	4629      	mov	r1, r5
 80085de:	4620      	mov	r0, r4
 80085e0:	9207      	str	r2, [sp, #28]
 80085e2:	f000 f92d 	bl	8008840 <_Bfree>
 80085e6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80085ea:	ea43 0102 	orr.w	r1, r3, r2
 80085ee:	9b04      	ldr	r3, [sp, #16]
 80085f0:	430b      	orrs	r3, r1
 80085f2:	464d      	mov	r5, r9
 80085f4:	d10f      	bne.n	8008616 <_dtoa_r+0xa66>
 80085f6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80085fa:	d02a      	beq.n	8008652 <_dtoa_r+0xaa2>
 80085fc:	9b03      	ldr	r3, [sp, #12]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	dd02      	ble.n	8008608 <_dtoa_r+0xa58>
 8008602:	9b02      	ldr	r3, [sp, #8]
 8008604:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008608:	f88b a000 	strb.w	sl, [fp]
 800860c:	e775      	b.n	80084fa <_dtoa_r+0x94a>
 800860e:	4638      	mov	r0, r7
 8008610:	e7ba      	b.n	8008588 <_dtoa_r+0x9d8>
 8008612:	2201      	movs	r2, #1
 8008614:	e7e2      	b.n	80085dc <_dtoa_r+0xa2c>
 8008616:	9b03      	ldr	r3, [sp, #12]
 8008618:	2b00      	cmp	r3, #0
 800861a:	db04      	blt.n	8008626 <_dtoa_r+0xa76>
 800861c:	9906      	ldr	r1, [sp, #24]
 800861e:	430b      	orrs	r3, r1
 8008620:	9904      	ldr	r1, [sp, #16]
 8008622:	430b      	orrs	r3, r1
 8008624:	d122      	bne.n	800866c <_dtoa_r+0xabc>
 8008626:	2a00      	cmp	r2, #0
 8008628:	ddee      	ble.n	8008608 <_dtoa_r+0xa58>
 800862a:	ee18 1a10 	vmov	r1, s16
 800862e:	2201      	movs	r2, #1
 8008630:	4620      	mov	r0, r4
 8008632:	f000 fad7 	bl	8008be4 <__lshift>
 8008636:	4631      	mov	r1, r6
 8008638:	ee08 0a10 	vmov	s16, r0
 800863c:	f000 fb42 	bl	8008cc4 <__mcmp>
 8008640:	2800      	cmp	r0, #0
 8008642:	dc03      	bgt.n	800864c <_dtoa_r+0xa9c>
 8008644:	d1e0      	bne.n	8008608 <_dtoa_r+0xa58>
 8008646:	f01a 0f01 	tst.w	sl, #1
 800864a:	d0dd      	beq.n	8008608 <_dtoa_r+0xa58>
 800864c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008650:	d1d7      	bne.n	8008602 <_dtoa_r+0xa52>
 8008652:	2339      	movs	r3, #57	; 0x39
 8008654:	f88b 3000 	strb.w	r3, [fp]
 8008658:	462b      	mov	r3, r5
 800865a:	461d      	mov	r5, r3
 800865c:	3b01      	subs	r3, #1
 800865e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008662:	2a39      	cmp	r2, #57	; 0x39
 8008664:	d071      	beq.n	800874a <_dtoa_r+0xb9a>
 8008666:	3201      	adds	r2, #1
 8008668:	701a      	strb	r2, [r3, #0]
 800866a:	e746      	b.n	80084fa <_dtoa_r+0x94a>
 800866c:	2a00      	cmp	r2, #0
 800866e:	dd07      	ble.n	8008680 <_dtoa_r+0xad0>
 8008670:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008674:	d0ed      	beq.n	8008652 <_dtoa_r+0xaa2>
 8008676:	f10a 0301 	add.w	r3, sl, #1
 800867a:	f88b 3000 	strb.w	r3, [fp]
 800867e:	e73c      	b.n	80084fa <_dtoa_r+0x94a>
 8008680:	9b05      	ldr	r3, [sp, #20]
 8008682:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008686:	4599      	cmp	r9, r3
 8008688:	d047      	beq.n	800871a <_dtoa_r+0xb6a>
 800868a:	ee18 1a10 	vmov	r1, s16
 800868e:	2300      	movs	r3, #0
 8008690:	220a      	movs	r2, #10
 8008692:	4620      	mov	r0, r4
 8008694:	f000 f8f6 	bl	8008884 <__multadd>
 8008698:	45b8      	cmp	r8, r7
 800869a:	ee08 0a10 	vmov	s16, r0
 800869e:	f04f 0300 	mov.w	r3, #0
 80086a2:	f04f 020a 	mov.w	r2, #10
 80086a6:	4641      	mov	r1, r8
 80086a8:	4620      	mov	r0, r4
 80086aa:	d106      	bne.n	80086ba <_dtoa_r+0xb0a>
 80086ac:	f000 f8ea 	bl	8008884 <__multadd>
 80086b0:	4680      	mov	r8, r0
 80086b2:	4607      	mov	r7, r0
 80086b4:	f109 0901 	add.w	r9, r9, #1
 80086b8:	e772      	b.n	80085a0 <_dtoa_r+0x9f0>
 80086ba:	f000 f8e3 	bl	8008884 <__multadd>
 80086be:	4639      	mov	r1, r7
 80086c0:	4680      	mov	r8, r0
 80086c2:	2300      	movs	r3, #0
 80086c4:	220a      	movs	r2, #10
 80086c6:	4620      	mov	r0, r4
 80086c8:	f000 f8dc 	bl	8008884 <__multadd>
 80086cc:	4607      	mov	r7, r0
 80086ce:	e7f1      	b.n	80086b4 <_dtoa_r+0xb04>
 80086d0:	9b03      	ldr	r3, [sp, #12]
 80086d2:	9302      	str	r3, [sp, #8]
 80086d4:	9d01      	ldr	r5, [sp, #4]
 80086d6:	ee18 0a10 	vmov	r0, s16
 80086da:	4631      	mov	r1, r6
 80086dc:	f7ff f9da 	bl	8007a94 <quorem>
 80086e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80086e4:	9b01      	ldr	r3, [sp, #4]
 80086e6:	f805 ab01 	strb.w	sl, [r5], #1
 80086ea:	1aea      	subs	r2, r5, r3
 80086ec:	9b02      	ldr	r3, [sp, #8]
 80086ee:	4293      	cmp	r3, r2
 80086f0:	dd09      	ble.n	8008706 <_dtoa_r+0xb56>
 80086f2:	ee18 1a10 	vmov	r1, s16
 80086f6:	2300      	movs	r3, #0
 80086f8:	220a      	movs	r2, #10
 80086fa:	4620      	mov	r0, r4
 80086fc:	f000 f8c2 	bl	8008884 <__multadd>
 8008700:	ee08 0a10 	vmov	s16, r0
 8008704:	e7e7      	b.n	80086d6 <_dtoa_r+0xb26>
 8008706:	9b02      	ldr	r3, [sp, #8]
 8008708:	2b00      	cmp	r3, #0
 800870a:	bfc8      	it	gt
 800870c:	461d      	movgt	r5, r3
 800870e:	9b01      	ldr	r3, [sp, #4]
 8008710:	bfd8      	it	le
 8008712:	2501      	movle	r5, #1
 8008714:	441d      	add	r5, r3
 8008716:	f04f 0800 	mov.w	r8, #0
 800871a:	ee18 1a10 	vmov	r1, s16
 800871e:	2201      	movs	r2, #1
 8008720:	4620      	mov	r0, r4
 8008722:	f000 fa5f 	bl	8008be4 <__lshift>
 8008726:	4631      	mov	r1, r6
 8008728:	ee08 0a10 	vmov	s16, r0
 800872c:	f000 faca 	bl	8008cc4 <__mcmp>
 8008730:	2800      	cmp	r0, #0
 8008732:	dc91      	bgt.n	8008658 <_dtoa_r+0xaa8>
 8008734:	d102      	bne.n	800873c <_dtoa_r+0xb8c>
 8008736:	f01a 0f01 	tst.w	sl, #1
 800873a:	d18d      	bne.n	8008658 <_dtoa_r+0xaa8>
 800873c:	462b      	mov	r3, r5
 800873e:	461d      	mov	r5, r3
 8008740:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008744:	2a30      	cmp	r2, #48	; 0x30
 8008746:	d0fa      	beq.n	800873e <_dtoa_r+0xb8e>
 8008748:	e6d7      	b.n	80084fa <_dtoa_r+0x94a>
 800874a:	9a01      	ldr	r2, [sp, #4]
 800874c:	429a      	cmp	r2, r3
 800874e:	d184      	bne.n	800865a <_dtoa_r+0xaaa>
 8008750:	9b00      	ldr	r3, [sp, #0]
 8008752:	3301      	adds	r3, #1
 8008754:	9300      	str	r3, [sp, #0]
 8008756:	2331      	movs	r3, #49	; 0x31
 8008758:	7013      	strb	r3, [r2, #0]
 800875a:	e6ce      	b.n	80084fa <_dtoa_r+0x94a>
 800875c:	4b09      	ldr	r3, [pc, #36]	; (8008784 <_dtoa_r+0xbd4>)
 800875e:	f7ff ba95 	b.w	8007c8c <_dtoa_r+0xdc>
 8008762:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008764:	2b00      	cmp	r3, #0
 8008766:	f47f aa6e 	bne.w	8007c46 <_dtoa_r+0x96>
 800876a:	4b07      	ldr	r3, [pc, #28]	; (8008788 <_dtoa_r+0xbd8>)
 800876c:	f7ff ba8e 	b.w	8007c8c <_dtoa_r+0xdc>
 8008770:	9b02      	ldr	r3, [sp, #8]
 8008772:	2b00      	cmp	r3, #0
 8008774:	dcae      	bgt.n	80086d4 <_dtoa_r+0xb24>
 8008776:	9b06      	ldr	r3, [sp, #24]
 8008778:	2b02      	cmp	r3, #2
 800877a:	f73f aea8 	bgt.w	80084ce <_dtoa_r+0x91e>
 800877e:	e7a9      	b.n	80086d4 <_dtoa_r+0xb24>
 8008780:	08009d07 	.word	0x08009d07
 8008784:	08009c64 	.word	0x08009c64
 8008788:	08009c88 	.word	0x08009c88

0800878c <_localeconv_r>:
 800878c:	4800      	ldr	r0, [pc, #0]	; (8008790 <_localeconv_r+0x4>)
 800878e:	4770      	bx	lr
 8008790:	20000160 	.word	0x20000160

08008794 <malloc>:
 8008794:	4b02      	ldr	r3, [pc, #8]	; (80087a0 <malloc+0xc>)
 8008796:	4601      	mov	r1, r0
 8008798:	6818      	ldr	r0, [r3, #0]
 800879a:	f000 bc17 	b.w	8008fcc <_malloc_r>
 800879e:	bf00      	nop
 80087a0:	2000000c 	.word	0x2000000c

080087a4 <memcpy>:
 80087a4:	440a      	add	r2, r1
 80087a6:	4291      	cmp	r1, r2
 80087a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80087ac:	d100      	bne.n	80087b0 <memcpy+0xc>
 80087ae:	4770      	bx	lr
 80087b0:	b510      	push	{r4, lr}
 80087b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087ba:	4291      	cmp	r1, r2
 80087bc:	d1f9      	bne.n	80087b2 <memcpy+0xe>
 80087be:	bd10      	pop	{r4, pc}

080087c0 <_Balloc>:
 80087c0:	b570      	push	{r4, r5, r6, lr}
 80087c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80087c4:	4604      	mov	r4, r0
 80087c6:	460d      	mov	r5, r1
 80087c8:	b976      	cbnz	r6, 80087e8 <_Balloc+0x28>
 80087ca:	2010      	movs	r0, #16
 80087cc:	f7ff ffe2 	bl	8008794 <malloc>
 80087d0:	4602      	mov	r2, r0
 80087d2:	6260      	str	r0, [r4, #36]	; 0x24
 80087d4:	b920      	cbnz	r0, 80087e0 <_Balloc+0x20>
 80087d6:	4b18      	ldr	r3, [pc, #96]	; (8008838 <_Balloc+0x78>)
 80087d8:	4818      	ldr	r0, [pc, #96]	; (800883c <_Balloc+0x7c>)
 80087da:	2166      	movs	r1, #102	; 0x66
 80087dc:	f000 fc7a 	bl	80090d4 <__assert_func>
 80087e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80087e4:	6006      	str	r6, [r0, #0]
 80087e6:	60c6      	str	r6, [r0, #12]
 80087e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80087ea:	68f3      	ldr	r3, [r6, #12]
 80087ec:	b183      	cbz	r3, 8008810 <_Balloc+0x50>
 80087ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087f0:	68db      	ldr	r3, [r3, #12]
 80087f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80087f6:	b9b8      	cbnz	r0, 8008828 <_Balloc+0x68>
 80087f8:	2101      	movs	r1, #1
 80087fa:	fa01 f605 	lsl.w	r6, r1, r5
 80087fe:	1d72      	adds	r2, r6, #5
 8008800:	0092      	lsls	r2, r2, #2
 8008802:	4620      	mov	r0, r4
 8008804:	f000 fb60 	bl	8008ec8 <_calloc_r>
 8008808:	b160      	cbz	r0, 8008824 <_Balloc+0x64>
 800880a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800880e:	e00e      	b.n	800882e <_Balloc+0x6e>
 8008810:	2221      	movs	r2, #33	; 0x21
 8008812:	2104      	movs	r1, #4
 8008814:	4620      	mov	r0, r4
 8008816:	f000 fb57 	bl	8008ec8 <_calloc_r>
 800881a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800881c:	60f0      	str	r0, [r6, #12]
 800881e:	68db      	ldr	r3, [r3, #12]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d1e4      	bne.n	80087ee <_Balloc+0x2e>
 8008824:	2000      	movs	r0, #0
 8008826:	bd70      	pop	{r4, r5, r6, pc}
 8008828:	6802      	ldr	r2, [r0, #0]
 800882a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800882e:	2300      	movs	r3, #0
 8008830:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008834:	e7f7      	b.n	8008826 <_Balloc+0x66>
 8008836:	bf00      	nop
 8008838:	08009c95 	.word	0x08009c95
 800883c:	08009d18 	.word	0x08009d18

08008840 <_Bfree>:
 8008840:	b570      	push	{r4, r5, r6, lr}
 8008842:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008844:	4605      	mov	r5, r0
 8008846:	460c      	mov	r4, r1
 8008848:	b976      	cbnz	r6, 8008868 <_Bfree+0x28>
 800884a:	2010      	movs	r0, #16
 800884c:	f7ff ffa2 	bl	8008794 <malloc>
 8008850:	4602      	mov	r2, r0
 8008852:	6268      	str	r0, [r5, #36]	; 0x24
 8008854:	b920      	cbnz	r0, 8008860 <_Bfree+0x20>
 8008856:	4b09      	ldr	r3, [pc, #36]	; (800887c <_Bfree+0x3c>)
 8008858:	4809      	ldr	r0, [pc, #36]	; (8008880 <_Bfree+0x40>)
 800885a:	218a      	movs	r1, #138	; 0x8a
 800885c:	f000 fc3a 	bl	80090d4 <__assert_func>
 8008860:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008864:	6006      	str	r6, [r0, #0]
 8008866:	60c6      	str	r6, [r0, #12]
 8008868:	b13c      	cbz	r4, 800887a <_Bfree+0x3a>
 800886a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800886c:	6862      	ldr	r2, [r4, #4]
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008874:	6021      	str	r1, [r4, #0]
 8008876:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800887a:	bd70      	pop	{r4, r5, r6, pc}
 800887c:	08009c95 	.word	0x08009c95
 8008880:	08009d18 	.word	0x08009d18

08008884 <__multadd>:
 8008884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008888:	690d      	ldr	r5, [r1, #16]
 800888a:	4607      	mov	r7, r0
 800888c:	460c      	mov	r4, r1
 800888e:	461e      	mov	r6, r3
 8008890:	f101 0c14 	add.w	ip, r1, #20
 8008894:	2000      	movs	r0, #0
 8008896:	f8dc 3000 	ldr.w	r3, [ip]
 800889a:	b299      	uxth	r1, r3
 800889c:	fb02 6101 	mla	r1, r2, r1, r6
 80088a0:	0c1e      	lsrs	r6, r3, #16
 80088a2:	0c0b      	lsrs	r3, r1, #16
 80088a4:	fb02 3306 	mla	r3, r2, r6, r3
 80088a8:	b289      	uxth	r1, r1
 80088aa:	3001      	adds	r0, #1
 80088ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80088b0:	4285      	cmp	r5, r0
 80088b2:	f84c 1b04 	str.w	r1, [ip], #4
 80088b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80088ba:	dcec      	bgt.n	8008896 <__multadd+0x12>
 80088bc:	b30e      	cbz	r6, 8008902 <__multadd+0x7e>
 80088be:	68a3      	ldr	r3, [r4, #8]
 80088c0:	42ab      	cmp	r3, r5
 80088c2:	dc19      	bgt.n	80088f8 <__multadd+0x74>
 80088c4:	6861      	ldr	r1, [r4, #4]
 80088c6:	4638      	mov	r0, r7
 80088c8:	3101      	adds	r1, #1
 80088ca:	f7ff ff79 	bl	80087c0 <_Balloc>
 80088ce:	4680      	mov	r8, r0
 80088d0:	b928      	cbnz	r0, 80088de <__multadd+0x5a>
 80088d2:	4602      	mov	r2, r0
 80088d4:	4b0c      	ldr	r3, [pc, #48]	; (8008908 <__multadd+0x84>)
 80088d6:	480d      	ldr	r0, [pc, #52]	; (800890c <__multadd+0x88>)
 80088d8:	21b5      	movs	r1, #181	; 0xb5
 80088da:	f000 fbfb 	bl	80090d4 <__assert_func>
 80088de:	6922      	ldr	r2, [r4, #16]
 80088e0:	3202      	adds	r2, #2
 80088e2:	f104 010c 	add.w	r1, r4, #12
 80088e6:	0092      	lsls	r2, r2, #2
 80088e8:	300c      	adds	r0, #12
 80088ea:	f7ff ff5b 	bl	80087a4 <memcpy>
 80088ee:	4621      	mov	r1, r4
 80088f0:	4638      	mov	r0, r7
 80088f2:	f7ff ffa5 	bl	8008840 <_Bfree>
 80088f6:	4644      	mov	r4, r8
 80088f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80088fc:	3501      	adds	r5, #1
 80088fe:	615e      	str	r6, [r3, #20]
 8008900:	6125      	str	r5, [r4, #16]
 8008902:	4620      	mov	r0, r4
 8008904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008908:	08009d07 	.word	0x08009d07
 800890c:	08009d18 	.word	0x08009d18

08008910 <__hi0bits>:
 8008910:	0c03      	lsrs	r3, r0, #16
 8008912:	041b      	lsls	r3, r3, #16
 8008914:	b9d3      	cbnz	r3, 800894c <__hi0bits+0x3c>
 8008916:	0400      	lsls	r0, r0, #16
 8008918:	2310      	movs	r3, #16
 800891a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800891e:	bf04      	itt	eq
 8008920:	0200      	lsleq	r0, r0, #8
 8008922:	3308      	addeq	r3, #8
 8008924:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008928:	bf04      	itt	eq
 800892a:	0100      	lsleq	r0, r0, #4
 800892c:	3304      	addeq	r3, #4
 800892e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008932:	bf04      	itt	eq
 8008934:	0080      	lsleq	r0, r0, #2
 8008936:	3302      	addeq	r3, #2
 8008938:	2800      	cmp	r0, #0
 800893a:	db05      	blt.n	8008948 <__hi0bits+0x38>
 800893c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008940:	f103 0301 	add.w	r3, r3, #1
 8008944:	bf08      	it	eq
 8008946:	2320      	moveq	r3, #32
 8008948:	4618      	mov	r0, r3
 800894a:	4770      	bx	lr
 800894c:	2300      	movs	r3, #0
 800894e:	e7e4      	b.n	800891a <__hi0bits+0xa>

08008950 <__lo0bits>:
 8008950:	6803      	ldr	r3, [r0, #0]
 8008952:	f013 0207 	ands.w	r2, r3, #7
 8008956:	4601      	mov	r1, r0
 8008958:	d00b      	beq.n	8008972 <__lo0bits+0x22>
 800895a:	07da      	lsls	r2, r3, #31
 800895c:	d423      	bmi.n	80089a6 <__lo0bits+0x56>
 800895e:	0798      	lsls	r0, r3, #30
 8008960:	bf49      	itett	mi
 8008962:	085b      	lsrmi	r3, r3, #1
 8008964:	089b      	lsrpl	r3, r3, #2
 8008966:	2001      	movmi	r0, #1
 8008968:	600b      	strmi	r3, [r1, #0]
 800896a:	bf5c      	itt	pl
 800896c:	600b      	strpl	r3, [r1, #0]
 800896e:	2002      	movpl	r0, #2
 8008970:	4770      	bx	lr
 8008972:	b298      	uxth	r0, r3
 8008974:	b9a8      	cbnz	r0, 80089a2 <__lo0bits+0x52>
 8008976:	0c1b      	lsrs	r3, r3, #16
 8008978:	2010      	movs	r0, #16
 800897a:	b2da      	uxtb	r2, r3
 800897c:	b90a      	cbnz	r2, 8008982 <__lo0bits+0x32>
 800897e:	3008      	adds	r0, #8
 8008980:	0a1b      	lsrs	r3, r3, #8
 8008982:	071a      	lsls	r2, r3, #28
 8008984:	bf04      	itt	eq
 8008986:	091b      	lsreq	r3, r3, #4
 8008988:	3004      	addeq	r0, #4
 800898a:	079a      	lsls	r2, r3, #30
 800898c:	bf04      	itt	eq
 800898e:	089b      	lsreq	r3, r3, #2
 8008990:	3002      	addeq	r0, #2
 8008992:	07da      	lsls	r2, r3, #31
 8008994:	d403      	bmi.n	800899e <__lo0bits+0x4e>
 8008996:	085b      	lsrs	r3, r3, #1
 8008998:	f100 0001 	add.w	r0, r0, #1
 800899c:	d005      	beq.n	80089aa <__lo0bits+0x5a>
 800899e:	600b      	str	r3, [r1, #0]
 80089a0:	4770      	bx	lr
 80089a2:	4610      	mov	r0, r2
 80089a4:	e7e9      	b.n	800897a <__lo0bits+0x2a>
 80089a6:	2000      	movs	r0, #0
 80089a8:	4770      	bx	lr
 80089aa:	2020      	movs	r0, #32
 80089ac:	4770      	bx	lr
	...

080089b0 <__i2b>:
 80089b0:	b510      	push	{r4, lr}
 80089b2:	460c      	mov	r4, r1
 80089b4:	2101      	movs	r1, #1
 80089b6:	f7ff ff03 	bl	80087c0 <_Balloc>
 80089ba:	4602      	mov	r2, r0
 80089bc:	b928      	cbnz	r0, 80089ca <__i2b+0x1a>
 80089be:	4b05      	ldr	r3, [pc, #20]	; (80089d4 <__i2b+0x24>)
 80089c0:	4805      	ldr	r0, [pc, #20]	; (80089d8 <__i2b+0x28>)
 80089c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80089c6:	f000 fb85 	bl	80090d4 <__assert_func>
 80089ca:	2301      	movs	r3, #1
 80089cc:	6144      	str	r4, [r0, #20]
 80089ce:	6103      	str	r3, [r0, #16]
 80089d0:	bd10      	pop	{r4, pc}
 80089d2:	bf00      	nop
 80089d4:	08009d07 	.word	0x08009d07
 80089d8:	08009d18 	.word	0x08009d18

080089dc <__multiply>:
 80089dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089e0:	4691      	mov	r9, r2
 80089e2:	690a      	ldr	r2, [r1, #16]
 80089e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80089e8:	429a      	cmp	r2, r3
 80089ea:	bfb8      	it	lt
 80089ec:	460b      	movlt	r3, r1
 80089ee:	460c      	mov	r4, r1
 80089f0:	bfbc      	itt	lt
 80089f2:	464c      	movlt	r4, r9
 80089f4:	4699      	movlt	r9, r3
 80089f6:	6927      	ldr	r7, [r4, #16]
 80089f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80089fc:	68a3      	ldr	r3, [r4, #8]
 80089fe:	6861      	ldr	r1, [r4, #4]
 8008a00:	eb07 060a 	add.w	r6, r7, sl
 8008a04:	42b3      	cmp	r3, r6
 8008a06:	b085      	sub	sp, #20
 8008a08:	bfb8      	it	lt
 8008a0a:	3101      	addlt	r1, #1
 8008a0c:	f7ff fed8 	bl	80087c0 <_Balloc>
 8008a10:	b930      	cbnz	r0, 8008a20 <__multiply+0x44>
 8008a12:	4602      	mov	r2, r0
 8008a14:	4b44      	ldr	r3, [pc, #272]	; (8008b28 <__multiply+0x14c>)
 8008a16:	4845      	ldr	r0, [pc, #276]	; (8008b2c <__multiply+0x150>)
 8008a18:	f240 115d 	movw	r1, #349	; 0x15d
 8008a1c:	f000 fb5a 	bl	80090d4 <__assert_func>
 8008a20:	f100 0514 	add.w	r5, r0, #20
 8008a24:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008a28:	462b      	mov	r3, r5
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	4543      	cmp	r3, r8
 8008a2e:	d321      	bcc.n	8008a74 <__multiply+0x98>
 8008a30:	f104 0314 	add.w	r3, r4, #20
 8008a34:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008a38:	f109 0314 	add.w	r3, r9, #20
 8008a3c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008a40:	9202      	str	r2, [sp, #8]
 8008a42:	1b3a      	subs	r2, r7, r4
 8008a44:	3a15      	subs	r2, #21
 8008a46:	f022 0203 	bic.w	r2, r2, #3
 8008a4a:	3204      	adds	r2, #4
 8008a4c:	f104 0115 	add.w	r1, r4, #21
 8008a50:	428f      	cmp	r7, r1
 8008a52:	bf38      	it	cc
 8008a54:	2204      	movcc	r2, #4
 8008a56:	9201      	str	r2, [sp, #4]
 8008a58:	9a02      	ldr	r2, [sp, #8]
 8008a5a:	9303      	str	r3, [sp, #12]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d80c      	bhi.n	8008a7a <__multiply+0x9e>
 8008a60:	2e00      	cmp	r6, #0
 8008a62:	dd03      	ble.n	8008a6c <__multiply+0x90>
 8008a64:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d05a      	beq.n	8008b22 <__multiply+0x146>
 8008a6c:	6106      	str	r6, [r0, #16]
 8008a6e:	b005      	add	sp, #20
 8008a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a74:	f843 2b04 	str.w	r2, [r3], #4
 8008a78:	e7d8      	b.n	8008a2c <__multiply+0x50>
 8008a7a:	f8b3 a000 	ldrh.w	sl, [r3]
 8008a7e:	f1ba 0f00 	cmp.w	sl, #0
 8008a82:	d024      	beq.n	8008ace <__multiply+0xf2>
 8008a84:	f104 0e14 	add.w	lr, r4, #20
 8008a88:	46a9      	mov	r9, r5
 8008a8a:	f04f 0c00 	mov.w	ip, #0
 8008a8e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008a92:	f8d9 1000 	ldr.w	r1, [r9]
 8008a96:	fa1f fb82 	uxth.w	fp, r2
 8008a9a:	b289      	uxth	r1, r1
 8008a9c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008aa0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008aa4:	f8d9 2000 	ldr.w	r2, [r9]
 8008aa8:	4461      	add	r1, ip
 8008aaa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008aae:	fb0a c20b 	mla	r2, sl, fp, ip
 8008ab2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008ab6:	b289      	uxth	r1, r1
 8008ab8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008abc:	4577      	cmp	r7, lr
 8008abe:	f849 1b04 	str.w	r1, [r9], #4
 8008ac2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008ac6:	d8e2      	bhi.n	8008a8e <__multiply+0xb2>
 8008ac8:	9a01      	ldr	r2, [sp, #4]
 8008aca:	f845 c002 	str.w	ip, [r5, r2]
 8008ace:	9a03      	ldr	r2, [sp, #12]
 8008ad0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008ad4:	3304      	adds	r3, #4
 8008ad6:	f1b9 0f00 	cmp.w	r9, #0
 8008ada:	d020      	beq.n	8008b1e <__multiply+0x142>
 8008adc:	6829      	ldr	r1, [r5, #0]
 8008ade:	f104 0c14 	add.w	ip, r4, #20
 8008ae2:	46ae      	mov	lr, r5
 8008ae4:	f04f 0a00 	mov.w	sl, #0
 8008ae8:	f8bc b000 	ldrh.w	fp, [ip]
 8008aec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008af0:	fb09 220b 	mla	r2, r9, fp, r2
 8008af4:	4492      	add	sl, r2
 8008af6:	b289      	uxth	r1, r1
 8008af8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008afc:	f84e 1b04 	str.w	r1, [lr], #4
 8008b00:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008b04:	f8be 1000 	ldrh.w	r1, [lr]
 8008b08:	0c12      	lsrs	r2, r2, #16
 8008b0a:	fb09 1102 	mla	r1, r9, r2, r1
 8008b0e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008b12:	4567      	cmp	r7, ip
 8008b14:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008b18:	d8e6      	bhi.n	8008ae8 <__multiply+0x10c>
 8008b1a:	9a01      	ldr	r2, [sp, #4]
 8008b1c:	50a9      	str	r1, [r5, r2]
 8008b1e:	3504      	adds	r5, #4
 8008b20:	e79a      	b.n	8008a58 <__multiply+0x7c>
 8008b22:	3e01      	subs	r6, #1
 8008b24:	e79c      	b.n	8008a60 <__multiply+0x84>
 8008b26:	bf00      	nop
 8008b28:	08009d07 	.word	0x08009d07
 8008b2c:	08009d18 	.word	0x08009d18

08008b30 <__pow5mult>:
 8008b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b34:	4615      	mov	r5, r2
 8008b36:	f012 0203 	ands.w	r2, r2, #3
 8008b3a:	4606      	mov	r6, r0
 8008b3c:	460f      	mov	r7, r1
 8008b3e:	d007      	beq.n	8008b50 <__pow5mult+0x20>
 8008b40:	4c25      	ldr	r4, [pc, #148]	; (8008bd8 <__pow5mult+0xa8>)
 8008b42:	3a01      	subs	r2, #1
 8008b44:	2300      	movs	r3, #0
 8008b46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008b4a:	f7ff fe9b 	bl	8008884 <__multadd>
 8008b4e:	4607      	mov	r7, r0
 8008b50:	10ad      	asrs	r5, r5, #2
 8008b52:	d03d      	beq.n	8008bd0 <__pow5mult+0xa0>
 8008b54:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008b56:	b97c      	cbnz	r4, 8008b78 <__pow5mult+0x48>
 8008b58:	2010      	movs	r0, #16
 8008b5a:	f7ff fe1b 	bl	8008794 <malloc>
 8008b5e:	4602      	mov	r2, r0
 8008b60:	6270      	str	r0, [r6, #36]	; 0x24
 8008b62:	b928      	cbnz	r0, 8008b70 <__pow5mult+0x40>
 8008b64:	4b1d      	ldr	r3, [pc, #116]	; (8008bdc <__pow5mult+0xac>)
 8008b66:	481e      	ldr	r0, [pc, #120]	; (8008be0 <__pow5mult+0xb0>)
 8008b68:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008b6c:	f000 fab2 	bl	80090d4 <__assert_func>
 8008b70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008b74:	6004      	str	r4, [r0, #0]
 8008b76:	60c4      	str	r4, [r0, #12]
 8008b78:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008b7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008b80:	b94c      	cbnz	r4, 8008b96 <__pow5mult+0x66>
 8008b82:	f240 2171 	movw	r1, #625	; 0x271
 8008b86:	4630      	mov	r0, r6
 8008b88:	f7ff ff12 	bl	80089b0 <__i2b>
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008b92:	4604      	mov	r4, r0
 8008b94:	6003      	str	r3, [r0, #0]
 8008b96:	f04f 0900 	mov.w	r9, #0
 8008b9a:	07eb      	lsls	r3, r5, #31
 8008b9c:	d50a      	bpl.n	8008bb4 <__pow5mult+0x84>
 8008b9e:	4639      	mov	r1, r7
 8008ba0:	4622      	mov	r2, r4
 8008ba2:	4630      	mov	r0, r6
 8008ba4:	f7ff ff1a 	bl	80089dc <__multiply>
 8008ba8:	4639      	mov	r1, r7
 8008baa:	4680      	mov	r8, r0
 8008bac:	4630      	mov	r0, r6
 8008bae:	f7ff fe47 	bl	8008840 <_Bfree>
 8008bb2:	4647      	mov	r7, r8
 8008bb4:	106d      	asrs	r5, r5, #1
 8008bb6:	d00b      	beq.n	8008bd0 <__pow5mult+0xa0>
 8008bb8:	6820      	ldr	r0, [r4, #0]
 8008bba:	b938      	cbnz	r0, 8008bcc <__pow5mult+0x9c>
 8008bbc:	4622      	mov	r2, r4
 8008bbe:	4621      	mov	r1, r4
 8008bc0:	4630      	mov	r0, r6
 8008bc2:	f7ff ff0b 	bl	80089dc <__multiply>
 8008bc6:	6020      	str	r0, [r4, #0]
 8008bc8:	f8c0 9000 	str.w	r9, [r0]
 8008bcc:	4604      	mov	r4, r0
 8008bce:	e7e4      	b.n	8008b9a <__pow5mult+0x6a>
 8008bd0:	4638      	mov	r0, r7
 8008bd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bd6:	bf00      	nop
 8008bd8:	08009e68 	.word	0x08009e68
 8008bdc:	08009c95 	.word	0x08009c95
 8008be0:	08009d18 	.word	0x08009d18

08008be4 <__lshift>:
 8008be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008be8:	460c      	mov	r4, r1
 8008bea:	6849      	ldr	r1, [r1, #4]
 8008bec:	6923      	ldr	r3, [r4, #16]
 8008bee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008bf2:	68a3      	ldr	r3, [r4, #8]
 8008bf4:	4607      	mov	r7, r0
 8008bf6:	4691      	mov	r9, r2
 8008bf8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008bfc:	f108 0601 	add.w	r6, r8, #1
 8008c00:	42b3      	cmp	r3, r6
 8008c02:	db0b      	blt.n	8008c1c <__lshift+0x38>
 8008c04:	4638      	mov	r0, r7
 8008c06:	f7ff fddb 	bl	80087c0 <_Balloc>
 8008c0a:	4605      	mov	r5, r0
 8008c0c:	b948      	cbnz	r0, 8008c22 <__lshift+0x3e>
 8008c0e:	4602      	mov	r2, r0
 8008c10:	4b2a      	ldr	r3, [pc, #168]	; (8008cbc <__lshift+0xd8>)
 8008c12:	482b      	ldr	r0, [pc, #172]	; (8008cc0 <__lshift+0xdc>)
 8008c14:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008c18:	f000 fa5c 	bl	80090d4 <__assert_func>
 8008c1c:	3101      	adds	r1, #1
 8008c1e:	005b      	lsls	r3, r3, #1
 8008c20:	e7ee      	b.n	8008c00 <__lshift+0x1c>
 8008c22:	2300      	movs	r3, #0
 8008c24:	f100 0114 	add.w	r1, r0, #20
 8008c28:	f100 0210 	add.w	r2, r0, #16
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	4553      	cmp	r3, sl
 8008c30:	db37      	blt.n	8008ca2 <__lshift+0xbe>
 8008c32:	6920      	ldr	r0, [r4, #16]
 8008c34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008c38:	f104 0314 	add.w	r3, r4, #20
 8008c3c:	f019 091f 	ands.w	r9, r9, #31
 8008c40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008c44:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008c48:	d02f      	beq.n	8008caa <__lshift+0xc6>
 8008c4a:	f1c9 0e20 	rsb	lr, r9, #32
 8008c4e:	468a      	mov	sl, r1
 8008c50:	f04f 0c00 	mov.w	ip, #0
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	fa02 f209 	lsl.w	r2, r2, r9
 8008c5a:	ea42 020c 	orr.w	r2, r2, ip
 8008c5e:	f84a 2b04 	str.w	r2, [sl], #4
 8008c62:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c66:	4298      	cmp	r0, r3
 8008c68:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008c6c:	d8f2      	bhi.n	8008c54 <__lshift+0x70>
 8008c6e:	1b03      	subs	r3, r0, r4
 8008c70:	3b15      	subs	r3, #21
 8008c72:	f023 0303 	bic.w	r3, r3, #3
 8008c76:	3304      	adds	r3, #4
 8008c78:	f104 0215 	add.w	r2, r4, #21
 8008c7c:	4290      	cmp	r0, r2
 8008c7e:	bf38      	it	cc
 8008c80:	2304      	movcc	r3, #4
 8008c82:	f841 c003 	str.w	ip, [r1, r3]
 8008c86:	f1bc 0f00 	cmp.w	ip, #0
 8008c8a:	d001      	beq.n	8008c90 <__lshift+0xac>
 8008c8c:	f108 0602 	add.w	r6, r8, #2
 8008c90:	3e01      	subs	r6, #1
 8008c92:	4638      	mov	r0, r7
 8008c94:	612e      	str	r6, [r5, #16]
 8008c96:	4621      	mov	r1, r4
 8008c98:	f7ff fdd2 	bl	8008840 <_Bfree>
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ca2:	f842 0f04 	str.w	r0, [r2, #4]!
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	e7c1      	b.n	8008c2e <__lshift+0x4a>
 8008caa:	3904      	subs	r1, #4
 8008cac:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cb0:	f841 2f04 	str.w	r2, [r1, #4]!
 8008cb4:	4298      	cmp	r0, r3
 8008cb6:	d8f9      	bhi.n	8008cac <__lshift+0xc8>
 8008cb8:	e7ea      	b.n	8008c90 <__lshift+0xac>
 8008cba:	bf00      	nop
 8008cbc:	08009d07 	.word	0x08009d07
 8008cc0:	08009d18 	.word	0x08009d18

08008cc4 <__mcmp>:
 8008cc4:	b530      	push	{r4, r5, lr}
 8008cc6:	6902      	ldr	r2, [r0, #16]
 8008cc8:	690c      	ldr	r4, [r1, #16]
 8008cca:	1b12      	subs	r2, r2, r4
 8008ccc:	d10e      	bne.n	8008cec <__mcmp+0x28>
 8008cce:	f100 0314 	add.w	r3, r0, #20
 8008cd2:	3114      	adds	r1, #20
 8008cd4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008cd8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008cdc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008ce0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008ce4:	42a5      	cmp	r5, r4
 8008ce6:	d003      	beq.n	8008cf0 <__mcmp+0x2c>
 8008ce8:	d305      	bcc.n	8008cf6 <__mcmp+0x32>
 8008cea:	2201      	movs	r2, #1
 8008cec:	4610      	mov	r0, r2
 8008cee:	bd30      	pop	{r4, r5, pc}
 8008cf0:	4283      	cmp	r3, r0
 8008cf2:	d3f3      	bcc.n	8008cdc <__mcmp+0x18>
 8008cf4:	e7fa      	b.n	8008cec <__mcmp+0x28>
 8008cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8008cfa:	e7f7      	b.n	8008cec <__mcmp+0x28>

08008cfc <__mdiff>:
 8008cfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d00:	460c      	mov	r4, r1
 8008d02:	4606      	mov	r6, r0
 8008d04:	4611      	mov	r1, r2
 8008d06:	4620      	mov	r0, r4
 8008d08:	4690      	mov	r8, r2
 8008d0a:	f7ff ffdb 	bl	8008cc4 <__mcmp>
 8008d0e:	1e05      	subs	r5, r0, #0
 8008d10:	d110      	bne.n	8008d34 <__mdiff+0x38>
 8008d12:	4629      	mov	r1, r5
 8008d14:	4630      	mov	r0, r6
 8008d16:	f7ff fd53 	bl	80087c0 <_Balloc>
 8008d1a:	b930      	cbnz	r0, 8008d2a <__mdiff+0x2e>
 8008d1c:	4b3a      	ldr	r3, [pc, #232]	; (8008e08 <__mdiff+0x10c>)
 8008d1e:	4602      	mov	r2, r0
 8008d20:	f240 2132 	movw	r1, #562	; 0x232
 8008d24:	4839      	ldr	r0, [pc, #228]	; (8008e0c <__mdiff+0x110>)
 8008d26:	f000 f9d5 	bl	80090d4 <__assert_func>
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008d30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d34:	bfa4      	itt	ge
 8008d36:	4643      	movge	r3, r8
 8008d38:	46a0      	movge	r8, r4
 8008d3a:	4630      	mov	r0, r6
 8008d3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008d40:	bfa6      	itte	ge
 8008d42:	461c      	movge	r4, r3
 8008d44:	2500      	movge	r5, #0
 8008d46:	2501      	movlt	r5, #1
 8008d48:	f7ff fd3a 	bl	80087c0 <_Balloc>
 8008d4c:	b920      	cbnz	r0, 8008d58 <__mdiff+0x5c>
 8008d4e:	4b2e      	ldr	r3, [pc, #184]	; (8008e08 <__mdiff+0x10c>)
 8008d50:	4602      	mov	r2, r0
 8008d52:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008d56:	e7e5      	b.n	8008d24 <__mdiff+0x28>
 8008d58:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008d5c:	6926      	ldr	r6, [r4, #16]
 8008d5e:	60c5      	str	r5, [r0, #12]
 8008d60:	f104 0914 	add.w	r9, r4, #20
 8008d64:	f108 0514 	add.w	r5, r8, #20
 8008d68:	f100 0e14 	add.w	lr, r0, #20
 8008d6c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008d70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008d74:	f108 0210 	add.w	r2, r8, #16
 8008d78:	46f2      	mov	sl, lr
 8008d7a:	2100      	movs	r1, #0
 8008d7c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008d80:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008d84:	fa1f f883 	uxth.w	r8, r3
 8008d88:	fa11 f18b 	uxtah	r1, r1, fp
 8008d8c:	0c1b      	lsrs	r3, r3, #16
 8008d8e:	eba1 0808 	sub.w	r8, r1, r8
 8008d92:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008d96:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008d9a:	fa1f f888 	uxth.w	r8, r8
 8008d9e:	1419      	asrs	r1, r3, #16
 8008da0:	454e      	cmp	r6, r9
 8008da2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008da6:	f84a 3b04 	str.w	r3, [sl], #4
 8008daa:	d8e7      	bhi.n	8008d7c <__mdiff+0x80>
 8008dac:	1b33      	subs	r3, r6, r4
 8008dae:	3b15      	subs	r3, #21
 8008db0:	f023 0303 	bic.w	r3, r3, #3
 8008db4:	3304      	adds	r3, #4
 8008db6:	3415      	adds	r4, #21
 8008db8:	42a6      	cmp	r6, r4
 8008dba:	bf38      	it	cc
 8008dbc:	2304      	movcc	r3, #4
 8008dbe:	441d      	add	r5, r3
 8008dc0:	4473      	add	r3, lr
 8008dc2:	469e      	mov	lr, r3
 8008dc4:	462e      	mov	r6, r5
 8008dc6:	4566      	cmp	r6, ip
 8008dc8:	d30e      	bcc.n	8008de8 <__mdiff+0xec>
 8008dca:	f10c 0203 	add.w	r2, ip, #3
 8008dce:	1b52      	subs	r2, r2, r5
 8008dd0:	f022 0203 	bic.w	r2, r2, #3
 8008dd4:	3d03      	subs	r5, #3
 8008dd6:	45ac      	cmp	ip, r5
 8008dd8:	bf38      	it	cc
 8008dda:	2200      	movcc	r2, #0
 8008ddc:	441a      	add	r2, r3
 8008dde:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008de2:	b17b      	cbz	r3, 8008e04 <__mdiff+0x108>
 8008de4:	6107      	str	r7, [r0, #16]
 8008de6:	e7a3      	b.n	8008d30 <__mdiff+0x34>
 8008de8:	f856 8b04 	ldr.w	r8, [r6], #4
 8008dec:	fa11 f288 	uxtah	r2, r1, r8
 8008df0:	1414      	asrs	r4, r2, #16
 8008df2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008df6:	b292      	uxth	r2, r2
 8008df8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008dfc:	f84e 2b04 	str.w	r2, [lr], #4
 8008e00:	1421      	asrs	r1, r4, #16
 8008e02:	e7e0      	b.n	8008dc6 <__mdiff+0xca>
 8008e04:	3f01      	subs	r7, #1
 8008e06:	e7ea      	b.n	8008dde <__mdiff+0xe2>
 8008e08:	08009d07 	.word	0x08009d07
 8008e0c:	08009d18 	.word	0x08009d18

08008e10 <__d2b>:
 8008e10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008e14:	4689      	mov	r9, r1
 8008e16:	2101      	movs	r1, #1
 8008e18:	ec57 6b10 	vmov	r6, r7, d0
 8008e1c:	4690      	mov	r8, r2
 8008e1e:	f7ff fccf 	bl	80087c0 <_Balloc>
 8008e22:	4604      	mov	r4, r0
 8008e24:	b930      	cbnz	r0, 8008e34 <__d2b+0x24>
 8008e26:	4602      	mov	r2, r0
 8008e28:	4b25      	ldr	r3, [pc, #148]	; (8008ec0 <__d2b+0xb0>)
 8008e2a:	4826      	ldr	r0, [pc, #152]	; (8008ec4 <__d2b+0xb4>)
 8008e2c:	f240 310a 	movw	r1, #778	; 0x30a
 8008e30:	f000 f950 	bl	80090d4 <__assert_func>
 8008e34:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008e38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008e3c:	bb35      	cbnz	r5, 8008e8c <__d2b+0x7c>
 8008e3e:	2e00      	cmp	r6, #0
 8008e40:	9301      	str	r3, [sp, #4]
 8008e42:	d028      	beq.n	8008e96 <__d2b+0x86>
 8008e44:	4668      	mov	r0, sp
 8008e46:	9600      	str	r6, [sp, #0]
 8008e48:	f7ff fd82 	bl	8008950 <__lo0bits>
 8008e4c:	9900      	ldr	r1, [sp, #0]
 8008e4e:	b300      	cbz	r0, 8008e92 <__d2b+0x82>
 8008e50:	9a01      	ldr	r2, [sp, #4]
 8008e52:	f1c0 0320 	rsb	r3, r0, #32
 8008e56:	fa02 f303 	lsl.w	r3, r2, r3
 8008e5a:	430b      	orrs	r3, r1
 8008e5c:	40c2      	lsrs	r2, r0
 8008e5e:	6163      	str	r3, [r4, #20]
 8008e60:	9201      	str	r2, [sp, #4]
 8008e62:	9b01      	ldr	r3, [sp, #4]
 8008e64:	61a3      	str	r3, [r4, #24]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	bf14      	ite	ne
 8008e6a:	2202      	movne	r2, #2
 8008e6c:	2201      	moveq	r2, #1
 8008e6e:	6122      	str	r2, [r4, #16]
 8008e70:	b1d5      	cbz	r5, 8008ea8 <__d2b+0x98>
 8008e72:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008e76:	4405      	add	r5, r0
 8008e78:	f8c9 5000 	str.w	r5, [r9]
 8008e7c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008e80:	f8c8 0000 	str.w	r0, [r8]
 8008e84:	4620      	mov	r0, r4
 8008e86:	b003      	add	sp, #12
 8008e88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e90:	e7d5      	b.n	8008e3e <__d2b+0x2e>
 8008e92:	6161      	str	r1, [r4, #20]
 8008e94:	e7e5      	b.n	8008e62 <__d2b+0x52>
 8008e96:	a801      	add	r0, sp, #4
 8008e98:	f7ff fd5a 	bl	8008950 <__lo0bits>
 8008e9c:	9b01      	ldr	r3, [sp, #4]
 8008e9e:	6163      	str	r3, [r4, #20]
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	6122      	str	r2, [r4, #16]
 8008ea4:	3020      	adds	r0, #32
 8008ea6:	e7e3      	b.n	8008e70 <__d2b+0x60>
 8008ea8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008eac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008eb0:	f8c9 0000 	str.w	r0, [r9]
 8008eb4:	6918      	ldr	r0, [r3, #16]
 8008eb6:	f7ff fd2b 	bl	8008910 <__hi0bits>
 8008eba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008ebe:	e7df      	b.n	8008e80 <__d2b+0x70>
 8008ec0:	08009d07 	.word	0x08009d07
 8008ec4:	08009d18 	.word	0x08009d18

08008ec8 <_calloc_r>:
 8008ec8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008eca:	fba1 2402 	umull	r2, r4, r1, r2
 8008ece:	b94c      	cbnz	r4, 8008ee4 <_calloc_r+0x1c>
 8008ed0:	4611      	mov	r1, r2
 8008ed2:	9201      	str	r2, [sp, #4]
 8008ed4:	f000 f87a 	bl	8008fcc <_malloc_r>
 8008ed8:	9a01      	ldr	r2, [sp, #4]
 8008eda:	4605      	mov	r5, r0
 8008edc:	b930      	cbnz	r0, 8008eec <_calloc_r+0x24>
 8008ede:	4628      	mov	r0, r5
 8008ee0:	b003      	add	sp, #12
 8008ee2:	bd30      	pop	{r4, r5, pc}
 8008ee4:	220c      	movs	r2, #12
 8008ee6:	6002      	str	r2, [r0, #0]
 8008ee8:	2500      	movs	r5, #0
 8008eea:	e7f8      	b.n	8008ede <_calloc_r+0x16>
 8008eec:	4621      	mov	r1, r4
 8008eee:	f7fe f95f 	bl	80071b0 <memset>
 8008ef2:	e7f4      	b.n	8008ede <_calloc_r+0x16>

08008ef4 <_free_r>:
 8008ef4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ef6:	2900      	cmp	r1, #0
 8008ef8:	d044      	beq.n	8008f84 <_free_r+0x90>
 8008efa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008efe:	9001      	str	r0, [sp, #4]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	f1a1 0404 	sub.w	r4, r1, #4
 8008f06:	bfb8      	it	lt
 8008f08:	18e4      	addlt	r4, r4, r3
 8008f0a:	f000 f925 	bl	8009158 <__malloc_lock>
 8008f0e:	4a1e      	ldr	r2, [pc, #120]	; (8008f88 <_free_r+0x94>)
 8008f10:	9801      	ldr	r0, [sp, #4]
 8008f12:	6813      	ldr	r3, [r2, #0]
 8008f14:	b933      	cbnz	r3, 8008f24 <_free_r+0x30>
 8008f16:	6063      	str	r3, [r4, #4]
 8008f18:	6014      	str	r4, [r2, #0]
 8008f1a:	b003      	add	sp, #12
 8008f1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f20:	f000 b920 	b.w	8009164 <__malloc_unlock>
 8008f24:	42a3      	cmp	r3, r4
 8008f26:	d908      	bls.n	8008f3a <_free_r+0x46>
 8008f28:	6825      	ldr	r5, [r4, #0]
 8008f2a:	1961      	adds	r1, r4, r5
 8008f2c:	428b      	cmp	r3, r1
 8008f2e:	bf01      	itttt	eq
 8008f30:	6819      	ldreq	r1, [r3, #0]
 8008f32:	685b      	ldreq	r3, [r3, #4]
 8008f34:	1949      	addeq	r1, r1, r5
 8008f36:	6021      	streq	r1, [r4, #0]
 8008f38:	e7ed      	b.n	8008f16 <_free_r+0x22>
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	b10b      	cbz	r3, 8008f44 <_free_r+0x50>
 8008f40:	42a3      	cmp	r3, r4
 8008f42:	d9fa      	bls.n	8008f3a <_free_r+0x46>
 8008f44:	6811      	ldr	r1, [r2, #0]
 8008f46:	1855      	adds	r5, r2, r1
 8008f48:	42a5      	cmp	r5, r4
 8008f4a:	d10b      	bne.n	8008f64 <_free_r+0x70>
 8008f4c:	6824      	ldr	r4, [r4, #0]
 8008f4e:	4421      	add	r1, r4
 8008f50:	1854      	adds	r4, r2, r1
 8008f52:	42a3      	cmp	r3, r4
 8008f54:	6011      	str	r1, [r2, #0]
 8008f56:	d1e0      	bne.n	8008f1a <_free_r+0x26>
 8008f58:	681c      	ldr	r4, [r3, #0]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	6053      	str	r3, [r2, #4]
 8008f5e:	4421      	add	r1, r4
 8008f60:	6011      	str	r1, [r2, #0]
 8008f62:	e7da      	b.n	8008f1a <_free_r+0x26>
 8008f64:	d902      	bls.n	8008f6c <_free_r+0x78>
 8008f66:	230c      	movs	r3, #12
 8008f68:	6003      	str	r3, [r0, #0]
 8008f6a:	e7d6      	b.n	8008f1a <_free_r+0x26>
 8008f6c:	6825      	ldr	r5, [r4, #0]
 8008f6e:	1961      	adds	r1, r4, r5
 8008f70:	428b      	cmp	r3, r1
 8008f72:	bf04      	itt	eq
 8008f74:	6819      	ldreq	r1, [r3, #0]
 8008f76:	685b      	ldreq	r3, [r3, #4]
 8008f78:	6063      	str	r3, [r4, #4]
 8008f7a:	bf04      	itt	eq
 8008f7c:	1949      	addeq	r1, r1, r5
 8008f7e:	6021      	streq	r1, [r4, #0]
 8008f80:	6054      	str	r4, [r2, #4]
 8008f82:	e7ca      	b.n	8008f1a <_free_r+0x26>
 8008f84:	b003      	add	sp, #12
 8008f86:	bd30      	pop	{r4, r5, pc}
 8008f88:	2000044c 	.word	0x2000044c

08008f8c <sbrk_aligned>:
 8008f8c:	b570      	push	{r4, r5, r6, lr}
 8008f8e:	4e0e      	ldr	r6, [pc, #56]	; (8008fc8 <sbrk_aligned+0x3c>)
 8008f90:	460c      	mov	r4, r1
 8008f92:	6831      	ldr	r1, [r6, #0]
 8008f94:	4605      	mov	r5, r0
 8008f96:	b911      	cbnz	r1, 8008f9e <sbrk_aligned+0x12>
 8008f98:	f000 f88c 	bl	80090b4 <_sbrk_r>
 8008f9c:	6030      	str	r0, [r6, #0]
 8008f9e:	4621      	mov	r1, r4
 8008fa0:	4628      	mov	r0, r5
 8008fa2:	f000 f887 	bl	80090b4 <_sbrk_r>
 8008fa6:	1c43      	adds	r3, r0, #1
 8008fa8:	d00a      	beq.n	8008fc0 <sbrk_aligned+0x34>
 8008faa:	1cc4      	adds	r4, r0, #3
 8008fac:	f024 0403 	bic.w	r4, r4, #3
 8008fb0:	42a0      	cmp	r0, r4
 8008fb2:	d007      	beq.n	8008fc4 <sbrk_aligned+0x38>
 8008fb4:	1a21      	subs	r1, r4, r0
 8008fb6:	4628      	mov	r0, r5
 8008fb8:	f000 f87c 	bl	80090b4 <_sbrk_r>
 8008fbc:	3001      	adds	r0, #1
 8008fbe:	d101      	bne.n	8008fc4 <sbrk_aligned+0x38>
 8008fc0:	f04f 34ff 	mov.w	r4, #4294967295
 8008fc4:	4620      	mov	r0, r4
 8008fc6:	bd70      	pop	{r4, r5, r6, pc}
 8008fc8:	20000450 	.word	0x20000450

08008fcc <_malloc_r>:
 8008fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fd0:	1ccd      	adds	r5, r1, #3
 8008fd2:	f025 0503 	bic.w	r5, r5, #3
 8008fd6:	3508      	adds	r5, #8
 8008fd8:	2d0c      	cmp	r5, #12
 8008fda:	bf38      	it	cc
 8008fdc:	250c      	movcc	r5, #12
 8008fde:	2d00      	cmp	r5, #0
 8008fe0:	4607      	mov	r7, r0
 8008fe2:	db01      	blt.n	8008fe8 <_malloc_r+0x1c>
 8008fe4:	42a9      	cmp	r1, r5
 8008fe6:	d905      	bls.n	8008ff4 <_malloc_r+0x28>
 8008fe8:	230c      	movs	r3, #12
 8008fea:	603b      	str	r3, [r7, #0]
 8008fec:	2600      	movs	r6, #0
 8008fee:	4630      	mov	r0, r6
 8008ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ff4:	4e2e      	ldr	r6, [pc, #184]	; (80090b0 <_malloc_r+0xe4>)
 8008ff6:	f000 f8af 	bl	8009158 <__malloc_lock>
 8008ffa:	6833      	ldr	r3, [r6, #0]
 8008ffc:	461c      	mov	r4, r3
 8008ffe:	bb34      	cbnz	r4, 800904e <_malloc_r+0x82>
 8009000:	4629      	mov	r1, r5
 8009002:	4638      	mov	r0, r7
 8009004:	f7ff ffc2 	bl	8008f8c <sbrk_aligned>
 8009008:	1c43      	adds	r3, r0, #1
 800900a:	4604      	mov	r4, r0
 800900c:	d14d      	bne.n	80090aa <_malloc_r+0xde>
 800900e:	6834      	ldr	r4, [r6, #0]
 8009010:	4626      	mov	r6, r4
 8009012:	2e00      	cmp	r6, #0
 8009014:	d140      	bne.n	8009098 <_malloc_r+0xcc>
 8009016:	6823      	ldr	r3, [r4, #0]
 8009018:	4631      	mov	r1, r6
 800901a:	4638      	mov	r0, r7
 800901c:	eb04 0803 	add.w	r8, r4, r3
 8009020:	f000 f848 	bl	80090b4 <_sbrk_r>
 8009024:	4580      	cmp	r8, r0
 8009026:	d13a      	bne.n	800909e <_malloc_r+0xd2>
 8009028:	6821      	ldr	r1, [r4, #0]
 800902a:	3503      	adds	r5, #3
 800902c:	1a6d      	subs	r5, r5, r1
 800902e:	f025 0503 	bic.w	r5, r5, #3
 8009032:	3508      	adds	r5, #8
 8009034:	2d0c      	cmp	r5, #12
 8009036:	bf38      	it	cc
 8009038:	250c      	movcc	r5, #12
 800903a:	4629      	mov	r1, r5
 800903c:	4638      	mov	r0, r7
 800903e:	f7ff ffa5 	bl	8008f8c <sbrk_aligned>
 8009042:	3001      	adds	r0, #1
 8009044:	d02b      	beq.n	800909e <_malloc_r+0xd2>
 8009046:	6823      	ldr	r3, [r4, #0]
 8009048:	442b      	add	r3, r5
 800904a:	6023      	str	r3, [r4, #0]
 800904c:	e00e      	b.n	800906c <_malloc_r+0xa0>
 800904e:	6822      	ldr	r2, [r4, #0]
 8009050:	1b52      	subs	r2, r2, r5
 8009052:	d41e      	bmi.n	8009092 <_malloc_r+0xc6>
 8009054:	2a0b      	cmp	r2, #11
 8009056:	d916      	bls.n	8009086 <_malloc_r+0xba>
 8009058:	1961      	adds	r1, r4, r5
 800905a:	42a3      	cmp	r3, r4
 800905c:	6025      	str	r5, [r4, #0]
 800905e:	bf18      	it	ne
 8009060:	6059      	strne	r1, [r3, #4]
 8009062:	6863      	ldr	r3, [r4, #4]
 8009064:	bf08      	it	eq
 8009066:	6031      	streq	r1, [r6, #0]
 8009068:	5162      	str	r2, [r4, r5]
 800906a:	604b      	str	r3, [r1, #4]
 800906c:	4638      	mov	r0, r7
 800906e:	f104 060b 	add.w	r6, r4, #11
 8009072:	f000 f877 	bl	8009164 <__malloc_unlock>
 8009076:	f026 0607 	bic.w	r6, r6, #7
 800907a:	1d23      	adds	r3, r4, #4
 800907c:	1af2      	subs	r2, r6, r3
 800907e:	d0b6      	beq.n	8008fee <_malloc_r+0x22>
 8009080:	1b9b      	subs	r3, r3, r6
 8009082:	50a3      	str	r3, [r4, r2]
 8009084:	e7b3      	b.n	8008fee <_malloc_r+0x22>
 8009086:	6862      	ldr	r2, [r4, #4]
 8009088:	42a3      	cmp	r3, r4
 800908a:	bf0c      	ite	eq
 800908c:	6032      	streq	r2, [r6, #0]
 800908e:	605a      	strne	r2, [r3, #4]
 8009090:	e7ec      	b.n	800906c <_malloc_r+0xa0>
 8009092:	4623      	mov	r3, r4
 8009094:	6864      	ldr	r4, [r4, #4]
 8009096:	e7b2      	b.n	8008ffe <_malloc_r+0x32>
 8009098:	4634      	mov	r4, r6
 800909a:	6876      	ldr	r6, [r6, #4]
 800909c:	e7b9      	b.n	8009012 <_malloc_r+0x46>
 800909e:	230c      	movs	r3, #12
 80090a0:	603b      	str	r3, [r7, #0]
 80090a2:	4638      	mov	r0, r7
 80090a4:	f000 f85e 	bl	8009164 <__malloc_unlock>
 80090a8:	e7a1      	b.n	8008fee <_malloc_r+0x22>
 80090aa:	6025      	str	r5, [r4, #0]
 80090ac:	e7de      	b.n	800906c <_malloc_r+0xa0>
 80090ae:	bf00      	nop
 80090b0:	2000044c 	.word	0x2000044c

080090b4 <_sbrk_r>:
 80090b4:	b538      	push	{r3, r4, r5, lr}
 80090b6:	4d06      	ldr	r5, [pc, #24]	; (80090d0 <_sbrk_r+0x1c>)
 80090b8:	2300      	movs	r3, #0
 80090ba:	4604      	mov	r4, r0
 80090bc:	4608      	mov	r0, r1
 80090be:	602b      	str	r3, [r5, #0]
 80090c0:	f7f8 fddc 	bl	8001c7c <_sbrk>
 80090c4:	1c43      	adds	r3, r0, #1
 80090c6:	d102      	bne.n	80090ce <_sbrk_r+0x1a>
 80090c8:	682b      	ldr	r3, [r5, #0]
 80090ca:	b103      	cbz	r3, 80090ce <_sbrk_r+0x1a>
 80090cc:	6023      	str	r3, [r4, #0]
 80090ce:	bd38      	pop	{r3, r4, r5, pc}
 80090d0:	20000454 	.word	0x20000454

080090d4 <__assert_func>:
 80090d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80090d6:	4614      	mov	r4, r2
 80090d8:	461a      	mov	r2, r3
 80090da:	4b09      	ldr	r3, [pc, #36]	; (8009100 <__assert_func+0x2c>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4605      	mov	r5, r0
 80090e0:	68d8      	ldr	r0, [r3, #12]
 80090e2:	b14c      	cbz	r4, 80090f8 <__assert_func+0x24>
 80090e4:	4b07      	ldr	r3, [pc, #28]	; (8009104 <__assert_func+0x30>)
 80090e6:	9100      	str	r1, [sp, #0]
 80090e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80090ec:	4906      	ldr	r1, [pc, #24]	; (8009108 <__assert_func+0x34>)
 80090ee:	462b      	mov	r3, r5
 80090f0:	f000 f80e 	bl	8009110 <fiprintf>
 80090f4:	f000 fa64 	bl	80095c0 <abort>
 80090f8:	4b04      	ldr	r3, [pc, #16]	; (800910c <__assert_func+0x38>)
 80090fa:	461c      	mov	r4, r3
 80090fc:	e7f3      	b.n	80090e6 <__assert_func+0x12>
 80090fe:	bf00      	nop
 8009100:	2000000c 	.word	0x2000000c
 8009104:	08009e74 	.word	0x08009e74
 8009108:	08009e81 	.word	0x08009e81
 800910c:	08009eaf 	.word	0x08009eaf

08009110 <fiprintf>:
 8009110:	b40e      	push	{r1, r2, r3}
 8009112:	b503      	push	{r0, r1, lr}
 8009114:	4601      	mov	r1, r0
 8009116:	ab03      	add	r3, sp, #12
 8009118:	4805      	ldr	r0, [pc, #20]	; (8009130 <fiprintf+0x20>)
 800911a:	f853 2b04 	ldr.w	r2, [r3], #4
 800911e:	6800      	ldr	r0, [r0, #0]
 8009120:	9301      	str	r3, [sp, #4]
 8009122:	f000 f84f 	bl	80091c4 <_vfiprintf_r>
 8009126:	b002      	add	sp, #8
 8009128:	f85d eb04 	ldr.w	lr, [sp], #4
 800912c:	b003      	add	sp, #12
 800912e:	4770      	bx	lr
 8009130:	2000000c 	.word	0x2000000c

08009134 <__ascii_mbtowc>:
 8009134:	b082      	sub	sp, #8
 8009136:	b901      	cbnz	r1, 800913a <__ascii_mbtowc+0x6>
 8009138:	a901      	add	r1, sp, #4
 800913a:	b142      	cbz	r2, 800914e <__ascii_mbtowc+0x1a>
 800913c:	b14b      	cbz	r3, 8009152 <__ascii_mbtowc+0x1e>
 800913e:	7813      	ldrb	r3, [r2, #0]
 8009140:	600b      	str	r3, [r1, #0]
 8009142:	7812      	ldrb	r2, [r2, #0]
 8009144:	1e10      	subs	r0, r2, #0
 8009146:	bf18      	it	ne
 8009148:	2001      	movne	r0, #1
 800914a:	b002      	add	sp, #8
 800914c:	4770      	bx	lr
 800914e:	4610      	mov	r0, r2
 8009150:	e7fb      	b.n	800914a <__ascii_mbtowc+0x16>
 8009152:	f06f 0001 	mvn.w	r0, #1
 8009156:	e7f8      	b.n	800914a <__ascii_mbtowc+0x16>

08009158 <__malloc_lock>:
 8009158:	4801      	ldr	r0, [pc, #4]	; (8009160 <__malloc_lock+0x8>)
 800915a:	f000 bbf1 	b.w	8009940 <__retarget_lock_acquire_recursive>
 800915e:	bf00      	nop
 8009160:	20000458 	.word	0x20000458

08009164 <__malloc_unlock>:
 8009164:	4801      	ldr	r0, [pc, #4]	; (800916c <__malloc_unlock+0x8>)
 8009166:	f000 bbec 	b.w	8009942 <__retarget_lock_release_recursive>
 800916a:	bf00      	nop
 800916c:	20000458 	.word	0x20000458

08009170 <__sfputc_r>:
 8009170:	6893      	ldr	r3, [r2, #8]
 8009172:	3b01      	subs	r3, #1
 8009174:	2b00      	cmp	r3, #0
 8009176:	b410      	push	{r4}
 8009178:	6093      	str	r3, [r2, #8]
 800917a:	da08      	bge.n	800918e <__sfputc_r+0x1e>
 800917c:	6994      	ldr	r4, [r2, #24]
 800917e:	42a3      	cmp	r3, r4
 8009180:	db01      	blt.n	8009186 <__sfputc_r+0x16>
 8009182:	290a      	cmp	r1, #10
 8009184:	d103      	bne.n	800918e <__sfputc_r+0x1e>
 8009186:	f85d 4b04 	ldr.w	r4, [sp], #4
 800918a:	f000 b94b 	b.w	8009424 <__swbuf_r>
 800918e:	6813      	ldr	r3, [r2, #0]
 8009190:	1c58      	adds	r0, r3, #1
 8009192:	6010      	str	r0, [r2, #0]
 8009194:	7019      	strb	r1, [r3, #0]
 8009196:	4608      	mov	r0, r1
 8009198:	f85d 4b04 	ldr.w	r4, [sp], #4
 800919c:	4770      	bx	lr

0800919e <__sfputs_r>:
 800919e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091a0:	4606      	mov	r6, r0
 80091a2:	460f      	mov	r7, r1
 80091a4:	4614      	mov	r4, r2
 80091a6:	18d5      	adds	r5, r2, r3
 80091a8:	42ac      	cmp	r4, r5
 80091aa:	d101      	bne.n	80091b0 <__sfputs_r+0x12>
 80091ac:	2000      	movs	r0, #0
 80091ae:	e007      	b.n	80091c0 <__sfputs_r+0x22>
 80091b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091b4:	463a      	mov	r2, r7
 80091b6:	4630      	mov	r0, r6
 80091b8:	f7ff ffda 	bl	8009170 <__sfputc_r>
 80091bc:	1c43      	adds	r3, r0, #1
 80091be:	d1f3      	bne.n	80091a8 <__sfputs_r+0xa>
 80091c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080091c4 <_vfiprintf_r>:
 80091c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091c8:	460d      	mov	r5, r1
 80091ca:	b09d      	sub	sp, #116	; 0x74
 80091cc:	4614      	mov	r4, r2
 80091ce:	4698      	mov	r8, r3
 80091d0:	4606      	mov	r6, r0
 80091d2:	b118      	cbz	r0, 80091dc <_vfiprintf_r+0x18>
 80091d4:	6983      	ldr	r3, [r0, #24]
 80091d6:	b90b      	cbnz	r3, 80091dc <_vfiprintf_r+0x18>
 80091d8:	f000 fb14 	bl	8009804 <__sinit>
 80091dc:	4b89      	ldr	r3, [pc, #548]	; (8009404 <_vfiprintf_r+0x240>)
 80091de:	429d      	cmp	r5, r3
 80091e0:	d11b      	bne.n	800921a <_vfiprintf_r+0x56>
 80091e2:	6875      	ldr	r5, [r6, #4]
 80091e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091e6:	07d9      	lsls	r1, r3, #31
 80091e8:	d405      	bmi.n	80091f6 <_vfiprintf_r+0x32>
 80091ea:	89ab      	ldrh	r3, [r5, #12]
 80091ec:	059a      	lsls	r2, r3, #22
 80091ee:	d402      	bmi.n	80091f6 <_vfiprintf_r+0x32>
 80091f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091f2:	f000 fba5 	bl	8009940 <__retarget_lock_acquire_recursive>
 80091f6:	89ab      	ldrh	r3, [r5, #12]
 80091f8:	071b      	lsls	r3, r3, #28
 80091fa:	d501      	bpl.n	8009200 <_vfiprintf_r+0x3c>
 80091fc:	692b      	ldr	r3, [r5, #16]
 80091fe:	b9eb      	cbnz	r3, 800923c <_vfiprintf_r+0x78>
 8009200:	4629      	mov	r1, r5
 8009202:	4630      	mov	r0, r6
 8009204:	f000 f96e 	bl	80094e4 <__swsetup_r>
 8009208:	b1c0      	cbz	r0, 800923c <_vfiprintf_r+0x78>
 800920a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800920c:	07dc      	lsls	r4, r3, #31
 800920e:	d50e      	bpl.n	800922e <_vfiprintf_r+0x6a>
 8009210:	f04f 30ff 	mov.w	r0, #4294967295
 8009214:	b01d      	add	sp, #116	; 0x74
 8009216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800921a:	4b7b      	ldr	r3, [pc, #492]	; (8009408 <_vfiprintf_r+0x244>)
 800921c:	429d      	cmp	r5, r3
 800921e:	d101      	bne.n	8009224 <_vfiprintf_r+0x60>
 8009220:	68b5      	ldr	r5, [r6, #8]
 8009222:	e7df      	b.n	80091e4 <_vfiprintf_r+0x20>
 8009224:	4b79      	ldr	r3, [pc, #484]	; (800940c <_vfiprintf_r+0x248>)
 8009226:	429d      	cmp	r5, r3
 8009228:	bf08      	it	eq
 800922a:	68f5      	ldreq	r5, [r6, #12]
 800922c:	e7da      	b.n	80091e4 <_vfiprintf_r+0x20>
 800922e:	89ab      	ldrh	r3, [r5, #12]
 8009230:	0598      	lsls	r0, r3, #22
 8009232:	d4ed      	bmi.n	8009210 <_vfiprintf_r+0x4c>
 8009234:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009236:	f000 fb84 	bl	8009942 <__retarget_lock_release_recursive>
 800923a:	e7e9      	b.n	8009210 <_vfiprintf_r+0x4c>
 800923c:	2300      	movs	r3, #0
 800923e:	9309      	str	r3, [sp, #36]	; 0x24
 8009240:	2320      	movs	r3, #32
 8009242:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009246:	f8cd 800c 	str.w	r8, [sp, #12]
 800924a:	2330      	movs	r3, #48	; 0x30
 800924c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009410 <_vfiprintf_r+0x24c>
 8009250:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009254:	f04f 0901 	mov.w	r9, #1
 8009258:	4623      	mov	r3, r4
 800925a:	469a      	mov	sl, r3
 800925c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009260:	b10a      	cbz	r2, 8009266 <_vfiprintf_r+0xa2>
 8009262:	2a25      	cmp	r2, #37	; 0x25
 8009264:	d1f9      	bne.n	800925a <_vfiprintf_r+0x96>
 8009266:	ebba 0b04 	subs.w	fp, sl, r4
 800926a:	d00b      	beq.n	8009284 <_vfiprintf_r+0xc0>
 800926c:	465b      	mov	r3, fp
 800926e:	4622      	mov	r2, r4
 8009270:	4629      	mov	r1, r5
 8009272:	4630      	mov	r0, r6
 8009274:	f7ff ff93 	bl	800919e <__sfputs_r>
 8009278:	3001      	adds	r0, #1
 800927a:	f000 80aa 	beq.w	80093d2 <_vfiprintf_r+0x20e>
 800927e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009280:	445a      	add	r2, fp
 8009282:	9209      	str	r2, [sp, #36]	; 0x24
 8009284:	f89a 3000 	ldrb.w	r3, [sl]
 8009288:	2b00      	cmp	r3, #0
 800928a:	f000 80a2 	beq.w	80093d2 <_vfiprintf_r+0x20e>
 800928e:	2300      	movs	r3, #0
 8009290:	f04f 32ff 	mov.w	r2, #4294967295
 8009294:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009298:	f10a 0a01 	add.w	sl, sl, #1
 800929c:	9304      	str	r3, [sp, #16]
 800929e:	9307      	str	r3, [sp, #28]
 80092a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092a4:	931a      	str	r3, [sp, #104]	; 0x68
 80092a6:	4654      	mov	r4, sl
 80092a8:	2205      	movs	r2, #5
 80092aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092ae:	4858      	ldr	r0, [pc, #352]	; (8009410 <_vfiprintf_r+0x24c>)
 80092b0:	f7f6 ff96 	bl	80001e0 <memchr>
 80092b4:	9a04      	ldr	r2, [sp, #16]
 80092b6:	b9d8      	cbnz	r0, 80092f0 <_vfiprintf_r+0x12c>
 80092b8:	06d1      	lsls	r1, r2, #27
 80092ba:	bf44      	itt	mi
 80092bc:	2320      	movmi	r3, #32
 80092be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092c2:	0713      	lsls	r3, r2, #28
 80092c4:	bf44      	itt	mi
 80092c6:	232b      	movmi	r3, #43	; 0x2b
 80092c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092cc:	f89a 3000 	ldrb.w	r3, [sl]
 80092d0:	2b2a      	cmp	r3, #42	; 0x2a
 80092d2:	d015      	beq.n	8009300 <_vfiprintf_r+0x13c>
 80092d4:	9a07      	ldr	r2, [sp, #28]
 80092d6:	4654      	mov	r4, sl
 80092d8:	2000      	movs	r0, #0
 80092da:	f04f 0c0a 	mov.w	ip, #10
 80092de:	4621      	mov	r1, r4
 80092e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092e4:	3b30      	subs	r3, #48	; 0x30
 80092e6:	2b09      	cmp	r3, #9
 80092e8:	d94e      	bls.n	8009388 <_vfiprintf_r+0x1c4>
 80092ea:	b1b0      	cbz	r0, 800931a <_vfiprintf_r+0x156>
 80092ec:	9207      	str	r2, [sp, #28]
 80092ee:	e014      	b.n	800931a <_vfiprintf_r+0x156>
 80092f0:	eba0 0308 	sub.w	r3, r0, r8
 80092f4:	fa09 f303 	lsl.w	r3, r9, r3
 80092f8:	4313      	orrs	r3, r2
 80092fa:	9304      	str	r3, [sp, #16]
 80092fc:	46a2      	mov	sl, r4
 80092fe:	e7d2      	b.n	80092a6 <_vfiprintf_r+0xe2>
 8009300:	9b03      	ldr	r3, [sp, #12]
 8009302:	1d19      	adds	r1, r3, #4
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	9103      	str	r1, [sp, #12]
 8009308:	2b00      	cmp	r3, #0
 800930a:	bfbb      	ittet	lt
 800930c:	425b      	neglt	r3, r3
 800930e:	f042 0202 	orrlt.w	r2, r2, #2
 8009312:	9307      	strge	r3, [sp, #28]
 8009314:	9307      	strlt	r3, [sp, #28]
 8009316:	bfb8      	it	lt
 8009318:	9204      	strlt	r2, [sp, #16]
 800931a:	7823      	ldrb	r3, [r4, #0]
 800931c:	2b2e      	cmp	r3, #46	; 0x2e
 800931e:	d10c      	bne.n	800933a <_vfiprintf_r+0x176>
 8009320:	7863      	ldrb	r3, [r4, #1]
 8009322:	2b2a      	cmp	r3, #42	; 0x2a
 8009324:	d135      	bne.n	8009392 <_vfiprintf_r+0x1ce>
 8009326:	9b03      	ldr	r3, [sp, #12]
 8009328:	1d1a      	adds	r2, r3, #4
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	9203      	str	r2, [sp, #12]
 800932e:	2b00      	cmp	r3, #0
 8009330:	bfb8      	it	lt
 8009332:	f04f 33ff 	movlt.w	r3, #4294967295
 8009336:	3402      	adds	r4, #2
 8009338:	9305      	str	r3, [sp, #20]
 800933a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009420 <_vfiprintf_r+0x25c>
 800933e:	7821      	ldrb	r1, [r4, #0]
 8009340:	2203      	movs	r2, #3
 8009342:	4650      	mov	r0, sl
 8009344:	f7f6 ff4c 	bl	80001e0 <memchr>
 8009348:	b140      	cbz	r0, 800935c <_vfiprintf_r+0x198>
 800934a:	2340      	movs	r3, #64	; 0x40
 800934c:	eba0 000a 	sub.w	r0, r0, sl
 8009350:	fa03 f000 	lsl.w	r0, r3, r0
 8009354:	9b04      	ldr	r3, [sp, #16]
 8009356:	4303      	orrs	r3, r0
 8009358:	3401      	adds	r4, #1
 800935a:	9304      	str	r3, [sp, #16]
 800935c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009360:	482c      	ldr	r0, [pc, #176]	; (8009414 <_vfiprintf_r+0x250>)
 8009362:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009366:	2206      	movs	r2, #6
 8009368:	f7f6 ff3a 	bl	80001e0 <memchr>
 800936c:	2800      	cmp	r0, #0
 800936e:	d03f      	beq.n	80093f0 <_vfiprintf_r+0x22c>
 8009370:	4b29      	ldr	r3, [pc, #164]	; (8009418 <_vfiprintf_r+0x254>)
 8009372:	bb1b      	cbnz	r3, 80093bc <_vfiprintf_r+0x1f8>
 8009374:	9b03      	ldr	r3, [sp, #12]
 8009376:	3307      	adds	r3, #7
 8009378:	f023 0307 	bic.w	r3, r3, #7
 800937c:	3308      	adds	r3, #8
 800937e:	9303      	str	r3, [sp, #12]
 8009380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009382:	443b      	add	r3, r7
 8009384:	9309      	str	r3, [sp, #36]	; 0x24
 8009386:	e767      	b.n	8009258 <_vfiprintf_r+0x94>
 8009388:	fb0c 3202 	mla	r2, ip, r2, r3
 800938c:	460c      	mov	r4, r1
 800938e:	2001      	movs	r0, #1
 8009390:	e7a5      	b.n	80092de <_vfiprintf_r+0x11a>
 8009392:	2300      	movs	r3, #0
 8009394:	3401      	adds	r4, #1
 8009396:	9305      	str	r3, [sp, #20]
 8009398:	4619      	mov	r1, r3
 800939a:	f04f 0c0a 	mov.w	ip, #10
 800939e:	4620      	mov	r0, r4
 80093a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093a4:	3a30      	subs	r2, #48	; 0x30
 80093a6:	2a09      	cmp	r2, #9
 80093a8:	d903      	bls.n	80093b2 <_vfiprintf_r+0x1ee>
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d0c5      	beq.n	800933a <_vfiprintf_r+0x176>
 80093ae:	9105      	str	r1, [sp, #20]
 80093b0:	e7c3      	b.n	800933a <_vfiprintf_r+0x176>
 80093b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80093b6:	4604      	mov	r4, r0
 80093b8:	2301      	movs	r3, #1
 80093ba:	e7f0      	b.n	800939e <_vfiprintf_r+0x1da>
 80093bc:	ab03      	add	r3, sp, #12
 80093be:	9300      	str	r3, [sp, #0]
 80093c0:	462a      	mov	r2, r5
 80093c2:	4b16      	ldr	r3, [pc, #88]	; (800941c <_vfiprintf_r+0x258>)
 80093c4:	a904      	add	r1, sp, #16
 80093c6:	4630      	mov	r0, r6
 80093c8:	f7fd ff9a 	bl	8007300 <_printf_float>
 80093cc:	4607      	mov	r7, r0
 80093ce:	1c78      	adds	r0, r7, #1
 80093d0:	d1d6      	bne.n	8009380 <_vfiprintf_r+0x1bc>
 80093d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093d4:	07d9      	lsls	r1, r3, #31
 80093d6:	d405      	bmi.n	80093e4 <_vfiprintf_r+0x220>
 80093d8:	89ab      	ldrh	r3, [r5, #12]
 80093da:	059a      	lsls	r2, r3, #22
 80093dc:	d402      	bmi.n	80093e4 <_vfiprintf_r+0x220>
 80093de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093e0:	f000 faaf 	bl	8009942 <__retarget_lock_release_recursive>
 80093e4:	89ab      	ldrh	r3, [r5, #12]
 80093e6:	065b      	lsls	r3, r3, #25
 80093e8:	f53f af12 	bmi.w	8009210 <_vfiprintf_r+0x4c>
 80093ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093ee:	e711      	b.n	8009214 <_vfiprintf_r+0x50>
 80093f0:	ab03      	add	r3, sp, #12
 80093f2:	9300      	str	r3, [sp, #0]
 80093f4:	462a      	mov	r2, r5
 80093f6:	4b09      	ldr	r3, [pc, #36]	; (800941c <_vfiprintf_r+0x258>)
 80093f8:	a904      	add	r1, sp, #16
 80093fa:	4630      	mov	r0, r6
 80093fc:	f7fe fa24 	bl	8007848 <_printf_i>
 8009400:	e7e4      	b.n	80093cc <_vfiprintf_r+0x208>
 8009402:	bf00      	nop
 8009404:	08009fec 	.word	0x08009fec
 8009408:	0800a00c 	.word	0x0800a00c
 800940c:	08009fcc 	.word	0x08009fcc
 8009410:	08009eba 	.word	0x08009eba
 8009414:	08009ec4 	.word	0x08009ec4
 8009418:	08007301 	.word	0x08007301
 800941c:	0800919f 	.word	0x0800919f
 8009420:	08009ec0 	.word	0x08009ec0

08009424 <__swbuf_r>:
 8009424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009426:	460e      	mov	r6, r1
 8009428:	4614      	mov	r4, r2
 800942a:	4605      	mov	r5, r0
 800942c:	b118      	cbz	r0, 8009436 <__swbuf_r+0x12>
 800942e:	6983      	ldr	r3, [r0, #24]
 8009430:	b90b      	cbnz	r3, 8009436 <__swbuf_r+0x12>
 8009432:	f000 f9e7 	bl	8009804 <__sinit>
 8009436:	4b21      	ldr	r3, [pc, #132]	; (80094bc <__swbuf_r+0x98>)
 8009438:	429c      	cmp	r4, r3
 800943a:	d12b      	bne.n	8009494 <__swbuf_r+0x70>
 800943c:	686c      	ldr	r4, [r5, #4]
 800943e:	69a3      	ldr	r3, [r4, #24]
 8009440:	60a3      	str	r3, [r4, #8]
 8009442:	89a3      	ldrh	r3, [r4, #12]
 8009444:	071a      	lsls	r2, r3, #28
 8009446:	d52f      	bpl.n	80094a8 <__swbuf_r+0x84>
 8009448:	6923      	ldr	r3, [r4, #16]
 800944a:	b36b      	cbz	r3, 80094a8 <__swbuf_r+0x84>
 800944c:	6923      	ldr	r3, [r4, #16]
 800944e:	6820      	ldr	r0, [r4, #0]
 8009450:	1ac0      	subs	r0, r0, r3
 8009452:	6963      	ldr	r3, [r4, #20]
 8009454:	b2f6      	uxtb	r6, r6
 8009456:	4283      	cmp	r3, r0
 8009458:	4637      	mov	r7, r6
 800945a:	dc04      	bgt.n	8009466 <__swbuf_r+0x42>
 800945c:	4621      	mov	r1, r4
 800945e:	4628      	mov	r0, r5
 8009460:	f000 f93c 	bl	80096dc <_fflush_r>
 8009464:	bb30      	cbnz	r0, 80094b4 <__swbuf_r+0x90>
 8009466:	68a3      	ldr	r3, [r4, #8]
 8009468:	3b01      	subs	r3, #1
 800946a:	60a3      	str	r3, [r4, #8]
 800946c:	6823      	ldr	r3, [r4, #0]
 800946e:	1c5a      	adds	r2, r3, #1
 8009470:	6022      	str	r2, [r4, #0]
 8009472:	701e      	strb	r6, [r3, #0]
 8009474:	6963      	ldr	r3, [r4, #20]
 8009476:	3001      	adds	r0, #1
 8009478:	4283      	cmp	r3, r0
 800947a:	d004      	beq.n	8009486 <__swbuf_r+0x62>
 800947c:	89a3      	ldrh	r3, [r4, #12]
 800947e:	07db      	lsls	r3, r3, #31
 8009480:	d506      	bpl.n	8009490 <__swbuf_r+0x6c>
 8009482:	2e0a      	cmp	r6, #10
 8009484:	d104      	bne.n	8009490 <__swbuf_r+0x6c>
 8009486:	4621      	mov	r1, r4
 8009488:	4628      	mov	r0, r5
 800948a:	f000 f927 	bl	80096dc <_fflush_r>
 800948e:	b988      	cbnz	r0, 80094b4 <__swbuf_r+0x90>
 8009490:	4638      	mov	r0, r7
 8009492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009494:	4b0a      	ldr	r3, [pc, #40]	; (80094c0 <__swbuf_r+0x9c>)
 8009496:	429c      	cmp	r4, r3
 8009498:	d101      	bne.n	800949e <__swbuf_r+0x7a>
 800949a:	68ac      	ldr	r4, [r5, #8]
 800949c:	e7cf      	b.n	800943e <__swbuf_r+0x1a>
 800949e:	4b09      	ldr	r3, [pc, #36]	; (80094c4 <__swbuf_r+0xa0>)
 80094a0:	429c      	cmp	r4, r3
 80094a2:	bf08      	it	eq
 80094a4:	68ec      	ldreq	r4, [r5, #12]
 80094a6:	e7ca      	b.n	800943e <__swbuf_r+0x1a>
 80094a8:	4621      	mov	r1, r4
 80094aa:	4628      	mov	r0, r5
 80094ac:	f000 f81a 	bl	80094e4 <__swsetup_r>
 80094b0:	2800      	cmp	r0, #0
 80094b2:	d0cb      	beq.n	800944c <__swbuf_r+0x28>
 80094b4:	f04f 37ff 	mov.w	r7, #4294967295
 80094b8:	e7ea      	b.n	8009490 <__swbuf_r+0x6c>
 80094ba:	bf00      	nop
 80094bc:	08009fec 	.word	0x08009fec
 80094c0:	0800a00c 	.word	0x0800a00c
 80094c4:	08009fcc 	.word	0x08009fcc

080094c8 <__ascii_wctomb>:
 80094c8:	b149      	cbz	r1, 80094de <__ascii_wctomb+0x16>
 80094ca:	2aff      	cmp	r2, #255	; 0xff
 80094cc:	bf85      	ittet	hi
 80094ce:	238a      	movhi	r3, #138	; 0x8a
 80094d0:	6003      	strhi	r3, [r0, #0]
 80094d2:	700a      	strbls	r2, [r1, #0]
 80094d4:	f04f 30ff 	movhi.w	r0, #4294967295
 80094d8:	bf98      	it	ls
 80094da:	2001      	movls	r0, #1
 80094dc:	4770      	bx	lr
 80094de:	4608      	mov	r0, r1
 80094e0:	4770      	bx	lr
	...

080094e4 <__swsetup_r>:
 80094e4:	4b32      	ldr	r3, [pc, #200]	; (80095b0 <__swsetup_r+0xcc>)
 80094e6:	b570      	push	{r4, r5, r6, lr}
 80094e8:	681d      	ldr	r5, [r3, #0]
 80094ea:	4606      	mov	r6, r0
 80094ec:	460c      	mov	r4, r1
 80094ee:	b125      	cbz	r5, 80094fa <__swsetup_r+0x16>
 80094f0:	69ab      	ldr	r3, [r5, #24]
 80094f2:	b913      	cbnz	r3, 80094fa <__swsetup_r+0x16>
 80094f4:	4628      	mov	r0, r5
 80094f6:	f000 f985 	bl	8009804 <__sinit>
 80094fa:	4b2e      	ldr	r3, [pc, #184]	; (80095b4 <__swsetup_r+0xd0>)
 80094fc:	429c      	cmp	r4, r3
 80094fe:	d10f      	bne.n	8009520 <__swsetup_r+0x3c>
 8009500:	686c      	ldr	r4, [r5, #4]
 8009502:	89a3      	ldrh	r3, [r4, #12]
 8009504:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009508:	0719      	lsls	r1, r3, #28
 800950a:	d42c      	bmi.n	8009566 <__swsetup_r+0x82>
 800950c:	06dd      	lsls	r5, r3, #27
 800950e:	d411      	bmi.n	8009534 <__swsetup_r+0x50>
 8009510:	2309      	movs	r3, #9
 8009512:	6033      	str	r3, [r6, #0]
 8009514:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009518:	81a3      	strh	r3, [r4, #12]
 800951a:	f04f 30ff 	mov.w	r0, #4294967295
 800951e:	e03e      	b.n	800959e <__swsetup_r+0xba>
 8009520:	4b25      	ldr	r3, [pc, #148]	; (80095b8 <__swsetup_r+0xd4>)
 8009522:	429c      	cmp	r4, r3
 8009524:	d101      	bne.n	800952a <__swsetup_r+0x46>
 8009526:	68ac      	ldr	r4, [r5, #8]
 8009528:	e7eb      	b.n	8009502 <__swsetup_r+0x1e>
 800952a:	4b24      	ldr	r3, [pc, #144]	; (80095bc <__swsetup_r+0xd8>)
 800952c:	429c      	cmp	r4, r3
 800952e:	bf08      	it	eq
 8009530:	68ec      	ldreq	r4, [r5, #12]
 8009532:	e7e6      	b.n	8009502 <__swsetup_r+0x1e>
 8009534:	0758      	lsls	r0, r3, #29
 8009536:	d512      	bpl.n	800955e <__swsetup_r+0x7a>
 8009538:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800953a:	b141      	cbz	r1, 800954e <__swsetup_r+0x6a>
 800953c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009540:	4299      	cmp	r1, r3
 8009542:	d002      	beq.n	800954a <__swsetup_r+0x66>
 8009544:	4630      	mov	r0, r6
 8009546:	f7ff fcd5 	bl	8008ef4 <_free_r>
 800954a:	2300      	movs	r3, #0
 800954c:	6363      	str	r3, [r4, #52]	; 0x34
 800954e:	89a3      	ldrh	r3, [r4, #12]
 8009550:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009554:	81a3      	strh	r3, [r4, #12]
 8009556:	2300      	movs	r3, #0
 8009558:	6063      	str	r3, [r4, #4]
 800955a:	6923      	ldr	r3, [r4, #16]
 800955c:	6023      	str	r3, [r4, #0]
 800955e:	89a3      	ldrh	r3, [r4, #12]
 8009560:	f043 0308 	orr.w	r3, r3, #8
 8009564:	81a3      	strh	r3, [r4, #12]
 8009566:	6923      	ldr	r3, [r4, #16]
 8009568:	b94b      	cbnz	r3, 800957e <__swsetup_r+0x9a>
 800956a:	89a3      	ldrh	r3, [r4, #12]
 800956c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009570:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009574:	d003      	beq.n	800957e <__swsetup_r+0x9a>
 8009576:	4621      	mov	r1, r4
 8009578:	4630      	mov	r0, r6
 800957a:	f000 fa09 	bl	8009990 <__smakebuf_r>
 800957e:	89a0      	ldrh	r0, [r4, #12]
 8009580:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009584:	f010 0301 	ands.w	r3, r0, #1
 8009588:	d00a      	beq.n	80095a0 <__swsetup_r+0xbc>
 800958a:	2300      	movs	r3, #0
 800958c:	60a3      	str	r3, [r4, #8]
 800958e:	6963      	ldr	r3, [r4, #20]
 8009590:	425b      	negs	r3, r3
 8009592:	61a3      	str	r3, [r4, #24]
 8009594:	6923      	ldr	r3, [r4, #16]
 8009596:	b943      	cbnz	r3, 80095aa <__swsetup_r+0xc6>
 8009598:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800959c:	d1ba      	bne.n	8009514 <__swsetup_r+0x30>
 800959e:	bd70      	pop	{r4, r5, r6, pc}
 80095a0:	0781      	lsls	r1, r0, #30
 80095a2:	bf58      	it	pl
 80095a4:	6963      	ldrpl	r3, [r4, #20]
 80095a6:	60a3      	str	r3, [r4, #8]
 80095a8:	e7f4      	b.n	8009594 <__swsetup_r+0xb0>
 80095aa:	2000      	movs	r0, #0
 80095ac:	e7f7      	b.n	800959e <__swsetup_r+0xba>
 80095ae:	bf00      	nop
 80095b0:	2000000c 	.word	0x2000000c
 80095b4:	08009fec 	.word	0x08009fec
 80095b8:	0800a00c 	.word	0x0800a00c
 80095bc:	08009fcc 	.word	0x08009fcc

080095c0 <abort>:
 80095c0:	b508      	push	{r3, lr}
 80095c2:	2006      	movs	r0, #6
 80095c4:	f000 fa4c 	bl	8009a60 <raise>
 80095c8:	2001      	movs	r0, #1
 80095ca:	f7f8 fadf 	bl	8001b8c <_exit>
	...

080095d0 <__sflush_r>:
 80095d0:	898a      	ldrh	r2, [r1, #12]
 80095d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095d6:	4605      	mov	r5, r0
 80095d8:	0710      	lsls	r0, r2, #28
 80095da:	460c      	mov	r4, r1
 80095dc:	d458      	bmi.n	8009690 <__sflush_r+0xc0>
 80095de:	684b      	ldr	r3, [r1, #4]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	dc05      	bgt.n	80095f0 <__sflush_r+0x20>
 80095e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	dc02      	bgt.n	80095f0 <__sflush_r+0x20>
 80095ea:	2000      	movs	r0, #0
 80095ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095f2:	2e00      	cmp	r6, #0
 80095f4:	d0f9      	beq.n	80095ea <__sflush_r+0x1a>
 80095f6:	2300      	movs	r3, #0
 80095f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80095fc:	682f      	ldr	r7, [r5, #0]
 80095fe:	602b      	str	r3, [r5, #0]
 8009600:	d032      	beq.n	8009668 <__sflush_r+0x98>
 8009602:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009604:	89a3      	ldrh	r3, [r4, #12]
 8009606:	075a      	lsls	r2, r3, #29
 8009608:	d505      	bpl.n	8009616 <__sflush_r+0x46>
 800960a:	6863      	ldr	r3, [r4, #4]
 800960c:	1ac0      	subs	r0, r0, r3
 800960e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009610:	b10b      	cbz	r3, 8009616 <__sflush_r+0x46>
 8009612:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009614:	1ac0      	subs	r0, r0, r3
 8009616:	2300      	movs	r3, #0
 8009618:	4602      	mov	r2, r0
 800961a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800961c:	6a21      	ldr	r1, [r4, #32]
 800961e:	4628      	mov	r0, r5
 8009620:	47b0      	blx	r6
 8009622:	1c43      	adds	r3, r0, #1
 8009624:	89a3      	ldrh	r3, [r4, #12]
 8009626:	d106      	bne.n	8009636 <__sflush_r+0x66>
 8009628:	6829      	ldr	r1, [r5, #0]
 800962a:	291d      	cmp	r1, #29
 800962c:	d82c      	bhi.n	8009688 <__sflush_r+0xb8>
 800962e:	4a2a      	ldr	r2, [pc, #168]	; (80096d8 <__sflush_r+0x108>)
 8009630:	40ca      	lsrs	r2, r1
 8009632:	07d6      	lsls	r6, r2, #31
 8009634:	d528      	bpl.n	8009688 <__sflush_r+0xb8>
 8009636:	2200      	movs	r2, #0
 8009638:	6062      	str	r2, [r4, #4]
 800963a:	04d9      	lsls	r1, r3, #19
 800963c:	6922      	ldr	r2, [r4, #16]
 800963e:	6022      	str	r2, [r4, #0]
 8009640:	d504      	bpl.n	800964c <__sflush_r+0x7c>
 8009642:	1c42      	adds	r2, r0, #1
 8009644:	d101      	bne.n	800964a <__sflush_r+0x7a>
 8009646:	682b      	ldr	r3, [r5, #0]
 8009648:	b903      	cbnz	r3, 800964c <__sflush_r+0x7c>
 800964a:	6560      	str	r0, [r4, #84]	; 0x54
 800964c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800964e:	602f      	str	r7, [r5, #0]
 8009650:	2900      	cmp	r1, #0
 8009652:	d0ca      	beq.n	80095ea <__sflush_r+0x1a>
 8009654:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009658:	4299      	cmp	r1, r3
 800965a:	d002      	beq.n	8009662 <__sflush_r+0x92>
 800965c:	4628      	mov	r0, r5
 800965e:	f7ff fc49 	bl	8008ef4 <_free_r>
 8009662:	2000      	movs	r0, #0
 8009664:	6360      	str	r0, [r4, #52]	; 0x34
 8009666:	e7c1      	b.n	80095ec <__sflush_r+0x1c>
 8009668:	6a21      	ldr	r1, [r4, #32]
 800966a:	2301      	movs	r3, #1
 800966c:	4628      	mov	r0, r5
 800966e:	47b0      	blx	r6
 8009670:	1c41      	adds	r1, r0, #1
 8009672:	d1c7      	bne.n	8009604 <__sflush_r+0x34>
 8009674:	682b      	ldr	r3, [r5, #0]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d0c4      	beq.n	8009604 <__sflush_r+0x34>
 800967a:	2b1d      	cmp	r3, #29
 800967c:	d001      	beq.n	8009682 <__sflush_r+0xb2>
 800967e:	2b16      	cmp	r3, #22
 8009680:	d101      	bne.n	8009686 <__sflush_r+0xb6>
 8009682:	602f      	str	r7, [r5, #0]
 8009684:	e7b1      	b.n	80095ea <__sflush_r+0x1a>
 8009686:	89a3      	ldrh	r3, [r4, #12]
 8009688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800968c:	81a3      	strh	r3, [r4, #12]
 800968e:	e7ad      	b.n	80095ec <__sflush_r+0x1c>
 8009690:	690f      	ldr	r7, [r1, #16]
 8009692:	2f00      	cmp	r7, #0
 8009694:	d0a9      	beq.n	80095ea <__sflush_r+0x1a>
 8009696:	0793      	lsls	r3, r2, #30
 8009698:	680e      	ldr	r6, [r1, #0]
 800969a:	bf08      	it	eq
 800969c:	694b      	ldreq	r3, [r1, #20]
 800969e:	600f      	str	r7, [r1, #0]
 80096a0:	bf18      	it	ne
 80096a2:	2300      	movne	r3, #0
 80096a4:	eba6 0807 	sub.w	r8, r6, r7
 80096a8:	608b      	str	r3, [r1, #8]
 80096aa:	f1b8 0f00 	cmp.w	r8, #0
 80096ae:	dd9c      	ble.n	80095ea <__sflush_r+0x1a>
 80096b0:	6a21      	ldr	r1, [r4, #32]
 80096b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80096b4:	4643      	mov	r3, r8
 80096b6:	463a      	mov	r2, r7
 80096b8:	4628      	mov	r0, r5
 80096ba:	47b0      	blx	r6
 80096bc:	2800      	cmp	r0, #0
 80096be:	dc06      	bgt.n	80096ce <__sflush_r+0xfe>
 80096c0:	89a3      	ldrh	r3, [r4, #12]
 80096c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096c6:	81a3      	strh	r3, [r4, #12]
 80096c8:	f04f 30ff 	mov.w	r0, #4294967295
 80096cc:	e78e      	b.n	80095ec <__sflush_r+0x1c>
 80096ce:	4407      	add	r7, r0
 80096d0:	eba8 0800 	sub.w	r8, r8, r0
 80096d4:	e7e9      	b.n	80096aa <__sflush_r+0xda>
 80096d6:	bf00      	nop
 80096d8:	20400001 	.word	0x20400001

080096dc <_fflush_r>:
 80096dc:	b538      	push	{r3, r4, r5, lr}
 80096de:	690b      	ldr	r3, [r1, #16]
 80096e0:	4605      	mov	r5, r0
 80096e2:	460c      	mov	r4, r1
 80096e4:	b913      	cbnz	r3, 80096ec <_fflush_r+0x10>
 80096e6:	2500      	movs	r5, #0
 80096e8:	4628      	mov	r0, r5
 80096ea:	bd38      	pop	{r3, r4, r5, pc}
 80096ec:	b118      	cbz	r0, 80096f6 <_fflush_r+0x1a>
 80096ee:	6983      	ldr	r3, [r0, #24]
 80096f0:	b90b      	cbnz	r3, 80096f6 <_fflush_r+0x1a>
 80096f2:	f000 f887 	bl	8009804 <__sinit>
 80096f6:	4b14      	ldr	r3, [pc, #80]	; (8009748 <_fflush_r+0x6c>)
 80096f8:	429c      	cmp	r4, r3
 80096fa:	d11b      	bne.n	8009734 <_fflush_r+0x58>
 80096fc:	686c      	ldr	r4, [r5, #4]
 80096fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d0ef      	beq.n	80096e6 <_fflush_r+0xa>
 8009706:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009708:	07d0      	lsls	r0, r2, #31
 800970a:	d404      	bmi.n	8009716 <_fflush_r+0x3a>
 800970c:	0599      	lsls	r1, r3, #22
 800970e:	d402      	bmi.n	8009716 <_fflush_r+0x3a>
 8009710:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009712:	f000 f915 	bl	8009940 <__retarget_lock_acquire_recursive>
 8009716:	4628      	mov	r0, r5
 8009718:	4621      	mov	r1, r4
 800971a:	f7ff ff59 	bl	80095d0 <__sflush_r>
 800971e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009720:	07da      	lsls	r2, r3, #31
 8009722:	4605      	mov	r5, r0
 8009724:	d4e0      	bmi.n	80096e8 <_fflush_r+0xc>
 8009726:	89a3      	ldrh	r3, [r4, #12]
 8009728:	059b      	lsls	r3, r3, #22
 800972a:	d4dd      	bmi.n	80096e8 <_fflush_r+0xc>
 800972c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800972e:	f000 f908 	bl	8009942 <__retarget_lock_release_recursive>
 8009732:	e7d9      	b.n	80096e8 <_fflush_r+0xc>
 8009734:	4b05      	ldr	r3, [pc, #20]	; (800974c <_fflush_r+0x70>)
 8009736:	429c      	cmp	r4, r3
 8009738:	d101      	bne.n	800973e <_fflush_r+0x62>
 800973a:	68ac      	ldr	r4, [r5, #8]
 800973c:	e7df      	b.n	80096fe <_fflush_r+0x22>
 800973e:	4b04      	ldr	r3, [pc, #16]	; (8009750 <_fflush_r+0x74>)
 8009740:	429c      	cmp	r4, r3
 8009742:	bf08      	it	eq
 8009744:	68ec      	ldreq	r4, [r5, #12]
 8009746:	e7da      	b.n	80096fe <_fflush_r+0x22>
 8009748:	08009fec 	.word	0x08009fec
 800974c:	0800a00c 	.word	0x0800a00c
 8009750:	08009fcc 	.word	0x08009fcc

08009754 <std>:
 8009754:	2300      	movs	r3, #0
 8009756:	b510      	push	{r4, lr}
 8009758:	4604      	mov	r4, r0
 800975a:	e9c0 3300 	strd	r3, r3, [r0]
 800975e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009762:	6083      	str	r3, [r0, #8]
 8009764:	8181      	strh	r1, [r0, #12]
 8009766:	6643      	str	r3, [r0, #100]	; 0x64
 8009768:	81c2      	strh	r2, [r0, #14]
 800976a:	6183      	str	r3, [r0, #24]
 800976c:	4619      	mov	r1, r3
 800976e:	2208      	movs	r2, #8
 8009770:	305c      	adds	r0, #92	; 0x5c
 8009772:	f7fd fd1d 	bl	80071b0 <memset>
 8009776:	4b05      	ldr	r3, [pc, #20]	; (800978c <std+0x38>)
 8009778:	6263      	str	r3, [r4, #36]	; 0x24
 800977a:	4b05      	ldr	r3, [pc, #20]	; (8009790 <std+0x3c>)
 800977c:	62a3      	str	r3, [r4, #40]	; 0x28
 800977e:	4b05      	ldr	r3, [pc, #20]	; (8009794 <std+0x40>)
 8009780:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009782:	4b05      	ldr	r3, [pc, #20]	; (8009798 <std+0x44>)
 8009784:	6224      	str	r4, [r4, #32]
 8009786:	6323      	str	r3, [r4, #48]	; 0x30
 8009788:	bd10      	pop	{r4, pc}
 800978a:	bf00      	nop
 800978c:	08009a99 	.word	0x08009a99
 8009790:	08009abb 	.word	0x08009abb
 8009794:	08009af3 	.word	0x08009af3
 8009798:	08009b17 	.word	0x08009b17

0800979c <_cleanup_r>:
 800979c:	4901      	ldr	r1, [pc, #4]	; (80097a4 <_cleanup_r+0x8>)
 800979e:	f000 b8af 	b.w	8009900 <_fwalk_reent>
 80097a2:	bf00      	nop
 80097a4:	080096dd 	.word	0x080096dd

080097a8 <__sfmoreglue>:
 80097a8:	b570      	push	{r4, r5, r6, lr}
 80097aa:	2268      	movs	r2, #104	; 0x68
 80097ac:	1e4d      	subs	r5, r1, #1
 80097ae:	4355      	muls	r5, r2
 80097b0:	460e      	mov	r6, r1
 80097b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80097b6:	f7ff fc09 	bl	8008fcc <_malloc_r>
 80097ba:	4604      	mov	r4, r0
 80097bc:	b140      	cbz	r0, 80097d0 <__sfmoreglue+0x28>
 80097be:	2100      	movs	r1, #0
 80097c0:	e9c0 1600 	strd	r1, r6, [r0]
 80097c4:	300c      	adds	r0, #12
 80097c6:	60a0      	str	r0, [r4, #8]
 80097c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80097cc:	f7fd fcf0 	bl	80071b0 <memset>
 80097d0:	4620      	mov	r0, r4
 80097d2:	bd70      	pop	{r4, r5, r6, pc}

080097d4 <__sfp_lock_acquire>:
 80097d4:	4801      	ldr	r0, [pc, #4]	; (80097dc <__sfp_lock_acquire+0x8>)
 80097d6:	f000 b8b3 	b.w	8009940 <__retarget_lock_acquire_recursive>
 80097da:	bf00      	nop
 80097dc:	20000459 	.word	0x20000459

080097e0 <__sfp_lock_release>:
 80097e0:	4801      	ldr	r0, [pc, #4]	; (80097e8 <__sfp_lock_release+0x8>)
 80097e2:	f000 b8ae 	b.w	8009942 <__retarget_lock_release_recursive>
 80097e6:	bf00      	nop
 80097e8:	20000459 	.word	0x20000459

080097ec <__sinit_lock_acquire>:
 80097ec:	4801      	ldr	r0, [pc, #4]	; (80097f4 <__sinit_lock_acquire+0x8>)
 80097ee:	f000 b8a7 	b.w	8009940 <__retarget_lock_acquire_recursive>
 80097f2:	bf00      	nop
 80097f4:	2000045a 	.word	0x2000045a

080097f8 <__sinit_lock_release>:
 80097f8:	4801      	ldr	r0, [pc, #4]	; (8009800 <__sinit_lock_release+0x8>)
 80097fa:	f000 b8a2 	b.w	8009942 <__retarget_lock_release_recursive>
 80097fe:	bf00      	nop
 8009800:	2000045a 	.word	0x2000045a

08009804 <__sinit>:
 8009804:	b510      	push	{r4, lr}
 8009806:	4604      	mov	r4, r0
 8009808:	f7ff fff0 	bl	80097ec <__sinit_lock_acquire>
 800980c:	69a3      	ldr	r3, [r4, #24]
 800980e:	b11b      	cbz	r3, 8009818 <__sinit+0x14>
 8009810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009814:	f7ff bff0 	b.w	80097f8 <__sinit_lock_release>
 8009818:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800981c:	6523      	str	r3, [r4, #80]	; 0x50
 800981e:	4b13      	ldr	r3, [pc, #76]	; (800986c <__sinit+0x68>)
 8009820:	4a13      	ldr	r2, [pc, #76]	; (8009870 <__sinit+0x6c>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	62a2      	str	r2, [r4, #40]	; 0x28
 8009826:	42a3      	cmp	r3, r4
 8009828:	bf04      	itt	eq
 800982a:	2301      	moveq	r3, #1
 800982c:	61a3      	streq	r3, [r4, #24]
 800982e:	4620      	mov	r0, r4
 8009830:	f000 f820 	bl	8009874 <__sfp>
 8009834:	6060      	str	r0, [r4, #4]
 8009836:	4620      	mov	r0, r4
 8009838:	f000 f81c 	bl	8009874 <__sfp>
 800983c:	60a0      	str	r0, [r4, #8]
 800983e:	4620      	mov	r0, r4
 8009840:	f000 f818 	bl	8009874 <__sfp>
 8009844:	2200      	movs	r2, #0
 8009846:	60e0      	str	r0, [r4, #12]
 8009848:	2104      	movs	r1, #4
 800984a:	6860      	ldr	r0, [r4, #4]
 800984c:	f7ff ff82 	bl	8009754 <std>
 8009850:	68a0      	ldr	r0, [r4, #8]
 8009852:	2201      	movs	r2, #1
 8009854:	2109      	movs	r1, #9
 8009856:	f7ff ff7d 	bl	8009754 <std>
 800985a:	68e0      	ldr	r0, [r4, #12]
 800985c:	2202      	movs	r2, #2
 800985e:	2112      	movs	r1, #18
 8009860:	f7ff ff78 	bl	8009754 <std>
 8009864:	2301      	movs	r3, #1
 8009866:	61a3      	str	r3, [r4, #24]
 8009868:	e7d2      	b.n	8009810 <__sinit+0xc>
 800986a:	bf00      	nop
 800986c:	08009c50 	.word	0x08009c50
 8009870:	0800979d 	.word	0x0800979d

08009874 <__sfp>:
 8009874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009876:	4607      	mov	r7, r0
 8009878:	f7ff ffac 	bl	80097d4 <__sfp_lock_acquire>
 800987c:	4b1e      	ldr	r3, [pc, #120]	; (80098f8 <__sfp+0x84>)
 800987e:	681e      	ldr	r6, [r3, #0]
 8009880:	69b3      	ldr	r3, [r6, #24]
 8009882:	b913      	cbnz	r3, 800988a <__sfp+0x16>
 8009884:	4630      	mov	r0, r6
 8009886:	f7ff ffbd 	bl	8009804 <__sinit>
 800988a:	3648      	adds	r6, #72	; 0x48
 800988c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009890:	3b01      	subs	r3, #1
 8009892:	d503      	bpl.n	800989c <__sfp+0x28>
 8009894:	6833      	ldr	r3, [r6, #0]
 8009896:	b30b      	cbz	r3, 80098dc <__sfp+0x68>
 8009898:	6836      	ldr	r6, [r6, #0]
 800989a:	e7f7      	b.n	800988c <__sfp+0x18>
 800989c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80098a0:	b9d5      	cbnz	r5, 80098d8 <__sfp+0x64>
 80098a2:	4b16      	ldr	r3, [pc, #88]	; (80098fc <__sfp+0x88>)
 80098a4:	60e3      	str	r3, [r4, #12]
 80098a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80098aa:	6665      	str	r5, [r4, #100]	; 0x64
 80098ac:	f000 f847 	bl	800993e <__retarget_lock_init_recursive>
 80098b0:	f7ff ff96 	bl	80097e0 <__sfp_lock_release>
 80098b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80098b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80098bc:	6025      	str	r5, [r4, #0]
 80098be:	61a5      	str	r5, [r4, #24]
 80098c0:	2208      	movs	r2, #8
 80098c2:	4629      	mov	r1, r5
 80098c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80098c8:	f7fd fc72 	bl	80071b0 <memset>
 80098cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80098d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80098d4:	4620      	mov	r0, r4
 80098d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098d8:	3468      	adds	r4, #104	; 0x68
 80098da:	e7d9      	b.n	8009890 <__sfp+0x1c>
 80098dc:	2104      	movs	r1, #4
 80098de:	4638      	mov	r0, r7
 80098e0:	f7ff ff62 	bl	80097a8 <__sfmoreglue>
 80098e4:	4604      	mov	r4, r0
 80098e6:	6030      	str	r0, [r6, #0]
 80098e8:	2800      	cmp	r0, #0
 80098ea:	d1d5      	bne.n	8009898 <__sfp+0x24>
 80098ec:	f7ff ff78 	bl	80097e0 <__sfp_lock_release>
 80098f0:	230c      	movs	r3, #12
 80098f2:	603b      	str	r3, [r7, #0]
 80098f4:	e7ee      	b.n	80098d4 <__sfp+0x60>
 80098f6:	bf00      	nop
 80098f8:	08009c50 	.word	0x08009c50
 80098fc:	ffff0001 	.word	0xffff0001

08009900 <_fwalk_reent>:
 8009900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009904:	4606      	mov	r6, r0
 8009906:	4688      	mov	r8, r1
 8009908:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800990c:	2700      	movs	r7, #0
 800990e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009912:	f1b9 0901 	subs.w	r9, r9, #1
 8009916:	d505      	bpl.n	8009924 <_fwalk_reent+0x24>
 8009918:	6824      	ldr	r4, [r4, #0]
 800991a:	2c00      	cmp	r4, #0
 800991c:	d1f7      	bne.n	800990e <_fwalk_reent+0xe>
 800991e:	4638      	mov	r0, r7
 8009920:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009924:	89ab      	ldrh	r3, [r5, #12]
 8009926:	2b01      	cmp	r3, #1
 8009928:	d907      	bls.n	800993a <_fwalk_reent+0x3a>
 800992a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800992e:	3301      	adds	r3, #1
 8009930:	d003      	beq.n	800993a <_fwalk_reent+0x3a>
 8009932:	4629      	mov	r1, r5
 8009934:	4630      	mov	r0, r6
 8009936:	47c0      	blx	r8
 8009938:	4307      	orrs	r7, r0
 800993a:	3568      	adds	r5, #104	; 0x68
 800993c:	e7e9      	b.n	8009912 <_fwalk_reent+0x12>

0800993e <__retarget_lock_init_recursive>:
 800993e:	4770      	bx	lr

08009940 <__retarget_lock_acquire_recursive>:
 8009940:	4770      	bx	lr

08009942 <__retarget_lock_release_recursive>:
 8009942:	4770      	bx	lr

08009944 <__swhatbuf_r>:
 8009944:	b570      	push	{r4, r5, r6, lr}
 8009946:	460e      	mov	r6, r1
 8009948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800994c:	2900      	cmp	r1, #0
 800994e:	b096      	sub	sp, #88	; 0x58
 8009950:	4614      	mov	r4, r2
 8009952:	461d      	mov	r5, r3
 8009954:	da08      	bge.n	8009968 <__swhatbuf_r+0x24>
 8009956:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800995a:	2200      	movs	r2, #0
 800995c:	602a      	str	r2, [r5, #0]
 800995e:	061a      	lsls	r2, r3, #24
 8009960:	d410      	bmi.n	8009984 <__swhatbuf_r+0x40>
 8009962:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009966:	e00e      	b.n	8009986 <__swhatbuf_r+0x42>
 8009968:	466a      	mov	r2, sp
 800996a:	f000 f8fb 	bl	8009b64 <_fstat_r>
 800996e:	2800      	cmp	r0, #0
 8009970:	dbf1      	blt.n	8009956 <__swhatbuf_r+0x12>
 8009972:	9a01      	ldr	r2, [sp, #4]
 8009974:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009978:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800997c:	425a      	negs	r2, r3
 800997e:	415a      	adcs	r2, r3
 8009980:	602a      	str	r2, [r5, #0]
 8009982:	e7ee      	b.n	8009962 <__swhatbuf_r+0x1e>
 8009984:	2340      	movs	r3, #64	; 0x40
 8009986:	2000      	movs	r0, #0
 8009988:	6023      	str	r3, [r4, #0]
 800998a:	b016      	add	sp, #88	; 0x58
 800998c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009990 <__smakebuf_r>:
 8009990:	898b      	ldrh	r3, [r1, #12]
 8009992:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009994:	079d      	lsls	r5, r3, #30
 8009996:	4606      	mov	r6, r0
 8009998:	460c      	mov	r4, r1
 800999a:	d507      	bpl.n	80099ac <__smakebuf_r+0x1c>
 800999c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80099a0:	6023      	str	r3, [r4, #0]
 80099a2:	6123      	str	r3, [r4, #16]
 80099a4:	2301      	movs	r3, #1
 80099a6:	6163      	str	r3, [r4, #20]
 80099a8:	b002      	add	sp, #8
 80099aa:	bd70      	pop	{r4, r5, r6, pc}
 80099ac:	ab01      	add	r3, sp, #4
 80099ae:	466a      	mov	r2, sp
 80099b0:	f7ff ffc8 	bl	8009944 <__swhatbuf_r>
 80099b4:	9900      	ldr	r1, [sp, #0]
 80099b6:	4605      	mov	r5, r0
 80099b8:	4630      	mov	r0, r6
 80099ba:	f7ff fb07 	bl	8008fcc <_malloc_r>
 80099be:	b948      	cbnz	r0, 80099d4 <__smakebuf_r+0x44>
 80099c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099c4:	059a      	lsls	r2, r3, #22
 80099c6:	d4ef      	bmi.n	80099a8 <__smakebuf_r+0x18>
 80099c8:	f023 0303 	bic.w	r3, r3, #3
 80099cc:	f043 0302 	orr.w	r3, r3, #2
 80099d0:	81a3      	strh	r3, [r4, #12]
 80099d2:	e7e3      	b.n	800999c <__smakebuf_r+0xc>
 80099d4:	4b0d      	ldr	r3, [pc, #52]	; (8009a0c <__smakebuf_r+0x7c>)
 80099d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80099d8:	89a3      	ldrh	r3, [r4, #12]
 80099da:	6020      	str	r0, [r4, #0]
 80099dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099e0:	81a3      	strh	r3, [r4, #12]
 80099e2:	9b00      	ldr	r3, [sp, #0]
 80099e4:	6163      	str	r3, [r4, #20]
 80099e6:	9b01      	ldr	r3, [sp, #4]
 80099e8:	6120      	str	r0, [r4, #16]
 80099ea:	b15b      	cbz	r3, 8009a04 <__smakebuf_r+0x74>
 80099ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099f0:	4630      	mov	r0, r6
 80099f2:	f000 f8c9 	bl	8009b88 <_isatty_r>
 80099f6:	b128      	cbz	r0, 8009a04 <__smakebuf_r+0x74>
 80099f8:	89a3      	ldrh	r3, [r4, #12]
 80099fa:	f023 0303 	bic.w	r3, r3, #3
 80099fe:	f043 0301 	orr.w	r3, r3, #1
 8009a02:	81a3      	strh	r3, [r4, #12]
 8009a04:	89a0      	ldrh	r0, [r4, #12]
 8009a06:	4305      	orrs	r5, r0
 8009a08:	81a5      	strh	r5, [r4, #12]
 8009a0a:	e7cd      	b.n	80099a8 <__smakebuf_r+0x18>
 8009a0c:	0800979d 	.word	0x0800979d

08009a10 <_raise_r>:
 8009a10:	291f      	cmp	r1, #31
 8009a12:	b538      	push	{r3, r4, r5, lr}
 8009a14:	4604      	mov	r4, r0
 8009a16:	460d      	mov	r5, r1
 8009a18:	d904      	bls.n	8009a24 <_raise_r+0x14>
 8009a1a:	2316      	movs	r3, #22
 8009a1c:	6003      	str	r3, [r0, #0]
 8009a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8009a22:	bd38      	pop	{r3, r4, r5, pc}
 8009a24:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009a26:	b112      	cbz	r2, 8009a2e <_raise_r+0x1e>
 8009a28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009a2c:	b94b      	cbnz	r3, 8009a42 <_raise_r+0x32>
 8009a2e:	4620      	mov	r0, r4
 8009a30:	f000 f830 	bl	8009a94 <_getpid_r>
 8009a34:	462a      	mov	r2, r5
 8009a36:	4601      	mov	r1, r0
 8009a38:	4620      	mov	r0, r4
 8009a3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a3e:	f000 b817 	b.w	8009a70 <_kill_r>
 8009a42:	2b01      	cmp	r3, #1
 8009a44:	d00a      	beq.n	8009a5c <_raise_r+0x4c>
 8009a46:	1c59      	adds	r1, r3, #1
 8009a48:	d103      	bne.n	8009a52 <_raise_r+0x42>
 8009a4a:	2316      	movs	r3, #22
 8009a4c:	6003      	str	r3, [r0, #0]
 8009a4e:	2001      	movs	r0, #1
 8009a50:	e7e7      	b.n	8009a22 <_raise_r+0x12>
 8009a52:	2400      	movs	r4, #0
 8009a54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009a58:	4628      	mov	r0, r5
 8009a5a:	4798      	blx	r3
 8009a5c:	2000      	movs	r0, #0
 8009a5e:	e7e0      	b.n	8009a22 <_raise_r+0x12>

08009a60 <raise>:
 8009a60:	4b02      	ldr	r3, [pc, #8]	; (8009a6c <raise+0xc>)
 8009a62:	4601      	mov	r1, r0
 8009a64:	6818      	ldr	r0, [r3, #0]
 8009a66:	f7ff bfd3 	b.w	8009a10 <_raise_r>
 8009a6a:	bf00      	nop
 8009a6c:	2000000c 	.word	0x2000000c

08009a70 <_kill_r>:
 8009a70:	b538      	push	{r3, r4, r5, lr}
 8009a72:	4d07      	ldr	r5, [pc, #28]	; (8009a90 <_kill_r+0x20>)
 8009a74:	2300      	movs	r3, #0
 8009a76:	4604      	mov	r4, r0
 8009a78:	4608      	mov	r0, r1
 8009a7a:	4611      	mov	r1, r2
 8009a7c:	602b      	str	r3, [r5, #0]
 8009a7e:	f7f8 f875 	bl	8001b6c <_kill>
 8009a82:	1c43      	adds	r3, r0, #1
 8009a84:	d102      	bne.n	8009a8c <_kill_r+0x1c>
 8009a86:	682b      	ldr	r3, [r5, #0]
 8009a88:	b103      	cbz	r3, 8009a8c <_kill_r+0x1c>
 8009a8a:	6023      	str	r3, [r4, #0]
 8009a8c:	bd38      	pop	{r3, r4, r5, pc}
 8009a8e:	bf00      	nop
 8009a90:	20000454 	.word	0x20000454

08009a94 <_getpid_r>:
 8009a94:	f7f8 b862 	b.w	8001b5c <_getpid>

08009a98 <__sread>:
 8009a98:	b510      	push	{r4, lr}
 8009a9a:	460c      	mov	r4, r1
 8009a9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009aa0:	f000 f894 	bl	8009bcc <_read_r>
 8009aa4:	2800      	cmp	r0, #0
 8009aa6:	bfab      	itete	ge
 8009aa8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009aaa:	89a3      	ldrhlt	r3, [r4, #12]
 8009aac:	181b      	addge	r3, r3, r0
 8009aae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009ab2:	bfac      	ite	ge
 8009ab4:	6563      	strge	r3, [r4, #84]	; 0x54
 8009ab6:	81a3      	strhlt	r3, [r4, #12]
 8009ab8:	bd10      	pop	{r4, pc}

08009aba <__swrite>:
 8009aba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009abe:	461f      	mov	r7, r3
 8009ac0:	898b      	ldrh	r3, [r1, #12]
 8009ac2:	05db      	lsls	r3, r3, #23
 8009ac4:	4605      	mov	r5, r0
 8009ac6:	460c      	mov	r4, r1
 8009ac8:	4616      	mov	r6, r2
 8009aca:	d505      	bpl.n	8009ad8 <__swrite+0x1e>
 8009acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ad0:	2302      	movs	r3, #2
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	f000 f868 	bl	8009ba8 <_lseek_r>
 8009ad8:	89a3      	ldrh	r3, [r4, #12]
 8009ada:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ade:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ae2:	81a3      	strh	r3, [r4, #12]
 8009ae4:	4632      	mov	r2, r6
 8009ae6:	463b      	mov	r3, r7
 8009ae8:	4628      	mov	r0, r5
 8009aea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009aee:	f000 b817 	b.w	8009b20 <_write_r>

08009af2 <__sseek>:
 8009af2:	b510      	push	{r4, lr}
 8009af4:	460c      	mov	r4, r1
 8009af6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009afa:	f000 f855 	bl	8009ba8 <_lseek_r>
 8009afe:	1c43      	adds	r3, r0, #1
 8009b00:	89a3      	ldrh	r3, [r4, #12]
 8009b02:	bf15      	itete	ne
 8009b04:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b0e:	81a3      	strheq	r3, [r4, #12]
 8009b10:	bf18      	it	ne
 8009b12:	81a3      	strhne	r3, [r4, #12]
 8009b14:	bd10      	pop	{r4, pc}

08009b16 <__sclose>:
 8009b16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b1a:	f000 b813 	b.w	8009b44 <_close_r>
	...

08009b20 <_write_r>:
 8009b20:	b538      	push	{r3, r4, r5, lr}
 8009b22:	4d07      	ldr	r5, [pc, #28]	; (8009b40 <_write_r+0x20>)
 8009b24:	4604      	mov	r4, r0
 8009b26:	4608      	mov	r0, r1
 8009b28:	4611      	mov	r1, r2
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	602a      	str	r2, [r5, #0]
 8009b2e:	461a      	mov	r2, r3
 8009b30:	f7f8 f853 	bl	8001bda <_write>
 8009b34:	1c43      	adds	r3, r0, #1
 8009b36:	d102      	bne.n	8009b3e <_write_r+0x1e>
 8009b38:	682b      	ldr	r3, [r5, #0]
 8009b3a:	b103      	cbz	r3, 8009b3e <_write_r+0x1e>
 8009b3c:	6023      	str	r3, [r4, #0]
 8009b3e:	bd38      	pop	{r3, r4, r5, pc}
 8009b40:	20000454 	.word	0x20000454

08009b44 <_close_r>:
 8009b44:	b538      	push	{r3, r4, r5, lr}
 8009b46:	4d06      	ldr	r5, [pc, #24]	; (8009b60 <_close_r+0x1c>)
 8009b48:	2300      	movs	r3, #0
 8009b4a:	4604      	mov	r4, r0
 8009b4c:	4608      	mov	r0, r1
 8009b4e:	602b      	str	r3, [r5, #0]
 8009b50:	f7f8 f85f 	bl	8001c12 <_close>
 8009b54:	1c43      	adds	r3, r0, #1
 8009b56:	d102      	bne.n	8009b5e <_close_r+0x1a>
 8009b58:	682b      	ldr	r3, [r5, #0]
 8009b5a:	b103      	cbz	r3, 8009b5e <_close_r+0x1a>
 8009b5c:	6023      	str	r3, [r4, #0]
 8009b5e:	bd38      	pop	{r3, r4, r5, pc}
 8009b60:	20000454 	.word	0x20000454

08009b64 <_fstat_r>:
 8009b64:	b538      	push	{r3, r4, r5, lr}
 8009b66:	4d07      	ldr	r5, [pc, #28]	; (8009b84 <_fstat_r+0x20>)
 8009b68:	2300      	movs	r3, #0
 8009b6a:	4604      	mov	r4, r0
 8009b6c:	4608      	mov	r0, r1
 8009b6e:	4611      	mov	r1, r2
 8009b70:	602b      	str	r3, [r5, #0]
 8009b72:	f7f8 f85a 	bl	8001c2a <_fstat>
 8009b76:	1c43      	adds	r3, r0, #1
 8009b78:	d102      	bne.n	8009b80 <_fstat_r+0x1c>
 8009b7a:	682b      	ldr	r3, [r5, #0]
 8009b7c:	b103      	cbz	r3, 8009b80 <_fstat_r+0x1c>
 8009b7e:	6023      	str	r3, [r4, #0]
 8009b80:	bd38      	pop	{r3, r4, r5, pc}
 8009b82:	bf00      	nop
 8009b84:	20000454 	.word	0x20000454

08009b88 <_isatty_r>:
 8009b88:	b538      	push	{r3, r4, r5, lr}
 8009b8a:	4d06      	ldr	r5, [pc, #24]	; (8009ba4 <_isatty_r+0x1c>)
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	4604      	mov	r4, r0
 8009b90:	4608      	mov	r0, r1
 8009b92:	602b      	str	r3, [r5, #0]
 8009b94:	f7f8 f859 	bl	8001c4a <_isatty>
 8009b98:	1c43      	adds	r3, r0, #1
 8009b9a:	d102      	bne.n	8009ba2 <_isatty_r+0x1a>
 8009b9c:	682b      	ldr	r3, [r5, #0]
 8009b9e:	b103      	cbz	r3, 8009ba2 <_isatty_r+0x1a>
 8009ba0:	6023      	str	r3, [r4, #0]
 8009ba2:	bd38      	pop	{r3, r4, r5, pc}
 8009ba4:	20000454 	.word	0x20000454

08009ba8 <_lseek_r>:
 8009ba8:	b538      	push	{r3, r4, r5, lr}
 8009baa:	4d07      	ldr	r5, [pc, #28]	; (8009bc8 <_lseek_r+0x20>)
 8009bac:	4604      	mov	r4, r0
 8009bae:	4608      	mov	r0, r1
 8009bb0:	4611      	mov	r1, r2
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	602a      	str	r2, [r5, #0]
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	f7f8 f852 	bl	8001c60 <_lseek>
 8009bbc:	1c43      	adds	r3, r0, #1
 8009bbe:	d102      	bne.n	8009bc6 <_lseek_r+0x1e>
 8009bc0:	682b      	ldr	r3, [r5, #0]
 8009bc2:	b103      	cbz	r3, 8009bc6 <_lseek_r+0x1e>
 8009bc4:	6023      	str	r3, [r4, #0]
 8009bc6:	bd38      	pop	{r3, r4, r5, pc}
 8009bc8:	20000454 	.word	0x20000454

08009bcc <_read_r>:
 8009bcc:	b538      	push	{r3, r4, r5, lr}
 8009bce:	4d07      	ldr	r5, [pc, #28]	; (8009bec <_read_r+0x20>)
 8009bd0:	4604      	mov	r4, r0
 8009bd2:	4608      	mov	r0, r1
 8009bd4:	4611      	mov	r1, r2
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	602a      	str	r2, [r5, #0]
 8009bda:	461a      	mov	r2, r3
 8009bdc:	f7f7 ffe0 	bl	8001ba0 <_read>
 8009be0:	1c43      	adds	r3, r0, #1
 8009be2:	d102      	bne.n	8009bea <_read_r+0x1e>
 8009be4:	682b      	ldr	r3, [r5, #0]
 8009be6:	b103      	cbz	r3, 8009bea <_read_r+0x1e>
 8009be8:	6023      	str	r3, [r4, #0]
 8009bea:	bd38      	pop	{r3, r4, r5, pc}
 8009bec:	20000454 	.word	0x20000454

08009bf0 <_init>:
 8009bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bf2:	bf00      	nop
 8009bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bf6:	bc08      	pop	{r3}
 8009bf8:	469e      	mov	lr, r3
 8009bfa:	4770      	bx	lr

08009bfc <_fini>:
 8009bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bfe:	bf00      	nop
 8009c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c02:	bc08      	pop	{r3}
 8009c04:	469e      	mov	lr, r3
 8009c06:	4770      	bx	lr
