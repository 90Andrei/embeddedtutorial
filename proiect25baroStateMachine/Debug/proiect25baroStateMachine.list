
proiect25baroStateMachine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac60  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  0800adf0  0800adf0  0001adf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2bc  0800b2bc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b2bc  0800b2bc  0001b2bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b2c4  0800b2c4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2c4  0800b2c4  0001b2c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b2c8  0800b2c8  0001b2c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800b2cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  200001dc  0800b4a8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  0800b4a8  000204bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019a50  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003542  00000000  00000000  00039c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001630  00000000  00000000  0003d1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014a8  00000000  00000000  0003e7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004851  00000000  00000000  0003fc78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c54d  00000000  00000000  000444c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9771  00000000  00000000  00060a16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015a187  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e18  00000000  00000000  0015a1d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800add8 	.word	0x0800add8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800add8 	.word	0x0800add8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <BMP_DevId>:
uint8_t pres_wait = 0;

BMP_STATE BMP_State = BMP_State_Temp_StartMeasurement;

bool BMP_DevId(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	if (HAL_I2C_IsDeviceReady(&hi2c1, BMP_ADDR_WRITE, 5, HAL_MAX_DELAY)
 8000eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb4:	2205      	movs	r2, #5
 8000eb6:	21ee      	movs	r1, #238	; 0xee
 8000eb8:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <BMP_DevId+0x24>)
 8000eba:	f002 fbd3 	bl	8003664 <HAL_I2C_IsDeviceReady>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d101      	bne.n	8000ec8 <BMP_DevId+0x1c>
			== HAL_OK)
	{
		return true;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e000      	b.n	8000eca <BMP_DevId+0x1e>
	}
	return false;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	2000023c 	.word	0x2000023c

08000ed4 <BMP_ReadCalibration>:

bool BMP_ReadCalibration(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	; 0x28
 8000ed8:	af04      	add	r7, sp, #16

	uint8_t calibValues[22];
	if (HAL_I2C_Mem_Read(&hi2c1, BMP_ADDR_READ, AC1MSB, I2C_MEMADD_SIZE_8BIT,
 8000eda:	f04f 33ff 	mov.w	r3, #4294967295
 8000ede:	9302      	str	r3, [sp, #8]
 8000ee0:	2316      	movs	r3, #22
 8000ee2:	9301      	str	r3, [sp, #4]
 8000ee4:	463b      	mov	r3, r7
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	2301      	movs	r3, #1
 8000eea:	22aa      	movs	r2, #170	; 0xaa
 8000eec:	21ef      	movs	r1, #239	; 0xef
 8000eee:	4839      	ldr	r0, [pc, #228]	; (8000fd4 <BMP_ReadCalibration+0x100>)
 8000ef0:	f002 f8ac 	bl	800304c <HAL_I2C_Mem_Read>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <BMP_ReadCalibration+0x2a>
			calibValues, 22, HAL_MAX_DELAY) != HAL_OK)
	{
		return false;
 8000efa:	2300      	movs	r3, #0
 8000efc:	e066      	b.n	8000fcc <BMP_ReadCalibration+0xf8>
	}

	b1.AC1 = ((int16_t) calibValues[0] << 8) | calibValues[1];
 8000efe:	783b      	ldrb	r3, [r7, #0]
 8000f00:	021b      	lsls	r3, r3, #8
 8000f02:	b21a      	sxth	r2, r3
 8000f04:	787b      	ldrb	r3, [r7, #1]
 8000f06:	b21b      	sxth	r3, r3
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	b21a      	sxth	r2, r3
 8000f0c:	4b32      	ldr	r3, [pc, #200]	; (8000fd8 <BMP_ReadCalibration+0x104>)
 8000f0e:	801a      	strh	r2, [r3, #0]
	b1.AC2 = ((int16_t) calibValues[2] << 8) | calibValues[3];
 8000f10:	78bb      	ldrb	r3, [r7, #2]
 8000f12:	021b      	lsls	r3, r3, #8
 8000f14:	b21a      	sxth	r2, r3
 8000f16:	78fb      	ldrb	r3, [r7, #3]
 8000f18:	b21b      	sxth	r3, r3
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	b21a      	sxth	r2, r3
 8000f1e:	4b2e      	ldr	r3, [pc, #184]	; (8000fd8 <BMP_ReadCalibration+0x104>)
 8000f20:	805a      	strh	r2, [r3, #2]
	b1.AC3 = ((int16_t) calibValues[4] << 8) | calibValues[5];
 8000f22:	793b      	ldrb	r3, [r7, #4]
 8000f24:	021b      	lsls	r3, r3, #8
 8000f26:	b21a      	sxth	r2, r3
 8000f28:	797b      	ldrb	r3, [r7, #5]
 8000f2a:	b21b      	sxth	r3, r3
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	b21a      	sxth	r2, r3
 8000f30:	4b29      	ldr	r3, [pc, #164]	; (8000fd8 <BMP_ReadCalibration+0x104>)
 8000f32:	809a      	strh	r2, [r3, #4]
	b1.AC4 = ((uint16_t) calibValues[6] << 8) | calibValues[7];
 8000f34:	79bb      	ldrb	r3, [r7, #6]
 8000f36:	021b      	lsls	r3, r3, #8
 8000f38:	b21a      	sxth	r2, r3
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	b21b      	sxth	r3, r3
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	b21b      	sxth	r3, r3
 8000f42:	b29a      	uxth	r2, r3
 8000f44:	4b24      	ldr	r3, [pc, #144]	; (8000fd8 <BMP_ReadCalibration+0x104>)
 8000f46:	80da      	strh	r2, [r3, #6]
	b1.AC5 = ((uint16_t) calibValues[8] << 8) | calibValues[9];
 8000f48:	7a3b      	ldrb	r3, [r7, #8]
 8000f4a:	021b      	lsls	r3, r3, #8
 8000f4c:	b21a      	sxth	r2, r3
 8000f4e:	7a7b      	ldrb	r3, [r7, #9]
 8000f50:	b21b      	sxth	r3, r3
 8000f52:	4313      	orrs	r3, r2
 8000f54:	b21b      	sxth	r3, r3
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <BMP_ReadCalibration+0x104>)
 8000f5a:	811a      	strh	r2, [r3, #8]
	b1.AC6 = ((uint16_t) calibValues[10] << 8) | calibValues[11];
 8000f5c:	7abb      	ldrb	r3, [r7, #10]
 8000f5e:	021b      	lsls	r3, r3, #8
 8000f60:	b21a      	sxth	r2, r3
 8000f62:	7afb      	ldrb	r3, [r7, #11]
 8000f64:	b21b      	sxth	r3, r3
 8000f66:	4313      	orrs	r3, r2
 8000f68:	b21b      	sxth	r3, r3
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <BMP_ReadCalibration+0x104>)
 8000f6e:	815a      	strh	r2, [r3, #10]
	b1.B1 = ((int16_t) calibValues[12] << 8) | calibValues[13];
 8000f70:	7b3b      	ldrb	r3, [r7, #12]
 8000f72:	021b      	lsls	r3, r3, #8
 8000f74:	b21a      	sxth	r2, r3
 8000f76:	7b7b      	ldrb	r3, [r7, #13]
 8000f78:	b21b      	sxth	r3, r3
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	b21a      	sxth	r2, r3
 8000f7e:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <BMP_ReadCalibration+0x104>)
 8000f80:	819a      	strh	r2, [r3, #12]
	b1.B2 = ((int16_t) calibValues[14] << 8) | calibValues[15];
 8000f82:	7bbb      	ldrb	r3, [r7, #14]
 8000f84:	021b      	lsls	r3, r3, #8
 8000f86:	b21a      	sxth	r2, r3
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
 8000f8a:	b21b      	sxth	r3, r3
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	b21a      	sxth	r2, r3
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <BMP_ReadCalibration+0x104>)
 8000f92:	81da      	strh	r2, [r3, #14]
	b1.MB = ((int16_t) calibValues[16] << 8) | calibValues[17];
 8000f94:	7c3b      	ldrb	r3, [r7, #16]
 8000f96:	021b      	lsls	r3, r3, #8
 8000f98:	b21a      	sxth	r2, r3
 8000f9a:	7c7b      	ldrb	r3, [r7, #17]
 8000f9c:	b21b      	sxth	r3, r3
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	b21a      	sxth	r2, r3
 8000fa2:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <BMP_ReadCalibration+0x104>)
 8000fa4:	821a      	strh	r2, [r3, #16]
	b1.MC = ((int16_t) calibValues[18] << 8) | calibValues[19];
 8000fa6:	7cbb      	ldrb	r3, [r7, #18]
 8000fa8:	021b      	lsls	r3, r3, #8
 8000faa:	b21a      	sxth	r2, r3
 8000fac:	7cfb      	ldrb	r3, [r7, #19]
 8000fae:	b21b      	sxth	r3, r3
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	b21a      	sxth	r2, r3
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <BMP_ReadCalibration+0x104>)
 8000fb6:	825a      	strh	r2, [r3, #18]
	b1.MD = ((int16_t) calibValues[20] << 8) | calibValues[21];
 8000fb8:	7d3b      	ldrb	r3, [r7, #20]
 8000fba:	021b      	lsls	r3, r3, #8
 8000fbc:	b21a      	sxth	r2, r3
 8000fbe:	7d7b      	ldrb	r3, [r7, #21]
 8000fc0:	b21b      	sxth	r3, r3
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	b21a      	sxth	r2, r3
 8000fc6:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <BMP_ReadCalibration+0x104>)
 8000fc8:	829a      	strh	r2, [r3, #20]

	return true;
 8000fca:	2301      	movs	r3, #1
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3718      	adds	r7, #24
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	2000023c 	.word	0x2000023c
 8000fd8:	200001f8 	.word	0x200001f8

08000fdc <BMP_Init>:

bool BMP_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
	if (BMP_DevId() != true)
 8000fe0:	f7ff ff64 	bl	8000eac <BMP_DevId>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	f083 0301 	eor.w	r3, r3, #1
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <BMP_Init+0x18>
	{
		return false;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	e002      	b.n	8000ffa <BMP_Init+0x1e>
	}
	BMP_ReadCalibration();
 8000ff4:	f7ff ff6e 	bl	8000ed4 <BMP_ReadCalibration>
	return true;
 8000ff8:	2301      	movs	r3, #1
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <BMP_CalcTemp>:
}

//calculate temperature

void BMP_CalcTemp(void)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
	int32_t x1;
	int32_t x2;

	uTemp = (tempMLsb[0] << 8) | tempMLsb[1];  // am sters cast la templsb
 8001006:	4b1d      	ldr	r3, [pc, #116]	; (800107c <BMP_CalcTemp+0x7c>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	4a1b      	ldr	r2, [pc, #108]	; (800107c <BMP_CalcTemp+0x7c>)
 800100e:	7852      	ldrb	r2, [r2, #1]
 8001010:	4313      	orrs	r3, r2
 8001012:	4a1b      	ldr	r2, [pc, #108]	; (8001080 <BMP_CalcTemp+0x80>)
 8001014:	6013      	str	r3, [r2, #0]
	x1 = (uTemp - b1.AC6) * b1.AC5 / 32768;
 8001016:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <BMP_CalcTemp+0x80>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a1a      	ldr	r2, [pc, #104]	; (8001084 <BMP_CalcTemp+0x84>)
 800101c:	8952      	ldrh	r2, [r2, #10]
 800101e:	1a9b      	subs	r3, r3, r2
 8001020:	4a18      	ldr	r2, [pc, #96]	; (8001084 <BMP_CalcTemp+0x84>)
 8001022:	8912      	ldrh	r2, [r2, #8]
 8001024:	fb02 f303 	mul.w	r3, r2, r3
 8001028:	2b00      	cmp	r3, #0
 800102a:	da02      	bge.n	8001032 <BMP_CalcTemp+0x32>
 800102c:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001030:	337f      	adds	r3, #127	; 0x7f
 8001032:	13db      	asrs	r3, r3, #15
 8001034:	607b      	str	r3, [r7, #4]
	x2 = ((int32_t) (b1.MC * 2048)) / ((int32_t) (x1 + b1.MD));
 8001036:	4b13      	ldr	r3, [pc, #76]	; (8001084 <BMP_CalcTemp+0x84>)
 8001038:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800103c:	02da      	lsls	r2, r3, #11
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <BMP_CalcTemp+0x84>)
 8001040:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001044:	4619      	mov	r1, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	440b      	add	r3, r1
 800104a:	fb92 f3f3 	sdiv	r3, r2, r3
 800104e:	603b      	str	r3, [r7, #0]
	B5 = x1 + x2;
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	4413      	add	r3, r2
 8001056:	4a0c      	ldr	r2, [pc, #48]	; (8001088 <BMP_CalcTemp+0x88>)
 8001058:	6013      	str	r3, [r2, #0]
	temp = (B5 + 8) / 16;
 800105a:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <BMP_CalcTemp+0x88>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	3308      	adds	r3, #8
 8001060:	2b00      	cmp	r3, #0
 8001062:	da00      	bge.n	8001066 <BMP_CalcTemp+0x66>
 8001064:	330f      	adds	r3, #15
 8001066:	111b      	asrs	r3, r3, #4
 8001068:	461a      	mov	r2, r3
 800106a:	4b08      	ldr	r3, [pc, #32]	; (800108c <BMP_CalcTemp+0x8c>)
 800106c:	601a      	str	r2, [r3, #0]
}
 800106e:	bf00      	nop
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	20000224 	.word	0x20000224
 8001080:	20000210 	.word	0x20000210
 8001084:	200001f8 	.word	0x200001f8
 8001088:	20000218 	.word	0x20000218
 800108c:	20000214 	.word	0x20000214

08001090 <BMP_GetTemp>:

int32_t BMP_GetTemp(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
	BMP_CalcTemp();
 8001094:	f7ff ffb4 	bl	8001000 <BMP_CalcTemp>
	return temp;
 8001098:	4b01      	ldr	r3, [pc, #4]	; (80010a0 <BMP_GetTemp+0x10>)
 800109a:	681b      	ldr	r3, [r3, #0]
}
 800109c:	4618      	mov	r0, r3
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000214 	.word	0x20000214

080010a4 <BMP_CalcPres>:
}

//calculate true pressure

void BMP_CalcPres(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b089      	sub	sp, #36	; 0x24
 80010a8:	af00      	add	r7, sp, #0
	int32_t B6;
	int32_t B3;
	uint32_t B4;
	uint32_t B7;

	uPres = ((presMLsb[0] << 16U) | (presMLsb[1] << 8U)) >> 8;
 80010aa:	4b68      	ldr	r3, [pc, #416]	; (800124c <BMP_CalcPres+0x1a8>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	041a      	lsls	r2, r3, #16
 80010b0:	4b66      	ldr	r3, [pc, #408]	; (800124c <BMP_CalcPres+0x1a8>)
 80010b2:	785b      	ldrb	r3, [r3, #1]
 80010b4:	021b      	lsls	r3, r3, #8
 80010b6:	4313      	orrs	r3, r2
 80010b8:	121b      	asrs	r3, r3, #8
 80010ba:	4a65      	ldr	r2, [pc, #404]	; (8001250 <BMP_CalcPres+0x1ac>)
 80010bc:	6013      	str	r3, [r2, #0]
	B6 = B5 - 4000;
 80010be:	4b65      	ldr	r3, [pc, #404]	; (8001254 <BMP_CalcPres+0x1b0>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 80010c6:	61fb      	str	r3, [r7, #28]
	x1 = ((int32_t) b1.B2 * ((B6 * B6) / 4096)) / 2048;
 80010c8:	4b63      	ldr	r3, [pc, #396]	; (8001258 <BMP_CalcPres+0x1b4>)
 80010ca:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80010ce:	461a      	mov	r2, r3
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	fb03 f303 	mul.w	r3, r3, r3
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	da01      	bge.n	80010de <BMP_CalcPres+0x3a>
 80010da:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80010de:	131b      	asrs	r3, r3, #12
 80010e0:	fb02 f303 	mul.w	r3, r2, r3
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	da01      	bge.n	80010ec <BMP_CalcPres+0x48>
 80010e8:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80010ec:	12db      	asrs	r3, r3, #11
 80010ee:	61bb      	str	r3, [r7, #24]
	x2 = ((int32_t) b1.AC2 * B6) / 2048;
 80010f0:	4b59      	ldr	r3, [pc, #356]	; (8001258 <BMP_CalcPres+0x1b4>)
 80010f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010f6:	461a      	mov	r2, r3
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	fb02 f303 	mul.w	r3, r2, r3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	da01      	bge.n	8001106 <BMP_CalcPres+0x62>
 8001102:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001106:	12db      	asrs	r3, r3, #11
 8001108:	617b      	str	r3, [r7, #20]
	x3 = x1 + x2;
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	4413      	add	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
	B3 = ((int32_t) b1.AC1 * 4 + x3 + 2) / 4;
 8001112:	4b51      	ldr	r3, [pc, #324]	; (8001258 <BMP_CalcPres+0x1b4>)
 8001114:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001118:	009a      	lsls	r2, r3, #2
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	4413      	add	r3, r2
 800111e:	3302      	adds	r3, #2
 8001120:	2b00      	cmp	r3, #0
 8001122:	da00      	bge.n	8001126 <BMP_CalcPres+0x82>
 8001124:	3303      	adds	r3, #3
 8001126:	109b      	asrs	r3, r3, #2
 8001128:	60fb      	str	r3, [r7, #12]
	x1 = ((int32_t) b1.AC3 * B6) / 8192;
 800112a:	4b4b      	ldr	r3, [pc, #300]	; (8001258 <BMP_CalcPres+0x1b4>)
 800112c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001130:	461a      	mov	r2, r3
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	fb02 f303 	mul.w	r3, r2, r3
 8001138:	2b00      	cmp	r3, #0
 800113a:	da02      	bge.n	8001142 <BMP_CalcPres+0x9e>
 800113c:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 8001140:	331f      	adds	r3, #31
 8001142:	135b      	asrs	r3, r3, #13
 8001144:	61bb      	str	r3, [r7, #24]
	x2 = ((int32_t) b1.B1 * ((B6 * B6) / 4096)) / 65536;
 8001146:	4b44      	ldr	r3, [pc, #272]	; (8001258 <BMP_CalcPres+0x1b4>)
 8001148:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800114c:	461a      	mov	r2, r3
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	fb03 f303 	mul.w	r3, r3, r3
 8001154:	2b00      	cmp	r3, #0
 8001156:	da01      	bge.n	800115c <BMP_CalcPres+0xb8>
 8001158:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800115c:	131b      	asrs	r3, r3, #12
 800115e:	fb02 f303 	mul.w	r3, r2, r3
 8001162:	2b00      	cmp	r3, #0
 8001164:	da02      	bge.n	800116c <BMP_CalcPres+0xc8>
 8001166:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800116a:	33ff      	adds	r3, #255	; 0xff
 800116c:	141b      	asrs	r3, r3, #16
 800116e:	617b      	str	r3, [r7, #20]
	x3 = (x1 + x2 + 2) / 4;
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	4413      	add	r3, r2
 8001176:	3302      	adds	r3, #2
 8001178:	2b00      	cmp	r3, #0
 800117a:	da00      	bge.n	800117e <BMP_CalcPres+0xda>
 800117c:	3303      	adds	r3, #3
 800117e:	109b      	asrs	r3, r3, #2
 8001180:	613b      	str	r3, [r7, #16]
	B4 = ((uint32_t) b1.AC4 * ((uint32_t) (x3 + 32768))) / 32768;
 8001182:	4b35      	ldr	r3, [pc, #212]	; (8001258 <BMP_CalcPres+0x1b4>)
 8001184:	88db      	ldrh	r3, [r3, #6]
 8001186:	461a      	mov	r2, r3
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800118e:	fb02 f303 	mul.w	r3, r2, r3
 8001192:	0bdb      	lsrs	r3, r3, #15
 8001194:	60bb      	str	r3, [r7, #8]
	B7 = ((uint32_t) uPres - (uint32_t) B3) * 50000;
 8001196:	4b2e      	ldr	r3, [pc, #184]	; (8001250 <BMP_CalcPres+0x1ac>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	461a      	mov	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	f24c 3250 	movw	r2, #50000	; 0xc350
 80011a4:	fb02 f303 	mul.w	r3, r2, r3
 80011a8:	607b      	str	r3, [r7, #4]
	if (B7 < 0x80000000)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	db08      	blt.n	80011c2 <BMP_CalcPres+0x11e>
	{
		pres = ((B7 * 2) / B4);  //pos sa trb cast?
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	005a      	lsls	r2, r3, #1
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ba:	461a      	mov	r2, r3
 80011bc:	4b27      	ldr	r3, [pc, #156]	; (800125c <BMP_CalcPres+0x1b8>)
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	e007      	b.n	80011d2 <BMP_CalcPres+0x12e>
	}
	else
	{
		pres = (B7 / B4) * 2;
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b23      	ldr	r3, [pc, #140]	; (800125c <BMP_CalcPres+0x1b8>)
 80011d0:	601a      	str	r2, [r3, #0]
	}
	x1 = (pres / 256) * (pres / 256);
 80011d2:	4b22      	ldr	r3, [pc, #136]	; (800125c <BMP_CalcPres+0x1b8>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	da00      	bge.n	80011dc <BMP_CalcPres+0x138>
 80011da:	33ff      	adds	r3, #255	; 0xff
 80011dc:	121b      	asrs	r3, r3, #8
 80011de:	461a      	mov	r2, r3
 80011e0:	4b1e      	ldr	r3, [pc, #120]	; (800125c <BMP_CalcPres+0x1b8>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	da00      	bge.n	80011ea <BMP_CalcPres+0x146>
 80011e8:	33ff      	adds	r3, #255	; 0xff
 80011ea:	121b      	asrs	r3, r3, #8
 80011ec:	fb02 f303 	mul.w	r3, r2, r3
 80011f0:	61bb      	str	r3, [r7, #24]
	x1 = (x1 * 3038) / 65536;
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	f640 32de 	movw	r2, #3038	; 0xbde
 80011f8:	fb02 f303 	mul.w	r3, r2, r3
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	da02      	bge.n	8001206 <BMP_CalcPres+0x162>
 8001200:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001204:	33ff      	adds	r3, #255	; 0xff
 8001206:	141b      	asrs	r3, r3, #16
 8001208:	61bb      	str	r3, [r7, #24]
	x2 = (-7357 * pres) / 65536;
 800120a:	4b14      	ldr	r3, [pc, #80]	; (800125c <BMP_CalcPres+0x1b8>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a14      	ldr	r2, [pc, #80]	; (8001260 <BMP_CalcPres+0x1bc>)
 8001210:	fb02 f303 	mul.w	r3, r2, r3
 8001214:	2b00      	cmp	r3, #0
 8001216:	da02      	bge.n	800121e <BMP_CalcPres+0x17a>
 8001218:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800121c:	33ff      	adds	r3, #255	; 0xff
 800121e:	141b      	asrs	r3, r3, #16
 8001220:	617b      	str	r3, [r7, #20]
	pres = pres + (x1 + x2 + 3791) / 16;
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	4413      	add	r3, r2
 8001228:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 800122c:	2b00      	cmp	r3, #0
 800122e:	da00      	bge.n	8001232 <BMP_CalcPres+0x18e>
 8001230:	330f      	adds	r3, #15
 8001232:	111b      	asrs	r3, r3, #4
 8001234:	461a      	mov	r2, r3
 8001236:	4b09      	ldr	r3, [pc, #36]	; (800125c <BMP_CalcPres+0x1b8>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4413      	add	r3, r2
 800123c:	4a07      	ldr	r2, [pc, #28]	; (800125c <BMP_CalcPres+0x1b8>)
 800123e:	6013      	str	r3, [r2, #0]

}
 8001240:	bf00      	nop
 8001242:	3724      	adds	r7, #36	; 0x24
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	20000228 	.word	0x20000228
 8001250:	2000021c 	.word	0x2000021c
 8001254:	20000218 	.word	0x20000218
 8001258:	200001f8 	.word	0x200001f8
 800125c:	20000220 	.word	0x20000220
 8001260:	ffffe343 	.word	0xffffe343

08001264 <BMP_GetPres>:
int32_t BMP_GetPres(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
	BMP_CalcPres();
 8001268:	f7ff ff1c 	bl	80010a4 <BMP_CalcPres>
	return pres;
 800126c:	4b01      	ldr	r3, [pc, #4]	; (8001274 <BMP_GetPres+0x10>)
 800126e:	681b      	ldr	r3, [r3, #0]
}
 8001270:	4618      	mov	r0, r3
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000220 	.word	0x20000220

08001278 <BMP_State_handler>:
{
	BMP_ReadUpres();
}

int32_t BMP_State_handler()
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af02      	add	r7, sp, #8
	uint8_t tempBuffer = 0x2E;
 800127e:	232e      	movs	r3, #46	; 0x2e
 8001280:	71bb      	strb	r3, [r7, #6]
	uint8_t writePres = 0x34;
 8001282:	2334      	movs	r3, #52	; 0x34
 8001284:	717b      	strb	r3, [r7, #5]
	uint8_t ok = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	71fb      	strb	r3, [r7, #7]

	switch (BMP_State)
 800128a:	4b52      	ldr	r3, [pc, #328]	; (80013d4 <BMP_State_handler+0x15c>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b07      	cmp	r3, #7
 8001290:	f200 809b 	bhi.w	80013ca <BMP_State_handler+0x152>
 8001294:	a201      	add	r2, pc, #4	; (adr r2, 800129c <BMP_State_handler+0x24>)
 8001296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800129a:	bf00      	nop
 800129c:	080012bd 	.word	0x080012bd
 80012a0:	080012e1 	.word	0x080012e1
 80012a4:	080012f7 	.word	0x080012f7
 80012a8:	0800131b 	.word	0x0800131b
 80012ac:	08001327 	.word	0x08001327
 80012b0:	0800134b 	.word	0x0800134b
 80012b4:	08001361 	.word	0x08001361
 80012b8:	08001385 	.word	0x08001385
	{
	case BMP_State_Temp_StartMeasurement:
		if (temp_is_started == 0)
 80012bc:	4b46      	ldr	r3, [pc, #280]	; (80013d8 <BMP_State_handler+0x160>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d177      	bne.n	80013b4 <BMP_State_handler+0x13c>
		{
			temp_is_started = 1;
 80012c4:	4b44      	ldr	r3, [pc, #272]	; (80013d8 <BMP_State_handler+0x160>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Mem_Write_IT(&hi2c1, BMP_ADDR_WRITE, 0xF4,I2C_MEMADD_SIZE_8BIT, &tempBuffer, 1);
 80012ca:	2301      	movs	r3, #1
 80012cc:	9301      	str	r3, [sp, #4]
 80012ce:	1dbb      	adds	r3, r7, #6
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	2301      	movs	r3, #1
 80012d4:	22f4      	movs	r2, #244	; 0xf4
 80012d6:	21ee      	movs	r1, #238	; 0xee
 80012d8:	4840      	ldr	r0, [pc, #256]	; (80013dc <BMP_State_handler+0x164>)
 80012da:	f001 ffd1 	bl	8003280 <HAL_I2C_Mem_Write_IT>
		//	HAL_Delay(5);

		}
		// fa mem write it complete callback si treci cand intra acolo la urm state
		break;
 80012de:	e069      	b.n	80013b4 <BMP_State_handler+0x13c>
	case BMP_State_Wait_TempMeasurement:
		if(temp_wait == 0)
 80012e0:	4b3f      	ldr	r3, [pc, #252]	; (80013e0 <BMP_State_handler+0x168>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d167      	bne.n	80013b8 <BMP_State_handler+0x140>
		{
			temp_wait = 1;
 80012e8:	4b3d      	ldr	r3, [pc, #244]	; (80013e0 <BMP_State_handler+0x168>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	701a      	strb	r2, [r3, #0]
		//	HAL_GPIO_WritePin(Timertest_GPIO_Port, Timertest_Pin, SET);
	   	    HAL_TIM_Base_Start_IT(&htim17);
 80012ee:	483d      	ldr	r0, [pc, #244]	; (80013e4 <BMP_State_handler+0x16c>)
 80012f0:	f005 fe74 	bl	8006fdc <HAL_TIM_Base_Start_IT>
		//    HAL_Delay(5);
        //    BMP_State = BMP_State_Temp_ReadResult;
		}
		break;
 80012f4:	e060      	b.n	80013b8 <BMP_State_handler+0x140>
	case BMP_State_Temp_ReadResult:
		if (temp_is_read == 0)
 80012f6:	4b3c      	ldr	r3, [pc, #240]	; (80013e8 <BMP_State_handler+0x170>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d15e      	bne.n	80013bc <BMP_State_handler+0x144>
		{
			temp_is_read = 1;
 80012fe:	4b3a      	ldr	r3, [pc, #232]	; (80013e8 <BMP_State_handler+0x170>)
 8001300:	2201      	movs	r2, #1
 8001302:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Mem_Read_IT(&hi2c1, BMP_ADDR_READ, 0xF6,I2C_MEMADD_SIZE_8BIT, tempMLsb, 2);
 8001304:	2302      	movs	r3, #2
 8001306:	9301      	str	r3, [sp, #4]
 8001308:	4b38      	ldr	r3, [pc, #224]	; (80013ec <BMP_State_handler+0x174>)
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	2301      	movs	r3, #1
 800130e:	22f6      	movs	r2, #246	; 0xf6
 8001310:	21ef      	movs	r1, #239	; 0xef
 8001312:	4832      	ldr	r0, [pc, #200]	; (80013dc <BMP_State_handler+0x164>)
 8001314:	f002 f83a 	bl	800338c <HAL_I2C_Mem_Read_IT>

			//trecem la urm state cand intra in callback
		}
		break;
 8001318:	e050      	b.n	80013bc <BMP_State_handler+0x144>
	case BMP_State_Temp_Measure:
		BMP_GetTemp();
 800131a:	f7ff feb9 	bl	8001090 <BMP_GetTemp>
		BMP_State = BMP_State_Pressure_StartMeasurement;
 800131e:	4b2d      	ldr	r3, [pc, #180]	; (80013d4 <BMP_State_handler+0x15c>)
 8001320:	2204      	movs	r2, #4
 8001322:	701a      	strb	r2, [r3, #0]
		break;
 8001324:	e051      	b.n	80013ca <BMP_State_handler+0x152>
	case BMP_State_Pressure_StartMeasurement:
		if (pres_is_started == 0)
 8001326:	4b32      	ldr	r3, [pc, #200]	; (80013f0 <BMP_State_handler+0x178>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d148      	bne.n	80013c0 <BMP_State_handler+0x148>
		{
			pres_is_started = 1;
 800132e:	4b30      	ldr	r3, [pc, #192]	; (80013f0 <BMP_State_handler+0x178>)
 8001330:	2201      	movs	r2, #1
 8001332:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Mem_Write_IT(&hi2c1, BMP_ADDR_WRITE, 0xF4,I2C_MEMADD_SIZE_8BIT, &writePres, 1);
 8001334:	2301      	movs	r3, #1
 8001336:	9301      	str	r3, [sp, #4]
 8001338:	1d7b      	adds	r3, r7, #5
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	2301      	movs	r3, #1
 800133e:	22f4      	movs	r2, #244	; 0xf4
 8001340:	21ee      	movs	r1, #238	; 0xee
 8001342:	4826      	ldr	r0, [pc, #152]	; (80013dc <BMP_State_handler+0x164>)
 8001344:	f001 ff9c 	bl	8003280 <HAL_I2C_Mem_Write_IT>
		}
		// fa mem write it complete callback si treci cand intra acolo la urm state
		break;
 8001348:	e03a      	b.n	80013c0 <BMP_State_handler+0x148>
	case BMP_State_Wait_PresMeasurement:
		if(pres_wait == 0)
 800134a:	4b2a      	ldr	r3, [pc, #168]	; (80013f4 <BMP_State_handler+0x17c>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d138      	bne.n	80013c4 <BMP_State_handler+0x14c>
		{
			pres_wait = 1;
 8001352:	4b28      	ldr	r3, [pc, #160]	; (80013f4 <BMP_State_handler+0x17c>)
 8001354:	2201      	movs	r2, #1
 8001356:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim17);
 8001358:	4822      	ldr	r0, [pc, #136]	; (80013e4 <BMP_State_handler+0x16c>)
 800135a:	f005 fe3f 	bl	8006fdc <HAL_TIM_Base_Start_IT>
		//	HAL_Delay(5);
		//	BMP_State = BMP_State_Pressure_ReadResult;
        }

        break;
 800135e:	e031      	b.n	80013c4 <BMP_State_handler+0x14c>
	case BMP_State_Pressure_ReadResult:
		if (pres_is_read == 0)
 8001360:	4b25      	ldr	r3, [pc, #148]	; (80013f8 <BMP_State_handler+0x180>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d12f      	bne.n	80013c8 <BMP_State_handler+0x150>
		{
			pres_is_read = 1;
 8001368:	4b23      	ldr	r3, [pc, #140]	; (80013f8 <BMP_State_handler+0x180>)
 800136a:	2201      	movs	r2, #1
 800136c:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Mem_Read_IT(&hi2c1, BMP_ADDR_READ, 0xF6,I2C_MEMADD_SIZE_8BIT, presMLsb, 2);
 800136e:	2302      	movs	r3, #2
 8001370:	9301      	str	r3, [sp, #4]
 8001372:	4b22      	ldr	r3, [pc, #136]	; (80013fc <BMP_State_handler+0x184>)
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	2301      	movs	r3, #1
 8001378:	22f6      	movs	r2, #246	; 0xf6
 800137a:	21ef      	movs	r1, #239	; 0xef
 800137c:	4817      	ldr	r0, [pc, #92]	; (80013dc <BMP_State_handler+0x164>)
 800137e:	f002 f805 	bl	800338c <HAL_I2C_Mem_Read_IT>

		}
		//trecem la urm state cand intra in callback
		break;
 8001382:	e021      	b.n	80013c8 <BMP_State_handler+0x150>
	case BMP_State_Pressure_Measure:
		BMP_State = BMP_State_Temp_StartMeasurement;
 8001384:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <BMP_State_handler+0x15c>)
 8001386:	2200      	movs	r2, #0
 8001388:	701a      	strb	r2, [r3, #0]
		temp_is_started = 0;
 800138a:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <BMP_State_handler+0x160>)
 800138c:	2200      	movs	r2, #0
 800138e:	701a      	strb	r2, [r3, #0]
		temp_is_read = 0;
 8001390:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <BMP_State_handler+0x170>)
 8001392:	2200      	movs	r2, #0
 8001394:	701a      	strb	r2, [r3, #0]
		pres_is_started = 0;
 8001396:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <BMP_State_handler+0x178>)
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]
		pres_is_read = 0;
 800139c:	4b16      	ldr	r3, [pc, #88]	; (80013f8 <BMP_State_handler+0x180>)
 800139e:	2200      	movs	r2, #0
 80013a0:	701a      	strb	r2, [r3, #0]
		temp_wait = 0;
 80013a2:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <BMP_State_handler+0x168>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	701a      	strb	r2, [r3, #0]
		pres_wait = 0;
 80013a8:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <BMP_State_handler+0x17c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	701a      	strb	r2, [r3, #0]
		ok = 1;
 80013ae:	2301      	movs	r3, #1
 80013b0:	71fb      	strb	r3, [r7, #7]
		break;
 80013b2:	e00a      	b.n	80013ca <BMP_State_handler+0x152>
		break;
 80013b4:	bf00      	nop
 80013b6:	e008      	b.n	80013ca <BMP_State_handler+0x152>
		break;
 80013b8:	bf00      	nop
 80013ba:	e006      	b.n	80013ca <BMP_State_handler+0x152>
		break;
 80013bc:	bf00      	nop
 80013be:	e004      	b.n	80013ca <BMP_State_handler+0x152>
		break;
 80013c0:	bf00      	nop
 80013c2:	e002      	b.n	80013ca <BMP_State_handler+0x152>
        break;
 80013c4:	bf00      	nop
 80013c6:	e000      	b.n	80013ca <BMP_State_handler+0x152>
		break;
 80013c8:	bf00      	nop
	}

	return ok;
 80013ca:	79fb      	ldrb	r3, [r7, #7]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000230 	.word	0x20000230
 80013d8:	2000022a 	.word	0x2000022a
 80013dc:	2000023c 	.word	0x2000023c
 80013e0:	2000022e 	.word	0x2000022e
 80013e4:	200003d8 	.word	0x200003d8
 80013e8:	2000022b 	.word	0x2000022b
 80013ec:	20000224 	.word	0x20000224
 80013f0:	2000022c 	.word	0x2000022c
 80013f4:	2000022f 	.word	0x2000022f
 80013f8:	2000022d 	.word	0x2000022d
 80013fc:	20000228 	.word	0x20000228

08001400 <HMC_ReadValues>:
{
	HAL_I2C_Mem_Read(&hi2c1, HMC_ADDR_WRITE, HMC_DATAXO, I2C_MEMADD_SIZE_8BIT, databuffer, 6,HAL_MAX_DELAY);
}

bool HMC_ReadValues ()
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af02      	add	r7, sp, #8
	if(HAL_I2C_Mem_Read_DMA(&hi2c1, HMC_ADDR_WRITE, HMC_DATAXO, I2C_MEMADD_SIZE_8BIT, databuffer, 6) != HAL_OK)
 8001406:	2306      	movs	r3, #6
 8001408:	9301      	str	r3, [sp, #4]
 800140a:	4b08      	ldr	r3, [pc, #32]	; (800142c <HMC_ReadValues+0x2c>)
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	2301      	movs	r3, #1
 8001410:	2203      	movs	r2, #3
 8001412:	213c      	movs	r1, #60	; 0x3c
 8001414:	4806      	ldr	r0, [pc, #24]	; (8001430 <HMC_ReadValues+0x30>)
 8001416:	f002 f83f 	bl	8003498 <HAL_I2C_Mem_Read_DMA>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <HMC_ReadValues+0x24>
	{
		return false;
 8001420:	2300      	movs	r3, #0
 8001422:	e000      	b.n	8001426 <HMC_ReadValues+0x26>
	}

	return true;
 8001424:	2301      	movs	r3, #1
}
 8001426:	4618      	mov	r0, r3
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000234 	.word	0x20000234
 8001430:	2000023c 	.word	0x2000023c

08001434 <Set_SingleMeasureMode>:



bool Set_SingleMeasureMode()
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af04      	add	r7, sp, #16
	uint8_t single = 0x1;  //punel pe 1 sa fie in sigle measurement mode, daca lam setat pe 0 ii in continous measure mode
 800143a:	2301      	movs	r3, #1
 800143c:	71fb      	strb	r3, [r7, #7]

	if(HAL_I2C_Mem_Write(&hi2c1, HMC_ADDR_WRITE, 0x2, I2C_MEMADD_SIZE_8BIT, &single, 1, HAL_MAX_DELAY) != HAL_OK)
 800143e:	f04f 33ff 	mov.w	r3, #4294967295
 8001442:	9302      	str	r3, [sp, #8]
 8001444:	2301      	movs	r3, #1
 8001446:	9301      	str	r3, [sp, #4]
 8001448:	1dfb      	adds	r3, r7, #7
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	2301      	movs	r3, #1
 800144e:	2202      	movs	r2, #2
 8001450:	213c      	movs	r1, #60	; 0x3c
 8001452:	4806      	ldr	r0, [pc, #24]	; (800146c <Set_SingleMeasureMode+0x38>)
 8001454:	f001 fce6 	bl	8002e24 <HAL_I2C_Mem_Write>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <Set_SingleMeasureMode+0x2e>
	{
		return false;
 800145e:	2300      	movs	r3, #0
 8001460:	e000      	b.n	8001464 <Set_SingleMeasureMode+0x30>
	}
	return true;
 8001462:	2301      	movs	r3, #1
}
 8001464:	4618      	mov	r0, r3
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	2000023c 	.word	0x2000023c

08001470 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001476:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <MX_DMA_Init+0x58>)
 8001478:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800147a:	4a13      	ldr	r2, [pc, #76]	; (80014c8 <MX_DMA_Init+0x58>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6493      	str	r3, [r2, #72]	; 0x48
 8001482:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <MX_DMA_Init+0x58>)
 8001484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 800148e:	2200      	movs	r2, #0
 8001490:	2102      	movs	r1, #2
 8001492:	200c      	movs	r0, #12
 8001494:	f000 ffdf 	bl	8002456 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001498:	200c      	movs	r0, #12
 800149a:	f000 fff8 	bl	800248e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 2, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	2102      	movs	r1, #2
 80014a2:	200d      	movs	r0, #13
 80014a4:	f000 ffd7 	bl	8002456 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80014a8:	200d      	movs	r0, #13
 80014aa:	f000 fff0 	bl	800248e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2100      	movs	r1, #0
 80014b2:	2011      	movs	r0, #17
 80014b4:	f000 ffcf 	bl	8002456 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80014b8:	2011      	movs	r0, #17
 80014ba:	f000 ffe8 	bl	800248e <HAL_NVIC_EnableIRQ>

}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40021000 	.word	0x40021000

080014cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08a      	sub	sp, #40	; 0x28
 80014d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d2:	f107 0314 	add.w	r3, r7, #20
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	60da      	str	r2, [r3, #12]
 80014e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e2:	4b63      	ldr	r3, [pc, #396]	; (8001670 <MX_GPIO_Init+0x1a4>)
 80014e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e6:	4a62      	ldr	r2, [pc, #392]	; (8001670 <MX_GPIO_Init+0x1a4>)
 80014e8:	f043 0304 	orr.w	r3, r3, #4
 80014ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ee:	4b60      	ldr	r3, [pc, #384]	; (8001670 <MX_GPIO_Init+0x1a4>)
 80014f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f2:	f003 0304 	and.w	r3, r3, #4
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014fa:	4b5d      	ldr	r3, [pc, #372]	; (8001670 <MX_GPIO_Init+0x1a4>)
 80014fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fe:	4a5c      	ldr	r2, [pc, #368]	; (8001670 <MX_GPIO_Init+0x1a4>)
 8001500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001506:	4b5a      	ldr	r3, [pc, #360]	; (8001670 <MX_GPIO_Init+0x1a4>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001512:	4b57      	ldr	r3, [pc, #348]	; (8001670 <MX_GPIO_Init+0x1a4>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001516:	4a56      	ldr	r2, [pc, #344]	; (8001670 <MX_GPIO_Init+0x1a4>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800151e:	4b54      	ldr	r3, [pc, #336]	; (8001670 <MX_GPIO_Init+0x1a4>)
 8001520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800152a:	4b51      	ldr	r3, [pc, #324]	; (8001670 <MX_GPIO_Init+0x1a4>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152e:	4a50      	ldr	r2, [pc, #320]	; (8001670 <MX_GPIO_Init+0x1a4>)
 8001530:	f043 0302 	orr.w	r3, r3, #2
 8001534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001536:	4b4e      	ldr	r3, [pc, #312]	; (8001670 <MX_GPIO_Init+0x1a4>)
 8001538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GYRO_GPIO_Port, SPI_CS_GYRO_Pin, GPIO_PIN_SET);
 8001542:	2201      	movs	r2, #1
 8001544:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001548:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800154c:	f001 fbaa 	bl	8002ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Timertest_GPIO_Port, Timertest_Pin, GPIO_PIN_RESET);
 8001550:	2200      	movs	r2, #0
 8001552:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001556:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800155a:	f001 fba3 	bl	8002ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADXL_RESET_GPIO_Port, ADXL_RESET_Pin, GPIO_PIN_RESET);
 800155e:	2200      	movs	r2, #0
 8001560:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001564:	4843      	ldr	r0, [pc, #268]	; (8001674 <MX_GPIO_Init+0x1a8>)
 8001566:	f001 fb9d 	bl	8002ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_ACC_GPIO_Port, SPI_CS_ACC_Pin, GPIO_PIN_SET);
 800156a:	2201      	movs	r2, #1
 800156c:	2140      	movs	r1, #64	; 0x40
 800156e:	4842      	ldr	r0, [pc, #264]	; (8001678 <MX_GPIO_Init+0x1ac>)
 8001570:	f001 fb98 	bl	8002ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001574:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800157a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800157e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	4619      	mov	r1, r3
 800158a:	483a      	ldr	r0, [pc, #232]	; (8001674 <MX_GPIO_Init+0x1a8>)
 800158c:	f001 f9e0 	bl	8002950 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_EXTI_ACC_Pin;
 8001590:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001596:	2300      	movs	r3, #0
 8001598:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_EXTI_ACC_GPIO_Port, &GPIO_InitStruct);
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	4619      	mov	r1, r3
 80015a4:	4833      	ldr	r0, [pc, #204]	; (8001674 <MX_GPIO_Init+0x1a8>)
 80015a6:	f001 f9d3 	bl	8002950 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_GYRO_Pin;
 80015aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b0:	2301      	movs	r3, #1
 80015b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015b8:	2302      	movs	r3, #2
 80015ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GYRO_GPIO_Port, &GPIO_InitStruct);
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	4619      	mov	r1, r3
 80015c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015c6:	f001 f9c3 	bl	8002950 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Timertest_Pin;
 80015ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d0:	2301      	movs	r3, #1
 80015d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d8:	2300      	movs	r3, #0
 80015da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Timertest_GPIO_Port, &GPIO_InitStruct);
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	4619      	mov	r1, r3
 80015e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e6:	f001 f9b3 	bl	8002950 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADXL_RESET_Pin;
 80015ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f0:	2301      	movs	r3, #1
 80015f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f8:	2300      	movs	r3, #0
 80015fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ADXL_RESET_GPIO_Port, &GPIO_InitStruct);
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	4619      	mov	r1, r3
 8001602:	481c      	ldr	r0, [pc, #112]	; (8001674 <MX_GPIO_Init+0x1a8>)
 8001604:	f001 f9a4 	bl	8002950 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_EXTI5_HMC_Pin;
 8001608:	2320      	movs	r3, #32
 800160a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800160c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001612:	2301      	movs	r3, #1
 8001614:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_EXTI5_HMC_GPIO_Port, &GPIO_InitStruct);
 8001616:	f107 0314 	add.w	r3, r7, #20
 800161a:	4619      	mov	r1, r3
 800161c:	4816      	ldr	r0, [pc, #88]	; (8001678 <MX_GPIO_Init+0x1ac>)
 800161e:	f001 f997 	bl	8002950 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_ACC_Pin;
 8001622:	2340      	movs	r3, #64	; 0x40
 8001624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001626:	2301      	movs	r3, #1
 8001628:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800162e:	2302      	movs	r3, #2
 8001630:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_ACC_GPIO_Port, &GPIO_InitStruct);
 8001632:	f107 0314 	add.w	r3, r7, #20
 8001636:	4619      	mov	r1, r3
 8001638:	480f      	ldr	r0, [pc, #60]	; (8001678 <MX_GPIO_Init+0x1ac>)
 800163a:	f001 f989 	bl	8002950 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_EXTI_GYRO_Pin;
 800163e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001642:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001644:	2300      	movs	r3, #0
 8001646:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_EXTI_GYRO_GPIO_Port, &GPIO_InitStruct);
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	4619      	mov	r1, r3
 8001652:	4809      	ldr	r0, [pc, #36]	; (8001678 <MX_GPIO_Init+0x1ac>)
 8001654:	f001 f97c 	bl	8002950 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8001658:	2200      	movs	r2, #0
 800165a:	2102      	movs	r1, #2
 800165c:	2017      	movs	r0, #23
 800165e:	f000 fefa 	bl	8002456 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001662:	2017      	movs	r0, #23
 8001664:	f000 ff13 	bl	800248e <HAL_NVIC_EnableIRQ>

}
 8001668:	bf00      	nop
 800166a:	3728      	adds	r7, #40	; 0x28
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40021000 	.word	0x40021000
 8001674:	48000800 	.word	0x48000800
 8001678:	48000400 	.word	0x48000400

0800167c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_EXTI5_HMC_Pin)
 8001686:	88fb      	ldrh	r3, [r7, #6]
 8001688:	2b20      	cmp	r3, #32
 800168a:	d104      	bne.n	8001696 <HAL_GPIO_EXTI_Callback+0x1a>
  {
	  HMC_EXTI_Ready = true;
 800168c:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <HAL_GPIO_EXTI_Callback+0x24>)
 800168e:	2201      	movs	r2, #1
 8001690:	701a      	strb	r2, [r3, #0]
	  HMC_ReadValues();
 8001692:	f7ff feb5 	bl	8001400 <HMC_ReadValues>
  }
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	200002d8 	.word	0x200002d8

080016a4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016a8:	4b1b      	ldr	r3, [pc, #108]	; (8001718 <MX_I2C1_Init+0x74>)
 80016aa:	4a1c      	ldr	r2, [pc, #112]	; (800171c <MX_I2C1_Init+0x78>)
 80016ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 80016ae:	4b1a      	ldr	r3, [pc, #104]	; (8001718 <MX_I2C1_Init+0x74>)
 80016b0:	4a1b      	ldr	r2, [pc, #108]	; (8001720 <MX_I2C1_Init+0x7c>)
 80016b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80016b4:	4b18      	ldr	r3, [pc, #96]	; (8001718 <MX_I2C1_Init+0x74>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016ba:	4b17      	ldr	r3, [pc, #92]	; (8001718 <MX_I2C1_Init+0x74>)
 80016bc:	2201      	movs	r2, #1
 80016be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016c0:	4b15      	ldr	r3, [pc, #84]	; (8001718 <MX_I2C1_Init+0x74>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80016c6:	4b14      	ldr	r3, [pc, #80]	; (8001718 <MX_I2C1_Init+0x74>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016cc:	4b12      	ldr	r3, [pc, #72]	; (8001718 <MX_I2C1_Init+0x74>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016d2:	4b11      	ldr	r3, [pc, #68]	; (8001718 <MX_I2C1_Init+0x74>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016d8:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <MX_I2C1_Init+0x74>)
 80016da:	2200      	movs	r2, #0
 80016dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016de:	480e      	ldr	r0, [pc, #56]	; (8001718 <MX_I2C1_Init+0x74>)
 80016e0:	f001 fb10 	bl	8002d04 <HAL_I2C_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80016ea:	f000 f9a0 	bl	8001a2e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016ee:	2100      	movs	r1, #0
 80016f0:	4809      	ldr	r0, [pc, #36]	; (8001718 <MX_I2C1_Init+0x74>)
 80016f2:	f003 fe81 	bl	80053f8 <HAL_I2CEx_ConfigAnalogFilter>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016fc:	f000 f997 	bl	8001a2e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001700:	2100      	movs	r1, #0
 8001702:	4805      	ldr	r0, [pc, #20]	; (8001718 <MX_I2C1_Init+0x74>)
 8001704:	f003 fec3 	bl	800548e <HAL_I2CEx_ConfigDigitalFilter>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800170e:	f000 f98e 	bl	8001a2e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	2000023c 	.word	0x2000023c
 800171c:	40005400 	.word	0x40005400
 8001720:	00702991 	.word	0x00702991

08001724 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b0ac      	sub	sp, #176	; 0xb0
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]
 800173a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	2288      	movs	r2, #136	; 0x88
 8001742:	2100      	movs	r1, #0
 8001744:	4618      	mov	r0, r3
 8001746:	f006 fc5b 	bl	8008000 <memset>
  if(i2cHandle->Instance==I2C1)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a3e      	ldr	r2, [pc, #248]	; (8001848 <HAL_I2C_MspInit+0x124>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d174      	bne.n	800183e <HAL_I2C_MspInit+0x11a>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001754:	2340      	movs	r3, #64	; 0x40
 8001756:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001758:	2300      	movs	r3, #0
 800175a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	4618      	mov	r0, r3
 8001762:	f004 fd65 	bl	8006230 <HAL_RCCEx_PeriphCLKConfig>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800176c:	f000 f95f 	bl	8001a2e <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001770:	4b36      	ldr	r3, [pc, #216]	; (800184c <HAL_I2C_MspInit+0x128>)
 8001772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001774:	4a35      	ldr	r2, [pc, #212]	; (800184c <HAL_I2C_MspInit+0x128>)
 8001776:	f043 0302 	orr.w	r3, r3, #2
 800177a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800177c:	4b33      	ldr	r3, [pc, #204]	; (800184c <HAL_I2C_MspInit+0x128>)
 800177e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001788:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800178c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001790:	2312      	movs	r3, #18
 8001792:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001796:	2301      	movs	r3, #1
 8001798:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179c:	2303      	movs	r3, #3
 800179e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017a2:	2304      	movs	r3, #4
 80017a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017ac:	4619      	mov	r1, r3
 80017ae:	4828      	ldr	r0, [pc, #160]	; (8001850 <HAL_I2C_MspInit+0x12c>)
 80017b0:	f001 f8ce 	bl	8002950 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB7);
 80017b4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80017b8:	f003 feb6 	bl	8005528 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB8);
 80017bc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80017c0:	f003 feb2 	bl	8005528 <HAL_I2CEx_EnableFastModePlus>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017c4:	4b21      	ldr	r3, [pc, #132]	; (800184c <HAL_I2C_MspInit+0x128>)
 80017c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c8:	4a20      	ldr	r2, [pc, #128]	; (800184c <HAL_I2C_MspInit+0x128>)
 80017ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017ce:	6593      	str	r3, [r2, #88]	; 0x58
 80017d0:	4b1e      	ldr	r3, [pc, #120]	; (800184c <HAL_I2C_MspInit+0x128>)
 80017d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80017dc:	4b1d      	ldr	r3, [pc, #116]	; (8001854 <HAL_I2C_MspInit+0x130>)
 80017de:	4a1e      	ldr	r2, [pc, #120]	; (8001858 <HAL_I2C_MspInit+0x134>)
 80017e0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_3;
 80017e2:	4b1c      	ldr	r3, [pc, #112]	; (8001854 <HAL_I2C_MspInit+0x130>)
 80017e4:	2203      	movs	r2, #3
 80017e6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017e8:	4b1a      	ldr	r3, [pc, #104]	; (8001854 <HAL_I2C_MspInit+0x130>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017ee:	4b19      	ldr	r3, [pc, #100]	; (8001854 <HAL_I2C_MspInit+0x130>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017f4:	4b17      	ldr	r3, [pc, #92]	; (8001854 <HAL_I2C_MspInit+0x130>)
 80017f6:	2280      	movs	r2, #128	; 0x80
 80017f8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017fa:	4b16      	ldr	r3, [pc, #88]	; (8001854 <HAL_I2C_MspInit+0x130>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001800:	4b14      	ldr	r3, [pc, #80]	; (8001854 <HAL_I2C_MspInit+0x130>)
 8001802:	2200      	movs	r2, #0
 8001804:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001806:	4b13      	ldr	r3, [pc, #76]	; (8001854 <HAL_I2C_MspInit+0x130>)
 8001808:	2200      	movs	r2, #0
 800180a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800180c:	4b11      	ldr	r3, [pc, #68]	; (8001854 <HAL_I2C_MspInit+0x130>)
 800180e:	2200      	movs	r2, #0
 8001810:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001812:	4810      	ldr	r0, [pc, #64]	; (8001854 <HAL_I2C_MspInit+0x130>)
 8001814:	f000 fe56 	bl	80024c4 <HAL_DMA_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <HAL_I2C_MspInit+0xfe>
    {
      Error_Handler();
 800181e:	f000 f906 	bl	8001a2e <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a0b      	ldr	r2, [pc, #44]	; (8001854 <HAL_I2C_MspInit+0x130>)
 8001826:	63da      	str	r2, [r3, #60]	; 0x3c
 8001828:	4a0a      	ldr	r2, [pc, #40]	; (8001854 <HAL_I2C_MspInit+0x130>)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 2, 0);
 800182e:	2200      	movs	r2, #0
 8001830:	2102      	movs	r1, #2
 8001832:	201f      	movs	r0, #31
 8001834:	f000 fe0f 	bl	8002456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001838:	201f      	movs	r0, #31
 800183a:	f000 fe28 	bl	800248e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800183e:	bf00      	nop
 8001840:	37b0      	adds	r7, #176	; 0xb0
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40005400 	.word	0x40005400
 800184c:	40021000 	.word	0x40021000
 8001850:	48000400 	.word	0x48000400
 8001854:	20000290 	.word	0x20000290
 8001858:	40020080 	.word	0x40020080

0800185c <HAL_I2C_MemRxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{  // uint8_t idle = 0x3;
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]

	if(HMC_EXTI_Ready)
 8001864:	4b15      	ldr	r3, [pc, #84]	; (80018bc <HAL_I2C_MemRxCpltCallback+0x60>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d008      	beq.n	800187e <HAL_I2C_MemRxCpltCallback+0x22>
	{
		Set_SingleMeasureMode();
 800186c:	f7ff fde2 	bl	8001434 <Set_SingleMeasureMode>
		HMC_EXTI_Ready = false;
 8001870:	4b12      	ldr	r3, [pc, #72]	; (80018bc <HAL_I2C_MemRxCpltCallback+0x60>)
 8001872:	2200      	movs	r2, #0
 8001874:	701a      	strb	r2, [r3, #0]
		HMC_IT_Ready = true;
 8001876:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <HAL_I2C_MemRxCpltCallback+0x64>)
 8001878:	2201      	movs	r2, #1
 800187a:	701a      	strb	r2, [r3, #0]
		{
			pres_is_read++;
			BMP_State = BMP_State_Pressure_Measure;
		}
	}
}
 800187c:	e01a      	b.n	80018b4 <HAL_I2C_MemRxCpltCallback+0x58>
		if(temp_is_read == 1)
 800187e:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <HAL_I2C_MemRxCpltCallback+0x68>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d109      	bne.n	800189a <HAL_I2C_MemRxCpltCallback+0x3e>
			temp_is_read++;
 8001886:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <HAL_I2C_MemRxCpltCallback+0x68>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	3301      	adds	r3, #1
 800188c:	b2da      	uxtb	r2, r3
 800188e:	4b0d      	ldr	r3, [pc, #52]	; (80018c4 <HAL_I2C_MemRxCpltCallback+0x68>)
 8001890:	701a      	strb	r2, [r3, #0]
			BMP_State = BMP_State_Temp_Measure;
 8001892:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <HAL_I2C_MemRxCpltCallback+0x6c>)
 8001894:	2203      	movs	r2, #3
 8001896:	701a      	strb	r2, [r3, #0]
}
 8001898:	e00c      	b.n	80018b4 <HAL_I2C_MemRxCpltCallback+0x58>
		else if(pres_is_read == 1)
 800189a:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <HAL_I2C_MemRxCpltCallback+0x70>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d108      	bne.n	80018b4 <HAL_I2C_MemRxCpltCallback+0x58>
			pres_is_read++;
 80018a2:	4b0a      	ldr	r3, [pc, #40]	; (80018cc <HAL_I2C_MemRxCpltCallback+0x70>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	3301      	adds	r3, #1
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	4b08      	ldr	r3, [pc, #32]	; (80018cc <HAL_I2C_MemRxCpltCallback+0x70>)
 80018ac:	701a      	strb	r2, [r3, #0]
			BMP_State = BMP_State_Pressure_Measure;
 80018ae:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <HAL_I2C_MemRxCpltCallback+0x6c>)
 80018b0:	2207      	movs	r2, #7
 80018b2:	701a      	strb	r2, [r3, #0]
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	200002d8 	.word	0x200002d8
 80018c0:	200002d9 	.word	0x200002d9
 80018c4:	2000022b 	.word	0x2000022b
 80018c8:	20000230 	.word	0x20000230
 80018cc:	2000022d 	.word	0x2000022d

080018d0 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
	if(temp_is_started == 1)
 80018d8:	4b10      	ldr	r3, [pc, #64]	; (800191c <HAL_I2C_MemTxCpltCallback+0x4c>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d109      	bne.n	80018f4 <HAL_I2C_MemTxCpltCallback+0x24>
	{
		temp_is_started++;
 80018e0:	4b0e      	ldr	r3, [pc, #56]	; (800191c <HAL_I2C_MemTxCpltCallback+0x4c>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	3301      	adds	r3, #1
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	4b0c      	ldr	r3, [pc, #48]	; (800191c <HAL_I2C_MemTxCpltCallback+0x4c>)
 80018ea:	701a      	strb	r2, [r3, #0]
		BMP_State = BMP_State_Wait_TempMeasurement;
 80018ec:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <HAL_I2C_MemTxCpltCallback+0x50>)
 80018ee:	2201      	movs	r2, #1
 80018f0:	701a      	strb	r2, [r3, #0]
	else if(pres_is_started == 1)
	{
		pres_is_started++;
		BMP_State = BMP_State_Wait_PresMeasurement;
    }
}
 80018f2:	e00c      	b.n	800190e <HAL_I2C_MemTxCpltCallback+0x3e>
	else if(pres_is_started == 1)
 80018f4:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <HAL_I2C_MemTxCpltCallback+0x54>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d108      	bne.n	800190e <HAL_I2C_MemTxCpltCallback+0x3e>
		pres_is_started++;
 80018fc:	4b09      	ldr	r3, [pc, #36]	; (8001924 <HAL_I2C_MemTxCpltCallback+0x54>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	3301      	adds	r3, #1
 8001902:	b2da      	uxtb	r2, r3
 8001904:	4b07      	ldr	r3, [pc, #28]	; (8001924 <HAL_I2C_MemTxCpltCallback+0x54>)
 8001906:	701a      	strb	r2, [r3, #0]
		BMP_State = BMP_State_Wait_PresMeasurement;
 8001908:	4b05      	ldr	r3, [pc, #20]	; (8001920 <HAL_I2C_MemTxCpltCallback+0x50>)
 800190a:	2205      	movs	r2, #5
 800190c:	701a      	strb	r2, [r3, #0]
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	2000022a 	.word	0x2000022a
 8001920:	20000230 	.word	0x20000230
 8001924:	2000022c 	.word	0x2000022c

08001928 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800192c:	f000 fc3c 	bl	80021a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001930:	f000 f82c 	bl	800198c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  TIM17->DIER &= ~(TIM_IT_UPDATE);
 8001934:	4b13      	ldr	r3, [pc, #76]	; (8001984 <main+0x5c>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	4a12      	ldr	r2, [pc, #72]	; (8001984 <main+0x5c>)
 800193a:	f023 0301 	bic.w	r3, r3, #1
 800193e:	60d3      	str	r3, [r2, #12]
  TIM17->CR1  &= ~(TIM_CR1_CEN);
 8001940:	4b10      	ldr	r3, [pc, #64]	; (8001984 <main+0x5c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a0f      	ldr	r2, [pc, #60]	; (8001984 <main+0x5c>)
 8001946:	f023 0301 	bic.w	r3, r3, #1
 800194a:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800194c:	f7ff fdbe 	bl	80014cc <MX_GPIO_Init>
  MX_DMA_Init();
 8001950:	f7ff fd8e 	bl	8001470 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001954:	f000 fb50 	bl	8001ff8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001958:	f000 f86e 	bl	8001a38 <MX_SPI1_Init>
  MX_I2C1_Init();
 800195c:	f7ff fea2 	bl	80016a4 <MX_I2C1_Init>
  MX_TIM17_Init();
 8001960:	f000 fac8 	bl	8001ef4 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  BMP_Init();
 8001964:	f7ff fb3a 	bl	8000fdc <BMP_Init>
  	    GYRO_XYZConv(&x, &y, &z);

  	 //   USART_TransmitGYROValues(&x, &y, &z);
    }
*/
	  if(BMP_State_handler() == 1)
 8001968:	f7ff fc86 	bl	8001278 <BMP_State_handler>
 800196c:	4603      	mov	r3, r0
 800196e:	2b01      	cmp	r3, #1
 8001970:	d1fa      	bne.n	8001968 <main+0x40>
     {
        baropres = BMP_GetPres();
 8001972:	f7ff fc77 	bl	8001264 <BMP_GetPres>
 8001976:	4603      	mov	r3, r0
 8001978:	4a03      	ldr	r2, [pc, #12]	; (8001988 <main+0x60>)
 800197a:	6013      	str	r3, [r2, #0]
        USART_TransmitBMPValue(&baropres);
 800197c:	4802      	ldr	r0, [pc, #8]	; (8001988 <main+0x60>)
 800197e:	f000 fbc7 	bl	8002110 <USART_TransmitBMPValue>
	  if(BMP_State_handler() == 1)
 8001982:	e7f1      	b.n	8001968 <main+0x40>
 8001984:	40014800 	.word	0x40014800
 8001988:	200002dc 	.word	0x200002dc

0800198c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b096      	sub	sp, #88	; 0x58
 8001990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001992:	f107 0314 	add.w	r3, r7, #20
 8001996:	2244      	movs	r2, #68	; 0x44
 8001998:	2100      	movs	r1, #0
 800199a:	4618      	mov	r0, r3
 800199c:	f006 fb30 	bl	8008000 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019a0:	463b      	mov	r3, r7
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	605a      	str	r2, [r3, #4]
 80019a8:	609a      	str	r2, [r3, #8]
 80019aa:	60da      	str	r2, [r3, #12]
 80019ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80019ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80019b2:	f003 fde7 	bl	8005584 <HAL_PWREx_ControlVoltageScaling>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80019bc:	f000 f837 	bl	8001a2e <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019c0:	2302      	movs	r3, #2
 80019c2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019c8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019ca:	2310      	movs	r3, #16
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ce:	2302      	movs	r3, #2
 80019d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019d2:	2302      	movs	r3, #2
 80019d4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80019d6:	2301      	movs	r3, #1
 80019d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80019da:	230a      	movs	r3, #10
 80019dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80019de:	2307      	movs	r3, #7
 80019e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80019e2:	2302      	movs	r3, #2
 80019e4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80019e6:	2302      	movs	r3, #2
 80019e8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ea:	f107 0314 	add.w	r3, r7, #20
 80019ee:	4618      	mov	r0, r3
 80019f0:	f003 fe1e 	bl	8005630 <HAL_RCC_OscConfig>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <SystemClock_Config+0x72>
  {
    Error_Handler();
 80019fa:	f000 f818 	bl	8001a2e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019fe:	230f      	movs	r3, #15
 8001a00:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a02:	2303      	movs	r3, #3
 8001a04:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a12:	463b      	mov	r3, r7
 8001a14:	2104      	movs	r1, #4
 8001a16:	4618      	mov	r0, r3
 8001a18:	f004 f9e6 	bl	8005de8 <HAL_RCC_ClockConfig>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001a22:	f000 f804 	bl	8001a2e <Error_Handler>
  }
}
 8001a26:	bf00      	nop
 8001a28:	3758      	adds	r7, #88	; 0x58
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a32:	b672      	cpsid	i
}
 8001a34:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a36:	e7fe      	b.n	8001a36 <Error_Handler+0x8>

08001a38 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001a3c:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a3e:	4a1c      	ldr	r2, [pc, #112]	; (8001ab0 <MX_SPI1_Init+0x78>)
 8001a40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a42:	4b1a      	ldr	r3, [pc, #104]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a4a:	4b18      	ldr	r3, [pc, #96]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a50:	4b16      	ldr	r3, [pc, #88]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a52:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001a56:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001a58:	4b14      	ldr	r3, [pc, #80]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001a5e:	4b13      	ldr	r3, [pc, #76]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a60:	2201      	movs	r2, #1
 8001a62:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a64:	4b11      	ldr	r3, [pc, #68]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a6a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001a6c:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a6e:	2238      	movs	r2, #56	; 0x38
 8001a70:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a72:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a78:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a7e:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001a84:	4b09      	ldr	r3, [pc, #36]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a86:	2207      	movs	r2, #7
 8001a88:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a8a:	4b08      	ldr	r3, [pc, #32]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a96:	4805      	ldr	r0, [pc, #20]	; (8001aac <MX_SPI1_Init+0x74>)
 8001a98:	f005 f886 	bl	8006ba8 <HAL_SPI_Init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001aa2:	f7ff ffc4 	bl	8001a2e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	200002e0 	.word	0x200002e0
 8001ab0:	40013000 	.word	0x40013000

08001ab4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08a      	sub	sp, #40	; 0x28
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a4d      	ldr	r2, [pc, #308]	; (8001c08 <HAL_SPI_MspInit+0x154>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	f040 8094 	bne.w	8001c00 <HAL_SPI_MspInit+0x14c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ad8:	4b4c      	ldr	r3, [pc, #304]	; (8001c0c <HAL_SPI_MspInit+0x158>)
 8001ada:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001adc:	4a4b      	ldr	r2, [pc, #300]	; (8001c0c <HAL_SPI_MspInit+0x158>)
 8001ade:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ae2:	6613      	str	r3, [r2, #96]	; 0x60
 8001ae4:	4b49      	ldr	r3, [pc, #292]	; (8001c0c <HAL_SPI_MspInit+0x158>)
 8001ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ae8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aec:	613b      	str	r3, [r7, #16]
 8001aee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af0:	4b46      	ldr	r3, [pc, #280]	; (8001c0c <HAL_SPI_MspInit+0x158>)
 8001af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af4:	4a45      	ldr	r2, [pc, #276]	; (8001c0c <HAL_SPI_MspInit+0x158>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001afc:	4b43      	ldr	r3, [pc, #268]	; (8001c0c <HAL_SPI_MspInit+0x158>)
 8001afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b08:	2320      	movs	r3, #32
 8001b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b14:	2303      	movs	r3, #3
 8001b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b18:	2305      	movs	r3, #5
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	4619      	mov	r1, r3
 8001b22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b26:	f000 ff13 	bl	8002950 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b2a:	23c0      	movs	r3, #192	; 0xc0
 8001b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b32:	2301      	movs	r3, #1
 8001b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b36:	2303      	movs	r3, #3
 8001b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b3a:	2305      	movs	r3, #5
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3e:	f107 0314 	add.w	r3, r7, #20
 8001b42:	4619      	mov	r1, r3
 8001b44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b48:	f000 ff02 	bl	8002950 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8001b4c:	4b30      	ldr	r3, [pc, #192]	; (8001c10 <HAL_SPI_MspInit+0x15c>)
 8001b4e:	4a31      	ldr	r2, [pc, #196]	; (8001c14 <HAL_SPI_MspInit+0x160>)
 8001b50:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8001b52:	4b2f      	ldr	r3, [pc, #188]	; (8001c10 <HAL_SPI_MspInit+0x15c>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b58:	4b2d      	ldr	r3, [pc, #180]	; (8001c10 <HAL_SPI_MspInit+0x15c>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b5e:	4b2c      	ldr	r3, [pc, #176]	; (8001c10 <HAL_SPI_MspInit+0x15c>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b64:	4b2a      	ldr	r3, [pc, #168]	; (8001c10 <HAL_SPI_MspInit+0x15c>)
 8001b66:	2280      	movs	r2, #128	; 0x80
 8001b68:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b6a:	4b29      	ldr	r3, [pc, #164]	; (8001c10 <HAL_SPI_MspInit+0x15c>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b70:	4b27      	ldr	r3, [pc, #156]	; (8001c10 <HAL_SPI_MspInit+0x15c>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001b76:	4b26      	ldr	r3, [pc, #152]	; (8001c10 <HAL_SPI_MspInit+0x15c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b7c:	4b24      	ldr	r3, [pc, #144]	; (8001c10 <HAL_SPI_MspInit+0x15c>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001b82:	4823      	ldr	r0, [pc, #140]	; (8001c10 <HAL_SPI_MspInit+0x15c>)
 8001b84:	f000 fc9e 	bl	80024c4 <HAL_DMA_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <HAL_SPI_MspInit+0xde>
    {
      Error_Handler();
 8001b8e:	f7ff ff4e 	bl	8001a2e <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a1e      	ldr	r2, [pc, #120]	; (8001c10 <HAL_SPI_MspInit+0x15c>)
 8001b96:	659a      	str	r2, [r3, #88]	; 0x58
 8001b98:	4a1d      	ldr	r2, [pc, #116]	; (8001c10 <HAL_SPI_MspInit+0x15c>)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001b9e:	4b1e      	ldr	r3, [pc, #120]	; (8001c18 <HAL_SPI_MspInit+0x164>)
 8001ba0:	4a1e      	ldr	r2, [pc, #120]	; (8001c1c <HAL_SPI_MspInit+0x168>)
 8001ba2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8001ba4:	4b1c      	ldr	r3, [pc, #112]	; (8001c18 <HAL_SPI_MspInit+0x164>)
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001baa:	4b1b      	ldr	r3, [pc, #108]	; (8001c18 <HAL_SPI_MspInit+0x164>)
 8001bac:	2210      	movs	r2, #16
 8001bae:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bb0:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <HAL_SPI_MspInit+0x164>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bb6:	4b18      	ldr	r3, [pc, #96]	; (8001c18 <HAL_SPI_MspInit+0x164>)
 8001bb8:	2280      	movs	r2, #128	; 0x80
 8001bba:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bbc:	4b16      	ldr	r3, [pc, #88]	; (8001c18 <HAL_SPI_MspInit+0x164>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bc2:	4b15      	ldr	r3, [pc, #84]	; (8001c18 <HAL_SPI_MspInit+0x164>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001bc8:	4b13      	ldr	r3, [pc, #76]	; (8001c18 <HAL_SPI_MspInit+0x164>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bce:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <HAL_SPI_MspInit+0x164>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001bd4:	4810      	ldr	r0, [pc, #64]	; (8001c18 <HAL_SPI_MspInit+0x164>)
 8001bd6:	f000 fc75 	bl	80024c4 <HAL_DMA_Init>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <HAL_SPI_MspInit+0x130>
    {
      Error_Handler();
 8001be0:	f7ff ff25 	bl	8001a2e <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a0c      	ldr	r2, [pc, #48]	; (8001c18 <HAL_SPI_MspInit+0x164>)
 8001be8:	655a      	str	r2, [r3, #84]	; 0x54
 8001bea:	4a0b      	ldr	r2, [pc, #44]	; (8001c18 <HAL_SPI_MspInit+0x164>)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2102      	movs	r1, #2
 8001bf4:	2023      	movs	r0, #35	; 0x23
 8001bf6:	f000 fc2e 	bl	8002456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001bfa:	2023      	movs	r0, #35	; 0x23
 8001bfc:	f000 fc47 	bl	800248e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001c00:	bf00      	nop
 8001c02:	3728      	adds	r7, #40	; 0x28
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40013000 	.word	0x40013000
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	20000344 	.word	0x20000344
 8001c14:	4002001c 	.word	0x4002001c
 8001c18:	2000038c 	.word	0x2000038c
 8001c1c:	40020030 	.word	0x40020030

08001c20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c26:	4b0f      	ldr	r3, [pc, #60]	; (8001c64 <HAL_MspInit+0x44>)
 8001c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c2a:	4a0e      	ldr	r2, [pc, #56]	; (8001c64 <HAL_MspInit+0x44>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	6613      	str	r3, [r2, #96]	; 0x60
 8001c32:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <HAL_MspInit+0x44>)
 8001c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	607b      	str	r3, [r7, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c3e:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <HAL_MspInit+0x44>)
 8001c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c42:	4a08      	ldr	r2, [pc, #32]	; (8001c64 <HAL_MspInit+0x44>)
 8001c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c48:	6593      	str	r3, [r2, #88]	; 0x58
 8001c4a:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <HAL_MspInit+0x44>)
 8001c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c52:	603b      	str	r3, [r7, #0]
 8001c54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	40021000 	.word	0x40021000

08001c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c6c:	e7fe      	b.n	8001c6c <NMI_Handler+0x4>

08001c6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c72:	e7fe      	b.n	8001c72 <HardFault_Handler+0x4>

08001c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c78:	e7fe      	b.n	8001c78 <MemManage_Handler+0x4>

08001c7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c7e:	e7fe      	b.n	8001c7e <BusFault_Handler+0x4>

08001c80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c84:	e7fe      	b.n	8001c84 <UsageFault_Handler+0x4>

08001c86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c86:	b480      	push	{r7}
 8001c88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cb4:	f000 fad4 	bl	8002260 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cb8:	bf00      	nop
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001cc0:	4802      	ldr	r0, [pc, #8]	; (8001ccc <DMA1_Channel2_IRQHandler+0x10>)
 8001cc2:	f000 fd58 	bl	8002776 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000344 	.word	0x20000344

08001cd0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001cd4:	4802      	ldr	r0, [pc, #8]	; (8001ce0 <DMA1_Channel3_IRQHandler+0x10>)
 8001cd6:	f000 fd4e 	bl	8002776 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	2000038c 	.word	0x2000038c

08001ce4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001ce8:	4802      	ldr	r0, [pc, #8]	; (8001cf4 <DMA1_Channel7_IRQHandler+0x10>)
 8001cea:	f000 fd44 	bl	8002776 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20000290 	.word	0x20000290

08001cf8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_EXTI5_HMC_Pin);
 8001cfc:	2020      	movs	r0, #32
 8001cfe:	f000 ffe9 	bl	8002cd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
	...

08001d08 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001d0c:	4802      	ldr	r0, [pc, #8]	; (8001d18 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001d0e:	f005 fa04 	bl	800711a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	200003d8 	.word	0x200003d8

08001d1c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001d20:	4802      	ldr	r0, [pc, #8]	; (8001d2c <I2C1_EV_IRQHandler+0x10>)
 8001d22:	f001 fda6 	bl	8003872 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	2000023c 	.word	0x2000023c

08001d30 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001d34:	4802      	ldr	r0, [pc, #8]	; (8001d40 <SPI1_IRQHandler+0x10>)
 8001d36:	f004 ffdb 	bl	8006cf0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	200002e0 	.word	0x200002e0

08001d44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
	return 1;
 8001d48:	2301      	movs	r3, #1
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <_kill>:

int _kill(int pid, int sig)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d5e:	f006 f925 	bl	8007fac <__errno>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2216      	movs	r2, #22
 8001d66:	601a      	str	r2, [r3, #0]
	return -1;
 8001d68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <_exit>:

void _exit (int status)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7ff ffe7 	bl	8001d54 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d86:	e7fe      	b.n	8001d86 <_exit+0x12>

08001d88 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]
 8001d98:	e00a      	b.n	8001db0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d9a:	f3af 8000 	nop.w
 8001d9e:	4601      	mov	r1, r0
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	1c5a      	adds	r2, r3, #1
 8001da4:	60ba      	str	r2, [r7, #8]
 8001da6:	b2ca      	uxtb	r2, r1
 8001da8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	3301      	adds	r3, #1
 8001dae:	617b      	str	r3, [r7, #20]
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	dbf0      	blt.n	8001d9a <_read+0x12>
	}

return len;
 8001db8:	687b      	ldr	r3, [r7, #4]
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3718      	adds	r7, #24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b086      	sub	sp, #24
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	60f8      	str	r0, [r7, #12]
 8001dca:	60b9      	str	r1, [r7, #8]
 8001dcc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	e009      	b.n	8001de8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	1c5a      	adds	r2, r3, #1
 8001dd8:	60ba      	str	r2, [r7, #8]
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	3301      	adds	r3, #1
 8001de6:	617b      	str	r3, [r7, #20]
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	dbf1      	blt.n	8001dd4 <_write+0x12>
	}
	return len;
 8001df0:	687b      	ldr	r3, [r7, #4]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3718      	adds	r7, #24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <_close>:

int _close(int file)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
	return -1;
 8001e02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
 8001e1a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e22:	605a      	str	r2, [r3, #4]
	return 0;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <_isatty>:

int _isatty(int file)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
	return 1;
 8001e3a:	2301      	movs	r3, #1
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
	return 0;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
	...

08001e64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e6c:	4a14      	ldr	r2, [pc, #80]	; (8001ec0 <_sbrk+0x5c>)
 8001e6e:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <_sbrk+0x60>)
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e78:	4b13      	ldr	r3, [pc, #76]	; (8001ec8 <_sbrk+0x64>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d102      	bne.n	8001e86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e80:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <_sbrk+0x64>)
 8001e82:	4a12      	ldr	r2, [pc, #72]	; (8001ecc <_sbrk+0x68>)
 8001e84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e86:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <_sbrk+0x64>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d207      	bcs.n	8001ea4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e94:	f006 f88a 	bl	8007fac <__errno>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	220c      	movs	r2, #12
 8001e9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea2:	e009      	b.n	8001eb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ea4:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <_sbrk+0x64>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eaa:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <_sbrk+0x64>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	4a05      	ldr	r2, [pc, #20]	; (8001ec8 <_sbrk+0x64>)
 8001eb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	20018000 	.word	0x20018000
 8001ec4:	00000400 	.word	0x00000400
 8001ec8:	200003d4 	.word	0x200003d4
 8001ecc:	200004c0 	.word	0x200004c0

08001ed0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ed4:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <SystemInit+0x20>)
 8001ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eda:	4a05      	ldr	r2, [pc, #20]	; (8001ef0 <SystemInit+0x20>)
 8001edc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ee0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001ee4:	bf00      	nop
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <MX_TIM17_Init>:

TIM_HandleTypeDef htim17;

/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001ef8:	4b0f      	ldr	r3, [pc, #60]	; (8001f38 <MX_TIM17_Init+0x44>)
 8001efa:	4a10      	ldr	r2, [pc, #64]	; (8001f3c <MX_TIM17_Init+0x48>)
 8001efc:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 10;
 8001efe:	4b0e      	ldr	r3, [pc, #56]	; (8001f38 <MX_TIM17_Init+0x44>)
 8001f00:	220a      	movs	r2, #10
 8001f02:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f04:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <MX_TIM17_Init+0x44>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 49999;
 8001f0a:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <MX_TIM17_Init+0x44>)
 8001f0c:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001f10:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f12:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <MX_TIM17_Init+0x44>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001f18:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <MX_TIM17_Init+0x44>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f1e:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <MX_TIM17_Init+0x44>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001f24:	4804      	ldr	r0, [pc, #16]	; (8001f38 <MX_TIM17_Init+0x44>)
 8001f26:	f005 f802 	bl	8006f2e <HAL_TIM_Base_Init>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8001f30:	f7ff fd7d 	bl	8001a2e <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001f34:	bf00      	nop
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	200003d8 	.word	0x200003d8
 8001f3c:	40014800 	.word	0x40014800

08001f40 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM17)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a0d      	ldr	r2, [pc, #52]	; (8001f84 <HAL_TIM_Base_MspInit+0x44>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d113      	bne.n	8001f7a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001f52:	4b0d      	ldr	r3, [pc, #52]	; (8001f88 <HAL_TIM_Base_MspInit+0x48>)
 8001f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f56:	4a0c      	ldr	r2, [pc, #48]	; (8001f88 <HAL_TIM_Base_MspInit+0x48>)
 8001f58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f5c:	6613      	str	r3, [r2, #96]	; 0x60
 8001f5e:	4b0a      	ldr	r3, [pc, #40]	; (8001f88 <HAL_TIM_Base_MspInit+0x48>)
 8001f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]

    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 2, 0);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2102      	movs	r1, #2
 8001f6e:	201a      	movs	r0, #26
 8001f70:	f000 fa71 	bl	8002456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001f74:	201a      	movs	r0, #26
 8001f76:	f000 fa8a 	bl	800248e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001f7a:	bf00      	nop
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40014800 	.word	0x40014800
 8001f88:	40021000 	.word	0x40021000

08001f8c <HAL_TIM_PeriodElapsedCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
	if (htim == &htim17)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a14      	ldr	r2, [pc, #80]	; (8001fe8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d120      	bne.n	8001fde <HAL_TIM_PeriodElapsedCallback+0x52>
	{
	//	HAL_GPIO_WritePin(Timertest_GPIO_Port, Timertest_Pin, RESET);
		if (temp_wait == 1)
 8001f9c:	4b13      	ldr	r3, [pc, #76]	; (8001fec <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d10c      	bne.n	8001fbe <HAL_TIM_PeriodElapsedCallback+0x32>
		{
		    temp_wait++;
 8001fa4:	4b11      	ldr	r3, [pc, #68]	; (8001fec <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	4b0f      	ldr	r3, [pc, #60]	; (8001fec <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001fae:	701a      	strb	r2, [r3, #0]
			BMP_State = BMP_State_Temp_ReadResult;
 8001fb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ff0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim17);
 8001fb6:	480c      	ldr	r0, [pc, #48]	; (8001fe8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001fb8:	f005 f880 	bl	80070bc <HAL_TIM_Base_Stop_IT>
			pres_wait++;
			BMP_State = BMP_State_Pressure_ReadResult;
			HAL_TIM_Base_Stop_IT(&htim17);
		}
	}
}
 8001fbc:	e00f      	b.n	8001fde <HAL_TIM_PeriodElapsedCallback+0x52>
		else if(pres_wait == 1)
 8001fbe:	4b0d      	ldr	r3, [pc, #52]	; (8001ff4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d10b      	bne.n	8001fde <HAL_TIM_PeriodElapsedCallback+0x52>
			pres_wait++;
 8001fc6:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	4b09      	ldr	r3, [pc, #36]	; (8001ff4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001fd0:	701a      	strb	r2, [r3, #0]
			BMP_State = BMP_State_Pressure_ReadResult;
 8001fd2:	4b07      	ldr	r3, [pc, #28]	; (8001ff0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001fd4:	2206      	movs	r2, #6
 8001fd6:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim17);
 8001fd8:	4803      	ldr	r0, [pc, #12]	; (8001fe8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001fda:	f005 f86f 	bl	80070bc <HAL_TIM_Base_Stop_IT>
}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	200003d8 	.word	0x200003d8
 8001fec:	2000022e 	.word	0x2000022e
 8001ff0:	20000230 	.word	0x20000230
 8001ff4:	2000022f 	.word	0x2000022f

08001ff8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ffc:	4b14      	ldr	r3, [pc, #80]	; (8002050 <MX_USART2_UART_Init+0x58>)
 8001ffe:	4a15      	ldr	r2, [pc, #84]	; (8002054 <MX_USART2_UART_Init+0x5c>)
 8002000:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002002:	4b13      	ldr	r3, [pc, #76]	; (8002050 <MX_USART2_UART_Init+0x58>)
 8002004:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002008:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800200a:	4b11      	ldr	r3, [pc, #68]	; (8002050 <MX_USART2_UART_Init+0x58>)
 800200c:	2200      	movs	r2, #0
 800200e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002010:	4b0f      	ldr	r3, [pc, #60]	; (8002050 <MX_USART2_UART_Init+0x58>)
 8002012:	2200      	movs	r2, #0
 8002014:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002016:	4b0e      	ldr	r3, [pc, #56]	; (8002050 <MX_USART2_UART_Init+0x58>)
 8002018:	2200      	movs	r2, #0
 800201a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800201c:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <MX_USART2_UART_Init+0x58>)
 800201e:	220c      	movs	r2, #12
 8002020:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002022:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <MX_USART2_UART_Init+0x58>)
 8002024:	2200      	movs	r2, #0
 8002026:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002028:	4b09      	ldr	r3, [pc, #36]	; (8002050 <MX_USART2_UART_Init+0x58>)
 800202a:	2200      	movs	r2, #0
 800202c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800202e:	4b08      	ldr	r3, [pc, #32]	; (8002050 <MX_USART2_UART_Init+0x58>)
 8002030:	2200      	movs	r2, #0
 8002032:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002034:	4b06      	ldr	r3, [pc, #24]	; (8002050 <MX_USART2_UART_Init+0x58>)
 8002036:	2200      	movs	r2, #0
 8002038:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800203a:	4805      	ldr	r0, [pc, #20]	; (8002050 <MX_USART2_UART_Init+0x58>)
 800203c:	f005 fa6c 	bl	8007518 <HAL_UART_Init>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002046:	f7ff fcf2 	bl	8001a2e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000424 	.word	0x20000424
 8002054:	40004400 	.word	0x40004400

08002058 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b0ac      	sub	sp, #176	; 0xb0
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002060:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	60da      	str	r2, [r3, #12]
 800206e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002070:	f107 0314 	add.w	r3, r7, #20
 8002074:	2288      	movs	r2, #136	; 0x88
 8002076:	2100      	movs	r1, #0
 8002078:	4618      	mov	r0, r3
 800207a:	f005 ffc1 	bl	8008000 <memset>
  if(uartHandle->Instance==USART2)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a21      	ldr	r2, [pc, #132]	; (8002108 <HAL_UART_MspInit+0xb0>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d13b      	bne.n	8002100 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002088:	2302      	movs	r3, #2
 800208a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800208c:	2300      	movs	r3, #0
 800208e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002090:	f107 0314 	add.w	r3, r7, #20
 8002094:	4618      	mov	r0, r3
 8002096:	f004 f8cb 	bl	8006230 <HAL_RCCEx_PeriphCLKConfig>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80020a0:	f7ff fcc5 	bl	8001a2e <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020a4:	4b19      	ldr	r3, [pc, #100]	; (800210c <HAL_UART_MspInit+0xb4>)
 80020a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a8:	4a18      	ldr	r2, [pc, #96]	; (800210c <HAL_UART_MspInit+0xb4>)
 80020aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020ae:	6593      	str	r3, [r2, #88]	; 0x58
 80020b0:	4b16      	ldr	r3, [pc, #88]	; (800210c <HAL_UART_MspInit+0xb4>)
 80020b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b8:	613b      	str	r3, [r7, #16]
 80020ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020bc:	4b13      	ldr	r3, [pc, #76]	; (800210c <HAL_UART_MspInit+0xb4>)
 80020be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c0:	4a12      	ldr	r2, [pc, #72]	; (800210c <HAL_UART_MspInit+0xb4>)
 80020c2:	f043 0301 	orr.w	r3, r3, #1
 80020c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020c8:	4b10      	ldr	r3, [pc, #64]	; (800210c <HAL_UART_MspInit+0xb4>)
 80020ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80020d4:	230c      	movs	r3, #12
 80020d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020da:	2302      	movs	r3, #2
 80020dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e6:	2303      	movs	r3, #3
 80020e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020ec:	2307      	movs	r3, #7
 80020ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80020f6:	4619      	mov	r1, r3
 80020f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020fc:	f000 fc28 	bl	8002950 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002100:	bf00      	nop
 8002102:	37b0      	adds	r7, #176	; 0xb0
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40004400 	.word	0x40004400
 800210c:	40021000 	.word	0x40021000

08002110 <USART_TransmitBMPValue>:
    sprintf(buffer, "Compass: x = %d,%02d   y = %d,%02d  z = %.d,%02d \r\n", (*x) / 100, abs((*x) % 100), (*y) / 1000, abs((*y) % 100) , (*z) / 100, abs((*z) % 100));
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
}

void USART_TransmitBMPValue(int32_t* pres)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b0b4      	sub	sp, #208	; 0xd0
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
    char buffer[200];
    sprintf(buffer, "Pres:%ld \r\n", *pres);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	f107 0308 	add.w	r3, r7, #8
 8002120:	490a      	ldr	r1, [pc, #40]	; (800214c <USART_TransmitBMPValue+0x3c>)
 8002122:	4618      	mov	r0, r3
 8002124:	f006 fbde 	bl	80088e4 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8002128:	f107 0308 	add.w	r3, r7, #8
 800212c:	4618      	mov	r0, r3
 800212e:	f7fe f84f 	bl	80001d0 <strlen>
 8002132:	4603      	mov	r3, r0
 8002134:	b29a      	uxth	r2, r3
 8002136:	f107 0108 	add.w	r1, r7, #8
 800213a:	f04f 33ff 	mov.w	r3, #4294967295
 800213e:	4804      	ldr	r0, [pc, #16]	; (8002150 <USART_TransmitBMPValue+0x40>)
 8002140:	f005 fa38 	bl	80075b4 <HAL_UART_Transmit>
}
 8002144:	bf00      	nop
 8002146:	37d0      	adds	r7, #208	; 0xd0
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	0800ae8c 	.word	0x0800ae8c
 8002150:	20000424 	.word	0x20000424

08002154 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002154:	f8df d034 	ldr.w	sp, [pc, #52]	; 800218c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002158:	f7ff feba 	bl	8001ed0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800215c:	480c      	ldr	r0, [pc, #48]	; (8002190 <LoopForever+0x6>)
  ldr r1, =_edata
 800215e:	490d      	ldr	r1, [pc, #52]	; (8002194 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002160:	4a0d      	ldr	r2, [pc, #52]	; (8002198 <LoopForever+0xe>)
  movs r3, #0
 8002162:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002164:	e002      	b.n	800216c <LoopCopyDataInit>

08002166 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002166:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002168:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800216a:	3304      	adds	r3, #4

0800216c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800216c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800216e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002170:	d3f9      	bcc.n	8002166 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002172:	4a0a      	ldr	r2, [pc, #40]	; (800219c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002174:	4c0a      	ldr	r4, [pc, #40]	; (80021a0 <LoopForever+0x16>)
  movs r3, #0
 8002176:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002178:	e001      	b.n	800217e <LoopFillZerobss>

0800217a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800217a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800217c:	3204      	adds	r2, #4

0800217e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800217e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002180:	d3fb      	bcc.n	800217a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002182:	f005 ff19 	bl	8007fb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002186:	f7ff fbcf 	bl	8001928 <main>

0800218a <LoopForever>:

LoopForever:
    b LoopForever
 800218a:	e7fe      	b.n	800218a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800218c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002190:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002194:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002198:	0800b2cc 	.word	0x0800b2cc
  ldr r2, =_sbss
 800219c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80021a0:	200004bc 	.word	0x200004bc

080021a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021a4:	e7fe      	b.n	80021a4 <ADC1_2_IRQHandler>
	...

080021a8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021ae:	2300      	movs	r3, #0
 80021b0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021b2:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <HAL_Init+0x3c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a0b      	ldr	r2, [pc, #44]	; (80021e4 <HAL_Init+0x3c>)
 80021b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021bc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021be:	2003      	movs	r0, #3
 80021c0:	f000 f93e 	bl	8002440 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021c4:	2000      	movs	r0, #0
 80021c6:	f000 f80f 	bl	80021e8 <HAL_InitTick>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d002      	beq.n	80021d6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	71fb      	strb	r3, [r7, #7]
 80021d4:	e001      	b.n	80021da <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021d6:	f7ff fd23 	bl	8001c20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021da:	79fb      	ldrb	r3, [r7, #7]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40022000 	.word	0x40022000

080021e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80021f0:	2300      	movs	r3, #0
 80021f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80021f4:	4b17      	ldr	r3, [pc, #92]	; (8002254 <HAL_InitTick+0x6c>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d023      	beq.n	8002244 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80021fc:	4b16      	ldr	r3, [pc, #88]	; (8002258 <HAL_InitTick+0x70>)
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	4b14      	ldr	r3, [pc, #80]	; (8002254 <HAL_InitTick+0x6c>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	4619      	mov	r1, r3
 8002206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800220a:	fbb3 f3f1 	udiv	r3, r3, r1
 800220e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002212:	4618      	mov	r0, r3
 8002214:	f000 f949 	bl	80024aa <HAL_SYSTICK_Config>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10f      	bne.n	800223e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b0f      	cmp	r3, #15
 8002222:	d809      	bhi.n	8002238 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002224:	2200      	movs	r2, #0
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	f04f 30ff 	mov.w	r0, #4294967295
 800222c:	f000 f913 	bl	8002456 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002230:	4a0a      	ldr	r2, [pc, #40]	; (800225c <HAL_InitTick+0x74>)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6013      	str	r3, [r2, #0]
 8002236:	e007      	b.n	8002248 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	73fb      	strb	r3, [r7, #15]
 800223c:	e004      	b.n	8002248 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	73fb      	strb	r3, [r7, #15]
 8002242:	e001      	b.n	8002248 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002248:	7bfb      	ldrb	r3, [r7, #15]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	20000008 	.word	0x20000008
 8002258:	20000000 	.word	0x20000000
 800225c:	20000004 	.word	0x20000004

08002260 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002264:	4b06      	ldr	r3, [pc, #24]	; (8002280 <HAL_IncTick+0x20>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	461a      	mov	r2, r3
 800226a:	4b06      	ldr	r3, [pc, #24]	; (8002284 <HAL_IncTick+0x24>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4413      	add	r3, r2
 8002270:	4a04      	ldr	r2, [pc, #16]	; (8002284 <HAL_IncTick+0x24>)
 8002272:	6013      	str	r3, [r2, #0]
}
 8002274:	bf00      	nop
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	20000008 	.word	0x20000008
 8002284:	200004a8 	.word	0x200004a8

08002288 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  return uwTick;
 800228c:	4b03      	ldr	r3, [pc, #12]	; (800229c <HAL_GetTick+0x14>)
 800228e:	681b      	ldr	r3, [r3, #0]
}
 8002290:	4618      	mov	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	200004a8 	.word	0x200004a8

080022a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f003 0307 	and.w	r3, r3, #7
 80022ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022b0:	4b0c      	ldr	r3, [pc, #48]	; (80022e4 <__NVIC_SetPriorityGrouping+0x44>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022b6:	68ba      	ldr	r2, [r7, #8]
 80022b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022bc:	4013      	ands	r3, r2
 80022be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022d2:	4a04      	ldr	r2, [pc, #16]	; (80022e4 <__NVIC_SetPriorityGrouping+0x44>)
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	60d3      	str	r3, [r2, #12]
}
 80022d8:	bf00      	nop
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	e000ed00 	.word	0xe000ed00

080022e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022ec:	4b04      	ldr	r3, [pc, #16]	; (8002300 <__NVIC_GetPriorityGrouping+0x18>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	0a1b      	lsrs	r3, r3, #8
 80022f2:	f003 0307 	and.w	r3, r3, #7
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	e000ed00 	.word	0xe000ed00

08002304 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800230e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002312:	2b00      	cmp	r3, #0
 8002314:	db0b      	blt.n	800232e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	f003 021f 	and.w	r2, r3, #31
 800231c:	4907      	ldr	r1, [pc, #28]	; (800233c <__NVIC_EnableIRQ+0x38>)
 800231e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002322:	095b      	lsrs	r3, r3, #5
 8002324:	2001      	movs	r0, #1
 8002326:	fa00 f202 	lsl.w	r2, r0, r2
 800232a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	e000e100 	.word	0xe000e100

08002340 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	6039      	str	r1, [r7, #0]
 800234a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800234c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002350:	2b00      	cmp	r3, #0
 8002352:	db0a      	blt.n	800236a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	b2da      	uxtb	r2, r3
 8002358:	490c      	ldr	r1, [pc, #48]	; (800238c <__NVIC_SetPriority+0x4c>)
 800235a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235e:	0112      	lsls	r2, r2, #4
 8002360:	b2d2      	uxtb	r2, r2
 8002362:	440b      	add	r3, r1
 8002364:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002368:	e00a      	b.n	8002380 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	b2da      	uxtb	r2, r3
 800236e:	4908      	ldr	r1, [pc, #32]	; (8002390 <__NVIC_SetPriority+0x50>)
 8002370:	79fb      	ldrb	r3, [r7, #7]
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	3b04      	subs	r3, #4
 8002378:	0112      	lsls	r2, r2, #4
 800237a:	b2d2      	uxtb	r2, r2
 800237c:	440b      	add	r3, r1
 800237e:	761a      	strb	r2, [r3, #24]
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	e000e100 	.word	0xe000e100
 8002390:	e000ed00 	.word	0xe000ed00

08002394 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002394:	b480      	push	{r7}
 8002396:	b089      	sub	sp, #36	; 0x24
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f003 0307 	and.w	r3, r3, #7
 80023a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	f1c3 0307 	rsb	r3, r3, #7
 80023ae:	2b04      	cmp	r3, #4
 80023b0:	bf28      	it	cs
 80023b2:	2304      	movcs	r3, #4
 80023b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	3304      	adds	r3, #4
 80023ba:	2b06      	cmp	r3, #6
 80023bc:	d902      	bls.n	80023c4 <NVIC_EncodePriority+0x30>
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	3b03      	subs	r3, #3
 80023c2:	e000      	b.n	80023c6 <NVIC_EncodePriority+0x32>
 80023c4:	2300      	movs	r3, #0
 80023c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c8:	f04f 32ff 	mov.w	r2, #4294967295
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	43da      	mvns	r2, r3
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	401a      	ands	r2, r3
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023dc:	f04f 31ff 	mov.w	r1, #4294967295
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	fa01 f303 	lsl.w	r3, r1, r3
 80023e6:	43d9      	mvns	r1, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ec:	4313      	orrs	r3, r2
         );
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3724      	adds	r7, #36	; 0x24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
	...

080023fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3b01      	subs	r3, #1
 8002408:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800240c:	d301      	bcc.n	8002412 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800240e:	2301      	movs	r3, #1
 8002410:	e00f      	b.n	8002432 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002412:	4a0a      	ldr	r2, [pc, #40]	; (800243c <SysTick_Config+0x40>)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3b01      	subs	r3, #1
 8002418:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800241a:	210f      	movs	r1, #15
 800241c:	f04f 30ff 	mov.w	r0, #4294967295
 8002420:	f7ff ff8e 	bl	8002340 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002424:	4b05      	ldr	r3, [pc, #20]	; (800243c <SysTick_Config+0x40>)
 8002426:	2200      	movs	r2, #0
 8002428:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800242a:	4b04      	ldr	r3, [pc, #16]	; (800243c <SysTick_Config+0x40>)
 800242c:	2207      	movs	r2, #7
 800242e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	e000e010 	.word	0xe000e010

08002440 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f7ff ff29 	bl	80022a0 <__NVIC_SetPriorityGrouping>
}
 800244e:	bf00      	nop
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b086      	sub	sp, #24
 800245a:	af00      	add	r7, sp, #0
 800245c:	4603      	mov	r3, r0
 800245e:	60b9      	str	r1, [r7, #8]
 8002460:	607a      	str	r2, [r7, #4]
 8002462:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002464:	2300      	movs	r3, #0
 8002466:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002468:	f7ff ff3e 	bl	80022e8 <__NVIC_GetPriorityGrouping>
 800246c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	68b9      	ldr	r1, [r7, #8]
 8002472:	6978      	ldr	r0, [r7, #20]
 8002474:	f7ff ff8e 	bl	8002394 <NVIC_EncodePriority>
 8002478:	4602      	mov	r2, r0
 800247a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800247e:	4611      	mov	r1, r2
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff ff5d 	bl	8002340 <__NVIC_SetPriority>
}
 8002486:	bf00      	nop
 8002488:	3718      	adds	r7, #24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b082      	sub	sp, #8
 8002492:	af00      	add	r7, sp, #0
 8002494:	4603      	mov	r3, r0
 8002496:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff ff31 	bl	8002304 <__NVIC_EnableIRQ>
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7ff ffa2 	bl	80023fc <SysTick_Config>
 80024b8:	4603      	mov	r3, r0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e098      	b.n	8002608 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	461a      	mov	r2, r3
 80024dc:	4b4d      	ldr	r3, [pc, #308]	; (8002614 <HAL_DMA_Init+0x150>)
 80024de:	429a      	cmp	r2, r3
 80024e0:	d80f      	bhi.n	8002502 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	461a      	mov	r2, r3
 80024e8:	4b4b      	ldr	r3, [pc, #300]	; (8002618 <HAL_DMA_Init+0x154>)
 80024ea:	4413      	add	r3, r2
 80024ec:	4a4b      	ldr	r2, [pc, #300]	; (800261c <HAL_DMA_Init+0x158>)
 80024ee:	fba2 2303 	umull	r2, r3, r2, r3
 80024f2:	091b      	lsrs	r3, r3, #4
 80024f4:	009a      	lsls	r2, r3, #2
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a48      	ldr	r2, [pc, #288]	; (8002620 <HAL_DMA_Init+0x15c>)
 80024fe:	641a      	str	r2, [r3, #64]	; 0x40
 8002500:	e00e      	b.n	8002520 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	461a      	mov	r2, r3
 8002508:	4b46      	ldr	r3, [pc, #280]	; (8002624 <HAL_DMA_Init+0x160>)
 800250a:	4413      	add	r3, r2
 800250c:	4a43      	ldr	r2, [pc, #268]	; (800261c <HAL_DMA_Init+0x158>)
 800250e:	fba2 2303 	umull	r2, r3, r2, r3
 8002512:	091b      	lsrs	r3, r3, #4
 8002514:	009a      	lsls	r2, r3, #2
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a42      	ldr	r2, [pc, #264]	; (8002628 <HAL_DMA_Init+0x164>)
 800251e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2202      	movs	r2, #2
 8002524:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800253a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002544:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002550:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800255c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	4313      	orrs	r3, r2
 8002568:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800257a:	d039      	beq.n	80025f0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002580:	4a27      	ldr	r2, [pc, #156]	; (8002620 <HAL_DMA_Init+0x15c>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d11a      	bne.n	80025bc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002586:	4b29      	ldr	r3, [pc, #164]	; (800262c <HAL_DMA_Init+0x168>)
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258e:	f003 031c 	and.w	r3, r3, #28
 8002592:	210f      	movs	r1, #15
 8002594:	fa01 f303 	lsl.w	r3, r1, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	4924      	ldr	r1, [pc, #144]	; (800262c <HAL_DMA_Init+0x168>)
 800259c:	4013      	ands	r3, r2
 800259e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80025a0:	4b22      	ldr	r3, [pc, #136]	; (800262c <HAL_DMA_Init+0x168>)
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6859      	ldr	r1, [r3, #4]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ac:	f003 031c 	and.w	r3, r3, #28
 80025b0:	fa01 f303 	lsl.w	r3, r1, r3
 80025b4:	491d      	ldr	r1, [pc, #116]	; (800262c <HAL_DMA_Init+0x168>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	600b      	str	r3, [r1, #0]
 80025ba:	e019      	b.n	80025f0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80025bc:	4b1c      	ldr	r3, [pc, #112]	; (8002630 <HAL_DMA_Init+0x16c>)
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c4:	f003 031c 	and.w	r3, r3, #28
 80025c8:	210f      	movs	r1, #15
 80025ca:	fa01 f303 	lsl.w	r3, r1, r3
 80025ce:	43db      	mvns	r3, r3
 80025d0:	4917      	ldr	r1, [pc, #92]	; (8002630 <HAL_DMA_Init+0x16c>)
 80025d2:	4013      	ands	r3, r2
 80025d4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80025d6:	4b16      	ldr	r3, [pc, #88]	; (8002630 <HAL_DMA_Init+0x16c>)
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6859      	ldr	r1, [r3, #4]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e2:	f003 031c 	and.w	r3, r3, #28
 80025e6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ea:	4911      	ldr	r1, [pc, #68]	; (8002630 <HAL_DMA_Init+0x16c>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	40020407 	.word	0x40020407
 8002618:	bffdfff8 	.word	0xbffdfff8
 800261c:	cccccccd 	.word	0xcccccccd
 8002620:	40020000 	.word	0x40020000
 8002624:	bffdfbf8 	.word	0xbffdfbf8
 8002628:	40020400 	.word	0x40020400
 800262c:	400200a8 	.word	0x400200a8
 8002630:	400204a8 	.word	0x400204a8

08002634 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
 8002640:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002642:	2300      	movs	r3, #0
 8002644:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800264c:	2b01      	cmp	r3, #1
 800264e:	d101      	bne.n	8002654 <HAL_DMA_Start_IT+0x20>
 8002650:	2302      	movs	r3, #2
 8002652:	e04b      	b.n	80026ec <HAL_DMA_Start_IT+0xb8>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b01      	cmp	r3, #1
 8002666:	d13a      	bne.n	80026de <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2202      	movs	r2, #2
 800266c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 0201 	bic.w	r2, r2, #1
 8002684:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	68b9      	ldr	r1, [r7, #8]
 800268c:	68f8      	ldr	r0, [r7, #12]
 800268e:	f000 f92f 	bl	80028f0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	2b00      	cmp	r3, #0
 8002698:	d008      	beq.n	80026ac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f042 020e 	orr.w	r2, r2, #14
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	e00f      	b.n	80026cc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 0204 	bic.w	r2, r2, #4
 80026ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f042 020a 	orr.w	r2, r2, #10
 80026ca:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f042 0201 	orr.w	r2, r2, #1
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	e005      	b.n	80026ea <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80026e6:	2302      	movs	r3, #2
 80026e8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80026ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026fc:	2300      	movs	r3, #0
 80026fe:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d005      	beq.n	8002718 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2204      	movs	r2, #4
 8002710:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	73fb      	strb	r3, [r7, #15]
 8002716:	e029      	b.n	800276c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 020e 	bic.w	r2, r2, #14
 8002726:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 0201 	bic.w	r2, r2, #1
 8002736:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273c:	f003 021c 	and.w	r2, r3, #28
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002744:	2101      	movs	r1, #1
 8002746:	fa01 f202 	lsl.w	r2, r1, r2
 800274a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002760:	2b00      	cmp	r3, #0
 8002762:	d003      	beq.n	800276c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	4798      	blx	r3
    }
  }
  return status;
 800276c:	7bfb      	ldrb	r3, [r7, #15]
}
 800276e:	4618      	mov	r0, r3
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b084      	sub	sp, #16
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002792:	f003 031c 	and.w	r3, r3, #28
 8002796:	2204      	movs	r2, #4
 8002798:	409a      	lsls	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	4013      	ands	r3, r2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d026      	beq.n	80027f0 <HAL_DMA_IRQHandler+0x7a>
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	f003 0304 	and.w	r3, r3, #4
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d021      	beq.n	80027f0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0320 	and.w	r3, r3, #32
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d107      	bne.n	80027ca <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 0204 	bic.w	r2, r2, #4
 80027c8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ce:	f003 021c 	and.w	r2, r3, #28
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	2104      	movs	r1, #4
 80027d8:	fa01 f202 	lsl.w	r2, r1, r2
 80027dc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d071      	beq.n	80028ca <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80027ee:	e06c      	b.n	80028ca <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f4:	f003 031c 	and.w	r3, r3, #28
 80027f8:	2202      	movs	r2, #2
 80027fa:	409a      	lsls	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4013      	ands	r3, r2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d02e      	beq.n	8002862 <HAL_DMA_IRQHandler+0xec>
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d029      	beq.n	8002862 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0320 	and.w	r3, r3, #32
 8002818:	2b00      	cmp	r3, #0
 800281a:	d10b      	bne.n	8002834 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 020a 	bic.w	r2, r2, #10
 800282a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002838:	f003 021c 	and.w	r2, r3, #28
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	2102      	movs	r1, #2
 8002842:	fa01 f202 	lsl.w	r2, r1, r2
 8002846:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002854:	2b00      	cmp	r3, #0
 8002856:	d038      	beq.n	80028ca <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002860:	e033      	b.n	80028ca <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002866:	f003 031c 	and.w	r3, r3, #28
 800286a:	2208      	movs	r2, #8
 800286c:	409a      	lsls	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	4013      	ands	r3, r2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d02a      	beq.n	80028cc <HAL_DMA_IRQHandler+0x156>
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	f003 0308 	and.w	r3, r3, #8
 800287c:	2b00      	cmp	r3, #0
 800287e:	d025      	beq.n	80028cc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 020e 	bic.w	r2, r2, #14
 800288e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002894:	f003 021c 	and.w	r2, r3, #28
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289c:	2101      	movs	r1, #1
 800289e:	fa01 f202 	lsl.w	r2, r1, r2
 80028a2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d004      	beq.n	80028cc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80028ca:	bf00      	nop
 80028cc:	bf00      	nop
}
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80028e2:	b2db      	uxtb	r3, r3
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
 80028fc:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002902:	f003 021c 	and.w	r2, r3, #28
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	2101      	movs	r1, #1
 800290c:	fa01 f202 	lsl.w	r2, r1, r2
 8002910:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	2b10      	cmp	r3, #16
 8002920:	d108      	bne.n	8002934 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68ba      	ldr	r2, [r7, #8]
 8002930:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002932:	e007      	b.n	8002944 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68ba      	ldr	r2, [r7, #8]
 800293a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	60da      	str	r2, [r3, #12]
}
 8002944:	bf00      	nop
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002950:	b480      	push	{r7}
 8002952:	b087      	sub	sp, #28
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800295a:	2300      	movs	r3, #0
 800295c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800295e:	e17f      	b.n	8002c60 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	2101      	movs	r1, #1
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	fa01 f303 	lsl.w	r3, r1, r3
 800296c:	4013      	ands	r3, r2
 800296e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2b00      	cmp	r3, #0
 8002974:	f000 8171 	beq.w	8002c5a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f003 0303 	and.w	r3, r3, #3
 8002980:	2b01      	cmp	r3, #1
 8002982:	d005      	beq.n	8002990 <HAL_GPIO_Init+0x40>
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f003 0303 	and.w	r3, r3, #3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d130      	bne.n	80029f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	2203      	movs	r2, #3
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	43db      	mvns	r3, r3
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	4013      	ands	r3, r2
 80029a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	68da      	ldr	r2, [r3, #12]
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029c6:	2201      	movs	r2, #1
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	43db      	mvns	r3, r3
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	4013      	ands	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	091b      	lsrs	r3, r3, #4
 80029dc:	f003 0201 	and.w	r2, r3, #1
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f003 0303 	and.w	r3, r3, #3
 80029fa:	2b03      	cmp	r3, #3
 80029fc:	d118      	bne.n	8002a30 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002a04:	2201      	movs	r2, #1
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	4013      	ands	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	08db      	lsrs	r3, r3, #3
 8002a1a:	f003 0201 	and.w	r2, r3, #1
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 0303 	and.w	r3, r3, #3
 8002a38:	2b03      	cmp	r3, #3
 8002a3a:	d017      	beq.n	8002a6c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	2203      	movs	r2, #3
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	4013      	ands	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f003 0303 	and.w	r3, r3, #3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d123      	bne.n	8002ac0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	08da      	lsrs	r2, r3, #3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3208      	adds	r2, #8
 8002a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a84:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	220f      	movs	r2, #15
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	43db      	mvns	r3, r3
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	691a      	ldr	r2, [r3, #16]
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	08da      	lsrs	r2, r3, #3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	3208      	adds	r2, #8
 8002aba:	6939      	ldr	r1, [r7, #16]
 8002abc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	2203      	movs	r2, #3
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f003 0203 	and.w	r2, r3, #3
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 80ac 	beq.w	8002c5a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b02:	4b5f      	ldr	r3, [pc, #380]	; (8002c80 <HAL_GPIO_Init+0x330>)
 8002b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b06:	4a5e      	ldr	r2, [pc, #376]	; (8002c80 <HAL_GPIO_Init+0x330>)
 8002b08:	f043 0301 	orr.w	r3, r3, #1
 8002b0c:	6613      	str	r3, [r2, #96]	; 0x60
 8002b0e:	4b5c      	ldr	r3, [pc, #368]	; (8002c80 <HAL_GPIO_Init+0x330>)
 8002b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	60bb      	str	r3, [r7, #8]
 8002b18:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b1a:	4a5a      	ldr	r2, [pc, #360]	; (8002c84 <HAL_GPIO_Init+0x334>)
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	089b      	lsrs	r3, r3, #2
 8002b20:	3302      	adds	r3, #2
 8002b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b26:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	f003 0303 	and.w	r3, r3, #3
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	220f      	movs	r2, #15
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	43db      	mvns	r3, r3
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b44:	d025      	beq.n	8002b92 <HAL_GPIO_Init+0x242>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a4f      	ldr	r2, [pc, #316]	; (8002c88 <HAL_GPIO_Init+0x338>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d01f      	beq.n	8002b8e <HAL_GPIO_Init+0x23e>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a4e      	ldr	r2, [pc, #312]	; (8002c8c <HAL_GPIO_Init+0x33c>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d019      	beq.n	8002b8a <HAL_GPIO_Init+0x23a>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a4d      	ldr	r2, [pc, #308]	; (8002c90 <HAL_GPIO_Init+0x340>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d013      	beq.n	8002b86 <HAL_GPIO_Init+0x236>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a4c      	ldr	r2, [pc, #304]	; (8002c94 <HAL_GPIO_Init+0x344>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d00d      	beq.n	8002b82 <HAL_GPIO_Init+0x232>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a4b      	ldr	r2, [pc, #300]	; (8002c98 <HAL_GPIO_Init+0x348>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d007      	beq.n	8002b7e <HAL_GPIO_Init+0x22e>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a4a      	ldr	r2, [pc, #296]	; (8002c9c <HAL_GPIO_Init+0x34c>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d101      	bne.n	8002b7a <HAL_GPIO_Init+0x22a>
 8002b76:	2306      	movs	r3, #6
 8002b78:	e00c      	b.n	8002b94 <HAL_GPIO_Init+0x244>
 8002b7a:	2307      	movs	r3, #7
 8002b7c:	e00a      	b.n	8002b94 <HAL_GPIO_Init+0x244>
 8002b7e:	2305      	movs	r3, #5
 8002b80:	e008      	b.n	8002b94 <HAL_GPIO_Init+0x244>
 8002b82:	2304      	movs	r3, #4
 8002b84:	e006      	b.n	8002b94 <HAL_GPIO_Init+0x244>
 8002b86:	2303      	movs	r3, #3
 8002b88:	e004      	b.n	8002b94 <HAL_GPIO_Init+0x244>
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	e002      	b.n	8002b94 <HAL_GPIO_Init+0x244>
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e000      	b.n	8002b94 <HAL_GPIO_Init+0x244>
 8002b92:	2300      	movs	r3, #0
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	f002 0203 	and.w	r2, r2, #3
 8002b9a:	0092      	lsls	r2, r2, #2
 8002b9c:	4093      	lsls	r3, r2
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ba4:	4937      	ldr	r1, [pc, #220]	; (8002c84 <HAL_GPIO_Init+0x334>)
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	089b      	lsrs	r3, r3, #2
 8002baa:	3302      	adds	r3, #2
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002bb2:	4b3b      	ldr	r3, [pc, #236]	; (8002ca0 <HAL_GPIO_Init+0x350>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002bd6:	4a32      	ldr	r2, [pc, #200]	; (8002ca0 <HAL_GPIO_Init+0x350>)
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002bdc:	4b30      	ldr	r3, [pc, #192]	; (8002ca0 <HAL_GPIO_Init+0x350>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	43db      	mvns	r3, r3
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	4013      	ands	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d003      	beq.n	8002c00 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c00:	4a27      	ldr	r2, [pc, #156]	; (8002ca0 <HAL_GPIO_Init+0x350>)
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c06:	4b26      	ldr	r3, [pc, #152]	; (8002ca0 <HAL_GPIO_Init+0x350>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	43db      	mvns	r3, r3
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	4013      	ands	r3, r2
 8002c14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c2a:	4a1d      	ldr	r2, [pc, #116]	; (8002ca0 <HAL_GPIO_Init+0x350>)
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002c30:	4b1b      	ldr	r3, [pc, #108]	; (8002ca0 <HAL_GPIO_Init+0x350>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d003      	beq.n	8002c54 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c54:	4a12      	ldr	r2, [pc, #72]	; (8002ca0 <HAL_GPIO_Init+0x350>)
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	fa22 f303 	lsr.w	r3, r2, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f47f ae78 	bne.w	8002960 <HAL_GPIO_Init+0x10>
  }
}
 8002c70:	bf00      	nop
 8002c72:	bf00      	nop
 8002c74:	371c      	adds	r7, #28
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	40021000 	.word	0x40021000
 8002c84:	40010000 	.word	0x40010000
 8002c88:	48000400 	.word	0x48000400
 8002c8c:	48000800 	.word	0x48000800
 8002c90:	48000c00 	.word	0x48000c00
 8002c94:	48001000 	.word	0x48001000
 8002c98:	48001400 	.word	0x48001400
 8002c9c:	48001800 	.word	0x48001800
 8002ca0:	40010400 	.word	0x40010400

08002ca4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	460b      	mov	r3, r1
 8002cae:	807b      	strh	r3, [r7, #2]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cb4:	787b      	ldrb	r3, [r7, #1]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cba:	887a      	ldrh	r2, [r7, #2]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002cc0:	e002      	b.n	8002cc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002cc2:	887a      	ldrh	r2, [r7, #2]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002cde:	4b08      	ldr	r3, [pc, #32]	; (8002d00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ce0:	695a      	ldr	r2, [r3, #20]
 8002ce2:	88fb      	ldrh	r3, [r7, #6]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d006      	beq.n	8002cf8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002cea:	4a05      	ldr	r2, [pc, #20]	; (8002d00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cec:	88fb      	ldrh	r3, [r7, #6]
 8002cee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002cf0:	88fb      	ldrh	r3, [r7, #6]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fe fcc2 	bl	800167c <HAL_GPIO_EXTI_Callback>
  }
}
 8002cf8:	bf00      	nop
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	40010400 	.word	0x40010400

08002d04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e081      	b.n	8002e1a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d106      	bne.n	8002d30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f7fe fcfa 	bl	8001724 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2224      	movs	r2, #36	; 0x24
 8002d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 0201 	bic.w	r2, r2, #1
 8002d46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d54:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d64:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d107      	bne.n	8002d7e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689a      	ldr	r2, [r3, #8]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d7a:	609a      	str	r2, [r3, #8]
 8002d7c:	e006      	b.n	8002d8c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689a      	ldr	r2, [r3, #8]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002d8a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d104      	bne.n	8002d9e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d9c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6812      	ldr	r2, [r2, #0]
 8002da8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002dac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002db0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68da      	ldr	r2, [r3, #12]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dc0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	691a      	ldr	r2, [r3, #16]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	69d9      	ldr	r1, [r3, #28]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a1a      	ldr	r2, [r3, #32]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f042 0201 	orr.w	r2, r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2220      	movs	r2, #32
 8002e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
	...

08002e24 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b088      	sub	sp, #32
 8002e28:	af02      	add	r7, sp, #8
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	4608      	mov	r0, r1
 8002e2e:	4611      	mov	r1, r2
 8002e30:	461a      	mov	r2, r3
 8002e32:	4603      	mov	r3, r0
 8002e34:	817b      	strh	r3, [r7, #10]
 8002e36:	460b      	mov	r3, r1
 8002e38:	813b      	strh	r3, [r7, #8]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b20      	cmp	r3, #32
 8002e48:	f040 80f9 	bne.w	800303e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e4c:	6a3b      	ldr	r3, [r7, #32]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d002      	beq.n	8002e58 <HAL_I2C_Mem_Write+0x34>
 8002e52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d105      	bne.n	8002e64 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e5e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e0ed      	b.n	8003040 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d101      	bne.n	8002e72 <HAL_I2C_Mem_Write+0x4e>
 8002e6e:	2302      	movs	r3, #2
 8002e70:	e0e6      	b.n	8003040 <HAL_I2C_Mem_Write+0x21c>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2201      	movs	r2, #1
 8002e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e7a:	f7ff fa05 	bl	8002288 <HAL_GetTick>
 8002e7e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	9300      	str	r3, [sp, #0]
 8002e84:	2319      	movs	r3, #25
 8002e86:	2201      	movs	r2, #1
 8002e88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f002 f810 	bl	8004eb2 <I2C_WaitOnFlagUntilTimeout>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e0d1      	b.n	8003040 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2221      	movs	r2, #33	; 0x21
 8002ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2240      	movs	r2, #64	; 0x40
 8002ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6a3a      	ldr	r2, [r7, #32]
 8002eb6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ebc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ec4:	88f8      	ldrh	r0, [r7, #6]
 8002ec6:	893a      	ldrh	r2, [r7, #8]
 8002ec8:	8979      	ldrh	r1, [r7, #10]
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	9301      	str	r3, [sp, #4]
 8002ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f001 fa5f 	bl	8004398 <I2C_RequestMemoryWrite>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d005      	beq.n	8002eec <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e0a9      	b.n	8003040 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	2bff      	cmp	r3, #255	; 0xff
 8002ef4:	d90e      	bls.n	8002f14 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	22ff      	movs	r2, #255	; 0xff
 8002efa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	8979      	ldrh	r1, [r7, #10]
 8002f04:	2300      	movs	r3, #0
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f002 f979 	bl	8005204 <I2C_TransferConfig>
 8002f12:	e00f      	b.n	8002f34 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f22:	b2da      	uxtb	r2, r3
 8002f24:	8979      	ldrh	r1, [r7, #10]
 8002f26:	2300      	movs	r3, #0
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f002 f968 	bl	8005204 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f001 fffa 	bl	8004f32 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e07b      	b.n	8003040 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	781a      	ldrb	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f58:	1c5a      	adds	r2, r3, #1
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	3b01      	subs	r3, #1
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f70:	3b01      	subs	r3, #1
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d034      	beq.n	8002fec <HAL_I2C_Mem_Write+0x1c8>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d130      	bne.n	8002fec <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f90:	2200      	movs	r2, #0
 8002f92:	2180      	movs	r1, #128	; 0x80
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f001 ff8c 	bl	8004eb2 <I2C_WaitOnFlagUntilTimeout>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e04d      	b.n	8003040 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	2bff      	cmp	r3, #255	; 0xff
 8002fac:	d90e      	bls.n	8002fcc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	22ff      	movs	r2, #255	; 0xff
 8002fb2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	8979      	ldrh	r1, [r7, #10]
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	9300      	str	r3, [sp, #0]
 8002fc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f002 f91d 	bl	8005204 <I2C_TransferConfig>
 8002fca:	e00f      	b.n	8002fec <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	8979      	ldrh	r1, [r7, #10]
 8002fde:	2300      	movs	r3, #0
 8002fe0:	9300      	str	r3, [sp, #0]
 8002fe2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f002 f90c 	bl	8005204 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d19e      	bne.n	8002f34 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f001 ffd9 	bl	8004fb2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e01a      	b.n	8003040 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2220      	movs	r2, #32
 8003010:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6859      	ldr	r1, [r3, #4]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	4b0a      	ldr	r3, [pc, #40]	; (8003048 <HAL_I2C_Mem_Write+0x224>)
 800301e:	400b      	ands	r3, r1
 8003020:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2220      	movs	r2, #32
 8003026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800303a:	2300      	movs	r3, #0
 800303c:	e000      	b.n	8003040 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800303e:	2302      	movs	r3, #2
  }
}
 8003040:	4618      	mov	r0, r3
 8003042:	3718      	adds	r7, #24
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	fe00e800 	.word	0xfe00e800

0800304c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b088      	sub	sp, #32
 8003050:	af02      	add	r7, sp, #8
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	4608      	mov	r0, r1
 8003056:	4611      	mov	r1, r2
 8003058:	461a      	mov	r2, r3
 800305a:	4603      	mov	r3, r0
 800305c:	817b      	strh	r3, [r7, #10]
 800305e:	460b      	mov	r3, r1
 8003060:	813b      	strh	r3, [r7, #8]
 8003062:	4613      	mov	r3, r2
 8003064:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b20      	cmp	r3, #32
 8003070:	f040 80fd 	bne.w	800326e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003074:	6a3b      	ldr	r3, [r7, #32]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d002      	beq.n	8003080 <HAL_I2C_Mem_Read+0x34>
 800307a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800307c:	2b00      	cmp	r3, #0
 800307e:	d105      	bne.n	800308c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003086:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e0f1      	b.n	8003270 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003092:	2b01      	cmp	r3, #1
 8003094:	d101      	bne.n	800309a <HAL_I2C_Mem_Read+0x4e>
 8003096:	2302      	movs	r3, #2
 8003098:	e0ea      	b.n	8003270 <HAL_I2C_Mem_Read+0x224>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80030a2:	f7ff f8f1 	bl	8002288 <HAL_GetTick>
 80030a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	9300      	str	r3, [sp, #0]
 80030ac:	2319      	movs	r3, #25
 80030ae:	2201      	movs	r2, #1
 80030b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f001 fefc 	bl	8004eb2 <I2C_WaitOnFlagUntilTimeout>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e0d5      	b.n	8003270 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2222      	movs	r2, #34	; 0x22
 80030c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2240      	movs	r2, #64	; 0x40
 80030d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6a3a      	ldr	r2, [r7, #32]
 80030de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80030e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030ec:	88f8      	ldrh	r0, [r7, #6]
 80030ee:	893a      	ldrh	r2, [r7, #8]
 80030f0:	8979      	ldrh	r1, [r7, #10]
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	9301      	str	r3, [sp, #4]
 80030f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	4603      	mov	r3, r0
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f001 f99f 	bl	8004440 <I2C_RequestMemoryRead>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d005      	beq.n	8003114 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e0ad      	b.n	8003270 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003118:	b29b      	uxth	r3, r3
 800311a:	2bff      	cmp	r3, #255	; 0xff
 800311c:	d90e      	bls.n	800313c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	22ff      	movs	r2, #255	; 0xff
 8003122:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003128:	b2da      	uxtb	r2, r3
 800312a:	8979      	ldrh	r1, [r7, #10]
 800312c:	4b52      	ldr	r3, [pc, #328]	; (8003278 <HAL_I2C_Mem_Read+0x22c>)
 800312e:	9300      	str	r3, [sp, #0]
 8003130:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f002 f865 	bl	8005204 <I2C_TransferConfig>
 800313a:	e00f      	b.n	800315c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003140:	b29a      	uxth	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800314a:	b2da      	uxtb	r2, r3
 800314c:	8979      	ldrh	r1, [r7, #10]
 800314e:	4b4a      	ldr	r3, [pc, #296]	; (8003278 <HAL_I2C_Mem_Read+0x22c>)
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f002 f854 	bl	8005204 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003162:	2200      	movs	r2, #0
 8003164:	2104      	movs	r1, #4
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f001 fea3 	bl	8004eb2 <I2C_WaitOnFlagUntilTimeout>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e07c      	b.n	8003270 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	b2d2      	uxtb	r2, r2
 8003182:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	1c5a      	adds	r2, r3, #1
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003192:	3b01      	subs	r3, #1
 8003194:	b29a      	uxth	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319e:	b29b      	uxth	r3, r3
 80031a0:	3b01      	subs	r3, #1
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d034      	beq.n	800321c <HAL_I2C_Mem_Read+0x1d0>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d130      	bne.n	800321c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	9300      	str	r3, [sp, #0]
 80031be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c0:	2200      	movs	r2, #0
 80031c2:	2180      	movs	r1, #128	; 0x80
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f001 fe74 	bl	8004eb2 <I2C_WaitOnFlagUntilTimeout>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e04d      	b.n	8003270 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d8:	b29b      	uxth	r3, r3
 80031da:	2bff      	cmp	r3, #255	; 0xff
 80031dc:	d90e      	bls.n	80031fc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	22ff      	movs	r2, #255	; 0xff
 80031e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	8979      	ldrh	r1, [r7, #10]
 80031ec:	2300      	movs	r3, #0
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f002 f805 	bl	8005204 <I2C_TransferConfig>
 80031fa:	e00f      	b.n	800321c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003200:	b29a      	uxth	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800320a:	b2da      	uxtb	r2, r3
 800320c:	8979      	ldrh	r1, [r7, #10]
 800320e:	2300      	movs	r3, #0
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f001 fff4 	bl	8005204 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003220:	b29b      	uxth	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d19a      	bne.n	800315c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f001 fec1 	bl	8004fb2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e01a      	b.n	8003270 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2220      	movs	r2, #32
 8003240:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6859      	ldr	r1, [r3, #4]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	4b0b      	ldr	r3, [pc, #44]	; (800327c <HAL_I2C_Mem_Read+0x230>)
 800324e:	400b      	ands	r3, r1
 8003250:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2220      	movs	r2, #32
 8003256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800326a:	2300      	movs	r3, #0
 800326c:	e000      	b.n	8003270 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800326e:	2302      	movs	r3, #2
  }
}
 8003270:	4618      	mov	r0, r3
 8003272:	3718      	adds	r7, #24
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	80002400 	.word	0x80002400
 800327c:	fe00e800 	.word	0xfe00e800

08003280 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af02      	add	r7, sp, #8
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	4608      	mov	r0, r1
 800328a:	4611      	mov	r1, r2
 800328c:	461a      	mov	r2, r3
 800328e:	4603      	mov	r3, r0
 8003290:	817b      	strh	r3, [r7, #10]
 8003292:	460b      	mov	r3, r1
 8003294:	813b      	strh	r3, [r7, #8]
 8003296:	4613      	mov	r3, r2
 8003298:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b20      	cmp	r3, #32
 80032a4:	d167      	bne.n	8003376 <HAL_I2C_Mem_Write_IT+0xf6>
  {
    if ((pData == NULL) || (Size == 0U))
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d002      	beq.n	80032b2 <HAL_I2C_Mem_Write_IT+0x32>
 80032ac:	8bbb      	ldrh	r3, [r7, #28]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d105      	bne.n	80032be <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032b8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e05c      	b.n	8003378 <HAL_I2C_Mem_Write_IT+0xf8>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032cc:	d101      	bne.n	80032d2 <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 80032ce:	2302      	movs	r3, #2
 80032d0:	e052      	b.n	8003378 <HAL_I2C_Mem_Write_IT+0xf8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d101      	bne.n	80032e0 <HAL_I2C_Mem_Write_IT+0x60>
 80032dc:	2302      	movs	r3, #2
 80032de:	e04b      	b.n	8003378 <HAL_I2C_Mem_Write_IT+0xf8>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2221      	movs	r2, #33	; 0x21
 80032ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2240      	movs	r2, #64	; 0x40
 80032f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8bba      	ldrh	r2, [r7, #28]
 8003308:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	4a1c      	ldr	r2, [pc, #112]	; (8003380 <HAL_I2C_Mem_Write_IT+0x100>)
 800330e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4a1c      	ldr	r2, [pc, #112]	; (8003384 <HAL_I2C_Mem_Write_IT+0x104>)
 8003314:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 8003316:	897a      	ldrh	r2, [r7, #10]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800331c:	88fb      	ldrh	r3, [r7, #6]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d109      	bne.n	8003336 <HAL_I2C_Mem_Write_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003322:	893b      	ldrh	r3, [r7, #8]
 8003324:	b2da      	uxtb	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f04f 32ff 	mov.w	r2, #4294967295
 8003332:	651a      	str	r2, [r3, #80]	; 0x50
 8003334:	e00b      	b.n	800334e <HAL_I2C_Mem_Write_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003336:	893b      	ldrh	r3, [r7, #8]
 8003338:	0a1b      	lsrs	r3, r3, #8
 800333a:	b29b      	uxth	r3, r3
 800333c:	b2da      	uxtb	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8003344:	893b      	ldrh	r3, [r7, #8]
 8003346:	b2db      	uxtb	r3, r3
 8003348:	461a      	mov	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800334e:	88fb      	ldrh	r3, [r7, #6]
 8003350:	b2da      	uxtb	r2, r3
 8003352:	8979      	ldrh	r1, [r7, #10]
 8003354:	4b0c      	ldr	r3, [pc, #48]	; (8003388 <HAL_I2C_Mem_Write_IT+0x108>)
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f001 ff51 	bl	8005204 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800336a:	2101      	movs	r1, #1
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f001 ff7b 	bl	8005268 <I2C_Enable_IRQ>

    return HAL_OK;
 8003372:	2300      	movs	r3, #0
 8003374:	e000      	b.n	8003378 <HAL_I2C_Mem_Write_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8003376:	2302      	movs	r3, #2
  }
}
 8003378:	4618      	mov	r0, r3
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	ffff0000 	.word	0xffff0000
 8003384:	08003951 	.word	0x08003951
 8003388:	80002000 	.word	0x80002000

0800338c <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af02      	add	r7, sp, #8
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	4608      	mov	r0, r1
 8003396:	4611      	mov	r1, r2
 8003398:	461a      	mov	r2, r3
 800339a:	4603      	mov	r3, r0
 800339c:	817b      	strh	r3, [r7, #10]
 800339e:	460b      	mov	r3, r1
 80033a0:	813b      	strh	r3, [r7, #8]
 80033a2:	4613      	mov	r3, r2
 80033a4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b20      	cmp	r3, #32
 80033b0:	d166      	bne.n	8003480 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d002      	beq.n	80033be <HAL_I2C_Mem_Read_IT+0x32>
 80033b8:	8bbb      	ldrh	r3, [r7, #28]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d105      	bne.n	80033ca <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033c4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e05b      	b.n	8003482 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033d8:	d101      	bne.n	80033de <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 80033da:	2302      	movs	r3, #2
 80033dc:	e051      	b.n	8003482 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d101      	bne.n	80033ec <HAL_I2C_Mem_Read_IT+0x60>
 80033e8:	2302      	movs	r3, #2
 80033ea:	e04a      	b.n	8003482 <HAL_I2C_Mem_Read_IT+0xf6>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2222      	movs	r2, #34	; 0x22
 80033f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2240      	movs	r2, #64	; 0x40
 8003400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8bba      	ldrh	r2, [r7, #28]
 8003414:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	4a1c      	ldr	r2, [pc, #112]	; (800348c <HAL_I2C_Mem_Read_IT+0x100>)
 800341a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	4a1c      	ldr	r2, [pc, #112]	; (8003490 <HAL_I2C_Mem_Read_IT+0x104>)
 8003420:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 8003422:	897a      	ldrh	r2, [r7, #10]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003428:	88fb      	ldrh	r3, [r7, #6]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d109      	bne.n	8003442 <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800342e:	893b      	ldrh	r3, [r7, #8]
 8003430:	b2da      	uxtb	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f04f 32ff 	mov.w	r2, #4294967295
 800343e:	651a      	str	r2, [r3, #80]	; 0x50
 8003440:	e00b      	b.n	800345a <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003442:	893b      	ldrh	r3, [r7, #8]
 8003444:	0a1b      	lsrs	r3, r3, #8
 8003446:	b29b      	uxth	r3, r3
 8003448:	b2da      	uxtb	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8003450:	893b      	ldrh	r3, [r7, #8]
 8003452:	b2db      	uxtb	r3, r3
 8003454:	461a      	mov	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800345a:	88fb      	ldrh	r3, [r7, #6]
 800345c:	b2da      	uxtb	r2, r3
 800345e:	8979      	ldrh	r1, [r7, #10]
 8003460:	4b0c      	ldr	r3, [pc, #48]	; (8003494 <HAL_I2C_Mem_Read_IT+0x108>)
 8003462:	9300      	str	r3, [sp, #0]
 8003464:	2300      	movs	r3, #0
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f001 fecc 	bl	8005204 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, (I2C_XFER_TX_IT | I2C_XFER_RX_IT));
 8003474:	2103      	movs	r1, #3
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f001 fef6 	bl	8005268 <I2C_Enable_IRQ>

    return HAL_OK;
 800347c:	2300      	movs	r3, #0
 800347e:	e000      	b.n	8003482 <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 8003480:	2302      	movs	r3, #2
  }
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	ffff0000 	.word	0xffff0000
 8003490:	08003951 	.word	0x08003951
 8003494:	80002000 	.word	0x80002000

08003498 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b088      	sub	sp, #32
 800349c:	af02      	add	r7, sp, #8
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	4608      	mov	r0, r1
 80034a2:	4611      	mov	r1, r2
 80034a4:	461a      	mov	r2, r3
 80034a6:	4603      	mov	r3, r0
 80034a8:	817b      	strh	r3, [r7, #10]
 80034aa:	460b      	mov	r3, r1
 80034ac:	813b      	strh	r3, [r7, #8]
 80034ae:	4613      	mov	r3, r2
 80034b0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b20      	cmp	r3, #32
 80034bc:	f040 80c2 	bne.w	8003644 <HAL_I2C_Mem_Read_DMA+0x1ac>
  {
    if ((pData == NULL) || (Size == 0U))
 80034c0:	6a3b      	ldr	r3, [r7, #32]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d002      	beq.n	80034cc <HAL_I2C_Mem_Read_DMA+0x34>
 80034c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d105      	bne.n	80034d8 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034d2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e0b6      	b.n	8003646 <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034e6:	d101      	bne.n	80034ec <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 80034e8:	2302      	movs	r3, #2
 80034ea:	e0ac      	b.n	8003646 <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d101      	bne.n	80034fa <HAL_I2C_Mem_Read_DMA+0x62>
 80034f6:	2302      	movs	r3, #2
 80034f8:	e0a5      	b.n	8003646 <HAL_I2C_Mem_Read_DMA+0x1ae>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2222      	movs	r2, #34	; 0x22
 8003506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2240      	movs	r2, #64	; 0x40
 800350e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6a3a      	ldr	r2, [r7, #32]
 800351c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003522:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	4a4a      	ldr	r2, [pc, #296]	; (8003650 <HAL_I2C_Mem_Read_DMA+0x1b8>)
 8003528:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	4a49      	ldr	r2, [pc, #292]	; (8003654 <HAL_I2C_Mem_Read_DMA+0x1bc>)
 800352e:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 8003530:	897a      	ldrh	r2, [r7, #10]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	64da      	str	r2, [r3, #76]	; 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353a:	b29b      	uxth	r3, r3
 800353c:	2bff      	cmp	r3, #255	; 0xff
 800353e:	d903      	bls.n	8003548 <HAL_I2C_Mem_Read_DMA+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	22ff      	movs	r2, #255	; 0xff
 8003544:	851a      	strh	r2, [r3, #40]	; 0x28
 8003546:	e004      	b.n	8003552 <HAL_I2C_Mem_Read_DMA+0xba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354c:	b29a      	uxth	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003552:	88fb      	ldrh	r3, [r7, #6]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d109      	bne.n	800356c <HAL_I2C_Mem_Read_DMA+0xd4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003558:	893b      	ldrh	r3, [r7, #8]
 800355a:	b2da      	uxtb	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f04f 32ff 	mov.w	r2, #4294967295
 8003568:	651a      	str	r2, [r3, #80]	; 0x50
 800356a:	e00b      	b.n	8003584 <HAL_I2C_Mem_Read_DMA+0xec>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800356c:	893b      	ldrh	r3, [r7, #8]
 800356e:	0a1b      	lsrs	r3, r3, #8
 8003570:	b29b      	uxth	r3, r3
 8003572:	b2da      	uxtb	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800357a:	893b      	ldrh	r3, [r7, #8]
 800357c:	b2db      	uxtb	r3, r3
 800357e:	461a      	mov	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	651a      	str	r2, [r3, #80]	; 0x50
    }

    if (hi2c->hdmarx != NULL)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003588:	2b00      	cmp	r3, #0
 800358a:	d020      	beq.n	80035ce <HAL_I2C_Mem_Read_DMA+0x136>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003590:	4a31      	ldr	r2, [pc, #196]	; (8003658 <HAL_I2C_Mem_Read_DMA+0x1c0>)
 8003592:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003598:	4a30      	ldr	r2, [pc, #192]	; (800365c <HAL_I2C_Mem_Read_DMA+0x1c4>)
 800359a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a0:	2200      	movs	r2, #0
 80035a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a8:	2200      	movs	r2, #0
 80035aa:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	3324      	adds	r3, #36	; 0x24
 80035b6:	4619      	mov	r1, r3
 80035b8:	6a3a      	ldr	r2, [r7, #32]
                                       hi2c->XferSize);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80035be:	f7ff f839 	bl	8002634 <HAL_DMA_Start_IT>
 80035c2:	4603      	mov	r3, r0
 80035c4:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80035c6:	7dfb      	ldrb	r3, [r7, #23]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d127      	bne.n	800361c <HAL_I2C_Mem_Read_DMA+0x184>
 80035cc:	e013      	b.n	80035f6 <HAL_I2C_Mem_Read_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2220      	movs	r2, #32
 80035d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e027      	b.n	8003646 <HAL_I2C_Mem_Read_DMA+0x1ae>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80035f6:	88fb      	ldrh	r3, [r7, #6]
 80035f8:	b2da      	uxtb	r2, r3
 80035fa:	8979      	ldrh	r1, [r7, #10]
 80035fc:	4b18      	ldr	r3, [pc, #96]	; (8003660 <HAL_I2C_Mem_Read_DMA+0x1c8>)
 80035fe:	9300      	str	r3, [sp, #0]
 8003600:	2300      	movs	r3, #0
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f001 fdfe 	bl	8005204 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003610:	2101      	movs	r1, #1
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f001 fe28 	bl	8005268 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8003618:	2300      	movs	r3, #0
 800361a:	e014      	b.n	8003646 <HAL_I2C_Mem_Read_DMA+0x1ae>
      hi2c->State     = HAL_I2C_STATE_READY;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2220      	movs	r2, #32
 8003620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003630:	f043 0210 	orr.w	r2, r3, #16
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e000      	b.n	8003646 <HAL_I2C_Mem_Read_DMA+0x1ae>
  }
  else
  {
    return HAL_BUSY;
 8003644:	2302      	movs	r3, #2
  }
}
 8003646:	4618      	mov	r0, r3
 8003648:	3718      	adds	r7, #24
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	ffff0000 	.word	0xffff0000
 8003654:	08003f91 	.word	0x08003f91
 8003658:	08004db3 	.word	0x08004db3
 800365c:	08004e49 	.word	0x08004e49
 8003660:	80002000 	.word	0x80002000

08003664 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b08a      	sub	sp, #40	; 0x28
 8003668:	af02      	add	r7, sp, #8
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	607a      	str	r2, [r7, #4]
 800366e:	603b      	str	r3, [r7, #0]
 8003670:	460b      	mov	r3, r1
 8003672:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003674:	2300      	movs	r3, #0
 8003676:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b20      	cmp	r3, #32
 8003682:	f040 80f1 	bne.w	8003868 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003690:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003694:	d101      	bne.n	800369a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003696:	2302      	movs	r3, #2
 8003698:	e0e7      	b.n	800386a <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d101      	bne.n	80036a8 <HAL_I2C_IsDeviceReady+0x44>
 80036a4:	2302      	movs	r3, #2
 80036a6:	e0e0      	b.n	800386a <HAL_I2C_IsDeviceReady+0x206>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2224      	movs	r2, #36	; 0x24
 80036b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d107      	bne.n	80036d6 <HAL_I2C_IsDeviceReady+0x72>
 80036c6:	897b      	ldrh	r3, [r7, #10]
 80036c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80036d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80036d4:	e004      	b.n	80036e0 <HAL_I2C_IsDeviceReady+0x7c>
 80036d6:	897b      	ldrh	r3, [r7, #10]
 80036d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036dc:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	6812      	ldr	r2, [r2, #0]
 80036e4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80036e6:	f7fe fdcf 	bl	8002288 <HAL_GetTick>
 80036ea:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	f003 0320 	and.w	r3, r3, #32
 80036f6:	2b20      	cmp	r3, #32
 80036f8:	bf0c      	ite	eq
 80036fa:	2301      	moveq	r3, #1
 80036fc:	2300      	movne	r3, #0
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	f003 0310 	and.w	r3, r3, #16
 800370c:	2b10      	cmp	r3, #16
 800370e:	bf0c      	ite	eq
 8003710:	2301      	moveq	r3, #1
 8003712:	2300      	movne	r3, #0
 8003714:	b2db      	uxtb	r3, r3
 8003716:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003718:	e034      	b.n	8003784 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003720:	d01a      	beq.n	8003758 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003722:	f7fe fdb1 	bl	8002288 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	429a      	cmp	r2, r3
 8003730:	d302      	bcc.n	8003738 <HAL_I2C_IsDeviceReady+0xd4>
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10f      	bne.n	8003758 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2220      	movs	r2, #32
 800373c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003744:	f043 0220 	orr.w	r2, r3, #32
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e088      	b.n	800386a <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	f003 0320 	and.w	r3, r3, #32
 8003762:	2b20      	cmp	r3, #32
 8003764:	bf0c      	ite	eq
 8003766:	2301      	moveq	r3, #1
 8003768:	2300      	movne	r3, #0
 800376a:	b2db      	uxtb	r3, r3
 800376c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	f003 0310 	and.w	r3, r3, #16
 8003778:	2b10      	cmp	r3, #16
 800377a:	bf0c      	ite	eq
 800377c:	2301      	moveq	r3, #1
 800377e:	2300      	movne	r3, #0
 8003780:	b2db      	uxtb	r3, r3
 8003782:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003784:	7ffb      	ldrb	r3, [r7, #31]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d102      	bne.n	8003790 <HAL_I2C_IsDeviceReady+0x12c>
 800378a:	7fbb      	ldrb	r3, [r7, #30]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d0c4      	beq.n	800371a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	f003 0310 	and.w	r3, r3, #16
 800379a:	2b10      	cmp	r3, #16
 800379c:	d01a      	beq.n	80037d4 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	9300      	str	r3, [sp, #0]
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	2200      	movs	r2, #0
 80037a6:	2120      	movs	r1, #32
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f001 fb82 	bl	8004eb2 <I2C_WaitOnFlagUntilTimeout>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e058      	b.n	800386a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2220      	movs	r2, #32
 80037be:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2220      	movs	r2, #32
 80037c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80037d0:	2300      	movs	r3, #0
 80037d2:	e04a      	b.n	800386a <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	2200      	movs	r2, #0
 80037dc:	2120      	movs	r1, #32
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f001 fb67 	bl	8004eb2 <I2C_WaitOnFlagUntilTimeout>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e03d      	b.n	800386a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2210      	movs	r2, #16
 80037f4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2220      	movs	r2, #32
 80037fc:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	429a      	cmp	r2, r3
 8003804:	d118      	bne.n	8003838 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003814:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	2200      	movs	r2, #0
 800381e:	2120      	movs	r1, #32
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f001 fb46 	bl	8004eb2 <I2C_WaitOnFlagUntilTimeout>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e01c      	b.n	800386a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2220      	movs	r2, #32
 8003836:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	3301      	adds	r3, #1
 800383c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	429a      	cmp	r2, r3
 8003844:	f63f af3b 	bhi.w	80036be <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2220      	movs	r2, #32
 800384c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003854:	f043 0220 	orr.w	r2, r3, #32
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e000      	b.n	800386a <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8003868:	2302      	movs	r3, #2
  }
}
 800386a:	4618      	mov	r0, r3
 800386c:	3720      	adds	r7, #32
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b084      	sub	sp, #16
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800388e:	2b00      	cmp	r3, #0
 8003890:	d005      	beq.n	800389e <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003896:	68ba      	ldr	r2, [r7, #8]
 8003898:	68f9      	ldr	r1, [r7, #12]
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	4798      	blx	r3
  }
}
 800389e:	bf00      	nop
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b083      	sub	sp, #12
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80038ae:	bf00      	nop
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b083      	sub	sp, #12
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80038c2:	bf00      	nop
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr

080038ce <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b083      	sub	sp, #12
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80038d6:	bf00      	nop
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr

080038e2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b083      	sub	sp, #12
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80038ea:	bf00      	nop
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b083      	sub	sp, #12
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
 80038fe:	460b      	mov	r3, r1
 8003900:	70fb      	strb	r3, [r7, #3]
 8003902:	4613      	mov	r3, r2
 8003904:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003906:	bf00      	nop
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr

08003912 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003912:	b480      	push	{r7}
 8003914:	b083      	sub	sp, #12
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800391a:	bf00      	nop
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800393a:	b480      	push	{r7}
 800393c:	b083      	sub	sp, #12
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003942:	bf00      	nop
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
	...

08003950 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b088      	sub	sp, #32
 8003954:	af02      	add	r7, sp, #8
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800395c:	4b8f      	ldr	r3, [pc, #572]	; (8003b9c <I2C_Mem_ISR_IT+0x24c>)
 800395e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800396a:	2b01      	cmp	r3, #1
 800396c:	d101      	bne.n	8003972 <I2C_Mem_ISR_IT+0x22>
 800396e:	2302      	movs	r3, #2
 8003970:	e110      	b.n	8003b94 <I2C_Mem_ISR_IT+0x244>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	091b      	lsrs	r3, r3, #4
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d013      	beq.n	80039ae <I2C_Mem_ISR_IT+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	091b      	lsrs	r3, r3, #4
 800398a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00d      	beq.n	80039ae <I2C_Mem_ISR_IT+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2210      	movs	r2, #16
 8003998:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399e:	f043 0204 	orr.w	r2, r3, #4
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f001 f9df 	bl	8004d6a <I2C_Flush_TXDR>
 80039ac:	e0dd      	b.n	8003b6a <I2C_Mem_ISR_IT+0x21a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	089b      	lsrs	r3, r3, #2
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d023      	beq.n	8003a02 <I2C_Mem_ISR_IT+0xb2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	089b      	lsrs	r3, r3, #2
 80039be:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d01d      	beq.n	8003a02 <I2C_Mem_ISR_IT+0xb2>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	f023 0304 	bic.w	r3, r3, #4
 80039cc:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	b2d2      	uxtb	r2, r2
 80039da:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e0:	1c5a      	adds	r2, r3, #1
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ea:	3b01      	subs	r3, #1
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	3b01      	subs	r3, #1
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a00:	e0b3      	b.n	8003b6a <I2C_Mem_ISR_IT+0x21a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	085b      	lsrs	r3, r3, #1
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d02d      	beq.n	8003a6a <I2C_Mem_ISR_IT+0x11a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	085b      	lsrs	r3, r3, #1
 8003a12:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d027      	beq.n	8003a6a <I2C_Mem_ISR_IT+0x11a>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a22:	d118      	bne.n	8003a56 <I2C_Mem_ISR_IT+0x106>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a28:	781a      	ldrb	r2, [r3, #0]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a34:	1c5a      	adds	r2, r3, #1
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8003a54:	e089      	b.n	8003b6a <I2C_Mem_ISR_IT+0x21a>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a5e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f04f 32ff 	mov.w	r2, #4294967295
 8003a66:	651a      	str	r2, [r3, #80]	; 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8003a68:	e07f      	b.n	8003b6a <I2C_Mem_ISR_IT+0x21a>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	09db      	lsrs	r3, r3, #7
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d03d      	beq.n	8003af2 <I2C_Mem_ISR_IT+0x1a2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	099b      	lsrs	r3, r3, #6
 8003a7a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d037      	beq.n	8003af2 <I2C_Mem_ISR_IT+0x1a2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d02c      	beq.n	8003ae6 <I2C_Mem_ISR_IT+0x196>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d128      	bne.n	8003ae6 <I2C_Mem_ISR_IT+0x196>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	2bff      	cmp	r3, #255	; 0xff
 8003a9c:	d910      	bls.n	8003ac0 <I2C_Mem_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	22ff      	movs	r2, #255	; 0xff
 8003aa2:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aa8:	b299      	uxth	r1, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aae:	b2da      	uxtb	r2, r3
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	9300      	str	r3, [sp, #0]
 8003ab4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f001 fba3 	bl	8005204 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003abe:	e017      	b.n	8003af0 <I2C_Mem_ISR_IT+0x1a0>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ace:	b299      	uxth	r1, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad4:	b2da      	uxtb	r2, r3
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f001 fb90 	bl	8005204 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ae4:	e004      	b.n	8003af0 <I2C_Mem_ISR_IT+0x1a0>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003ae6:	2140      	movs	r1, #64	; 0x40
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f001 f847 	bl	8004b7c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003aee:	e03c      	b.n	8003b6a <I2C_Mem_ISR_IT+0x21a>
 8003af0:	e03b      	b.n	8003b6a <I2C_Mem_ISR_IT+0x21a>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	099b      	lsrs	r3, r3, #6
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d035      	beq.n	8003b6a <I2C_Mem_ISR_IT+0x21a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	099b      	lsrs	r3, r3, #6
 8003b02:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d02f      	beq.n	8003b6a <I2C_Mem_ISR_IT+0x21a>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b22      	cmp	r3, #34	; 0x22
 8003b14:	d101      	bne.n	8003b1a <I2C_Mem_ISR_IT+0x1ca>
    {
      direction = I2C_GENERATE_START_READ;
 8003b16:	4b22      	ldr	r3, [pc, #136]	; (8003ba0 <I2C_Mem_ISR_IT+0x250>)
 8003b18:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	2bff      	cmp	r3, #255	; 0xff
 8003b22:	d910      	bls.n	8003b46 <I2C_Mem_ISR_IT+0x1f6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	22ff      	movs	r2, #255	; 0xff
 8003b28:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b2e:	b299      	uxth	r1, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f001 fb60 	bl	8005204 <I2C_TransferConfig>
 8003b44:	e011      	b.n	8003b6a <I2C_Mem_ISR_IT+0x21a>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b54:	b299      	uxth	r1, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b5a:	b2da      	uxtb	r2, r3
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f001 fb4d 	bl	8005204 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	095b      	lsrs	r3, r3, #5
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d009      	beq.n	8003b8a <I2C_Mem_ISR_IT+0x23a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	095b      	lsrs	r3, r3, #5
 8003b7a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d003      	beq.n	8003b8a <I2C_Mem_ISR_IT+0x23a>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8003b82:	6939      	ldr	r1, [r7, #16]
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 fdcf 	bl	8004728 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3718      	adds	r7, #24
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	80002000 	.word	0x80002000
 8003ba0:	80002400 	.word	0x80002400

08003ba4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d101      	bne.n	8003bc8 <I2C_Slave_ISR_IT+0x24>
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	e0ec      	b.n	8003da2 <I2C_Slave_ISR_IT+0x1fe>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	095b      	lsrs	r3, r3, #5
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d009      	beq.n	8003bf0 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	095b      	lsrs	r3, r3, #5
 8003be0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d003      	beq.n	8003bf0 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003be8:	6939      	ldr	r1, [r7, #16]
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f000 fe66 	bl	80048bc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	091b      	lsrs	r3, r3, #4
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d04d      	beq.n	8003c98 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	091b      	lsrs	r3, r3, #4
 8003c00:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d047      	beq.n	8003c98 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d128      	bne.n	8003c64 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b28      	cmp	r3, #40	; 0x28
 8003c1c:	d108      	bne.n	8003c30 <I2C_Slave_ISR_IT+0x8c>
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c24:	d104      	bne.n	8003c30 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003c26:	6939      	ldr	r1, [r7, #16]
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f000 ff51 	bl	8004ad0 <I2C_ITListenCplt>
 8003c2e:	e032      	b.n	8003c96 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	2b29      	cmp	r3, #41	; 0x29
 8003c3a:	d10e      	bne.n	8003c5a <I2C_Slave_ISR_IT+0xb6>
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c42:	d00a      	beq.n	8003c5a <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2210      	movs	r2, #16
 8003c4a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f001 f88c 	bl	8004d6a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f000 fd09 	bl	800466a <I2C_ITSlaveSeqCplt>
 8003c58:	e01d      	b.n	8003c96 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2210      	movs	r2, #16
 8003c60:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003c62:	e096      	b.n	8003d92 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2210      	movs	r2, #16
 8003c6a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c70:	f043 0204 	orr.w	r2, r3, #4
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d004      	beq.n	8003c88 <I2C_Slave_ISR_IT+0xe4>
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c84:	f040 8085 	bne.w	8003d92 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f000 ff74 	bl	8004b7c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003c94:	e07d      	b.n	8003d92 <I2C_Slave_ISR_IT+0x1ee>
 8003c96:	e07c      	b.n	8003d92 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	089b      	lsrs	r3, r3, #2
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d030      	beq.n	8003d06 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	089b      	lsrs	r3, r3, #2
 8003ca8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d02a      	beq.n	8003d06 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d018      	beq.n	8003cec <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc4:	b2d2      	uxtb	r2, r2
 8003cc6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	1c5a      	adds	r2, r3, #1
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d14f      	bne.n	8003d96 <I2C_Slave_ISR_IT+0x1f2>
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003cfc:	d04b      	beq.n	8003d96 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f000 fcb3 	bl	800466a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003d04:	e047      	b.n	8003d96 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	08db      	lsrs	r3, r3, #3
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00a      	beq.n	8003d28 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	08db      	lsrs	r3, r3, #3
 8003d16:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d004      	beq.n	8003d28 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003d1e:	6939      	ldr	r1, [r7, #16]
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 fbe1 	bl	80044e8 <I2C_ITAddrCplt>
 8003d26:	e037      	b.n	8003d98 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	085b      	lsrs	r3, r3, #1
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d031      	beq.n	8003d98 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	085b      	lsrs	r3, r3, #1
 8003d38:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d02b      	beq.n	8003d98 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d018      	beq.n	8003d7c <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4e:	781a      	ldrb	r2, [r3, #0]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	1c5a      	adds	r2, r3, #1
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	3b01      	subs	r3, #1
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d72:	3b01      	subs	r3, #1
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	851a      	strh	r2, [r3, #40]	; 0x28
 8003d7a:	e00d      	b.n	8003d98 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d82:	d002      	beq.n	8003d8a <I2C_Slave_ISR_IT+0x1e6>
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d106      	bne.n	8003d98 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f000 fc6d 	bl	800466a <I2C_ITSlaveSeqCplt>
 8003d90:	e002      	b.n	8003d98 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8003d92:	bf00      	nop
 8003d94:	e000      	b.n	8003d98 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8003d96:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3718      	adds	r7, #24
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b088      	sub	sp, #32
 8003dae:	af02      	add	r7, sp, #8
 8003db0:	60f8      	str	r0, [r7, #12]
 8003db2:	60b9      	str	r1, [r7, #8]
 8003db4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d101      	bne.n	8003dc4 <I2C_Master_ISR_DMA+0x1a>
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	e0e1      	b.n	8003f88 <I2C_Master_ISR_DMA+0x1de>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	091b      	lsrs	r3, r3, #4
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d017      	beq.n	8003e08 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	091b      	lsrs	r3, r3, #4
 8003ddc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d011      	beq.n	8003e08 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2210      	movs	r2, #16
 8003dea:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df0:	f043 0204 	orr.w	r2, r3, #4
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003df8:	2120      	movs	r1, #32
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f001 fa34 	bl	8005268 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f000 ffb2 	bl	8004d6a <I2C_Flush_TXDR>
 8003e06:	e0ba      	b.n	8003f7e <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	09db      	lsrs	r3, r3, #7
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d072      	beq.n	8003efa <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	099b      	lsrs	r3, r3, #6
 8003e18:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d06c      	beq.n	8003efa <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e2e:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d04e      	beq.n	8003ed8 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e46:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	2bff      	cmp	r3, #255	; 0xff
 8003e50:	d906      	bls.n	8003e60 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	22ff      	movs	r2, #255	; 0xff
 8003e56:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8003e58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e5c:	617b      	str	r3, [r7, #20]
 8003e5e:	e010      	b.n	8003e82 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e72:	d003      	beq.n	8003e7c <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e78:	617b      	str	r3, [r7, #20]
 8003e7a:	e002      	b.n	8003e82 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003e7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e80:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	8a79      	ldrh	r1, [r7, #18]
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	9300      	str	r3, [sp, #0]
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f001 f9b7 	bl	8005204 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2b22      	cmp	r3, #34	; 0x22
 8003eb2:	d108      	bne.n	8003ec6 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ec2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003ec4:	e05b      	b.n	8003f7e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ed4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003ed6:	e052      	b.n	8003f7e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ee6:	d003      	beq.n	8003ef0 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 fb81 	bl	80045f0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003eee:	e046      	b.n	8003f7e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003ef0:	2140      	movs	r1, #64	; 0x40
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f000 fe42 	bl	8004b7c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003ef8:	e041      	b.n	8003f7e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	099b      	lsrs	r3, r3, #6
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d029      	beq.n	8003f5a <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	099b      	lsrs	r3, r3, #6
 8003f0a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d023      	beq.n	8003f5a <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d119      	bne.n	8003f50 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f2a:	d027      	beq.n	8003f7c <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f34:	d108      	bne.n	8003f48 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	685a      	ldr	r2, [r3, #4]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f44:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003f46:	e019      	b.n	8003f7c <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f000 fb51 	bl	80045f0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003f4e:	e015      	b.n	8003f7c <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003f50:	2140      	movs	r1, #64	; 0x40
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f000 fe12 	bl	8004b7c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003f58:	e010      	b.n	8003f7c <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	095b      	lsrs	r3, r3, #5
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00b      	beq.n	8003f7e <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	095b      	lsrs	r3, r3, #5
 8003f6a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d005      	beq.n	8003f7e <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003f72:	68b9      	ldr	r1, [r7, #8]
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f000 fbd7 	bl	8004728 <I2C_ITMasterCplt>
 8003f7a:	e000      	b.n	8003f7e <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8003f7c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3718      	adds	r7, #24
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b088      	sub	sp, #32
 8003f94:	af02      	add	r7, sp, #8
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8003f9c:	4b8c      	ldr	r3, [pc, #560]	; (80041d0 <I2C_Mem_ISR_DMA+0x240>)
 8003f9e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d101      	bne.n	8003fae <I2C_Mem_ISR_DMA+0x1e>
 8003faa:	2302      	movs	r3, #2
 8003fac:	e10c      	b.n	80041c8 <I2C_Mem_ISR_DMA+0x238>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	091b      	lsrs	r3, r3, #4
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d017      	beq.n	8003ff2 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	091b      	lsrs	r3, r3, #4
 8003fc6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d011      	beq.n	8003ff2 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2210      	movs	r2, #16
 8003fd4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fda:	f043 0204 	orr.w	r2, r3, #4
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003fe2:	2120      	movs	r1, #32
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f001 f93f 	bl	8005268 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f000 febd 	bl	8004d6a <I2C_Flush_TXDR>
 8003ff0:	e0e5      	b.n	80041be <I2C_Mem_ISR_DMA+0x22e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	085b      	lsrs	r3, r3, #1
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00f      	beq.n	800401e <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	085b      	lsrs	r3, r3, #1
 8004002:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004006:	2b00      	cmp	r3, #0
 8004008:	d009      	beq.n	800401e <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004012:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f04f 32ff 	mov.w	r2, #4294967295
 800401a:	651a      	str	r2, [r3, #80]	; 0x50
 800401c:	e0cf      	b.n	80041be <I2C_Mem_ISR_DMA+0x22e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	09db      	lsrs	r3, r3, #7
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d05c      	beq.n	80040e4 <I2C_Mem_ISR_DMA+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	099b      	lsrs	r3, r3, #6
 800402e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004032:	2b00      	cmp	r3, #0
 8004034:	d056      	beq.n	80040e4 <I2C_Mem_ISR_DMA+0x154>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004036:	2110      	movs	r1, #16
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f001 f915 	bl	8005268 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004042:	b29b      	uxth	r3, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	d048      	beq.n	80040da <I2C_Mem_ISR_DMA+0x14a>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800404c:	b29b      	uxth	r3, r3
 800404e:	2bff      	cmp	r3, #255	; 0xff
 8004050:	d910      	bls.n	8004074 <I2C_Mem_ISR_DMA+0xe4>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	22ff      	movs	r2, #255	; 0xff
 8004056:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800405c:	b299      	uxth	r1, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004062:	b2da      	uxtb	r2, r3
 8004064:	2300      	movs	r3, #0
 8004066:	9300      	str	r3, [sp, #0]
 8004068:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f001 f8c9 	bl	8005204 <I2C_TransferConfig>
 8004072:	e011      	b.n	8004098 <I2C_Mem_ISR_DMA+0x108>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004078:	b29a      	uxth	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004082:	b299      	uxth	r1, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004088:	b2da      	uxtb	r2, r3
 800408a:	2300      	movs	r3, #0
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	f001 f8b6 	bl	8005204 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800409c:	b29a      	uxth	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b22      	cmp	r3, #34	; 0x22
 80040b4:	d108      	bne.n	80040c8 <I2C_Mem_ISR_DMA+0x138>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040c4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80040c6:	e07a      	b.n	80041be <I2C_Mem_ISR_DMA+0x22e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040d6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80040d8:	e071      	b.n	80041be <I2C_Mem_ISR_DMA+0x22e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80040da:	2140      	movs	r1, #64	; 0x40
 80040dc:	68f8      	ldr	r0, [r7, #12]
 80040de:	f000 fd4d 	bl	8004b7c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80040e2:	e06c      	b.n	80041be <I2C_Mem_ISR_DMA+0x22e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	099b      	lsrs	r3, r3, #6
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d056      	beq.n	800419e <I2C_Mem_ISR_DMA+0x20e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	099b      	lsrs	r3, r3, #6
 80040f4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d050      	beq.n	800419e <I2C_Mem_ISR_DMA+0x20e>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b22      	cmp	r3, #34	; 0x22
 8004106:	d101      	bne.n	800410c <I2C_Mem_ISR_DMA+0x17c>
    {
      direction = I2C_GENERATE_START_READ;
 8004108:	4b32      	ldr	r3, [pc, #200]	; (80041d4 <I2C_Mem_ISR_DMA+0x244>)
 800410a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004110:	b29b      	uxth	r3, r3
 8004112:	2bff      	cmp	r3, #255	; 0xff
 8004114:	d910      	bls.n	8004138 <I2C_Mem_ISR_DMA+0x1a8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	22ff      	movs	r2, #255	; 0xff
 800411a:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004120:	b299      	uxth	r1, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004126:	b2da      	uxtb	r2, r3
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f001 f867 	bl	8005204 <I2C_TransferConfig>
 8004136:	e011      	b.n	800415c <I2C_Mem_ISR_DMA+0x1cc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800413c:	b29a      	uxth	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004146:	b299      	uxth	r1, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800414c:	b2da      	uxtb	r2, r3
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f001 f854 	bl	8005204 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004160:	b29a      	uxth	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	b29a      	uxth	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b22      	cmp	r3, #34	; 0x22
 8004178:	d108      	bne.n	800418c <I2C_Mem_ISR_DMA+0x1fc>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004188:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800418a:	e018      	b.n	80041be <I2C_Mem_ISR_DMA+0x22e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800419a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800419c:	e00f      	b.n	80041be <I2C_Mem_ISR_DMA+0x22e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	095b      	lsrs	r3, r3, #5
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d009      	beq.n	80041be <I2C_Mem_ISR_DMA+0x22e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	095b      	lsrs	r3, r3, #5
 80041ae:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d003      	beq.n	80041be <I2C_Mem_ISR_DMA+0x22e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80041b6:	68b9      	ldr	r1, [r7, #8]
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f000 fab5 	bl	8004728 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3718      	adds	r7, #24
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	80002000 	.word	0x80002000
 80041d4:	80002400 	.word	0x80002400

080041d8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b088      	sub	sp, #32
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80041ea:	2300      	movs	r3, #0
 80041ec:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d101      	bne.n	80041fc <I2C_Slave_ISR_DMA+0x24>
 80041f8:	2302      	movs	r3, #2
 80041fa:	e0c9      	b.n	8004390 <I2C_Slave_ISR_DMA+0x1b8>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	095b      	lsrs	r3, r3, #5
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	2b00      	cmp	r3, #0
 800420e:	d009      	beq.n	8004224 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	095b      	lsrs	r3, r3, #5
 8004214:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004218:	2b00      	cmp	r3, #0
 800421a:	d003      	beq.n	8004224 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800421c:	68b9      	ldr	r1, [r7, #8]
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f000 fb4c 	bl	80048bc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	091b      	lsrs	r3, r3, #4
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	2b00      	cmp	r3, #0
 800422e:	f000 809a 	beq.w	8004366 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	091b      	lsrs	r3, r3, #4
 8004236:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800423a:	2b00      	cmp	r3, #0
 800423c:	f000 8093 	beq.w	8004366 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	0b9b      	lsrs	r3, r3, #14
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b00      	cmp	r3, #0
 800424a:	d105      	bne.n	8004258 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	0bdb      	lsrs	r3, r3, #15
 8004250:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004254:	2b00      	cmp	r3, #0
 8004256:	d07f      	beq.n	8004358 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00d      	beq.n	800427c <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	0bdb      	lsrs	r3, r3, #15
 8004264:	f003 0301 	and.w	r3, r3, #1
 8004268:	2b00      	cmp	r3, #0
 800426a:	d007      	beq.n	800427c <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d101      	bne.n	800427c <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8004278:	2301      	movs	r3, #1
 800427a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00d      	beq.n	80042a0 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	0b9b      	lsrs	r3, r3, #14
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	2b00      	cmp	r3, #0
 800428e:	d007      	beq.n	80042a0 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d101      	bne.n	80042a0 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 800429c:	2301      	movs	r3, #1
 800429e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d128      	bne.n	80042f8 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b28      	cmp	r3, #40	; 0x28
 80042b0:	d108      	bne.n	80042c4 <I2C_Slave_ISR_DMA+0xec>
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042b8:	d104      	bne.n	80042c4 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80042ba:	68b9      	ldr	r1, [r7, #8]
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f000 fc07 	bl	8004ad0 <I2C_ITListenCplt>
 80042c2:	e048      	b.n	8004356 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b29      	cmp	r3, #41	; 0x29
 80042ce:	d10e      	bne.n	80042ee <I2C_Slave_ISR_DMA+0x116>
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042d6:	d00a      	beq.n	80042ee <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2210      	movs	r2, #16
 80042de:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f000 fd42 	bl	8004d6a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f000 f9bf 	bl	800466a <I2C_ITSlaveSeqCplt>
 80042ec:	e033      	b.n	8004356 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2210      	movs	r2, #16
 80042f4:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80042f6:	e034      	b.n	8004362 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2210      	movs	r2, #16
 80042fe:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004304:	f043 0204 	orr.w	r2, r3, #4
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004312:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d003      	beq.n	8004322 <I2C_Slave_ISR_DMA+0x14a>
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004320:	d11f      	bne.n	8004362 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004322:	7dfb      	ldrb	r3, [r7, #23]
 8004324:	2b21      	cmp	r3, #33	; 0x21
 8004326:	d002      	beq.n	800432e <I2C_Slave_ISR_DMA+0x156>
 8004328:	7dfb      	ldrb	r3, [r7, #23]
 800432a:	2b29      	cmp	r3, #41	; 0x29
 800432c:	d103      	bne.n	8004336 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2221      	movs	r2, #33	; 0x21
 8004332:	631a      	str	r2, [r3, #48]	; 0x30
 8004334:	e008      	b.n	8004348 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004336:	7dfb      	ldrb	r3, [r7, #23]
 8004338:	2b22      	cmp	r3, #34	; 0x22
 800433a:	d002      	beq.n	8004342 <I2C_Slave_ISR_DMA+0x16a>
 800433c:	7dfb      	ldrb	r3, [r7, #23]
 800433e:	2b2a      	cmp	r3, #42	; 0x2a
 8004340:	d102      	bne.n	8004348 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2222      	movs	r2, #34	; 0x22
 8004346:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434c:	4619      	mov	r1, r3
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f000 fc14 	bl	8004b7c <I2C_ITError>
      if (treatdmanack == 1U)
 8004354:	e005      	b.n	8004362 <I2C_Slave_ISR_DMA+0x18a>
 8004356:	e004      	b.n	8004362 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2210      	movs	r2, #16
 800435e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004360:	e011      	b.n	8004386 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8004362:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004364:	e00f      	b.n	8004386 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	08db      	lsrs	r3, r3, #3
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b00      	cmp	r3, #0
 8004370:	d009      	beq.n	8004386 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	08db      	lsrs	r3, r3, #3
 8004376:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800437e:	68b9      	ldr	r1, [r7, #8]
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f000 f8b1 	bl	80044e8 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3720      	adds	r7, #32
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af02      	add	r7, sp, #8
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	4608      	mov	r0, r1
 80043a2:	4611      	mov	r1, r2
 80043a4:	461a      	mov	r2, r3
 80043a6:	4603      	mov	r3, r0
 80043a8:	817b      	strh	r3, [r7, #10]
 80043aa:	460b      	mov	r3, r1
 80043ac:	813b      	strh	r3, [r7, #8]
 80043ae:	4613      	mov	r3, r2
 80043b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80043b2:	88fb      	ldrh	r3, [r7, #6]
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	8979      	ldrh	r1, [r7, #10]
 80043b8:	4b20      	ldr	r3, [pc, #128]	; (800443c <I2C_RequestMemoryWrite+0xa4>)
 80043ba:	9300      	str	r3, [sp, #0]
 80043bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f000 ff1f 	bl	8005204 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043c6:	69fa      	ldr	r2, [r7, #28]
 80043c8:	69b9      	ldr	r1, [r7, #24]
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f000 fdb1 	bl	8004f32 <I2C_WaitOnTXISFlagUntilTimeout>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e02c      	b.n	8004434 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043da:	88fb      	ldrh	r3, [r7, #6]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d105      	bne.n	80043ec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043e0:	893b      	ldrh	r3, [r7, #8]
 80043e2:	b2da      	uxtb	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	629a      	str	r2, [r3, #40]	; 0x28
 80043ea:	e015      	b.n	8004418 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80043ec:	893b      	ldrh	r3, [r7, #8]
 80043ee:	0a1b      	lsrs	r3, r3, #8
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	b2da      	uxtb	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043fa:	69fa      	ldr	r2, [r7, #28]
 80043fc:	69b9      	ldr	r1, [r7, #24]
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f000 fd97 	bl	8004f32 <I2C_WaitOnTXISFlagUntilTimeout>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e012      	b.n	8004434 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800440e:	893b      	ldrh	r3, [r7, #8]
 8004410:	b2da      	uxtb	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	9300      	str	r3, [sp, #0]
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	2200      	movs	r2, #0
 8004420:	2180      	movs	r1, #128	; 0x80
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f000 fd45 	bl	8004eb2 <I2C_WaitOnFlagUntilTimeout>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e000      	b.n	8004434 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	80002000 	.word	0x80002000

08004440 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b086      	sub	sp, #24
 8004444:	af02      	add	r7, sp, #8
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	4608      	mov	r0, r1
 800444a:	4611      	mov	r1, r2
 800444c:	461a      	mov	r2, r3
 800444e:	4603      	mov	r3, r0
 8004450:	817b      	strh	r3, [r7, #10]
 8004452:	460b      	mov	r3, r1
 8004454:	813b      	strh	r3, [r7, #8]
 8004456:	4613      	mov	r3, r2
 8004458:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800445a:	88fb      	ldrh	r3, [r7, #6]
 800445c:	b2da      	uxtb	r2, r3
 800445e:	8979      	ldrh	r1, [r7, #10]
 8004460:	4b20      	ldr	r3, [pc, #128]	; (80044e4 <I2C_RequestMemoryRead+0xa4>)
 8004462:	9300      	str	r3, [sp, #0]
 8004464:	2300      	movs	r3, #0
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f000 fecc 	bl	8005204 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800446c:	69fa      	ldr	r2, [r7, #28]
 800446e:	69b9      	ldr	r1, [r7, #24]
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f000 fd5e 	bl	8004f32 <I2C_WaitOnTXISFlagUntilTimeout>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e02c      	b.n	80044da <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004480:	88fb      	ldrh	r3, [r7, #6]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d105      	bne.n	8004492 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004486:	893b      	ldrh	r3, [r7, #8]
 8004488:	b2da      	uxtb	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	629a      	str	r2, [r3, #40]	; 0x28
 8004490:	e015      	b.n	80044be <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004492:	893b      	ldrh	r3, [r7, #8]
 8004494:	0a1b      	lsrs	r3, r3, #8
 8004496:	b29b      	uxth	r3, r3
 8004498:	b2da      	uxtb	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044a0:	69fa      	ldr	r2, [r7, #28]
 80044a2:	69b9      	ldr	r1, [r7, #24]
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f000 fd44 	bl	8004f32 <I2C_WaitOnTXISFlagUntilTimeout>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d001      	beq.n	80044b4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e012      	b.n	80044da <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044b4:	893b      	ldrh	r3, [r7, #8]
 80044b6:	b2da      	uxtb	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	2200      	movs	r2, #0
 80044c6:	2140      	movs	r1, #64	; 0x40
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f000 fcf2 	bl	8004eb2 <I2C_WaitOnFlagUntilTimeout>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d001      	beq.n	80044d8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e000      	b.n	80044da <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	80002000 	.word	0x80002000

080044e8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80044fe:	2b28      	cmp	r3, #40	; 0x28
 8004500:	d16a      	bne.n	80045d8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	0c1b      	lsrs	r3, r3, #16
 800450a:	b2db      	uxtb	r3, r3
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	0c1b      	lsrs	r3, r3, #16
 800451a:	b29b      	uxth	r3, r3
 800451c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004520:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	b29b      	uxth	r3, r3
 800452a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800452e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	b29b      	uxth	r3, r3
 8004538:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800453c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	2b02      	cmp	r3, #2
 8004544:	d138      	bne.n	80045b8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004546:	897b      	ldrh	r3, [r7, #10]
 8004548:	09db      	lsrs	r3, r3, #7
 800454a:	b29a      	uxth	r2, r3
 800454c:	89bb      	ldrh	r3, [r7, #12]
 800454e:	4053      	eors	r3, r2
 8004550:	b29b      	uxth	r3, r3
 8004552:	f003 0306 	and.w	r3, r3, #6
 8004556:	2b00      	cmp	r3, #0
 8004558:	d11c      	bne.n	8004594 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800455a:	897b      	ldrh	r3, [r7, #10]
 800455c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004562:	1c5a      	adds	r2, r3, #1
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800456c:	2b02      	cmp	r3, #2
 800456e:	d13b      	bne.n	80045e8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2208      	movs	r2, #8
 800457c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004586:	89ba      	ldrh	r2, [r7, #12]
 8004588:	7bfb      	ldrb	r3, [r7, #15]
 800458a:	4619      	mov	r1, r3
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f7ff f9b2 	bl	80038f6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004592:	e029      	b.n	80045e8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004594:	893b      	ldrh	r3, [r7, #8]
 8004596:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004598:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 fecd 	bl	800533c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80045aa:	89ba      	ldrh	r2, [r7, #12]
 80045ac:	7bfb      	ldrb	r3, [r7, #15]
 80045ae:	4619      	mov	r1, r3
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f7ff f9a0 	bl	80038f6 <HAL_I2C_AddrCallback>
}
 80045b6:	e017      	b.n	80045e8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80045b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 febd 	bl	800533c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80045ca:	89ba      	ldrh	r2, [r7, #12]
 80045cc:	7bfb      	ldrb	r3, [r7, #15]
 80045ce:	4619      	mov	r1, r3
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f7ff f990 	bl	80038f6 <HAL_I2C_AddrCallback>
}
 80045d6:	e007      	b.n	80045e8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2208      	movs	r2, #8
 80045de:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80045e8:	bf00      	nop
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b21      	cmp	r3, #33	; 0x21
 800460a:	d115      	bne.n	8004638 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2220      	movs	r2, #32
 8004610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2211      	movs	r2, #17
 8004618:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004620:	2101      	movs	r1, #1
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 fe8a 	bl	800533c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f7ff f938 	bl	80038a6 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004636:	e014      	b.n	8004662 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2220      	movs	r2, #32
 800463c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2212      	movs	r2, #18
 8004644:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800464c:	2102      	movs	r1, #2
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 fe74 	bl	800533c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f7ff f92c 	bl	80038ba <HAL_I2C_MasterRxCpltCallback>
}
 8004662:	bf00      	nop
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b084      	sub	sp, #16
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	0b9b      	lsrs	r3, r3, #14
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	d008      	beq.n	80046a0 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800469c:	601a      	str	r2, [r3, #0]
 800469e:	e00d      	b.n	80046bc <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	0bdb      	lsrs	r3, r3, #15
 80046a4:	f003 0301 	and.w	r3, r3, #1
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d007      	beq.n	80046bc <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046ba:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	2b29      	cmp	r3, #41	; 0x29
 80046c6:	d112      	bne.n	80046ee <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2228      	movs	r2, #40	; 0x28
 80046cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2221      	movs	r2, #33	; 0x21
 80046d4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80046d6:	2101      	movs	r1, #1
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 fe2f 	bl	800533c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f7ff f8f1 	bl	80038ce <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80046ec:	e017      	b.n	800471e <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b2a      	cmp	r3, #42	; 0x2a
 80046f8:	d111      	bne.n	800471e <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2228      	movs	r2, #40	; 0x28
 80046fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2222      	movs	r2, #34	; 0x22
 8004706:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004708:	2102      	movs	r1, #2
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 fe16 	bl	800533c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f7ff f8e2 	bl	80038e2 <HAL_I2C_SlaveRxCpltCallback>
}
 800471e:	bf00      	nop
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
	...

08004728 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b086      	sub	sp, #24
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2220      	movs	r2, #32
 800473c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b21      	cmp	r3, #33	; 0x21
 8004748:	d107      	bne.n	800475a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800474a:	2101      	movs	r1, #1
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 fdf5 	bl	800533c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2211      	movs	r2, #17
 8004756:	631a      	str	r2, [r3, #48]	; 0x30
 8004758:	e00c      	b.n	8004774 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b22      	cmp	r3, #34	; 0x22
 8004764:	d106      	bne.n	8004774 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004766:	2102      	movs	r1, #2
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 fde7 	bl	800533c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2212      	movs	r2, #18
 8004772:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6859      	ldr	r1, [r3, #4]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	4b4d      	ldr	r3, [pc, #308]	; (80048b4 <I2C_ITMasterCplt+0x18c>)
 8004780:	400b      	ands	r3, r1
 8004782:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a4a      	ldr	r2, [pc, #296]	; (80048b8 <I2C_ITMasterCplt+0x190>)
 800478e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	091b      	lsrs	r3, r3, #4
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	2b00      	cmp	r3, #0
 800479a:	d009      	beq.n	80047b0 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2210      	movs	r2, #16
 80047a2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a8:	f043 0204 	orr.w	r2, r3, #4
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	2b60      	cmp	r3, #96	; 0x60
 80047ba:	d10b      	bne.n	80047d4 <I2C_ITMasterCplt+0xac>
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	089b      	lsrs	r3, r3, #2
 80047c0:	f003 0301 	and.w	r3, r3, #1
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d005      	beq.n	80047d4 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80047d2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 fac8 	bl	8004d6a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047de:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b60      	cmp	r3, #96	; 0x60
 80047ea:	d002      	beq.n	80047f2 <I2C_ITMasterCplt+0xca>
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d006      	beq.n	8004800 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f6:	4619      	mov	r1, r3
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 f9bf 	bl	8004b7c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80047fe:	e054      	b.n	80048aa <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004806:	b2db      	uxtb	r3, r3
 8004808:	2b21      	cmp	r3, #33	; 0x21
 800480a:	d124      	bne.n	8004856 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2220      	movs	r2, #32
 8004810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b40      	cmp	r3, #64	; 0x40
 8004824:	d10b      	bne.n	800483e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7fd f84a 	bl	80018d0 <HAL_I2C_MemTxCpltCallback>
}
 800483c:	e035      	b.n	80048aa <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f7ff f829 	bl	80038a6 <HAL_I2C_MasterTxCpltCallback>
}
 8004854:	e029      	b.n	80048aa <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b22      	cmp	r3, #34	; 0x22
 8004860:	d123      	bne.n	80048aa <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2220      	movs	r2, #32
 8004866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004876:	b2db      	uxtb	r3, r3
 8004878:	2b40      	cmp	r3, #64	; 0x40
 800487a:	d10b      	bne.n	8004894 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f7fc ffe5 	bl	800185c <HAL_I2C_MemRxCpltCallback>
}
 8004892:	e00a      	b.n	80048aa <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f7ff f808 	bl	80038ba <HAL_I2C_MasterRxCpltCallback>
}
 80048aa:	bf00      	nop
 80048ac:	3718      	adds	r7, #24
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	fe00e800 	.word	0xfe00e800
 80048b8:	ffff0000 	.word	0xffff0000

080048bc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048d8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2220      	movs	r2, #32
 80048e0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80048e2:	7bfb      	ldrb	r3, [r7, #15]
 80048e4:	2b21      	cmp	r3, #33	; 0x21
 80048e6:	d002      	beq.n	80048ee <I2C_ITSlaveCplt+0x32>
 80048e8:	7bfb      	ldrb	r3, [r7, #15]
 80048ea:	2b29      	cmp	r3, #41	; 0x29
 80048ec:	d108      	bne.n	8004900 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80048ee:	f248 0101 	movw	r1, #32769	; 0x8001
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 fd22 	bl	800533c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2221      	movs	r2, #33	; 0x21
 80048fc:	631a      	str	r2, [r3, #48]	; 0x30
 80048fe:	e00d      	b.n	800491c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004900:	7bfb      	ldrb	r3, [r7, #15]
 8004902:	2b22      	cmp	r3, #34	; 0x22
 8004904:	d002      	beq.n	800490c <I2C_ITSlaveCplt+0x50>
 8004906:	7bfb      	ldrb	r3, [r7, #15]
 8004908:	2b2a      	cmp	r3, #42	; 0x2a
 800490a:	d107      	bne.n	800491c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800490c:	f248 0102 	movw	r1, #32770	; 0x8002
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 fd13 	bl	800533c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2222      	movs	r2, #34	; 0x22
 800491a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	685a      	ldr	r2, [r3, #4]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800492a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	6859      	ldr	r1, [r3, #4]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	4b64      	ldr	r3, [pc, #400]	; (8004ac8 <I2C_ITSlaveCplt+0x20c>)
 8004938:	400b      	ands	r3, r1
 800493a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 fa14 	bl	8004d6a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	0b9b      	lsrs	r3, r3, #14
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	d013      	beq.n	8004976 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800495c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004962:	2b00      	cmp	r3, #0
 8004964:	d020      	beq.n	80049a8 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	b29a      	uxth	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004974:	e018      	b.n	80049a8 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	0bdb      	lsrs	r3, r3, #15
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	2b00      	cmp	r3, #0
 8004980:	d012      	beq.n	80049a8 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004990:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004996:	2b00      	cmp	r3, #0
 8004998:	d006      	beq.n	80049a8 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	089b      	lsrs	r3, r3, #2
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d020      	beq.n	80049f6 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	f023 0304 	bic.w	r3, r3, #4
 80049ba:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c6:	b2d2      	uxtb	r2, r2
 80049c8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ce:	1c5a      	adds	r2, r3, #1
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00c      	beq.n	80049f6 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e0:	3b01      	subs	r3, #1
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	3b01      	subs	r3, #1
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d005      	beq.n	8004a0c <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a04:	f043 0204 	orr.w	r2, r3, #4
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d010      	beq.n	8004a44 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a26:	4619      	mov	r1, r3
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 f8a7 	bl	8004b7c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	2b28      	cmp	r3, #40	; 0x28
 8004a38:	d141      	bne.n	8004abe <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004a3a:	6979      	ldr	r1, [r7, #20]
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f847 	bl	8004ad0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a42:	e03c      	b.n	8004abe <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a4c:	d014      	beq.n	8004a78 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7ff fe0b 	bl	800466a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a1d      	ldr	r2, [pc, #116]	; (8004acc <I2C_ITSlaveCplt+0x210>)
 8004a58:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2220      	movs	r2, #32
 8004a5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7fe ff4e 	bl	8003912 <HAL_I2C_ListenCpltCallback>
}
 8004a76:	e022      	b.n	8004abe <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b22      	cmp	r3, #34	; 0x22
 8004a82:	d10e      	bne.n	8004aa2 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2220      	movs	r2, #32
 8004a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f7fe ff21 	bl	80038e2 <HAL_I2C_SlaveRxCpltCallback>
}
 8004aa0:	e00d      	b.n	8004abe <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2220      	movs	r2, #32
 8004aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f7fe ff08 	bl	80038ce <HAL_I2C_SlaveTxCpltCallback>
}
 8004abe:	bf00      	nop
 8004ac0:	3718      	adds	r7, #24
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	fe00e800 	.word	0xfe00e800
 8004acc:	ffff0000 	.word	0xffff0000

08004ad0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a26      	ldr	r2, [pc, #152]	; (8004b78 <I2C_ITListenCplt+0xa8>)
 8004ade:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2220      	movs	r2, #32
 8004aea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	089b      	lsrs	r3, r3, #2
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d022      	beq.n	8004b4e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b12:	b2d2      	uxtb	r2, r2
 8004b14:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1a:	1c5a      	adds	r2, r3, #1
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d012      	beq.n	8004b4e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	b29a      	uxth	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b46:	f043 0204 	orr.w	r2, r3, #4
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004b4e:	f248 0103 	movw	r1, #32771	; 0x8003
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 fbf2 	bl	800533c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2210      	movs	r2, #16
 8004b5e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f7fe fed2 	bl	8003912 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004b6e:	bf00      	nop
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	ffff0000 	.word	0xffff0000

08004b7c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a5d      	ldr	r2, [pc, #372]	; (8004d10 <I2C_ITError+0x194>)
 8004b9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	431a      	orrs	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004bae:	7bfb      	ldrb	r3, [r7, #15]
 8004bb0:	2b28      	cmp	r3, #40	; 0x28
 8004bb2:	d005      	beq.n	8004bc0 <I2C_ITError+0x44>
 8004bb4:	7bfb      	ldrb	r3, [r7, #15]
 8004bb6:	2b29      	cmp	r3, #41	; 0x29
 8004bb8:	d002      	beq.n	8004bc0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004bba:	7bfb      	ldrb	r3, [r7, #15]
 8004bbc:	2b2a      	cmp	r3, #42	; 0x2a
 8004bbe:	d10b      	bne.n	8004bd8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004bc0:	2103      	movs	r1, #3
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 fbba 	bl	800533c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2228      	movs	r2, #40	; 0x28
 8004bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a50      	ldr	r2, [pc, #320]	; (8004d14 <I2C_ITError+0x198>)
 8004bd4:	635a      	str	r2, [r3, #52]	; 0x34
 8004bd6:	e011      	b.n	8004bfc <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004bd8:	f248 0103 	movw	r1, #32771	; 0x8003
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 fbad 	bl	800533c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	2b60      	cmp	r3, #96	; 0x60
 8004bec:	d003      	beq.n	8004bf6 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c00:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d039      	beq.n	8004c7e <I2C_ITError+0x102>
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	2b11      	cmp	r3, #17
 8004c0e:	d002      	beq.n	8004c16 <I2C_ITError+0x9a>
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	2b21      	cmp	r3, #33	; 0x21
 8004c14:	d133      	bne.n	8004c7e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c24:	d107      	bne.n	8004c36 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c34:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7fd fe4a 	bl	80028d4 <HAL_DMA_GetState>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d017      	beq.n	8004c76 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4a:	4a33      	ldr	r2, [pc, #204]	; (8004d18 <I2C_ITError+0x19c>)
 8004c4c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7fd fd4a 	bl	80026f4 <HAL_DMA_Abort_IT>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d04d      	beq.n	8004d02 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c70:	4610      	mov	r0, r2
 8004c72:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004c74:	e045      	b.n	8004d02 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f850 	bl	8004d1c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004c7c:	e041      	b.n	8004d02 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d039      	beq.n	8004cfa <I2C_ITError+0x17e>
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	2b12      	cmp	r3, #18
 8004c8a:	d002      	beq.n	8004c92 <I2C_ITError+0x116>
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	2b22      	cmp	r3, #34	; 0x22
 8004c90:	d133      	bne.n	8004cfa <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ca0:	d107      	bne.n	8004cb2 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004cb0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7fd fe0c 	bl	80028d4 <HAL_DMA_GetState>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d017      	beq.n	8004cf2 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc6:	4a14      	ldr	r2, [pc, #80]	; (8004d18 <I2C_ITError+0x19c>)
 8004cc8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7fd fd0c 	bl	80026f4 <HAL_DMA_Abort_IT>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d011      	beq.n	8004d06 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004cec:	4610      	mov	r0, r2
 8004cee:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004cf0:	e009      	b.n	8004d06 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f812 	bl	8004d1c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004cf8:	e005      	b.n	8004d06 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f80e 	bl	8004d1c <I2C_TreatErrorCallback>
  }
}
 8004d00:	e002      	b.n	8004d08 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004d02:	bf00      	nop
 8004d04:	e000      	b.n	8004d08 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d06:	bf00      	nop
}
 8004d08:	bf00      	nop
 8004d0a:	3710      	adds	r7, #16
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	ffff0000 	.word	0xffff0000
 8004d14:	08003ba5 	.word	0x08003ba5
 8004d18:	08004e77 	.word	0x08004e77

08004d1c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	2b60      	cmp	r3, #96	; 0x60
 8004d2e:	d10e      	bne.n	8004d4e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2220      	movs	r2, #32
 8004d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f7fe fdf7 	bl	800393a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d4c:	e009      	b.n	8004d62 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f7fe fde2 	bl	8003926 <HAL_I2C_ErrorCallback>
}
 8004d62:	bf00      	nop
 8004d64:	3708      	adds	r7, #8
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b083      	sub	sp, #12
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	699b      	ldr	r3, [r3, #24]
 8004d78:	f003 0302 	and.w	r3, r3, #2
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d103      	bne.n	8004d88 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2200      	movs	r2, #0
 8004d86:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d007      	beq.n	8004da6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	699a      	ldr	r2, [r3, #24]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f042 0201 	orr.w	r2, r2, #1
 8004da4:	619a      	str	r2, [r3, #24]
  }
}
 8004da6:	bf00      	nop
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr

08004db2 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b084      	sub	sp, #16
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dbe:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004dce:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d104      	bne.n	8004de4 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004dda:	2120      	movs	r1, #32
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f000 fa43 	bl	8005268 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8004de2:	e02d      	b.n	8004e40 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8004dec:	441a      	add	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	2bff      	cmp	r3, #255	; 0xff
 8004dfa:	d903      	bls.n	8004e04 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	22ff      	movs	r2, #255	; 0xff
 8004e00:	851a      	strh	r2, [r3, #40]	; 0x28
 8004e02:	e004      	b.n	8004e0e <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	3324      	adds	r3, #36	; 0x24
 8004e18:	4619      	mov	r1, r3
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1e:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8004e24:	f7fd fc06 	bl	8002634 <HAL_DMA_Start_IT>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d004      	beq.n	8004e38 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004e2e:	2110      	movs	r1, #16
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f7ff fea3 	bl	8004b7c <I2C_ITError>
}
 8004e36:	e003      	b.n	8004e40 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8004e38:	2140      	movs	r1, #64	; 0x40
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f000 fa14 	bl	8005268 <I2C_Enable_IRQ>
}
 8004e40:	bf00      	nop
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e54:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	685a      	ldr	r2, [r3, #4]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e64:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004e66:	2110      	movs	r1, #16
 8004e68:	68f8      	ldr	r0, [r7, #12]
 8004e6a:	f7ff fe87 	bl	8004b7c <I2C_ITError>
}
 8004e6e:	bf00      	nop
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b084      	sub	sp, #16
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e82:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d003      	beq.n	8004e94 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e90:	2200      	movs	r2, #0
 8004e92:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d003      	beq.n	8004ea4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	f7ff ff39 	bl	8004d1c <I2C_TreatErrorCallback>
}
 8004eaa:	bf00      	nop
 8004eac:	3710      	adds	r7, #16
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b084      	sub	sp, #16
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	60f8      	str	r0, [r7, #12]
 8004eba:	60b9      	str	r1, [r7, #8]
 8004ebc:	603b      	str	r3, [r7, #0]
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ec2:	e022      	b.n	8004f0a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eca:	d01e      	beq.n	8004f0a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ecc:	f7fd f9dc 	bl	8002288 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d302      	bcc.n	8004ee2 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d113      	bne.n	8004f0a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ee6:	f043 0220 	orr.w	r2, r3, #32
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2220      	movs	r2, #32
 8004ef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e00f      	b.n	8004f2a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	699a      	ldr	r2, [r3, #24]
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	4013      	ands	r3, r2
 8004f14:	68ba      	ldr	r2, [r7, #8]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	bf0c      	ite	eq
 8004f1a:	2301      	moveq	r3, #1
 8004f1c:	2300      	movne	r3, #0
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	461a      	mov	r2, r3
 8004f22:	79fb      	ldrb	r3, [r7, #7]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d0cd      	beq.n	8004ec4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b084      	sub	sp, #16
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	60f8      	str	r0, [r7, #12]
 8004f3a:	60b9      	str	r1, [r7, #8]
 8004f3c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f3e:	e02c      	b.n	8004f9a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	68b9      	ldr	r1, [r7, #8]
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	f000 f871 	bl	800502c <I2C_IsErrorOccurred>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d001      	beq.n	8004f54 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e02a      	b.n	8004faa <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f5a:	d01e      	beq.n	8004f9a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f5c:	f7fd f994 	bl	8002288 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	68ba      	ldr	r2, [r7, #8]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d302      	bcc.n	8004f72 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d113      	bne.n	8004f9a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f76:	f043 0220 	orr.w	r2, r3, #32
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2220      	movs	r2, #32
 8004f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e007      	b.n	8004faa <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	f003 0302 	and.w	r3, r3, #2
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d1cb      	bne.n	8004f40 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b084      	sub	sp, #16
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	60f8      	str	r0, [r7, #12]
 8004fba:	60b9      	str	r1, [r7, #8]
 8004fbc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fbe:	e028      	b.n	8005012 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	68b9      	ldr	r1, [r7, #8]
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f000 f831 	bl	800502c <I2C_IsErrorOccurred>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d001      	beq.n	8004fd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e026      	b.n	8005022 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fd4:	f7fd f958 	bl	8002288 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	68ba      	ldr	r2, [r7, #8]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d302      	bcc.n	8004fea <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d113      	bne.n	8005012 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fee:	f043 0220 	orr.w	r2, r3, #32
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2220      	movs	r2, #32
 8004ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e007      	b.n	8005022 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	f003 0320 	and.w	r3, r3, #32
 800501c:	2b20      	cmp	r3, #32
 800501e:	d1cf      	bne.n	8004fc0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
	...

0800502c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b08a      	sub	sp, #40	; 0x28
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005038:	2300      	movs	r3, #0
 800503a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005046:	2300      	movs	r3, #0
 8005048:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	f003 0310 	and.w	r3, r3, #16
 8005054:	2b00      	cmp	r3, #0
 8005056:	d075      	beq.n	8005144 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2210      	movs	r2, #16
 800505e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005060:	e056      	b.n	8005110 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005068:	d052      	beq.n	8005110 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800506a:	f7fd f90d 	bl	8002288 <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	68ba      	ldr	r2, [r7, #8]
 8005076:	429a      	cmp	r2, r3
 8005078:	d302      	bcc.n	8005080 <I2C_IsErrorOccurred+0x54>
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d147      	bne.n	8005110 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800508a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005092:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800509e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050a2:	d12e      	bne.n	8005102 <I2C_IsErrorOccurred+0xd6>
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050aa:	d02a      	beq.n	8005102 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80050ac:	7cfb      	ldrb	r3, [r7, #19]
 80050ae:	2b20      	cmp	r3, #32
 80050b0:	d027      	beq.n	8005102 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	685a      	ldr	r2, [r3, #4]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050c0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80050c2:	f7fd f8e1 	bl	8002288 <HAL_GetTick>
 80050c6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050c8:	e01b      	b.n	8005102 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80050ca:	f7fd f8dd 	bl	8002288 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	2b19      	cmp	r3, #25
 80050d6:	d914      	bls.n	8005102 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050dc:	f043 0220 	orr.w	r2, r3, #32
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2220      	movs	r2, #32
 80050e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	699b      	ldr	r3, [r3, #24]
 8005108:	f003 0320 	and.w	r3, r3, #32
 800510c:	2b20      	cmp	r3, #32
 800510e:	d1dc      	bne.n	80050ca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	f003 0320 	and.w	r3, r3, #32
 800511a:	2b20      	cmp	r3, #32
 800511c:	d003      	beq.n	8005126 <I2C_IsErrorOccurred+0xfa>
 800511e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005122:	2b00      	cmp	r3, #0
 8005124:	d09d      	beq.n	8005062 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005126:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800512a:	2b00      	cmp	r3, #0
 800512c:	d103      	bne.n	8005136 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2220      	movs	r2, #32
 8005134:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005136:	6a3b      	ldr	r3, [r7, #32]
 8005138:	f043 0304 	orr.w	r3, r3, #4
 800513c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00b      	beq.n	800516e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005156:	6a3b      	ldr	r3, [r7, #32]
 8005158:	f043 0301 	orr.w	r3, r3, #1
 800515c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005166:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005174:	2b00      	cmp	r3, #0
 8005176:	d00b      	beq.n	8005190 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005178:	6a3b      	ldr	r3, [r7, #32]
 800517a:	f043 0308 	orr.w	r3, r3, #8
 800517e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005188:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00b      	beq.n	80051b2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800519a:	6a3b      	ldr	r3, [r7, #32]
 800519c:	f043 0302 	orr.w	r3, r3, #2
 80051a0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80051b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d01c      	beq.n	80051f4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	f7ff fdd5 	bl	8004d6a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	6859      	ldr	r1, [r3, #4]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	4b0d      	ldr	r3, [pc, #52]	; (8005200 <I2C_IsErrorOccurred+0x1d4>)
 80051cc:	400b      	ands	r3, r1
 80051ce:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051d4:	6a3b      	ldr	r3, [r7, #32]
 80051d6:	431a      	orrs	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2220      	movs	r2, #32
 80051e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80051f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3728      	adds	r7, #40	; 0x28
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	fe00e800 	.word	0xfe00e800

08005204 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005204:	b480      	push	{r7}
 8005206:	b087      	sub	sp, #28
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	607b      	str	r3, [r7, #4]
 800520e:	460b      	mov	r3, r1
 8005210:	817b      	strh	r3, [r7, #10]
 8005212:	4613      	mov	r3, r2
 8005214:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005216:	897b      	ldrh	r3, [r7, #10]
 8005218:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800521c:	7a7b      	ldrb	r3, [r7, #9]
 800521e:	041b      	lsls	r3, r3, #16
 8005220:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005224:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800522a:	6a3b      	ldr	r3, [r7, #32]
 800522c:	4313      	orrs	r3, r2
 800522e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005232:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	685a      	ldr	r2, [r3, #4]
 800523a:	6a3b      	ldr	r3, [r7, #32]
 800523c:	0d5b      	lsrs	r3, r3, #21
 800523e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005242:	4b08      	ldr	r3, [pc, #32]	; (8005264 <I2C_TransferConfig+0x60>)
 8005244:	430b      	orrs	r3, r1
 8005246:	43db      	mvns	r3, r3
 8005248:	ea02 0103 	and.w	r1, r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	430a      	orrs	r2, r1
 8005254:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005256:	bf00      	nop
 8005258:	371c      	adds	r7, #28
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	03ff63ff 	.word	0x03ff63ff

08005268 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	460b      	mov	r3, r1
 8005272:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005274:	2300      	movs	r3, #0
 8005276:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800527c:	4a2d      	ldr	r2, [pc, #180]	; (8005334 <I2C_Enable_IRQ+0xcc>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d004      	beq.n	800528c <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8005286:	4a2c      	ldr	r2, [pc, #176]	; (8005338 <I2C_Enable_IRQ+0xd0>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d11d      	bne.n	80052c8 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800528c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005290:	2b00      	cmp	r3, #0
 8005292:	da03      	bge.n	800529c <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800529a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800529c:	887b      	ldrh	r3, [r7, #2]
 800529e:	2b10      	cmp	r3, #16
 80052a0:	d103      	bne.n	80052aa <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80052a8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80052aa:	887b      	ldrh	r3, [r7, #2]
 80052ac:	2b20      	cmp	r3, #32
 80052ae:	d103      	bne.n	80052b8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80052b6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80052b8:	887b      	ldrh	r3, [r7, #2]
 80052ba:	2b40      	cmp	r3, #64	; 0x40
 80052bc:	d12c      	bne.n	8005318 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052c4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80052c6:	e027      	b.n	8005318 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80052c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	da03      	bge.n	80052d8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80052d6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80052d8:	887b      	ldrh	r3, [r7, #2]
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d003      	beq.n	80052ea <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80052e8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80052ea:	887b      	ldrh	r3, [r7, #2]
 80052ec:	f003 0302 	and.w	r3, r3, #2
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d003      	beq.n	80052fc <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80052fa:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80052fc:	887b      	ldrh	r3, [r7, #2]
 80052fe:	2b10      	cmp	r3, #16
 8005300:	d103      	bne.n	800530a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005308:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800530a:	887b      	ldrh	r3, [r7, #2]
 800530c:	2b20      	cmp	r3, #32
 800530e:	d103      	bne.n	8005318 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f043 0320 	orr.w	r3, r3, #32
 8005316:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6819      	ldr	r1, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	430a      	orrs	r2, r1
 8005326:	601a      	str	r2, [r3, #0]
}
 8005328:	bf00      	nop
 800532a:	3714      	adds	r7, #20
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr
 8005334:	08003dab 	.word	0x08003dab
 8005338:	080041d9 	.word	0x080041d9

0800533c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	460b      	mov	r3, r1
 8005346:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005348:	2300      	movs	r3, #0
 800534a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800534c:	887b      	ldrh	r3, [r7, #2]
 800534e:	f003 0301 	and.w	r3, r3, #1
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00f      	beq.n	8005376 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800535c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005364:	b2db      	uxtb	r3, r3
 8005366:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800536a:	2b28      	cmp	r3, #40	; 0x28
 800536c:	d003      	beq.n	8005376 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005374:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005376:	887b      	ldrh	r3, [r7, #2]
 8005378:	f003 0302 	and.w	r3, r3, #2
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00f      	beq.n	80053a0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8005386:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800538e:	b2db      	uxtb	r3, r3
 8005390:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005394:	2b28      	cmp	r3, #40	; 0x28
 8005396:	d003      	beq.n	80053a0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800539e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80053a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	da03      	bge.n	80053b0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80053ae:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80053b0:	887b      	ldrh	r3, [r7, #2]
 80053b2:	2b10      	cmp	r3, #16
 80053b4:	d103      	bne.n	80053be <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80053bc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80053be:	887b      	ldrh	r3, [r7, #2]
 80053c0:	2b20      	cmp	r3, #32
 80053c2:	d103      	bne.n	80053cc <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f043 0320 	orr.w	r3, r3, #32
 80053ca:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80053cc:	887b      	ldrh	r3, [r7, #2]
 80053ce:	2b40      	cmp	r3, #64	; 0x40
 80053d0:	d103      	bne.n	80053da <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053d8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	6819      	ldr	r1, [r3, #0]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	43da      	mvns	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	400a      	ands	r2, r1
 80053ea:	601a      	str	r2, [r3, #0]
}
 80053ec:	bf00      	nop
 80053ee:	3714      	adds	r7, #20
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005408:	b2db      	uxtb	r3, r3
 800540a:	2b20      	cmp	r3, #32
 800540c:	d138      	bne.n	8005480 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005414:	2b01      	cmp	r3, #1
 8005416:	d101      	bne.n	800541c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005418:	2302      	movs	r3, #2
 800541a:	e032      	b.n	8005482 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2224      	movs	r2, #36	; 0x24
 8005428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f022 0201 	bic.w	r2, r2, #1
 800543a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800544a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6819      	ldr	r1, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	683a      	ldr	r2, [r7, #0]
 8005458:	430a      	orrs	r2, r1
 800545a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f042 0201 	orr.w	r2, r2, #1
 800546a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2220      	movs	r2, #32
 8005470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800547c:	2300      	movs	r3, #0
 800547e:	e000      	b.n	8005482 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005480:	2302      	movs	r3, #2
  }
}
 8005482:	4618      	mov	r0, r3
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr

0800548e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800548e:	b480      	push	{r7}
 8005490:	b085      	sub	sp, #20
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
 8005496:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	2b20      	cmp	r3, #32
 80054a2:	d139      	bne.n	8005518 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d101      	bne.n	80054b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80054ae:	2302      	movs	r3, #2
 80054b0:	e033      	b.n	800551a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2224      	movs	r2, #36	; 0x24
 80054be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f022 0201 	bic.w	r2, r2, #1
 80054d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80054e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	021b      	lsls	r3, r3, #8
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f042 0201 	orr.w	r2, r2, #1
 8005502:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2220      	movs	r2, #32
 8005508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005514:	2300      	movs	r3, #0
 8005516:	e000      	b.n	800551a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005518:	2302      	movs	r3, #2
  }
}
 800551a:	4618      	mov	r0, r3
 800551c:	3714      	adds	r7, #20
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
	...

08005528 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005530:	4b0b      	ldr	r3, [pc, #44]	; (8005560 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8005532:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005534:	4a0a      	ldr	r2, [pc, #40]	; (8005560 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8005536:	f043 0301 	orr.w	r3, r3, #1
 800553a:	6613      	str	r3, [r2, #96]	; 0x60
 800553c:	4b08      	ldr	r3, [pc, #32]	; (8005560 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800553e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005540:	f003 0301 	and.w	r3, r3, #1
 8005544:	60fb      	str	r3, [r7, #12]
 8005546:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8005548:	4b06      	ldr	r3, [pc, #24]	; (8005564 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800554a:	685a      	ldr	r2, [r3, #4]
 800554c:	4905      	ldr	r1, [pc, #20]	; (8005564 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4313      	orrs	r3, r2
 8005552:	604b      	str	r3, [r1, #4]
}
 8005554:	bf00      	nop
 8005556:	3714      	adds	r7, #20
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr
 8005560:	40021000 	.word	0x40021000
 8005564:	40010000 	.word	0x40010000

08005568 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005568:	b480      	push	{r7}
 800556a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800556c:	4b04      	ldr	r3, [pc, #16]	; (8005580 <HAL_PWREx_GetVoltageRange+0x18>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005574:	4618      	mov	r0, r3
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	40007000 	.word	0x40007000

08005584 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005592:	d130      	bne.n	80055f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005594:	4b23      	ldr	r3, [pc, #140]	; (8005624 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800559c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055a0:	d038      	beq.n	8005614 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80055a2:	4b20      	ldr	r3, [pc, #128]	; (8005624 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80055aa:	4a1e      	ldr	r2, [pc, #120]	; (8005624 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80055ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80055b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80055b2:	4b1d      	ldr	r3, [pc, #116]	; (8005628 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2232      	movs	r2, #50	; 0x32
 80055b8:	fb02 f303 	mul.w	r3, r2, r3
 80055bc:	4a1b      	ldr	r2, [pc, #108]	; (800562c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80055be:	fba2 2303 	umull	r2, r3, r2, r3
 80055c2:	0c9b      	lsrs	r3, r3, #18
 80055c4:	3301      	adds	r3, #1
 80055c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80055c8:	e002      	b.n	80055d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	3b01      	subs	r3, #1
 80055ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80055d0:	4b14      	ldr	r3, [pc, #80]	; (8005624 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80055d2:	695b      	ldr	r3, [r3, #20]
 80055d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055dc:	d102      	bne.n	80055e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1f2      	bne.n	80055ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80055e4:	4b0f      	ldr	r3, [pc, #60]	; (8005624 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80055e6:	695b      	ldr	r3, [r3, #20]
 80055e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055f0:	d110      	bne.n	8005614 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e00f      	b.n	8005616 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80055f6:	4b0b      	ldr	r3, [pc, #44]	; (8005624 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80055fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005602:	d007      	beq.n	8005614 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005604:	4b07      	ldr	r3, [pc, #28]	; (8005624 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800560c:	4a05      	ldr	r2, [pc, #20]	; (8005624 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800560e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005612:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3714      	adds	r7, #20
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	40007000 	.word	0x40007000
 8005628:	20000000 	.word	0x20000000
 800562c:	431bde83 	.word	0x431bde83

08005630 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b088      	sub	sp, #32
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d101      	bne.n	8005642 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e3ca      	b.n	8005dd8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005642:	4b97      	ldr	r3, [pc, #604]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f003 030c 	and.w	r3, r3, #12
 800564a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800564c:	4b94      	ldr	r3, [pc, #592]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	f003 0303 	and.w	r3, r3, #3
 8005654:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0310 	and.w	r3, r3, #16
 800565e:	2b00      	cmp	r3, #0
 8005660:	f000 80e4 	beq.w	800582c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d007      	beq.n	800567a <HAL_RCC_OscConfig+0x4a>
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	2b0c      	cmp	r3, #12
 800566e:	f040 808b 	bne.w	8005788 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	2b01      	cmp	r3, #1
 8005676:	f040 8087 	bne.w	8005788 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800567a:	4b89      	ldr	r3, [pc, #548]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0302 	and.w	r3, r3, #2
 8005682:	2b00      	cmp	r3, #0
 8005684:	d005      	beq.n	8005692 <HAL_RCC_OscConfig+0x62>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d101      	bne.n	8005692 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e3a2      	b.n	8005dd8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a1a      	ldr	r2, [r3, #32]
 8005696:	4b82      	ldr	r3, [pc, #520]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0308 	and.w	r3, r3, #8
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d004      	beq.n	80056ac <HAL_RCC_OscConfig+0x7c>
 80056a2:	4b7f      	ldr	r3, [pc, #508]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056aa:	e005      	b.n	80056b8 <HAL_RCC_OscConfig+0x88>
 80056ac:	4b7c      	ldr	r3, [pc, #496]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 80056ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056b2:	091b      	lsrs	r3, r3, #4
 80056b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d223      	bcs.n	8005704 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	4618      	mov	r0, r3
 80056c2:	f000 fd55 	bl	8006170 <RCC_SetFlashLatencyFromMSIRange>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d001      	beq.n	80056d0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e383      	b.n	8005dd8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80056d0:	4b73      	ldr	r3, [pc, #460]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a72      	ldr	r2, [pc, #456]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 80056d6:	f043 0308 	orr.w	r3, r3, #8
 80056da:	6013      	str	r3, [r2, #0]
 80056dc:	4b70      	ldr	r3, [pc, #448]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a1b      	ldr	r3, [r3, #32]
 80056e8:	496d      	ldr	r1, [pc, #436]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056ee:	4b6c      	ldr	r3, [pc, #432]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	021b      	lsls	r3, r3, #8
 80056fc:	4968      	ldr	r1, [pc, #416]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	604b      	str	r3, [r1, #4]
 8005702:	e025      	b.n	8005750 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005704:	4b66      	ldr	r3, [pc, #408]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a65      	ldr	r2, [pc, #404]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 800570a:	f043 0308 	orr.w	r3, r3, #8
 800570e:	6013      	str	r3, [r2, #0]
 8005710:	4b63      	ldr	r3, [pc, #396]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6a1b      	ldr	r3, [r3, #32]
 800571c:	4960      	ldr	r1, [pc, #384]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 800571e:	4313      	orrs	r3, r2
 8005720:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005722:	4b5f      	ldr	r3, [pc, #380]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	69db      	ldr	r3, [r3, #28]
 800572e:	021b      	lsls	r3, r3, #8
 8005730:	495b      	ldr	r1, [pc, #364]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 8005732:	4313      	orrs	r3, r2
 8005734:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d109      	bne.n	8005750 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a1b      	ldr	r3, [r3, #32]
 8005740:	4618      	mov	r0, r3
 8005742:	f000 fd15 	bl	8006170 <RCC_SetFlashLatencyFromMSIRange>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d001      	beq.n	8005750 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e343      	b.n	8005dd8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005750:	f000 fc4a 	bl	8005fe8 <HAL_RCC_GetSysClockFreq>
 8005754:	4602      	mov	r2, r0
 8005756:	4b52      	ldr	r3, [pc, #328]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	091b      	lsrs	r3, r3, #4
 800575c:	f003 030f 	and.w	r3, r3, #15
 8005760:	4950      	ldr	r1, [pc, #320]	; (80058a4 <HAL_RCC_OscConfig+0x274>)
 8005762:	5ccb      	ldrb	r3, [r1, r3]
 8005764:	f003 031f 	and.w	r3, r3, #31
 8005768:	fa22 f303 	lsr.w	r3, r2, r3
 800576c:	4a4e      	ldr	r2, [pc, #312]	; (80058a8 <HAL_RCC_OscConfig+0x278>)
 800576e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005770:	4b4e      	ldr	r3, [pc, #312]	; (80058ac <HAL_RCC_OscConfig+0x27c>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4618      	mov	r0, r3
 8005776:	f7fc fd37 	bl	80021e8 <HAL_InitTick>
 800577a:	4603      	mov	r3, r0
 800577c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800577e:	7bfb      	ldrb	r3, [r7, #15]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d052      	beq.n	800582a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005784:	7bfb      	ldrb	r3, [r7, #15]
 8005786:	e327      	b.n	8005dd8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d032      	beq.n	80057f6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005790:	4b43      	ldr	r3, [pc, #268]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a42      	ldr	r2, [pc, #264]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 8005796:	f043 0301 	orr.w	r3, r3, #1
 800579a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800579c:	f7fc fd74 	bl	8002288 <HAL_GetTick>
 80057a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80057a2:	e008      	b.n	80057b6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80057a4:	f7fc fd70 	bl	8002288 <HAL_GetTick>
 80057a8:	4602      	mov	r2, r0
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d901      	bls.n	80057b6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80057b2:	2303      	movs	r3, #3
 80057b4:	e310      	b.n	8005dd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80057b6:	4b3a      	ldr	r3, [pc, #232]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0302 	and.w	r3, r3, #2
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d0f0      	beq.n	80057a4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80057c2:	4b37      	ldr	r3, [pc, #220]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a36      	ldr	r2, [pc, #216]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 80057c8:	f043 0308 	orr.w	r3, r3, #8
 80057cc:	6013      	str	r3, [r2, #0]
 80057ce:	4b34      	ldr	r3, [pc, #208]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	4931      	ldr	r1, [pc, #196]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80057e0:	4b2f      	ldr	r3, [pc, #188]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	69db      	ldr	r3, [r3, #28]
 80057ec:	021b      	lsls	r3, r3, #8
 80057ee:	492c      	ldr	r1, [pc, #176]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 80057f0:	4313      	orrs	r3, r2
 80057f2:	604b      	str	r3, [r1, #4]
 80057f4:	e01a      	b.n	800582c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80057f6:	4b2a      	ldr	r3, [pc, #168]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a29      	ldr	r2, [pc, #164]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 80057fc:	f023 0301 	bic.w	r3, r3, #1
 8005800:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005802:	f7fc fd41 	bl	8002288 <HAL_GetTick>
 8005806:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005808:	e008      	b.n	800581c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800580a:	f7fc fd3d 	bl	8002288 <HAL_GetTick>
 800580e:	4602      	mov	r2, r0
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	2b02      	cmp	r3, #2
 8005816:	d901      	bls.n	800581c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e2dd      	b.n	8005dd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800581c:	4b20      	ldr	r3, [pc, #128]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0302 	and.w	r3, r3, #2
 8005824:	2b00      	cmp	r3, #0
 8005826:	d1f0      	bne.n	800580a <HAL_RCC_OscConfig+0x1da>
 8005828:	e000      	b.n	800582c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800582a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0301 	and.w	r3, r3, #1
 8005834:	2b00      	cmp	r3, #0
 8005836:	d074      	beq.n	8005922 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	2b08      	cmp	r3, #8
 800583c:	d005      	beq.n	800584a <HAL_RCC_OscConfig+0x21a>
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	2b0c      	cmp	r3, #12
 8005842:	d10e      	bne.n	8005862 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	2b03      	cmp	r3, #3
 8005848:	d10b      	bne.n	8005862 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800584a:	4b15      	ldr	r3, [pc, #84]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d064      	beq.n	8005920 <HAL_RCC_OscConfig+0x2f0>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d160      	bne.n	8005920 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e2ba      	b.n	8005dd8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800586a:	d106      	bne.n	800587a <HAL_RCC_OscConfig+0x24a>
 800586c:	4b0c      	ldr	r3, [pc, #48]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a0b      	ldr	r2, [pc, #44]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 8005872:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005876:	6013      	str	r3, [r2, #0]
 8005878:	e026      	b.n	80058c8 <HAL_RCC_OscConfig+0x298>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005882:	d115      	bne.n	80058b0 <HAL_RCC_OscConfig+0x280>
 8005884:	4b06      	ldr	r3, [pc, #24]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a05      	ldr	r2, [pc, #20]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 800588a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800588e:	6013      	str	r3, [r2, #0]
 8005890:	4b03      	ldr	r3, [pc, #12]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a02      	ldr	r2, [pc, #8]	; (80058a0 <HAL_RCC_OscConfig+0x270>)
 8005896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800589a:	6013      	str	r3, [r2, #0]
 800589c:	e014      	b.n	80058c8 <HAL_RCC_OscConfig+0x298>
 800589e:	bf00      	nop
 80058a0:	40021000 	.word	0x40021000
 80058a4:	0800ae98 	.word	0x0800ae98
 80058a8:	20000000 	.word	0x20000000
 80058ac:	20000004 	.word	0x20000004
 80058b0:	4ba0      	ldr	r3, [pc, #640]	; (8005b34 <HAL_RCC_OscConfig+0x504>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a9f      	ldr	r2, [pc, #636]	; (8005b34 <HAL_RCC_OscConfig+0x504>)
 80058b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058ba:	6013      	str	r3, [r2, #0]
 80058bc:	4b9d      	ldr	r3, [pc, #628]	; (8005b34 <HAL_RCC_OscConfig+0x504>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a9c      	ldr	r2, [pc, #624]	; (8005b34 <HAL_RCC_OscConfig+0x504>)
 80058c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d013      	beq.n	80058f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058d0:	f7fc fcda 	bl	8002288 <HAL_GetTick>
 80058d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058d6:	e008      	b.n	80058ea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058d8:	f7fc fcd6 	bl	8002288 <HAL_GetTick>
 80058dc:	4602      	mov	r2, r0
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	2b64      	cmp	r3, #100	; 0x64
 80058e4:	d901      	bls.n	80058ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e276      	b.n	8005dd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058ea:	4b92      	ldr	r3, [pc, #584]	; (8005b34 <HAL_RCC_OscConfig+0x504>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d0f0      	beq.n	80058d8 <HAL_RCC_OscConfig+0x2a8>
 80058f6:	e014      	b.n	8005922 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f8:	f7fc fcc6 	bl	8002288 <HAL_GetTick>
 80058fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80058fe:	e008      	b.n	8005912 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005900:	f7fc fcc2 	bl	8002288 <HAL_GetTick>
 8005904:	4602      	mov	r2, r0
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	2b64      	cmp	r3, #100	; 0x64
 800590c:	d901      	bls.n	8005912 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e262      	b.n	8005dd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005912:	4b88      	ldr	r3, [pc, #544]	; (8005b34 <HAL_RCC_OscConfig+0x504>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1f0      	bne.n	8005900 <HAL_RCC_OscConfig+0x2d0>
 800591e:	e000      	b.n	8005922 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005920:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0302 	and.w	r3, r3, #2
 800592a:	2b00      	cmp	r3, #0
 800592c:	d060      	beq.n	80059f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	2b04      	cmp	r3, #4
 8005932:	d005      	beq.n	8005940 <HAL_RCC_OscConfig+0x310>
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	2b0c      	cmp	r3, #12
 8005938:	d119      	bne.n	800596e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	2b02      	cmp	r3, #2
 800593e:	d116      	bne.n	800596e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005940:	4b7c      	ldr	r3, [pc, #496]	; (8005b34 <HAL_RCC_OscConfig+0x504>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005948:	2b00      	cmp	r3, #0
 800594a:	d005      	beq.n	8005958 <HAL_RCC_OscConfig+0x328>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d101      	bne.n	8005958 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e23f      	b.n	8005dd8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005958:	4b76      	ldr	r3, [pc, #472]	; (8005b34 <HAL_RCC_OscConfig+0x504>)
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	061b      	lsls	r3, r3, #24
 8005966:	4973      	ldr	r1, [pc, #460]	; (8005b34 <HAL_RCC_OscConfig+0x504>)
 8005968:	4313      	orrs	r3, r2
 800596a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800596c:	e040      	b.n	80059f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d023      	beq.n	80059be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005976:	4b6f      	ldr	r3, [pc, #444]	; (8005b34 <HAL_RCC_OscConfig+0x504>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a6e      	ldr	r2, [pc, #440]	; (8005b34 <HAL_RCC_OscConfig+0x504>)
 800597c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005980:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005982:	f7fc fc81 	bl	8002288 <HAL_GetTick>
 8005986:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005988:	e008      	b.n	800599c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800598a:	f7fc fc7d 	bl	8002288 <HAL_GetTick>
 800598e:	4602      	mov	r2, r0
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	2b02      	cmp	r3, #2
 8005996:	d901      	bls.n	800599c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	e21d      	b.n	8005dd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800599c:	4b65      	ldr	r3, [pc, #404]	; (8005b34 <HAL_RCC_OscConfig+0x504>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d0f0      	beq.n	800598a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059a8:	4b62      	ldr	r3, [pc, #392]	; (8005b34 <HAL_RCC_OscConfig+0x504>)
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	061b      	lsls	r3, r3, #24
 80059b6:	495f      	ldr	r1, [pc, #380]	; (8005b34 <HAL_RCC_OscConfig+0x504>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	604b      	str	r3, [r1, #4]
 80059bc:	e018      	b.n	80059f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059be:	4b5d      	ldr	r3, [pc, #372]	; (8005b34 <HAL_RCC_OscConfig+0x504>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a5c      	ldr	r2, [pc, #368]	; (8005b34 <HAL_RCC_OscConfig+0x504>)
 80059c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ca:	f7fc fc5d 	bl	8002288 <HAL_GetTick>
 80059ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80059d0:	e008      	b.n	80059e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059d2:	f7fc fc59 	bl	8002288 <HAL_GetTick>
 80059d6:	4602      	mov	r2, r0
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	2b02      	cmp	r3, #2
 80059de:	d901      	bls.n	80059e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80059e0:	2303      	movs	r3, #3
 80059e2:	e1f9      	b.n	8005dd8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80059e4:	4b53      	ldr	r3, [pc, #332]	; (8005b34 <HAL_RCC_OscConfig+0x504>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1f0      	bne.n	80059d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0308 	and.w	r3, r3, #8
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d03c      	beq.n	8005a76 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	695b      	ldr	r3, [r3, #20]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d01c      	beq.n	8005a3e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a04:	4b4b      	ldr	r3, [pc, #300]	; (8005b34 <HAL_RCC_OscConfig+0x504>)
 8005a06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a0a:	4a4a      	ldr	r2, [pc, #296]	; (8005b34 <HAL_RCC_OscConfig+0x504>)
 8005a0c:	f043 0301 	orr.w	r3, r3, #1
 8005a10:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a14:	f7fc fc38 	bl	8002288 <HAL_GetTick>
 8005a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a1a:	e008      	b.n	8005a2e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a1c:	f7fc fc34 	bl	8002288 <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d901      	bls.n	8005a2e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e1d4      	b.n	8005dd8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a2e:	4b41      	ldr	r3, [pc, #260]	; (8005b34 <HAL_RCC_OscConfig+0x504>)
 8005a30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a34:	f003 0302 	and.w	r3, r3, #2
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d0ef      	beq.n	8005a1c <HAL_RCC_OscConfig+0x3ec>
 8005a3c:	e01b      	b.n	8005a76 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a3e:	4b3d      	ldr	r3, [pc, #244]	; (8005b34 <HAL_RCC_OscConfig+0x504>)
 8005a40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a44:	4a3b      	ldr	r2, [pc, #236]	; (8005b34 <HAL_RCC_OscConfig+0x504>)
 8005a46:	f023 0301 	bic.w	r3, r3, #1
 8005a4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a4e:	f7fc fc1b 	bl	8002288 <HAL_GetTick>
 8005a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a54:	e008      	b.n	8005a68 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a56:	f7fc fc17 	bl	8002288 <HAL_GetTick>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d901      	bls.n	8005a68 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e1b7      	b.n	8005dd8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a68:	4b32      	ldr	r3, [pc, #200]	; (8005b34 <HAL_RCC_OscConfig+0x504>)
 8005a6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a6e:	f003 0302 	and.w	r3, r3, #2
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d1ef      	bne.n	8005a56 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0304 	and.w	r3, r3, #4
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	f000 80a6 	beq.w	8005bd0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a84:	2300      	movs	r3, #0
 8005a86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005a88:	4b2a      	ldr	r3, [pc, #168]	; (8005b34 <HAL_RCC_OscConfig+0x504>)
 8005a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d10d      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a94:	4b27      	ldr	r3, [pc, #156]	; (8005b34 <HAL_RCC_OscConfig+0x504>)
 8005a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a98:	4a26      	ldr	r2, [pc, #152]	; (8005b34 <HAL_RCC_OscConfig+0x504>)
 8005a9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a9e:	6593      	str	r3, [r2, #88]	; 0x58
 8005aa0:	4b24      	ldr	r3, [pc, #144]	; (8005b34 <HAL_RCC_OscConfig+0x504>)
 8005aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aa8:	60bb      	str	r3, [r7, #8]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005aac:	2301      	movs	r3, #1
 8005aae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ab0:	4b21      	ldr	r3, [pc, #132]	; (8005b38 <HAL_RCC_OscConfig+0x508>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d118      	bne.n	8005aee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005abc:	4b1e      	ldr	r3, [pc, #120]	; (8005b38 <HAL_RCC_OscConfig+0x508>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a1d      	ldr	r2, [pc, #116]	; (8005b38 <HAL_RCC_OscConfig+0x508>)
 8005ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ac6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ac8:	f7fc fbde 	bl	8002288 <HAL_GetTick>
 8005acc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ace:	e008      	b.n	8005ae2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ad0:	f7fc fbda 	bl	8002288 <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d901      	bls.n	8005ae2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e17a      	b.n	8005dd8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ae2:	4b15      	ldr	r3, [pc, #84]	; (8005b38 <HAL_RCC_OscConfig+0x508>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d0f0      	beq.n	8005ad0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d108      	bne.n	8005b08 <HAL_RCC_OscConfig+0x4d8>
 8005af6:	4b0f      	ldr	r3, [pc, #60]	; (8005b34 <HAL_RCC_OscConfig+0x504>)
 8005af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005afc:	4a0d      	ldr	r2, [pc, #52]	; (8005b34 <HAL_RCC_OscConfig+0x504>)
 8005afe:	f043 0301 	orr.w	r3, r3, #1
 8005b02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005b06:	e029      	b.n	8005b5c <HAL_RCC_OscConfig+0x52c>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	2b05      	cmp	r3, #5
 8005b0e:	d115      	bne.n	8005b3c <HAL_RCC_OscConfig+0x50c>
 8005b10:	4b08      	ldr	r3, [pc, #32]	; (8005b34 <HAL_RCC_OscConfig+0x504>)
 8005b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b16:	4a07      	ldr	r2, [pc, #28]	; (8005b34 <HAL_RCC_OscConfig+0x504>)
 8005b18:	f043 0304 	orr.w	r3, r3, #4
 8005b1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005b20:	4b04      	ldr	r3, [pc, #16]	; (8005b34 <HAL_RCC_OscConfig+0x504>)
 8005b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b26:	4a03      	ldr	r2, [pc, #12]	; (8005b34 <HAL_RCC_OscConfig+0x504>)
 8005b28:	f043 0301 	orr.w	r3, r3, #1
 8005b2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005b30:	e014      	b.n	8005b5c <HAL_RCC_OscConfig+0x52c>
 8005b32:	bf00      	nop
 8005b34:	40021000 	.word	0x40021000
 8005b38:	40007000 	.word	0x40007000
 8005b3c:	4b9c      	ldr	r3, [pc, #624]	; (8005db0 <HAL_RCC_OscConfig+0x780>)
 8005b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b42:	4a9b      	ldr	r2, [pc, #620]	; (8005db0 <HAL_RCC_OscConfig+0x780>)
 8005b44:	f023 0301 	bic.w	r3, r3, #1
 8005b48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005b4c:	4b98      	ldr	r3, [pc, #608]	; (8005db0 <HAL_RCC_OscConfig+0x780>)
 8005b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b52:	4a97      	ldr	r2, [pc, #604]	; (8005db0 <HAL_RCC_OscConfig+0x780>)
 8005b54:	f023 0304 	bic.w	r3, r3, #4
 8005b58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d016      	beq.n	8005b92 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b64:	f7fc fb90 	bl	8002288 <HAL_GetTick>
 8005b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b6a:	e00a      	b.n	8005b82 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b6c:	f7fc fb8c 	bl	8002288 <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d901      	bls.n	8005b82 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e12a      	b.n	8005dd8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b82:	4b8b      	ldr	r3, [pc, #556]	; (8005db0 <HAL_RCC_OscConfig+0x780>)
 8005b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b88:	f003 0302 	and.w	r3, r3, #2
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d0ed      	beq.n	8005b6c <HAL_RCC_OscConfig+0x53c>
 8005b90:	e015      	b.n	8005bbe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b92:	f7fc fb79 	bl	8002288 <HAL_GetTick>
 8005b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b98:	e00a      	b.n	8005bb0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b9a:	f7fc fb75 	bl	8002288 <HAL_GetTick>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d901      	bls.n	8005bb0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005bac:	2303      	movs	r3, #3
 8005bae:	e113      	b.n	8005dd8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005bb0:	4b7f      	ldr	r3, [pc, #508]	; (8005db0 <HAL_RCC_OscConfig+0x780>)
 8005bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bb6:	f003 0302 	and.w	r3, r3, #2
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1ed      	bne.n	8005b9a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bbe:	7ffb      	ldrb	r3, [r7, #31]
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d105      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bc4:	4b7a      	ldr	r3, [pc, #488]	; (8005db0 <HAL_RCC_OscConfig+0x780>)
 8005bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bc8:	4a79      	ldr	r2, [pc, #484]	; (8005db0 <HAL_RCC_OscConfig+0x780>)
 8005bca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bce:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f000 80fe 	beq.w	8005dd6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	f040 80d0 	bne.w	8005d84 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005be4:	4b72      	ldr	r3, [pc, #456]	; (8005db0 <HAL_RCC_OscConfig+0x780>)
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	f003 0203 	and.w	r2, r3, #3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d130      	bne.n	8005c5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c02:	3b01      	subs	r3, #1
 8005c04:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d127      	bne.n	8005c5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c14:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d11f      	bne.n	8005c5a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c24:	2a07      	cmp	r2, #7
 8005c26:	bf14      	ite	ne
 8005c28:	2201      	movne	r2, #1
 8005c2a:	2200      	moveq	r2, #0
 8005c2c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d113      	bne.n	8005c5a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c3c:	085b      	lsrs	r3, r3, #1
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d109      	bne.n	8005c5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c50:	085b      	lsrs	r3, r3, #1
 8005c52:	3b01      	subs	r3, #1
 8005c54:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d06e      	beq.n	8005d38 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	2b0c      	cmp	r3, #12
 8005c5e:	d069      	beq.n	8005d34 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005c60:	4b53      	ldr	r3, [pc, #332]	; (8005db0 <HAL_RCC_OscConfig+0x780>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d105      	bne.n	8005c78 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005c6c:	4b50      	ldr	r3, [pc, #320]	; (8005db0 <HAL_RCC_OscConfig+0x780>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d001      	beq.n	8005c7c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e0ad      	b.n	8005dd8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005c7c:	4b4c      	ldr	r3, [pc, #304]	; (8005db0 <HAL_RCC_OscConfig+0x780>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a4b      	ldr	r2, [pc, #300]	; (8005db0 <HAL_RCC_OscConfig+0x780>)
 8005c82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c86:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005c88:	f7fc fafe 	bl	8002288 <HAL_GetTick>
 8005c8c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c8e:	e008      	b.n	8005ca2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c90:	f7fc fafa 	bl	8002288 <HAL_GetTick>
 8005c94:	4602      	mov	r2, r0
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d901      	bls.n	8005ca2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	e09a      	b.n	8005dd8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ca2:	4b43      	ldr	r3, [pc, #268]	; (8005db0 <HAL_RCC_OscConfig+0x780>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d1f0      	bne.n	8005c90 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005cae:	4b40      	ldr	r3, [pc, #256]	; (8005db0 <HAL_RCC_OscConfig+0x780>)
 8005cb0:	68da      	ldr	r2, [r3, #12]
 8005cb2:	4b40      	ldr	r3, [pc, #256]	; (8005db4 <HAL_RCC_OscConfig+0x784>)
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005cbe:	3a01      	subs	r2, #1
 8005cc0:	0112      	lsls	r2, r2, #4
 8005cc2:	4311      	orrs	r1, r2
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005cc8:	0212      	lsls	r2, r2, #8
 8005cca:	4311      	orrs	r1, r2
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005cd0:	0852      	lsrs	r2, r2, #1
 8005cd2:	3a01      	subs	r2, #1
 8005cd4:	0552      	lsls	r2, r2, #21
 8005cd6:	4311      	orrs	r1, r2
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005cdc:	0852      	lsrs	r2, r2, #1
 8005cde:	3a01      	subs	r2, #1
 8005ce0:	0652      	lsls	r2, r2, #25
 8005ce2:	4311      	orrs	r1, r2
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ce8:	0912      	lsrs	r2, r2, #4
 8005cea:	0452      	lsls	r2, r2, #17
 8005cec:	430a      	orrs	r2, r1
 8005cee:	4930      	ldr	r1, [pc, #192]	; (8005db0 <HAL_RCC_OscConfig+0x780>)
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005cf4:	4b2e      	ldr	r3, [pc, #184]	; (8005db0 <HAL_RCC_OscConfig+0x780>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a2d      	ldr	r2, [pc, #180]	; (8005db0 <HAL_RCC_OscConfig+0x780>)
 8005cfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cfe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005d00:	4b2b      	ldr	r3, [pc, #172]	; (8005db0 <HAL_RCC_OscConfig+0x780>)
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	4a2a      	ldr	r2, [pc, #168]	; (8005db0 <HAL_RCC_OscConfig+0x780>)
 8005d06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d0a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005d0c:	f7fc fabc 	bl	8002288 <HAL_GetTick>
 8005d10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d12:	e008      	b.n	8005d26 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d14:	f7fc fab8 	bl	8002288 <HAL_GetTick>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d901      	bls.n	8005d26 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e058      	b.n	8005dd8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d26:	4b22      	ldr	r3, [pc, #136]	; (8005db0 <HAL_RCC_OscConfig+0x780>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d0f0      	beq.n	8005d14 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005d32:	e050      	b.n	8005dd6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e04f      	b.n	8005dd8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d38:	4b1d      	ldr	r3, [pc, #116]	; (8005db0 <HAL_RCC_OscConfig+0x780>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d148      	bne.n	8005dd6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005d44:	4b1a      	ldr	r3, [pc, #104]	; (8005db0 <HAL_RCC_OscConfig+0x780>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a19      	ldr	r2, [pc, #100]	; (8005db0 <HAL_RCC_OscConfig+0x780>)
 8005d4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d4e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005d50:	4b17      	ldr	r3, [pc, #92]	; (8005db0 <HAL_RCC_OscConfig+0x780>)
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	4a16      	ldr	r2, [pc, #88]	; (8005db0 <HAL_RCC_OscConfig+0x780>)
 8005d56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d5a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005d5c:	f7fc fa94 	bl	8002288 <HAL_GetTick>
 8005d60:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d62:	e008      	b.n	8005d76 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d64:	f7fc fa90 	bl	8002288 <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d901      	bls.n	8005d76 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e030      	b.n	8005dd8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d76:	4b0e      	ldr	r3, [pc, #56]	; (8005db0 <HAL_RCC_OscConfig+0x780>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d0f0      	beq.n	8005d64 <HAL_RCC_OscConfig+0x734>
 8005d82:	e028      	b.n	8005dd6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	2b0c      	cmp	r3, #12
 8005d88:	d023      	beq.n	8005dd2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d8a:	4b09      	ldr	r3, [pc, #36]	; (8005db0 <HAL_RCC_OscConfig+0x780>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a08      	ldr	r2, [pc, #32]	; (8005db0 <HAL_RCC_OscConfig+0x780>)
 8005d90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d96:	f7fc fa77 	bl	8002288 <HAL_GetTick>
 8005d9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d9c:	e00c      	b.n	8005db8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d9e:	f7fc fa73 	bl	8002288 <HAL_GetTick>
 8005da2:	4602      	mov	r2, r0
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d905      	bls.n	8005db8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e013      	b.n	8005dd8 <HAL_RCC_OscConfig+0x7a8>
 8005db0:	40021000 	.word	0x40021000
 8005db4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005db8:	4b09      	ldr	r3, [pc, #36]	; (8005de0 <HAL_RCC_OscConfig+0x7b0>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d1ec      	bne.n	8005d9e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005dc4:	4b06      	ldr	r3, [pc, #24]	; (8005de0 <HAL_RCC_OscConfig+0x7b0>)
 8005dc6:	68da      	ldr	r2, [r3, #12]
 8005dc8:	4905      	ldr	r1, [pc, #20]	; (8005de0 <HAL_RCC_OscConfig+0x7b0>)
 8005dca:	4b06      	ldr	r3, [pc, #24]	; (8005de4 <HAL_RCC_OscConfig+0x7b4>)
 8005dcc:	4013      	ands	r3, r2
 8005dce:	60cb      	str	r3, [r1, #12]
 8005dd0:	e001      	b.n	8005dd6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e000      	b.n	8005dd8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3720      	adds	r7, #32
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	40021000 	.word	0x40021000
 8005de4:	feeefffc 	.word	0xfeeefffc

08005de8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d101      	bne.n	8005dfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e0e7      	b.n	8005fcc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005dfc:	4b75      	ldr	r3, [pc, #468]	; (8005fd4 <HAL_RCC_ClockConfig+0x1ec>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0307 	and.w	r3, r3, #7
 8005e04:	683a      	ldr	r2, [r7, #0]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d910      	bls.n	8005e2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e0a:	4b72      	ldr	r3, [pc, #456]	; (8005fd4 <HAL_RCC_ClockConfig+0x1ec>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f023 0207 	bic.w	r2, r3, #7
 8005e12:	4970      	ldr	r1, [pc, #448]	; (8005fd4 <HAL_RCC_ClockConfig+0x1ec>)
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e1a:	4b6e      	ldr	r3, [pc, #440]	; (8005fd4 <HAL_RCC_ClockConfig+0x1ec>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0307 	and.w	r3, r3, #7
 8005e22:	683a      	ldr	r2, [r7, #0]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d001      	beq.n	8005e2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e0cf      	b.n	8005fcc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 0302 	and.w	r3, r3, #2
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d010      	beq.n	8005e5a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	689a      	ldr	r2, [r3, #8]
 8005e3c:	4b66      	ldr	r3, [pc, #408]	; (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d908      	bls.n	8005e5a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e48:	4b63      	ldr	r3, [pc, #396]	; (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	4960      	ldr	r1, [pc, #384]	; (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005e56:	4313      	orrs	r3, r2
 8005e58:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0301 	and.w	r3, r3, #1
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d04c      	beq.n	8005f00 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	2b03      	cmp	r3, #3
 8005e6c:	d107      	bne.n	8005e7e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e6e:	4b5a      	ldr	r3, [pc, #360]	; (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d121      	bne.n	8005ebe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e0a6      	b.n	8005fcc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d107      	bne.n	8005e96 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e86:	4b54      	ldr	r3, [pc, #336]	; (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d115      	bne.n	8005ebe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e09a      	b.n	8005fcc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d107      	bne.n	8005eae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005e9e:	4b4e      	ldr	r3, [pc, #312]	; (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0302 	and.w	r3, r3, #2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d109      	bne.n	8005ebe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e08e      	b.n	8005fcc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005eae:	4b4a      	ldr	r3, [pc, #296]	; (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d101      	bne.n	8005ebe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e086      	b.n	8005fcc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ebe:	4b46      	ldr	r3, [pc, #280]	; (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f023 0203 	bic.w	r2, r3, #3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	4943      	ldr	r1, [pc, #268]	; (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ed0:	f7fc f9da 	bl	8002288 <HAL_GetTick>
 8005ed4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ed6:	e00a      	b.n	8005eee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ed8:	f7fc f9d6 	bl	8002288 <HAL_GetTick>
 8005edc:	4602      	mov	r2, r0
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d901      	bls.n	8005eee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e06e      	b.n	8005fcc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eee:	4b3a      	ldr	r3, [pc, #232]	; (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	f003 020c 	and.w	r2, r3, #12
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d1eb      	bne.n	8005ed8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0302 	and.w	r3, r3, #2
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d010      	beq.n	8005f2e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	689a      	ldr	r2, [r3, #8]
 8005f10:	4b31      	ldr	r3, [pc, #196]	; (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d208      	bcs.n	8005f2e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f1c:	4b2e      	ldr	r3, [pc, #184]	; (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	492b      	ldr	r1, [pc, #172]	; (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f2e:	4b29      	ldr	r3, [pc, #164]	; (8005fd4 <HAL_RCC_ClockConfig+0x1ec>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0307 	and.w	r3, r3, #7
 8005f36:	683a      	ldr	r2, [r7, #0]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d210      	bcs.n	8005f5e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f3c:	4b25      	ldr	r3, [pc, #148]	; (8005fd4 <HAL_RCC_ClockConfig+0x1ec>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f023 0207 	bic.w	r2, r3, #7
 8005f44:	4923      	ldr	r1, [pc, #140]	; (8005fd4 <HAL_RCC_ClockConfig+0x1ec>)
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f4c:	4b21      	ldr	r3, [pc, #132]	; (8005fd4 <HAL_RCC_ClockConfig+0x1ec>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0307 	and.w	r3, r3, #7
 8005f54:	683a      	ldr	r2, [r7, #0]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d001      	beq.n	8005f5e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e036      	b.n	8005fcc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0304 	and.w	r3, r3, #4
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d008      	beq.n	8005f7c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f6a:	4b1b      	ldr	r3, [pc, #108]	; (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	4918      	ldr	r1, [pc, #96]	; (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0308 	and.w	r3, r3, #8
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d009      	beq.n	8005f9c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f88:	4b13      	ldr	r3, [pc, #76]	; (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	00db      	lsls	r3, r3, #3
 8005f96:	4910      	ldr	r1, [pc, #64]	; (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005f9c:	f000 f824 	bl	8005fe8 <HAL_RCC_GetSysClockFreq>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	4b0d      	ldr	r3, [pc, #52]	; (8005fd8 <HAL_RCC_ClockConfig+0x1f0>)
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	091b      	lsrs	r3, r3, #4
 8005fa8:	f003 030f 	and.w	r3, r3, #15
 8005fac:	490b      	ldr	r1, [pc, #44]	; (8005fdc <HAL_RCC_ClockConfig+0x1f4>)
 8005fae:	5ccb      	ldrb	r3, [r1, r3]
 8005fb0:	f003 031f 	and.w	r3, r3, #31
 8005fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8005fb8:	4a09      	ldr	r2, [pc, #36]	; (8005fe0 <HAL_RCC_ClockConfig+0x1f8>)
 8005fba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005fbc:	4b09      	ldr	r3, [pc, #36]	; (8005fe4 <HAL_RCC_ClockConfig+0x1fc>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7fc f911 	bl	80021e8 <HAL_InitTick>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	72fb      	strb	r3, [r7, #11]

  return status;
 8005fca:	7afb      	ldrb	r3, [r7, #11]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	40022000 	.word	0x40022000
 8005fd8:	40021000 	.word	0x40021000
 8005fdc:	0800ae98 	.word	0x0800ae98
 8005fe0:	20000000 	.word	0x20000000
 8005fe4:	20000004 	.word	0x20000004

08005fe8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b089      	sub	sp, #36	; 0x24
 8005fec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	61fb      	str	r3, [r7, #28]
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ff6:	4b3e      	ldr	r3, [pc, #248]	; (80060f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f003 030c 	and.w	r3, r3, #12
 8005ffe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006000:	4b3b      	ldr	r3, [pc, #236]	; (80060f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	f003 0303 	and.w	r3, r3, #3
 8006008:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d005      	beq.n	800601c <HAL_RCC_GetSysClockFreq+0x34>
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	2b0c      	cmp	r3, #12
 8006014:	d121      	bne.n	800605a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d11e      	bne.n	800605a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800601c:	4b34      	ldr	r3, [pc, #208]	; (80060f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0308 	and.w	r3, r3, #8
 8006024:	2b00      	cmp	r3, #0
 8006026:	d107      	bne.n	8006038 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006028:	4b31      	ldr	r3, [pc, #196]	; (80060f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800602a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800602e:	0a1b      	lsrs	r3, r3, #8
 8006030:	f003 030f 	and.w	r3, r3, #15
 8006034:	61fb      	str	r3, [r7, #28]
 8006036:	e005      	b.n	8006044 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006038:	4b2d      	ldr	r3, [pc, #180]	; (80060f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	091b      	lsrs	r3, r3, #4
 800603e:	f003 030f 	and.w	r3, r3, #15
 8006042:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006044:	4a2b      	ldr	r2, [pc, #172]	; (80060f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800604c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d10d      	bne.n	8006070 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006058:	e00a      	b.n	8006070 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	2b04      	cmp	r3, #4
 800605e:	d102      	bne.n	8006066 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006060:	4b25      	ldr	r3, [pc, #148]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006062:	61bb      	str	r3, [r7, #24]
 8006064:	e004      	b.n	8006070 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	2b08      	cmp	r3, #8
 800606a:	d101      	bne.n	8006070 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800606c:	4b23      	ldr	r3, [pc, #140]	; (80060fc <HAL_RCC_GetSysClockFreq+0x114>)
 800606e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	2b0c      	cmp	r3, #12
 8006074:	d134      	bne.n	80060e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006076:	4b1e      	ldr	r3, [pc, #120]	; (80060f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	f003 0303 	and.w	r3, r3, #3
 800607e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	2b02      	cmp	r3, #2
 8006084:	d003      	beq.n	800608e <HAL_RCC_GetSysClockFreq+0xa6>
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	2b03      	cmp	r3, #3
 800608a:	d003      	beq.n	8006094 <HAL_RCC_GetSysClockFreq+0xac>
 800608c:	e005      	b.n	800609a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800608e:	4b1a      	ldr	r3, [pc, #104]	; (80060f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006090:	617b      	str	r3, [r7, #20]
      break;
 8006092:	e005      	b.n	80060a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006094:	4b19      	ldr	r3, [pc, #100]	; (80060fc <HAL_RCC_GetSysClockFreq+0x114>)
 8006096:	617b      	str	r3, [r7, #20]
      break;
 8006098:	e002      	b.n	80060a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	617b      	str	r3, [r7, #20]
      break;
 800609e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80060a0:	4b13      	ldr	r3, [pc, #76]	; (80060f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	091b      	lsrs	r3, r3, #4
 80060a6:	f003 0307 	and.w	r3, r3, #7
 80060aa:	3301      	adds	r3, #1
 80060ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80060ae:	4b10      	ldr	r3, [pc, #64]	; (80060f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	0a1b      	lsrs	r3, r3, #8
 80060b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060b8:	697a      	ldr	r2, [r7, #20]
 80060ba:	fb03 f202 	mul.w	r2, r3, r2
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80060c6:	4b0a      	ldr	r3, [pc, #40]	; (80060f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	0e5b      	lsrs	r3, r3, #25
 80060cc:	f003 0303 	and.w	r3, r3, #3
 80060d0:	3301      	adds	r3, #1
 80060d2:	005b      	lsls	r3, r3, #1
 80060d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	fbb2 f3f3 	udiv	r3, r2, r3
 80060de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80060e0:	69bb      	ldr	r3, [r7, #24]
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3724      	adds	r7, #36	; 0x24
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	40021000 	.word	0x40021000
 80060f4:	0800aeb0 	.word	0x0800aeb0
 80060f8:	00f42400 	.word	0x00f42400
 80060fc:	007a1200 	.word	0x007a1200

08006100 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006100:	b480      	push	{r7}
 8006102:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006104:	4b03      	ldr	r3, [pc, #12]	; (8006114 <HAL_RCC_GetHCLKFreq+0x14>)
 8006106:	681b      	ldr	r3, [r3, #0]
}
 8006108:	4618      	mov	r0, r3
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	20000000 	.word	0x20000000

08006118 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800611c:	f7ff fff0 	bl	8006100 <HAL_RCC_GetHCLKFreq>
 8006120:	4602      	mov	r2, r0
 8006122:	4b06      	ldr	r3, [pc, #24]	; (800613c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	0a1b      	lsrs	r3, r3, #8
 8006128:	f003 0307 	and.w	r3, r3, #7
 800612c:	4904      	ldr	r1, [pc, #16]	; (8006140 <HAL_RCC_GetPCLK1Freq+0x28>)
 800612e:	5ccb      	ldrb	r3, [r1, r3]
 8006130:	f003 031f 	and.w	r3, r3, #31
 8006134:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006138:	4618      	mov	r0, r3
 800613a:	bd80      	pop	{r7, pc}
 800613c:	40021000 	.word	0x40021000
 8006140:	0800aea8 	.word	0x0800aea8

08006144 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006148:	f7ff ffda 	bl	8006100 <HAL_RCC_GetHCLKFreq>
 800614c:	4602      	mov	r2, r0
 800614e:	4b06      	ldr	r3, [pc, #24]	; (8006168 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	0adb      	lsrs	r3, r3, #11
 8006154:	f003 0307 	and.w	r3, r3, #7
 8006158:	4904      	ldr	r1, [pc, #16]	; (800616c <HAL_RCC_GetPCLK2Freq+0x28>)
 800615a:	5ccb      	ldrb	r3, [r1, r3]
 800615c:	f003 031f 	and.w	r3, r3, #31
 8006160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006164:	4618      	mov	r0, r3
 8006166:	bd80      	pop	{r7, pc}
 8006168:	40021000 	.word	0x40021000
 800616c:	0800aea8 	.word	0x0800aea8

08006170 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b086      	sub	sp, #24
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006178:	2300      	movs	r3, #0
 800617a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800617c:	4b2a      	ldr	r3, [pc, #168]	; (8006228 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800617e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006184:	2b00      	cmp	r3, #0
 8006186:	d003      	beq.n	8006190 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006188:	f7ff f9ee 	bl	8005568 <HAL_PWREx_GetVoltageRange>
 800618c:	6178      	str	r0, [r7, #20]
 800618e:	e014      	b.n	80061ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006190:	4b25      	ldr	r3, [pc, #148]	; (8006228 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006194:	4a24      	ldr	r2, [pc, #144]	; (8006228 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800619a:	6593      	str	r3, [r2, #88]	; 0x58
 800619c:	4b22      	ldr	r3, [pc, #136]	; (8006228 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800619e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061a4:	60fb      	str	r3, [r7, #12]
 80061a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80061a8:	f7ff f9de 	bl	8005568 <HAL_PWREx_GetVoltageRange>
 80061ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80061ae:	4b1e      	ldr	r3, [pc, #120]	; (8006228 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80061b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061b2:	4a1d      	ldr	r2, [pc, #116]	; (8006228 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80061b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061b8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061c0:	d10b      	bne.n	80061da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2b80      	cmp	r3, #128	; 0x80
 80061c6:	d919      	bls.n	80061fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2ba0      	cmp	r3, #160	; 0xa0
 80061cc:	d902      	bls.n	80061d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80061ce:	2302      	movs	r3, #2
 80061d0:	613b      	str	r3, [r7, #16]
 80061d2:	e013      	b.n	80061fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80061d4:	2301      	movs	r3, #1
 80061d6:	613b      	str	r3, [r7, #16]
 80061d8:	e010      	b.n	80061fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2b80      	cmp	r3, #128	; 0x80
 80061de:	d902      	bls.n	80061e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80061e0:	2303      	movs	r3, #3
 80061e2:	613b      	str	r3, [r7, #16]
 80061e4:	e00a      	b.n	80061fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2b80      	cmp	r3, #128	; 0x80
 80061ea:	d102      	bne.n	80061f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80061ec:	2302      	movs	r3, #2
 80061ee:	613b      	str	r3, [r7, #16]
 80061f0:	e004      	b.n	80061fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2b70      	cmp	r3, #112	; 0x70
 80061f6:	d101      	bne.n	80061fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80061f8:	2301      	movs	r3, #1
 80061fa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80061fc:	4b0b      	ldr	r3, [pc, #44]	; (800622c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f023 0207 	bic.w	r2, r3, #7
 8006204:	4909      	ldr	r1, [pc, #36]	; (800622c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	4313      	orrs	r3, r2
 800620a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800620c:	4b07      	ldr	r3, [pc, #28]	; (800622c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0307 	and.w	r3, r3, #7
 8006214:	693a      	ldr	r2, [r7, #16]
 8006216:	429a      	cmp	r2, r3
 8006218:	d001      	beq.n	800621e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e000      	b.n	8006220 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	4618      	mov	r0, r3
 8006222:	3718      	adds	r7, #24
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}
 8006228:	40021000 	.word	0x40021000
 800622c:	40022000 	.word	0x40022000

08006230 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b086      	sub	sp, #24
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006238:	2300      	movs	r3, #0
 800623a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800623c:	2300      	movs	r3, #0
 800623e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006248:	2b00      	cmp	r3, #0
 800624a:	d041      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006250:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006254:	d02a      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006256:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800625a:	d824      	bhi.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800625c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006260:	d008      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006262:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006266:	d81e      	bhi.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00a      	beq.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800626c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006270:	d010      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006272:	e018      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006274:	4b86      	ldr	r3, [pc, #536]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	4a85      	ldr	r2, [pc, #532]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800627a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800627e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006280:	e015      	b.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	3304      	adds	r3, #4
 8006286:	2100      	movs	r1, #0
 8006288:	4618      	mov	r0, r3
 800628a:	f000 fabb 	bl	8006804 <RCCEx_PLLSAI1_Config>
 800628e:	4603      	mov	r3, r0
 8006290:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006292:	e00c      	b.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	3320      	adds	r3, #32
 8006298:	2100      	movs	r1, #0
 800629a:	4618      	mov	r0, r3
 800629c:	f000 fba6 	bl	80069ec <RCCEx_PLLSAI2_Config>
 80062a0:	4603      	mov	r3, r0
 80062a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80062a4:	e003      	b.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	74fb      	strb	r3, [r7, #19]
      break;
 80062aa:	e000      	b.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80062ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062ae:	7cfb      	ldrb	r3, [r7, #19]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d10b      	bne.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80062b4:	4b76      	ldr	r3, [pc, #472]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062c2:	4973      	ldr	r1, [pc, #460]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062c4:	4313      	orrs	r3, r2
 80062c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80062ca:	e001      	b.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062cc:	7cfb      	ldrb	r3, [r7, #19]
 80062ce:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d041      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80062e4:	d02a      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80062e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80062ea:	d824      	bhi.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80062ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062f0:	d008      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80062f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062f6:	d81e      	bhi.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00a      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80062fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006300:	d010      	beq.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006302:	e018      	b.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006304:	4b62      	ldr	r3, [pc, #392]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	4a61      	ldr	r2, [pc, #388]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800630a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800630e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006310:	e015      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	3304      	adds	r3, #4
 8006316:	2100      	movs	r1, #0
 8006318:	4618      	mov	r0, r3
 800631a:	f000 fa73 	bl	8006804 <RCCEx_PLLSAI1_Config>
 800631e:	4603      	mov	r3, r0
 8006320:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006322:	e00c      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	3320      	adds	r3, #32
 8006328:	2100      	movs	r1, #0
 800632a:	4618      	mov	r0, r3
 800632c:	f000 fb5e 	bl	80069ec <RCCEx_PLLSAI2_Config>
 8006330:	4603      	mov	r3, r0
 8006332:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006334:	e003      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	74fb      	strb	r3, [r7, #19]
      break;
 800633a:	e000      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800633c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800633e:	7cfb      	ldrb	r3, [r7, #19]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10b      	bne.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006344:	4b52      	ldr	r3, [pc, #328]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800634a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006352:	494f      	ldr	r1, [pc, #316]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006354:	4313      	orrs	r3, r2
 8006356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800635a:	e001      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800635c:	7cfb      	ldrb	r3, [r7, #19]
 800635e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006368:	2b00      	cmp	r3, #0
 800636a:	f000 80a0 	beq.w	80064ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800636e:	2300      	movs	r3, #0
 8006370:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006372:	4b47      	ldr	r3, [pc, #284]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800637a:	2b00      	cmp	r3, #0
 800637c:	d101      	bne.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800637e:	2301      	movs	r3, #1
 8006380:	e000      	b.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006382:	2300      	movs	r3, #0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00d      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006388:	4b41      	ldr	r3, [pc, #260]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800638a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800638c:	4a40      	ldr	r2, [pc, #256]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800638e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006392:	6593      	str	r3, [r2, #88]	; 0x58
 8006394:	4b3e      	ldr	r3, [pc, #248]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800639c:	60bb      	str	r3, [r7, #8]
 800639e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063a0:	2301      	movs	r3, #1
 80063a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80063a4:	4b3b      	ldr	r3, [pc, #236]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a3a      	ldr	r2, [pc, #232]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80063aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80063b0:	f7fb ff6a 	bl	8002288 <HAL_GetTick>
 80063b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80063b6:	e009      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063b8:	f7fb ff66 	bl	8002288 <HAL_GetTick>
 80063bc:	4602      	mov	r2, r0
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d902      	bls.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	74fb      	strb	r3, [r7, #19]
        break;
 80063ca:	e005      	b.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80063cc:	4b31      	ldr	r3, [pc, #196]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d0ef      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80063d8:	7cfb      	ldrb	r3, [r7, #19]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d15c      	bne.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80063de:	4b2c      	ldr	r3, [pc, #176]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d01f      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d019      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80063fc:	4b24      	ldr	r3, [pc, #144]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006402:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006406:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006408:	4b21      	ldr	r3, [pc, #132]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800640a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800640e:	4a20      	ldr	r2, [pc, #128]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006414:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006418:	4b1d      	ldr	r3, [pc, #116]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800641a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800641e:	4a1c      	ldr	r2, [pc, #112]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006420:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006424:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006428:	4a19      	ldr	r2, [pc, #100]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	f003 0301 	and.w	r3, r3, #1
 8006436:	2b00      	cmp	r3, #0
 8006438:	d016      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800643a:	f7fb ff25 	bl	8002288 <HAL_GetTick>
 800643e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006440:	e00b      	b.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006442:	f7fb ff21 	bl	8002288 <HAL_GetTick>
 8006446:	4602      	mov	r2, r0
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	1ad3      	subs	r3, r2, r3
 800644c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006450:	4293      	cmp	r3, r2
 8006452:	d902      	bls.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006454:	2303      	movs	r3, #3
 8006456:	74fb      	strb	r3, [r7, #19]
            break;
 8006458:	e006      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800645a:	4b0d      	ldr	r3, [pc, #52]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800645c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006460:	f003 0302 	and.w	r3, r3, #2
 8006464:	2b00      	cmp	r3, #0
 8006466:	d0ec      	beq.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006468:	7cfb      	ldrb	r3, [r7, #19]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d10c      	bne.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800646e:	4b08      	ldr	r3, [pc, #32]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006474:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800647e:	4904      	ldr	r1, [pc, #16]	; (8006490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006480:	4313      	orrs	r3, r2
 8006482:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006486:	e009      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006488:	7cfb      	ldrb	r3, [r7, #19]
 800648a:	74bb      	strb	r3, [r7, #18]
 800648c:	e006      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800648e:	bf00      	nop
 8006490:	40021000 	.word	0x40021000
 8006494:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006498:	7cfb      	ldrb	r3, [r7, #19]
 800649a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800649c:	7c7b      	ldrb	r3, [r7, #17]
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d105      	bne.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064a2:	4b9e      	ldr	r3, [pc, #632]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064a6:	4a9d      	ldr	r2, [pc, #628]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0301 	and.w	r3, r3, #1
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00a      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80064ba:	4b98      	ldr	r3, [pc, #608]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064c0:	f023 0203 	bic.w	r2, r3, #3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c8:	4994      	ldr	r1, [pc, #592]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064ca:	4313      	orrs	r3, r2
 80064cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 0302 	and.w	r3, r3, #2
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d00a      	beq.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80064dc:	4b8f      	ldr	r3, [pc, #572]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064e2:	f023 020c 	bic.w	r2, r3, #12
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ea:	498c      	ldr	r1, [pc, #560]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064ec:	4313      	orrs	r3, r2
 80064ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 0304 	and.w	r3, r3, #4
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00a      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80064fe:	4b87      	ldr	r3, [pc, #540]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006504:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650c:	4983      	ldr	r1, [pc, #524]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800650e:	4313      	orrs	r3, r2
 8006510:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0308 	and.w	r3, r3, #8
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00a      	beq.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006520:	4b7e      	ldr	r3, [pc, #504]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006526:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800652e:	497b      	ldr	r1, [pc, #492]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006530:	4313      	orrs	r3, r2
 8006532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 0310 	and.w	r3, r3, #16
 800653e:	2b00      	cmp	r3, #0
 8006540:	d00a      	beq.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006542:	4b76      	ldr	r3, [pc, #472]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006548:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006550:	4972      	ldr	r1, [pc, #456]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006552:	4313      	orrs	r3, r2
 8006554:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 0320 	and.w	r3, r3, #32
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00a      	beq.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006564:	4b6d      	ldr	r3, [pc, #436]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800656a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006572:	496a      	ldr	r1, [pc, #424]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006574:	4313      	orrs	r3, r2
 8006576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00a      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006586:	4b65      	ldr	r3, [pc, #404]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800658c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006594:	4961      	ldr	r1, [pc, #388]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006596:	4313      	orrs	r3, r2
 8006598:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d00a      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80065a8:	4b5c      	ldr	r3, [pc, #368]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065b6:	4959      	ldr	r1, [pc, #356]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065b8:	4313      	orrs	r3, r2
 80065ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00a      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80065ca:	4b54      	ldr	r3, [pc, #336]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065d8:	4950      	ldr	r1, [pc, #320]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065da:	4313      	orrs	r3, r2
 80065dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d00a      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80065ec:	4b4b      	ldr	r3, [pc, #300]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065fa:	4948      	ldr	r1, [pc, #288]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065fc:	4313      	orrs	r3, r2
 80065fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00a      	beq.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800660e:	4b43      	ldr	r3, [pc, #268]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006614:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800661c:	493f      	ldr	r1, [pc, #252]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800661e:	4313      	orrs	r3, r2
 8006620:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800662c:	2b00      	cmp	r3, #0
 800662e:	d028      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006630:	4b3a      	ldr	r3, [pc, #232]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006636:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800663e:	4937      	ldr	r1, [pc, #220]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006640:	4313      	orrs	r3, r2
 8006642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800664a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800664e:	d106      	bne.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006650:	4b32      	ldr	r3, [pc, #200]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	4a31      	ldr	r2, [pc, #196]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006656:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800665a:	60d3      	str	r3, [r2, #12]
 800665c:	e011      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006662:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006666:	d10c      	bne.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	3304      	adds	r3, #4
 800666c:	2101      	movs	r1, #1
 800666e:	4618      	mov	r0, r3
 8006670:	f000 f8c8 	bl	8006804 <RCCEx_PLLSAI1_Config>
 8006674:	4603      	mov	r3, r0
 8006676:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006678:	7cfb      	ldrb	r3, [r7, #19]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d001      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800667e:	7cfb      	ldrb	r3, [r7, #19]
 8006680:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800668a:	2b00      	cmp	r3, #0
 800668c:	d028      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800668e:	4b23      	ldr	r3, [pc, #140]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006694:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800669c:	491f      	ldr	r1, [pc, #124]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800669e:	4313      	orrs	r3, r2
 80066a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066ac:	d106      	bne.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066ae:	4b1b      	ldr	r3, [pc, #108]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	4a1a      	ldr	r2, [pc, #104]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066b8:	60d3      	str	r3, [r2, #12]
 80066ba:	e011      	b.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80066c4:	d10c      	bne.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	3304      	adds	r3, #4
 80066ca:	2101      	movs	r1, #1
 80066cc:	4618      	mov	r0, r3
 80066ce:	f000 f899 	bl	8006804 <RCCEx_PLLSAI1_Config>
 80066d2:	4603      	mov	r3, r0
 80066d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80066d6:	7cfb      	ldrb	r3, [r7, #19]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d001      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80066dc:	7cfb      	ldrb	r3, [r7, #19]
 80066de:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d02b      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80066ec:	4b0b      	ldr	r3, [pc, #44]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066fa:	4908      	ldr	r1, [pc, #32]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066fc:	4313      	orrs	r3, r2
 80066fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006706:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800670a:	d109      	bne.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800670c:	4b03      	ldr	r3, [pc, #12]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	4a02      	ldr	r2, [pc, #8]	; (800671c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006712:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006716:	60d3      	str	r3, [r2, #12]
 8006718:	e014      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800671a:	bf00      	nop
 800671c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006724:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006728:	d10c      	bne.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	3304      	adds	r3, #4
 800672e:	2101      	movs	r1, #1
 8006730:	4618      	mov	r0, r3
 8006732:	f000 f867 	bl	8006804 <RCCEx_PLLSAI1_Config>
 8006736:	4603      	mov	r3, r0
 8006738:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800673a:	7cfb      	ldrb	r3, [r7, #19]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d001      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006740:	7cfb      	ldrb	r3, [r7, #19]
 8006742:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800674c:	2b00      	cmp	r3, #0
 800674e:	d02f      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006750:	4b2b      	ldr	r3, [pc, #172]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006756:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800675e:	4928      	ldr	r1, [pc, #160]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006760:	4313      	orrs	r3, r2
 8006762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800676a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800676e:	d10d      	bne.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	3304      	adds	r3, #4
 8006774:	2102      	movs	r1, #2
 8006776:	4618      	mov	r0, r3
 8006778:	f000 f844 	bl	8006804 <RCCEx_PLLSAI1_Config>
 800677c:	4603      	mov	r3, r0
 800677e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006780:	7cfb      	ldrb	r3, [r7, #19]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d014      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006786:	7cfb      	ldrb	r3, [r7, #19]
 8006788:	74bb      	strb	r3, [r7, #18]
 800678a:	e011      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006790:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006794:	d10c      	bne.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	3320      	adds	r3, #32
 800679a:	2102      	movs	r1, #2
 800679c:	4618      	mov	r0, r3
 800679e:	f000 f925 	bl	80069ec <RCCEx_PLLSAI2_Config>
 80067a2:	4603      	mov	r3, r0
 80067a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80067a6:	7cfb      	ldrb	r3, [r7, #19]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d001      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80067ac:	7cfb      	ldrb	r3, [r7, #19]
 80067ae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00a      	beq.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80067bc:	4b10      	ldr	r3, [pc, #64]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80067be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067c2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067ca:	490d      	ldr	r1, [pc, #52]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80067cc:	4313      	orrs	r3, r2
 80067ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00b      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80067de:	4b08      	ldr	r3, [pc, #32]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80067e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067ee:	4904      	ldr	r1, [pc, #16]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80067f0:	4313      	orrs	r3, r2
 80067f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80067f6:	7cbb      	ldrb	r3, [r7, #18]
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3718      	adds	r7, #24
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	40021000 	.word	0x40021000

08006804 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800680e:	2300      	movs	r3, #0
 8006810:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006812:	4b75      	ldr	r3, [pc, #468]	; (80069e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	f003 0303 	and.w	r3, r3, #3
 800681a:	2b00      	cmp	r3, #0
 800681c:	d018      	beq.n	8006850 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800681e:	4b72      	ldr	r3, [pc, #456]	; (80069e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	f003 0203 	and.w	r2, r3, #3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	429a      	cmp	r2, r3
 800682c:	d10d      	bne.n	800684a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
       ||
 8006832:	2b00      	cmp	r3, #0
 8006834:	d009      	beq.n	800684a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006836:	4b6c      	ldr	r3, [pc, #432]	; (80069e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	091b      	lsrs	r3, r3, #4
 800683c:	f003 0307 	and.w	r3, r3, #7
 8006840:	1c5a      	adds	r2, r3, #1
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	685b      	ldr	r3, [r3, #4]
       ||
 8006846:	429a      	cmp	r2, r3
 8006848:	d047      	beq.n	80068da <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	73fb      	strb	r3, [r7, #15]
 800684e:	e044      	b.n	80068da <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2b03      	cmp	r3, #3
 8006856:	d018      	beq.n	800688a <RCCEx_PLLSAI1_Config+0x86>
 8006858:	2b03      	cmp	r3, #3
 800685a:	d825      	bhi.n	80068a8 <RCCEx_PLLSAI1_Config+0xa4>
 800685c:	2b01      	cmp	r3, #1
 800685e:	d002      	beq.n	8006866 <RCCEx_PLLSAI1_Config+0x62>
 8006860:	2b02      	cmp	r3, #2
 8006862:	d009      	beq.n	8006878 <RCCEx_PLLSAI1_Config+0x74>
 8006864:	e020      	b.n	80068a8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006866:	4b60      	ldr	r3, [pc, #384]	; (80069e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0302 	and.w	r3, r3, #2
 800686e:	2b00      	cmp	r3, #0
 8006870:	d11d      	bne.n	80068ae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006876:	e01a      	b.n	80068ae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006878:	4b5b      	ldr	r3, [pc, #364]	; (80069e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006880:	2b00      	cmp	r3, #0
 8006882:	d116      	bne.n	80068b2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006888:	e013      	b.n	80068b2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800688a:	4b57      	ldr	r3, [pc, #348]	; (80069e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006892:	2b00      	cmp	r3, #0
 8006894:	d10f      	bne.n	80068b6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006896:	4b54      	ldr	r3, [pc, #336]	; (80069e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d109      	bne.n	80068b6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80068a6:	e006      	b.n	80068b6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	73fb      	strb	r3, [r7, #15]
      break;
 80068ac:	e004      	b.n	80068b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80068ae:	bf00      	nop
 80068b0:	e002      	b.n	80068b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80068b2:	bf00      	nop
 80068b4:	e000      	b.n	80068b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80068b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80068b8:	7bfb      	ldrb	r3, [r7, #15]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d10d      	bne.n	80068da <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80068be:	4b4a      	ldr	r3, [pc, #296]	; (80069e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6819      	ldr	r1, [r3, #0]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	3b01      	subs	r3, #1
 80068d0:	011b      	lsls	r3, r3, #4
 80068d2:	430b      	orrs	r3, r1
 80068d4:	4944      	ldr	r1, [pc, #272]	; (80069e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068d6:	4313      	orrs	r3, r2
 80068d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80068da:	7bfb      	ldrb	r3, [r7, #15]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d17d      	bne.n	80069dc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80068e0:	4b41      	ldr	r3, [pc, #260]	; (80069e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a40      	ldr	r2, [pc, #256]	; (80069e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80068ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068ec:	f7fb fccc 	bl	8002288 <HAL_GetTick>
 80068f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80068f2:	e009      	b.n	8006908 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80068f4:	f7fb fcc8 	bl	8002288 <HAL_GetTick>
 80068f8:	4602      	mov	r2, r0
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	2b02      	cmp	r3, #2
 8006900:	d902      	bls.n	8006908 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006902:	2303      	movs	r3, #3
 8006904:	73fb      	strb	r3, [r7, #15]
        break;
 8006906:	e005      	b.n	8006914 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006908:	4b37      	ldr	r3, [pc, #220]	; (80069e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006910:	2b00      	cmp	r3, #0
 8006912:	d1ef      	bne.n	80068f4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006914:	7bfb      	ldrb	r3, [r7, #15]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d160      	bne.n	80069dc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d111      	bne.n	8006944 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006920:	4b31      	ldr	r3, [pc, #196]	; (80069e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006928:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	6892      	ldr	r2, [r2, #8]
 8006930:	0211      	lsls	r1, r2, #8
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	68d2      	ldr	r2, [r2, #12]
 8006936:	0912      	lsrs	r2, r2, #4
 8006938:	0452      	lsls	r2, r2, #17
 800693a:	430a      	orrs	r2, r1
 800693c:	492a      	ldr	r1, [pc, #168]	; (80069e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800693e:	4313      	orrs	r3, r2
 8006940:	610b      	str	r3, [r1, #16]
 8006942:	e027      	b.n	8006994 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d112      	bne.n	8006970 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800694a:	4b27      	ldr	r3, [pc, #156]	; (80069e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006952:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	6892      	ldr	r2, [r2, #8]
 800695a:	0211      	lsls	r1, r2, #8
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	6912      	ldr	r2, [r2, #16]
 8006960:	0852      	lsrs	r2, r2, #1
 8006962:	3a01      	subs	r2, #1
 8006964:	0552      	lsls	r2, r2, #21
 8006966:	430a      	orrs	r2, r1
 8006968:	491f      	ldr	r1, [pc, #124]	; (80069e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800696a:	4313      	orrs	r3, r2
 800696c:	610b      	str	r3, [r1, #16]
 800696e:	e011      	b.n	8006994 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006970:	4b1d      	ldr	r3, [pc, #116]	; (80069e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006972:	691b      	ldr	r3, [r3, #16]
 8006974:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006978:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	6892      	ldr	r2, [r2, #8]
 8006980:	0211      	lsls	r1, r2, #8
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	6952      	ldr	r2, [r2, #20]
 8006986:	0852      	lsrs	r2, r2, #1
 8006988:	3a01      	subs	r2, #1
 800698a:	0652      	lsls	r2, r2, #25
 800698c:	430a      	orrs	r2, r1
 800698e:	4916      	ldr	r1, [pc, #88]	; (80069e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006990:	4313      	orrs	r3, r2
 8006992:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006994:	4b14      	ldr	r3, [pc, #80]	; (80069e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a13      	ldr	r2, [pc, #76]	; (80069e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800699a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800699e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069a0:	f7fb fc72 	bl	8002288 <HAL_GetTick>
 80069a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80069a6:	e009      	b.n	80069bc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80069a8:	f7fb fc6e 	bl	8002288 <HAL_GetTick>
 80069ac:	4602      	mov	r2, r0
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	2b02      	cmp	r3, #2
 80069b4:	d902      	bls.n	80069bc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80069b6:	2303      	movs	r3, #3
 80069b8:	73fb      	strb	r3, [r7, #15]
          break;
 80069ba:	e005      	b.n	80069c8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80069bc:	4b0a      	ldr	r3, [pc, #40]	; (80069e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d0ef      	beq.n	80069a8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80069c8:	7bfb      	ldrb	r3, [r7, #15]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d106      	bne.n	80069dc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80069ce:	4b06      	ldr	r3, [pc, #24]	; (80069e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069d0:	691a      	ldr	r2, [r3, #16]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	699b      	ldr	r3, [r3, #24]
 80069d6:	4904      	ldr	r1, [pc, #16]	; (80069e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069d8:	4313      	orrs	r3, r2
 80069da:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80069dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3710      	adds	r7, #16
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	40021000 	.word	0x40021000

080069ec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80069f6:	2300      	movs	r3, #0
 80069f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80069fa:	4b6a      	ldr	r3, [pc, #424]	; (8006ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	f003 0303 	and.w	r3, r3, #3
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d018      	beq.n	8006a38 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006a06:	4b67      	ldr	r3, [pc, #412]	; (8006ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	f003 0203 	and.w	r2, r3, #3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d10d      	bne.n	8006a32 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
       ||
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d009      	beq.n	8006a32 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006a1e:	4b61      	ldr	r3, [pc, #388]	; (8006ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	091b      	lsrs	r3, r3, #4
 8006a24:	f003 0307 	and.w	r3, r3, #7
 8006a28:	1c5a      	adds	r2, r3, #1
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	685b      	ldr	r3, [r3, #4]
       ||
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d047      	beq.n	8006ac2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	73fb      	strb	r3, [r7, #15]
 8006a36:	e044      	b.n	8006ac2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2b03      	cmp	r3, #3
 8006a3e:	d018      	beq.n	8006a72 <RCCEx_PLLSAI2_Config+0x86>
 8006a40:	2b03      	cmp	r3, #3
 8006a42:	d825      	bhi.n	8006a90 <RCCEx_PLLSAI2_Config+0xa4>
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d002      	beq.n	8006a4e <RCCEx_PLLSAI2_Config+0x62>
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	d009      	beq.n	8006a60 <RCCEx_PLLSAI2_Config+0x74>
 8006a4c:	e020      	b.n	8006a90 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006a4e:	4b55      	ldr	r3, [pc, #340]	; (8006ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 0302 	and.w	r3, r3, #2
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d11d      	bne.n	8006a96 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a5e:	e01a      	b.n	8006a96 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006a60:	4b50      	ldr	r3, [pc, #320]	; (8006ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d116      	bne.n	8006a9a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a70:	e013      	b.n	8006a9a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006a72:	4b4c      	ldr	r3, [pc, #304]	; (8006ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d10f      	bne.n	8006a9e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006a7e:	4b49      	ldr	r3, [pc, #292]	; (8006ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d109      	bne.n	8006a9e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006a8e:	e006      	b.n	8006a9e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	73fb      	strb	r3, [r7, #15]
      break;
 8006a94:	e004      	b.n	8006aa0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006a96:	bf00      	nop
 8006a98:	e002      	b.n	8006aa0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006a9a:	bf00      	nop
 8006a9c:	e000      	b.n	8006aa0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006a9e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006aa0:	7bfb      	ldrb	r3, [r7, #15]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d10d      	bne.n	8006ac2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006aa6:	4b3f      	ldr	r3, [pc, #252]	; (8006ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6819      	ldr	r1, [r3, #0]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	011b      	lsls	r3, r3, #4
 8006aba:	430b      	orrs	r3, r1
 8006abc:	4939      	ldr	r1, [pc, #228]	; (8006ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006ac2:	7bfb      	ldrb	r3, [r7, #15]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d167      	bne.n	8006b98 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006ac8:	4b36      	ldr	r3, [pc, #216]	; (8006ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a35      	ldr	r2, [pc, #212]	; (8006ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ace:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ad2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ad4:	f7fb fbd8 	bl	8002288 <HAL_GetTick>
 8006ad8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006ada:	e009      	b.n	8006af0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006adc:	f7fb fbd4 	bl	8002288 <HAL_GetTick>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d902      	bls.n	8006af0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006aea:	2303      	movs	r3, #3
 8006aec:	73fb      	strb	r3, [r7, #15]
        break;
 8006aee:	e005      	b.n	8006afc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006af0:	4b2c      	ldr	r3, [pc, #176]	; (8006ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d1ef      	bne.n	8006adc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006afc:	7bfb      	ldrb	r3, [r7, #15]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d14a      	bne.n	8006b98 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d111      	bne.n	8006b2c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006b08:	4b26      	ldr	r3, [pc, #152]	; (8006ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b0a:	695b      	ldr	r3, [r3, #20]
 8006b0c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006b10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	6892      	ldr	r2, [r2, #8]
 8006b18:	0211      	lsls	r1, r2, #8
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	68d2      	ldr	r2, [r2, #12]
 8006b1e:	0912      	lsrs	r2, r2, #4
 8006b20:	0452      	lsls	r2, r2, #17
 8006b22:	430a      	orrs	r2, r1
 8006b24:	491f      	ldr	r1, [pc, #124]	; (8006ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b26:	4313      	orrs	r3, r2
 8006b28:	614b      	str	r3, [r1, #20]
 8006b2a:	e011      	b.n	8006b50 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006b2c:	4b1d      	ldr	r3, [pc, #116]	; (8006ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b2e:	695b      	ldr	r3, [r3, #20]
 8006b30:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006b34:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	6892      	ldr	r2, [r2, #8]
 8006b3c:	0211      	lsls	r1, r2, #8
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	6912      	ldr	r2, [r2, #16]
 8006b42:	0852      	lsrs	r2, r2, #1
 8006b44:	3a01      	subs	r2, #1
 8006b46:	0652      	lsls	r2, r2, #25
 8006b48:	430a      	orrs	r2, r1
 8006b4a:	4916      	ldr	r1, [pc, #88]	; (8006ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006b50:	4b14      	ldr	r3, [pc, #80]	; (8006ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a13      	ldr	r2, [pc, #76]	; (8006ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b5a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b5c:	f7fb fb94 	bl	8002288 <HAL_GetTick>
 8006b60:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006b62:	e009      	b.n	8006b78 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006b64:	f7fb fb90 	bl	8002288 <HAL_GetTick>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	d902      	bls.n	8006b78 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006b72:	2303      	movs	r3, #3
 8006b74:	73fb      	strb	r3, [r7, #15]
          break;
 8006b76:	e005      	b.n	8006b84 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006b78:	4b0a      	ldr	r3, [pc, #40]	; (8006ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d0ef      	beq.n	8006b64 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006b84:	7bfb      	ldrb	r3, [r7, #15]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d106      	bne.n	8006b98 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006b8a:	4b06      	ldr	r3, [pc, #24]	; (8006ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b8c:	695a      	ldr	r2, [r3, #20]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	695b      	ldr	r3, [r3, #20]
 8006b92:	4904      	ldr	r1, [pc, #16]	; (8006ba4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b94:	4313      	orrs	r3, r2
 8006b96:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3710      	adds	r7, #16
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	40021000 	.word	0x40021000

08006ba8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d101      	bne.n	8006bba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e095      	b.n	8006ce6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d108      	bne.n	8006bd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bca:	d009      	beq.n	8006be0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	61da      	str	r2, [r3, #28]
 8006bd2:	e005      	b.n	8006be0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d106      	bne.n	8006c00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f7fa ff5a 	bl	8001ab4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2202      	movs	r2, #2
 8006c04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c16:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c20:	d902      	bls.n	8006c28 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006c22:	2300      	movs	r3, #0
 8006c24:	60fb      	str	r3, [r7, #12]
 8006c26:	e002      	b.n	8006c2e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006c28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c2c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006c36:	d007      	beq.n	8006c48 <HAL_SPI_Init+0xa0>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c40:	d002      	beq.n	8006c48 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006c58:	431a      	orrs	r2, r3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	f003 0302 	and.w	r3, r3, #2
 8006c62:	431a      	orrs	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	695b      	ldr	r3, [r3, #20]
 8006c68:	f003 0301 	and.w	r3, r3, #1
 8006c6c:	431a      	orrs	r2, r3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c76:	431a      	orrs	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	69db      	ldr	r3, [r3, #28]
 8006c7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c80:	431a      	orrs	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a1b      	ldr	r3, [r3, #32]
 8006c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c8a:	ea42 0103 	orr.w	r1, r2, r3
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c92:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	430a      	orrs	r2, r1
 8006c9c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	699b      	ldr	r3, [r3, #24]
 8006ca2:	0c1b      	lsrs	r3, r3, #16
 8006ca4:	f003 0204 	and.w	r2, r3, #4
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cac:	f003 0310 	and.w	r3, r3, #16
 8006cb0:	431a      	orrs	r2, r3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cb6:	f003 0308 	and.w	r3, r3, #8
 8006cba:	431a      	orrs	r2, r3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006cc4:	ea42 0103 	orr.w	r1, r2, r3
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	430a      	orrs	r2, r1
 8006cd4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
	...

08006cf0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b088      	sub	sp, #32
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	099b      	lsrs	r3, r3, #6
 8006d0c:	f003 0301 	and.w	r3, r3, #1
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d10f      	bne.n	8006d34 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00a      	beq.n	8006d34 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	099b      	lsrs	r3, r3, #6
 8006d22:	f003 0301 	and.w	r3, r3, #1
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d004      	beq.n	8006d34 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	4798      	blx	r3
    return;
 8006d32:	e0d7      	b.n	8006ee4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	085b      	lsrs	r3, r3, #1
 8006d38:	f003 0301 	and.w	r3, r3, #1
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00a      	beq.n	8006d56 <HAL_SPI_IRQHandler+0x66>
 8006d40:	69fb      	ldr	r3, [r7, #28]
 8006d42:	09db      	lsrs	r3, r3, #7
 8006d44:	f003 0301 	and.w	r3, r3, #1
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d004      	beq.n	8006d56 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	4798      	blx	r3
    return;
 8006d54:	e0c6      	b.n	8006ee4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	095b      	lsrs	r3, r3, #5
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10c      	bne.n	8006d7c <HAL_SPI_IRQHandler+0x8c>
 8006d62:	69bb      	ldr	r3, [r7, #24]
 8006d64:	099b      	lsrs	r3, r3, #6
 8006d66:	f003 0301 	and.w	r3, r3, #1
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d106      	bne.n	8006d7c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	0a1b      	lsrs	r3, r3, #8
 8006d72:	f003 0301 	and.w	r3, r3, #1
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	f000 80b4 	beq.w	8006ee4 <HAL_SPI_IRQHandler+0x1f4>
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	095b      	lsrs	r3, r3, #5
 8006d80:	f003 0301 	and.w	r3, r3, #1
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	f000 80ad 	beq.w	8006ee4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006d8a:	69bb      	ldr	r3, [r7, #24]
 8006d8c:	099b      	lsrs	r3, r3, #6
 8006d8e:	f003 0301 	and.w	r3, r3, #1
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d023      	beq.n	8006dde <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	2b03      	cmp	r3, #3
 8006da0:	d011      	beq.n	8006dc6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006da6:	f043 0204 	orr.w	r2, r3, #4
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006dae:	2300      	movs	r3, #0
 8006db0:	617b      	str	r3, [r7, #20]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	617b      	str	r3, [r7, #20]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	617b      	str	r3, [r7, #20]
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	e00b      	b.n	8006dde <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	613b      	str	r3, [r7, #16]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	613b      	str	r3, [r7, #16]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	613b      	str	r3, [r7, #16]
 8006dda:	693b      	ldr	r3, [r7, #16]
        return;
 8006ddc:	e082      	b.n	8006ee4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	095b      	lsrs	r3, r3, #5
 8006de2:	f003 0301 	and.w	r3, r3, #1
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d014      	beq.n	8006e14 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dee:	f043 0201 	orr.w	r2, r3, #1
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006df6:	2300      	movs	r3, #0
 8006df8:	60fb      	str	r3, [r7, #12]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	60fb      	str	r3, [r7, #12]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e10:	601a      	str	r2, [r3, #0]
 8006e12:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	0a1b      	lsrs	r3, r3, #8
 8006e18:	f003 0301 	and.w	r3, r3, #1
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d00c      	beq.n	8006e3a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e24:	f043 0208 	orr.w	r2, r3, #8
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	60bb      	str	r3, [r7, #8]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	60bb      	str	r3, [r7, #8]
 8006e38:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d04f      	beq.n	8006ee2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	685a      	ldr	r2, [r3, #4]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006e50:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2201      	movs	r2, #1
 8006e56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	f003 0302 	and.w	r3, r3, #2
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d104      	bne.n	8006e6e <HAL_SPI_IRQHandler+0x17e>
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	f003 0301 	and.w	r3, r3, #1
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d034      	beq.n	8006ed8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	685a      	ldr	r2, [r3, #4]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f022 0203 	bic.w	r2, r2, #3
 8006e7c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d011      	beq.n	8006eaa <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e8a:	4a18      	ldr	r2, [pc, #96]	; (8006eec <HAL_SPI_IRQHandler+0x1fc>)
 8006e8c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e92:	4618      	mov	r0, r3
 8006e94:	f7fb fc2e 	bl	80026f4 <HAL_DMA_Abort_IT>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d005      	beq.n	8006eaa <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ea2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d016      	beq.n	8006ee0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eb6:	4a0d      	ldr	r2, [pc, #52]	; (8006eec <HAL_SPI_IRQHandler+0x1fc>)
 8006eb8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f7fb fc18 	bl	80026f4 <HAL_DMA_Abort_IT>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d00a      	beq.n	8006ee0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ece:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006ed6:	e003      	b.n	8006ee0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 f809 	bl	8006ef0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006ede:	e000      	b.n	8006ee2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006ee0:	bf00      	nop
    return;
 8006ee2:	bf00      	nop
  }
}
 8006ee4:	3720      	adds	r7, #32
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	08006f05 	.word	0x08006f05

08006ef0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006ef8:	bf00      	nop
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f10:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f7ff ffe5 	bl	8006ef0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006f26:	bf00      	nop
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b082      	sub	sp, #8
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d101      	bne.n	8006f40 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e049      	b.n	8006fd4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d106      	bne.n	8006f5a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f7fa fff3 	bl	8001f40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2202      	movs	r2, #2
 8006f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	3304      	adds	r3, #4
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	4610      	mov	r0, r2
 8006f6e:	f000 fa1b 	bl	80073a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2201      	movs	r2, #1
 8006f76:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2201      	movs	r2, #1
 8006f96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2201      	movs	r2, #1
 8006fae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3708      	adds	r7, #8
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b085      	sub	sp, #20
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d001      	beq.n	8006ff4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e04f      	b.n	8007094 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2202      	movs	r2, #2
 8006ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	68da      	ldr	r2, [r3, #12]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f042 0201 	orr.w	r2, r2, #1
 800700a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a23      	ldr	r2, [pc, #140]	; (80070a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d01d      	beq.n	8007052 <HAL_TIM_Base_Start_IT+0x76>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800701e:	d018      	beq.n	8007052 <HAL_TIM_Base_Start_IT+0x76>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a1f      	ldr	r2, [pc, #124]	; (80070a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d013      	beq.n	8007052 <HAL_TIM_Base_Start_IT+0x76>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a1e      	ldr	r2, [pc, #120]	; (80070a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d00e      	beq.n	8007052 <HAL_TIM_Base_Start_IT+0x76>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a1c      	ldr	r2, [pc, #112]	; (80070ac <HAL_TIM_Base_Start_IT+0xd0>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d009      	beq.n	8007052 <HAL_TIM_Base_Start_IT+0x76>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a1b      	ldr	r2, [pc, #108]	; (80070b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d004      	beq.n	8007052 <HAL_TIM_Base_Start_IT+0x76>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a19      	ldr	r2, [pc, #100]	; (80070b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d115      	bne.n	800707e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	689a      	ldr	r2, [r3, #8]
 8007058:	4b17      	ldr	r3, [pc, #92]	; (80070b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800705a:	4013      	ands	r3, r2
 800705c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2b06      	cmp	r3, #6
 8007062:	d015      	beq.n	8007090 <HAL_TIM_Base_Start_IT+0xb4>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800706a:	d011      	beq.n	8007090 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f042 0201 	orr.w	r2, r2, #1
 800707a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800707c:	e008      	b.n	8007090 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f042 0201 	orr.w	r2, r2, #1
 800708c:	601a      	str	r2, [r3, #0]
 800708e:	e000      	b.n	8007092 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007090:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3714      	adds	r7, #20
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr
 80070a0:	40012c00 	.word	0x40012c00
 80070a4:	40000400 	.word	0x40000400
 80070a8:	40000800 	.word	0x40000800
 80070ac:	40000c00 	.word	0x40000c00
 80070b0:	40013400 	.word	0x40013400
 80070b4:	40014000 	.word	0x40014000
 80070b8:	00010007 	.word	0x00010007

080070bc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	68da      	ldr	r2, [r3, #12]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f022 0201 	bic.w	r2, r2, #1
 80070d2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	6a1a      	ldr	r2, [r3, #32]
 80070da:	f241 1311 	movw	r3, #4369	; 0x1111
 80070de:	4013      	ands	r3, r2
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d10f      	bne.n	8007104 <HAL_TIM_Base_Stop_IT+0x48>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	6a1a      	ldr	r2, [r3, #32]
 80070ea:	f240 4344 	movw	r3, #1092	; 0x444
 80070ee:	4013      	ands	r3, r2
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d107      	bne.n	8007104 <HAL_TIM_Base_Stop_IT+0x48>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f022 0201 	bic.w	r2, r2, #1
 8007102:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2201      	movs	r2, #1
 8007108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800710c:	2300      	movs	r3, #0
}
 800710e:	4618      	mov	r0, r3
 8007110:	370c      	adds	r7, #12
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr

0800711a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800711a:	b580      	push	{r7, lr}
 800711c:	b082      	sub	sp, #8
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	f003 0302 	and.w	r3, r3, #2
 800712c:	2b02      	cmp	r3, #2
 800712e:	d122      	bne.n	8007176 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	f003 0302 	and.w	r3, r3, #2
 800713a:	2b02      	cmp	r3, #2
 800713c:	d11b      	bne.n	8007176 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f06f 0202 	mvn.w	r2, #2
 8007146:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	699b      	ldr	r3, [r3, #24]
 8007154:	f003 0303 	and.w	r3, r3, #3
 8007158:	2b00      	cmp	r3, #0
 800715a:	d003      	beq.n	8007164 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 f905 	bl	800736c <HAL_TIM_IC_CaptureCallback>
 8007162:	e005      	b.n	8007170 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 f8f7 	bl	8007358 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 f908 	bl	8007380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	f003 0304 	and.w	r3, r3, #4
 8007180:	2b04      	cmp	r3, #4
 8007182:	d122      	bne.n	80071ca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	f003 0304 	and.w	r3, r3, #4
 800718e:	2b04      	cmp	r3, #4
 8007190:	d11b      	bne.n	80071ca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f06f 0204 	mvn.w	r2, #4
 800719a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2202      	movs	r2, #2
 80071a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	699b      	ldr	r3, [r3, #24]
 80071a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d003      	beq.n	80071b8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 f8db 	bl	800736c <HAL_TIM_IC_CaptureCallback>
 80071b6:	e005      	b.n	80071c4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 f8cd 	bl	8007358 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 f8de 	bl	8007380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	f003 0308 	and.w	r3, r3, #8
 80071d4:	2b08      	cmp	r3, #8
 80071d6:	d122      	bne.n	800721e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	68db      	ldr	r3, [r3, #12]
 80071de:	f003 0308 	and.w	r3, r3, #8
 80071e2:	2b08      	cmp	r3, #8
 80071e4:	d11b      	bne.n	800721e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f06f 0208 	mvn.w	r2, #8
 80071ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2204      	movs	r2, #4
 80071f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	69db      	ldr	r3, [r3, #28]
 80071fc:	f003 0303 	and.w	r3, r3, #3
 8007200:	2b00      	cmp	r3, #0
 8007202:	d003      	beq.n	800720c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 f8b1 	bl	800736c <HAL_TIM_IC_CaptureCallback>
 800720a:	e005      	b.n	8007218 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 f8a3 	bl	8007358 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 f8b4 	bl	8007380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	f003 0310 	and.w	r3, r3, #16
 8007228:	2b10      	cmp	r3, #16
 800722a:	d122      	bne.n	8007272 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	f003 0310 	and.w	r3, r3, #16
 8007236:	2b10      	cmp	r3, #16
 8007238:	d11b      	bne.n	8007272 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f06f 0210 	mvn.w	r2, #16
 8007242:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2208      	movs	r2, #8
 8007248:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	69db      	ldr	r3, [r3, #28]
 8007250:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007254:	2b00      	cmp	r3, #0
 8007256:	d003      	beq.n	8007260 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 f887 	bl	800736c <HAL_TIM_IC_CaptureCallback>
 800725e:	e005      	b.n	800726c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 f879 	bl	8007358 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 f88a 	bl	8007380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	691b      	ldr	r3, [r3, #16]
 8007278:	f003 0301 	and.w	r3, r3, #1
 800727c:	2b01      	cmp	r3, #1
 800727e:	d10e      	bne.n	800729e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	f003 0301 	and.w	r3, r3, #1
 800728a:	2b01      	cmp	r3, #1
 800728c:	d107      	bne.n	800729e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f06f 0201 	mvn.w	r2, #1
 8007296:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f7fa fe77 	bl	8001f8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	691b      	ldr	r3, [r3, #16]
 80072a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072a8:	2b80      	cmp	r3, #128	; 0x80
 80072aa:	d10e      	bne.n	80072ca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072b6:	2b80      	cmp	r3, #128	; 0x80
 80072b8:	d107      	bne.n	80072ca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80072c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 f913 	bl	80074f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072d8:	d10e      	bne.n	80072f8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072e4:	2b80      	cmp	r3, #128	; 0x80
 80072e6:	d107      	bne.n	80072f8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80072f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 f906 	bl	8007504 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007302:	2b40      	cmp	r3, #64	; 0x40
 8007304:	d10e      	bne.n	8007324 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007310:	2b40      	cmp	r3, #64	; 0x40
 8007312:	d107      	bne.n	8007324 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800731c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 f838 	bl	8007394 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	f003 0320 	and.w	r3, r3, #32
 800732e:	2b20      	cmp	r3, #32
 8007330:	d10e      	bne.n	8007350 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	f003 0320 	and.w	r3, r3, #32
 800733c:	2b20      	cmp	r3, #32
 800733e:	d107      	bne.n	8007350 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f06f 0220 	mvn.w	r2, #32
 8007348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 f8c6 	bl	80074dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007350:	bf00      	nop
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007360:	bf00      	nop
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007374:	bf00      	nop
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007380:	b480      	push	{r7}
 8007382:	b083      	sub	sp, #12
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007388:	bf00      	nop
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800739c:	bf00      	nop
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	4a40      	ldr	r2, [pc, #256]	; (80074bc <TIM_Base_SetConfig+0x114>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d013      	beq.n	80073e8 <TIM_Base_SetConfig+0x40>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073c6:	d00f      	beq.n	80073e8 <TIM_Base_SetConfig+0x40>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4a3d      	ldr	r2, [pc, #244]	; (80074c0 <TIM_Base_SetConfig+0x118>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d00b      	beq.n	80073e8 <TIM_Base_SetConfig+0x40>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4a3c      	ldr	r2, [pc, #240]	; (80074c4 <TIM_Base_SetConfig+0x11c>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d007      	beq.n	80073e8 <TIM_Base_SetConfig+0x40>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a3b      	ldr	r2, [pc, #236]	; (80074c8 <TIM_Base_SetConfig+0x120>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d003      	beq.n	80073e8 <TIM_Base_SetConfig+0x40>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a3a      	ldr	r2, [pc, #232]	; (80074cc <TIM_Base_SetConfig+0x124>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d108      	bne.n	80073fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	68fa      	ldr	r2, [r7, #12]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a2f      	ldr	r2, [pc, #188]	; (80074bc <TIM_Base_SetConfig+0x114>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d01f      	beq.n	8007442 <TIM_Base_SetConfig+0x9a>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007408:	d01b      	beq.n	8007442 <TIM_Base_SetConfig+0x9a>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a2c      	ldr	r2, [pc, #176]	; (80074c0 <TIM_Base_SetConfig+0x118>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d017      	beq.n	8007442 <TIM_Base_SetConfig+0x9a>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a2b      	ldr	r2, [pc, #172]	; (80074c4 <TIM_Base_SetConfig+0x11c>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d013      	beq.n	8007442 <TIM_Base_SetConfig+0x9a>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a2a      	ldr	r2, [pc, #168]	; (80074c8 <TIM_Base_SetConfig+0x120>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d00f      	beq.n	8007442 <TIM_Base_SetConfig+0x9a>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a29      	ldr	r2, [pc, #164]	; (80074cc <TIM_Base_SetConfig+0x124>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d00b      	beq.n	8007442 <TIM_Base_SetConfig+0x9a>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a28      	ldr	r2, [pc, #160]	; (80074d0 <TIM_Base_SetConfig+0x128>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d007      	beq.n	8007442 <TIM_Base_SetConfig+0x9a>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a27      	ldr	r2, [pc, #156]	; (80074d4 <TIM_Base_SetConfig+0x12c>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d003      	beq.n	8007442 <TIM_Base_SetConfig+0x9a>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4a26      	ldr	r2, [pc, #152]	; (80074d8 <TIM_Base_SetConfig+0x130>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d108      	bne.n	8007454 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007448:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	68fa      	ldr	r2, [r7, #12]
 8007450:	4313      	orrs	r3, r2
 8007452:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	695b      	ldr	r3, [r3, #20]
 800745e:	4313      	orrs	r3, r2
 8007460:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	689a      	ldr	r2, [r3, #8]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	4a10      	ldr	r2, [pc, #64]	; (80074bc <TIM_Base_SetConfig+0x114>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d00f      	beq.n	80074a0 <TIM_Base_SetConfig+0xf8>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	4a12      	ldr	r2, [pc, #72]	; (80074cc <TIM_Base_SetConfig+0x124>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d00b      	beq.n	80074a0 <TIM_Base_SetConfig+0xf8>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4a11      	ldr	r2, [pc, #68]	; (80074d0 <TIM_Base_SetConfig+0x128>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d007      	beq.n	80074a0 <TIM_Base_SetConfig+0xf8>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a10      	ldr	r2, [pc, #64]	; (80074d4 <TIM_Base_SetConfig+0x12c>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d003      	beq.n	80074a0 <TIM_Base_SetConfig+0xf8>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4a0f      	ldr	r2, [pc, #60]	; (80074d8 <TIM_Base_SetConfig+0x130>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d103      	bne.n	80074a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	691a      	ldr	r2, [r3, #16]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	615a      	str	r2, [r3, #20]
}
 80074ae:	bf00      	nop
 80074b0:	3714      	adds	r7, #20
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr
 80074ba:	bf00      	nop
 80074bc:	40012c00 	.word	0x40012c00
 80074c0:	40000400 	.word	0x40000400
 80074c4:	40000800 	.word	0x40000800
 80074c8:	40000c00 	.word	0x40000c00
 80074cc:	40013400 	.word	0x40013400
 80074d0:	40014000 	.word	0x40014000
 80074d4:	40014400 	.word	0x40014400
 80074d8:	40014800 	.word	0x40014800

080074dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80074e4:	bf00      	nop
 80074e6:	370c      	adds	r7, #12
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b083      	sub	sp, #12
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074f8:	bf00      	nop
 80074fa:	370c      	adds	r7, #12
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800750c:	bf00      	nop
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d101      	bne.n	800752a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	e040      	b.n	80075ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800752e:	2b00      	cmp	r3, #0
 8007530:	d106      	bne.n	8007540 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f7fa fd8c 	bl	8002058 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2224      	movs	r2, #36	; 0x24
 8007544:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f022 0201 	bic.w	r2, r2, #1
 8007554:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 f8c0 	bl	80076dc <UART_SetConfig>
 800755c:	4603      	mov	r3, r0
 800755e:	2b01      	cmp	r3, #1
 8007560:	d101      	bne.n	8007566 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e022      	b.n	80075ac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756a:	2b00      	cmp	r3, #0
 800756c:	d002      	beq.n	8007574 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 fb6c 	bl	8007c4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	685a      	ldr	r2, [r3, #4]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007582:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	689a      	ldr	r2, [r3, #8]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007592:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f042 0201 	orr.w	r2, r2, #1
 80075a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 fbf3 	bl	8007d90 <UART_CheckIdleState>
 80075aa:	4603      	mov	r3, r0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3708      	adds	r7, #8
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b08a      	sub	sp, #40	; 0x28
 80075b8:	af02      	add	r7, sp, #8
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	603b      	str	r3, [r7, #0]
 80075c0:	4613      	mov	r3, r2
 80075c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075c8:	2b20      	cmp	r3, #32
 80075ca:	f040 8082 	bne.w	80076d2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d002      	beq.n	80075da <HAL_UART_Transmit+0x26>
 80075d4:	88fb      	ldrh	r3, [r7, #6]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d101      	bne.n	80075de <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	e07a      	b.n	80076d4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d101      	bne.n	80075ec <HAL_UART_Transmit+0x38>
 80075e8:	2302      	movs	r3, #2
 80075ea:	e073      	b.n	80076d4 <HAL_UART_Transmit+0x120>
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2201      	movs	r2, #1
 80075f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2221      	movs	r2, #33	; 0x21
 8007600:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007602:	f7fa fe41 	bl	8002288 <HAL_GetTick>
 8007606:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	88fa      	ldrh	r2, [r7, #6]
 800760c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	88fa      	ldrh	r2, [r7, #6]
 8007614:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007620:	d108      	bne.n	8007634 <HAL_UART_Transmit+0x80>
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d104      	bne.n	8007634 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800762a:	2300      	movs	r3, #0
 800762c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	61bb      	str	r3, [r7, #24]
 8007632:	e003      	b.n	800763c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007638:	2300      	movs	r3, #0
 800763a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2200      	movs	r2, #0
 8007640:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007644:	e02d      	b.n	80076a2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	9300      	str	r3, [sp, #0]
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	2200      	movs	r2, #0
 800764e:	2180      	movs	r1, #128	; 0x80
 8007650:	68f8      	ldr	r0, [r7, #12]
 8007652:	f000 fbe6 	bl	8007e22 <UART_WaitOnFlagUntilTimeout>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d001      	beq.n	8007660 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800765c:	2303      	movs	r3, #3
 800765e:	e039      	b.n	80076d4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d10b      	bne.n	800767e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	881a      	ldrh	r2, [r3, #0]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007672:	b292      	uxth	r2, r2
 8007674:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	3302      	adds	r3, #2
 800767a:	61bb      	str	r3, [r7, #24]
 800767c:	e008      	b.n	8007690 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	781a      	ldrb	r2, [r3, #0]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	b292      	uxth	r2, r2
 8007688:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	3301      	adds	r3, #1
 800768e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007696:	b29b      	uxth	r3, r3
 8007698:	3b01      	subs	r3, #1
 800769a:	b29a      	uxth	r2, r3
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1cb      	bne.n	8007646 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	9300      	str	r3, [sp, #0]
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	2200      	movs	r2, #0
 80076b6:	2140      	movs	r1, #64	; 0x40
 80076b8:	68f8      	ldr	r0, [r7, #12]
 80076ba:	f000 fbb2 	bl	8007e22 <UART_WaitOnFlagUntilTimeout>
 80076be:	4603      	mov	r3, r0
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d001      	beq.n	80076c8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80076c4:	2303      	movs	r3, #3
 80076c6:	e005      	b.n	80076d4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2220      	movs	r2, #32
 80076cc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80076ce:	2300      	movs	r3, #0
 80076d0:	e000      	b.n	80076d4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80076d2:	2302      	movs	r3, #2
  }
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3720      	adds	r7, #32
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076e0:	b08a      	sub	sp, #40	; 0x28
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80076e6:	2300      	movs	r3, #0
 80076e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	689a      	ldr	r2, [r3, #8]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	691b      	ldr	r3, [r3, #16]
 80076f4:	431a      	orrs	r2, r3
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	695b      	ldr	r3, [r3, #20]
 80076fa:	431a      	orrs	r2, r3
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	69db      	ldr	r3, [r3, #28]
 8007700:	4313      	orrs	r3, r2
 8007702:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	4ba4      	ldr	r3, [pc, #656]	; (800799c <UART_SetConfig+0x2c0>)
 800770c:	4013      	ands	r3, r2
 800770e:	68fa      	ldr	r2, [r7, #12]
 8007710:	6812      	ldr	r2, [r2, #0]
 8007712:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007714:	430b      	orrs	r3, r1
 8007716:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	68da      	ldr	r2, [r3, #12]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	430a      	orrs	r2, r1
 800772c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	699b      	ldr	r3, [r3, #24]
 8007732:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a99      	ldr	r2, [pc, #612]	; (80079a0 <UART_SetConfig+0x2c4>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d004      	beq.n	8007748 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	6a1b      	ldr	r3, [r3, #32]
 8007742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007744:	4313      	orrs	r3, r2
 8007746:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007758:	430a      	orrs	r2, r1
 800775a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a90      	ldr	r2, [pc, #576]	; (80079a4 <UART_SetConfig+0x2c8>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d126      	bne.n	80077b4 <UART_SetConfig+0xd8>
 8007766:	4b90      	ldr	r3, [pc, #576]	; (80079a8 <UART_SetConfig+0x2cc>)
 8007768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800776c:	f003 0303 	and.w	r3, r3, #3
 8007770:	2b03      	cmp	r3, #3
 8007772:	d81b      	bhi.n	80077ac <UART_SetConfig+0xd0>
 8007774:	a201      	add	r2, pc, #4	; (adr r2, 800777c <UART_SetConfig+0xa0>)
 8007776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800777a:	bf00      	nop
 800777c:	0800778d 	.word	0x0800778d
 8007780:	0800779d 	.word	0x0800779d
 8007784:	08007795 	.word	0x08007795
 8007788:	080077a5 	.word	0x080077a5
 800778c:	2301      	movs	r3, #1
 800778e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007792:	e116      	b.n	80079c2 <UART_SetConfig+0x2e6>
 8007794:	2302      	movs	r3, #2
 8007796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800779a:	e112      	b.n	80079c2 <UART_SetConfig+0x2e6>
 800779c:	2304      	movs	r3, #4
 800779e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077a2:	e10e      	b.n	80079c2 <UART_SetConfig+0x2e6>
 80077a4:	2308      	movs	r3, #8
 80077a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077aa:	e10a      	b.n	80079c2 <UART_SetConfig+0x2e6>
 80077ac:	2310      	movs	r3, #16
 80077ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077b2:	e106      	b.n	80079c2 <UART_SetConfig+0x2e6>
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a7c      	ldr	r2, [pc, #496]	; (80079ac <UART_SetConfig+0x2d0>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d138      	bne.n	8007830 <UART_SetConfig+0x154>
 80077be:	4b7a      	ldr	r3, [pc, #488]	; (80079a8 <UART_SetConfig+0x2cc>)
 80077c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077c4:	f003 030c 	and.w	r3, r3, #12
 80077c8:	2b0c      	cmp	r3, #12
 80077ca:	d82d      	bhi.n	8007828 <UART_SetConfig+0x14c>
 80077cc:	a201      	add	r2, pc, #4	; (adr r2, 80077d4 <UART_SetConfig+0xf8>)
 80077ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d2:	bf00      	nop
 80077d4:	08007809 	.word	0x08007809
 80077d8:	08007829 	.word	0x08007829
 80077dc:	08007829 	.word	0x08007829
 80077e0:	08007829 	.word	0x08007829
 80077e4:	08007819 	.word	0x08007819
 80077e8:	08007829 	.word	0x08007829
 80077ec:	08007829 	.word	0x08007829
 80077f0:	08007829 	.word	0x08007829
 80077f4:	08007811 	.word	0x08007811
 80077f8:	08007829 	.word	0x08007829
 80077fc:	08007829 	.word	0x08007829
 8007800:	08007829 	.word	0x08007829
 8007804:	08007821 	.word	0x08007821
 8007808:	2300      	movs	r3, #0
 800780a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800780e:	e0d8      	b.n	80079c2 <UART_SetConfig+0x2e6>
 8007810:	2302      	movs	r3, #2
 8007812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007816:	e0d4      	b.n	80079c2 <UART_SetConfig+0x2e6>
 8007818:	2304      	movs	r3, #4
 800781a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800781e:	e0d0      	b.n	80079c2 <UART_SetConfig+0x2e6>
 8007820:	2308      	movs	r3, #8
 8007822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007826:	e0cc      	b.n	80079c2 <UART_SetConfig+0x2e6>
 8007828:	2310      	movs	r3, #16
 800782a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800782e:	e0c8      	b.n	80079c2 <UART_SetConfig+0x2e6>
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a5e      	ldr	r2, [pc, #376]	; (80079b0 <UART_SetConfig+0x2d4>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d125      	bne.n	8007886 <UART_SetConfig+0x1aa>
 800783a:	4b5b      	ldr	r3, [pc, #364]	; (80079a8 <UART_SetConfig+0x2cc>)
 800783c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007840:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007844:	2b30      	cmp	r3, #48	; 0x30
 8007846:	d016      	beq.n	8007876 <UART_SetConfig+0x19a>
 8007848:	2b30      	cmp	r3, #48	; 0x30
 800784a:	d818      	bhi.n	800787e <UART_SetConfig+0x1a2>
 800784c:	2b20      	cmp	r3, #32
 800784e:	d00a      	beq.n	8007866 <UART_SetConfig+0x18a>
 8007850:	2b20      	cmp	r3, #32
 8007852:	d814      	bhi.n	800787e <UART_SetConfig+0x1a2>
 8007854:	2b00      	cmp	r3, #0
 8007856:	d002      	beq.n	800785e <UART_SetConfig+0x182>
 8007858:	2b10      	cmp	r3, #16
 800785a:	d008      	beq.n	800786e <UART_SetConfig+0x192>
 800785c:	e00f      	b.n	800787e <UART_SetConfig+0x1a2>
 800785e:	2300      	movs	r3, #0
 8007860:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007864:	e0ad      	b.n	80079c2 <UART_SetConfig+0x2e6>
 8007866:	2302      	movs	r3, #2
 8007868:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800786c:	e0a9      	b.n	80079c2 <UART_SetConfig+0x2e6>
 800786e:	2304      	movs	r3, #4
 8007870:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007874:	e0a5      	b.n	80079c2 <UART_SetConfig+0x2e6>
 8007876:	2308      	movs	r3, #8
 8007878:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800787c:	e0a1      	b.n	80079c2 <UART_SetConfig+0x2e6>
 800787e:	2310      	movs	r3, #16
 8007880:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007884:	e09d      	b.n	80079c2 <UART_SetConfig+0x2e6>
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a4a      	ldr	r2, [pc, #296]	; (80079b4 <UART_SetConfig+0x2d8>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d125      	bne.n	80078dc <UART_SetConfig+0x200>
 8007890:	4b45      	ldr	r3, [pc, #276]	; (80079a8 <UART_SetConfig+0x2cc>)
 8007892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007896:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800789a:	2bc0      	cmp	r3, #192	; 0xc0
 800789c:	d016      	beq.n	80078cc <UART_SetConfig+0x1f0>
 800789e:	2bc0      	cmp	r3, #192	; 0xc0
 80078a0:	d818      	bhi.n	80078d4 <UART_SetConfig+0x1f8>
 80078a2:	2b80      	cmp	r3, #128	; 0x80
 80078a4:	d00a      	beq.n	80078bc <UART_SetConfig+0x1e0>
 80078a6:	2b80      	cmp	r3, #128	; 0x80
 80078a8:	d814      	bhi.n	80078d4 <UART_SetConfig+0x1f8>
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d002      	beq.n	80078b4 <UART_SetConfig+0x1d8>
 80078ae:	2b40      	cmp	r3, #64	; 0x40
 80078b0:	d008      	beq.n	80078c4 <UART_SetConfig+0x1e8>
 80078b2:	e00f      	b.n	80078d4 <UART_SetConfig+0x1f8>
 80078b4:	2300      	movs	r3, #0
 80078b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078ba:	e082      	b.n	80079c2 <UART_SetConfig+0x2e6>
 80078bc:	2302      	movs	r3, #2
 80078be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078c2:	e07e      	b.n	80079c2 <UART_SetConfig+0x2e6>
 80078c4:	2304      	movs	r3, #4
 80078c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078ca:	e07a      	b.n	80079c2 <UART_SetConfig+0x2e6>
 80078cc:	2308      	movs	r3, #8
 80078ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078d2:	e076      	b.n	80079c2 <UART_SetConfig+0x2e6>
 80078d4:	2310      	movs	r3, #16
 80078d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078da:	e072      	b.n	80079c2 <UART_SetConfig+0x2e6>
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a35      	ldr	r2, [pc, #212]	; (80079b8 <UART_SetConfig+0x2dc>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d12a      	bne.n	800793c <UART_SetConfig+0x260>
 80078e6:	4b30      	ldr	r3, [pc, #192]	; (80079a8 <UART_SetConfig+0x2cc>)
 80078e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078f4:	d01a      	beq.n	800792c <UART_SetConfig+0x250>
 80078f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078fa:	d81b      	bhi.n	8007934 <UART_SetConfig+0x258>
 80078fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007900:	d00c      	beq.n	800791c <UART_SetConfig+0x240>
 8007902:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007906:	d815      	bhi.n	8007934 <UART_SetConfig+0x258>
 8007908:	2b00      	cmp	r3, #0
 800790a:	d003      	beq.n	8007914 <UART_SetConfig+0x238>
 800790c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007910:	d008      	beq.n	8007924 <UART_SetConfig+0x248>
 8007912:	e00f      	b.n	8007934 <UART_SetConfig+0x258>
 8007914:	2300      	movs	r3, #0
 8007916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800791a:	e052      	b.n	80079c2 <UART_SetConfig+0x2e6>
 800791c:	2302      	movs	r3, #2
 800791e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007922:	e04e      	b.n	80079c2 <UART_SetConfig+0x2e6>
 8007924:	2304      	movs	r3, #4
 8007926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800792a:	e04a      	b.n	80079c2 <UART_SetConfig+0x2e6>
 800792c:	2308      	movs	r3, #8
 800792e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007932:	e046      	b.n	80079c2 <UART_SetConfig+0x2e6>
 8007934:	2310      	movs	r3, #16
 8007936:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800793a:	e042      	b.n	80079c2 <UART_SetConfig+0x2e6>
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a17      	ldr	r2, [pc, #92]	; (80079a0 <UART_SetConfig+0x2c4>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d13a      	bne.n	80079bc <UART_SetConfig+0x2e0>
 8007946:	4b18      	ldr	r3, [pc, #96]	; (80079a8 <UART_SetConfig+0x2cc>)
 8007948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800794c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007950:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007954:	d01a      	beq.n	800798c <UART_SetConfig+0x2b0>
 8007956:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800795a:	d81b      	bhi.n	8007994 <UART_SetConfig+0x2b8>
 800795c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007960:	d00c      	beq.n	800797c <UART_SetConfig+0x2a0>
 8007962:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007966:	d815      	bhi.n	8007994 <UART_SetConfig+0x2b8>
 8007968:	2b00      	cmp	r3, #0
 800796a:	d003      	beq.n	8007974 <UART_SetConfig+0x298>
 800796c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007970:	d008      	beq.n	8007984 <UART_SetConfig+0x2a8>
 8007972:	e00f      	b.n	8007994 <UART_SetConfig+0x2b8>
 8007974:	2300      	movs	r3, #0
 8007976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800797a:	e022      	b.n	80079c2 <UART_SetConfig+0x2e6>
 800797c:	2302      	movs	r3, #2
 800797e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007982:	e01e      	b.n	80079c2 <UART_SetConfig+0x2e6>
 8007984:	2304      	movs	r3, #4
 8007986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800798a:	e01a      	b.n	80079c2 <UART_SetConfig+0x2e6>
 800798c:	2308      	movs	r3, #8
 800798e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007992:	e016      	b.n	80079c2 <UART_SetConfig+0x2e6>
 8007994:	2310      	movs	r3, #16
 8007996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800799a:	e012      	b.n	80079c2 <UART_SetConfig+0x2e6>
 800799c:	efff69f3 	.word	0xefff69f3
 80079a0:	40008000 	.word	0x40008000
 80079a4:	40013800 	.word	0x40013800
 80079a8:	40021000 	.word	0x40021000
 80079ac:	40004400 	.word	0x40004400
 80079b0:	40004800 	.word	0x40004800
 80079b4:	40004c00 	.word	0x40004c00
 80079b8:	40005000 	.word	0x40005000
 80079bc:	2310      	movs	r3, #16
 80079be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a9f      	ldr	r2, [pc, #636]	; (8007c44 <UART_SetConfig+0x568>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d17a      	bne.n	8007ac2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80079cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80079d0:	2b08      	cmp	r3, #8
 80079d2:	d824      	bhi.n	8007a1e <UART_SetConfig+0x342>
 80079d4:	a201      	add	r2, pc, #4	; (adr r2, 80079dc <UART_SetConfig+0x300>)
 80079d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079da:	bf00      	nop
 80079dc:	08007a01 	.word	0x08007a01
 80079e0:	08007a1f 	.word	0x08007a1f
 80079e4:	08007a09 	.word	0x08007a09
 80079e8:	08007a1f 	.word	0x08007a1f
 80079ec:	08007a0f 	.word	0x08007a0f
 80079f0:	08007a1f 	.word	0x08007a1f
 80079f4:	08007a1f 	.word	0x08007a1f
 80079f8:	08007a1f 	.word	0x08007a1f
 80079fc:	08007a17 	.word	0x08007a17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a00:	f7fe fb8a 	bl	8006118 <HAL_RCC_GetPCLK1Freq>
 8007a04:	61f8      	str	r0, [r7, #28]
        break;
 8007a06:	e010      	b.n	8007a2a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a08:	4b8f      	ldr	r3, [pc, #572]	; (8007c48 <UART_SetConfig+0x56c>)
 8007a0a:	61fb      	str	r3, [r7, #28]
        break;
 8007a0c:	e00d      	b.n	8007a2a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a0e:	f7fe faeb 	bl	8005fe8 <HAL_RCC_GetSysClockFreq>
 8007a12:	61f8      	str	r0, [r7, #28]
        break;
 8007a14:	e009      	b.n	8007a2a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a1a:	61fb      	str	r3, [r7, #28]
        break;
 8007a1c:	e005      	b.n	8007a2a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007a28:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007a2a:	69fb      	ldr	r3, [r7, #28]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f000 80fb 	beq.w	8007c28 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	685a      	ldr	r2, [r3, #4]
 8007a36:	4613      	mov	r3, r2
 8007a38:	005b      	lsls	r3, r3, #1
 8007a3a:	4413      	add	r3, r2
 8007a3c:	69fa      	ldr	r2, [r7, #28]
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d305      	bcc.n	8007a4e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007a48:	69fa      	ldr	r2, [r7, #28]
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d903      	bls.n	8007a56 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007a54:	e0e8      	b.n	8007c28 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007a56:	69fb      	ldr	r3, [r7, #28]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	461c      	mov	r4, r3
 8007a5c:	4615      	mov	r5, r2
 8007a5e:	f04f 0200 	mov.w	r2, #0
 8007a62:	f04f 0300 	mov.w	r3, #0
 8007a66:	022b      	lsls	r3, r5, #8
 8007a68:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007a6c:	0222      	lsls	r2, r4, #8
 8007a6e:	68f9      	ldr	r1, [r7, #12]
 8007a70:	6849      	ldr	r1, [r1, #4]
 8007a72:	0849      	lsrs	r1, r1, #1
 8007a74:	2000      	movs	r0, #0
 8007a76:	4688      	mov	r8, r1
 8007a78:	4681      	mov	r9, r0
 8007a7a:	eb12 0a08 	adds.w	sl, r2, r8
 8007a7e:	eb43 0b09 	adc.w	fp, r3, r9
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	2200      	movs	r2, #0
 8007a88:	603b      	str	r3, [r7, #0]
 8007a8a:	607a      	str	r2, [r7, #4]
 8007a8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a90:	4650      	mov	r0, sl
 8007a92:	4659      	mov	r1, fp
 8007a94:	f7f9 f888 	bl	8000ba8 <__aeabi_uldivmod>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007aa0:	69bb      	ldr	r3, [r7, #24]
 8007aa2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007aa6:	d308      	bcc.n	8007aba <UART_SetConfig+0x3de>
 8007aa8:	69bb      	ldr	r3, [r7, #24]
 8007aaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007aae:	d204      	bcs.n	8007aba <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	69ba      	ldr	r2, [r7, #24]
 8007ab6:	60da      	str	r2, [r3, #12]
 8007ab8:	e0b6      	b.n	8007c28 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007ac0:	e0b2      	b.n	8007c28 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	69db      	ldr	r3, [r3, #28]
 8007ac6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007aca:	d15e      	bne.n	8007b8a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007acc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ad0:	2b08      	cmp	r3, #8
 8007ad2:	d828      	bhi.n	8007b26 <UART_SetConfig+0x44a>
 8007ad4:	a201      	add	r2, pc, #4	; (adr r2, 8007adc <UART_SetConfig+0x400>)
 8007ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ada:	bf00      	nop
 8007adc:	08007b01 	.word	0x08007b01
 8007ae0:	08007b09 	.word	0x08007b09
 8007ae4:	08007b11 	.word	0x08007b11
 8007ae8:	08007b27 	.word	0x08007b27
 8007aec:	08007b17 	.word	0x08007b17
 8007af0:	08007b27 	.word	0x08007b27
 8007af4:	08007b27 	.word	0x08007b27
 8007af8:	08007b27 	.word	0x08007b27
 8007afc:	08007b1f 	.word	0x08007b1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b00:	f7fe fb0a 	bl	8006118 <HAL_RCC_GetPCLK1Freq>
 8007b04:	61f8      	str	r0, [r7, #28]
        break;
 8007b06:	e014      	b.n	8007b32 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b08:	f7fe fb1c 	bl	8006144 <HAL_RCC_GetPCLK2Freq>
 8007b0c:	61f8      	str	r0, [r7, #28]
        break;
 8007b0e:	e010      	b.n	8007b32 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b10:	4b4d      	ldr	r3, [pc, #308]	; (8007c48 <UART_SetConfig+0x56c>)
 8007b12:	61fb      	str	r3, [r7, #28]
        break;
 8007b14:	e00d      	b.n	8007b32 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b16:	f7fe fa67 	bl	8005fe8 <HAL_RCC_GetSysClockFreq>
 8007b1a:	61f8      	str	r0, [r7, #28]
        break;
 8007b1c:	e009      	b.n	8007b32 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b22:	61fb      	str	r3, [r7, #28]
        break;
 8007b24:	e005      	b.n	8007b32 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007b26:	2300      	movs	r3, #0
 8007b28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007b30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b32:	69fb      	ldr	r3, [r7, #28]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d077      	beq.n	8007c28 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	005a      	lsls	r2, r3, #1
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	085b      	lsrs	r3, r3, #1
 8007b42:	441a      	add	r2, r3
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b4c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	2b0f      	cmp	r3, #15
 8007b52:	d916      	bls.n	8007b82 <UART_SetConfig+0x4a6>
 8007b54:	69bb      	ldr	r3, [r7, #24]
 8007b56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b5a:	d212      	bcs.n	8007b82 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b5c:	69bb      	ldr	r3, [r7, #24]
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	f023 030f 	bic.w	r3, r3, #15
 8007b64:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b66:	69bb      	ldr	r3, [r7, #24]
 8007b68:	085b      	lsrs	r3, r3, #1
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	f003 0307 	and.w	r3, r3, #7
 8007b70:	b29a      	uxth	r2, r3
 8007b72:	8afb      	ldrh	r3, [r7, #22]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	8afa      	ldrh	r2, [r7, #22]
 8007b7e:	60da      	str	r2, [r3, #12]
 8007b80:	e052      	b.n	8007c28 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007b88:	e04e      	b.n	8007c28 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b8e:	2b08      	cmp	r3, #8
 8007b90:	d827      	bhi.n	8007be2 <UART_SetConfig+0x506>
 8007b92:	a201      	add	r2, pc, #4	; (adr r2, 8007b98 <UART_SetConfig+0x4bc>)
 8007b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b98:	08007bbd 	.word	0x08007bbd
 8007b9c:	08007bc5 	.word	0x08007bc5
 8007ba0:	08007bcd 	.word	0x08007bcd
 8007ba4:	08007be3 	.word	0x08007be3
 8007ba8:	08007bd3 	.word	0x08007bd3
 8007bac:	08007be3 	.word	0x08007be3
 8007bb0:	08007be3 	.word	0x08007be3
 8007bb4:	08007be3 	.word	0x08007be3
 8007bb8:	08007bdb 	.word	0x08007bdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bbc:	f7fe faac 	bl	8006118 <HAL_RCC_GetPCLK1Freq>
 8007bc0:	61f8      	str	r0, [r7, #28]
        break;
 8007bc2:	e014      	b.n	8007bee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007bc4:	f7fe fabe 	bl	8006144 <HAL_RCC_GetPCLK2Freq>
 8007bc8:	61f8      	str	r0, [r7, #28]
        break;
 8007bca:	e010      	b.n	8007bee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007bcc:	4b1e      	ldr	r3, [pc, #120]	; (8007c48 <UART_SetConfig+0x56c>)
 8007bce:	61fb      	str	r3, [r7, #28]
        break;
 8007bd0:	e00d      	b.n	8007bee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bd2:	f7fe fa09 	bl	8005fe8 <HAL_RCC_GetSysClockFreq>
 8007bd6:	61f8      	str	r0, [r7, #28]
        break;
 8007bd8:	e009      	b.n	8007bee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bde:	61fb      	str	r3, [r7, #28]
        break;
 8007be0:	e005      	b.n	8007bee <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007be2:	2300      	movs	r3, #0
 8007be4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007bec:	bf00      	nop
    }

    if (pclk != 0U)
 8007bee:	69fb      	ldr	r3, [r7, #28]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d019      	beq.n	8007c28 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	085a      	lsrs	r2, r3, #1
 8007bfa:	69fb      	ldr	r3, [r7, #28]
 8007bfc:	441a      	add	r2, r3
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c06:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	2b0f      	cmp	r3, #15
 8007c0c:	d909      	bls.n	8007c22 <UART_SetConfig+0x546>
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c14:	d205      	bcs.n	8007c22 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c16:	69bb      	ldr	r3, [r7, #24]
 8007c18:	b29a      	uxth	r2, r3
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	60da      	str	r2, [r3, #12]
 8007c20:	e002      	b.n	8007c28 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2200      	movs	r2, #0
 8007c32:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007c34:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3728      	adds	r7, #40	; 0x28
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c42:	bf00      	nop
 8007c44:	40008000 	.word	0x40008000
 8007c48:	00f42400 	.word	0x00f42400

08007c4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c58:	f003 0301 	and.w	r3, r3, #1
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00a      	beq.n	8007c76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	430a      	orrs	r2, r1
 8007c74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7a:	f003 0302 	and.w	r3, r3, #2
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d00a      	beq.n	8007c98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	430a      	orrs	r2, r1
 8007c96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c9c:	f003 0304 	and.w	r3, r3, #4
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d00a      	beq.n	8007cba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	430a      	orrs	r2, r1
 8007cb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cbe:	f003 0308 	and.w	r3, r3, #8
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d00a      	beq.n	8007cdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	430a      	orrs	r2, r1
 8007cda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce0:	f003 0310 	and.w	r3, r3, #16
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d00a      	beq.n	8007cfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	430a      	orrs	r2, r1
 8007cfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d02:	f003 0320 	and.w	r3, r3, #32
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00a      	beq.n	8007d20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	430a      	orrs	r2, r1
 8007d1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d01a      	beq.n	8007d62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	430a      	orrs	r2, r1
 8007d40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d4a:	d10a      	bne.n	8007d62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	430a      	orrs	r2, r1
 8007d60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00a      	beq.n	8007d84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	430a      	orrs	r2, r1
 8007d82:	605a      	str	r2, [r3, #4]
  }
}
 8007d84:	bf00      	nop
 8007d86:	370c      	adds	r7, #12
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b086      	sub	sp, #24
 8007d94:	af02      	add	r7, sp, #8
 8007d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007da0:	f7fa fa72 	bl	8002288 <HAL_GetTick>
 8007da4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f003 0308 	and.w	r3, r3, #8
 8007db0:	2b08      	cmp	r3, #8
 8007db2:	d10e      	bne.n	8007dd2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007db4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007db8:	9300      	str	r3, [sp, #0]
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 f82d 	bl	8007e22 <UART_WaitOnFlagUntilTimeout>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d001      	beq.n	8007dd2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007dce:	2303      	movs	r3, #3
 8007dd0:	e023      	b.n	8007e1a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f003 0304 	and.w	r3, r3, #4
 8007ddc:	2b04      	cmp	r3, #4
 8007dde:	d10e      	bne.n	8007dfe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007de0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007de4:	9300      	str	r3, [sp, #0]
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2200      	movs	r2, #0
 8007dea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 f817 	bl	8007e22 <UART_WaitOnFlagUntilTimeout>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d001      	beq.n	8007dfe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007dfa:	2303      	movs	r3, #3
 8007dfc:	e00d      	b.n	8007e1a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2220      	movs	r2, #32
 8007e02:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2220      	movs	r2, #32
 8007e08:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3710      	adds	r7, #16
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b09c      	sub	sp, #112	; 0x70
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	60f8      	str	r0, [r7, #12]
 8007e2a:	60b9      	str	r1, [r7, #8]
 8007e2c:	603b      	str	r3, [r7, #0]
 8007e2e:	4613      	mov	r3, r2
 8007e30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e32:	e0a5      	b.n	8007f80 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e3a:	f000 80a1 	beq.w	8007f80 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e3e:	f7fa fa23 	bl	8002288 <HAL_GetTick>
 8007e42:	4602      	mov	r2, r0
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	1ad3      	subs	r3, r2, r3
 8007e48:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d302      	bcc.n	8007e54 <UART_WaitOnFlagUntilTimeout+0x32>
 8007e4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d13e      	bne.n	8007ed2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e5c:	e853 3f00 	ldrex	r3, [r3]
 8007e60:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007e62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007e68:	667b      	str	r3, [r7, #100]	; 0x64
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	461a      	mov	r2, r3
 8007e70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e74:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007e78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007e7a:	e841 2300 	strex	r3, r2, [r1]
 8007e7e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007e80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d1e6      	bne.n	8007e54 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	3308      	adds	r3, #8
 8007e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e90:	e853 3f00 	ldrex	r3, [r3]
 8007e94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e98:	f023 0301 	bic.w	r3, r3, #1
 8007e9c:	663b      	str	r3, [r7, #96]	; 0x60
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	3308      	adds	r3, #8
 8007ea4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007ea6:	64ba      	str	r2, [r7, #72]	; 0x48
 8007ea8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eaa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007eac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007eae:	e841 2300 	strex	r3, r2, [r1]
 8007eb2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007eb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d1e5      	bne.n	8007e86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2220      	movs	r2, #32
 8007ebe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2220      	movs	r2, #32
 8007ec4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	e067      	b.n	8007fa2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f003 0304 	and.w	r3, r3, #4
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d04f      	beq.n	8007f80 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	69db      	ldr	r3, [r3, #28]
 8007ee6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007eea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007eee:	d147      	bne.n	8007f80 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ef8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f02:	e853 3f00 	ldrex	r3, [r3]
 8007f06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007f0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	461a      	mov	r2, r3
 8007f16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f18:	637b      	str	r3, [r7, #52]	; 0x34
 8007f1a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007f1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f20:	e841 2300 	strex	r3, r2, [r1]
 8007f24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d1e6      	bne.n	8007efa <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	3308      	adds	r3, #8
 8007f32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	e853 3f00 	ldrex	r3, [r3]
 8007f3a:	613b      	str	r3, [r7, #16]
   return(result);
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	f023 0301 	bic.w	r3, r3, #1
 8007f42:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	3308      	adds	r3, #8
 8007f4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007f4c:	623a      	str	r2, [r7, #32]
 8007f4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f50:	69f9      	ldr	r1, [r7, #28]
 8007f52:	6a3a      	ldr	r2, [r7, #32]
 8007f54:	e841 2300 	strex	r3, r2, [r1]
 8007f58:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d1e5      	bne.n	8007f2c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2220      	movs	r2, #32
 8007f64:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2220      	movs	r2, #32
 8007f6a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2220      	movs	r2, #32
 8007f70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2200      	movs	r2, #0
 8007f78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007f7c:	2303      	movs	r3, #3
 8007f7e:	e010      	b.n	8007fa2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	69da      	ldr	r2, [r3, #28]
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	4013      	ands	r3, r2
 8007f8a:	68ba      	ldr	r2, [r7, #8]
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	bf0c      	ite	eq
 8007f90:	2301      	moveq	r3, #1
 8007f92:	2300      	movne	r3, #0
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	461a      	mov	r2, r3
 8007f98:	79fb      	ldrb	r3, [r7, #7]
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	f43f af4a 	beq.w	8007e34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007fa0:	2300      	movs	r3, #0
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3770      	adds	r7, #112	; 0x70
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
	...

08007fac <__errno>:
 8007fac:	4b01      	ldr	r3, [pc, #4]	; (8007fb4 <__errno+0x8>)
 8007fae:	6818      	ldr	r0, [r3, #0]
 8007fb0:	4770      	bx	lr
 8007fb2:	bf00      	nop
 8007fb4:	2000000c 	.word	0x2000000c

08007fb8 <__libc_init_array>:
 8007fb8:	b570      	push	{r4, r5, r6, lr}
 8007fba:	4d0d      	ldr	r5, [pc, #52]	; (8007ff0 <__libc_init_array+0x38>)
 8007fbc:	4c0d      	ldr	r4, [pc, #52]	; (8007ff4 <__libc_init_array+0x3c>)
 8007fbe:	1b64      	subs	r4, r4, r5
 8007fc0:	10a4      	asrs	r4, r4, #2
 8007fc2:	2600      	movs	r6, #0
 8007fc4:	42a6      	cmp	r6, r4
 8007fc6:	d109      	bne.n	8007fdc <__libc_init_array+0x24>
 8007fc8:	4d0b      	ldr	r5, [pc, #44]	; (8007ff8 <__libc_init_array+0x40>)
 8007fca:	4c0c      	ldr	r4, [pc, #48]	; (8007ffc <__libc_init_array+0x44>)
 8007fcc:	f002 ff04 	bl	800add8 <_init>
 8007fd0:	1b64      	subs	r4, r4, r5
 8007fd2:	10a4      	asrs	r4, r4, #2
 8007fd4:	2600      	movs	r6, #0
 8007fd6:	42a6      	cmp	r6, r4
 8007fd8:	d105      	bne.n	8007fe6 <__libc_init_array+0x2e>
 8007fda:	bd70      	pop	{r4, r5, r6, pc}
 8007fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fe0:	4798      	blx	r3
 8007fe2:	3601      	adds	r6, #1
 8007fe4:	e7ee      	b.n	8007fc4 <__libc_init_array+0xc>
 8007fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fea:	4798      	blx	r3
 8007fec:	3601      	adds	r6, #1
 8007fee:	e7f2      	b.n	8007fd6 <__libc_init_array+0x1e>
 8007ff0:	0800b2c4 	.word	0x0800b2c4
 8007ff4:	0800b2c4 	.word	0x0800b2c4
 8007ff8:	0800b2c4 	.word	0x0800b2c4
 8007ffc:	0800b2c8 	.word	0x0800b2c8

08008000 <memset>:
 8008000:	4402      	add	r2, r0
 8008002:	4603      	mov	r3, r0
 8008004:	4293      	cmp	r3, r2
 8008006:	d100      	bne.n	800800a <memset+0xa>
 8008008:	4770      	bx	lr
 800800a:	f803 1b01 	strb.w	r1, [r3], #1
 800800e:	e7f9      	b.n	8008004 <memset+0x4>

08008010 <__cvt>:
 8008010:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008014:	ec55 4b10 	vmov	r4, r5, d0
 8008018:	2d00      	cmp	r5, #0
 800801a:	460e      	mov	r6, r1
 800801c:	4619      	mov	r1, r3
 800801e:	462b      	mov	r3, r5
 8008020:	bfbb      	ittet	lt
 8008022:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008026:	461d      	movlt	r5, r3
 8008028:	2300      	movge	r3, #0
 800802a:	232d      	movlt	r3, #45	; 0x2d
 800802c:	700b      	strb	r3, [r1, #0]
 800802e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008030:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008034:	4691      	mov	r9, r2
 8008036:	f023 0820 	bic.w	r8, r3, #32
 800803a:	bfbc      	itt	lt
 800803c:	4622      	movlt	r2, r4
 800803e:	4614      	movlt	r4, r2
 8008040:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008044:	d005      	beq.n	8008052 <__cvt+0x42>
 8008046:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800804a:	d100      	bne.n	800804e <__cvt+0x3e>
 800804c:	3601      	adds	r6, #1
 800804e:	2102      	movs	r1, #2
 8008050:	e000      	b.n	8008054 <__cvt+0x44>
 8008052:	2103      	movs	r1, #3
 8008054:	ab03      	add	r3, sp, #12
 8008056:	9301      	str	r3, [sp, #4]
 8008058:	ab02      	add	r3, sp, #8
 800805a:	9300      	str	r3, [sp, #0]
 800805c:	ec45 4b10 	vmov	d0, r4, r5
 8008060:	4653      	mov	r3, sl
 8008062:	4632      	mov	r2, r6
 8008064:	f000 fcec 	bl	8008a40 <_dtoa_r>
 8008068:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800806c:	4607      	mov	r7, r0
 800806e:	d102      	bne.n	8008076 <__cvt+0x66>
 8008070:	f019 0f01 	tst.w	r9, #1
 8008074:	d022      	beq.n	80080bc <__cvt+0xac>
 8008076:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800807a:	eb07 0906 	add.w	r9, r7, r6
 800807e:	d110      	bne.n	80080a2 <__cvt+0x92>
 8008080:	783b      	ldrb	r3, [r7, #0]
 8008082:	2b30      	cmp	r3, #48	; 0x30
 8008084:	d10a      	bne.n	800809c <__cvt+0x8c>
 8008086:	2200      	movs	r2, #0
 8008088:	2300      	movs	r3, #0
 800808a:	4620      	mov	r0, r4
 800808c:	4629      	mov	r1, r5
 800808e:	f7f8 fd1b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008092:	b918      	cbnz	r0, 800809c <__cvt+0x8c>
 8008094:	f1c6 0601 	rsb	r6, r6, #1
 8008098:	f8ca 6000 	str.w	r6, [sl]
 800809c:	f8da 3000 	ldr.w	r3, [sl]
 80080a0:	4499      	add	r9, r3
 80080a2:	2200      	movs	r2, #0
 80080a4:	2300      	movs	r3, #0
 80080a6:	4620      	mov	r0, r4
 80080a8:	4629      	mov	r1, r5
 80080aa:	f7f8 fd0d 	bl	8000ac8 <__aeabi_dcmpeq>
 80080ae:	b108      	cbz	r0, 80080b4 <__cvt+0xa4>
 80080b0:	f8cd 900c 	str.w	r9, [sp, #12]
 80080b4:	2230      	movs	r2, #48	; 0x30
 80080b6:	9b03      	ldr	r3, [sp, #12]
 80080b8:	454b      	cmp	r3, r9
 80080ba:	d307      	bcc.n	80080cc <__cvt+0xbc>
 80080bc:	9b03      	ldr	r3, [sp, #12]
 80080be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80080c0:	1bdb      	subs	r3, r3, r7
 80080c2:	4638      	mov	r0, r7
 80080c4:	6013      	str	r3, [r2, #0]
 80080c6:	b004      	add	sp, #16
 80080c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080cc:	1c59      	adds	r1, r3, #1
 80080ce:	9103      	str	r1, [sp, #12]
 80080d0:	701a      	strb	r2, [r3, #0]
 80080d2:	e7f0      	b.n	80080b6 <__cvt+0xa6>

080080d4 <__exponent>:
 80080d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080d6:	4603      	mov	r3, r0
 80080d8:	2900      	cmp	r1, #0
 80080da:	bfb8      	it	lt
 80080dc:	4249      	neglt	r1, r1
 80080de:	f803 2b02 	strb.w	r2, [r3], #2
 80080e2:	bfb4      	ite	lt
 80080e4:	222d      	movlt	r2, #45	; 0x2d
 80080e6:	222b      	movge	r2, #43	; 0x2b
 80080e8:	2909      	cmp	r1, #9
 80080ea:	7042      	strb	r2, [r0, #1]
 80080ec:	dd2a      	ble.n	8008144 <__exponent+0x70>
 80080ee:	f10d 0407 	add.w	r4, sp, #7
 80080f2:	46a4      	mov	ip, r4
 80080f4:	270a      	movs	r7, #10
 80080f6:	46a6      	mov	lr, r4
 80080f8:	460a      	mov	r2, r1
 80080fa:	fb91 f6f7 	sdiv	r6, r1, r7
 80080fe:	fb07 1516 	mls	r5, r7, r6, r1
 8008102:	3530      	adds	r5, #48	; 0x30
 8008104:	2a63      	cmp	r2, #99	; 0x63
 8008106:	f104 34ff 	add.w	r4, r4, #4294967295
 800810a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800810e:	4631      	mov	r1, r6
 8008110:	dcf1      	bgt.n	80080f6 <__exponent+0x22>
 8008112:	3130      	adds	r1, #48	; 0x30
 8008114:	f1ae 0502 	sub.w	r5, lr, #2
 8008118:	f804 1c01 	strb.w	r1, [r4, #-1]
 800811c:	1c44      	adds	r4, r0, #1
 800811e:	4629      	mov	r1, r5
 8008120:	4561      	cmp	r1, ip
 8008122:	d30a      	bcc.n	800813a <__exponent+0x66>
 8008124:	f10d 0209 	add.w	r2, sp, #9
 8008128:	eba2 020e 	sub.w	r2, r2, lr
 800812c:	4565      	cmp	r5, ip
 800812e:	bf88      	it	hi
 8008130:	2200      	movhi	r2, #0
 8008132:	4413      	add	r3, r2
 8008134:	1a18      	subs	r0, r3, r0
 8008136:	b003      	add	sp, #12
 8008138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800813a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800813e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008142:	e7ed      	b.n	8008120 <__exponent+0x4c>
 8008144:	2330      	movs	r3, #48	; 0x30
 8008146:	3130      	adds	r1, #48	; 0x30
 8008148:	7083      	strb	r3, [r0, #2]
 800814a:	70c1      	strb	r1, [r0, #3]
 800814c:	1d03      	adds	r3, r0, #4
 800814e:	e7f1      	b.n	8008134 <__exponent+0x60>

08008150 <_printf_float>:
 8008150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008154:	ed2d 8b02 	vpush	{d8}
 8008158:	b08d      	sub	sp, #52	; 0x34
 800815a:	460c      	mov	r4, r1
 800815c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008160:	4616      	mov	r6, r2
 8008162:	461f      	mov	r7, r3
 8008164:	4605      	mov	r5, r0
 8008166:	f001 fa59 	bl	800961c <_localeconv_r>
 800816a:	f8d0 a000 	ldr.w	sl, [r0]
 800816e:	4650      	mov	r0, sl
 8008170:	f7f8 f82e 	bl	80001d0 <strlen>
 8008174:	2300      	movs	r3, #0
 8008176:	930a      	str	r3, [sp, #40]	; 0x28
 8008178:	6823      	ldr	r3, [r4, #0]
 800817a:	9305      	str	r3, [sp, #20]
 800817c:	f8d8 3000 	ldr.w	r3, [r8]
 8008180:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008184:	3307      	adds	r3, #7
 8008186:	f023 0307 	bic.w	r3, r3, #7
 800818a:	f103 0208 	add.w	r2, r3, #8
 800818e:	f8c8 2000 	str.w	r2, [r8]
 8008192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008196:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800819a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800819e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80081a2:	9307      	str	r3, [sp, #28]
 80081a4:	f8cd 8018 	str.w	r8, [sp, #24]
 80081a8:	ee08 0a10 	vmov	s16, r0
 80081ac:	4b9f      	ldr	r3, [pc, #636]	; (800842c <_printf_float+0x2dc>)
 80081ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80081b2:	f04f 32ff 	mov.w	r2, #4294967295
 80081b6:	f7f8 fcb9 	bl	8000b2c <__aeabi_dcmpun>
 80081ba:	bb88      	cbnz	r0, 8008220 <_printf_float+0xd0>
 80081bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80081c0:	4b9a      	ldr	r3, [pc, #616]	; (800842c <_printf_float+0x2dc>)
 80081c2:	f04f 32ff 	mov.w	r2, #4294967295
 80081c6:	f7f8 fc93 	bl	8000af0 <__aeabi_dcmple>
 80081ca:	bb48      	cbnz	r0, 8008220 <_printf_float+0xd0>
 80081cc:	2200      	movs	r2, #0
 80081ce:	2300      	movs	r3, #0
 80081d0:	4640      	mov	r0, r8
 80081d2:	4649      	mov	r1, r9
 80081d4:	f7f8 fc82 	bl	8000adc <__aeabi_dcmplt>
 80081d8:	b110      	cbz	r0, 80081e0 <_printf_float+0x90>
 80081da:	232d      	movs	r3, #45	; 0x2d
 80081dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081e0:	4b93      	ldr	r3, [pc, #588]	; (8008430 <_printf_float+0x2e0>)
 80081e2:	4894      	ldr	r0, [pc, #592]	; (8008434 <_printf_float+0x2e4>)
 80081e4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80081e8:	bf94      	ite	ls
 80081ea:	4698      	movls	r8, r3
 80081ec:	4680      	movhi	r8, r0
 80081ee:	2303      	movs	r3, #3
 80081f0:	6123      	str	r3, [r4, #16]
 80081f2:	9b05      	ldr	r3, [sp, #20]
 80081f4:	f023 0204 	bic.w	r2, r3, #4
 80081f8:	6022      	str	r2, [r4, #0]
 80081fa:	f04f 0900 	mov.w	r9, #0
 80081fe:	9700      	str	r7, [sp, #0]
 8008200:	4633      	mov	r3, r6
 8008202:	aa0b      	add	r2, sp, #44	; 0x2c
 8008204:	4621      	mov	r1, r4
 8008206:	4628      	mov	r0, r5
 8008208:	f000 f9d8 	bl	80085bc <_printf_common>
 800820c:	3001      	adds	r0, #1
 800820e:	f040 8090 	bne.w	8008332 <_printf_float+0x1e2>
 8008212:	f04f 30ff 	mov.w	r0, #4294967295
 8008216:	b00d      	add	sp, #52	; 0x34
 8008218:	ecbd 8b02 	vpop	{d8}
 800821c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008220:	4642      	mov	r2, r8
 8008222:	464b      	mov	r3, r9
 8008224:	4640      	mov	r0, r8
 8008226:	4649      	mov	r1, r9
 8008228:	f7f8 fc80 	bl	8000b2c <__aeabi_dcmpun>
 800822c:	b140      	cbz	r0, 8008240 <_printf_float+0xf0>
 800822e:	464b      	mov	r3, r9
 8008230:	2b00      	cmp	r3, #0
 8008232:	bfbc      	itt	lt
 8008234:	232d      	movlt	r3, #45	; 0x2d
 8008236:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800823a:	487f      	ldr	r0, [pc, #508]	; (8008438 <_printf_float+0x2e8>)
 800823c:	4b7f      	ldr	r3, [pc, #508]	; (800843c <_printf_float+0x2ec>)
 800823e:	e7d1      	b.n	80081e4 <_printf_float+0x94>
 8008240:	6863      	ldr	r3, [r4, #4]
 8008242:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008246:	9206      	str	r2, [sp, #24]
 8008248:	1c5a      	adds	r2, r3, #1
 800824a:	d13f      	bne.n	80082cc <_printf_float+0x17c>
 800824c:	2306      	movs	r3, #6
 800824e:	6063      	str	r3, [r4, #4]
 8008250:	9b05      	ldr	r3, [sp, #20]
 8008252:	6861      	ldr	r1, [r4, #4]
 8008254:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008258:	2300      	movs	r3, #0
 800825a:	9303      	str	r3, [sp, #12]
 800825c:	ab0a      	add	r3, sp, #40	; 0x28
 800825e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008262:	ab09      	add	r3, sp, #36	; 0x24
 8008264:	ec49 8b10 	vmov	d0, r8, r9
 8008268:	9300      	str	r3, [sp, #0]
 800826a:	6022      	str	r2, [r4, #0]
 800826c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008270:	4628      	mov	r0, r5
 8008272:	f7ff fecd 	bl	8008010 <__cvt>
 8008276:	9b06      	ldr	r3, [sp, #24]
 8008278:	9909      	ldr	r1, [sp, #36]	; 0x24
 800827a:	2b47      	cmp	r3, #71	; 0x47
 800827c:	4680      	mov	r8, r0
 800827e:	d108      	bne.n	8008292 <_printf_float+0x142>
 8008280:	1cc8      	adds	r0, r1, #3
 8008282:	db02      	blt.n	800828a <_printf_float+0x13a>
 8008284:	6863      	ldr	r3, [r4, #4]
 8008286:	4299      	cmp	r1, r3
 8008288:	dd41      	ble.n	800830e <_printf_float+0x1be>
 800828a:	f1ab 0b02 	sub.w	fp, fp, #2
 800828e:	fa5f fb8b 	uxtb.w	fp, fp
 8008292:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008296:	d820      	bhi.n	80082da <_printf_float+0x18a>
 8008298:	3901      	subs	r1, #1
 800829a:	465a      	mov	r2, fp
 800829c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80082a0:	9109      	str	r1, [sp, #36]	; 0x24
 80082a2:	f7ff ff17 	bl	80080d4 <__exponent>
 80082a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082a8:	1813      	adds	r3, r2, r0
 80082aa:	2a01      	cmp	r2, #1
 80082ac:	4681      	mov	r9, r0
 80082ae:	6123      	str	r3, [r4, #16]
 80082b0:	dc02      	bgt.n	80082b8 <_printf_float+0x168>
 80082b2:	6822      	ldr	r2, [r4, #0]
 80082b4:	07d2      	lsls	r2, r2, #31
 80082b6:	d501      	bpl.n	80082bc <_printf_float+0x16c>
 80082b8:	3301      	adds	r3, #1
 80082ba:	6123      	str	r3, [r4, #16]
 80082bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d09c      	beq.n	80081fe <_printf_float+0xae>
 80082c4:	232d      	movs	r3, #45	; 0x2d
 80082c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082ca:	e798      	b.n	80081fe <_printf_float+0xae>
 80082cc:	9a06      	ldr	r2, [sp, #24]
 80082ce:	2a47      	cmp	r2, #71	; 0x47
 80082d0:	d1be      	bne.n	8008250 <_printf_float+0x100>
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d1bc      	bne.n	8008250 <_printf_float+0x100>
 80082d6:	2301      	movs	r3, #1
 80082d8:	e7b9      	b.n	800824e <_printf_float+0xfe>
 80082da:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80082de:	d118      	bne.n	8008312 <_printf_float+0x1c2>
 80082e0:	2900      	cmp	r1, #0
 80082e2:	6863      	ldr	r3, [r4, #4]
 80082e4:	dd0b      	ble.n	80082fe <_printf_float+0x1ae>
 80082e6:	6121      	str	r1, [r4, #16]
 80082e8:	b913      	cbnz	r3, 80082f0 <_printf_float+0x1a0>
 80082ea:	6822      	ldr	r2, [r4, #0]
 80082ec:	07d0      	lsls	r0, r2, #31
 80082ee:	d502      	bpl.n	80082f6 <_printf_float+0x1a6>
 80082f0:	3301      	adds	r3, #1
 80082f2:	440b      	add	r3, r1
 80082f4:	6123      	str	r3, [r4, #16]
 80082f6:	65a1      	str	r1, [r4, #88]	; 0x58
 80082f8:	f04f 0900 	mov.w	r9, #0
 80082fc:	e7de      	b.n	80082bc <_printf_float+0x16c>
 80082fe:	b913      	cbnz	r3, 8008306 <_printf_float+0x1b6>
 8008300:	6822      	ldr	r2, [r4, #0]
 8008302:	07d2      	lsls	r2, r2, #31
 8008304:	d501      	bpl.n	800830a <_printf_float+0x1ba>
 8008306:	3302      	adds	r3, #2
 8008308:	e7f4      	b.n	80082f4 <_printf_float+0x1a4>
 800830a:	2301      	movs	r3, #1
 800830c:	e7f2      	b.n	80082f4 <_printf_float+0x1a4>
 800830e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008312:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008314:	4299      	cmp	r1, r3
 8008316:	db05      	blt.n	8008324 <_printf_float+0x1d4>
 8008318:	6823      	ldr	r3, [r4, #0]
 800831a:	6121      	str	r1, [r4, #16]
 800831c:	07d8      	lsls	r0, r3, #31
 800831e:	d5ea      	bpl.n	80082f6 <_printf_float+0x1a6>
 8008320:	1c4b      	adds	r3, r1, #1
 8008322:	e7e7      	b.n	80082f4 <_printf_float+0x1a4>
 8008324:	2900      	cmp	r1, #0
 8008326:	bfd4      	ite	le
 8008328:	f1c1 0202 	rsble	r2, r1, #2
 800832c:	2201      	movgt	r2, #1
 800832e:	4413      	add	r3, r2
 8008330:	e7e0      	b.n	80082f4 <_printf_float+0x1a4>
 8008332:	6823      	ldr	r3, [r4, #0]
 8008334:	055a      	lsls	r2, r3, #21
 8008336:	d407      	bmi.n	8008348 <_printf_float+0x1f8>
 8008338:	6923      	ldr	r3, [r4, #16]
 800833a:	4642      	mov	r2, r8
 800833c:	4631      	mov	r1, r6
 800833e:	4628      	mov	r0, r5
 8008340:	47b8      	blx	r7
 8008342:	3001      	adds	r0, #1
 8008344:	d12c      	bne.n	80083a0 <_printf_float+0x250>
 8008346:	e764      	b.n	8008212 <_printf_float+0xc2>
 8008348:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800834c:	f240 80e0 	bls.w	8008510 <_printf_float+0x3c0>
 8008350:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008354:	2200      	movs	r2, #0
 8008356:	2300      	movs	r3, #0
 8008358:	f7f8 fbb6 	bl	8000ac8 <__aeabi_dcmpeq>
 800835c:	2800      	cmp	r0, #0
 800835e:	d034      	beq.n	80083ca <_printf_float+0x27a>
 8008360:	4a37      	ldr	r2, [pc, #220]	; (8008440 <_printf_float+0x2f0>)
 8008362:	2301      	movs	r3, #1
 8008364:	4631      	mov	r1, r6
 8008366:	4628      	mov	r0, r5
 8008368:	47b8      	blx	r7
 800836a:	3001      	adds	r0, #1
 800836c:	f43f af51 	beq.w	8008212 <_printf_float+0xc2>
 8008370:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008374:	429a      	cmp	r2, r3
 8008376:	db02      	blt.n	800837e <_printf_float+0x22e>
 8008378:	6823      	ldr	r3, [r4, #0]
 800837a:	07d8      	lsls	r0, r3, #31
 800837c:	d510      	bpl.n	80083a0 <_printf_float+0x250>
 800837e:	ee18 3a10 	vmov	r3, s16
 8008382:	4652      	mov	r2, sl
 8008384:	4631      	mov	r1, r6
 8008386:	4628      	mov	r0, r5
 8008388:	47b8      	blx	r7
 800838a:	3001      	adds	r0, #1
 800838c:	f43f af41 	beq.w	8008212 <_printf_float+0xc2>
 8008390:	f04f 0800 	mov.w	r8, #0
 8008394:	f104 091a 	add.w	r9, r4, #26
 8008398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800839a:	3b01      	subs	r3, #1
 800839c:	4543      	cmp	r3, r8
 800839e:	dc09      	bgt.n	80083b4 <_printf_float+0x264>
 80083a0:	6823      	ldr	r3, [r4, #0]
 80083a2:	079b      	lsls	r3, r3, #30
 80083a4:	f100 8105 	bmi.w	80085b2 <_printf_float+0x462>
 80083a8:	68e0      	ldr	r0, [r4, #12]
 80083aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083ac:	4298      	cmp	r0, r3
 80083ae:	bfb8      	it	lt
 80083b0:	4618      	movlt	r0, r3
 80083b2:	e730      	b.n	8008216 <_printf_float+0xc6>
 80083b4:	2301      	movs	r3, #1
 80083b6:	464a      	mov	r2, r9
 80083b8:	4631      	mov	r1, r6
 80083ba:	4628      	mov	r0, r5
 80083bc:	47b8      	blx	r7
 80083be:	3001      	adds	r0, #1
 80083c0:	f43f af27 	beq.w	8008212 <_printf_float+0xc2>
 80083c4:	f108 0801 	add.w	r8, r8, #1
 80083c8:	e7e6      	b.n	8008398 <_printf_float+0x248>
 80083ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	dc39      	bgt.n	8008444 <_printf_float+0x2f4>
 80083d0:	4a1b      	ldr	r2, [pc, #108]	; (8008440 <_printf_float+0x2f0>)
 80083d2:	2301      	movs	r3, #1
 80083d4:	4631      	mov	r1, r6
 80083d6:	4628      	mov	r0, r5
 80083d8:	47b8      	blx	r7
 80083da:	3001      	adds	r0, #1
 80083dc:	f43f af19 	beq.w	8008212 <_printf_float+0xc2>
 80083e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083e4:	4313      	orrs	r3, r2
 80083e6:	d102      	bne.n	80083ee <_printf_float+0x29e>
 80083e8:	6823      	ldr	r3, [r4, #0]
 80083ea:	07d9      	lsls	r1, r3, #31
 80083ec:	d5d8      	bpl.n	80083a0 <_printf_float+0x250>
 80083ee:	ee18 3a10 	vmov	r3, s16
 80083f2:	4652      	mov	r2, sl
 80083f4:	4631      	mov	r1, r6
 80083f6:	4628      	mov	r0, r5
 80083f8:	47b8      	blx	r7
 80083fa:	3001      	adds	r0, #1
 80083fc:	f43f af09 	beq.w	8008212 <_printf_float+0xc2>
 8008400:	f04f 0900 	mov.w	r9, #0
 8008404:	f104 0a1a 	add.w	sl, r4, #26
 8008408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800840a:	425b      	negs	r3, r3
 800840c:	454b      	cmp	r3, r9
 800840e:	dc01      	bgt.n	8008414 <_printf_float+0x2c4>
 8008410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008412:	e792      	b.n	800833a <_printf_float+0x1ea>
 8008414:	2301      	movs	r3, #1
 8008416:	4652      	mov	r2, sl
 8008418:	4631      	mov	r1, r6
 800841a:	4628      	mov	r0, r5
 800841c:	47b8      	blx	r7
 800841e:	3001      	adds	r0, #1
 8008420:	f43f aef7 	beq.w	8008212 <_printf_float+0xc2>
 8008424:	f109 0901 	add.w	r9, r9, #1
 8008428:	e7ee      	b.n	8008408 <_printf_float+0x2b8>
 800842a:	bf00      	nop
 800842c:	7fefffff 	.word	0x7fefffff
 8008430:	0800aee4 	.word	0x0800aee4
 8008434:	0800aee8 	.word	0x0800aee8
 8008438:	0800aef0 	.word	0x0800aef0
 800843c:	0800aeec 	.word	0x0800aeec
 8008440:	0800aef4 	.word	0x0800aef4
 8008444:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008446:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008448:	429a      	cmp	r2, r3
 800844a:	bfa8      	it	ge
 800844c:	461a      	movge	r2, r3
 800844e:	2a00      	cmp	r2, #0
 8008450:	4691      	mov	r9, r2
 8008452:	dc37      	bgt.n	80084c4 <_printf_float+0x374>
 8008454:	f04f 0b00 	mov.w	fp, #0
 8008458:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800845c:	f104 021a 	add.w	r2, r4, #26
 8008460:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008462:	9305      	str	r3, [sp, #20]
 8008464:	eba3 0309 	sub.w	r3, r3, r9
 8008468:	455b      	cmp	r3, fp
 800846a:	dc33      	bgt.n	80084d4 <_printf_float+0x384>
 800846c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008470:	429a      	cmp	r2, r3
 8008472:	db3b      	blt.n	80084ec <_printf_float+0x39c>
 8008474:	6823      	ldr	r3, [r4, #0]
 8008476:	07da      	lsls	r2, r3, #31
 8008478:	d438      	bmi.n	80084ec <_printf_float+0x39c>
 800847a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800847c:	9a05      	ldr	r2, [sp, #20]
 800847e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008480:	1a9a      	subs	r2, r3, r2
 8008482:	eba3 0901 	sub.w	r9, r3, r1
 8008486:	4591      	cmp	r9, r2
 8008488:	bfa8      	it	ge
 800848a:	4691      	movge	r9, r2
 800848c:	f1b9 0f00 	cmp.w	r9, #0
 8008490:	dc35      	bgt.n	80084fe <_printf_float+0x3ae>
 8008492:	f04f 0800 	mov.w	r8, #0
 8008496:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800849a:	f104 0a1a 	add.w	sl, r4, #26
 800849e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084a2:	1a9b      	subs	r3, r3, r2
 80084a4:	eba3 0309 	sub.w	r3, r3, r9
 80084a8:	4543      	cmp	r3, r8
 80084aa:	f77f af79 	ble.w	80083a0 <_printf_float+0x250>
 80084ae:	2301      	movs	r3, #1
 80084b0:	4652      	mov	r2, sl
 80084b2:	4631      	mov	r1, r6
 80084b4:	4628      	mov	r0, r5
 80084b6:	47b8      	blx	r7
 80084b8:	3001      	adds	r0, #1
 80084ba:	f43f aeaa 	beq.w	8008212 <_printf_float+0xc2>
 80084be:	f108 0801 	add.w	r8, r8, #1
 80084c2:	e7ec      	b.n	800849e <_printf_float+0x34e>
 80084c4:	4613      	mov	r3, r2
 80084c6:	4631      	mov	r1, r6
 80084c8:	4642      	mov	r2, r8
 80084ca:	4628      	mov	r0, r5
 80084cc:	47b8      	blx	r7
 80084ce:	3001      	adds	r0, #1
 80084d0:	d1c0      	bne.n	8008454 <_printf_float+0x304>
 80084d2:	e69e      	b.n	8008212 <_printf_float+0xc2>
 80084d4:	2301      	movs	r3, #1
 80084d6:	4631      	mov	r1, r6
 80084d8:	4628      	mov	r0, r5
 80084da:	9205      	str	r2, [sp, #20]
 80084dc:	47b8      	blx	r7
 80084de:	3001      	adds	r0, #1
 80084e0:	f43f ae97 	beq.w	8008212 <_printf_float+0xc2>
 80084e4:	9a05      	ldr	r2, [sp, #20]
 80084e6:	f10b 0b01 	add.w	fp, fp, #1
 80084ea:	e7b9      	b.n	8008460 <_printf_float+0x310>
 80084ec:	ee18 3a10 	vmov	r3, s16
 80084f0:	4652      	mov	r2, sl
 80084f2:	4631      	mov	r1, r6
 80084f4:	4628      	mov	r0, r5
 80084f6:	47b8      	blx	r7
 80084f8:	3001      	adds	r0, #1
 80084fa:	d1be      	bne.n	800847a <_printf_float+0x32a>
 80084fc:	e689      	b.n	8008212 <_printf_float+0xc2>
 80084fe:	9a05      	ldr	r2, [sp, #20]
 8008500:	464b      	mov	r3, r9
 8008502:	4442      	add	r2, r8
 8008504:	4631      	mov	r1, r6
 8008506:	4628      	mov	r0, r5
 8008508:	47b8      	blx	r7
 800850a:	3001      	adds	r0, #1
 800850c:	d1c1      	bne.n	8008492 <_printf_float+0x342>
 800850e:	e680      	b.n	8008212 <_printf_float+0xc2>
 8008510:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008512:	2a01      	cmp	r2, #1
 8008514:	dc01      	bgt.n	800851a <_printf_float+0x3ca>
 8008516:	07db      	lsls	r3, r3, #31
 8008518:	d538      	bpl.n	800858c <_printf_float+0x43c>
 800851a:	2301      	movs	r3, #1
 800851c:	4642      	mov	r2, r8
 800851e:	4631      	mov	r1, r6
 8008520:	4628      	mov	r0, r5
 8008522:	47b8      	blx	r7
 8008524:	3001      	adds	r0, #1
 8008526:	f43f ae74 	beq.w	8008212 <_printf_float+0xc2>
 800852a:	ee18 3a10 	vmov	r3, s16
 800852e:	4652      	mov	r2, sl
 8008530:	4631      	mov	r1, r6
 8008532:	4628      	mov	r0, r5
 8008534:	47b8      	blx	r7
 8008536:	3001      	adds	r0, #1
 8008538:	f43f ae6b 	beq.w	8008212 <_printf_float+0xc2>
 800853c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008540:	2200      	movs	r2, #0
 8008542:	2300      	movs	r3, #0
 8008544:	f7f8 fac0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008548:	b9d8      	cbnz	r0, 8008582 <_printf_float+0x432>
 800854a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800854c:	f108 0201 	add.w	r2, r8, #1
 8008550:	3b01      	subs	r3, #1
 8008552:	4631      	mov	r1, r6
 8008554:	4628      	mov	r0, r5
 8008556:	47b8      	blx	r7
 8008558:	3001      	adds	r0, #1
 800855a:	d10e      	bne.n	800857a <_printf_float+0x42a>
 800855c:	e659      	b.n	8008212 <_printf_float+0xc2>
 800855e:	2301      	movs	r3, #1
 8008560:	4652      	mov	r2, sl
 8008562:	4631      	mov	r1, r6
 8008564:	4628      	mov	r0, r5
 8008566:	47b8      	blx	r7
 8008568:	3001      	adds	r0, #1
 800856a:	f43f ae52 	beq.w	8008212 <_printf_float+0xc2>
 800856e:	f108 0801 	add.w	r8, r8, #1
 8008572:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008574:	3b01      	subs	r3, #1
 8008576:	4543      	cmp	r3, r8
 8008578:	dcf1      	bgt.n	800855e <_printf_float+0x40e>
 800857a:	464b      	mov	r3, r9
 800857c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008580:	e6dc      	b.n	800833c <_printf_float+0x1ec>
 8008582:	f04f 0800 	mov.w	r8, #0
 8008586:	f104 0a1a 	add.w	sl, r4, #26
 800858a:	e7f2      	b.n	8008572 <_printf_float+0x422>
 800858c:	2301      	movs	r3, #1
 800858e:	4642      	mov	r2, r8
 8008590:	e7df      	b.n	8008552 <_printf_float+0x402>
 8008592:	2301      	movs	r3, #1
 8008594:	464a      	mov	r2, r9
 8008596:	4631      	mov	r1, r6
 8008598:	4628      	mov	r0, r5
 800859a:	47b8      	blx	r7
 800859c:	3001      	adds	r0, #1
 800859e:	f43f ae38 	beq.w	8008212 <_printf_float+0xc2>
 80085a2:	f108 0801 	add.w	r8, r8, #1
 80085a6:	68e3      	ldr	r3, [r4, #12]
 80085a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80085aa:	1a5b      	subs	r3, r3, r1
 80085ac:	4543      	cmp	r3, r8
 80085ae:	dcf0      	bgt.n	8008592 <_printf_float+0x442>
 80085b0:	e6fa      	b.n	80083a8 <_printf_float+0x258>
 80085b2:	f04f 0800 	mov.w	r8, #0
 80085b6:	f104 0919 	add.w	r9, r4, #25
 80085ba:	e7f4      	b.n	80085a6 <_printf_float+0x456>

080085bc <_printf_common>:
 80085bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085c0:	4616      	mov	r6, r2
 80085c2:	4699      	mov	r9, r3
 80085c4:	688a      	ldr	r2, [r1, #8]
 80085c6:	690b      	ldr	r3, [r1, #16]
 80085c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80085cc:	4293      	cmp	r3, r2
 80085ce:	bfb8      	it	lt
 80085d0:	4613      	movlt	r3, r2
 80085d2:	6033      	str	r3, [r6, #0]
 80085d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80085d8:	4607      	mov	r7, r0
 80085da:	460c      	mov	r4, r1
 80085dc:	b10a      	cbz	r2, 80085e2 <_printf_common+0x26>
 80085de:	3301      	adds	r3, #1
 80085e0:	6033      	str	r3, [r6, #0]
 80085e2:	6823      	ldr	r3, [r4, #0]
 80085e4:	0699      	lsls	r1, r3, #26
 80085e6:	bf42      	ittt	mi
 80085e8:	6833      	ldrmi	r3, [r6, #0]
 80085ea:	3302      	addmi	r3, #2
 80085ec:	6033      	strmi	r3, [r6, #0]
 80085ee:	6825      	ldr	r5, [r4, #0]
 80085f0:	f015 0506 	ands.w	r5, r5, #6
 80085f4:	d106      	bne.n	8008604 <_printf_common+0x48>
 80085f6:	f104 0a19 	add.w	sl, r4, #25
 80085fa:	68e3      	ldr	r3, [r4, #12]
 80085fc:	6832      	ldr	r2, [r6, #0]
 80085fe:	1a9b      	subs	r3, r3, r2
 8008600:	42ab      	cmp	r3, r5
 8008602:	dc26      	bgt.n	8008652 <_printf_common+0x96>
 8008604:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008608:	1e13      	subs	r3, r2, #0
 800860a:	6822      	ldr	r2, [r4, #0]
 800860c:	bf18      	it	ne
 800860e:	2301      	movne	r3, #1
 8008610:	0692      	lsls	r2, r2, #26
 8008612:	d42b      	bmi.n	800866c <_printf_common+0xb0>
 8008614:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008618:	4649      	mov	r1, r9
 800861a:	4638      	mov	r0, r7
 800861c:	47c0      	blx	r8
 800861e:	3001      	adds	r0, #1
 8008620:	d01e      	beq.n	8008660 <_printf_common+0xa4>
 8008622:	6823      	ldr	r3, [r4, #0]
 8008624:	68e5      	ldr	r5, [r4, #12]
 8008626:	6832      	ldr	r2, [r6, #0]
 8008628:	f003 0306 	and.w	r3, r3, #6
 800862c:	2b04      	cmp	r3, #4
 800862e:	bf08      	it	eq
 8008630:	1aad      	subeq	r5, r5, r2
 8008632:	68a3      	ldr	r3, [r4, #8]
 8008634:	6922      	ldr	r2, [r4, #16]
 8008636:	bf0c      	ite	eq
 8008638:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800863c:	2500      	movne	r5, #0
 800863e:	4293      	cmp	r3, r2
 8008640:	bfc4      	itt	gt
 8008642:	1a9b      	subgt	r3, r3, r2
 8008644:	18ed      	addgt	r5, r5, r3
 8008646:	2600      	movs	r6, #0
 8008648:	341a      	adds	r4, #26
 800864a:	42b5      	cmp	r5, r6
 800864c:	d11a      	bne.n	8008684 <_printf_common+0xc8>
 800864e:	2000      	movs	r0, #0
 8008650:	e008      	b.n	8008664 <_printf_common+0xa8>
 8008652:	2301      	movs	r3, #1
 8008654:	4652      	mov	r2, sl
 8008656:	4649      	mov	r1, r9
 8008658:	4638      	mov	r0, r7
 800865a:	47c0      	blx	r8
 800865c:	3001      	adds	r0, #1
 800865e:	d103      	bne.n	8008668 <_printf_common+0xac>
 8008660:	f04f 30ff 	mov.w	r0, #4294967295
 8008664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008668:	3501      	adds	r5, #1
 800866a:	e7c6      	b.n	80085fa <_printf_common+0x3e>
 800866c:	18e1      	adds	r1, r4, r3
 800866e:	1c5a      	adds	r2, r3, #1
 8008670:	2030      	movs	r0, #48	; 0x30
 8008672:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008676:	4422      	add	r2, r4
 8008678:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800867c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008680:	3302      	adds	r3, #2
 8008682:	e7c7      	b.n	8008614 <_printf_common+0x58>
 8008684:	2301      	movs	r3, #1
 8008686:	4622      	mov	r2, r4
 8008688:	4649      	mov	r1, r9
 800868a:	4638      	mov	r0, r7
 800868c:	47c0      	blx	r8
 800868e:	3001      	adds	r0, #1
 8008690:	d0e6      	beq.n	8008660 <_printf_common+0xa4>
 8008692:	3601      	adds	r6, #1
 8008694:	e7d9      	b.n	800864a <_printf_common+0x8e>
	...

08008698 <_printf_i>:
 8008698:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800869c:	7e0f      	ldrb	r7, [r1, #24]
 800869e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80086a0:	2f78      	cmp	r7, #120	; 0x78
 80086a2:	4691      	mov	r9, r2
 80086a4:	4680      	mov	r8, r0
 80086a6:	460c      	mov	r4, r1
 80086a8:	469a      	mov	sl, r3
 80086aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80086ae:	d807      	bhi.n	80086c0 <_printf_i+0x28>
 80086b0:	2f62      	cmp	r7, #98	; 0x62
 80086b2:	d80a      	bhi.n	80086ca <_printf_i+0x32>
 80086b4:	2f00      	cmp	r7, #0
 80086b6:	f000 80d8 	beq.w	800886a <_printf_i+0x1d2>
 80086ba:	2f58      	cmp	r7, #88	; 0x58
 80086bc:	f000 80a3 	beq.w	8008806 <_printf_i+0x16e>
 80086c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80086c8:	e03a      	b.n	8008740 <_printf_i+0xa8>
 80086ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80086ce:	2b15      	cmp	r3, #21
 80086d0:	d8f6      	bhi.n	80086c0 <_printf_i+0x28>
 80086d2:	a101      	add	r1, pc, #4	; (adr r1, 80086d8 <_printf_i+0x40>)
 80086d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80086d8:	08008731 	.word	0x08008731
 80086dc:	08008745 	.word	0x08008745
 80086e0:	080086c1 	.word	0x080086c1
 80086e4:	080086c1 	.word	0x080086c1
 80086e8:	080086c1 	.word	0x080086c1
 80086ec:	080086c1 	.word	0x080086c1
 80086f0:	08008745 	.word	0x08008745
 80086f4:	080086c1 	.word	0x080086c1
 80086f8:	080086c1 	.word	0x080086c1
 80086fc:	080086c1 	.word	0x080086c1
 8008700:	080086c1 	.word	0x080086c1
 8008704:	08008851 	.word	0x08008851
 8008708:	08008775 	.word	0x08008775
 800870c:	08008833 	.word	0x08008833
 8008710:	080086c1 	.word	0x080086c1
 8008714:	080086c1 	.word	0x080086c1
 8008718:	08008873 	.word	0x08008873
 800871c:	080086c1 	.word	0x080086c1
 8008720:	08008775 	.word	0x08008775
 8008724:	080086c1 	.word	0x080086c1
 8008728:	080086c1 	.word	0x080086c1
 800872c:	0800883b 	.word	0x0800883b
 8008730:	682b      	ldr	r3, [r5, #0]
 8008732:	1d1a      	adds	r2, r3, #4
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	602a      	str	r2, [r5, #0]
 8008738:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800873c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008740:	2301      	movs	r3, #1
 8008742:	e0a3      	b.n	800888c <_printf_i+0x1f4>
 8008744:	6820      	ldr	r0, [r4, #0]
 8008746:	6829      	ldr	r1, [r5, #0]
 8008748:	0606      	lsls	r6, r0, #24
 800874a:	f101 0304 	add.w	r3, r1, #4
 800874e:	d50a      	bpl.n	8008766 <_printf_i+0xce>
 8008750:	680e      	ldr	r6, [r1, #0]
 8008752:	602b      	str	r3, [r5, #0]
 8008754:	2e00      	cmp	r6, #0
 8008756:	da03      	bge.n	8008760 <_printf_i+0xc8>
 8008758:	232d      	movs	r3, #45	; 0x2d
 800875a:	4276      	negs	r6, r6
 800875c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008760:	485e      	ldr	r0, [pc, #376]	; (80088dc <_printf_i+0x244>)
 8008762:	230a      	movs	r3, #10
 8008764:	e019      	b.n	800879a <_printf_i+0x102>
 8008766:	680e      	ldr	r6, [r1, #0]
 8008768:	602b      	str	r3, [r5, #0]
 800876a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800876e:	bf18      	it	ne
 8008770:	b236      	sxthne	r6, r6
 8008772:	e7ef      	b.n	8008754 <_printf_i+0xbc>
 8008774:	682b      	ldr	r3, [r5, #0]
 8008776:	6820      	ldr	r0, [r4, #0]
 8008778:	1d19      	adds	r1, r3, #4
 800877a:	6029      	str	r1, [r5, #0]
 800877c:	0601      	lsls	r1, r0, #24
 800877e:	d501      	bpl.n	8008784 <_printf_i+0xec>
 8008780:	681e      	ldr	r6, [r3, #0]
 8008782:	e002      	b.n	800878a <_printf_i+0xf2>
 8008784:	0646      	lsls	r6, r0, #25
 8008786:	d5fb      	bpl.n	8008780 <_printf_i+0xe8>
 8008788:	881e      	ldrh	r6, [r3, #0]
 800878a:	4854      	ldr	r0, [pc, #336]	; (80088dc <_printf_i+0x244>)
 800878c:	2f6f      	cmp	r7, #111	; 0x6f
 800878e:	bf0c      	ite	eq
 8008790:	2308      	moveq	r3, #8
 8008792:	230a      	movne	r3, #10
 8008794:	2100      	movs	r1, #0
 8008796:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800879a:	6865      	ldr	r5, [r4, #4]
 800879c:	60a5      	str	r5, [r4, #8]
 800879e:	2d00      	cmp	r5, #0
 80087a0:	bfa2      	ittt	ge
 80087a2:	6821      	ldrge	r1, [r4, #0]
 80087a4:	f021 0104 	bicge.w	r1, r1, #4
 80087a8:	6021      	strge	r1, [r4, #0]
 80087aa:	b90e      	cbnz	r6, 80087b0 <_printf_i+0x118>
 80087ac:	2d00      	cmp	r5, #0
 80087ae:	d04d      	beq.n	800884c <_printf_i+0x1b4>
 80087b0:	4615      	mov	r5, r2
 80087b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80087b6:	fb03 6711 	mls	r7, r3, r1, r6
 80087ba:	5dc7      	ldrb	r7, [r0, r7]
 80087bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80087c0:	4637      	mov	r7, r6
 80087c2:	42bb      	cmp	r3, r7
 80087c4:	460e      	mov	r6, r1
 80087c6:	d9f4      	bls.n	80087b2 <_printf_i+0x11a>
 80087c8:	2b08      	cmp	r3, #8
 80087ca:	d10b      	bne.n	80087e4 <_printf_i+0x14c>
 80087cc:	6823      	ldr	r3, [r4, #0]
 80087ce:	07de      	lsls	r6, r3, #31
 80087d0:	d508      	bpl.n	80087e4 <_printf_i+0x14c>
 80087d2:	6923      	ldr	r3, [r4, #16]
 80087d4:	6861      	ldr	r1, [r4, #4]
 80087d6:	4299      	cmp	r1, r3
 80087d8:	bfde      	ittt	le
 80087da:	2330      	movle	r3, #48	; 0x30
 80087dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80087e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80087e4:	1b52      	subs	r2, r2, r5
 80087e6:	6122      	str	r2, [r4, #16]
 80087e8:	f8cd a000 	str.w	sl, [sp]
 80087ec:	464b      	mov	r3, r9
 80087ee:	aa03      	add	r2, sp, #12
 80087f0:	4621      	mov	r1, r4
 80087f2:	4640      	mov	r0, r8
 80087f4:	f7ff fee2 	bl	80085bc <_printf_common>
 80087f8:	3001      	adds	r0, #1
 80087fa:	d14c      	bne.n	8008896 <_printf_i+0x1fe>
 80087fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008800:	b004      	add	sp, #16
 8008802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008806:	4835      	ldr	r0, [pc, #212]	; (80088dc <_printf_i+0x244>)
 8008808:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800880c:	6829      	ldr	r1, [r5, #0]
 800880e:	6823      	ldr	r3, [r4, #0]
 8008810:	f851 6b04 	ldr.w	r6, [r1], #4
 8008814:	6029      	str	r1, [r5, #0]
 8008816:	061d      	lsls	r5, r3, #24
 8008818:	d514      	bpl.n	8008844 <_printf_i+0x1ac>
 800881a:	07df      	lsls	r7, r3, #31
 800881c:	bf44      	itt	mi
 800881e:	f043 0320 	orrmi.w	r3, r3, #32
 8008822:	6023      	strmi	r3, [r4, #0]
 8008824:	b91e      	cbnz	r6, 800882e <_printf_i+0x196>
 8008826:	6823      	ldr	r3, [r4, #0]
 8008828:	f023 0320 	bic.w	r3, r3, #32
 800882c:	6023      	str	r3, [r4, #0]
 800882e:	2310      	movs	r3, #16
 8008830:	e7b0      	b.n	8008794 <_printf_i+0xfc>
 8008832:	6823      	ldr	r3, [r4, #0]
 8008834:	f043 0320 	orr.w	r3, r3, #32
 8008838:	6023      	str	r3, [r4, #0]
 800883a:	2378      	movs	r3, #120	; 0x78
 800883c:	4828      	ldr	r0, [pc, #160]	; (80088e0 <_printf_i+0x248>)
 800883e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008842:	e7e3      	b.n	800880c <_printf_i+0x174>
 8008844:	0659      	lsls	r1, r3, #25
 8008846:	bf48      	it	mi
 8008848:	b2b6      	uxthmi	r6, r6
 800884a:	e7e6      	b.n	800881a <_printf_i+0x182>
 800884c:	4615      	mov	r5, r2
 800884e:	e7bb      	b.n	80087c8 <_printf_i+0x130>
 8008850:	682b      	ldr	r3, [r5, #0]
 8008852:	6826      	ldr	r6, [r4, #0]
 8008854:	6961      	ldr	r1, [r4, #20]
 8008856:	1d18      	adds	r0, r3, #4
 8008858:	6028      	str	r0, [r5, #0]
 800885a:	0635      	lsls	r5, r6, #24
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	d501      	bpl.n	8008864 <_printf_i+0x1cc>
 8008860:	6019      	str	r1, [r3, #0]
 8008862:	e002      	b.n	800886a <_printf_i+0x1d2>
 8008864:	0670      	lsls	r0, r6, #25
 8008866:	d5fb      	bpl.n	8008860 <_printf_i+0x1c8>
 8008868:	8019      	strh	r1, [r3, #0]
 800886a:	2300      	movs	r3, #0
 800886c:	6123      	str	r3, [r4, #16]
 800886e:	4615      	mov	r5, r2
 8008870:	e7ba      	b.n	80087e8 <_printf_i+0x150>
 8008872:	682b      	ldr	r3, [r5, #0]
 8008874:	1d1a      	adds	r2, r3, #4
 8008876:	602a      	str	r2, [r5, #0]
 8008878:	681d      	ldr	r5, [r3, #0]
 800887a:	6862      	ldr	r2, [r4, #4]
 800887c:	2100      	movs	r1, #0
 800887e:	4628      	mov	r0, r5
 8008880:	f7f7 fcae 	bl	80001e0 <memchr>
 8008884:	b108      	cbz	r0, 800888a <_printf_i+0x1f2>
 8008886:	1b40      	subs	r0, r0, r5
 8008888:	6060      	str	r0, [r4, #4]
 800888a:	6863      	ldr	r3, [r4, #4]
 800888c:	6123      	str	r3, [r4, #16]
 800888e:	2300      	movs	r3, #0
 8008890:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008894:	e7a8      	b.n	80087e8 <_printf_i+0x150>
 8008896:	6923      	ldr	r3, [r4, #16]
 8008898:	462a      	mov	r2, r5
 800889a:	4649      	mov	r1, r9
 800889c:	4640      	mov	r0, r8
 800889e:	47d0      	blx	sl
 80088a0:	3001      	adds	r0, #1
 80088a2:	d0ab      	beq.n	80087fc <_printf_i+0x164>
 80088a4:	6823      	ldr	r3, [r4, #0]
 80088a6:	079b      	lsls	r3, r3, #30
 80088a8:	d413      	bmi.n	80088d2 <_printf_i+0x23a>
 80088aa:	68e0      	ldr	r0, [r4, #12]
 80088ac:	9b03      	ldr	r3, [sp, #12]
 80088ae:	4298      	cmp	r0, r3
 80088b0:	bfb8      	it	lt
 80088b2:	4618      	movlt	r0, r3
 80088b4:	e7a4      	b.n	8008800 <_printf_i+0x168>
 80088b6:	2301      	movs	r3, #1
 80088b8:	4632      	mov	r2, r6
 80088ba:	4649      	mov	r1, r9
 80088bc:	4640      	mov	r0, r8
 80088be:	47d0      	blx	sl
 80088c0:	3001      	adds	r0, #1
 80088c2:	d09b      	beq.n	80087fc <_printf_i+0x164>
 80088c4:	3501      	adds	r5, #1
 80088c6:	68e3      	ldr	r3, [r4, #12]
 80088c8:	9903      	ldr	r1, [sp, #12]
 80088ca:	1a5b      	subs	r3, r3, r1
 80088cc:	42ab      	cmp	r3, r5
 80088ce:	dcf2      	bgt.n	80088b6 <_printf_i+0x21e>
 80088d0:	e7eb      	b.n	80088aa <_printf_i+0x212>
 80088d2:	2500      	movs	r5, #0
 80088d4:	f104 0619 	add.w	r6, r4, #25
 80088d8:	e7f5      	b.n	80088c6 <_printf_i+0x22e>
 80088da:	bf00      	nop
 80088dc:	0800aef6 	.word	0x0800aef6
 80088e0:	0800af07 	.word	0x0800af07

080088e4 <siprintf>:
 80088e4:	b40e      	push	{r1, r2, r3}
 80088e6:	b500      	push	{lr}
 80088e8:	b09c      	sub	sp, #112	; 0x70
 80088ea:	ab1d      	add	r3, sp, #116	; 0x74
 80088ec:	9002      	str	r0, [sp, #8]
 80088ee:	9006      	str	r0, [sp, #24]
 80088f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80088f4:	4809      	ldr	r0, [pc, #36]	; (800891c <siprintf+0x38>)
 80088f6:	9107      	str	r1, [sp, #28]
 80088f8:	9104      	str	r1, [sp, #16]
 80088fa:	4909      	ldr	r1, [pc, #36]	; (8008920 <siprintf+0x3c>)
 80088fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008900:	9105      	str	r1, [sp, #20]
 8008902:	6800      	ldr	r0, [r0, #0]
 8008904:	9301      	str	r3, [sp, #4]
 8008906:	a902      	add	r1, sp, #8
 8008908:	f001 fb78 	bl	8009ffc <_svfiprintf_r>
 800890c:	9b02      	ldr	r3, [sp, #8]
 800890e:	2200      	movs	r2, #0
 8008910:	701a      	strb	r2, [r3, #0]
 8008912:	b01c      	add	sp, #112	; 0x70
 8008914:	f85d eb04 	ldr.w	lr, [sp], #4
 8008918:	b003      	add	sp, #12
 800891a:	4770      	bx	lr
 800891c:	2000000c 	.word	0x2000000c
 8008920:	ffff0208 	.word	0xffff0208

08008924 <quorem>:
 8008924:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008928:	6903      	ldr	r3, [r0, #16]
 800892a:	690c      	ldr	r4, [r1, #16]
 800892c:	42a3      	cmp	r3, r4
 800892e:	4607      	mov	r7, r0
 8008930:	f2c0 8081 	blt.w	8008a36 <quorem+0x112>
 8008934:	3c01      	subs	r4, #1
 8008936:	f101 0814 	add.w	r8, r1, #20
 800893a:	f100 0514 	add.w	r5, r0, #20
 800893e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008942:	9301      	str	r3, [sp, #4]
 8008944:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008948:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800894c:	3301      	adds	r3, #1
 800894e:	429a      	cmp	r2, r3
 8008950:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008954:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008958:	fbb2 f6f3 	udiv	r6, r2, r3
 800895c:	d331      	bcc.n	80089c2 <quorem+0x9e>
 800895e:	f04f 0e00 	mov.w	lr, #0
 8008962:	4640      	mov	r0, r8
 8008964:	46ac      	mov	ip, r5
 8008966:	46f2      	mov	sl, lr
 8008968:	f850 2b04 	ldr.w	r2, [r0], #4
 800896c:	b293      	uxth	r3, r2
 800896e:	fb06 e303 	mla	r3, r6, r3, lr
 8008972:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008976:	b29b      	uxth	r3, r3
 8008978:	ebaa 0303 	sub.w	r3, sl, r3
 800897c:	f8dc a000 	ldr.w	sl, [ip]
 8008980:	0c12      	lsrs	r2, r2, #16
 8008982:	fa13 f38a 	uxtah	r3, r3, sl
 8008986:	fb06 e202 	mla	r2, r6, r2, lr
 800898a:	9300      	str	r3, [sp, #0]
 800898c:	9b00      	ldr	r3, [sp, #0]
 800898e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008992:	b292      	uxth	r2, r2
 8008994:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008998:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800899c:	f8bd 3000 	ldrh.w	r3, [sp]
 80089a0:	4581      	cmp	r9, r0
 80089a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089a6:	f84c 3b04 	str.w	r3, [ip], #4
 80089aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80089ae:	d2db      	bcs.n	8008968 <quorem+0x44>
 80089b0:	f855 300b 	ldr.w	r3, [r5, fp]
 80089b4:	b92b      	cbnz	r3, 80089c2 <quorem+0x9e>
 80089b6:	9b01      	ldr	r3, [sp, #4]
 80089b8:	3b04      	subs	r3, #4
 80089ba:	429d      	cmp	r5, r3
 80089bc:	461a      	mov	r2, r3
 80089be:	d32e      	bcc.n	8008a1e <quorem+0xfa>
 80089c0:	613c      	str	r4, [r7, #16]
 80089c2:	4638      	mov	r0, r7
 80089c4:	f001 f8c6 	bl	8009b54 <__mcmp>
 80089c8:	2800      	cmp	r0, #0
 80089ca:	db24      	blt.n	8008a16 <quorem+0xf2>
 80089cc:	3601      	adds	r6, #1
 80089ce:	4628      	mov	r0, r5
 80089d0:	f04f 0c00 	mov.w	ip, #0
 80089d4:	f858 2b04 	ldr.w	r2, [r8], #4
 80089d8:	f8d0 e000 	ldr.w	lr, [r0]
 80089dc:	b293      	uxth	r3, r2
 80089de:	ebac 0303 	sub.w	r3, ip, r3
 80089e2:	0c12      	lsrs	r2, r2, #16
 80089e4:	fa13 f38e 	uxtah	r3, r3, lr
 80089e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80089ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089f6:	45c1      	cmp	r9, r8
 80089f8:	f840 3b04 	str.w	r3, [r0], #4
 80089fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008a00:	d2e8      	bcs.n	80089d4 <quorem+0xb0>
 8008a02:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a0a:	b922      	cbnz	r2, 8008a16 <quorem+0xf2>
 8008a0c:	3b04      	subs	r3, #4
 8008a0e:	429d      	cmp	r5, r3
 8008a10:	461a      	mov	r2, r3
 8008a12:	d30a      	bcc.n	8008a2a <quorem+0x106>
 8008a14:	613c      	str	r4, [r7, #16]
 8008a16:	4630      	mov	r0, r6
 8008a18:	b003      	add	sp, #12
 8008a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a1e:	6812      	ldr	r2, [r2, #0]
 8008a20:	3b04      	subs	r3, #4
 8008a22:	2a00      	cmp	r2, #0
 8008a24:	d1cc      	bne.n	80089c0 <quorem+0x9c>
 8008a26:	3c01      	subs	r4, #1
 8008a28:	e7c7      	b.n	80089ba <quorem+0x96>
 8008a2a:	6812      	ldr	r2, [r2, #0]
 8008a2c:	3b04      	subs	r3, #4
 8008a2e:	2a00      	cmp	r2, #0
 8008a30:	d1f0      	bne.n	8008a14 <quorem+0xf0>
 8008a32:	3c01      	subs	r4, #1
 8008a34:	e7eb      	b.n	8008a0e <quorem+0xea>
 8008a36:	2000      	movs	r0, #0
 8008a38:	e7ee      	b.n	8008a18 <quorem+0xf4>
 8008a3a:	0000      	movs	r0, r0
 8008a3c:	0000      	movs	r0, r0
	...

08008a40 <_dtoa_r>:
 8008a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a44:	ed2d 8b04 	vpush	{d8-d9}
 8008a48:	ec57 6b10 	vmov	r6, r7, d0
 8008a4c:	b093      	sub	sp, #76	; 0x4c
 8008a4e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008a50:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008a54:	9106      	str	r1, [sp, #24]
 8008a56:	ee10 aa10 	vmov	sl, s0
 8008a5a:	4604      	mov	r4, r0
 8008a5c:	9209      	str	r2, [sp, #36]	; 0x24
 8008a5e:	930c      	str	r3, [sp, #48]	; 0x30
 8008a60:	46bb      	mov	fp, r7
 8008a62:	b975      	cbnz	r5, 8008a82 <_dtoa_r+0x42>
 8008a64:	2010      	movs	r0, #16
 8008a66:	f000 fddd 	bl	8009624 <malloc>
 8008a6a:	4602      	mov	r2, r0
 8008a6c:	6260      	str	r0, [r4, #36]	; 0x24
 8008a6e:	b920      	cbnz	r0, 8008a7a <_dtoa_r+0x3a>
 8008a70:	4ba7      	ldr	r3, [pc, #668]	; (8008d10 <_dtoa_r+0x2d0>)
 8008a72:	21ea      	movs	r1, #234	; 0xea
 8008a74:	48a7      	ldr	r0, [pc, #668]	; (8008d14 <_dtoa_r+0x2d4>)
 8008a76:	f001 fbd1 	bl	800a21c <__assert_func>
 8008a7a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008a7e:	6005      	str	r5, [r0, #0]
 8008a80:	60c5      	str	r5, [r0, #12]
 8008a82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a84:	6819      	ldr	r1, [r3, #0]
 8008a86:	b151      	cbz	r1, 8008a9e <_dtoa_r+0x5e>
 8008a88:	685a      	ldr	r2, [r3, #4]
 8008a8a:	604a      	str	r2, [r1, #4]
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	4093      	lsls	r3, r2
 8008a90:	608b      	str	r3, [r1, #8]
 8008a92:	4620      	mov	r0, r4
 8008a94:	f000 fe1c 	bl	80096d0 <_Bfree>
 8008a98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	601a      	str	r2, [r3, #0]
 8008a9e:	1e3b      	subs	r3, r7, #0
 8008aa0:	bfaa      	itet	ge
 8008aa2:	2300      	movge	r3, #0
 8008aa4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008aa8:	f8c8 3000 	strge.w	r3, [r8]
 8008aac:	4b9a      	ldr	r3, [pc, #616]	; (8008d18 <_dtoa_r+0x2d8>)
 8008aae:	bfbc      	itt	lt
 8008ab0:	2201      	movlt	r2, #1
 8008ab2:	f8c8 2000 	strlt.w	r2, [r8]
 8008ab6:	ea33 030b 	bics.w	r3, r3, fp
 8008aba:	d11b      	bne.n	8008af4 <_dtoa_r+0xb4>
 8008abc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008abe:	f242 730f 	movw	r3, #9999	; 0x270f
 8008ac2:	6013      	str	r3, [r2, #0]
 8008ac4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008ac8:	4333      	orrs	r3, r6
 8008aca:	f000 8592 	beq.w	80095f2 <_dtoa_r+0xbb2>
 8008ace:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ad0:	b963      	cbnz	r3, 8008aec <_dtoa_r+0xac>
 8008ad2:	4b92      	ldr	r3, [pc, #584]	; (8008d1c <_dtoa_r+0x2dc>)
 8008ad4:	e022      	b.n	8008b1c <_dtoa_r+0xdc>
 8008ad6:	4b92      	ldr	r3, [pc, #584]	; (8008d20 <_dtoa_r+0x2e0>)
 8008ad8:	9301      	str	r3, [sp, #4]
 8008ada:	3308      	adds	r3, #8
 8008adc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008ade:	6013      	str	r3, [r2, #0]
 8008ae0:	9801      	ldr	r0, [sp, #4]
 8008ae2:	b013      	add	sp, #76	; 0x4c
 8008ae4:	ecbd 8b04 	vpop	{d8-d9}
 8008ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aec:	4b8b      	ldr	r3, [pc, #556]	; (8008d1c <_dtoa_r+0x2dc>)
 8008aee:	9301      	str	r3, [sp, #4]
 8008af0:	3303      	adds	r3, #3
 8008af2:	e7f3      	b.n	8008adc <_dtoa_r+0x9c>
 8008af4:	2200      	movs	r2, #0
 8008af6:	2300      	movs	r3, #0
 8008af8:	4650      	mov	r0, sl
 8008afa:	4659      	mov	r1, fp
 8008afc:	f7f7 ffe4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b00:	ec4b ab19 	vmov	d9, sl, fp
 8008b04:	4680      	mov	r8, r0
 8008b06:	b158      	cbz	r0, 8008b20 <_dtoa_r+0xe0>
 8008b08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	6013      	str	r3, [r2, #0]
 8008b0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	f000 856b 	beq.w	80095ec <_dtoa_r+0xbac>
 8008b16:	4883      	ldr	r0, [pc, #524]	; (8008d24 <_dtoa_r+0x2e4>)
 8008b18:	6018      	str	r0, [r3, #0]
 8008b1a:	1e43      	subs	r3, r0, #1
 8008b1c:	9301      	str	r3, [sp, #4]
 8008b1e:	e7df      	b.n	8008ae0 <_dtoa_r+0xa0>
 8008b20:	ec4b ab10 	vmov	d0, sl, fp
 8008b24:	aa10      	add	r2, sp, #64	; 0x40
 8008b26:	a911      	add	r1, sp, #68	; 0x44
 8008b28:	4620      	mov	r0, r4
 8008b2a:	f001 f8b9 	bl	8009ca0 <__d2b>
 8008b2e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008b32:	ee08 0a10 	vmov	s16, r0
 8008b36:	2d00      	cmp	r5, #0
 8008b38:	f000 8084 	beq.w	8008c44 <_dtoa_r+0x204>
 8008b3c:	ee19 3a90 	vmov	r3, s19
 8008b40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b44:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008b48:	4656      	mov	r6, sl
 8008b4a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008b4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008b52:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008b56:	4b74      	ldr	r3, [pc, #464]	; (8008d28 <_dtoa_r+0x2e8>)
 8008b58:	2200      	movs	r2, #0
 8008b5a:	4630      	mov	r0, r6
 8008b5c:	4639      	mov	r1, r7
 8008b5e:	f7f7 fb93 	bl	8000288 <__aeabi_dsub>
 8008b62:	a365      	add	r3, pc, #404	; (adr r3, 8008cf8 <_dtoa_r+0x2b8>)
 8008b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b68:	f7f7 fd46 	bl	80005f8 <__aeabi_dmul>
 8008b6c:	a364      	add	r3, pc, #400	; (adr r3, 8008d00 <_dtoa_r+0x2c0>)
 8008b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b72:	f7f7 fb8b 	bl	800028c <__adddf3>
 8008b76:	4606      	mov	r6, r0
 8008b78:	4628      	mov	r0, r5
 8008b7a:	460f      	mov	r7, r1
 8008b7c:	f7f7 fcd2 	bl	8000524 <__aeabi_i2d>
 8008b80:	a361      	add	r3, pc, #388	; (adr r3, 8008d08 <_dtoa_r+0x2c8>)
 8008b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b86:	f7f7 fd37 	bl	80005f8 <__aeabi_dmul>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	460b      	mov	r3, r1
 8008b8e:	4630      	mov	r0, r6
 8008b90:	4639      	mov	r1, r7
 8008b92:	f7f7 fb7b 	bl	800028c <__adddf3>
 8008b96:	4606      	mov	r6, r0
 8008b98:	460f      	mov	r7, r1
 8008b9a:	f7f7 ffdd 	bl	8000b58 <__aeabi_d2iz>
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	9000      	str	r0, [sp, #0]
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	4630      	mov	r0, r6
 8008ba6:	4639      	mov	r1, r7
 8008ba8:	f7f7 ff98 	bl	8000adc <__aeabi_dcmplt>
 8008bac:	b150      	cbz	r0, 8008bc4 <_dtoa_r+0x184>
 8008bae:	9800      	ldr	r0, [sp, #0]
 8008bb0:	f7f7 fcb8 	bl	8000524 <__aeabi_i2d>
 8008bb4:	4632      	mov	r2, r6
 8008bb6:	463b      	mov	r3, r7
 8008bb8:	f7f7 ff86 	bl	8000ac8 <__aeabi_dcmpeq>
 8008bbc:	b910      	cbnz	r0, 8008bc4 <_dtoa_r+0x184>
 8008bbe:	9b00      	ldr	r3, [sp, #0]
 8008bc0:	3b01      	subs	r3, #1
 8008bc2:	9300      	str	r3, [sp, #0]
 8008bc4:	9b00      	ldr	r3, [sp, #0]
 8008bc6:	2b16      	cmp	r3, #22
 8008bc8:	d85a      	bhi.n	8008c80 <_dtoa_r+0x240>
 8008bca:	9a00      	ldr	r2, [sp, #0]
 8008bcc:	4b57      	ldr	r3, [pc, #348]	; (8008d2c <_dtoa_r+0x2ec>)
 8008bce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd6:	ec51 0b19 	vmov	r0, r1, d9
 8008bda:	f7f7 ff7f 	bl	8000adc <__aeabi_dcmplt>
 8008bde:	2800      	cmp	r0, #0
 8008be0:	d050      	beq.n	8008c84 <_dtoa_r+0x244>
 8008be2:	9b00      	ldr	r3, [sp, #0]
 8008be4:	3b01      	subs	r3, #1
 8008be6:	9300      	str	r3, [sp, #0]
 8008be8:	2300      	movs	r3, #0
 8008bea:	930b      	str	r3, [sp, #44]	; 0x2c
 8008bec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008bee:	1b5d      	subs	r5, r3, r5
 8008bf0:	1e6b      	subs	r3, r5, #1
 8008bf2:	9305      	str	r3, [sp, #20]
 8008bf4:	bf45      	ittet	mi
 8008bf6:	f1c5 0301 	rsbmi	r3, r5, #1
 8008bfa:	9304      	strmi	r3, [sp, #16]
 8008bfc:	2300      	movpl	r3, #0
 8008bfe:	2300      	movmi	r3, #0
 8008c00:	bf4c      	ite	mi
 8008c02:	9305      	strmi	r3, [sp, #20]
 8008c04:	9304      	strpl	r3, [sp, #16]
 8008c06:	9b00      	ldr	r3, [sp, #0]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	db3d      	blt.n	8008c88 <_dtoa_r+0x248>
 8008c0c:	9b05      	ldr	r3, [sp, #20]
 8008c0e:	9a00      	ldr	r2, [sp, #0]
 8008c10:	920a      	str	r2, [sp, #40]	; 0x28
 8008c12:	4413      	add	r3, r2
 8008c14:	9305      	str	r3, [sp, #20]
 8008c16:	2300      	movs	r3, #0
 8008c18:	9307      	str	r3, [sp, #28]
 8008c1a:	9b06      	ldr	r3, [sp, #24]
 8008c1c:	2b09      	cmp	r3, #9
 8008c1e:	f200 8089 	bhi.w	8008d34 <_dtoa_r+0x2f4>
 8008c22:	2b05      	cmp	r3, #5
 8008c24:	bfc4      	itt	gt
 8008c26:	3b04      	subgt	r3, #4
 8008c28:	9306      	strgt	r3, [sp, #24]
 8008c2a:	9b06      	ldr	r3, [sp, #24]
 8008c2c:	f1a3 0302 	sub.w	r3, r3, #2
 8008c30:	bfcc      	ite	gt
 8008c32:	2500      	movgt	r5, #0
 8008c34:	2501      	movle	r5, #1
 8008c36:	2b03      	cmp	r3, #3
 8008c38:	f200 8087 	bhi.w	8008d4a <_dtoa_r+0x30a>
 8008c3c:	e8df f003 	tbb	[pc, r3]
 8008c40:	59383a2d 	.word	0x59383a2d
 8008c44:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008c48:	441d      	add	r5, r3
 8008c4a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008c4e:	2b20      	cmp	r3, #32
 8008c50:	bfc1      	itttt	gt
 8008c52:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008c56:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008c5a:	fa0b f303 	lslgt.w	r3, fp, r3
 8008c5e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008c62:	bfda      	itte	le
 8008c64:	f1c3 0320 	rsble	r3, r3, #32
 8008c68:	fa06 f003 	lslle.w	r0, r6, r3
 8008c6c:	4318      	orrgt	r0, r3
 8008c6e:	f7f7 fc49 	bl	8000504 <__aeabi_ui2d>
 8008c72:	2301      	movs	r3, #1
 8008c74:	4606      	mov	r6, r0
 8008c76:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008c7a:	3d01      	subs	r5, #1
 8008c7c:	930e      	str	r3, [sp, #56]	; 0x38
 8008c7e:	e76a      	b.n	8008b56 <_dtoa_r+0x116>
 8008c80:	2301      	movs	r3, #1
 8008c82:	e7b2      	b.n	8008bea <_dtoa_r+0x1aa>
 8008c84:	900b      	str	r0, [sp, #44]	; 0x2c
 8008c86:	e7b1      	b.n	8008bec <_dtoa_r+0x1ac>
 8008c88:	9b04      	ldr	r3, [sp, #16]
 8008c8a:	9a00      	ldr	r2, [sp, #0]
 8008c8c:	1a9b      	subs	r3, r3, r2
 8008c8e:	9304      	str	r3, [sp, #16]
 8008c90:	4253      	negs	r3, r2
 8008c92:	9307      	str	r3, [sp, #28]
 8008c94:	2300      	movs	r3, #0
 8008c96:	930a      	str	r3, [sp, #40]	; 0x28
 8008c98:	e7bf      	b.n	8008c1a <_dtoa_r+0x1da>
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	9308      	str	r3, [sp, #32]
 8008c9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	dc55      	bgt.n	8008d50 <_dtoa_r+0x310>
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008caa:	461a      	mov	r2, r3
 8008cac:	9209      	str	r2, [sp, #36]	; 0x24
 8008cae:	e00c      	b.n	8008cca <_dtoa_r+0x28a>
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	e7f3      	b.n	8008c9c <_dtoa_r+0x25c>
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cb8:	9308      	str	r3, [sp, #32]
 8008cba:	9b00      	ldr	r3, [sp, #0]
 8008cbc:	4413      	add	r3, r2
 8008cbe:	9302      	str	r3, [sp, #8]
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	9303      	str	r3, [sp, #12]
 8008cc6:	bfb8      	it	lt
 8008cc8:	2301      	movlt	r3, #1
 8008cca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008ccc:	2200      	movs	r2, #0
 8008cce:	6042      	str	r2, [r0, #4]
 8008cd0:	2204      	movs	r2, #4
 8008cd2:	f102 0614 	add.w	r6, r2, #20
 8008cd6:	429e      	cmp	r6, r3
 8008cd8:	6841      	ldr	r1, [r0, #4]
 8008cda:	d93d      	bls.n	8008d58 <_dtoa_r+0x318>
 8008cdc:	4620      	mov	r0, r4
 8008cde:	f000 fcb7 	bl	8009650 <_Balloc>
 8008ce2:	9001      	str	r0, [sp, #4]
 8008ce4:	2800      	cmp	r0, #0
 8008ce6:	d13b      	bne.n	8008d60 <_dtoa_r+0x320>
 8008ce8:	4b11      	ldr	r3, [pc, #68]	; (8008d30 <_dtoa_r+0x2f0>)
 8008cea:	4602      	mov	r2, r0
 8008cec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008cf0:	e6c0      	b.n	8008a74 <_dtoa_r+0x34>
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	e7df      	b.n	8008cb6 <_dtoa_r+0x276>
 8008cf6:	bf00      	nop
 8008cf8:	636f4361 	.word	0x636f4361
 8008cfc:	3fd287a7 	.word	0x3fd287a7
 8008d00:	8b60c8b3 	.word	0x8b60c8b3
 8008d04:	3fc68a28 	.word	0x3fc68a28
 8008d08:	509f79fb 	.word	0x509f79fb
 8008d0c:	3fd34413 	.word	0x3fd34413
 8008d10:	0800af25 	.word	0x0800af25
 8008d14:	0800af3c 	.word	0x0800af3c
 8008d18:	7ff00000 	.word	0x7ff00000
 8008d1c:	0800af21 	.word	0x0800af21
 8008d20:	0800af18 	.word	0x0800af18
 8008d24:	0800aef5 	.word	0x0800aef5
 8008d28:	3ff80000 	.word	0x3ff80000
 8008d2c:	0800b030 	.word	0x0800b030
 8008d30:	0800af97 	.word	0x0800af97
 8008d34:	2501      	movs	r5, #1
 8008d36:	2300      	movs	r3, #0
 8008d38:	9306      	str	r3, [sp, #24]
 8008d3a:	9508      	str	r5, [sp, #32]
 8008d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8008d40:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008d44:	2200      	movs	r2, #0
 8008d46:	2312      	movs	r3, #18
 8008d48:	e7b0      	b.n	8008cac <_dtoa_r+0x26c>
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	9308      	str	r3, [sp, #32]
 8008d4e:	e7f5      	b.n	8008d3c <_dtoa_r+0x2fc>
 8008d50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d52:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008d56:	e7b8      	b.n	8008cca <_dtoa_r+0x28a>
 8008d58:	3101      	adds	r1, #1
 8008d5a:	6041      	str	r1, [r0, #4]
 8008d5c:	0052      	lsls	r2, r2, #1
 8008d5e:	e7b8      	b.n	8008cd2 <_dtoa_r+0x292>
 8008d60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d62:	9a01      	ldr	r2, [sp, #4]
 8008d64:	601a      	str	r2, [r3, #0]
 8008d66:	9b03      	ldr	r3, [sp, #12]
 8008d68:	2b0e      	cmp	r3, #14
 8008d6a:	f200 809d 	bhi.w	8008ea8 <_dtoa_r+0x468>
 8008d6e:	2d00      	cmp	r5, #0
 8008d70:	f000 809a 	beq.w	8008ea8 <_dtoa_r+0x468>
 8008d74:	9b00      	ldr	r3, [sp, #0]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	dd32      	ble.n	8008de0 <_dtoa_r+0x3a0>
 8008d7a:	4ab7      	ldr	r2, [pc, #732]	; (8009058 <_dtoa_r+0x618>)
 8008d7c:	f003 030f 	and.w	r3, r3, #15
 8008d80:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008d84:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008d88:	9b00      	ldr	r3, [sp, #0]
 8008d8a:	05d8      	lsls	r0, r3, #23
 8008d8c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008d90:	d516      	bpl.n	8008dc0 <_dtoa_r+0x380>
 8008d92:	4bb2      	ldr	r3, [pc, #712]	; (800905c <_dtoa_r+0x61c>)
 8008d94:	ec51 0b19 	vmov	r0, r1, d9
 8008d98:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008d9c:	f7f7 fd56 	bl	800084c <__aeabi_ddiv>
 8008da0:	f007 070f 	and.w	r7, r7, #15
 8008da4:	4682      	mov	sl, r0
 8008da6:	468b      	mov	fp, r1
 8008da8:	2503      	movs	r5, #3
 8008daa:	4eac      	ldr	r6, [pc, #688]	; (800905c <_dtoa_r+0x61c>)
 8008dac:	b957      	cbnz	r7, 8008dc4 <_dtoa_r+0x384>
 8008dae:	4642      	mov	r2, r8
 8008db0:	464b      	mov	r3, r9
 8008db2:	4650      	mov	r0, sl
 8008db4:	4659      	mov	r1, fp
 8008db6:	f7f7 fd49 	bl	800084c <__aeabi_ddiv>
 8008dba:	4682      	mov	sl, r0
 8008dbc:	468b      	mov	fp, r1
 8008dbe:	e028      	b.n	8008e12 <_dtoa_r+0x3d2>
 8008dc0:	2502      	movs	r5, #2
 8008dc2:	e7f2      	b.n	8008daa <_dtoa_r+0x36a>
 8008dc4:	07f9      	lsls	r1, r7, #31
 8008dc6:	d508      	bpl.n	8008dda <_dtoa_r+0x39a>
 8008dc8:	4640      	mov	r0, r8
 8008dca:	4649      	mov	r1, r9
 8008dcc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008dd0:	f7f7 fc12 	bl	80005f8 <__aeabi_dmul>
 8008dd4:	3501      	adds	r5, #1
 8008dd6:	4680      	mov	r8, r0
 8008dd8:	4689      	mov	r9, r1
 8008dda:	107f      	asrs	r7, r7, #1
 8008ddc:	3608      	adds	r6, #8
 8008dde:	e7e5      	b.n	8008dac <_dtoa_r+0x36c>
 8008de0:	f000 809b 	beq.w	8008f1a <_dtoa_r+0x4da>
 8008de4:	9b00      	ldr	r3, [sp, #0]
 8008de6:	4f9d      	ldr	r7, [pc, #628]	; (800905c <_dtoa_r+0x61c>)
 8008de8:	425e      	negs	r6, r3
 8008dea:	4b9b      	ldr	r3, [pc, #620]	; (8009058 <_dtoa_r+0x618>)
 8008dec:	f006 020f 	and.w	r2, r6, #15
 8008df0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df8:	ec51 0b19 	vmov	r0, r1, d9
 8008dfc:	f7f7 fbfc 	bl	80005f8 <__aeabi_dmul>
 8008e00:	1136      	asrs	r6, r6, #4
 8008e02:	4682      	mov	sl, r0
 8008e04:	468b      	mov	fp, r1
 8008e06:	2300      	movs	r3, #0
 8008e08:	2502      	movs	r5, #2
 8008e0a:	2e00      	cmp	r6, #0
 8008e0c:	d17a      	bne.n	8008f04 <_dtoa_r+0x4c4>
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d1d3      	bne.n	8008dba <_dtoa_r+0x37a>
 8008e12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	f000 8082 	beq.w	8008f1e <_dtoa_r+0x4de>
 8008e1a:	4b91      	ldr	r3, [pc, #580]	; (8009060 <_dtoa_r+0x620>)
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	4650      	mov	r0, sl
 8008e20:	4659      	mov	r1, fp
 8008e22:	f7f7 fe5b 	bl	8000adc <__aeabi_dcmplt>
 8008e26:	2800      	cmp	r0, #0
 8008e28:	d079      	beq.n	8008f1e <_dtoa_r+0x4de>
 8008e2a:	9b03      	ldr	r3, [sp, #12]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d076      	beq.n	8008f1e <_dtoa_r+0x4de>
 8008e30:	9b02      	ldr	r3, [sp, #8]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	dd36      	ble.n	8008ea4 <_dtoa_r+0x464>
 8008e36:	9b00      	ldr	r3, [sp, #0]
 8008e38:	4650      	mov	r0, sl
 8008e3a:	4659      	mov	r1, fp
 8008e3c:	1e5f      	subs	r7, r3, #1
 8008e3e:	2200      	movs	r2, #0
 8008e40:	4b88      	ldr	r3, [pc, #544]	; (8009064 <_dtoa_r+0x624>)
 8008e42:	f7f7 fbd9 	bl	80005f8 <__aeabi_dmul>
 8008e46:	9e02      	ldr	r6, [sp, #8]
 8008e48:	4682      	mov	sl, r0
 8008e4a:	468b      	mov	fp, r1
 8008e4c:	3501      	adds	r5, #1
 8008e4e:	4628      	mov	r0, r5
 8008e50:	f7f7 fb68 	bl	8000524 <__aeabi_i2d>
 8008e54:	4652      	mov	r2, sl
 8008e56:	465b      	mov	r3, fp
 8008e58:	f7f7 fbce 	bl	80005f8 <__aeabi_dmul>
 8008e5c:	4b82      	ldr	r3, [pc, #520]	; (8009068 <_dtoa_r+0x628>)
 8008e5e:	2200      	movs	r2, #0
 8008e60:	f7f7 fa14 	bl	800028c <__adddf3>
 8008e64:	46d0      	mov	r8, sl
 8008e66:	46d9      	mov	r9, fp
 8008e68:	4682      	mov	sl, r0
 8008e6a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008e6e:	2e00      	cmp	r6, #0
 8008e70:	d158      	bne.n	8008f24 <_dtoa_r+0x4e4>
 8008e72:	4b7e      	ldr	r3, [pc, #504]	; (800906c <_dtoa_r+0x62c>)
 8008e74:	2200      	movs	r2, #0
 8008e76:	4640      	mov	r0, r8
 8008e78:	4649      	mov	r1, r9
 8008e7a:	f7f7 fa05 	bl	8000288 <__aeabi_dsub>
 8008e7e:	4652      	mov	r2, sl
 8008e80:	465b      	mov	r3, fp
 8008e82:	4680      	mov	r8, r0
 8008e84:	4689      	mov	r9, r1
 8008e86:	f7f7 fe47 	bl	8000b18 <__aeabi_dcmpgt>
 8008e8a:	2800      	cmp	r0, #0
 8008e8c:	f040 8295 	bne.w	80093ba <_dtoa_r+0x97a>
 8008e90:	4652      	mov	r2, sl
 8008e92:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008e96:	4640      	mov	r0, r8
 8008e98:	4649      	mov	r1, r9
 8008e9a:	f7f7 fe1f 	bl	8000adc <__aeabi_dcmplt>
 8008e9e:	2800      	cmp	r0, #0
 8008ea0:	f040 8289 	bne.w	80093b6 <_dtoa_r+0x976>
 8008ea4:	ec5b ab19 	vmov	sl, fp, d9
 8008ea8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	f2c0 8148 	blt.w	8009140 <_dtoa_r+0x700>
 8008eb0:	9a00      	ldr	r2, [sp, #0]
 8008eb2:	2a0e      	cmp	r2, #14
 8008eb4:	f300 8144 	bgt.w	8009140 <_dtoa_r+0x700>
 8008eb8:	4b67      	ldr	r3, [pc, #412]	; (8009058 <_dtoa_r+0x618>)
 8008eba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ebe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	f280 80d5 	bge.w	8009074 <_dtoa_r+0x634>
 8008eca:	9b03      	ldr	r3, [sp, #12]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	f300 80d1 	bgt.w	8009074 <_dtoa_r+0x634>
 8008ed2:	f040 826f 	bne.w	80093b4 <_dtoa_r+0x974>
 8008ed6:	4b65      	ldr	r3, [pc, #404]	; (800906c <_dtoa_r+0x62c>)
 8008ed8:	2200      	movs	r2, #0
 8008eda:	4640      	mov	r0, r8
 8008edc:	4649      	mov	r1, r9
 8008ede:	f7f7 fb8b 	bl	80005f8 <__aeabi_dmul>
 8008ee2:	4652      	mov	r2, sl
 8008ee4:	465b      	mov	r3, fp
 8008ee6:	f7f7 fe0d 	bl	8000b04 <__aeabi_dcmpge>
 8008eea:	9e03      	ldr	r6, [sp, #12]
 8008eec:	4637      	mov	r7, r6
 8008eee:	2800      	cmp	r0, #0
 8008ef0:	f040 8245 	bne.w	800937e <_dtoa_r+0x93e>
 8008ef4:	9d01      	ldr	r5, [sp, #4]
 8008ef6:	2331      	movs	r3, #49	; 0x31
 8008ef8:	f805 3b01 	strb.w	r3, [r5], #1
 8008efc:	9b00      	ldr	r3, [sp, #0]
 8008efe:	3301      	adds	r3, #1
 8008f00:	9300      	str	r3, [sp, #0]
 8008f02:	e240      	b.n	8009386 <_dtoa_r+0x946>
 8008f04:	07f2      	lsls	r2, r6, #31
 8008f06:	d505      	bpl.n	8008f14 <_dtoa_r+0x4d4>
 8008f08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f0c:	f7f7 fb74 	bl	80005f8 <__aeabi_dmul>
 8008f10:	3501      	adds	r5, #1
 8008f12:	2301      	movs	r3, #1
 8008f14:	1076      	asrs	r6, r6, #1
 8008f16:	3708      	adds	r7, #8
 8008f18:	e777      	b.n	8008e0a <_dtoa_r+0x3ca>
 8008f1a:	2502      	movs	r5, #2
 8008f1c:	e779      	b.n	8008e12 <_dtoa_r+0x3d2>
 8008f1e:	9f00      	ldr	r7, [sp, #0]
 8008f20:	9e03      	ldr	r6, [sp, #12]
 8008f22:	e794      	b.n	8008e4e <_dtoa_r+0x40e>
 8008f24:	9901      	ldr	r1, [sp, #4]
 8008f26:	4b4c      	ldr	r3, [pc, #304]	; (8009058 <_dtoa_r+0x618>)
 8008f28:	4431      	add	r1, r6
 8008f2a:	910d      	str	r1, [sp, #52]	; 0x34
 8008f2c:	9908      	ldr	r1, [sp, #32]
 8008f2e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008f32:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008f36:	2900      	cmp	r1, #0
 8008f38:	d043      	beq.n	8008fc2 <_dtoa_r+0x582>
 8008f3a:	494d      	ldr	r1, [pc, #308]	; (8009070 <_dtoa_r+0x630>)
 8008f3c:	2000      	movs	r0, #0
 8008f3e:	f7f7 fc85 	bl	800084c <__aeabi_ddiv>
 8008f42:	4652      	mov	r2, sl
 8008f44:	465b      	mov	r3, fp
 8008f46:	f7f7 f99f 	bl	8000288 <__aeabi_dsub>
 8008f4a:	9d01      	ldr	r5, [sp, #4]
 8008f4c:	4682      	mov	sl, r0
 8008f4e:	468b      	mov	fp, r1
 8008f50:	4649      	mov	r1, r9
 8008f52:	4640      	mov	r0, r8
 8008f54:	f7f7 fe00 	bl	8000b58 <__aeabi_d2iz>
 8008f58:	4606      	mov	r6, r0
 8008f5a:	f7f7 fae3 	bl	8000524 <__aeabi_i2d>
 8008f5e:	4602      	mov	r2, r0
 8008f60:	460b      	mov	r3, r1
 8008f62:	4640      	mov	r0, r8
 8008f64:	4649      	mov	r1, r9
 8008f66:	f7f7 f98f 	bl	8000288 <__aeabi_dsub>
 8008f6a:	3630      	adds	r6, #48	; 0x30
 8008f6c:	f805 6b01 	strb.w	r6, [r5], #1
 8008f70:	4652      	mov	r2, sl
 8008f72:	465b      	mov	r3, fp
 8008f74:	4680      	mov	r8, r0
 8008f76:	4689      	mov	r9, r1
 8008f78:	f7f7 fdb0 	bl	8000adc <__aeabi_dcmplt>
 8008f7c:	2800      	cmp	r0, #0
 8008f7e:	d163      	bne.n	8009048 <_dtoa_r+0x608>
 8008f80:	4642      	mov	r2, r8
 8008f82:	464b      	mov	r3, r9
 8008f84:	4936      	ldr	r1, [pc, #216]	; (8009060 <_dtoa_r+0x620>)
 8008f86:	2000      	movs	r0, #0
 8008f88:	f7f7 f97e 	bl	8000288 <__aeabi_dsub>
 8008f8c:	4652      	mov	r2, sl
 8008f8e:	465b      	mov	r3, fp
 8008f90:	f7f7 fda4 	bl	8000adc <__aeabi_dcmplt>
 8008f94:	2800      	cmp	r0, #0
 8008f96:	f040 80b5 	bne.w	8009104 <_dtoa_r+0x6c4>
 8008f9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f9c:	429d      	cmp	r5, r3
 8008f9e:	d081      	beq.n	8008ea4 <_dtoa_r+0x464>
 8008fa0:	4b30      	ldr	r3, [pc, #192]	; (8009064 <_dtoa_r+0x624>)
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	4650      	mov	r0, sl
 8008fa6:	4659      	mov	r1, fp
 8008fa8:	f7f7 fb26 	bl	80005f8 <__aeabi_dmul>
 8008fac:	4b2d      	ldr	r3, [pc, #180]	; (8009064 <_dtoa_r+0x624>)
 8008fae:	4682      	mov	sl, r0
 8008fb0:	468b      	mov	fp, r1
 8008fb2:	4640      	mov	r0, r8
 8008fb4:	4649      	mov	r1, r9
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	f7f7 fb1e 	bl	80005f8 <__aeabi_dmul>
 8008fbc:	4680      	mov	r8, r0
 8008fbe:	4689      	mov	r9, r1
 8008fc0:	e7c6      	b.n	8008f50 <_dtoa_r+0x510>
 8008fc2:	4650      	mov	r0, sl
 8008fc4:	4659      	mov	r1, fp
 8008fc6:	f7f7 fb17 	bl	80005f8 <__aeabi_dmul>
 8008fca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fcc:	9d01      	ldr	r5, [sp, #4]
 8008fce:	930f      	str	r3, [sp, #60]	; 0x3c
 8008fd0:	4682      	mov	sl, r0
 8008fd2:	468b      	mov	fp, r1
 8008fd4:	4649      	mov	r1, r9
 8008fd6:	4640      	mov	r0, r8
 8008fd8:	f7f7 fdbe 	bl	8000b58 <__aeabi_d2iz>
 8008fdc:	4606      	mov	r6, r0
 8008fde:	f7f7 faa1 	bl	8000524 <__aeabi_i2d>
 8008fe2:	3630      	adds	r6, #48	; 0x30
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	460b      	mov	r3, r1
 8008fe8:	4640      	mov	r0, r8
 8008fea:	4649      	mov	r1, r9
 8008fec:	f7f7 f94c 	bl	8000288 <__aeabi_dsub>
 8008ff0:	f805 6b01 	strb.w	r6, [r5], #1
 8008ff4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ff6:	429d      	cmp	r5, r3
 8008ff8:	4680      	mov	r8, r0
 8008ffa:	4689      	mov	r9, r1
 8008ffc:	f04f 0200 	mov.w	r2, #0
 8009000:	d124      	bne.n	800904c <_dtoa_r+0x60c>
 8009002:	4b1b      	ldr	r3, [pc, #108]	; (8009070 <_dtoa_r+0x630>)
 8009004:	4650      	mov	r0, sl
 8009006:	4659      	mov	r1, fp
 8009008:	f7f7 f940 	bl	800028c <__adddf3>
 800900c:	4602      	mov	r2, r0
 800900e:	460b      	mov	r3, r1
 8009010:	4640      	mov	r0, r8
 8009012:	4649      	mov	r1, r9
 8009014:	f7f7 fd80 	bl	8000b18 <__aeabi_dcmpgt>
 8009018:	2800      	cmp	r0, #0
 800901a:	d173      	bne.n	8009104 <_dtoa_r+0x6c4>
 800901c:	4652      	mov	r2, sl
 800901e:	465b      	mov	r3, fp
 8009020:	4913      	ldr	r1, [pc, #76]	; (8009070 <_dtoa_r+0x630>)
 8009022:	2000      	movs	r0, #0
 8009024:	f7f7 f930 	bl	8000288 <__aeabi_dsub>
 8009028:	4602      	mov	r2, r0
 800902a:	460b      	mov	r3, r1
 800902c:	4640      	mov	r0, r8
 800902e:	4649      	mov	r1, r9
 8009030:	f7f7 fd54 	bl	8000adc <__aeabi_dcmplt>
 8009034:	2800      	cmp	r0, #0
 8009036:	f43f af35 	beq.w	8008ea4 <_dtoa_r+0x464>
 800903a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800903c:	1e6b      	subs	r3, r5, #1
 800903e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009040:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009044:	2b30      	cmp	r3, #48	; 0x30
 8009046:	d0f8      	beq.n	800903a <_dtoa_r+0x5fa>
 8009048:	9700      	str	r7, [sp, #0]
 800904a:	e049      	b.n	80090e0 <_dtoa_r+0x6a0>
 800904c:	4b05      	ldr	r3, [pc, #20]	; (8009064 <_dtoa_r+0x624>)
 800904e:	f7f7 fad3 	bl	80005f8 <__aeabi_dmul>
 8009052:	4680      	mov	r8, r0
 8009054:	4689      	mov	r9, r1
 8009056:	e7bd      	b.n	8008fd4 <_dtoa_r+0x594>
 8009058:	0800b030 	.word	0x0800b030
 800905c:	0800b008 	.word	0x0800b008
 8009060:	3ff00000 	.word	0x3ff00000
 8009064:	40240000 	.word	0x40240000
 8009068:	401c0000 	.word	0x401c0000
 800906c:	40140000 	.word	0x40140000
 8009070:	3fe00000 	.word	0x3fe00000
 8009074:	9d01      	ldr	r5, [sp, #4]
 8009076:	4656      	mov	r6, sl
 8009078:	465f      	mov	r7, fp
 800907a:	4642      	mov	r2, r8
 800907c:	464b      	mov	r3, r9
 800907e:	4630      	mov	r0, r6
 8009080:	4639      	mov	r1, r7
 8009082:	f7f7 fbe3 	bl	800084c <__aeabi_ddiv>
 8009086:	f7f7 fd67 	bl	8000b58 <__aeabi_d2iz>
 800908a:	4682      	mov	sl, r0
 800908c:	f7f7 fa4a 	bl	8000524 <__aeabi_i2d>
 8009090:	4642      	mov	r2, r8
 8009092:	464b      	mov	r3, r9
 8009094:	f7f7 fab0 	bl	80005f8 <__aeabi_dmul>
 8009098:	4602      	mov	r2, r0
 800909a:	460b      	mov	r3, r1
 800909c:	4630      	mov	r0, r6
 800909e:	4639      	mov	r1, r7
 80090a0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80090a4:	f7f7 f8f0 	bl	8000288 <__aeabi_dsub>
 80090a8:	f805 6b01 	strb.w	r6, [r5], #1
 80090ac:	9e01      	ldr	r6, [sp, #4]
 80090ae:	9f03      	ldr	r7, [sp, #12]
 80090b0:	1bae      	subs	r6, r5, r6
 80090b2:	42b7      	cmp	r7, r6
 80090b4:	4602      	mov	r2, r0
 80090b6:	460b      	mov	r3, r1
 80090b8:	d135      	bne.n	8009126 <_dtoa_r+0x6e6>
 80090ba:	f7f7 f8e7 	bl	800028c <__adddf3>
 80090be:	4642      	mov	r2, r8
 80090c0:	464b      	mov	r3, r9
 80090c2:	4606      	mov	r6, r0
 80090c4:	460f      	mov	r7, r1
 80090c6:	f7f7 fd27 	bl	8000b18 <__aeabi_dcmpgt>
 80090ca:	b9d0      	cbnz	r0, 8009102 <_dtoa_r+0x6c2>
 80090cc:	4642      	mov	r2, r8
 80090ce:	464b      	mov	r3, r9
 80090d0:	4630      	mov	r0, r6
 80090d2:	4639      	mov	r1, r7
 80090d4:	f7f7 fcf8 	bl	8000ac8 <__aeabi_dcmpeq>
 80090d8:	b110      	cbz	r0, 80090e0 <_dtoa_r+0x6a0>
 80090da:	f01a 0f01 	tst.w	sl, #1
 80090de:	d110      	bne.n	8009102 <_dtoa_r+0x6c2>
 80090e0:	4620      	mov	r0, r4
 80090e2:	ee18 1a10 	vmov	r1, s16
 80090e6:	f000 faf3 	bl	80096d0 <_Bfree>
 80090ea:	2300      	movs	r3, #0
 80090ec:	9800      	ldr	r0, [sp, #0]
 80090ee:	702b      	strb	r3, [r5, #0]
 80090f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090f2:	3001      	adds	r0, #1
 80090f4:	6018      	str	r0, [r3, #0]
 80090f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	f43f acf1 	beq.w	8008ae0 <_dtoa_r+0xa0>
 80090fe:	601d      	str	r5, [r3, #0]
 8009100:	e4ee      	b.n	8008ae0 <_dtoa_r+0xa0>
 8009102:	9f00      	ldr	r7, [sp, #0]
 8009104:	462b      	mov	r3, r5
 8009106:	461d      	mov	r5, r3
 8009108:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800910c:	2a39      	cmp	r2, #57	; 0x39
 800910e:	d106      	bne.n	800911e <_dtoa_r+0x6de>
 8009110:	9a01      	ldr	r2, [sp, #4]
 8009112:	429a      	cmp	r2, r3
 8009114:	d1f7      	bne.n	8009106 <_dtoa_r+0x6c6>
 8009116:	9901      	ldr	r1, [sp, #4]
 8009118:	2230      	movs	r2, #48	; 0x30
 800911a:	3701      	adds	r7, #1
 800911c:	700a      	strb	r2, [r1, #0]
 800911e:	781a      	ldrb	r2, [r3, #0]
 8009120:	3201      	adds	r2, #1
 8009122:	701a      	strb	r2, [r3, #0]
 8009124:	e790      	b.n	8009048 <_dtoa_r+0x608>
 8009126:	4ba6      	ldr	r3, [pc, #664]	; (80093c0 <_dtoa_r+0x980>)
 8009128:	2200      	movs	r2, #0
 800912a:	f7f7 fa65 	bl	80005f8 <__aeabi_dmul>
 800912e:	2200      	movs	r2, #0
 8009130:	2300      	movs	r3, #0
 8009132:	4606      	mov	r6, r0
 8009134:	460f      	mov	r7, r1
 8009136:	f7f7 fcc7 	bl	8000ac8 <__aeabi_dcmpeq>
 800913a:	2800      	cmp	r0, #0
 800913c:	d09d      	beq.n	800907a <_dtoa_r+0x63a>
 800913e:	e7cf      	b.n	80090e0 <_dtoa_r+0x6a0>
 8009140:	9a08      	ldr	r2, [sp, #32]
 8009142:	2a00      	cmp	r2, #0
 8009144:	f000 80d7 	beq.w	80092f6 <_dtoa_r+0x8b6>
 8009148:	9a06      	ldr	r2, [sp, #24]
 800914a:	2a01      	cmp	r2, #1
 800914c:	f300 80ba 	bgt.w	80092c4 <_dtoa_r+0x884>
 8009150:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009152:	2a00      	cmp	r2, #0
 8009154:	f000 80b2 	beq.w	80092bc <_dtoa_r+0x87c>
 8009158:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800915c:	9e07      	ldr	r6, [sp, #28]
 800915e:	9d04      	ldr	r5, [sp, #16]
 8009160:	9a04      	ldr	r2, [sp, #16]
 8009162:	441a      	add	r2, r3
 8009164:	9204      	str	r2, [sp, #16]
 8009166:	9a05      	ldr	r2, [sp, #20]
 8009168:	2101      	movs	r1, #1
 800916a:	441a      	add	r2, r3
 800916c:	4620      	mov	r0, r4
 800916e:	9205      	str	r2, [sp, #20]
 8009170:	f000 fb66 	bl	8009840 <__i2b>
 8009174:	4607      	mov	r7, r0
 8009176:	2d00      	cmp	r5, #0
 8009178:	dd0c      	ble.n	8009194 <_dtoa_r+0x754>
 800917a:	9b05      	ldr	r3, [sp, #20]
 800917c:	2b00      	cmp	r3, #0
 800917e:	dd09      	ble.n	8009194 <_dtoa_r+0x754>
 8009180:	42ab      	cmp	r3, r5
 8009182:	9a04      	ldr	r2, [sp, #16]
 8009184:	bfa8      	it	ge
 8009186:	462b      	movge	r3, r5
 8009188:	1ad2      	subs	r2, r2, r3
 800918a:	9204      	str	r2, [sp, #16]
 800918c:	9a05      	ldr	r2, [sp, #20]
 800918e:	1aed      	subs	r5, r5, r3
 8009190:	1ad3      	subs	r3, r2, r3
 8009192:	9305      	str	r3, [sp, #20]
 8009194:	9b07      	ldr	r3, [sp, #28]
 8009196:	b31b      	cbz	r3, 80091e0 <_dtoa_r+0x7a0>
 8009198:	9b08      	ldr	r3, [sp, #32]
 800919a:	2b00      	cmp	r3, #0
 800919c:	f000 80af 	beq.w	80092fe <_dtoa_r+0x8be>
 80091a0:	2e00      	cmp	r6, #0
 80091a2:	dd13      	ble.n	80091cc <_dtoa_r+0x78c>
 80091a4:	4639      	mov	r1, r7
 80091a6:	4632      	mov	r2, r6
 80091a8:	4620      	mov	r0, r4
 80091aa:	f000 fc09 	bl	80099c0 <__pow5mult>
 80091ae:	ee18 2a10 	vmov	r2, s16
 80091b2:	4601      	mov	r1, r0
 80091b4:	4607      	mov	r7, r0
 80091b6:	4620      	mov	r0, r4
 80091b8:	f000 fb58 	bl	800986c <__multiply>
 80091bc:	ee18 1a10 	vmov	r1, s16
 80091c0:	4680      	mov	r8, r0
 80091c2:	4620      	mov	r0, r4
 80091c4:	f000 fa84 	bl	80096d0 <_Bfree>
 80091c8:	ee08 8a10 	vmov	s16, r8
 80091cc:	9b07      	ldr	r3, [sp, #28]
 80091ce:	1b9a      	subs	r2, r3, r6
 80091d0:	d006      	beq.n	80091e0 <_dtoa_r+0x7a0>
 80091d2:	ee18 1a10 	vmov	r1, s16
 80091d6:	4620      	mov	r0, r4
 80091d8:	f000 fbf2 	bl	80099c0 <__pow5mult>
 80091dc:	ee08 0a10 	vmov	s16, r0
 80091e0:	2101      	movs	r1, #1
 80091e2:	4620      	mov	r0, r4
 80091e4:	f000 fb2c 	bl	8009840 <__i2b>
 80091e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	4606      	mov	r6, r0
 80091ee:	f340 8088 	ble.w	8009302 <_dtoa_r+0x8c2>
 80091f2:	461a      	mov	r2, r3
 80091f4:	4601      	mov	r1, r0
 80091f6:	4620      	mov	r0, r4
 80091f8:	f000 fbe2 	bl	80099c0 <__pow5mult>
 80091fc:	9b06      	ldr	r3, [sp, #24]
 80091fe:	2b01      	cmp	r3, #1
 8009200:	4606      	mov	r6, r0
 8009202:	f340 8081 	ble.w	8009308 <_dtoa_r+0x8c8>
 8009206:	f04f 0800 	mov.w	r8, #0
 800920a:	6933      	ldr	r3, [r6, #16]
 800920c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009210:	6918      	ldr	r0, [r3, #16]
 8009212:	f000 fac5 	bl	80097a0 <__hi0bits>
 8009216:	f1c0 0020 	rsb	r0, r0, #32
 800921a:	9b05      	ldr	r3, [sp, #20]
 800921c:	4418      	add	r0, r3
 800921e:	f010 001f 	ands.w	r0, r0, #31
 8009222:	f000 8092 	beq.w	800934a <_dtoa_r+0x90a>
 8009226:	f1c0 0320 	rsb	r3, r0, #32
 800922a:	2b04      	cmp	r3, #4
 800922c:	f340 808a 	ble.w	8009344 <_dtoa_r+0x904>
 8009230:	f1c0 001c 	rsb	r0, r0, #28
 8009234:	9b04      	ldr	r3, [sp, #16]
 8009236:	4403      	add	r3, r0
 8009238:	9304      	str	r3, [sp, #16]
 800923a:	9b05      	ldr	r3, [sp, #20]
 800923c:	4403      	add	r3, r0
 800923e:	4405      	add	r5, r0
 8009240:	9305      	str	r3, [sp, #20]
 8009242:	9b04      	ldr	r3, [sp, #16]
 8009244:	2b00      	cmp	r3, #0
 8009246:	dd07      	ble.n	8009258 <_dtoa_r+0x818>
 8009248:	ee18 1a10 	vmov	r1, s16
 800924c:	461a      	mov	r2, r3
 800924e:	4620      	mov	r0, r4
 8009250:	f000 fc10 	bl	8009a74 <__lshift>
 8009254:	ee08 0a10 	vmov	s16, r0
 8009258:	9b05      	ldr	r3, [sp, #20]
 800925a:	2b00      	cmp	r3, #0
 800925c:	dd05      	ble.n	800926a <_dtoa_r+0x82a>
 800925e:	4631      	mov	r1, r6
 8009260:	461a      	mov	r2, r3
 8009262:	4620      	mov	r0, r4
 8009264:	f000 fc06 	bl	8009a74 <__lshift>
 8009268:	4606      	mov	r6, r0
 800926a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800926c:	2b00      	cmp	r3, #0
 800926e:	d06e      	beq.n	800934e <_dtoa_r+0x90e>
 8009270:	ee18 0a10 	vmov	r0, s16
 8009274:	4631      	mov	r1, r6
 8009276:	f000 fc6d 	bl	8009b54 <__mcmp>
 800927a:	2800      	cmp	r0, #0
 800927c:	da67      	bge.n	800934e <_dtoa_r+0x90e>
 800927e:	9b00      	ldr	r3, [sp, #0]
 8009280:	3b01      	subs	r3, #1
 8009282:	ee18 1a10 	vmov	r1, s16
 8009286:	9300      	str	r3, [sp, #0]
 8009288:	220a      	movs	r2, #10
 800928a:	2300      	movs	r3, #0
 800928c:	4620      	mov	r0, r4
 800928e:	f000 fa41 	bl	8009714 <__multadd>
 8009292:	9b08      	ldr	r3, [sp, #32]
 8009294:	ee08 0a10 	vmov	s16, r0
 8009298:	2b00      	cmp	r3, #0
 800929a:	f000 81b1 	beq.w	8009600 <_dtoa_r+0xbc0>
 800929e:	2300      	movs	r3, #0
 80092a0:	4639      	mov	r1, r7
 80092a2:	220a      	movs	r2, #10
 80092a4:	4620      	mov	r0, r4
 80092a6:	f000 fa35 	bl	8009714 <__multadd>
 80092aa:	9b02      	ldr	r3, [sp, #8]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	4607      	mov	r7, r0
 80092b0:	f300 808e 	bgt.w	80093d0 <_dtoa_r+0x990>
 80092b4:	9b06      	ldr	r3, [sp, #24]
 80092b6:	2b02      	cmp	r3, #2
 80092b8:	dc51      	bgt.n	800935e <_dtoa_r+0x91e>
 80092ba:	e089      	b.n	80093d0 <_dtoa_r+0x990>
 80092bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80092be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80092c2:	e74b      	b.n	800915c <_dtoa_r+0x71c>
 80092c4:	9b03      	ldr	r3, [sp, #12]
 80092c6:	1e5e      	subs	r6, r3, #1
 80092c8:	9b07      	ldr	r3, [sp, #28]
 80092ca:	42b3      	cmp	r3, r6
 80092cc:	bfbf      	itttt	lt
 80092ce:	9b07      	ldrlt	r3, [sp, #28]
 80092d0:	9607      	strlt	r6, [sp, #28]
 80092d2:	1af2      	sublt	r2, r6, r3
 80092d4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80092d6:	bfb6      	itet	lt
 80092d8:	189b      	addlt	r3, r3, r2
 80092da:	1b9e      	subge	r6, r3, r6
 80092dc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80092de:	9b03      	ldr	r3, [sp, #12]
 80092e0:	bfb8      	it	lt
 80092e2:	2600      	movlt	r6, #0
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	bfb7      	itett	lt
 80092e8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80092ec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80092f0:	1a9d      	sublt	r5, r3, r2
 80092f2:	2300      	movlt	r3, #0
 80092f4:	e734      	b.n	8009160 <_dtoa_r+0x720>
 80092f6:	9e07      	ldr	r6, [sp, #28]
 80092f8:	9d04      	ldr	r5, [sp, #16]
 80092fa:	9f08      	ldr	r7, [sp, #32]
 80092fc:	e73b      	b.n	8009176 <_dtoa_r+0x736>
 80092fe:	9a07      	ldr	r2, [sp, #28]
 8009300:	e767      	b.n	80091d2 <_dtoa_r+0x792>
 8009302:	9b06      	ldr	r3, [sp, #24]
 8009304:	2b01      	cmp	r3, #1
 8009306:	dc18      	bgt.n	800933a <_dtoa_r+0x8fa>
 8009308:	f1ba 0f00 	cmp.w	sl, #0
 800930c:	d115      	bne.n	800933a <_dtoa_r+0x8fa>
 800930e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009312:	b993      	cbnz	r3, 800933a <_dtoa_r+0x8fa>
 8009314:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009318:	0d1b      	lsrs	r3, r3, #20
 800931a:	051b      	lsls	r3, r3, #20
 800931c:	b183      	cbz	r3, 8009340 <_dtoa_r+0x900>
 800931e:	9b04      	ldr	r3, [sp, #16]
 8009320:	3301      	adds	r3, #1
 8009322:	9304      	str	r3, [sp, #16]
 8009324:	9b05      	ldr	r3, [sp, #20]
 8009326:	3301      	adds	r3, #1
 8009328:	9305      	str	r3, [sp, #20]
 800932a:	f04f 0801 	mov.w	r8, #1
 800932e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009330:	2b00      	cmp	r3, #0
 8009332:	f47f af6a 	bne.w	800920a <_dtoa_r+0x7ca>
 8009336:	2001      	movs	r0, #1
 8009338:	e76f      	b.n	800921a <_dtoa_r+0x7da>
 800933a:	f04f 0800 	mov.w	r8, #0
 800933e:	e7f6      	b.n	800932e <_dtoa_r+0x8ee>
 8009340:	4698      	mov	r8, r3
 8009342:	e7f4      	b.n	800932e <_dtoa_r+0x8ee>
 8009344:	f43f af7d 	beq.w	8009242 <_dtoa_r+0x802>
 8009348:	4618      	mov	r0, r3
 800934a:	301c      	adds	r0, #28
 800934c:	e772      	b.n	8009234 <_dtoa_r+0x7f4>
 800934e:	9b03      	ldr	r3, [sp, #12]
 8009350:	2b00      	cmp	r3, #0
 8009352:	dc37      	bgt.n	80093c4 <_dtoa_r+0x984>
 8009354:	9b06      	ldr	r3, [sp, #24]
 8009356:	2b02      	cmp	r3, #2
 8009358:	dd34      	ble.n	80093c4 <_dtoa_r+0x984>
 800935a:	9b03      	ldr	r3, [sp, #12]
 800935c:	9302      	str	r3, [sp, #8]
 800935e:	9b02      	ldr	r3, [sp, #8]
 8009360:	b96b      	cbnz	r3, 800937e <_dtoa_r+0x93e>
 8009362:	4631      	mov	r1, r6
 8009364:	2205      	movs	r2, #5
 8009366:	4620      	mov	r0, r4
 8009368:	f000 f9d4 	bl	8009714 <__multadd>
 800936c:	4601      	mov	r1, r0
 800936e:	4606      	mov	r6, r0
 8009370:	ee18 0a10 	vmov	r0, s16
 8009374:	f000 fbee 	bl	8009b54 <__mcmp>
 8009378:	2800      	cmp	r0, #0
 800937a:	f73f adbb 	bgt.w	8008ef4 <_dtoa_r+0x4b4>
 800937e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009380:	9d01      	ldr	r5, [sp, #4]
 8009382:	43db      	mvns	r3, r3
 8009384:	9300      	str	r3, [sp, #0]
 8009386:	f04f 0800 	mov.w	r8, #0
 800938a:	4631      	mov	r1, r6
 800938c:	4620      	mov	r0, r4
 800938e:	f000 f99f 	bl	80096d0 <_Bfree>
 8009392:	2f00      	cmp	r7, #0
 8009394:	f43f aea4 	beq.w	80090e0 <_dtoa_r+0x6a0>
 8009398:	f1b8 0f00 	cmp.w	r8, #0
 800939c:	d005      	beq.n	80093aa <_dtoa_r+0x96a>
 800939e:	45b8      	cmp	r8, r7
 80093a0:	d003      	beq.n	80093aa <_dtoa_r+0x96a>
 80093a2:	4641      	mov	r1, r8
 80093a4:	4620      	mov	r0, r4
 80093a6:	f000 f993 	bl	80096d0 <_Bfree>
 80093aa:	4639      	mov	r1, r7
 80093ac:	4620      	mov	r0, r4
 80093ae:	f000 f98f 	bl	80096d0 <_Bfree>
 80093b2:	e695      	b.n	80090e0 <_dtoa_r+0x6a0>
 80093b4:	2600      	movs	r6, #0
 80093b6:	4637      	mov	r7, r6
 80093b8:	e7e1      	b.n	800937e <_dtoa_r+0x93e>
 80093ba:	9700      	str	r7, [sp, #0]
 80093bc:	4637      	mov	r7, r6
 80093be:	e599      	b.n	8008ef4 <_dtoa_r+0x4b4>
 80093c0:	40240000 	.word	0x40240000
 80093c4:	9b08      	ldr	r3, [sp, #32]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	f000 80ca 	beq.w	8009560 <_dtoa_r+0xb20>
 80093cc:	9b03      	ldr	r3, [sp, #12]
 80093ce:	9302      	str	r3, [sp, #8]
 80093d0:	2d00      	cmp	r5, #0
 80093d2:	dd05      	ble.n	80093e0 <_dtoa_r+0x9a0>
 80093d4:	4639      	mov	r1, r7
 80093d6:	462a      	mov	r2, r5
 80093d8:	4620      	mov	r0, r4
 80093da:	f000 fb4b 	bl	8009a74 <__lshift>
 80093de:	4607      	mov	r7, r0
 80093e0:	f1b8 0f00 	cmp.w	r8, #0
 80093e4:	d05b      	beq.n	800949e <_dtoa_r+0xa5e>
 80093e6:	6879      	ldr	r1, [r7, #4]
 80093e8:	4620      	mov	r0, r4
 80093ea:	f000 f931 	bl	8009650 <_Balloc>
 80093ee:	4605      	mov	r5, r0
 80093f0:	b928      	cbnz	r0, 80093fe <_dtoa_r+0x9be>
 80093f2:	4b87      	ldr	r3, [pc, #540]	; (8009610 <_dtoa_r+0xbd0>)
 80093f4:	4602      	mov	r2, r0
 80093f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80093fa:	f7ff bb3b 	b.w	8008a74 <_dtoa_r+0x34>
 80093fe:	693a      	ldr	r2, [r7, #16]
 8009400:	3202      	adds	r2, #2
 8009402:	0092      	lsls	r2, r2, #2
 8009404:	f107 010c 	add.w	r1, r7, #12
 8009408:	300c      	adds	r0, #12
 800940a:	f000 f913 	bl	8009634 <memcpy>
 800940e:	2201      	movs	r2, #1
 8009410:	4629      	mov	r1, r5
 8009412:	4620      	mov	r0, r4
 8009414:	f000 fb2e 	bl	8009a74 <__lshift>
 8009418:	9b01      	ldr	r3, [sp, #4]
 800941a:	f103 0901 	add.w	r9, r3, #1
 800941e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009422:	4413      	add	r3, r2
 8009424:	9305      	str	r3, [sp, #20]
 8009426:	f00a 0301 	and.w	r3, sl, #1
 800942a:	46b8      	mov	r8, r7
 800942c:	9304      	str	r3, [sp, #16]
 800942e:	4607      	mov	r7, r0
 8009430:	4631      	mov	r1, r6
 8009432:	ee18 0a10 	vmov	r0, s16
 8009436:	f7ff fa75 	bl	8008924 <quorem>
 800943a:	4641      	mov	r1, r8
 800943c:	9002      	str	r0, [sp, #8]
 800943e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009442:	ee18 0a10 	vmov	r0, s16
 8009446:	f000 fb85 	bl	8009b54 <__mcmp>
 800944a:	463a      	mov	r2, r7
 800944c:	9003      	str	r0, [sp, #12]
 800944e:	4631      	mov	r1, r6
 8009450:	4620      	mov	r0, r4
 8009452:	f000 fb9b 	bl	8009b8c <__mdiff>
 8009456:	68c2      	ldr	r2, [r0, #12]
 8009458:	f109 3bff 	add.w	fp, r9, #4294967295
 800945c:	4605      	mov	r5, r0
 800945e:	bb02      	cbnz	r2, 80094a2 <_dtoa_r+0xa62>
 8009460:	4601      	mov	r1, r0
 8009462:	ee18 0a10 	vmov	r0, s16
 8009466:	f000 fb75 	bl	8009b54 <__mcmp>
 800946a:	4602      	mov	r2, r0
 800946c:	4629      	mov	r1, r5
 800946e:	4620      	mov	r0, r4
 8009470:	9207      	str	r2, [sp, #28]
 8009472:	f000 f92d 	bl	80096d0 <_Bfree>
 8009476:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800947a:	ea43 0102 	orr.w	r1, r3, r2
 800947e:	9b04      	ldr	r3, [sp, #16]
 8009480:	430b      	orrs	r3, r1
 8009482:	464d      	mov	r5, r9
 8009484:	d10f      	bne.n	80094a6 <_dtoa_r+0xa66>
 8009486:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800948a:	d02a      	beq.n	80094e2 <_dtoa_r+0xaa2>
 800948c:	9b03      	ldr	r3, [sp, #12]
 800948e:	2b00      	cmp	r3, #0
 8009490:	dd02      	ble.n	8009498 <_dtoa_r+0xa58>
 8009492:	9b02      	ldr	r3, [sp, #8]
 8009494:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009498:	f88b a000 	strb.w	sl, [fp]
 800949c:	e775      	b.n	800938a <_dtoa_r+0x94a>
 800949e:	4638      	mov	r0, r7
 80094a0:	e7ba      	b.n	8009418 <_dtoa_r+0x9d8>
 80094a2:	2201      	movs	r2, #1
 80094a4:	e7e2      	b.n	800946c <_dtoa_r+0xa2c>
 80094a6:	9b03      	ldr	r3, [sp, #12]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	db04      	blt.n	80094b6 <_dtoa_r+0xa76>
 80094ac:	9906      	ldr	r1, [sp, #24]
 80094ae:	430b      	orrs	r3, r1
 80094b0:	9904      	ldr	r1, [sp, #16]
 80094b2:	430b      	orrs	r3, r1
 80094b4:	d122      	bne.n	80094fc <_dtoa_r+0xabc>
 80094b6:	2a00      	cmp	r2, #0
 80094b8:	ddee      	ble.n	8009498 <_dtoa_r+0xa58>
 80094ba:	ee18 1a10 	vmov	r1, s16
 80094be:	2201      	movs	r2, #1
 80094c0:	4620      	mov	r0, r4
 80094c2:	f000 fad7 	bl	8009a74 <__lshift>
 80094c6:	4631      	mov	r1, r6
 80094c8:	ee08 0a10 	vmov	s16, r0
 80094cc:	f000 fb42 	bl	8009b54 <__mcmp>
 80094d0:	2800      	cmp	r0, #0
 80094d2:	dc03      	bgt.n	80094dc <_dtoa_r+0xa9c>
 80094d4:	d1e0      	bne.n	8009498 <_dtoa_r+0xa58>
 80094d6:	f01a 0f01 	tst.w	sl, #1
 80094da:	d0dd      	beq.n	8009498 <_dtoa_r+0xa58>
 80094dc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80094e0:	d1d7      	bne.n	8009492 <_dtoa_r+0xa52>
 80094e2:	2339      	movs	r3, #57	; 0x39
 80094e4:	f88b 3000 	strb.w	r3, [fp]
 80094e8:	462b      	mov	r3, r5
 80094ea:	461d      	mov	r5, r3
 80094ec:	3b01      	subs	r3, #1
 80094ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80094f2:	2a39      	cmp	r2, #57	; 0x39
 80094f4:	d071      	beq.n	80095da <_dtoa_r+0xb9a>
 80094f6:	3201      	adds	r2, #1
 80094f8:	701a      	strb	r2, [r3, #0]
 80094fa:	e746      	b.n	800938a <_dtoa_r+0x94a>
 80094fc:	2a00      	cmp	r2, #0
 80094fe:	dd07      	ble.n	8009510 <_dtoa_r+0xad0>
 8009500:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009504:	d0ed      	beq.n	80094e2 <_dtoa_r+0xaa2>
 8009506:	f10a 0301 	add.w	r3, sl, #1
 800950a:	f88b 3000 	strb.w	r3, [fp]
 800950e:	e73c      	b.n	800938a <_dtoa_r+0x94a>
 8009510:	9b05      	ldr	r3, [sp, #20]
 8009512:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009516:	4599      	cmp	r9, r3
 8009518:	d047      	beq.n	80095aa <_dtoa_r+0xb6a>
 800951a:	ee18 1a10 	vmov	r1, s16
 800951e:	2300      	movs	r3, #0
 8009520:	220a      	movs	r2, #10
 8009522:	4620      	mov	r0, r4
 8009524:	f000 f8f6 	bl	8009714 <__multadd>
 8009528:	45b8      	cmp	r8, r7
 800952a:	ee08 0a10 	vmov	s16, r0
 800952e:	f04f 0300 	mov.w	r3, #0
 8009532:	f04f 020a 	mov.w	r2, #10
 8009536:	4641      	mov	r1, r8
 8009538:	4620      	mov	r0, r4
 800953a:	d106      	bne.n	800954a <_dtoa_r+0xb0a>
 800953c:	f000 f8ea 	bl	8009714 <__multadd>
 8009540:	4680      	mov	r8, r0
 8009542:	4607      	mov	r7, r0
 8009544:	f109 0901 	add.w	r9, r9, #1
 8009548:	e772      	b.n	8009430 <_dtoa_r+0x9f0>
 800954a:	f000 f8e3 	bl	8009714 <__multadd>
 800954e:	4639      	mov	r1, r7
 8009550:	4680      	mov	r8, r0
 8009552:	2300      	movs	r3, #0
 8009554:	220a      	movs	r2, #10
 8009556:	4620      	mov	r0, r4
 8009558:	f000 f8dc 	bl	8009714 <__multadd>
 800955c:	4607      	mov	r7, r0
 800955e:	e7f1      	b.n	8009544 <_dtoa_r+0xb04>
 8009560:	9b03      	ldr	r3, [sp, #12]
 8009562:	9302      	str	r3, [sp, #8]
 8009564:	9d01      	ldr	r5, [sp, #4]
 8009566:	ee18 0a10 	vmov	r0, s16
 800956a:	4631      	mov	r1, r6
 800956c:	f7ff f9da 	bl	8008924 <quorem>
 8009570:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009574:	9b01      	ldr	r3, [sp, #4]
 8009576:	f805 ab01 	strb.w	sl, [r5], #1
 800957a:	1aea      	subs	r2, r5, r3
 800957c:	9b02      	ldr	r3, [sp, #8]
 800957e:	4293      	cmp	r3, r2
 8009580:	dd09      	ble.n	8009596 <_dtoa_r+0xb56>
 8009582:	ee18 1a10 	vmov	r1, s16
 8009586:	2300      	movs	r3, #0
 8009588:	220a      	movs	r2, #10
 800958a:	4620      	mov	r0, r4
 800958c:	f000 f8c2 	bl	8009714 <__multadd>
 8009590:	ee08 0a10 	vmov	s16, r0
 8009594:	e7e7      	b.n	8009566 <_dtoa_r+0xb26>
 8009596:	9b02      	ldr	r3, [sp, #8]
 8009598:	2b00      	cmp	r3, #0
 800959a:	bfc8      	it	gt
 800959c:	461d      	movgt	r5, r3
 800959e:	9b01      	ldr	r3, [sp, #4]
 80095a0:	bfd8      	it	le
 80095a2:	2501      	movle	r5, #1
 80095a4:	441d      	add	r5, r3
 80095a6:	f04f 0800 	mov.w	r8, #0
 80095aa:	ee18 1a10 	vmov	r1, s16
 80095ae:	2201      	movs	r2, #1
 80095b0:	4620      	mov	r0, r4
 80095b2:	f000 fa5f 	bl	8009a74 <__lshift>
 80095b6:	4631      	mov	r1, r6
 80095b8:	ee08 0a10 	vmov	s16, r0
 80095bc:	f000 faca 	bl	8009b54 <__mcmp>
 80095c0:	2800      	cmp	r0, #0
 80095c2:	dc91      	bgt.n	80094e8 <_dtoa_r+0xaa8>
 80095c4:	d102      	bne.n	80095cc <_dtoa_r+0xb8c>
 80095c6:	f01a 0f01 	tst.w	sl, #1
 80095ca:	d18d      	bne.n	80094e8 <_dtoa_r+0xaa8>
 80095cc:	462b      	mov	r3, r5
 80095ce:	461d      	mov	r5, r3
 80095d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80095d4:	2a30      	cmp	r2, #48	; 0x30
 80095d6:	d0fa      	beq.n	80095ce <_dtoa_r+0xb8e>
 80095d8:	e6d7      	b.n	800938a <_dtoa_r+0x94a>
 80095da:	9a01      	ldr	r2, [sp, #4]
 80095dc:	429a      	cmp	r2, r3
 80095de:	d184      	bne.n	80094ea <_dtoa_r+0xaaa>
 80095e0:	9b00      	ldr	r3, [sp, #0]
 80095e2:	3301      	adds	r3, #1
 80095e4:	9300      	str	r3, [sp, #0]
 80095e6:	2331      	movs	r3, #49	; 0x31
 80095e8:	7013      	strb	r3, [r2, #0]
 80095ea:	e6ce      	b.n	800938a <_dtoa_r+0x94a>
 80095ec:	4b09      	ldr	r3, [pc, #36]	; (8009614 <_dtoa_r+0xbd4>)
 80095ee:	f7ff ba95 	b.w	8008b1c <_dtoa_r+0xdc>
 80095f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	f47f aa6e 	bne.w	8008ad6 <_dtoa_r+0x96>
 80095fa:	4b07      	ldr	r3, [pc, #28]	; (8009618 <_dtoa_r+0xbd8>)
 80095fc:	f7ff ba8e 	b.w	8008b1c <_dtoa_r+0xdc>
 8009600:	9b02      	ldr	r3, [sp, #8]
 8009602:	2b00      	cmp	r3, #0
 8009604:	dcae      	bgt.n	8009564 <_dtoa_r+0xb24>
 8009606:	9b06      	ldr	r3, [sp, #24]
 8009608:	2b02      	cmp	r3, #2
 800960a:	f73f aea8 	bgt.w	800935e <_dtoa_r+0x91e>
 800960e:	e7a9      	b.n	8009564 <_dtoa_r+0xb24>
 8009610:	0800af97 	.word	0x0800af97
 8009614:	0800aef4 	.word	0x0800aef4
 8009618:	0800af18 	.word	0x0800af18

0800961c <_localeconv_r>:
 800961c:	4800      	ldr	r0, [pc, #0]	; (8009620 <_localeconv_r+0x4>)
 800961e:	4770      	bx	lr
 8009620:	20000160 	.word	0x20000160

08009624 <malloc>:
 8009624:	4b02      	ldr	r3, [pc, #8]	; (8009630 <malloc+0xc>)
 8009626:	4601      	mov	r1, r0
 8009628:	6818      	ldr	r0, [r3, #0]
 800962a:	f000 bc17 	b.w	8009e5c <_malloc_r>
 800962e:	bf00      	nop
 8009630:	2000000c 	.word	0x2000000c

08009634 <memcpy>:
 8009634:	440a      	add	r2, r1
 8009636:	4291      	cmp	r1, r2
 8009638:	f100 33ff 	add.w	r3, r0, #4294967295
 800963c:	d100      	bne.n	8009640 <memcpy+0xc>
 800963e:	4770      	bx	lr
 8009640:	b510      	push	{r4, lr}
 8009642:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009646:	f803 4f01 	strb.w	r4, [r3, #1]!
 800964a:	4291      	cmp	r1, r2
 800964c:	d1f9      	bne.n	8009642 <memcpy+0xe>
 800964e:	bd10      	pop	{r4, pc}

08009650 <_Balloc>:
 8009650:	b570      	push	{r4, r5, r6, lr}
 8009652:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009654:	4604      	mov	r4, r0
 8009656:	460d      	mov	r5, r1
 8009658:	b976      	cbnz	r6, 8009678 <_Balloc+0x28>
 800965a:	2010      	movs	r0, #16
 800965c:	f7ff ffe2 	bl	8009624 <malloc>
 8009660:	4602      	mov	r2, r0
 8009662:	6260      	str	r0, [r4, #36]	; 0x24
 8009664:	b920      	cbnz	r0, 8009670 <_Balloc+0x20>
 8009666:	4b18      	ldr	r3, [pc, #96]	; (80096c8 <_Balloc+0x78>)
 8009668:	4818      	ldr	r0, [pc, #96]	; (80096cc <_Balloc+0x7c>)
 800966a:	2166      	movs	r1, #102	; 0x66
 800966c:	f000 fdd6 	bl	800a21c <__assert_func>
 8009670:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009674:	6006      	str	r6, [r0, #0]
 8009676:	60c6      	str	r6, [r0, #12]
 8009678:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800967a:	68f3      	ldr	r3, [r6, #12]
 800967c:	b183      	cbz	r3, 80096a0 <_Balloc+0x50>
 800967e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009680:	68db      	ldr	r3, [r3, #12]
 8009682:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009686:	b9b8      	cbnz	r0, 80096b8 <_Balloc+0x68>
 8009688:	2101      	movs	r1, #1
 800968a:	fa01 f605 	lsl.w	r6, r1, r5
 800968e:	1d72      	adds	r2, r6, #5
 8009690:	0092      	lsls	r2, r2, #2
 8009692:	4620      	mov	r0, r4
 8009694:	f000 fb60 	bl	8009d58 <_calloc_r>
 8009698:	b160      	cbz	r0, 80096b4 <_Balloc+0x64>
 800969a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800969e:	e00e      	b.n	80096be <_Balloc+0x6e>
 80096a0:	2221      	movs	r2, #33	; 0x21
 80096a2:	2104      	movs	r1, #4
 80096a4:	4620      	mov	r0, r4
 80096a6:	f000 fb57 	bl	8009d58 <_calloc_r>
 80096aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096ac:	60f0      	str	r0, [r6, #12]
 80096ae:	68db      	ldr	r3, [r3, #12]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d1e4      	bne.n	800967e <_Balloc+0x2e>
 80096b4:	2000      	movs	r0, #0
 80096b6:	bd70      	pop	{r4, r5, r6, pc}
 80096b8:	6802      	ldr	r2, [r0, #0]
 80096ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80096be:	2300      	movs	r3, #0
 80096c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80096c4:	e7f7      	b.n	80096b6 <_Balloc+0x66>
 80096c6:	bf00      	nop
 80096c8:	0800af25 	.word	0x0800af25
 80096cc:	0800afa8 	.word	0x0800afa8

080096d0 <_Bfree>:
 80096d0:	b570      	push	{r4, r5, r6, lr}
 80096d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80096d4:	4605      	mov	r5, r0
 80096d6:	460c      	mov	r4, r1
 80096d8:	b976      	cbnz	r6, 80096f8 <_Bfree+0x28>
 80096da:	2010      	movs	r0, #16
 80096dc:	f7ff ffa2 	bl	8009624 <malloc>
 80096e0:	4602      	mov	r2, r0
 80096e2:	6268      	str	r0, [r5, #36]	; 0x24
 80096e4:	b920      	cbnz	r0, 80096f0 <_Bfree+0x20>
 80096e6:	4b09      	ldr	r3, [pc, #36]	; (800970c <_Bfree+0x3c>)
 80096e8:	4809      	ldr	r0, [pc, #36]	; (8009710 <_Bfree+0x40>)
 80096ea:	218a      	movs	r1, #138	; 0x8a
 80096ec:	f000 fd96 	bl	800a21c <__assert_func>
 80096f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80096f4:	6006      	str	r6, [r0, #0]
 80096f6:	60c6      	str	r6, [r0, #12]
 80096f8:	b13c      	cbz	r4, 800970a <_Bfree+0x3a>
 80096fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80096fc:	6862      	ldr	r2, [r4, #4]
 80096fe:	68db      	ldr	r3, [r3, #12]
 8009700:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009704:	6021      	str	r1, [r4, #0]
 8009706:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800970a:	bd70      	pop	{r4, r5, r6, pc}
 800970c:	0800af25 	.word	0x0800af25
 8009710:	0800afa8 	.word	0x0800afa8

08009714 <__multadd>:
 8009714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009718:	690d      	ldr	r5, [r1, #16]
 800971a:	4607      	mov	r7, r0
 800971c:	460c      	mov	r4, r1
 800971e:	461e      	mov	r6, r3
 8009720:	f101 0c14 	add.w	ip, r1, #20
 8009724:	2000      	movs	r0, #0
 8009726:	f8dc 3000 	ldr.w	r3, [ip]
 800972a:	b299      	uxth	r1, r3
 800972c:	fb02 6101 	mla	r1, r2, r1, r6
 8009730:	0c1e      	lsrs	r6, r3, #16
 8009732:	0c0b      	lsrs	r3, r1, #16
 8009734:	fb02 3306 	mla	r3, r2, r6, r3
 8009738:	b289      	uxth	r1, r1
 800973a:	3001      	adds	r0, #1
 800973c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009740:	4285      	cmp	r5, r0
 8009742:	f84c 1b04 	str.w	r1, [ip], #4
 8009746:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800974a:	dcec      	bgt.n	8009726 <__multadd+0x12>
 800974c:	b30e      	cbz	r6, 8009792 <__multadd+0x7e>
 800974e:	68a3      	ldr	r3, [r4, #8]
 8009750:	42ab      	cmp	r3, r5
 8009752:	dc19      	bgt.n	8009788 <__multadd+0x74>
 8009754:	6861      	ldr	r1, [r4, #4]
 8009756:	4638      	mov	r0, r7
 8009758:	3101      	adds	r1, #1
 800975a:	f7ff ff79 	bl	8009650 <_Balloc>
 800975e:	4680      	mov	r8, r0
 8009760:	b928      	cbnz	r0, 800976e <__multadd+0x5a>
 8009762:	4602      	mov	r2, r0
 8009764:	4b0c      	ldr	r3, [pc, #48]	; (8009798 <__multadd+0x84>)
 8009766:	480d      	ldr	r0, [pc, #52]	; (800979c <__multadd+0x88>)
 8009768:	21b5      	movs	r1, #181	; 0xb5
 800976a:	f000 fd57 	bl	800a21c <__assert_func>
 800976e:	6922      	ldr	r2, [r4, #16]
 8009770:	3202      	adds	r2, #2
 8009772:	f104 010c 	add.w	r1, r4, #12
 8009776:	0092      	lsls	r2, r2, #2
 8009778:	300c      	adds	r0, #12
 800977a:	f7ff ff5b 	bl	8009634 <memcpy>
 800977e:	4621      	mov	r1, r4
 8009780:	4638      	mov	r0, r7
 8009782:	f7ff ffa5 	bl	80096d0 <_Bfree>
 8009786:	4644      	mov	r4, r8
 8009788:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800978c:	3501      	adds	r5, #1
 800978e:	615e      	str	r6, [r3, #20]
 8009790:	6125      	str	r5, [r4, #16]
 8009792:	4620      	mov	r0, r4
 8009794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009798:	0800af97 	.word	0x0800af97
 800979c:	0800afa8 	.word	0x0800afa8

080097a0 <__hi0bits>:
 80097a0:	0c03      	lsrs	r3, r0, #16
 80097a2:	041b      	lsls	r3, r3, #16
 80097a4:	b9d3      	cbnz	r3, 80097dc <__hi0bits+0x3c>
 80097a6:	0400      	lsls	r0, r0, #16
 80097a8:	2310      	movs	r3, #16
 80097aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80097ae:	bf04      	itt	eq
 80097b0:	0200      	lsleq	r0, r0, #8
 80097b2:	3308      	addeq	r3, #8
 80097b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80097b8:	bf04      	itt	eq
 80097ba:	0100      	lsleq	r0, r0, #4
 80097bc:	3304      	addeq	r3, #4
 80097be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80097c2:	bf04      	itt	eq
 80097c4:	0080      	lsleq	r0, r0, #2
 80097c6:	3302      	addeq	r3, #2
 80097c8:	2800      	cmp	r0, #0
 80097ca:	db05      	blt.n	80097d8 <__hi0bits+0x38>
 80097cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80097d0:	f103 0301 	add.w	r3, r3, #1
 80097d4:	bf08      	it	eq
 80097d6:	2320      	moveq	r3, #32
 80097d8:	4618      	mov	r0, r3
 80097da:	4770      	bx	lr
 80097dc:	2300      	movs	r3, #0
 80097de:	e7e4      	b.n	80097aa <__hi0bits+0xa>

080097e0 <__lo0bits>:
 80097e0:	6803      	ldr	r3, [r0, #0]
 80097e2:	f013 0207 	ands.w	r2, r3, #7
 80097e6:	4601      	mov	r1, r0
 80097e8:	d00b      	beq.n	8009802 <__lo0bits+0x22>
 80097ea:	07da      	lsls	r2, r3, #31
 80097ec:	d423      	bmi.n	8009836 <__lo0bits+0x56>
 80097ee:	0798      	lsls	r0, r3, #30
 80097f0:	bf49      	itett	mi
 80097f2:	085b      	lsrmi	r3, r3, #1
 80097f4:	089b      	lsrpl	r3, r3, #2
 80097f6:	2001      	movmi	r0, #1
 80097f8:	600b      	strmi	r3, [r1, #0]
 80097fa:	bf5c      	itt	pl
 80097fc:	600b      	strpl	r3, [r1, #0]
 80097fe:	2002      	movpl	r0, #2
 8009800:	4770      	bx	lr
 8009802:	b298      	uxth	r0, r3
 8009804:	b9a8      	cbnz	r0, 8009832 <__lo0bits+0x52>
 8009806:	0c1b      	lsrs	r3, r3, #16
 8009808:	2010      	movs	r0, #16
 800980a:	b2da      	uxtb	r2, r3
 800980c:	b90a      	cbnz	r2, 8009812 <__lo0bits+0x32>
 800980e:	3008      	adds	r0, #8
 8009810:	0a1b      	lsrs	r3, r3, #8
 8009812:	071a      	lsls	r2, r3, #28
 8009814:	bf04      	itt	eq
 8009816:	091b      	lsreq	r3, r3, #4
 8009818:	3004      	addeq	r0, #4
 800981a:	079a      	lsls	r2, r3, #30
 800981c:	bf04      	itt	eq
 800981e:	089b      	lsreq	r3, r3, #2
 8009820:	3002      	addeq	r0, #2
 8009822:	07da      	lsls	r2, r3, #31
 8009824:	d403      	bmi.n	800982e <__lo0bits+0x4e>
 8009826:	085b      	lsrs	r3, r3, #1
 8009828:	f100 0001 	add.w	r0, r0, #1
 800982c:	d005      	beq.n	800983a <__lo0bits+0x5a>
 800982e:	600b      	str	r3, [r1, #0]
 8009830:	4770      	bx	lr
 8009832:	4610      	mov	r0, r2
 8009834:	e7e9      	b.n	800980a <__lo0bits+0x2a>
 8009836:	2000      	movs	r0, #0
 8009838:	4770      	bx	lr
 800983a:	2020      	movs	r0, #32
 800983c:	4770      	bx	lr
	...

08009840 <__i2b>:
 8009840:	b510      	push	{r4, lr}
 8009842:	460c      	mov	r4, r1
 8009844:	2101      	movs	r1, #1
 8009846:	f7ff ff03 	bl	8009650 <_Balloc>
 800984a:	4602      	mov	r2, r0
 800984c:	b928      	cbnz	r0, 800985a <__i2b+0x1a>
 800984e:	4b05      	ldr	r3, [pc, #20]	; (8009864 <__i2b+0x24>)
 8009850:	4805      	ldr	r0, [pc, #20]	; (8009868 <__i2b+0x28>)
 8009852:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009856:	f000 fce1 	bl	800a21c <__assert_func>
 800985a:	2301      	movs	r3, #1
 800985c:	6144      	str	r4, [r0, #20]
 800985e:	6103      	str	r3, [r0, #16]
 8009860:	bd10      	pop	{r4, pc}
 8009862:	bf00      	nop
 8009864:	0800af97 	.word	0x0800af97
 8009868:	0800afa8 	.word	0x0800afa8

0800986c <__multiply>:
 800986c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009870:	4691      	mov	r9, r2
 8009872:	690a      	ldr	r2, [r1, #16]
 8009874:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009878:	429a      	cmp	r2, r3
 800987a:	bfb8      	it	lt
 800987c:	460b      	movlt	r3, r1
 800987e:	460c      	mov	r4, r1
 8009880:	bfbc      	itt	lt
 8009882:	464c      	movlt	r4, r9
 8009884:	4699      	movlt	r9, r3
 8009886:	6927      	ldr	r7, [r4, #16]
 8009888:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800988c:	68a3      	ldr	r3, [r4, #8]
 800988e:	6861      	ldr	r1, [r4, #4]
 8009890:	eb07 060a 	add.w	r6, r7, sl
 8009894:	42b3      	cmp	r3, r6
 8009896:	b085      	sub	sp, #20
 8009898:	bfb8      	it	lt
 800989a:	3101      	addlt	r1, #1
 800989c:	f7ff fed8 	bl	8009650 <_Balloc>
 80098a0:	b930      	cbnz	r0, 80098b0 <__multiply+0x44>
 80098a2:	4602      	mov	r2, r0
 80098a4:	4b44      	ldr	r3, [pc, #272]	; (80099b8 <__multiply+0x14c>)
 80098a6:	4845      	ldr	r0, [pc, #276]	; (80099bc <__multiply+0x150>)
 80098a8:	f240 115d 	movw	r1, #349	; 0x15d
 80098ac:	f000 fcb6 	bl	800a21c <__assert_func>
 80098b0:	f100 0514 	add.w	r5, r0, #20
 80098b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80098b8:	462b      	mov	r3, r5
 80098ba:	2200      	movs	r2, #0
 80098bc:	4543      	cmp	r3, r8
 80098be:	d321      	bcc.n	8009904 <__multiply+0x98>
 80098c0:	f104 0314 	add.w	r3, r4, #20
 80098c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80098c8:	f109 0314 	add.w	r3, r9, #20
 80098cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80098d0:	9202      	str	r2, [sp, #8]
 80098d2:	1b3a      	subs	r2, r7, r4
 80098d4:	3a15      	subs	r2, #21
 80098d6:	f022 0203 	bic.w	r2, r2, #3
 80098da:	3204      	adds	r2, #4
 80098dc:	f104 0115 	add.w	r1, r4, #21
 80098e0:	428f      	cmp	r7, r1
 80098e2:	bf38      	it	cc
 80098e4:	2204      	movcc	r2, #4
 80098e6:	9201      	str	r2, [sp, #4]
 80098e8:	9a02      	ldr	r2, [sp, #8]
 80098ea:	9303      	str	r3, [sp, #12]
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d80c      	bhi.n	800990a <__multiply+0x9e>
 80098f0:	2e00      	cmp	r6, #0
 80098f2:	dd03      	ble.n	80098fc <__multiply+0x90>
 80098f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d05a      	beq.n	80099b2 <__multiply+0x146>
 80098fc:	6106      	str	r6, [r0, #16]
 80098fe:	b005      	add	sp, #20
 8009900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009904:	f843 2b04 	str.w	r2, [r3], #4
 8009908:	e7d8      	b.n	80098bc <__multiply+0x50>
 800990a:	f8b3 a000 	ldrh.w	sl, [r3]
 800990e:	f1ba 0f00 	cmp.w	sl, #0
 8009912:	d024      	beq.n	800995e <__multiply+0xf2>
 8009914:	f104 0e14 	add.w	lr, r4, #20
 8009918:	46a9      	mov	r9, r5
 800991a:	f04f 0c00 	mov.w	ip, #0
 800991e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009922:	f8d9 1000 	ldr.w	r1, [r9]
 8009926:	fa1f fb82 	uxth.w	fp, r2
 800992a:	b289      	uxth	r1, r1
 800992c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009930:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009934:	f8d9 2000 	ldr.w	r2, [r9]
 8009938:	4461      	add	r1, ip
 800993a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800993e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009942:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009946:	b289      	uxth	r1, r1
 8009948:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800994c:	4577      	cmp	r7, lr
 800994e:	f849 1b04 	str.w	r1, [r9], #4
 8009952:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009956:	d8e2      	bhi.n	800991e <__multiply+0xb2>
 8009958:	9a01      	ldr	r2, [sp, #4]
 800995a:	f845 c002 	str.w	ip, [r5, r2]
 800995e:	9a03      	ldr	r2, [sp, #12]
 8009960:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009964:	3304      	adds	r3, #4
 8009966:	f1b9 0f00 	cmp.w	r9, #0
 800996a:	d020      	beq.n	80099ae <__multiply+0x142>
 800996c:	6829      	ldr	r1, [r5, #0]
 800996e:	f104 0c14 	add.w	ip, r4, #20
 8009972:	46ae      	mov	lr, r5
 8009974:	f04f 0a00 	mov.w	sl, #0
 8009978:	f8bc b000 	ldrh.w	fp, [ip]
 800997c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009980:	fb09 220b 	mla	r2, r9, fp, r2
 8009984:	4492      	add	sl, r2
 8009986:	b289      	uxth	r1, r1
 8009988:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800998c:	f84e 1b04 	str.w	r1, [lr], #4
 8009990:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009994:	f8be 1000 	ldrh.w	r1, [lr]
 8009998:	0c12      	lsrs	r2, r2, #16
 800999a:	fb09 1102 	mla	r1, r9, r2, r1
 800999e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80099a2:	4567      	cmp	r7, ip
 80099a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80099a8:	d8e6      	bhi.n	8009978 <__multiply+0x10c>
 80099aa:	9a01      	ldr	r2, [sp, #4]
 80099ac:	50a9      	str	r1, [r5, r2]
 80099ae:	3504      	adds	r5, #4
 80099b0:	e79a      	b.n	80098e8 <__multiply+0x7c>
 80099b2:	3e01      	subs	r6, #1
 80099b4:	e79c      	b.n	80098f0 <__multiply+0x84>
 80099b6:	bf00      	nop
 80099b8:	0800af97 	.word	0x0800af97
 80099bc:	0800afa8 	.word	0x0800afa8

080099c0 <__pow5mult>:
 80099c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099c4:	4615      	mov	r5, r2
 80099c6:	f012 0203 	ands.w	r2, r2, #3
 80099ca:	4606      	mov	r6, r0
 80099cc:	460f      	mov	r7, r1
 80099ce:	d007      	beq.n	80099e0 <__pow5mult+0x20>
 80099d0:	4c25      	ldr	r4, [pc, #148]	; (8009a68 <__pow5mult+0xa8>)
 80099d2:	3a01      	subs	r2, #1
 80099d4:	2300      	movs	r3, #0
 80099d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80099da:	f7ff fe9b 	bl	8009714 <__multadd>
 80099de:	4607      	mov	r7, r0
 80099e0:	10ad      	asrs	r5, r5, #2
 80099e2:	d03d      	beq.n	8009a60 <__pow5mult+0xa0>
 80099e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80099e6:	b97c      	cbnz	r4, 8009a08 <__pow5mult+0x48>
 80099e8:	2010      	movs	r0, #16
 80099ea:	f7ff fe1b 	bl	8009624 <malloc>
 80099ee:	4602      	mov	r2, r0
 80099f0:	6270      	str	r0, [r6, #36]	; 0x24
 80099f2:	b928      	cbnz	r0, 8009a00 <__pow5mult+0x40>
 80099f4:	4b1d      	ldr	r3, [pc, #116]	; (8009a6c <__pow5mult+0xac>)
 80099f6:	481e      	ldr	r0, [pc, #120]	; (8009a70 <__pow5mult+0xb0>)
 80099f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80099fc:	f000 fc0e 	bl	800a21c <__assert_func>
 8009a00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a04:	6004      	str	r4, [r0, #0]
 8009a06:	60c4      	str	r4, [r0, #12]
 8009a08:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009a0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a10:	b94c      	cbnz	r4, 8009a26 <__pow5mult+0x66>
 8009a12:	f240 2171 	movw	r1, #625	; 0x271
 8009a16:	4630      	mov	r0, r6
 8009a18:	f7ff ff12 	bl	8009840 <__i2b>
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a22:	4604      	mov	r4, r0
 8009a24:	6003      	str	r3, [r0, #0]
 8009a26:	f04f 0900 	mov.w	r9, #0
 8009a2a:	07eb      	lsls	r3, r5, #31
 8009a2c:	d50a      	bpl.n	8009a44 <__pow5mult+0x84>
 8009a2e:	4639      	mov	r1, r7
 8009a30:	4622      	mov	r2, r4
 8009a32:	4630      	mov	r0, r6
 8009a34:	f7ff ff1a 	bl	800986c <__multiply>
 8009a38:	4639      	mov	r1, r7
 8009a3a:	4680      	mov	r8, r0
 8009a3c:	4630      	mov	r0, r6
 8009a3e:	f7ff fe47 	bl	80096d0 <_Bfree>
 8009a42:	4647      	mov	r7, r8
 8009a44:	106d      	asrs	r5, r5, #1
 8009a46:	d00b      	beq.n	8009a60 <__pow5mult+0xa0>
 8009a48:	6820      	ldr	r0, [r4, #0]
 8009a4a:	b938      	cbnz	r0, 8009a5c <__pow5mult+0x9c>
 8009a4c:	4622      	mov	r2, r4
 8009a4e:	4621      	mov	r1, r4
 8009a50:	4630      	mov	r0, r6
 8009a52:	f7ff ff0b 	bl	800986c <__multiply>
 8009a56:	6020      	str	r0, [r4, #0]
 8009a58:	f8c0 9000 	str.w	r9, [r0]
 8009a5c:	4604      	mov	r4, r0
 8009a5e:	e7e4      	b.n	8009a2a <__pow5mult+0x6a>
 8009a60:	4638      	mov	r0, r7
 8009a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a66:	bf00      	nop
 8009a68:	0800b0f8 	.word	0x0800b0f8
 8009a6c:	0800af25 	.word	0x0800af25
 8009a70:	0800afa8 	.word	0x0800afa8

08009a74 <__lshift>:
 8009a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a78:	460c      	mov	r4, r1
 8009a7a:	6849      	ldr	r1, [r1, #4]
 8009a7c:	6923      	ldr	r3, [r4, #16]
 8009a7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009a82:	68a3      	ldr	r3, [r4, #8]
 8009a84:	4607      	mov	r7, r0
 8009a86:	4691      	mov	r9, r2
 8009a88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009a8c:	f108 0601 	add.w	r6, r8, #1
 8009a90:	42b3      	cmp	r3, r6
 8009a92:	db0b      	blt.n	8009aac <__lshift+0x38>
 8009a94:	4638      	mov	r0, r7
 8009a96:	f7ff fddb 	bl	8009650 <_Balloc>
 8009a9a:	4605      	mov	r5, r0
 8009a9c:	b948      	cbnz	r0, 8009ab2 <__lshift+0x3e>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	4b2a      	ldr	r3, [pc, #168]	; (8009b4c <__lshift+0xd8>)
 8009aa2:	482b      	ldr	r0, [pc, #172]	; (8009b50 <__lshift+0xdc>)
 8009aa4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009aa8:	f000 fbb8 	bl	800a21c <__assert_func>
 8009aac:	3101      	adds	r1, #1
 8009aae:	005b      	lsls	r3, r3, #1
 8009ab0:	e7ee      	b.n	8009a90 <__lshift+0x1c>
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	f100 0114 	add.w	r1, r0, #20
 8009ab8:	f100 0210 	add.w	r2, r0, #16
 8009abc:	4618      	mov	r0, r3
 8009abe:	4553      	cmp	r3, sl
 8009ac0:	db37      	blt.n	8009b32 <__lshift+0xbe>
 8009ac2:	6920      	ldr	r0, [r4, #16]
 8009ac4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ac8:	f104 0314 	add.w	r3, r4, #20
 8009acc:	f019 091f 	ands.w	r9, r9, #31
 8009ad0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ad4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009ad8:	d02f      	beq.n	8009b3a <__lshift+0xc6>
 8009ada:	f1c9 0e20 	rsb	lr, r9, #32
 8009ade:	468a      	mov	sl, r1
 8009ae0:	f04f 0c00 	mov.w	ip, #0
 8009ae4:	681a      	ldr	r2, [r3, #0]
 8009ae6:	fa02 f209 	lsl.w	r2, r2, r9
 8009aea:	ea42 020c 	orr.w	r2, r2, ip
 8009aee:	f84a 2b04 	str.w	r2, [sl], #4
 8009af2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009af6:	4298      	cmp	r0, r3
 8009af8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009afc:	d8f2      	bhi.n	8009ae4 <__lshift+0x70>
 8009afe:	1b03      	subs	r3, r0, r4
 8009b00:	3b15      	subs	r3, #21
 8009b02:	f023 0303 	bic.w	r3, r3, #3
 8009b06:	3304      	adds	r3, #4
 8009b08:	f104 0215 	add.w	r2, r4, #21
 8009b0c:	4290      	cmp	r0, r2
 8009b0e:	bf38      	it	cc
 8009b10:	2304      	movcc	r3, #4
 8009b12:	f841 c003 	str.w	ip, [r1, r3]
 8009b16:	f1bc 0f00 	cmp.w	ip, #0
 8009b1a:	d001      	beq.n	8009b20 <__lshift+0xac>
 8009b1c:	f108 0602 	add.w	r6, r8, #2
 8009b20:	3e01      	subs	r6, #1
 8009b22:	4638      	mov	r0, r7
 8009b24:	612e      	str	r6, [r5, #16]
 8009b26:	4621      	mov	r1, r4
 8009b28:	f7ff fdd2 	bl	80096d0 <_Bfree>
 8009b2c:	4628      	mov	r0, r5
 8009b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b32:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b36:	3301      	adds	r3, #1
 8009b38:	e7c1      	b.n	8009abe <__lshift+0x4a>
 8009b3a:	3904      	subs	r1, #4
 8009b3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b40:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b44:	4298      	cmp	r0, r3
 8009b46:	d8f9      	bhi.n	8009b3c <__lshift+0xc8>
 8009b48:	e7ea      	b.n	8009b20 <__lshift+0xac>
 8009b4a:	bf00      	nop
 8009b4c:	0800af97 	.word	0x0800af97
 8009b50:	0800afa8 	.word	0x0800afa8

08009b54 <__mcmp>:
 8009b54:	b530      	push	{r4, r5, lr}
 8009b56:	6902      	ldr	r2, [r0, #16]
 8009b58:	690c      	ldr	r4, [r1, #16]
 8009b5a:	1b12      	subs	r2, r2, r4
 8009b5c:	d10e      	bne.n	8009b7c <__mcmp+0x28>
 8009b5e:	f100 0314 	add.w	r3, r0, #20
 8009b62:	3114      	adds	r1, #20
 8009b64:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009b68:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009b6c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009b70:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009b74:	42a5      	cmp	r5, r4
 8009b76:	d003      	beq.n	8009b80 <__mcmp+0x2c>
 8009b78:	d305      	bcc.n	8009b86 <__mcmp+0x32>
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	4610      	mov	r0, r2
 8009b7e:	bd30      	pop	{r4, r5, pc}
 8009b80:	4283      	cmp	r3, r0
 8009b82:	d3f3      	bcc.n	8009b6c <__mcmp+0x18>
 8009b84:	e7fa      	b.n	8009b7c <__mcmp+0x28>
 8009b86:	f04f 32ff 	mov.w	r2, #4294967295
 8009b8a:	e7f7      	b.n	8009b7c <__mcmp+0x28>

08009b8c <__mdiff>:
 8009b8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b90:	460c      	mov	r4, r1
 8009b92:	4606      	mov	r6, r0
 8009b94:	4611      	mov	r1, r2
 8009b96:	4620      	mov	r0, r4
 8009b98:	4690      	mov	r8, r2
 8009b9a:	f7ff ffdb 	bl	8009b54 <__mcmp>
 8009b9e:	1e05      	subs	r5, r0, #0
 8009ba0:	d110      	bne.n	8009bc4 <__mdiff+0x38>
 8009ba2:	4629      	mov	r1, r5
 8009ba4:	4630      	mov	r0, r6
 8009ba6:	f7ff fd53 	bl	8009650 <_Balloc>
 8009baa:	b930      	cbnz	r0, 8009bba <__mdiff+0x2e>
 8009bac:	4b3a      	ldr	r3, [pc, #232]	; (8009c98 <__mdiff+0x10c>)
 8009bae:	4602      	mov	r2, r0
 8009bb0:	f240 2132 	movw	r1, #562	; 0x232
 8009bb4:	4839      	ldr	r0, [pc, #228]	; (8009c9c <__mdiff+0x110>)
 8009bb6:	f000 fb31 	bl	800a21c <__assert_func>
 8009bba:	2301      	movs	r3, #1
 8009bbc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009bc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bc4:	bfa4      	itt	ge
 8009bc6:	4643      	movge	r3, r8
 8009bc8:	46a0      	movge	r8, r4
 8009bca:	4630      	mov	r0, r6
 8009bcc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009bd0:	bfa6      	itte	ge
 8009bd2:	461c      	movge	r4, r3
 8009bd4:	2500      	movge	r5, #0
 8009bd6:	2501      	movlt	r5, #1
 8009bd8:	f7ff fd3a 	bl	8009650 <_Balloc>
 8009bdc:	b920      	cbnz	r0, 8009be8 <__mdiff+0x5c>
 8009bde:	4b2e      	ldr	r3, [pc, #184]	; (8009c98 <__mdiff+0x10c>)
 8009be0:	4602      	mov	r2, r0
 8009be2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009be6:	e7e5      	b.n	8009bb4 <__mdiff+0x28>
 8009be8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009bec:	6926      	ldr	r6, [r4, #16]
 8009bee:	60c5      	str	r5, [r0, #12]
 8009bf0:	f104 0914 	add.w	r9, r4, #20
 8009bf4:	f108 0514 	add.w	r5, r8, #20
 8009bf8:	f100 0e14 	add.w	lr, r0, #20
 8009bfc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009c00:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009c04:	f108 0210 	add.w	r2, r8, #16
 8009c08:	46f2      	mov	sl, lr
 8009c0a:	2100      	movs	r1, #0
 8009c0c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009c10:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009c14:	fa1f f883 	uxth.w	r8, r3
 8009c18:	fa11 f18b 	uxtah	r1, r1, fp
 8009c1c:	0c1b      	lsrs	r3, r3, #16
 8009c1e:	eba1 0808 	sub.w	r8, r1, r8
 8009c22:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009c26:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009c2a:	fa1f f888 	uxth.w	r8, r8
 8009c2e:	1419      	asrs	r1, r3, #16
 8009c30:	454e      	cmp	r6, r9
 8009c32:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009c36:	f84a 3b04 	str.w	r3, [sl], #4
 8009c3a:	d8e7      	bhi.n	8009c0c <__mdiff+0x80>
 8009c3c:	1b33      	subs	r3, r6, r4
 8009c3e:	3b15      	subs	r3, #21
 8009c40:	f023 0303 	bic.w	r3, r3, #3
 8009c44:	3304      	adds	r3, #4
 8009c46:	3415      	adds	r4, #21
 8009c48:	42a6      	cmp	r6, r4
 8009c4a:	bf38      	it	cc
 8009c4c:	2304      	movcc	r3, #4
 8009c4e:	441d      	add	r5, r3
 8009c50:	4473      	add	r3, lr
 8009c52:	469e      	mov	lr, r3
 8009c54:	462e      	mov	r6, r5
 8009c56:	4566      	cmp	r6, ip
 8009c58:	d30e      	bcc.n	8009c78 <__mdiff+0xec>
 8009c5a:	f10c 0203 	add.w	r2, ip, #3
 8009c5e:	1b52      	subs	r2, r2, r5
 8009c60:	f022 0203 	bic.w	r2, r2, #3
 8009c64:	3d03      	subs	r5, #3
 8009c66:	45ac      	cmp	ip, r5
 8009c68:	bf38      	it	cc
 8009c6a:	2200      	movcc	r2, #0
 8009c6c:	441a      	add	r2, r3
 8009c6e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009c72:	b17b      	cbz	r3, 8009c94 <__mdiff+0x108>
 8009c74:	6107      	str	r7, [r0, #16]
 8009c76:	e7a3      	b.n	8009bc0 <__mdiff+0x34>
 8009c78:	f856 8b04 	ldr.w	r8, [r6], #4
 8009c7c:	fa11 f288 	uxtah	r2, r1, r8
 8009c80:	1414      	asrs	r4, r2, #16
 8009c82:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009c86:	b292      	uxth	r2, r2
 8009c88:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009c8c:	f84e 2b04 	str.w	r2, [lr], #4
 8009c90:	1421      	asrs	r1, r4, #16
 8009c92:	e7e0      	b.n	8009c56 <__mdiff+0xca>
 8009c94:	3f01      	subs	r7, #1
 8009c96:	e7ea      	b.n	8009c6e <__mdiff+0xe2>
 8009c98:	0800af97 	.word	0x0800af97
 8009c9c:	0800afa8 	.word	0x0800afa8

08009ca0 <__d2b>:
 8009ca0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009ca4:	4689      	mov	r9, r1
 8009ca6:	2101      	movs	r1, #1
 8009ca8:	ec57 6b10 	vmov	r6, r7, d0
 8009cac:	4690      	mov	r8, r2
 8009cae:	f7ff fccf 	bl	8009650 <_Balloc>
 8009cb2:	4604      	mov	r4, r0
 8009cb4:	b930      	cbnz	r0, 8009cc4 <__d2b+0x24>
 8009cb6:	4602      	mov	r2, r0
 8009cb8:	4b25      	ldr	r3, [pc, #148]	; (8009d50 <__d2b+0xb0>)
 8009cba:	4826      	ldr	r0, [pc, #152]	; (8009d54 <__d2b+0xb4>)
 8009cbc:	f240 310a 	movw	r1, #778	; 0x30a
 8009cc0:	f000 faac 	bl	800a21c <__assert_func>
 8009cc4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009cc8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009ccc:	bb35      	cbnz	r5, 8009d1c <__d2b+0x7c>
 8009cce:	2e00      	cmp	r6, #0
 8009cd0:	9301      	str	r3, [sp, #4]
 8009cd2:	d028      	beq.n	8009d26 <__d2b+0x86>
 8009cd4:	4668      	mov	r0, sp
 8009cd6:	9600      	str	r6, [sp, #0]
 8009cd8:	f7ff fd82 	bl	80097e0 <__lo0bits>
 8009cdc:	9900      	ldr	r1, [sp, #0]
 8009cde:	b300      	cbz	r0, 8009d22 <__d2b+0x82>
 8009ce0:	9a01      	ldr	r2, [sp, #4]
 8009ce2:	f1c0 0320 	rsb	r3, r0, #32
 8009ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8009cea:	430b      	orrs	r3, r1
 8009cec:	40c2      	lsrs	r2, r0
 8009cee:	6163      	str	r3, [r4, #20]
 8009cf0:	9201      	str	r2, [sp, #4]
 8009cf2:	9b01      	ldr	r3, [sp, #4]
 8009cf4:	61a3      	str	r3, [r4, #24]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	bf14      	ite	ne
 8009cfa:	2202      	movne	r2, #2
 8009cfc:	2201      	moveq	r2, #1
 8009cfe:	6122      	str	r2, [r4, #16]
 8009d00:	b1d5      	cbz	r5, 8009d38 <__d2b+0x98>
 8009d02:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009d06:	4405      	add	r5, r0
 8009d08:	f8c9 5000 	str.w	r5, [r9]
 8009d0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009d10:	f8c8 0000 	str.w	r0, [r8]
 8009d14:	4620      	mov	r0, r4
 8009d16:	b003      	add	sp, #12
 8009d18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d20:	e7d5      	b.n	8009cce <__d2b+0x2e>
 8009d22:	6161      	str	r1, [r4, #20]
 8009d24:	e7e5      	b.n	8009cf2 <__d2b+0x52>
 8009d26:	a801      	add	r0, sp, #4
 8009d28:	f7ff fd5a 	bl	80097e0 <__lo0bits>
 8009d2c:	9b01      	ldr	r3, [sp, #4]
 8009d2e:	6163      	str	r3, [r4, #20]
 8009d30:	2201      	movs	r2, #1
 8009d32:	6122      	str	r2, [r4, #16]
 8009d34:	3020      	adds	r0, #32
 8009d36:	e7e3      	b.n	8009d00 <__d2b+0x60>
 8009d38:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009d3c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009d40:	f8c9 0000 	str.w	r0, [r9]
 8009d44:	6918      	ldr	r0, [r3, #16]
 8009d46:	f7ff fd2b 	bl	80097a0 <__hi0bits>
 8009d4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009d4e:	e7df      	b.n	8009d10 <__d2b+0x70>
 8009d50:	0800af97 	.word	0x0800af97
 8009d54:	0800afa8 	.word	0x0800afa8

08009d58 <_calloc_r>:
 8009d58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d5a:	fba1 2402 	umull	r2, r4, r1, r2
 8009d5e:	b94c      	cbnz	r4, 8009d74 <_calloc_r+0x1c>
 8009d60:	4611      	mov	r1, r2
 8009d62:	9201      	str	r2, [sp, #4]
 8009d64:	f000 f87a 	bl	8009e5c <_malloc_r>
 8009d68:	9a01      	ldr	r2, [sp, #4]
 8009d6a:	4605      	mov	r5, r0
 8009d6c:	b930      	cbnz	r0, 8009d7c <_calloc_r+0x24>
 8009d6e:	4628      	mov	r0, r5
 8009d70:	b003      	add	sp, #12
 8009d72:	bd30      	pop	{r4, r5, pc}
 8009d74:	220c      	movs	r2, #12
 8009d76:	6002      	str	r2, [r0, #0]
 8009d78:	2500      	movs	r5, #0
 8009d7a:	e7f8      	b.n	8009d6e <_calloc_r+0x16>
 8009d7c:	4621      	mov	r1, r4
 8009d7e:	f7fe f93f 	bl	8008000 <memset>
 8009d82:	e7f4      	b.n	8009d6e <_calloc_r+0x16>

08009d84 <_free_r>:
 8009d84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d86:	2900      	cmp	r1, #0
 8009d88:	d044      	beq.n	8009e14 <_free_r+0x90>
 8009d8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d8e:	9001      	str	r0, [sp, #4]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	f1a1 0404 	sub.w	r4, r1, #4
 8009d96:	bfb8      	it	lt
 8009d98:	18e4      	addlt	r4, r4, r3
 8009d9a:	f000 fa9b 	bl	800a2d4 <__malloc_lock>
 8009d9e:	4a1e      	ldr	r2, [pc, #120]	; (8009e18 <_free_r+0x94>)
 8009da0:	9801      	ldr	r0, [sp, #4]
 8009da2:	6813      	ldr	r3, [r2, #0]
 8009da4:	b933      	cbnz	r3, 8009db4 <_free_r+0x30>
 8009da6:	6063      	str	r3, [r4, #4]
 8009da8:	6014      	str	r4, [r2, #0]
 8009daa:	b003      	add	sp, #12
 8009dac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009db0:	f000 ba96 	b.w	800a2e0 <__malloc_unlock>
 8009db4:	42a3      	cmp	r3, r4
 8009db6:	d908      	bls.n	8009dca <_free_r+0x46>
 8009db8:	6825      	ldr	r5, [r4, #0]
 8009dba:	1961      	adds	r1, r4, r5
 8009dbc:	428b      	cmp	r3, r1
 8009dbe:	bf01      	itttt	eq
 8009dc0:	6819      	ldreq	r1, [r3, #0]
 8009dc2:	685b      	ldreq	r3, [r3, #4]
 8009dc4:	1949      	addeq	r1, r1, r5
 8009dc6:	6021      	streq	r1, [r4, #0]
 8009dc8:	e7ed      	b.n	8009da6 <_free_r+0x22>
 8009dca:	461a      	mov	r2, r3
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	b10b      	cbz	r3, 8009dd4 <_free_r+0x50>
 8009dd0:	42a3      	cmp	r3, r4
 8009dd2:	d9fa      	bls.n	8009dca <_free_r+0x46>
 8009dd4:	6811      	ldr	r1, [r2, #0]
 8009dd6:	1855      	adds	r5, r2, r1
 8009dd8:	42a5      	cmp	r5, r4
 8009dda:	d10b      	bne.n	8009df4 <_free_r+0x70>
 8009ddc:	6824      	ldr	r4, [r4, #0]
 8009dde:	4421      	add	r1, r4
 8009de0:	1854      	adds	r4, r2, r1
 8009de2:	42a3      	cmp	r3, r4
 8009de4:	6011      	str	r1, [r2, #0]
 8009de6:	d1e0      	bne.n	8009daa <_free_r+0x26>
 8009de8:	681c      	ldr	r4, [r3, #0]
 8009dea:	685b      	ldr	r3, [r3, #4]
 8009dec:	6053      	str	r3, [r2, #4]
 8009dee:	4421      	add	r1, r4
 8009df0:	6011      	str	r1, [r2, #0]
 8009df2:	e7da      	b.n	8009daa <_free_r+0x26>
 8009df4:	d902      	bls.n	8009dfc <_free_r+0x78>
 8009df6:	230c      	movs	r3, #12
 8009df8:	6003      	str	r3, [r0, #0]
 8009dfa:	e7d6      	b.n	8009daa <_free_r+0x26>
 8009dfc:	6825      	ldr	r5, [r4, #0]
 8009dfe:	1961      	adds	r1, r4, r5
 8009e00:	428b      	cmp	r3, r1
 8009e02:	bf04      	itt	eq
 8009e04:	6819      	ldreq	r1, [r3, #0]
 8009e06:	685b      	ldreq	r3, [r3, #4]
 8009e08:	6063      	str	r3, [r4, #4]
 8009e0a:	bf04      	itt	eq
 8009e0c:	1949      	addeq	r1, r1, r5
 8009e0e:	6021      	streq	r1, [r4, #0]
 8009e10:	6054      	str	r4, [r2, #4]
 8009e12:	e7ca      	b.n	8009daa <_free_r+0x26>
 8009e14:	b003      	add	sp, #12
 8009e16:	bd30      	pop	{r4, r5, pc}
 8009e18:	200004ac 	.word	0x200004ac

08009e1c <sbrk_aligned>:
 8009e1c:	b570      	push	{r4, r5, r6, lr}
 8009e1e:	4e0e      	ldr	r6, [pc, #56]	; (8009e58 <sbrk_aligned+0x3c>)
 8009e20:	460c      	mov	r4, r1
 8009e22:	6831      	ldr	r1, [r6, #0]
 8009e24:	4605      	mov	r5, r0
 8009e26:	b911      	cbnz	r1, 8009e2e <sbrk_aligned+0x12>
 8009e28:	f000 f9e8 	bl	800a1fc <_sbrk_r>
 8009e2c:	6030      	str	r0, [r6, #0]
 8009e2e:	4621      	mov	r1, r4
 8009e30:	4628      	mov	r0, r5
 8009e32:	f000 f9e3 	bl	800a1fc <_sbrk_r>
 8009e36:	1c43      	adds	r3, r0, #1
 8009e38:	d00a      	beq.n	8009e50 <sbrk_aligned+0x34>
 8009e3a:	1cc4      	adds	r4, r0, #3
 8009e3c:	f024 0403 	bic.w	r4, r4, #3
 8009e40:	42a0      	cmp	r0, r4
 8009e42:	d007      	beq.n	8009e54 <sbrk_aligned+0x38>
 8009e44:	1a21      	subs	r1, r4, r0
 8009e46:	4628      	mov	r0, r5
 8009e48:	f000 f9d8 	bl	800a1fc <_sbrk_r>
 8009e4c:	3001      	adds	r0, #1
 8009e4e:	d101      	bne.n	8009e54 <sbrk_aligned+0x38>
 8009e50:	f04f 34ff 	mov.w	r4, #4294967295
 8009e54:	4620      	mov	r0, r4
 8009e56:	bd70      	pop	{r4, r5, r6, pc}
 8009e58:	200004b0 	.word	0x200004b0

08009e5c <_malloc_r>:
 8009e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e60:	1ccd      	adds	r5, r1, #3
 8009e62:	f025 0503 	bic.w	r5, r5, #3
 8009e66:	3508      	adds	r5, #8
 8009e68:	2d0c      	cmp	r5, #12
 8009e6a:	bf38      	it	cc
 8009e6c:	250c      	movcc	r5, #12
 8009e6e:	2d00      	cmp	r5, #0
 8009e70:	4607      	mov	r7, r0
 8009e72:	db01      	blt.n	8009e78 <_malloc_r+0x1c>
 8009e74:	42a9      	cmp	r1, r5
 8009e76:	d905      	bls.n	8009e84 <_malloc_r+0x28>
 8009e78:	230c      	movs	r3, #12
 8009e7a:	603b      	str	r3, [r7, #0]
 8009e7c:	2600      	movs	r6, #0
 8009e7e:	4630      	mov	r0, r6
 8009e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e84:	4e2e      	ldr	r6, [pc, #184]	; (8009f40 <_malloc_r+0xe4>)
 8009e86:	f000 fa25 	bl	800a2d4 <__malloc_lock>
 8009e8a:	6833      	ldr	r3, [r6, #0]
 8009e8c:	461c      	mov	r4, r3
 8009e8e:	bb34      	cbnz	r4, 8009ede <_malloc_r+0x82>
 8009e90:	4629      	mov	r1, r5
 8009e92:	4638      	mov	r0, r7
 8009e94:	f7ff ffc2 	bl	8009e1c <sbrk_aligned>
 8009e98:	1c43      	adds	r3, r0, #1
 8009e9a:	4604      	mov	r4, r0
 8009e9c:	d14d      	bne.n	8009f3a <_malloc_r+0xde>
 8009e9e:	6834      	ldr	r4, [r6, #0]
 8009ea0:	4626      	mov	r6, r4
 8009ea2:	2e00      	cmp	r6, #0
 8009ea4:	d140      	bne.n	8009f28 <_malloc_r+0xcc>
 8009ea6:	6823      	ldr	r3, [r4, #0]
 8009ea8:	4631      	mov	r1, r6
 8009eaa:	4638      	mov	r0, r7
 8009eac:	eb04 0803 	add.w	r8, r4, r3
 8009eb0:	f000 f9a4 	bl	800a1fc <_sbrk_r>
 8009eb4:	4580      	cmp	r8, r0
 8009eb6:	d13a      	bne.n	8009f2e <_malloc_r+0xd2>
 8009eb8:	6821      	ldr	r1, [r4, #0]
 8009eba:	3503      	adds	r5, #3
 8009ebc:	1a6d      	subs	r5, r5, r1
 8009ebe:	f025 0503 	bic.w	r5, r5, #3
 8009ec2:	3508      	adds	r5, #8
 8009ec4:	2d0c      	cmp	r5, #12
 8009ec6:	bf38      	it	cc
 8009ec8:	250c      	movcc	r5, #12
 8009eca:	4629      	mov	r1, r5
 8009ecc:	4638      	mov	r0, r7
 8009ece:	f7ff ffa5 	bl	8009e1c <sbrk_aligned>
 8009ed2:	3001      	adds	r0, #1
 8009ed4:	d02b      	beq.n	8009f2e <_malloc_r+0xd2>
 8009ed6:	6823      	ldr	r3, [r4, #0]
 8009ed8:	442b      	add	r3, r5
 8009eda:	6023      	str	r3, [r4, #0]
 8009edc:	e00e      	b.n	8009efc <_malloc_r+0xa0>
 8009ede:	6822      	ldr	r2, [r4, #0]
 8009ee0:	1b52      	subs	r2, r2, r5
 8009ee2:	d41e      	bmi.n	8009f22 <_malloc_r+0xc6>
 8009ee4:	2a0b      	cmp	r2, #11
 8009ee6:	d916      	bls.n	8009f16 <_malloc_r+0xba>
 8009ee8:	1961      	adds	r1, r4, r5
 8009eea:	42a3      	cmp	r3, r4
 8009eec:	6025      	str	r5, [r4, #0]
 8009eee:	bf18      	it	ne
 8009ef0:	6059      	strne	r1, [r3, #4]
 8009ef2:	6863      	ldr	r3, [r4, #4]
 8009ef4:	bf08      	it	eq
 8009ef6:	6031      	streq	r1, [r6, #0]
 8009ef8:	5162      	str	r2, [r4, r5]
 8009efa:	604b      	str	r3, [r1, #4]
 8009efc:	4638      	mov	r0, r7
 8009efe:	f104 060b 	add.w	r6, r4, #11
 8009f02:	f000 f9ed 	bl	800a2e0 <__malloc_unlock>
 8009f06:	f026 0607 	bic.w	r6, r6, #7
 8009f0a:	1d23      	adds	r3, r4, #4
 8009f0c:	1af2      	subs	r2, r6, r3
 8009f0e:	d0b6      	beq.n	8009e7e <_malloc_r+0x22>
 8009f10:	1b9b      	subs	r3, r3, r6
 8009f12:	50a3      	str	r3, [r4, r2]
 8009f14:	e7b3      	b.n	8009e7e <_malloc_r+0x22>
 8009f16:	6862      	ldr	r2, [r4, #4]
 8009f18:	42a3      	cmp	r3, r4
 8009f1a:	bf0c      	ite	eq
 8009f1c:	6032      	streq	r2, [r6, #0]
 8009f1e:	605a      	strne	r2, [r3, #4]
 8009f20:	e7ec      	b.n	8009efc <_malloc_r+0xa0>
 8009f22:	4623      	mov	r3, r4
 8009f24:	6864      	ldr	r4, [r4, #4]
 8009f26:	e7b2      	b.n	8009e8e <_malloc_r+0x32>
 8009f28:	4634      	mov	r4, r6
 8009f2a:	6876      	ldr	r6, [r6, #4]
 8009f2c:	e7b9      	b.n	8009ea2 <_malloc_r+0x46>
 8009f2e:	230c      	movs	r3, #12
 8009f30:	603b      	str	r3, [r7, #0]
 8009f32:	4638      	mov	r0, r7
 8009f34:	f000 f9d4 	bl	800a2e0 <__malloc_unlock>
 8009f38:	e7a1      	b.n	8009e7e <_malloc_r+0x22>
 8009f3a:	6025      	str	r5, [r4, #0]
 8009f3c:	e7de      	b.n	8009efc <_malloc_r+0xa0>
 8009f3e:	bf00      	nop
 8009f40:	200004ac 	.word	0x200004ac

08009f44 <__ssputs_r>:
 8009f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f48:	688e      	ldr	r6, [r1, #8]
 8009f4a:	429e      	cmp	r6, r3
 8009f4c:	4682      	mov	sl, r0
 8009f4e:	460c      	mov	r4, r1
 8009f50:	4690      	mov	r8, r2
 8009f52:	461f      	mov	r7, r3
 8009f54:	d838      	bhi.n	8009fc8 <__ssputs_r+0x84>
 8009f56:	898a      	ldrh	r2, [r1, #12]
 8009f58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009f5c:	d032      	beq.n	8009fc4 <__ssputs_r+0x80>
 8009f5e:	6825      	ldr	r5, [r4, #0]
 8009f60:	6909      	ldr	r1, [r1, #16]
 8009f62:	eba5 0901 	sub.w	r9, r5, r1
 8009f66:	6965      	ldr	r5, [r4, #20]
 8009f68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f70:	3301      	adds	r3, #1
 8009f72:	444b      	add	r3, r9
 8009f74:	106d      	asrs	r5, r5, #1
 8009f76:	429d      	cmp	r5, r3
 8009f78:	bf38      	it	cc
 8009f7a:	461d      	movcc	r5, r3
 8009f7c:	0553      	lsls	r3, r2, #21
 8009f7e:	d531      	bpl.n	8009fe4 <__ssputs_r+0xa0>
 8009f80:	4629      	mov	r1, r5
 8009f82:	f7ff ff6b 	bl	8009e5c <_malloc_r>
 8009f86:	4606      	mov	r6, r0
 8009f88:	b950      	cbnz	r0, 8009fa0 <__ssputs_r+0x5c>
 8009f8a:	230c      	movs	r3, #12
 8009f8c:	f8ca 3000 	str.w	r3, [sl]
 8009f90:	89a3      	ldrh	r3, [r4, #12]
 8009f92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f96:	81a3      	strh	r3, [r4, #12]
 8009f98:	f04f 30ff 	mov.w	r0, #4294967295
 8009f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fa0:	6921      	ldr	r1, [r4, #16]
 8009fa2:	464a      	mov	r2, r9
 8009fa4:	f7ff fb46 	bl	8009634 <memcpy>
 8009fa8:	89a3      	ldrh	r3, [r4, #12]
 8009faa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fb2:	81a3      	strh	r3, [r4, #12]
 8009fb4:	6126      	str	r6, [r4, #16]
 8009fb6:	6165      	str	r5, [r4, #20]
 8009fb8:	444e      	add	r6, r9
 8009fba:	eba5 0509 	sub.w	r5, r5, r9
 8009fbe:	6026      	str	r6, [r4, #0]
 8009fc0:	60a5      	str	r5, [r4, #8]
 8009fc2:	463e      	mov	r6, r7
 8009fc4:	42be      	cmp	r6, r7
 8009fc6:	d900      	bls.n	8009fca <__ssputs_r+0x86>
 8009fc8:	463e      	mov	r6, r7
 8009fca:	6820      	ldr	r0, [r4, #0]
 8009fcc:	4632      	mov	r2, r6
 8009fce:	4641      	mov	r1, r8
 8009fd0:	f000 f966 	bl	800a2a0 <memmove>
 8009fd4:	68a3      	ldr	r3, [r4, #8]
 8009fd6:	1b9b      	subs	r3, r3, r6
 8009fd8:	60a3      	str	r3, [r4, #8]
 8009fda:	6823      	ldr	r3, [r4, #0]
 8009fdc:	4433      	add	r3, r6
 8009fde:	6023      	str	r3, [r4, #0]
 8009fe0:	2000      	movs	r0, #0
 8009fe2:	e7db      	b.n	8009f9c <__ssputs_r+0x58>
 8009fe4:	462a      	mov	r2, r5
 8009fe6:	f000 f981 	bl	800a2ec <_realloc_r>
 8009fea:	4606      	mov	r6, r0
 8009fec:	2800      	cmp	r0, #0
 8009fee:	d1e1      	bne.n	8009fb4 <__ssputs_r+0x70>
 8009ff0:	6921      	ldr	r1, [r4, #16]
 8009ff2:	4650      	mov	r0, sl
 8009ff4:	f7ff fec6 	bl	8009d84 <_free_r>
 8009ff8:	e7c7      	b.n	8009f8a <__ssputs_r+0x46>
	...

08009ffc <_svfiprintf_r>:
 8009ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a000:	4698      	mov	r8, r3
 800a002:	898b      	ldrh	r3, [r1, #12]
 800a004:	061b      	lsls	r3, r3, #24
 800a006:	b09d      	sub	sp, #116	; 0x74
 800a008:	4607      	mov	r7, r0
 800a00a:	460d      	mov	r5, r1
 800a00c:	4614      	mov	r4, r2
 800a00e:	d50e      	bpl.n	800a02e <_svfiprintf_r+0x32>
 800a010:	690b      	ldr	r3, [r1, #16]
 800a012:	b963      	cbnz	r3, 800a02e <_svfiprintf_r+0x32>
 800a014:	2140      	movs	r1, #64	; 0x40
 800a016:	f7ff ff21 	bl	8009e5c <_malloc_r>
 800a01a:	6028      	str	r0, [r5, #0]
 800a01c:	6128      	str	r0, [r5, #16]
 800a01e:	b920      	cbnz	r0, 800a02a <_svfiprintf_r+0x2e>
 800a020:	230c      	movs	r3, #12
 800a022:	603b      	str	r3, [r7, #0]
 800a024:	f04f 30ff 	mov.w	r0, #4294967295
 800a028:	e0d1      	b.n	800a1ce <_svfiprintf_r+0x1d2>
 800a02a:	2340      	movs	r3, #64	; 0x40
 800a02c:	616b      	str	r3, [r5, #20]
 800a02e:	2300      	movs	r3, #0
 800a030:	9309      	str	r3, [sp, #36]	; 0x24
 800a032:	2320      	movs	r3, #32
 800a034:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a038:	f8cd 800c 	str.w	r8, [sp, #12]
 800a03c:	2330      	movs	r3, #48	; 0x30
 800a03e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a1e8 <_svfiprintf_r+0x1ec>
 800a042:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a046:	f04f 0901 	mov.w	r9, #1
 800a04a:	4623      	mov	r3, r4
 800a04c:	469a      	mov	sl, r3
 800a04e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a052:	b10a      	cbz	r2, 800a058 <_svfiprintf_r+0x5c>
 800a054:	2a25      	cmp	r2, #37	; 0x25
 800a056:	d1f9      	bne.n	800a04c <_svfiprintf_r+0x50>
 800a058:	ebba 0b04 	subs.w	fp, sl, r4
 800a05c:	d00b      	beq.n	800a076 <_svfiprintf_r+0x7a>
 800a05e:	465b      	mov	r3, fp
 800a060:	4622      	mov	r2, r4
 800a062:	4629      	mov	r1, r5
 800a064:	4638      	mov	r0, r7
 800a066:	f7ff ff6d 	bl	8009f44 <__ssputs_r>
 800a06a:	3001      	adds	r0, #1
 800a06c:	f000 80aa 	beq.w	800a1c4 <_svfiprintf_r+0x1c8>
 800a070:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a072:	445a      	add	r2, fp
 800a074:	9209      	str	r2, [sp, #36]	; 0x24
 800a076:	f89a 3000 	ldrb.w	r3, [sl]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	f000 80a2 	beq.w	800a1c4 <_svfiprintf_r+0x1c8>
 800a080:	2300      	movs	r3, #0
 800a082:	f04f 32ff 	mov.w	r2, #4294967295
 800a086:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a08a:	f10a 0a01 	add.w	sl, sl, #1
 800a08e:	9304      	str	r3, [sp, #16]
 800a090:	9307      	str	r3, [sp, #28]
 800a092:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a096:	931a      	str	r3, [sp, #104]	; 0x68
 800a098:	4654      	mov	r4, sl
 800a09a:	2205      	movs	r2, #5
 800a09c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0a0:	4851      	ldr	r0, [pc, #324]	; (800a1e8 <_svfiprintf_r+0x1ec>)
 800a0a2:	f7f6 f89d 	bl	80001e0 <memchr>
 800a0a6:	9a04      	ldr	r2, [sp, #16]
 800a0a8:	b9d8      	cbnz	r0, 800a0e2 <_svfiprintf_r+0xe6>
 800a0aa:	06d0      	lsls	r0, r2, #27
 800a0ac:	bf44      	itt	mi
 800a0ae:	2320      	movmi	r3, #32
 800a0b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0b4:	0711      	lsls	r1, r2, #28
 800a0b6:	bf44      	itt	mi
 800a0b8:	232b      	movmi	r3, #43	; 0x2b
 800a0ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0be:	f89a 3000 	ldrb.w	r3, [sl]
 800a0c2:	2b2a      	cmp	r3, #42	; 0x2a
 800a0c4:	d015      	beq.n	800a0f2 <_svfiprintf_r+0xf6>
 800a0c6:	9a07      	ldr	r2, [sp, #28]
 800a0c8:	4654      	mov	r4, sl
 800a0ca:	2000      	movs	r0, #0
 800a0cc:	f04f 0c0a 	mov.w	ip, #10
 800a0d0:	4621      	mov	r1, r4
 800a0d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0d6:	3b30      	subs	r3, #48	; 0x30
 800a0d8:	2b09      	cmp	r3, #9
 800a0da:	d94e      	bls.n	800a17a <_svfiprintf_r+0x17e>
 800a0dc:	b1b0      	cbz	r0, 800a10c <_svfiprintf_r+0x110>
 800a0de:	9207      	str	r2, [sp, #28]
 800a0e0:	e014      	b.n	800a10c <_svfiprintf_r+0x110>
 800a0e2:	eba0 0308 	sub.w	r3, r0, r8
 800a0e6:	fa09 f303 	lsl.w	r3, r9, r3
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	9304      	str	r3, [sp, #16]
 800a0ee:	46a2      	mov	sl, r4
 800a0f0:	e7d2      	b.n	800a098 <_svfiprintf_r+0x9c>
 800a0f2:	9b03      	ldr	r3, [sp, #12]
 800a0f4:	1d19      	adds	r1, r3, #4
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	9103      	str	r1, [sp, #12]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	bfbb      	ittet	lt
 800a0fe:	425b      	neglt	r3, r3
 800a100:	f042 0202 	orrlt.w	r2, r2, #2
 800a104:	9307      	strge	r3, [sp, #28]
 800a106:	9307      	strlt	r3, [sp, #28]
 800a108:	bfb8      	it	lt
 800a10a:	9204      	strlt	r2, [sp, #16]
 800a10c:	7823      	ldrb	r3, [r4, #0]
 800a10e:	2b2e      	cmp	r3, #46	; 0x2e
 800a110:	d10c      	bne.n	800a12c <_svfiprintf_r+0x130>
 800a112:	7863      	ldrb	r3, [r4, #1]
 800a114:	2b2a      	cmp	r3, #42	; 0x2a
 800a116:	d135      	bne.n	800a184 <_svfiprintf_r+0x188>
 800a118:	9b03      	ldr	r3, [sp, #12]
 800a11a:	1d1a      	adds	r2, r3, #4
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	9203      	str	r2, [sp, #12]
 800a120:	2b00      	cmp	r3, #0
 800a122:	bfb8      	it	lt
 800a124:	f04f 33ff 	movlt.w	r3, #4294967295
 800a128:	3402      	adds	r4, #2
 800a12a:	9305      	str	r3, [sp, #20]
 800a12c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a1f8 <_svfiprintf_r+0x1fc>
 800a130:	7821      	ldrb	r1, [r4, #0]
 800a132:	2203      	movs	r2, #3
 800a134:	4650      	mov	r0, sl
 800a136:	f7f6 f853 	bl	80001e0 <memchr>
 800a13a:	b140      	cbz	r0, 800a14e <_svfiprintf_r+0x152>
 800a13c:	2340      	movs	r3, #64	; 0x40
 800a13e:	eba0 000a 	sub.w	r0, r0, sl
 800a142:	fa03 f000 	lsl.w	r0, r3, r0
 800a146:	9b04      	ldr	r3, [sp, #16]
 800a148:	4303      	orrs	r3, r0
 800a14a:	3401      	adds	r4, #1
 800a14c:	9304      	str	r3, [sp, #16]
 800a14e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a152:	4826      	ldr	r0, [pc, #152]	; (800a1ec <_svfiprintf_r+0x1f0>)
 800a154:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a158:	2206      	movs	r2, #6
 800a15a:	f7f6 f841 	bl	80001e0 <memchr>
 800a15e:	2800      	cmp	r0, #0
 800a160:	d038      	beq.n	800a1d4 <_svfiprintf_r+0x1d8>
 800a162:	4b23      	ldr	r3, [pc, #140]	; (800a1f0 <_svfiprintf_r+0x1f4>)
 800a164:	bb1b      	cbnz	r3, 800a1ae <_svfiprintf_r+0x1b2>
 800a166:	9b03      	ldr	r3, [sp, #12]
 800a168:	3307      	adds	r3, #7
 800a16a:	f023 0307 	bic.w	r3, r3, #7
 800a16e:	3308      	adds	r3, #8
 800a170:	9303      	str	r3, [sp, #12]
 800a172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a174:	4433      	add	r3, r6
 800a176:	9309      	str	r3, [sp, #36]	; 0x24
 800a178:	e767      	b.n	800a04a <_svfiprintf_r+0x4e>
 800a17a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a17e:	460c      	mov	r4, r1
 800a180:	2001      	movs	r0, #1
 800a182:	e7a5      	b.n	800a0d0 <_svfiprintf_r+0xd4>
 800a184:	2300      	movs	r3, #0
 800a186:	3401      	adds	r4, #1
 800a188:	9305      	str	r3, [sp, #20]
 800a18a:	4619      	mov	r1, r3
 800a18c:	f04f 0c0a 	mov.w	ip, #10
 800a190:	4620      	mov	r0, r4
 800a192:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a196:	3a30      	subs	r2, #48	; 0x30
 800a198:	2a09      	cmp	r2, #9
 800a19a:	d903      	bls.n	800a1a4 <_svfiprintf_r+0x1a8>
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d0c5      	beq.n	800a12c <_svfiprintf_r+0x130>
 800a1a0:	9105      	str	r1, [sp, #20]
 800a1a2:	e7c3      	b.n	800a12c <_svfiprintf_r+0x130>
 800a1a4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1a8:	4604      	mov	r4, r0
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	e7f0      	b.n	800a190 <_svfiprintf_r+0x194>
 800a1ae:	ab03      	add	r3, sp, #12
 800a1b0:	9300      	str	r3, [sp, #0]
 800a1b2:	462a      	mov	r2, r5
 800a1b4:	4b0f      	ldr	r3, [pc, #60]	; (800a1f4 <_svfiprintf_r+0x1f8>)
 800a1b6:	a904      	add	r1, sp, #16
 800a1b8:	4638      	mov	r0, r7
 800a1ba:	f7fd ffc9 	bl	8008150 <_printf_float>
 800a1be:	1c42      	adds	r2, r0, #1
 800a1c0:	4606      	mov	r6, r0
 800a1c2:	d1d6      	bne.n	800a172 <_svfiprintf_r+0x176>
 800a1c4:	89ab      	ldrh	r3, [r5, #12]
 800a1c6:	065b      	lsls	r3, r3, #25
 800a1c8:	f53f af2c 	bmi.w	800a024 <_svfiprintf_r+0x28>
 800a1cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1ce:	b01d      	add	sp, #116	; 0x74
 800a1d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1d4:	ab03      	add	r3, sp, #12
 800a1d6:	9300      	str	r3, [sp, #0]
 800a1d8:	462a      	mov	r2, r5
 800a1da:	4b06      	ldr	r3, [pc, #24]	; (800a1f4 <_svfiprintf_r+0x1f8>)
 800a1dc:	a904      	add	r1, sp, #16
 800a1de:	4638      	mov	r0, r7
 800a1e0:	f7fe fa5a 	bl	8008698 <_printf_i>
 800a1e4:	e7eb      	b.n	800a1be <_svfiprintf_r+0x1c2>
 800a1e6:	bf00      	nop
 800a1e8:	0800b104 	.word	0x0800b104
 800a1ec:	0800b10e 	.word	0x0800b10e
 800a1f0:	08008151 	.word	0x08008151
 800a1f4:	08009f45 	.word	0x08009f45
 800a1f8:	0800b10a 	.word	0x0800b10a

0800a1fc <_sbrk_r>:
 800a1fc:	b538      	push	{r3, r4, r5, lr}
 800a1fe:	4d06      	ldr	r5, [pc, #24]	; (800a218 <_sbrk_r+0x1c>)
 800a200:	2300      	movs	r3, #0
 800a202:	4604      	mov	r4, r0
 800a204:	4608      	mov	r0, r1
 800a206:	602b      	str	r3, [r5, #0]
 800a208:	f7f7 fe2c 	bl	8001e64 <_sbrk>
 800a20c:	1c43      	adds	r3, r0, #1
 800a20e:	d102      	bne.n	800a216 <_sbrk_r+0x1a>
 800a210:	682b      	ldr	r3, [r5, #0]
 800a212:	b103      	cbz	r3, 800a216 <_sbrk_r+0x1a>
 800a214:	6023      	str	r3, [r4, #0]
 800a216:	bd38      	pop	{r3, r4, r5, pc}
 800a218:	200004b4 	.word	0x200004b4

0800a21c <__assert_func>:
 800a21c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a21e:	4614      	mov	r4, r2
 800a220:	461a      	mov	r2, r3
 800a222:	4b09      	ldr	r3, [pc, #36]	; (800a248 <__assert_func+0x2c>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	4605      	mov	r5, r0
 800a228:	68d8      	ldr	r0, [r3, #12]
 800a22a:	b14c      	cbz	r4, 800a240 <__assert_func+0x24>
 800a22c:	4b07      	ldr	r3, [pc, #28]	; (800a24c <__assert_func+0x30>)
 800a22e:	9100      	str	r1, [sp, #0]
 800a230:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a234:	4906      	ldr	r1, [pc, #24]	; (800a250 <__assert_func+0x34>)
 800a236:	462b      	mov	r3, r5
 800a238:	f000 f80e 	bl	800a258 <fiprintf>
 800a23c:	f000 faac 	bl	800a798 <abort>
 800a240:	4b04      	ldr	r3, [pc, #16]	; (800a254 <__assert_func+0x38>)
 800a242:	461c      	mov	r4, r3
 800a244:	e7f3      	b.n	800a22e <__assert_func+0x12>
 800a246:	bf00      	nop
 800a248:	2000000c 	.word	0x2000000c
 800a24c:	0800b115 	.word	0x0800b115
 800a250:	0800b122 	.word	0x0800b122
 800a254:	0800b150 	.word	0x0800b150

0800a258 <fiprintf>:
 800a258:	b40e      	push	{r1, r2, r3}
 800a25a:	b503      	push	{r0, r1, lr}
 800a25c:	4601      	mov	r1, r0
 800a25e:	ab03      	add	r3, sp, #12
 800a260:	4805      	ldr	r0, [pc, #20]	; (800a278 <fiprintf+0x20>)
 800a262:	f853 2b04 	ldr.w	r2, [r3], #4
 800a266:	6800      	ldr	r0, [r0, #0]
 800a268:	9301      	str	r3, [sp, #4]
 800a26a:	f000 f897 	bl	800a39c <_vfiprintf_r>
 800a26e:	b002      	add	sp, #8
 800a270:	f85d eb04 	ldr.w	lr, [sp], #4
 800a274:	b003      	add	sp, #12
 800a276:	4770      	bx	lr
 800a278:	2000000c 	.word	0x2000000c

0800a27c <__ascii_mbtowc>:
 800a27c:	b082      	sub	sp, #8
 800a27e:	b901      	cbnz	r1, 800a282 <__ascii_mbtowc+0x6>
 800a280:	a901      	add	r1, sp, #4
 800a282:	b142      	cbz	r2, 800a296 <__ascii_mbtowc+0x1a>
 800a284:	b14b      	cbz	r3, 800a29a <__ascii_mbtowc+0x1e>
 800a286:	7813      	ldrb	r3, [r2, #0]
 800a288:	600b      	str	r3, [r1, #0]
 800a28a:	7812      	ldrb	r2, [r2, #0]
 800a28c:	1e10      	subs	r0, r2, #0
 800a28e:	bf18      	it	ne
 800a290:	2001      	movne	r0, #1
 800a292:	b002      	add	sp, #8
 800a294:	4770      	bx	lr
 800a296:	4610      	mov	r0, r2
 800a298:	e7fb      	b.n	800a292 <__ascii_mbtowc+0x16>
 800a29a:	f06f 0001 	mvn.w	r0, #1
 800a29e:	e7f8      	b.n	800a292 <__ascii_mbtowc+0x16>

0800a2a0 <memmove>:
 800a2a0:	4288      	cmp	r0, r1
 800a2a2:	b510      	push	{r4, lr}
 800a2a4:	eb01 0402 	add.w	r4, r1, r2
 800a2a8:	d902      	bls.n	800a2b0 <memmove+0x10>
 800a2aa:	4284      	cmp	r4, r0
 800a2ac:	4623      	mov	r3, r4
 800a2ae:	d807      	bhi.n	800a2c0 <memmove+0x20>
 800a2b0:	1e43      	subs	r3, r0, #1
 800a2b2:	42a1      	cmp	r1, r4
 800a2b4:	d008      	beq.n	800a2c8 <memmove+0x28>
 800a2b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a2be:	e7f8      	b.n	800a2b2 <memmove+0x12>
 800a2c0:	4402      	add	r2, r0
 800a2c2:	4601      	mov	r1, r0
 800a2c4:	428a      	cmp	r2, r1
 800a2c6:	d100      	bne.n	800a2ca <memmove+0x2a>
 800a2c8:	bd10      	pop	{r4, pc}
 800a2ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a2ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a2d2:	e7f7      	b.n	800a2c4 <memmove+0x24>

0800a2d4 <__malloc_lock>:
 800a2d4:	4801      	ldr	r0, [pc, #4]	; (800a2dc <__malloc_lock+0x8>)
 800a2d6:	f000 bc1f 	b.w	800ab18 <__retarget_lock_acquire_recursive>
 800a2da:	bf00      	nop
 800a2dc:	200004b8 	.word	0x200004b8

0800a2e0 <__malloc_unlock>:
 800a2e0:	4801      	ldr	r0, [pc, #4]	; (800a2e8 <__malloc_unlock+0x8>)
 800a2e2:	f000 bc1a 	b.w	800ab1a <__retarget_lock_release_recursive>
 800a2e6:	bf00      	nop
 800a2e8:	200004b8 	.word	0x200004b8

0800a2ec <_realloc_r>:
 800a2ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2f0:	4680      	mov	r8, r0
 800a2f2:	4614      	mov	r4, r2
 800a2f4:	460e      	mov	r6, r1
 800a2f6:	b921      	cbnz	r1, 800a302 <_realloc_r+0x16>
 800a2f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2fc:	4611      	mov	r1, r2
 800a2fe:	f7ff bdad 	b.w	8009e5c <_malloc_r>
 800a302:	b92a      	cbnz	r2, 800a310 <_realloc_r+0x24>
 800a304:	f7ff fd3e 	bl	8009d84 <_free_r>
 800a308:	4625      	mov	r5, r4
 800a30a:	4628      	mov	r0, r5
 800a30c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a310:	f000 fc6a 	bl	800abe8 <_malloc_usable_size_r>
 800a314:	4284      	cmp	r4, r0
 800a316:	4607      	mov	r7, r0
 800a318:	d802      	bhi.n	800a320 <_realloc_r+0x34>
 800a31a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a31e:	d812      	bhi.n	800a346 <_realloc_r+0x5a>
 800a320:	4621      	mov	r1, r4
 800a322:	4640      	mov	r0, r8
 800a324:	f7ff fd9a 	bl	8009e5c <_malloc_r>
 800a328:	4605      	mov	r5, r0
 800a32a:	2800      	cmp	r0, #0
 800a32c:	d0ed      	beq.n	800a30a <_realloc_r+0x1e>
 800a32e:	42bc      	cmp	r4, r7
 800a330:	4622      	mov	r2, r4
 800a332:	4631      	mov	r1, r6
 800a334:	bf28      	it	cs
 800a336:	463a      	movcs	r2, r7
 800a338:	f7ff f97c 	bl	8009634 <memcpy>
 800a33c:	4631      	mov	r1, r6
 800a33e:	4640      	mov	r0, r8
 800a340:	f7ff fd20 	bl	8009d84 <_free_r>
 800a344:	e7e1      	b.n	800a30a <_realloc_r+0x1e>
 800a346:	4635      	mov	r5, r6
 800a348:	e7df      	b.n	800a30a <_realloc_r+0x1e>

0800a34a <__sfputc_r>:
 800a34a:	6893      	ldr	r3, [r2, #8]
 800a34c:	3b01      	subs	r3, #1
 800a34e:	2b00      	cmp	r3, #0
 800a350:	b410      	push	{r4}
 800a352:	6093      	str	r3, [r2, #8]
 800a354:	da08      	bge.n	800a368 <__sfputc_r+0x1e>
 800a356:	6994      	ldr	r4, [r2, #24]
 800a358:	42a3      	cmp	r3, r4
 800a35a:	db01      	blt.n	800a360 <__sfputc_r+0x16>
 800a35c:	290a      	cmp	r1, #10
 800a35e:	d103      	bne.n	800a368 <__sfputc_r+0x1e>
 800a360:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a364:	f000 b94a 	b.w	800a5fc <__swbuf_r>
 800a368:	6813      	ldr	r3, [r2, #0]
 800a36a:	1c58      	adds	r0, r3, #1
 800a36c:	6010      	str	r0, [r2, #0]
 800a36e:	7019      	strb	r1, [r3, #0]
 800a370:	4608      	mov	r0, r1
 800a372:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a376:	4770      	bx	lr

0800a378 <__sfputs_r>:
 800a378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a37a:	4606      	mov	r6, r0
 800a37c:	460f      	mov	r7, r1
 800a37e:	4614      	mov	r4, r2
 800a380:	18d5      	adds	r5, r2, r3
 800a382:	42ac      	cmp	r4, r5
 800a384:	d101      	bne.n	800a38a <__sfputs_r+0x12>
 800a386:	2000      	movs	r0, #0
 800a388:	e007      	b.n	800a39a <__sfputs_r+0x22>
 800a38a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a38e:	463a      	mov	r2, r7
 800a390:	4630      	mov	r0, r6
 800a392:	f7ff ffda 	bl	800a34a <__sfputc_r>
 800a396:	1c43      	adds	r3, r0, #1
 800a398:	d1f3      	bne.n	800a382 <__sfputs_r+0xa>
 800a39a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a39c <_vfiprintf_r>:
 800a39c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3a0:	460d      	mov	r5, r1
 800a3a2:	b09d      	sub	sp, #116	; 0x74
 800a3a4:	4614      	mov	r4, r2
 800a3a6:	4698      	mov	r8, r3
 800a3a8:	4606      	mov	r6, r0
 800a3aa:	b118      	cbz	r0, 800a3b4 <_vfiprintf_r+0x18>
 800a3ac:	6983      	ldr	r3, [r0, #24]
 800a3ae:	b90b      	cbnz	r3, 800a3b4 <_vfiprintf_r+0x18>
 800a3b0:	f000 fb14 	bl	800a9dc <__sinit>
 800a3b4:	4b89      	ldr	r3, [pc, #548]	; (800a5dc <_vfiprintf_r+0x240>)
 800a3b6:	429d      	cmp	r5, r3
 800a3b8:	d11b      	bne.n	800a3f2 <_vfiprintf_r+0x56>
 800a3ba:	6875      	ldr	r5, [r6, #4]
 800a3bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3be:	07d9      	lsls	r1, r3, #31
 800a3c0:	d405      	bmi.n	800a3ce <_vfiprintf_r+0x32>
 800a3c2:	89ab      	ldrh	r3, [r5, #12]
 800a3c4:	059a      	lsls	r2, r3, #22
 800a3c6:	d402      	bmi.n	800a3ce <_vfiprintf_r+0x32>
 800a3c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3ca:	f000 fba5 	bl	800ab18 <__retarget_lock_acquire_recursive>
 800a3ce:	89ab      	ldrh	r3, [r5, #12]
 800a3d0:	071b      	lsls	r3, r3, #28
 800a3d2:	d501      	bpl.n	800a3d8 <_vfiprintf_r+0x3c>
 800a3d4:	692b      	ldr	r3, [r5, #16]
 800a3d6:	b9eb      	cbnz	r3, 800a414 <_vfiprintf_r+0x78>
 800a3d8:	4629      	mov	r1, r5
 800a3da:	4630      	mov	r0, r6
 800a3dc:	f000 f96e 	bl	800a6bc <__swsetup_r>
 800a3e0:	b1c0      	cbz	r0, 800a414 <_vfiprintf_r+0x78>
 800a3e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3e4:	07dc      	lsls	r4, r3, #31
 800a3e6:	d50e      	bpl.n	800a406 <_vfiprintf_r+0x6a>
 800a3e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a3ec:	b01d      	add	sp, #116	; 0x74
 800a3ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3f2:	4b7b      	ldr	r3, [pc, #492]	; (800a5e0 <_vfiprintf_r+0x244>)
 800a3f4:	429d      	cmp	r5, r3
 800a3f6:	d101      	bne.n	800a3fc <_vfiprintf_r+0x60>
 800a3f8:	68b5      	ldr	r5, [r6, #8]
 800a3fa:	e7df      	b.n	800a3bc <_vfiprintf_r+0x20>
 800a3fc:	4b79      	ldr	r3, [pc, #484]	; (800a5e4 <_vfiprintf_r+0x248>)
 800a3fe:	429d      	cmp	r5, r3
 800a400:	bf08      	it	eq
 800a402:	68f5      	ldreq	r5, [r6, #12]
 800a404:	e7da      	b.n	800a3bc <_vfiprintf_r+0x20>
 800a406:	89ab      	ldrh	r3, [r5, #12]
 800a408:	0598      	lsls	r0, r3, #22
 800a40a:	d4ed      	bmi.n	800a3e8 <_vfiprintf_r+0x4c>
 800a40c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a40e:	f000 fb84 	bl	800ab1a <__retarget_lock_release_recursive>
 800a412:	e7e9      	b.n	800a3e8 <_vfiprintf_r+0x4c>
 800a414:	2300      	movs	r3, #0
 800a416:	9309      	str	r3, [sp, #36]	; 0x24
 800a418:	2320      	movs	r3, #32
 800a41a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a41e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a422:	2330      	movs	r3, #48	; 0x30
 800a424:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a5e8 <_vfiprintf_r+0x24c>
 800a428:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a42c:	f04f 0901 	mov.w	r9, #1
 800a430:	4623      	mov	r3, r4
 800a432:	469a      	mov	sl, r3
 800a434:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a438:	b10a      	cbz	r2, 800a43e <_vfiprintf_r+0xa2>
 800a43a:	2a25      	cmp	r2, #37	; 0x25
 800a43c:	d1f9      	bne.n	800a432 <_vfiprintf_r+0x96>
 800a43e:	ebba 0b04 	subs.w	fp, sl, r4
 800a442:	d00b      	beq.n	800a45c <_vfiprintf_r+0xc0>
 800a444:	465b      	mov	r3, fp
 800a446:	4622      	mov	r2, r4
 800a448:	4629      	mov	r1, r5
 800a44a:	4630      	mov	r0, r6
 800a44c:	f7ff ff94 	bl	800a378 <__sfputs_r>
 800a450:	3001      	adds	r0, #1
 800a452:	f000 80aa 	beq.w	800a5aa <_vfiprintf_r+0x20e>
 800a456:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a458:	445a      	add	r2, fp
 800a45a:	9209      	str	r2, [sp, #36]	; 0x24
 800a45c:	f89a 3000 	ldrb.w	r3, [sl]
 800a460:	2b00      	cmp	r3, #0
 800a462:	f000 80a2 	beq.w	800a5aa <_vfiprintf_r+0x20e>
 800a466:	2300      	movs	r3, #0
 800a468:	f04f 32ff 	mov.w	r2, #4294967295
 800a46c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a470:	f10a 0a01 	add.w	sl, sl, #1
 800a474:	9304      	str	r3, [sp, #16]
 800a476:	9307      	str	r3, [sp, #28]
 800a478:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a47c:	931a      	str	r3, [sp, #104]	; 0x68
 800a47e:	4654      	mov	r4, sl
 800a480:	2205      	movs	r2, #5
 800a482:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a486:	4858      	ldr	r0, [pc, #352]	; (800a5e8 <_vfiprintf_r+0x24c>)
 800a488:	f7f5 feaa 	bl	80001e0 <memchr>
 800a48c:	9a04      	ldr	r2, [sp, #16]
 800a48e:	b9d8      	cbnz	r0, 800a4c8 <_vfiprintf_r+0x12c>
 800a490:	06d1      	lsls	r1, r2, #27
 800a492:	bf44      	itt	mi
 800a494:	2320      	movmi	r3, #32
 800a496:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a49a:	0713      	lsls	r3, r2, #28
 800a49c:	bf44      	itt	mi
 800a49e:	232b      	movmi	r3, #43	; 0x2b
 800a4a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4a4:	f89a 3000 	ldrb.w	r3, [sl]
 800a4a8:	2b2a      	cmp	r3, #42	; 0x2a
 800a4aa:	d015      	beq.n	800a4d8 <_vfiprintf_r+0x13c>
 800a4ac:	9a07      	ldr	r2, [sp, #28]
 800a4ae:	4654      	mov	r4, sl
 800a4b0:	2000      	movs	r0, #0
 800a4b2:	f04f 0c0a 	mov.w	ip, #10
 800a4b6:	4621      	mov	r1, r4
 800a4b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4bc:	3b30      	subs	r3, #48	; 0x30
 800a4be:	2b09      	cmp	r3, #9
 800a4c0:	d94e      	bls.n	800a560 <_vfiprintf_r+0x1c4>
 800a4c2:	b1b0      	cbz	r0, 800a4f2 <_vfiprintf_r+0x156>
 800a4c4:	9207      	str	r2, [sp, #28]
 800a4c6:	e014      	b.n	800a4f2 <_vfiprintf_r+0x156>
 800a4c8:	eba0 0308 	sub.w	r3, r0, r8
 800a4cc:	fa09 f303 	lsl.w	r3, r9, r3
 800a4d0:	4313      	orrs	r3, r2
 800a4d2:	9304      	str	r3, [sp, #16]
 800a4d4:	46a2      	mov	sl, r4
 800a4d6:	e7d2      	b.n	800a47e <_vfiprintf_r+0xe2>
 800a4d8:	9b03      	ldr	r3, [sp, #12]
 800a4da:	1d19      	adds	r1, r3, #4
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	9103      	str	r1, [sp, #12]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	bfbb      	ittet	lt
 800a4e4:	425b      	neglt	r3, r3
 800a4e6:	f042 0202 	orrlt.w	r2, r2, #2
 800a4ea:	9307      	strge	r3, [sp, #28]
 800a4ec:	9307      	strlt	r3, [sp, #28]
 800a4ee:	bfb8      	it	lt
 800a4f0:	9204      	strlt	r2, [sp, #16]
 800a4f2:	7823      	ldrb	r3, [r4, #0]
 800a4f4:	2b2e      	cmp	r3, #46	; 0x2e
 800a4f6:	d10c      	bne.n	800a512 <_vfiprintf_r+0x176>
 800a4f8:	7863      	ldrb	r3, [r4, #1]
 800a4fa:	2b2a      	cmp	r3, #42	; 0x2a
 800a4fc:	d135      	bne.n	800a56a <_vfiprintf_r+0x1ce>
 800a4fe:	9b03      	ldr	r3, [sp, #12]
 800a500:	1d1a      	adds	r2, r3, #4
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	9203      	str	r2, [sp, #12]
 800a506:	2b00      	cmp	r3, #0
 800a508:	bfb8      	it	lt
 800a50a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a50e:	3402      	adds	r4, #2
 800a510:	9305      	str	r3, [sp, #20]
 800a512:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a5f8 <_vfiprintf_r+0x25c>
 800a516:	7821      	ldrb	r1, [r4, #0]
 800a518:	2203      	movs	r2, #3
 800a51a:	4650      	mov	r0, sl
 800a51c:	f7f5 fe60 	bl	80001e0 <memchr>
 800a520:	b140      	cbz	r0, 800a534 <_vfiprintf_r+0x198>
 800a522:	2340      	movs	r3, #64	; 0x40
 800a524:	eba0 000a 	sub.w	r0, r0, sl
 800a528:	fa03 f000 	lsl.w	r0, r3, r0
 800a52c:	9b04      	ldr	r3, [sp, #16]
 800a52e:	4303      	orrs	r3, r0
 800a530:	3401      	adds	r4, #1
 800a532:	9304      	str	r3, [sp, #16]
 800a534:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a538:	482c      	ldr	r0, [pc, #176]	; (800a5ec <_vfiprintf_r+0x250>)
 800a53a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a53e:	2206      	movs	r2, #6
 800a540:	f7f5 fe4e 	bl	80001e0 <memchr>
 800a544:	2800      	cmp	r0, #0
 800a546:	d03f      	beq.n	800a5c8 <_vfiprintf_r+0x22c>
 800a548:	4b29      	ldr	r3, [pc, #164]	; (800a5f0 <_vfiprintf_r+0x254>)
 800a54a:	bb1b      	cbnz	r3, 800a594 <_vfiprintf_r+0x1f8>
 800a54c:	9b03      	ldr	r3, [sp, #12]
 800a54e:	3307      	adds	r3, #7
 800a550:	f023 0307 	bic.w	r3, r3, #7
 800a554:	3308      	adds	r3, #8
 800a556:	9303      	str	r3, [sp, #12]
 800a558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a55a:	443b      	add	r3, r7
 800a55c:	9309      	str	r3, [sp, #36]	; 0x24
 800a55e:	e767      	b.n	800a430 <_vfiprintf_r+0x94>
 800a560:	fb0c 3202 	mla	r2, ip, r2, r3
 800a564:	460c      	mov	r4, r1
 800a566:	2001      	movs	r0, #1
 800a568:	e7a5      	b.n	800a4b6 <_vfiprintf_r+0x11a>
 800a56a:	2300      	movs	r3, #0
 800a56c:	3401      	adds	r4, #1
 800a56e:	9305      	str	r3, [sp, #20]
 800a570:	4619      	mov	r1, r3
 800a572:	f04f 0c0a 	mov.w	ip, #10
 800a576:	4620      	mov	r0, r4
 800a578:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a57c:	3a30      	subs	r2, #48	; 0x30
 800a57e:	2a09      	cmp	r2, #9
 800a580:	d903      	bls.n	800a58a <_vfiprintf_r+0x1ee>
 800a582:	2b00      	cmp	r3, #0
 800a584:	d0c5      	beq.n	800a512 <_vfiprintf_r+0x176>
 800a586:	9105      	str	r1, [sp, #20]
 800a588:	e7c3      	b.n	800a512 <_vfiprintf_r+0x176>
 800a58a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a58e:	4604      	mov	r4, r0
 800a590:	2301      	movs	r3, #1
 800a592:	e7f0      	b.n	800a576 <_vfiprintf_r+0x1da>
 800a594:	ab03      	add	r3, sp, #12
 800a596:	9300      	str	r3, [sp, #0]
 800a598:	462a      	mov	r2, r5
 800a59a:	4b16      	ldr	r3, [pc, #88]	; (800a5f4 <_vfiprintf_r+0x258>)
 800a59c:	a904      	add	r1, sp, #16
 800a59e:	4630      	mov	r0, r6
 800a5a0:	f7fd fdd6 	bl	8008150 <_printf_float>
 800a5a4:	4607      	mov	r7, r0
 800a5a6:	1c78      	adds	r0, r7, #1
 800a5a8:	d1d6      	bne.n	800a558 <_vfiprintf_r+0x1bc>
 800a5aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5ac:	07d9      	lsls	r1, r3, #31
 800a5ae:	d405      	bmi.n	800a5bc <_vfiprintf_r+0x220>
 800a5b0:	89ab      	ldrh	r3, [r5, #12]
 800a5b2:	059a      	lsls	r2, r3, #22
 800a5b4:	d402      	bmi.n	800a5bc <_vfiprintf_r+0x220>
 800a5b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5b8:	f000 faaf 	bl	800ab1a <__retarget_lock_release_recursive>
 800a5bc:	89ab      	ldrh	r3, [r5, #12]
 800a5be:	065b      	lsls	r3, r3, #25
 800a5c0:	f53f af12 	bmi.w	800a3e8 <_vfiprintf_r+0x4c>
 800a5c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5c6:	e711      	b.n	800a3ec <_vfiprintf_r+0x50>
 800a5c8:	ab03      	add	r3, sp, #12
 800a5ca:	9300      	str	r3, [sp, #0]
 800a5cc:	462a      	mov	r2, r5
 800a5ce:	4b09      	ldr	r3, [pc, #36]	; (800a5f4 <_vfiprintf_r+0x258>)
 800a5d0:	a904      	add	r1, sp, #16
 800a5d2:	4630      	mov	r0, r6
 800a5d4:	f7fe f860 	bl	8008698 <_printf_i>
 800a5d8:	e7e4      	b.n	800a5a4 <_vfiprintf_r+0x208>
 800a5da:	bf00      	nop
 800a5dc:	0800b27c 	.word	0x0800b27c
 800a5e0:	0800b29c 	.word	0x0800b29c
 800a5e4:	0800b25c 	.word	0x0800b25c
 800a5e8:	0800b104 	.word	0x0800b104
 800a5ec:	0800b10e 	.word	0x0800b10e
 800a5f0:	08008151 	.word	0x08008151
 800a5f4:	0800a379 	.word	0x0800a379
 800a5f8:	0800b10a 	.word	0x0800b10a

0800a5fc <__swbuf_r>:
 800a5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5fe:	460e      	mov	r6, r1
 800a600:	4614      	mov	r4, r2
 800a602:	4605      	mov	r5, r0
 800a604:	b118      	cbz	r0, 800a60e <__swbuf_r+0x12>
 800a606:	6983      	ldr	r3, [r0, #24]
 800a608:	b90b      	cbnz	r3, 800a60e <__swbuf_r+0x12>
 800a60a:	f000 f9e7 	bl	800a9dc <__sinit>
 800a60e:	4b21      	ldr	r3, [pc, #132]	; (800a694 <__swbuf_r+0x98>)
 800a610:	429c      	cmp	r4, r3
 800a612:	d12b      	bne.n	800a66c <__swbuf_r+0x70>
 800a614:	686c      	ldr	r4, [r5, #4]
 800a616:	69a3      	ldr	r3, [r4, #24]
 800a618:	60a3      	str	r3, [r4, #8]
 800a61a:	89a3      	ldrh	r3, [r4, #12]
 800a61c:	071a      	lsls	r2, r3, #28
 800a61e:	d52f      	bpl.n	800a680 <__swbuf_r+0x84>
 800a620:	6923      	ldr	r3, [r4, #16]
 800a622:	b36b      	cbz	r3, 800a680 <__swbuf_r+0x84>
 800a624:	6923      	ldr	r3, [r4, #16]
 800a626:	6820      	ldr	r0, [r4, #0]
 800a628:	1ac0      	subs	r0, r0, r3
 800a62a:	6963      	ldr	r3, [r4, #20]
 800a62c:	b2f6      	uxtb	r6, r6
 800a62e:	4283      	cmp	r3, r0
 800a630:	4637      	mov	r7, r6
 800a632:	dc04      	bgt.n	800a63e <__swbuf_r+0x42>
 800a634:	4621      	mov	r1, r4
 800a636:	4628      	mov	r0, r5
 800a638:	f000 f93c 	bl	800a8b4 <_fflush_r>
 800a63c:	bb30      	cbnz	r0, 800a68c <__swbuf_r+0x90>
 800a63e:	68a3      	ldr	r3, [r4, #8]
 800a640:	3b01      	subs	r3, #1
 800a642:	60a3      	str	r3, [r4, #8]
 800a644:	6823      	ldr	r3, [r4, #0]
 800a646:	1c5a      	adds	r2, r3, #1
 800a648:	6022      	str	r2, [r4, #0]
 800a64a:	701e      	strb	r6, [r3, #0]
 800a64c:	6963      	ldr	r3, [r4, #20]
 800a64e:	3001      	adds	r0, #1
 800a650:	4283      	cmp	r3, r0
 800a652:	d004      	beq.n	800a65e <__swbuf_r+0x62>
 800a654:	89a3      	ldrh	r3, [r4, #12]
 800a656:	07db      	lsls	r3, r3, #31
 800a658:	d506      	bpl.n	800a668 <__swbuf_r+0x6c>
 800a65a:	2e0a      	cmp	r6, #10
 800a65c:	d104      	bne.n	800a668 <__swbuf_r+0x6c>
 800a65e:	4621      	mov	r1, r4
 800a660:	4628      	mov	r0, r5
 800a662:	f000 f927 	bl	800a8b4 <_fflush_r>
 800a666:	b988      	cbnz	r0, 800a68c <__swbuf_r+0x90>
 800a668:	4638      	mov	r0, r7
 800a66a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a66c:	4b0a      	ldr	r3, [pc, #40]	; (800a698 <__swbuf_r+0x9c>)
 800a66e:	429c      	cmp	r4, r3
 800a670:	d101      	bne.n	800a676 <__swbuf_r+0x7a>
 800a672:	68ac      	ldr	r4, [r5, #8]
 800a674:	e7cf      	b.n	800a616 <__swbuf_r+0x1a>
 800a676:	4b09      	ldr	r3, [pc, #36]	; (800a69c <__swbuf_r+0xa0>)
 800a678:	429c      	cmp	r4, r3
 800a67a:	bf08      	it	eq
 800a67c:	68ec      	ldreq	r4, [r5, #12]
 800a67e:	e7ca      	b.n	800a616 <__swbuf_r+0x1a>
 800a680:	4621      	mov	r1, r4
 800a682:	4628      	mov	r0, r5
 800a684:	f000 f81a 	bl	800a6bc <__swsetup_r>
 800a688:	2800      	cmp	r0, #0
 800a68a:	d0cb      	beq.n	800a624 <__swbuf_r+0x28>
 800a68c:	f04f 37ff 	mov.w	r7, #4294967295
 800a690:	e7ea      	b.n	800a668 <__swbuf_r+0x6c>
 800a692:	bf00      	nop
 800a694:	0800b27c 	.word	0x0800b27c
 800a698:	0800b29c 	.word	0x0800b29c
 800a69c:	0800b25c 	.word	0x0800b25c

0800a6a0 <__ascii_wctomb>:
 800a6a0:	b149      	cbz	r1, 800a6b6 <__ascii_wctomb+0x16>
 800a6a2:	2aff      	cmp	r2, #255	; 0xff
 800a6a4:	bf85      	ittet	hi
 800a6a6:	238a      	movhi	r3, #138	; 0x8a
 800a6a8:	6003      	strhi	r3, [r0, #0]
 800a6aa:	700a      	strbls	r2, [r1, #0]
 800a6ac:	f04f 30ff 	movhi.w	r0, #4294967295
 800a6b0:	bf98      	it	ls
 800a6b2:	2001      	movls	r0, #1
 800a6b4:	4770      	bx	lr
 800a6b6:	4608      	mov	r0, r1
 800a6b8:	4770      	bx	lr
	...

0800a6bc <__swsetup_r>:
 800a6bc:	4b32      	ldr	r3, [pc, #200]	; (800a788 <__swsetup_r+0xcc>)
 800a6be:	b570      	push	{r4, r5, r6, lr}
 800a6c0:	681d      	ldr	r5, [r3, #0]
 800a6c2:	4606      	mov	r6, r0
 800a6c4:	460c      	mov	r4, r1
 800a6c6:	b125      	cbz	r5, 800a6d2 <__swsetup_r+0x16>
 800a6c8:	69ab      	ldr	r3, [r5, #24]
 800a6ca:	b913      	cbnz	r3, 800a6d2 <__swsetup_r+0x16>
 800a6cc:	4628      	mov	r0, r5
 800a6ce:	f000 f985 	bl	800a9dc <__sinit>
 800a6d2:	4b2e      	ldr	r3, [pc, #184]	; (800a78c <__swsetup_r+0xd0>)
 800a6d4:	429c      	cmp	r4, r3
 800a6d6:	d10f      	bne.n	800a6f8 <__swsetup_r+0x3c>
 800a6d8:	686c      	ldr	r4, [r5, #4]
 800a6da:	89a3      	ldrh	r3, [r4, #12]
 800a6dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6e0:	0719      	lsls	r1, r3, #28
 800a6e2:	d42c      	bmi.n	800a73e <__swsetup_r+0x82>
 800a6e4:	06dd      	lsls	r5, r3, #27
 800a6e6:	d411      	bmi.n	800a70c <__swsetup_r+0x50>
 800a6e8:	2309      	movs	r3, #9
 800a6ea:	6033      	str	r3, [r6, #0]
 800a6ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a6f0:	81a3      	strh	r3, [r4, #12]
 800a6f2:	f04f 30ff 	mov.w	r0, #4294967295
 800a6f6:	e03e      	b.n	800a776 <__swsetup_r+0xba>
 800a6f8:	4b25      	ldr	r3, [pc, #148]	; (800a790 <__swsetup_r+0xd4>)
 800a6fa:	429c      	cmp	r4, r3
 800a6fc:	d101      	bne.n	800a702 <__swsetup_r+0x46>
 800a6fe:	68ac      	ldr	r4, [r5, #8]
 800a700:	e7eb      	b.n	800a6da <__swsetup_r+0x1e>
 800a702:	4b24      	ldr	r3, [pc, #144]	; (800a794 <__swsetup_r+0xd8>)
 800a704:	429c      	cmp	r4, r3
 800a706:	bf08      	it	eq
 800a708:	68ec      	ldreq	r4, [r5, #12]
 800a70a:	e7e6      	b.n	800a6da <__swsetup_r+0x1e>
 800a70c:	0758      	lsls	r0, r3, #29
 800a70e:	d512      	bpl.n	800a736 <__swsetup_r+0x7a>
 800a710:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a712:	b141      	cbz	r1, 800a726 <__swsetup_r+0x6a>
 800a714:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a718:	4299      	cmp	r1, r3
 800a71a:	d002      	beq.n	800a722 <__swsetup_r+0x66>
 800a71c:	4630      	mov	r0, r6
 800a71e:	f7ff fb31 	bl	8009d84 <_free_r>
 800a722:	2300      	movs	r3, #0
 800a724:	6363      	str	r3, [r4, #52]	; 0x34
 800a726:	89a3      	ldrh	r3, [r4, #12]
 800a728:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a72c:	81a3      	strh	r3, [r4, #12]
 800a72e:	2300      	movs	r3, #0
 800a730:	6063      	str	r3, [r4, #4]
 800a732:	6923      	ldr	r3, [r4, #16]
 800a734:	6023      	str	r3, [r4, #0]
 800a736:	89a3      	ldrh	r3, [r4, #12]
 800a738:	f043 0308 	orr.w	r3, r3, #8
 800a73c:	81a3      	strh	r3, [r4, #12]
 800a73e:	6923      	ldr	r3, [r4, #16]
 800a740:	b94b      	cbnz	r3, 800a756 <__swsetup_r+0x9a>
 800a742:	89a3      	ldrh	r3, [r4, #12]
 800a744:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a74c:	d003      	beq.n	800a756 <__swsetup_r+0x9a>
 800a74e:	4621      	mov	r1, r4
 800a750:	4630      	mov	r0, r6
 800a752:	f000 fa09 	bl	800ab68 <__smakebuf_r>
 800a756:	89a0      	ldrh	r0, [r4, #12]
 800a758:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a75c:	f010 0301 	ands.w	r3, r0, #1
 800a760:	d00a      	beq.n	800a778 <__swsetup_r+0xbc>
 800a762:	2300      	movs	r3, #0
 800a764:	60a3      	str	r3, [r4, #8]
 800a766:	6963      	ldr	r3, [r4, #20]
 800a768:	425b      	negs	r3, r3
 800a76a:	61a3      	str	r3, [r4, #24]
 800a76c:	6923      	ldr	r3, [r4, #16]
 800a76e:	b943      	cbnz	r3, 800a782 <__swsetup_r+0xc6>
 800a770:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a774:	d1ba      	bne.n	800a6ec <__swsetup_r+0x30>
 800a776:	bd70      	pop	{r4, r5, r6, pc}
 800a778:	0781      	lsls	r1, r0, #30
 800a77a:	bf58      	it	pl
 800a77c:	6963      	ldrpl	r3, [r4, #20]
 800a77e:	60a3      	str	r3, [r4, #8]
 800a780:	e7f4      	b.n	800a76c <__swsetup_r+0xb0>
 800a782:	2000      	movs	r0, #0
 800a784:	e7f7      	b.n	800a776 <__swsetup_r+0xba>
 800a786:	bf00      	nop
 800a788:	2000000c 	.word	0x2000000c
 800a78c:	0800b27c 	.word	0x0800b27c
 800a790:	0800b29c 	.word	0x0800b29c
 800a794:	0800b25c 	.word	0x0800b25c

0800a798 <abort>:
 800a798:	b508      	push	{r3, lr}
 800a79a:	2006      	movs	r0, #6
 800a79c:	f000 fa54 	bl	800ac48 <raise>
 800a7a0:	2001      	movs	r0, #1
 800a7a2:	f7f7 fae7 	bl	8001d74 <_exit>
	...

0800a7a8 <__sflush_r>:
 800a7a8:	898a      	ldrh	r2, [r1, #12]
 800a7aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7ae:	4605      	mov	r5, r0
 800a7b0:	0710      	lsls	r0, r2, #28
 800a7b2:	460c      	mov	r4, r1
 800a7b4:	d458      	bmi.n	800a868 <__sflush_r+0xc0>
 800a7b6:	684b      	ldr	r3, [r1, #4]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	dc05      	bgt.n	800a7c8 <__sflush_r+0x20>
 800a7bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	dc02      	bgt.n	800a7c8 <__sflush_r+0x20>
 800a7c2:	2000      	movs	r0, #0
 800a7c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7ca:	2e00      	cmp	r6, #0
 800a7cc:	d0f9      	beq.n	800a7c2 <__sflush_r+0x1a>
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a7d4:	682f      	ldr	r7, [r5, #0]
 800a7d6:	602b      	str	r3, [r5, #0]
 800a7d8:	d032      	beq.n	800a840 <__sflush_r+0x98>
 800a7da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a7dc:	89a3      	ldrh	r3, [r4, #12]
 800a7de:	075a      	lsls	r2, r3, #29
 800a7e0:	d505      	bpl.n	800a7ee <__sflush_r+0x46>
 800a7e2:	6863      	ldr	r3, [r4, #4]
 800a7e4:	1ac0      	subs	r0, r0, r3
 800a7e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a7e8:	b10b      	cbz	r3, 800a7ee <__sflush_r+0x46>
 800a7ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a7ec:	1ac0      	subs	r0, r0, r3
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	4602      	mov	r2, r0
 800a7f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7f4:	6a21      	ldr	r1, [r4, #32]
 800a7f6:	4628      	mov	r0, r5
 800a7f8:	47b0      	blx	r6
 800a7fa:	1c43      	adds	r3, r0, #1
 800a7fc:	89a3      	ldrh	r3, [r4, #12]
 800a7fe:	d106      	bne.n	800a80e <__sflush_r+0x66>
 800a800:	6829      	ldr	r1, [r5, #0]
 800a802:	291d      	cmp	r1, #29
 800a804:	d82c      	bhi.n	800a860 <__sflush_r+0xb8>
 800a806:	4a2a      	ldr	r2, [pc, #168]	; (800a8b0 <__sflush_r+0x108>)
 800a808:	40ca      	lsrs	r2, r1
 800a80a:	07d6      	lsls	r6, r2, #31
 800a80c:	d528      	bpl.n	800a860 <__sflush_r+0xb8>
 800a80e:	2200      	movs	r2, #0
 800a810:	6062      	str	r2, [r4, #4]
 800a812:	04d9      	lsls	r1, r3, #19
 800a814:	6922      	ldr	r2, [r4, #16]
 800a816:	6022      	str	r2, [r4, #0]
 800a818:	d504      	bpl.n	800a824 <__sflush_r+0x7c>
 800a81a:	1c42      	adds	r2, r0, #1
 800a81c:	d101      	bne.n	800a822 <__sflush_r+0x7a>
 800a81e:	682b      	ldr	r3, [r5, #0]
 800a820:	b903      	cbnz	r3, 800a824 <__sflush_r+0x7c>
 800a822:	6560      	str	r0, [r4, #84]	; 0x54
 800a824:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a826:	602f      	str	r7, [r5, #0]
 800a828:	2900      	cmp	r1, #0
 800a82a:	d0ca      	beq.n	800a7c2 <__sflush_r+0x1a>
 800a82c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a830:	4299      	cmp	r1, r3
 800a832:	d002      	beq.n	800a83a <__sflush_r+0x92>
 800a834:	4628      	mov	r0, r5
 800a836:	f7ff faa5 	bl	8009d84 <_free_r>
 800a83a:	2000      	movs	r0, #0
 800a83c:	6360      	str	r0, [r4, #52]	; 0x34
 800a83e:	e7c1      	b.n	800a7c4 <__sflush_r+0x1c>
 800a840:	6a21      	ldr	r1, [r4, #32]
 800a842:	2301      	movs	r3, #1
 800a844:	4628      	mov	r0, r5
 800a846:	47b0      	blx	r6
 800a848:	1c41      	adds	r1, r0, #1
 800a84a:	d1c7      	bne.n	800a7dc <__sflush_r+0x34>
 800a84c:	682b      	ldr	r3, [r5, #0]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d0c4      	beq.n	800a7dc <__sflush_r+0x34>
 800a852:	2b1d      	cmp	r3, #29
 800a854:	d001      	beq.n	800a85a <__sflush_r+0xb2>
 800a856:	2b16      	cmp	r3, #22
 800a858:	d101      	bne.n	800a85e <__sflush_r+0xb6>
 800a85a:	602f      	str	r7, [r5, #0]
 800a85c:	e7b1      	b.n	800a7c2 <__sflush_r+0x1a>
 800a85e:	89a3      	ldrh	r3, [r4, #12]
 800a860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a864:	81a3      	strh	r3, [r4, #12]
 800a866:	e7ad      	b.n	800a7c4 <__sflush_r+0x1c>
 800a868:	690f      	ldr	r7, [r1, #16]
 800a86a:	2f00      	cmp	r7, #0
 800a86c:	d0a9      	beq.n	800a7c2 <__sflush_r+0x1a>
 800a86e:	0793      	lsls	r3, r2, #30
 800a870:	680e      	ldr	r6, [r1, #0]
 800a872:	bf08      	it	eq
 800a874:	694b      	ldreq	r3, [r1, #20]
 800a876:	600f      	str	r7, [r1, #0]
 800a878:	bf18      	it	ne
 800a87a:	2300      	movne	r3, #0
 800a87c:	eba6 0807 	sub.w	r8, r6, r7
 800a880:	608b      	str	r3, [r1, #8]
 800a882:	f1b8 0f00 	cmp.w	r8, #0
 800a886:	dd9c      	ble.n	800a7c2 <__sflush_r+0x1a>
 800a888:	6a21      	ldr	r1, [r4, #32]
 800a88a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a88c:	4643      	mov	r3, r8
 800a88e:	463a      	mov	r2, r7
 800a890:	4628      	mov	r0, r5
 800a892:	47b0      	blx	r6
 800a894:	2800      	cmp	r0, #0
 800a896:	dc06      	bgt.n	800a8a6 <__sflush_r+0xfe>
 800a898:	89a3      	ldrh	r3, [r4, #12]
 800a89a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a89e:	81a3      	strh	r3, [r4, #12]
 800a8a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8a4:	e78e      	b.n	800a7c4 <__sflush_r+0x1c>
 800a8a6:	4407      	add	r7, r0
 800a8a8:	eba8 0800 	sub.w	r8, r8, r0
 800a8ac:	e7e9      	b.n	800a882 <__sflush_r+0xda>
 800a8ae:	bf00      	nop
 800a8b0:	20400001 	.word	0x20400001

0800a8b4 <_fflush_r>:
 800a8b4:	b538      	push	{r3, r4, r5, lr}
 800a8b6:	690b      	ldr	r3, [r1, #16]
 800a8b8:	4605      	mov	r5, r0
 800a8ba:	460c      	mov	r4, r1
 800a8bc:	b913      	cbnz	r3, 800a8c4 <_fflush_r+0x10>
 800a8be:	2500      	movs	r5, #0
 800a8c0:	4628      	mov	r0, r5
 800a8c2:	bd38      	pop	{r3, r4, r5, pc}
 800a8c4:	b118      	cbz	r0, 800a8ce <_fflush_r+0x1a>
 800a8c6:	6983      	ldr	r3, [r0, #24]
 800a8c8:	b90b      	cbnz	r3, 800a8ce <_fflush_r+0x1a>
 800a8ca:	f000 f887 	bl	800a9dc <__sinit>
 800a8ce:	4b14      	ldr	r3, [pc, #80]	; (800a920 <_fflush_r+0x6c>)
 800a8d0:	429c      	cmp	r4, r3
 800a8d2:	d11b      	bne.n	800a90c <_fflush_r+0x58>
 800a8d4:	686c      	ldr	r4, [r5, #4]
 800a8d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d0ef      	beq.n	800a8be <_fflush_r+0xa>
 800a8de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a8e0:	07d0      	lsls	r0, r2, #31
 800a8e2:	d404      	bmi.n	800a8ee <_fflush_r+0x3a>
 800a8e4:	0599      	lsls	r1, r3, #22
 800a8e6:	d402      	bmi.n	800a8ee <_fflush_r+0x3a>
 800a8e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8ea:	f000 f915 	bl	800ab18 <__retarget_lock_acquire_recursive>
 800a8ee:	4628      	mov	r0, r5
 800a8f0:	4621      	mov	r1, r4
 800a8f2:	f7ff ff59 	bl	800a7a8 <__sflush_r>
 800a8f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a8f8:	07da      	lsls	r2, r3, #31
 800a8fa:	4605      	mov	r5, r0
 800a8fc:	d4e0      	bmi.n	800a8c0 <_fflush_r+0xc>
 800a8fe:	89a3      	ldrh	r3, [r4, #12]
 800a900:	059b      	lsls	r3, r3, #22
 800a902:	d4dd      	bmi.n	800a8c0 <_fflush_r+0xc>
 800a904:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a906:	f000 f908 	bl	800ab1a <__retarget_lock_release_recursive>
 800a90a:	e7d9      	b.n	800a8c0 <_fflush_r+0xc>
 800a90c:	4b05      	ldr	r3, [pc, #20]	; (800a924 <_fflush_r+0x70>)
 800a90e:	429c      	cmp	r4, r3
 800a910:	d101      	bne.n	800a916 <_fflush_r+0x62>
 800a912:	68ac      	ldr	r4, [r5, #8]
 800a914:	e7df      	b.n	800a8d6 <_fflush_r+0x22>
 800a916:	4b04      	ldr	r3, [pc, #16]	; (800a928 <_fflush_r+0x74>)
 800a918:	429c      	cmp	r4, r3
 800a91a:	bf08      	it	eq
 800a91c:	68ec      	ldreq	r4, [r5, #12]
 800a91e:	e7da      	b.n	800a8d6 <_fflush_r+0x22>
 800a920:	0800b27c 	.word	0x0800b27c
 800a924:	0800b29c 	.word	0x0800b29c
 800a928:	0800b25c 	.word	0x0800b25c

0800a92c <std>:
 800a92c:	2300      	movs	r3, #0
 800a92e:	b510      	push	{r4, lr}
 800a930:	4604      	mov	r4, r0
 800a932:	e9c0 3300 	strd	r3, r3, [r0]
 800a936:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a93a:	6083      	str	r3, [r0, #8]
 800a93c:	8181      	strh	r1, [r0, #12]
 800a93e:	6643      	str	r3, [r0, #100]	; 0x64
 800a940:	81c2      	strh	r2, [r0, #14]
 800a942:	6183      	str	r3, [r0, #24]
 800a944:	4619      	mov	r1, r3
 800a946:	2208      	movs	r2, #8
 800a948:	305c      	adds	r0, #92	; 0x5c
 800a94a:	f7fd fb59 	bl	8008000 <memset>
 800a94e:	4b05      	ldr	r3, [pc, #20]	; (800a964 <std+0x38>)
 800a950:	6263      	str	r3, [r4, #36]	; 0x24
 800a952:	4b05      	ldr	r3, [pc, #20]	; (800a968 <std+0x3c>)
 800a954:	62a3      	str	r3, [r4, #40]	; 0x28
 800a956:	4b05      	ldr	r3, [pc, #20]	; (800a96c <std+0x40>)
 800a958:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a95a:	4b05      	ldr	r3, [pc, #20]	; (800a970 <std+0x44>)
 800a95c:	6224      	str	r4, [r4, #32]
 800a95e:	6323      	str	r3, [r4, #48]	; 0x30
 800a960:	bd10      	pop	{r4, pc}
 800a962:	bf00      	nop
 800a964:	0800ac81 	.word	0x0800ac81
 800a968:	0800aca3 	.word	0x0800aca3
 800a96c:	0800acdb 	.word	0x0800acdb
 800a970:	0800acff 	.word	0x0800acff

0800a974 <_cleanup_r>:
 800a974:	4901      	ldr	r1, [pc, #4]	; (800a97c <_cleanup_r+0x8>)
 800a976:	f000 b8af 	b.w	800aad8 <_fwalk_reent>
 800a97a:	bf00      	nop
 800a97c:	0800a8b5 	.word	0x0800a8b5

0800a980 <__sfmoreglue>:
 800a980:	b570      	push	{r4, r5, r6, lr}
 800a982:	2268      	movs	r2, #104	; 0x68
 800a984:	1e4d      	subs	r5, r1, #1
 800a986:	4355      	muls	r5, r2
 800a988:	460e      	mov	r6, r1
 800a98a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a98e:	f7ff fa65 	bl	8009e5c <_malloc_r>
 800a992:	4604      	mov	r4, r0
 800a994:	b140      	cbz	r0, 800a9a8 <__sfmoreglue+0x28>
 800a996:	2100      	movs	r1, #0
 800a998:	e9c0 1600 	strd	r1, r6, [r0]
 800a99c:	300c      	adds	r0, #12
 800a99e:	60a0      	str	r0, [r4, #8]
 800a9a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a9a4:	f7fd fb2c 	bl	8008000 <memset>
 800a9a8:	4620      	mov	r0, r4
 800a9aa:	bd70      	pop	{r4, r5, r6, pc}

0800a9ac <__sfp_lock_acquire>:
 800a9ac:	4801      	ldr	r0, [pc, #4]	; (800a9b4 <__sfp_lock_acquire+0x8>)
 800a9ae:	f000 b8b3 	b.w	800ab18 <__retarget_lock_acquire_recursive>
 800a9b2:	bf00      	nop
 800a9b4:	200004b9 	.word	0x200004b9

0800a9b8 <__sfp_lock_release>:
 800a9b8:	4801      	ldr	r0, [pc, #4]	; (800a9c0 <__sfp_lock_release+0x8>)
 800a9ba:	f000 b8ae 	b.w	800ab1a <__retarget_lock_release_recursive>
 800a9be:	bf00      	nop
 800a9c0:	200004b9 	.word	0x200004b9

0800a9c4 <__sinit_lock_acquire>:
 800a9c4:	4801      	ldr	r0, [pc, #4]	; (800a9cc <__sinit_lock_acquire+0x8>)
 800a9c6:	f000 b8a7 	b.w	800ab18 <__retarget_lock_acquire_recursive>
 800a9ca:	bf00      	nop
 800a9cc:	200004ba 	.word	0x200004ba

0800a9d0 <__sinit_lock_release>:
 800a9d0:	4801      	ldr	r0, [pc, #4]	; (800a9d8 <__sinit_lock_release+0x8>)
 800a9d2:	f000 b8a2 	b.w	800ab1a <__retarget_lock_release_recursive>
 800a9d6:	bf00      	nop
 800a9d8:	200004ba 	.word	0x200004ba

0800a9dc <__sinit>:
 800a9dc:	b510      	push	{r4, lr}
 800a9de:	4604      	mov	r4, r0
 800a9e0:	f7ff fff0 	bl	800a9c4 <__sinit_lock_acquire>
 800a9e4:	69a3      	ldr	r3, [r4, #24]
 800a9e6:	b11b      	cbz	r3, 800a9f0 <__sinit+0x14>
 800a9e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9ec:	f7ff bff0 	b.w	800a9d0 <__sinit_lock_release>
 800a9f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a9f4:	6523      	str	r3, [r4, #80]	; 0x50
 800a9f6:	4b13      	ldr	r3, [pc, #76]	; (800aa44 <__sinit+0x68>)
 800a9f8:	4a13      	ldr	r2, [pc, #76]	; (800aa48 <__sinit+0x6c>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	62a2      	str	r2, [r4, #40]	; 0x28
 800a9fe:	42a3      	cmp	r3, r4
 800aa00:	bf04      	itt	eq
 800aa02:	2301      	moveq	r3, #1
 800aa04:	61a3      	streq	r3, [r4, #24]
 800aa06:	4620      	mov	r0, r4
 800aa08:	f000 f820 	bl	800aa4c <__sfp>
 800aa0c:	6060      	str	r0, [r4, #4]
 800aa0e:	4620      	mov	r0, r4
 800aa10:	f000 f81c 	bl	800aa4c <__sfp>
 800aa14:	60a0      	str	r0, [r4, #8]
 800aa16:	4620      	mov	r0, r4
 800aa18:	f000 f818 	bl	800aa4c <__sfp>
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	60e0      	str	r0, [r4, #12]
 800aa20:	2104      	movs	r1, #4
 800aa22:	6860      	ldr	r0, [r4, #4]
 800aa24:	f7ff ff82 	bl	800a92c <std>
 800aa28:	68a0      	ldr	r0, [r4, #8]
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	2109      	movs	r1, #9
 800aa2e:	f7ff ff7d 	bl	800a92c <std>
 800aa32:	68e0      	ldr	r0, [r4, #12]
 800aa34:	2202      	movs	r2, #2
 800aa36:	2112      	movs	r1, #18
 800aa38:	f7ff ff78 	bl	800a92c <std>
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	61a3      	str	r3, [r4, #24]
 800aa40:	e7d2      	b.n	800a9e8 <__sinit+0xc>
 800aa42:	bf00      	nop
 800aa44:	0800aee0 	.word	0x0800aee0
 800aa48:	0800a975 	.word	0x0800a975

0800aa4c <__sfp>:
 800aa4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa4e:	4607      	mov	r7, r0
 800aa50:	f7ff ffac 	bl	800a9ac <__sfp_lock_acquire>
 800aa54:	4b1e      	ldr	r3, [pc, #120]	; (800aad0 <__sfp+0x84>)
 800aa56:	681e      	ldr	r6, [r3, #0]
 800aa58:	69b3      	ldr	r3, [r6, #24]
 800aa5a:	b913      	cbnz	r3, 800aa62 <__sfp+0x16>
 800aa5c:	4630      	mov	r0, r6
 800aa5e:	f7ff ffbd 	bl	800a9dc <__sinit>
 800aa62:	3648      	adds	r6, #72	; 0x48
 800aa64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aa68:	3b01      	subs	r3, #1
 800aa6a:	d503      	bpl.n	800aa74 <__sfp+0x28>
 800aa6c:	6833      	ldr	r3, [r6, #0]
 800aa6e:	b30b      	cbz	r3, 800aab4 <__sfp+0x68>
 800aa70:	6836      	ldr	r6, [r6, #0]
 800aa72:	e7f7      	b.n	800aa64 <__sfp+0x18>
 800aa74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aa78:	b9d5      	cbnz	r5, 800aab0 <__sfp+0x64>
 800aa7a:	4b16      	ldr	r3, [pc, #88]	; (800aad4 <__sfp+0x88>)
 800aa7c:	60e3      	str	r3, [r4, #12]
 800aa7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aa82:	6665      	str	r5, [r4, #100]	; 0x64
 800aa84:	f000 f847 	bl	800ab16 <__retarget_lock_init_recursive>
 800aa88:	f7ff ff96 	bl	800a9b8 <__sfp_lock_release>
 800aa8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aa90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aa94:	6025      	str	r5, [r4, #0]
 800aa96:	61a5      	str	r5, [r4, #24]
 800aa98:	2208      	movs	r2, #8
 800aa9a:	4629      	mov	r1, r5
 800aa9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aaa0:	f7fd faae 	bl	8008000 <memset>
 800aaa4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aaa8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aaac:	4620      	mov	r0, r4
 800aaae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aab0:	3468      	adds	r4, #104	; 0x68
 800aab2:	e7d9      	b.n	800aa68 <__sfp+0x1c>
 800aab4:	2104      	movs	r1, #4
 800aab6:	4638      	mov	r0, r7
 800aab8:	f7ff ff62 	bl	800a980 <__sfmoreglue>
 800aabc:	4604      	mov	r4, r0
 800aabe:	6030      	str	r0, [r6, #0]
 800aac0:	2800      	cmp	r0, #0
 800aac2:	d1d5      	bne.n	800aa70 <__sfp+0x24>
 800aac4:	f7ff ff78 	bl	800a9b8 <__sfp_lock_release>
 800aac8:	230c      	movs	r3, #12
 800aaca:	603b      	str	r3, [r7, #0]
 800aacc:	e7ee      	b.n	800aaac <__sfp+0x60>
 800aace:	bf00      	nop
 800aad0:	0800aee0 	.word	0x0800aee0
 800aad4:	ffff0001 	.word	0xffff0001

0800aad8 <_fwalk_reent>:
 800aad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aadc:	4606      	mov	r6, r0
 800aade:	4688      	mov	r8, r1
 800aae0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aae4:	2700      	movs	r7, #0
 800aae6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aaea:	f1b9 0901 	subs.w	r9, r9, #1
 800aaee:	d505      	bpl.n	800aafc <_fwalk_reent+0x24>
 800aaf0:	6824      	ldr	r4, [r4, #0]
 800aaf2:	2c00      	cmp	r4, #0
 800aaf4:	d1f7      	bne.n	800aae6 <_fwalk_reent+0xe>
 800aaf6:	4638      	mov	r0, r7
 800aaf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aafc:	89ab      	ldrh	r3, [r5, #12]
 800aafe:	2b01      	cmp	r3, #1
 800ab00:	d907      	bls.n	800ab12 <_fwalk_reent+0x3a>
 800ab02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab06:	3301      	adds	r3, #1
 800ab08:	d003      	beq.n	800ab12 <_fwalk_reent+0x3a>
 800ab0a:	4629      	mov	r1, r5
 800ab0c:	4630      	mov	r0, r6
 800ab0e:	47c0      	blx	r8
 800ab10:	4307      	orrs	r7, r0
 800ab12:	3568      	adds	r5, #104	; 0x68
 800ab14:	e7e9      	b.n	800aaea <_fwalk_reent+0x12>

0800ab16 <__retarget_lock_init_recursive>:
 800ab16:	4770      	bx	lr

0800ab18 <__retarget_lock_acquire_recursive>:
 800ab18:	4770      	bx	lr

0800ab1a <__retarget_lock_release_recursive>:
 800ab1a:	4770      	bx	lr

0800ab1c <__swhatbuf_r>:
 800ab1c:	b570      	push	{r4, r5, r6, lr}
 800ab1e:	460e      	mov	r6, r1
 800ab20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab24:	2900      	cmp	r1, #0
 800ab26:	b096      	sub	sp, #88	; 0x58
 800ab28:	4614      	mov	r4, r2
 800ab2a:	461d      	mov	r5, r3
 800ab2c:	da08      	bge.n	800ab40 <__swhatbuf_r+0x24>
 800ab2e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ab32:	2200      	movs	r2, #0
 800ab34:	602a      	str	r2, [r5, #0]
 800ab36:	061a      	lsls	r2, r3, #24
 800ab38:	d410      	bmi.n	800ab5c <__swhatbuf_r+0x40>
 800ab3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab3e:	e00e      	b.n	800ab5e <__swhatbuf_r+0x42>
 800ab40:	466a      	mov	r2, sp
 800ab42:	f000 f903 	bl	800ad4c <_fstat_r>
 800ab46:	2800      	cmp	r0, #0
 800ab48:	dbf1      	blt.n	800ab2e <__swhatbuf_r+0x12>
 800ab4a:	9a01      	ldr	r2, [sp, #4]
 800ab4c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ab50:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ab54:	425a      	negs	r2, r3
 800ab56:	415a      	adcs	r2, r3
 800ab58:	602a      	str	r2, [r5, #0]
 800ab5a:	e7ee      	b.n	800ab3a <__swhatbuf_r+0x1e>
 800ab5c:	2340      	movs	r3, #64	; 0x40
 800ab5e:	2000      	movs	r0, #0
 800ab60:	6023      	str	r3, [r4, #0]
 800ab62:	b016      	add	sp, #88	; 0x58
 800ab64:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ab68 <__smakebuf_r>:
 800ab68:	898b      	ldrh	r3, [r1, #12]
 800ab6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ab6c:	079d      	lsls	r5, r3, #30
 800ab6e:	4606      	mov	r6, r0
 800ab70:	460c      	mov	r4, r1
 800ab72:	d507      	bpl.n	800ab84 <__smakebuf_r+0x1c>
 800ab74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ab78:	6023      	str	r3, [r4, #0]
 800ab7a:	6123      	str	r3, [r4, #16]
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	6163      	str	r3, [r4, #20]
 800ab80:	b002      	add	sp, #8
 800ab82:	bd70      	pop	{r4, r5, r6, pc}
 800ab84:	ab01      	add	r3, sp, #4
 800ab86:	466a      	mov	r2, sp
 800ab88:	f7ff ffc8 	bl	800ab1c <__swhatbuf_r>
 800ab8c:	9900      	ldr	r1, [sp, #0]
 800ab8e:	4605      	mov	r5, r0
 800ab90:	4630      	mov	r0, r6
 800ab92:	f7ff f963 	bl	8009e5c <_malloc_r>
 800ab96:	b948      	cbnz	r0, 800abac <__smakebuf_r+0x44>
 800ab98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab9c:	059a      	lsls	r2, r3, #22
 800ab9e:	d4ef      	bmi.n	800ab80 <__smakebuf_r+0x18>
 800aba0:	f023 0303 	bic.w	r3, r3, #3
 800aba4:	f043 0302 	orr.w	r3, r3, #2
 800aba8:	81a3      	strh	r3, [r4, #12]
 800abaa:	e7e3      	b.n	800ab74 <__smakebuf_r+0xc>
 800abac:	4b0d      	ldr	r3, [pc, #52]	; (800abe4 <__smakebuf_r+0x7c>)
 800abae:	62b3      	str	r3, [r6, #40]	; 0x28
 800abb0:	89a3      	ldrh	r3, [r4, #12]
 800abb2:	6020      	str	r0, [r4, #0]
 800abb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abb8:	81a3      	strh	r3, [r4, #12]
 800abba:	9b00      	ldr	r3, [sp, #0]
 800abbc:	6163      	str	r3, [r4, #20]
 800abbe:	9b01      	ldr	r3, [sp, #4]
 800abc0:	6120      	str	r0, [r4, #16]
 800abc2:	b15b      	cbz	r3, 800abdc <__smakebuf_r+0x74>
 800abc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abc8:	4630      	mov	r0, r6
 800abca:	f000 f8d1 	bl	800ad70 <_isatty_r>
 800abce:	b128      	cbz	r0, 800abdc <__smakebuf_r+0x74>
 800abd0:	89a3      	ldrh	r3, [r4, #12]
 800abd2:	f023 0303 	bic.w	r3, r3, #3
 800abd6:	f043 0301 	orr.w	r3, r3, #1
 800abda:	81a3      	strh	r3, [r4, #12]
 800abdc:	89a0      	ldrh	r0, [r4, #12]
 800abde:	4305      	orrs	r5, r0
 800abe0:	81a5      	strh	r5, [r4, #12]
 800abe2:	e7cd      	b.n	800ab80 <__smakebuf_r+0x18>
 800abe4:	0800a975 	.word	0x0800a975

0800abe8 <_malloc_usable_size_r>:
 800abe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abec:	1f18      	subs	r0, r3, #4
 800abee:	2b00      	cmp	r3, #0
 800abf0:	bfbc      	itt	lt
 800abf2:	580b      	ldrlt	r3, [r1, r0]
 800abf4:	18c0      	addlt	r0, r0, r3
 800abf6:	4770      	bx	lr

0800abf8 <_raise_r>:
 800abf8:	291f      	cmp	r1, #31
 800abfa:	b538      	push	{r3, r4, r5, lr}
 800abfc:	4604      	mov	r4, r0
 800abfe:	460d      	mov	r5, r1
 800ac00:	d904      	bls.n	800ac0c <_raise_r+0x14>
 800ac02:	2316      	movs	r3, #22
 800ac04:	6003      	str	r3, [r0, #0]
 800ac06:	f04f 30ff 	mov.w	r0, #4294967295
 800ac0a:	bd38      	pop	{r3, r4, r5, pc}
 800ac0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ac0e:	b112      	cbz	r2, 800ac16 <_raise_r+0x1e>
 800ac10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ac14:	b94b      	cbnz	r3, 800ac2a <_raise_r+0x32>
 800ac16:	4620      	mov	r0, r4
 800ac18:	f000 f830 	bl	800ac7c <_getpid_r>
 800ac1c:	462a      	mov	r2, r5
 800ac1e:	4601      	mov	r1, r0
 800ac20:	4620      	mov	r0, r4
 800ac22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac26:	f000 b817 	b.w	800ac58 <_kill_r>
 800ac2a:	2b01      	cmp	r3, #1
 800ac2c:	d00a      	beq.n	800ac44 <_raise_r+0x4c>
 800ac2e:	1c59      	adds	r1, r3, #1
 800ac30:	d103      	bne.n	800ac3a <_raise_r+0x42>
 800ac32:	2316      	movs	r3, #22
 800ac34:	6003      	str	r3, [r0, #0]
 800ac36:	2001      	movs	r0, #1
 800ac38:	e7e7      	b.n	800ac0a <_raise_r+0x12>
 800ac3a:	2400      	movs	r4, #0
 800ac3c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ac40:	4628      	mov	r0, r5
 800ac42:	4798      	blx	r3
 800ac44:	2000      	movs	r0, #0
 800ac46:	e7e0      	b.n	800ac0a <_raise_r+0x12>

0800ac48 <raise>:
 800ac48:	4b02      	ldr	r3, [pc, #8]	; (800ac54 <raise+0xc>)
 800ac4a:	4601      	mov	r1, r0
 800ac4c:	6818      	ldr	r0, [r3, #0]
 800ac4e:	f7ff bfd3 	b.w	800abf8 <_raise_r>
 800ac52:	bf00      	nop
 800ac54:	2000000c 	.word	0x2000000c

0800ac58 <_kill_r>:
 800ac58:	b538      	push	{r3, r4, r5, lr}
 800ac5a:	4d07      	ldr	r5, [pc, #28]	; (800ac78 <_kill_r+0x20>)
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	4604      	mov	r4, r0
 800ac60:	4608      	mov	r0, r1
 800ac62:	4611      	mov	r1, r2
 800ac64:	602b      	str	r3, [r5, #0]
 800ac66:	f7f7 f875 	bl	8001d54 <_kill>
 800ac6a:	1c43      	adds	r3, r0, #1
 800ac6c:	d102      	bne.n	800ac74 <_kill_r+0x1c>
 800ac6e:	682b      	ldr	r3, [r5, #0]
 800ac70:	b103      	cbz	r3, 800ac74 <_kill_r+0x1c>
 800ac72:	6023      	str	r3, [r4, #0]
 800ac74:	bd38      	pop	{r3, r4, r5, pc}
 800ac76:	bf00      	nop
 800ac78:	200004b4 	.word	0x200004b4

0800ac7c <_getpid_r>:
 800ac7c:	f7f7 b862 	b.w	8001d44 <_getpid>

0800ac80 <__sread>:
 800ac80:	b510      	push	{r4, lr}
 800ac82:	460c      	mov	r4, r1
 800ac84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac88:	f000 f894 	bl	800adb4 <_read_r>
 800ac8c:	2800      	cmp	r0, #0
 800ac8e:	bfab      	itete	ge
 800ac90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ac92:	89a3      	ldrhlt	r3, [r4, #12]
 800ac94:	181b      	addge	r3, r3, r0
 800ac96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ac9a:	bfac      	ite	ge
 800ac9c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ac9e:	81a3      	strhlt	r3, [r4, #12]
 800aca0:	bd10      	pop	{r4, pc}

0800aca2 <__swrite>:
 800aca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aca6:	461f      	mov	r7, r3
 800aca8:	898b      	ldrh	r3, [r1, #12]
 800acaa:	05db      	lsls	r3, r3, #23
 800acac:	4605      	mov	r5, r0
 800acae:	460c      	mov	r4, r1
 800acb0:	4616      	mov	r6, r2
 800acb2:	d505      	bpl.n	800acc0 <__swrite+0x1e>
 800acb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acb8:	2302      	movs	r3, #2
 800acba:	2200      	movs	r2, #0
 800acbc:	f000 f868 	bl	800ad90 <_lseek_r>
 800acc0:	89a3      	ldrh	r3, [r4, #12]
 800acc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800acc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800acca:	81a3      	strh	r3, [r4, #12]
 800accc:	4632      	mov	r2, r6
 800acce:	463b      	mov	r3, r7
 800acd0:	4628      	mov	r0, r5
 800acd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acd6:	f000 b817 	b.w	800ad08 <_write_r>

0800acda <__sseek>:
 800acda:	b510      	push	{r4, lr}
 800acdc:	460c      	mov	r4, r1
 800acde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ace2:	f000 f855 	bl	800ad90 <_lseek_r>
 800ace6:	1c43      	adds	r3, r0, #1
 800ace8:	89a3      	ldrh	r3, [r4, #12]
 800acea:	bf15      	itete	ne
 800acec:	6560      	strne	r0, [r4, #84]	; 0x54
 800acee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800acf2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800acf6:	81a3      	strheq	r3, [r4, #12]
 800acf8:	bf18      	it	ne
 800acfa:	81a3      	strhne	r3, [r4, #12]
 800acfc:	bd10      	pop	{r4, pc}

0800acfe <__sclose>:
 800acfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad02:	f000 b813 	b.w	800ad2c <_close_r>
	...

0800ad08 <_write_r>:
 800ad08:	b538      	push	{r3, r4, r5, lr}
 800ad0a:	4d07      	ldr	r5, [pc, #28]	; (800ad28 <_write_r+0x20>)
 800ad0c:	4604      	mov	r4, r0
 800ad0e:	4608      	mov	r0, r1
 800ad10:	4611      	mov	r1, r2
 800ad12:	2200      	movs	r2, #0
 800ad14:	602a      	str	r2, [r5, #0]
 800ad16:	461a      	mov	r2, r3
 800ad18:	f7f7 f853 	bl	8001dc2 <_write>
 800ad1c:	1c43      	adds	r3, r0, #1
 800ad1e:	d102      	bne.n	800ad26 <_write_r+0x1e>
 800ad20:	682b      	ldr	r3, [r5, #0]
 800ad22:	b103      	cbz	r3, 800ad26 <_write_r+0x1e>
 800ad24:	6023      	str	r3, [r4, #0]
 800ad26:	bd38      	pop	{r3, r4, r5, pc}
 800ad28:	200004b4 	.word	0x200004b4

0800ad2c <_close_r>:
 800ad2c:	b538      	push	{r3, r4, r5, lr}
 800ad2e:	4d06      	ldr	r5, [pc, #24]	; (800ad48 <_close_r+0x1c>)
 800ad30:	2300      	movs	r3, #0
 800ad32:	4604      	mov	r4, r0
 800ad34:	4608      	mov	r0, r1
 800ad36:	602b      	str	r3, [r5, #0]
 800ad38:	f7f7 f85f 	bl	8001dfa <_close>
 800ad3c:	1c43      	adds	r3, r0, #1
 800ad3e:	d102      	bne.n	800ad46 <_close_r+0x1a>
 800ad40:	682b      	ldr	r3, [r5, #0]
 800ad42:	b103      	cbz	r3, 800ad46 <_close_r+0x1a>
 800ad44:	6023      	str	r3, [r4, #0]
 800ad46:	bd38      	pop	{r3, r4, r5, pc}
 800ad48:	200004b4 	.word	0x200004b4

0800ad4c <_fstat_r>:
 800ad4c:	b538      	push	{r3, r4, r5, lr}
 800ad4e:	4d07      	ldr	r5, [pc, #28]	; (800ad6c <_fstat_r+0x20>)
 800ad50:	2300      	movs	r3, #0
 800ad52:	4604      	mov	r4, r0
 800ad54:	4608      	mov	r0, r1
 800ad56:	4611      	mov	r1, r2
 800ad58:	602b      	str	r3, [r5, #0]
 800ad5a:	f7f7 f85a 	bl	8001e12 <_fstat>
 800ad5e:	1c43      	adds	r3, r0, #1
 800ad60:	d102      	bne.n	800ad68 <_fstat_r+0x1c>
 800ad62:	682b      	ldr	r3, [r5, #0]
 800ad64:	b103      	cbz	r3, 800ad68 <_fstat_r+0x1c>
 800ad66:	6023      	str	r3, [r4, #0]
 800ad68:	bd38      	pop	{r3, r4, r5, pc}
 800ad6a:	bf00      	nop
 800ad6c:	200004b4 	.word	0x200004b4

0800ad70 <_isatty_r>:
 800ad70:	b538      	push	{r3, r4, r5, lr}
 800ad72:	4d06      	ldr	r5, [pc, #24]	; (800ad8c <_isatty_r+0x1c>)
 800ad74:	2300      	movs	r3, #0
 800ad76:	4604      	mov	r4, r0
 800ad78:	4608      	mov	r0, r1
 800ad7a:	602b      	str	r3, [r5, #0]
 800ad7c:	f7f7 f859 	bl	8001e32 <_isatty>
 800ad80:	1c43      	adds	r3, r0, #1
 800ad82:	d102      	bne.n	800ad8a <_isatty_r+0x1a>
 800ad84:	682b      	ldr	r3, [r5, #0]
 800ad86:	b103      	cbz	r3, 800ad8a <_isatty_r+0x1a>
 800ad88:	6023      	str	r3, [r4, #0]
 800ad8a:	bd38      	pop	{r3, r4, r5, pc}
 800ad8c:	200004b4 	.word	0x200004b4

0800ad90 <_lseek_r>:
 800ad90:	b538      	push	{r3, r4, r5, lr}
 800ad92:	4d07      	ldr	r5, [pc, #28]	; (800adb0 <_lseek_r+0x20>)
 800ad94:	4604      	mov	r4, r0
 800ad96:	4608      	mov	r0, r1
 800ad98:	4611      	mov	r1, r2
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	602a      	str	r2, [r5, #0]
 800ad9e:	461a      	mov	r2, r3
 800ada0:	f7f7 f852 	bl	8001e48 <_lseek>
 800ada4:	1c43      	adds	r3, r0, #1
 800ada6:	d102      	bne.n	800adae <_lseek_r+0x1e>
 800ada8:	682b      	ldr	r3, [r5, #0]
 800adaa:	b103      	cbz	r3, 800adae <_lseek_r+0x1e>
 800adac:	6023      	str	r3, [r4, #0]
 800adae:	bd38      	pop	{r3, r4, r5, pc}
 800adb0:	200004b4 	.word	0x200004b4

0800adb4 <_read_r>:
 800adb4:	b538      	push	{r3, r4, r5, lr}
 800adb6:	4d07      	ldr	r5, [pc, #28]	; (800add4 <_read_r+0x20>)
 800adb8:	4604      	mov	r4, r0
 800adba:	4608      	mov	r0, r1
 800adbc:	4611      	mov	r1, r2
 800adbe:	2200      	movs	r2, #0
 800adc0:	602a      	str	r2, [r5, #0]
 800adc2:	461a      	mov	r2, r3
 800adc4:	f7f6 ffe0 	bl	8001d88 <_read>
 800adc8:	1c43      	adds	r3, r0, #1
 800adca:	d102      	bne.n	800add2 <_read_r+0x1e>
 800adcc:	682b      	ldr	r3, [r5, #0]
 800adce:	b103      	cbz	r3, 800add2 <_read_r+0x1e>
 800add0:	6023      	str	r3, [r4, #0]
 800add2:	bd38      	pop	{r3, r4, r5, pc}
 800add4:	200004b4 	.word	0x200004b4

0800add8 <_init>:
 800add8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adda:	bf00      	nop
 800addc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adde:	bc08      	pop	{r3}
 800ade0:	469e      	mov	lr, r3
 800ade2:	4770      	bx	lr

0800ade4 <_fini>:
 800ade4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ade6:	bf00      	nop
 800ade8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adea:	bc08      	pop	{r3}
 800adec:	469e      	mov	lr, r3
 800adee:	4770      	bx	lr
