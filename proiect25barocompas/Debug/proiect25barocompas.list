
proiect25barocompas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aef8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  0800b088  0800b088  0001b088  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b554  0800b554  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b554  0800b554  0001b554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b55c  0800b55c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b55c  0800b55c  0001b55c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b560  0800b560  0001b560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800b564  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  200001dc  0800b740  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  0800b740  000204bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019af6  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003555  00000000  00000000  00039d02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001630  00000000  00000000  0003d258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014a8  00000000  00000000  0003e888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004851  00000000  00000000  0003fd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c559  00000000  00000000  00044581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f976f  00000000  00000000  00060ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015a249  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e1c  00000000  00000000  0015a29c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b070 	.word	0x0800b070

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800b070 	.word	0x0800b070

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <BMP_DevId>:
uint8_t pres_wait = 0;

BMP_STATE BMP_State = BMP_State_Temp_StartMeasurement;

bool BMP_DevId(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	if (HAL_I2C_IsDeviceReady(&hi2c1, BMP_ADDR_WRITE, 5, HAL_MAX_DELAY)
 8000eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb4:	2205      	movs	r2, #5
 8000eb6:	21ee      	movs	r1, #238	; 0xee
 8000eb8:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <BMP_DevId+0x24>)
 8000eba:	f002 fd1f 	bl	80038fc <HAL_I2C_IsDeviceReady>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d101      	bne.n	8000ec8 <BMP_DevId+0x1c>
			== HAL_OK)
	{
		return true;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e000      	b.n	8000eca <BMP_DevId+0x1e>
	}
	return false;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	2000023c 	.word	0x2000023c

08000ed4 <BMP_ReadCalibration>:

bool BMP_ReadCalibration(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	; 0x28
 8000ed8:	af04      	add	r7, sp, #16

	uint8_t calibValues[22];
	if (HAL_I2C_Mem_Read(&hi2c1, BMP_ADDR_READ, AC1MSB, I2C_MEMADD_SIZE_8BIT,
 8000eda:	f04f 33ff 	mov.w	r3, #4294967295
 8000ede:	9302      	str	r3, [sp, #8]
 8000ee0:	2316      	movs	r3, #22
 8000ee2:	9301      	str	r3, [sp, #4]
 8000ee4:	463b      	mov	r3, r7
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	2301      	movs	r3, #1
 8000eea:	22aa      	movs	r2, #170	; 0xaa
 8000eec:	21ef      	movs	r1, #239	; 0xef
 8000eee:	4839      	ldr	r0, [pc, #228]	; (8000fd4 <BMP_ReadCalibration+0x100>)
 8000ef0:	f002 f9f8 	bl	80032e4 <HAL_I2C_Mem_Read>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <BMP_ReadCalibration+0x2a>
			calibValues, 22, HAL_MAX_DELAY) != HAL_OK)
	{
		return false;
 8000efa:	2300      	movs	r3, #0
 8000efc:	e066      	b.n	8000fcc <BMP_ReadCalibration+0xf8>
	}

	b1.AC1 = ((int16_t) calibValues[0] << 8) | calibValues[1];
 8000efe:	783b      	ldrb	r3, [r7, #0]
 8000f00:	021b      	lsls	r3, r3, #8
 8000f02:	b21a      	sxth	r2, r3
 8000f04:	787b      	ldrb	r3, [r7, #1]
 8000f06:	b21b      	sxth	r3, r3
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	b21a      	sxth	r2, r3
 8000f0c:	4b32      	ldr	r3, [pc, #200]	; (8000fd8 <BMP_ReadCalibration+0x104>)
 8000f0e:	801a      	strh	r2, [r3, #0]
	b1.AC2 = ((int16_t) calibValues[2] << 8) | calibValues[3];
 8000f10:	78bb      	ldrb	r3, [r7, #2]
 8000f12:	021b      	lsls	r3, r3, #8
 8000f14:	b21a      	sxth	r2, r3
 8000f16:	78fb      	ldrb	r3, [r7, #3]
 8000f18:	b21b      	sxth	r3, r3
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	b21a      	sxth	r2, r3
 8000f1e:	4b2e      	ldr	r3, [pc, #184]	; (8000fd8 <BMP_ReadCalibration+0x104>)
 8000f20:	805a      	strh	r2, [r3, #2]
	b1.AC3 = ((int16_t) calibValues[4] << 8) | calibValues[5];
 8000f22:	793b      	ldrb	r3, [r7, #4]
 8000f24:	021b      	lsls	r3, r3, #8
 8000f26:	b21a      	sxth	r2, r3
 8000f28:	797b      	ldrb	r3, [r7, #5]
 8000f2a:	b21b      	sxth	r3, r3
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	b21a      	sxth	r2, r3
 8000f30:	4b29      	ldr	r3, [pc, #164]	; (8000fd8 <BMP_ReadCalibration+0x104>)
 8000f32:	809a      	strh	r2, [r3, #4]
	b1.AC4 = ((uint16_t) calibValues[6] << 8) | calibValues[7];
 8000f34:	79bb      	ldrb	r3, [r7, #6]
 8000f36:	021b      	lsls	r3, r3, #8
 8000f38:	b21a      	sxth	r2, r3
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	b21b      	sxth	r3, r3
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	b21b      	sxth	r3, r3
 8000f42:	b29a      	uxth	r2, r3
 8000f44:	4b24      	ldr	r3, [pc, #144]	; (8000fd8 <BMP_ReadCalibration+0x104>)
 8000f46:	80da      	strh	r2, [r3, #6]
	b1.AC5 = ((uint16_t) calibValues[8] << 8) | calibValues[9];
 8000f48:	7a3b      	ldrb	r3, [r7, #8]
 8000f4a:	021b      	lsls	r3, r3, #8
 8000f4c:	b21a      	sxth	r2, r3
 8000f4e:	7a7b      	ldrb	r3, [r7, #9]
 8000f50:	b21b      	sxth	r3, r3
 8000f52:	4313      	orrs	r3, r2
 8000f54:	b21b      	sxth	r3, r3
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <BMP_ReadCalibration+0x104>)
 8000f5a:	811a      	strh	r2, [r3, #8]
	b1.AC6 = ((uint16_t) calibValues[10] << 8) | calibValues[11];
 8000f5c:	7abb      	ldrb	r3, [r7, #10]
 8000f5e:	021b      	lsls	r3, r3, #8
 8000f60:	b21a      	sxth	r2, r3
 8000f62:	7afb      	ldrb	r3, [r7, #11]
 8000f64:	b21b      	sxth	r3, r3
 8000f66:	4313      	orrs	r3, r2
 8000f68:	b21b      	sxth	r3, r3
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <BMP_ReadCalibration+0x104>)
 8000f6e:	815a      	strh	r2, [r3, #10]
	b1.B1 = ((int16_t) calibValues[12] << 8) | calibValues[13];
 8000f70:	7b3b      	ldrb	r3, [r7, #12]
 8000f72:	021b      	lsls	r3, r3, #8
 8000f74:	b21a      	sxth	r2, r3
 8000f76:	7b7b      	ldrb	r3, [r7, #13]
 8000f78:	b21b      	sxth	r3, r3
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	b21a      	sxth	r2, r3
 8000f7e:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <BMP_ReadCalibration+0x104>)
 8000f80:	819a      	strh	r2, [r3, #12]
	b1.B2 = ((int16_t) calibValues[14] << 8) | calibValues[15];
 8000f82:	7bbb      	ldrb	r3, [r7, #14]
 8000f84:	021b      	lsls	r3, r3, #8
 8000f86:	b21a      	sxth	r2, r3
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
 8000f8a:	b21b      	sxth	r3, r3
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	b21a      	sxth	r2, r3
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <BMP_ReadCalibration+0x104>)
 8000f92:	81da      	strh	r2, [r3, #14]
	b1.MB = ((int16_t) calibValues[16] << 8) | calibValues[17];
 8000f94:	7c3b      	ldrb	r3, [r7, #16]
 8000f96:	021b      	lsls	r3, r3, #8
 8000f98:	b21a      	sxth	r2, r3
 8000f9a:	7c7b      	ldrb	r3, [r7, #17]
 8000f9c:	b21b      	sxth	r3, r3
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	b21a      	sxth	r2, r3
 8000fa2:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <BMP_ReadCalibration+0x104>)
 8000fa4:	821a      	strh	r2, [r3, #16]
	b1.MC = ((int16_t) calibValues[18] << 8) | calibValues[19];
 8000fa6:	7cbb      	ldrb	r3, [r7, #18]
 8000fa8:	021b      	lsls	r3, r3, #8
 8000faa:	b21a      	sxth	r2, r3
 8000fac:	7cfb      	ldrb	r3, [r7, #19]
 8000fae:	b21b      	sxth	r3, r3
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	b21a      	sxth	r2, r3
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <BMP_ReadCalibration+0x104>)
 8000fb6:	825a      	strh	r2, [r3, #18]
	b1.MD = ((int16_t) calibValues[20] << 8) | calibValues[21];
 8000fb8:	7d3b      	ldrb	r3, [r7, #20]
 8000fba:	021b      	lsls	r3, r3, #8
 8000fbc:	b21a      	sxth	r2, r3
 8000fbe:	7d7b      	ldrb	r3, [r7, #21]
 8000fc0:	b21b      	sxth	r3, r3
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	b21a      	sxth	r2, r3
 8000fc6:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <BMP_ReadCalibration+0x104>)
 8000fc8:	829a      	strh	r2, [r3, #20]

	return true;
 8000fca:	2301      	movs	r3, #1
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3718      	adds	r7, #24
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	2000023c 	.word	0x2000023c
 8000fd8:	200001f8 	.word	0x200001f8

08000fdc <BMP_Init>:

bool BMP_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
	if (BMP_DevId() != true)
 8000fe0:	f7ff ff64 	bl	8000eac <BMP_DevId>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	f083 0301 	eor.w	r3, r3, #1
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <BMP_Init+0x18>
	{
		return false;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	e002      	b.n	8000ffa <BMP_Init+0x1e>
	}
	BMP_ReadCalibration();
 8000ff4:	f7ff ff6e 	bl	8000ed4 <BMP_ReadCalibration>
	return true;
 8000ff8:	2301      	movs	r3, #1
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <BMP_CalcTemp>:
}

//calculate temperature

void BMP_CalcTemp(void)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
	int32_t x1;
	int32_t x2;

	uTemp = (tempMLsb[0] << 8) | tempMLsb[1];  // am sters cast la templsb
 8001006:	4b1d      	ldr	r3, [pc, #116]	; (800107c <BMP_CalcTemp+0x7c>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	4a1b      	ldr	r2, [pc, #108]	; (800107c <BMP_CalcTemp+0x7c>)
 800100e:	7852      	ldrb	r2, [r2, #1]
 8001010:	4313      	orrs	r3, r2
 8001012:	4a1b      	ldr	r2, [pc, #108]	; (8001080 <BMP_CalcTemp+0x80>)
 8001014:	6013      	str	r3, [r2, #0]
	x1 = (uTemp - b1.AC6) * b1.AC5 / 32768;
 8001016:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <BMP_CalcTemp+0x80>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a1a      	ldr	r2, [pc, #104]	; (8001084 <BMP_CalcTemp+0x84>)
 800101c:	8952      	ldrh	r2, [r2, #10]
 800101e:	1a9b      	subs	r3, r3, r2
 8001020:	4a18      	ldr	r2, [pc, #96]	; (8001084 <BMP_CalcTemp+0x84>)
 8001022:	8912      	ldrh	r2, [r2, #8]
 8001024:	fb02 f303 	mul.w	r3, r2, r3
 8001028:	2b00      	cmp	r3, #0
 800102a:	da02      	bge.n	8001032 <BMP_CalcTemp+0x32>
 800102c:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001030:	337f      	adds	r3, #127	; 0x7f
 8001032:	13db      	asrs	r3, r3, #15
 8001034:	607b      	str	r3, [r7, #4]
	x2 = ((int32_t) (b1.MC * 2048)) / ((int32_t) (x1 + b1.MD));
 8001036:	4b13      	ldr	r3, [pc, #76]	; (8001084 <BMP_CalcTemp+0x84>)
 8001038:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800103c:	02da      	lsls	r2, r3, #11
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <BMP_CalcTemp+0x84>)
 8001040:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001044:	4619      	mov	r1, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	440b      	add	r3, r1
 800104a:	fb92 f3f3 	sdiv	r3, r2, r3
 800104e:	603b      	str	r3, [r7, #0]
	B5 = x1 + x2;
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	4413      	add	r3, r2
 8001056:	4a0c      	ldr	r2, [pc, #48]	; (8001088 <BMP_CalcTemp+0x88>)
 8001058:	6013      	str	r3, [r2, #0]
	temp = (B5 + 8) / 16;
 800105a:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <BMP_CalcTemp+0x88>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	3308      	adds	r3, #8
 8001060:	2b00      	cmp	r3, #0
 8001062:	da00      	bge.n	8001066 <BMP_CalcTemp+0x66>
 8001064:	330f      	adds	r3, #15
 8001066:	111b      	asrs	r3, r3, #4
 8001068:	461a      	mov	r2, r3
 800106a:	4b08      	ldr	r3, [pc, #32]	; (800108c <BMP_CalcTemp+0x8c>)
 800106c:	601a      	str	r2, [r3, #0]
}
 800106e:	bf00      	nop
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	20000224 	.word	0x20000224
 8001080:	20000210 	.word	0x20000210
 8001084:	200001f8 	.word	0x200001f8
 8001088:	20000218 	.word	0x20000218
 800108c:	20000214 	.word	0x20000214

08001090 <BMP_GetTemp>:

int32_t BMP_GetTemp(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
	BMP_CalcTemp();
 8001094:	f7ff ffb4 	bl	8001000 <BMP_CalcTemp>
	return temp;
 8001098:	4b01      	ldr	r3, [pc, #4]	; (80010a0 <BMP_GetTemp+0x10>)
 800109a:	681b      	ldr	r3, [r3, #0]
}
 800109c:	4618      	mov	r0, r3
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000214 	.word	0x20000214

080010a4 <BMP_CalcPres>:
}

//calculate true pressure

void BMP_CalcPres(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b089      	sub	sp, #36	; 0x24
 80010a8:	af00      	add	r7, sp, #0
	int32_t B6;
	int32_t B3;
	uint32_t B4;
	uint32_t B7;

	uPres = ((presMLsb[0] << 16U) | (presMLsb[1] << 8U)) >> 8;
 80010aa:	4b68      	ldr	r3, [pc, #416]	; (800124c <BMP_CalcPres+0x1a8>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	041a      	lsls	r2, r3, #16
 80010b0:	4b66      	ldr	r3, [pc, #408]	; (800124c <BMP_CalcPres+0x1a8>)
 80010b2:	785b      	ldrb	r3, [r3, #1]
 80010b4:	021b      	lsls	r3, r3, #8
 80010b6:	4313      	orrs	r3, r2
 80010b8:	121b      	asrs	r3, r3, #8
 80010ba:	4a65      	ldr	r2, [pc, #404]	; (8001250 <BMP_CalcPres+0x1ac>)
 80010bc:	6013      	str	r3, [r2, #0]
	B6 = B5 - 4000;
 80010be:	4b65      	ldr	r3, [pc, #404]	; (8001254 <BMP_CalcPres+0x1b0>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 80010c6:	61fb      	str	r3, [r7, #28]
	x1 = ((int32_t) b1.B2 * ((B6 * B6) / 4096)) / 2048;
 80010c8:	4b63      	ldr	r3, [pc, #396]	; (8001258 <BMP_CalcPres+0x1b4>)
 80010ca:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80010ce:	461a      	mov	r2, r3
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	fb03 f303 	mul.w	r3, r3, r3
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	da01      	bge.n	80010de <BMP_CalcPres+0x3a>
 80010da:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80010de:	131b      	asrs	r3, r3, #12
 80010e0:	fb02 f303 	mul.w	r3, r2, r3
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	da01      	bge.n	80010ec <BMP_CalcPres+0x48>
 80010e8:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80010ec:	12db      	asrs	r3, r3, #11
 80010ee:	61bb      	str	r3, [r7, #24]
	x2 = ((int32_t) b1.AC2 * B6) / 2048;
 80010f0:	4b59      	ldr	r3, [pc, #356]	; (8001258 <BMP_CalcPres+0x1b4>)
 80010f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010f6:	461a      	mov	r2, r3
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	fb02 f303 	mul.w	r3, r2, r3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	da01      	bge.n	8001106 <BMP_CalcPres+0x62>
 8001102:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001106:	12db      	asrs	r3, r3, #11
 8001108:	617b      	str	r3, [r7, #20]
	x3 = x1 + x2;
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	4413      	add	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
	B3 = ((int32_t) b1.AC1 * 4 + x3 + 2) / 4;
 8001112:	4b51      	ldr	r3, [pc, #324]	; (8001258 <BMP_CalcPres+0x1b4>)
 8001114:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001118:	009a      	lsls	r2, r3, #2
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	4413      	add	r3, r2
 800111e:	3302      	adds	r3, #2
 8001120:	2b00      	cmp	r3, #0
 8001122:	da00      	bge.n	8001126 <BMP_CalcPres+0x82>
 8001124:	3303      	adds	r3, #3
 8001126:	109b      	asrs	r3, r3, #2
 8001128:	60fb      	str	r3, [r7, #12]
	x1 = ((int32_t) b1.AC3 * B6) / 8192;
 800112a:	4b4b      	ldr	r3, [pc, #300]	; (8001258 <BMP_CalcPres+0x1b4>)
 800112c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001130:	461a      	mov	r2, r3
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	fb02 f303 	mul.w	r3, r2, r3
 8001138:	2b00      	cmp	r3, #0
 800113a:	da02      	bge.n	8001142 <BMP_CalcPres+0x9e>
 800113c:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 8001140:	331f      	adds	r3, #31
 8001142:	135b      	asrs	r3, r3, #13
 8001144:	61bb      	str	r3, [r7, #24]
	x2 = ((int32_t) b1.B1 * ((B6 * B6) / 4096)) / 65536;
 8001146:	4b44      	ldr	r3, [pc, #272]	; (8001258 <BMP_CalcPres+0x1b4>)
 8001148:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800114c:	461a      	mov	r2, r3
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	fb03 f303 	mul.w	r3, r3, r3
 8001154:	2b00      	cmp	r3, #0
 8001156:	da01      	bge.n	800115c <BMP_CalcPres+0xb8>
 8001158:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800115c:	131b      	asrs	r3, r3, #12
 800115e:	fb02 f303 	mul.w	r3, r2, r3
 8001162:	2b00      	cmp	r3, #0
 8001164:	da02      	bge.n	800116c <BMP_CalcPres+0xc8>
 8001166:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800116a:	33ff      	adds	r3, #255	; 0xff
 800116c:	141b      	asrs	r3, r3, #16
 800116e:	617b      	str	r3, [r7, #20]
	x3 = (x1 + x2 + 2) / 4;
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	4413      	add	r3, r2
 8001176:	3302      	adds	r3, #2
 8001178:	2b00      	cmp	r3, #0
 800117a:	da00      	bge.n	800117e <BMP_CalcPres+0xda>
 800117c:	3303      	adds	r3, #3
 800117e:	109b      	asrs	r3, r3, #2
 8001180:	613b      	str	r3, [r7, #16]
	B4 = ((uint32_t) b1.AC4 * ((uint32_t) (x3 + 32768))) / 32768;
 8001182:	4b35      	ldr	r3, [pc, #212]	; (8001258 <BMP_CalcPres+0x1b4>)
 8001184:	88db      	ldrh	r3, [r3, #6]
 8001186:	461a      	mov	r2, r3
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800118e:	fb02 f303 	mul.w	r3, r2, r3
 8001192:	0bdb      	lsrs	r3, r3, #15
 8001194:	60bb      	str	r3, [r7, #8]
	B7 = ((uint32_t) uPres - (uint32_t) B3) * 50000;
 8001196:	4b2e      	ldr	r3, [pc, #184]	; (8001250 <BMP_CalcPres+0x1ac>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	461a      	mov	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	f24c 3250 	movw	r2, #50000	; 0xc350
 80011a4:	fb02 f303 	mul.w	r3, r2, r3
 80011a8:	607b      	str	r3, [r7, #4]
	if (B7 < 0x80000000)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	db08      	blt.n	80011c2 <BMP_CalcPres+0x11e>
	{
		pres = ((B7 * 2) / B4);  //pos sa trb cast?
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	005a      	lsls	r2, r3, #1
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ba:	461a      	mov	r2, r3
 80011bc:	4b27      	ldr	r3, [pc, #156]	; (800125c <BMP_CalcPres+0x1b8>)
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	e007      	b.n	80011d2 <BMP_CalcPres+0x12e>
	}
	else
	{
		pres = (B7 / B4) * 2;
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b23      	ldr	r3, [pc, #140]	; (800125c <BMP_CalcPres+0x1b8>)
 80011d0:	601a      	str	r2, [r3, #0]
	}
	x1 = (pres / 256) * (pres / 256);
 80011d2:	4b22      	ldr	r3, [pc, #136]	; (800125c <BMP_CalcPres+0x1b8>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	da00      	bge.n	80011dc <BMP_CalcPres+0x138>
 80011da:	33ff      	adds	r3, #255	; 0xff
 80011dc:	121b      	asrs	r3, r3, #8
 80011de:	461a      	mov	r2, r3
 80011e0:	4b1e      	ldr	r3, [pc, #120]	; (800125c <BMP_CalcPres+0x1b8>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	da00      	bge.n	80011ea <BMP_CalcPres+0x146>
 80011e8:	33ff      	adds	r3, #255	; 0xff
 80011ea:	121b      	asrs	r3, r3, #8
 80011ec:	fb02 f303 	mul.w	r3, r2, r3
 80011f0:	61bb      	str	r3, [r7, #24]
	x1 = (x1 * 3038) / 65536;
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	f640 32de 	movw	r2, #3038	; 0xbde
 80011f8:	fb02 f303 	mul.w	r3, r2, r3
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	da02      	bge.n	8001206 <BMP_CalcPres+0x162>
 8001200:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001204:	33ff      	adds	r3, #255	; 0xff
 8001206:	141b      	asrs	r3, r3, #16
 8001208:	61bb      	str	r3, [r7, #24]
	x2 = (-7357 * pres) / 65536;
 800120a:	4b14      	ldr	r3, [pc, #80]	; (800125c <BMP_CalcPres+0x1b8>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a14      	ldr	r2, [pc, #80]	; (8001260 <BMP_CalcPres+0x1bc>)
 8001210:	fb02 f303 	mul.w	r3, r2, r3
 8001214:	2b00      	cmp	r3, #0
 8001216:	da02      	bge.n	800121e <BMP_CalcPres+0x17a>
 8001218:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800121c:	33ff      	adds	r3, #255	; 0xff
 800121e:	141b      	asrs	r3, r3, #16
 8001220:	617b      	str	r3, [r7, #20]
	pres = pres + (x1 + x2 + 3791) / 16;
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	4413      	add	r3, r2
 8001228:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 800122c:	2b00      	cmp	r3, #0
 800122e:	da00      	bge.n	8001232 <BMP_CalcPres+0x18e>
 8001230:	330f      	adds	r3, #15
 8001232:	111b      	asrs	r3, r3, #4
 8001234:	461a      	mov	r2, r3
 8001236:	4b09      	ldr	r3, [pc, #36]	; (800125c <BMP_CalcPres+0x1b8>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4413      	add	r3, r2
 800123c:	4a07      	ldr	r2, [pc, #28]	; (800125c <BMP_CalcPres+0x1b8>)
 800123e:	6013      	str	r3, [r2, #0]

}
 8001240:	bf00      	nop
 8001242:	3724      	adds	r7, #36	; 0x24
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	20000228 	.word	0x20000228
 8001250:	2000021c 	.word	0x2000021c
 8001254:	20000218 	.word	0x20000218
 8001258:	200001f8 	.word	0x200001f8
 800125c:	20000220 	.word	0x20000220
 8001260:	ffffe343 	.word	0xffffe343

08001264 <BMP_GetPres>:
int32_t BMP_GetPres(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
	BMP_CalcPres();
 8001268:	f7ff ff1c 	bl	80010a4 <BMP_CalcPres>
	return pres;
 800126c:	4b01      	ldr	r3, [pc, #4]	; (8001274 <BMP_GetPres+0x10>)
 800126e:	681b      	ldr	r3, [r3, #0]
}
 8001270:	4618      	mov	r0, r3
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000220 	.word	0x20000220

08001278 <BMP_State_handler>:
{
	BMP_ReadUpres();
}

int32_t BMP_State_handler()
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af02      	add	r7, sp, #8
	uint8_t tempBuffer = 0x2E;
 800127e:	232e      	movs	r3, #46	; 0x2e
 8001280:	71bb      	strb	r3, [r7, #6]
	uint8_t writePres = 0x34;
 8001282:	2334      	movs	r3, #52	; 0x34
 8001284:	717b      	strb	r3, [r7, #5]
	uint8_t ok = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	71fb      	strb	r3, [r7, #7]

	switch (BMP_State)
 800128a:	4b52      	ldr	r3, [pc, #328]	; (80013d4 <BMP_State_handler+0x15c>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b07      	cmp	r3, #7
 8001290:	f200 809b 	bhi.w	80013ca <BMP_State_handler+0x152>
 8001294:	a201      	add	r2, pc, #4	; (adr r2, 800129c <BMP_State_handler+0x24>)
 8001296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800129a:	bf00      	nop
 800129c:	080012bd 	.word	0x080012bd
 80012a0:	080012e1 	.word	0x080012e1
 80012a4:	080012f7 	.word	0x080012f7
 80012a8:	0800131b 	.word	0x0800131b
 80012ac:	08001327 	.word	0x08001327
 80012b0:	0800134b 	.word	0x0800134b
 80012b4:	08001361 	.word	0x08001361
 80012b8:	08001385 	.word	0x08001385
	{
	case BMP_State_Temp_StartMeasurement:
		if (temp_is_started == 0)
 80012bc:	4b46      	ldr	r3, [pc, #280]	; (80013d8 <BMP_State_handler+0x160>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d177      	bne.n	80013b4 <BMP_State_handler+0x13c>
		{
			temp_is_started = 1;
 80012c4:	4b44      	ldr	r3, [pc, #272]	; (80013d8 <BMP_State_handler+0x160>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Mem_Write_IT(&hi2c1, BMP_ADDR_WRITE, 0xF4,I2C_MEMADD_SIZE_8BIT, &tempBuffer, 1);
 80012ca:	2301      	movs	r3, #1
 80012cc:	9301      	str	r3, [sp, #4]
 80012ce:	1dbb      	adds	r3, r7, #6
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	2301      	movs	r3, #1
 80012d4:	22f4      	movs	r2, #244	; 0xf4
 80012d6:	21ee      	movs	r1, #238	; 0xee
 80012d8:	4840      	ldr	r0, [pc, #256]	; (80013dc <BMP_State_handler+0x164>)
 80012da:	f002 f91d 	bl	8003518 <HAL_I2C_Mem_Write_IT>
		//	HAL_Delay(5);

		}
		// fa mem write it complete callback si treci cand intra acolo la urm state
		break;
 80012de:	e069      	b.n	80013b4 <BMP_State_handler+0x13c>
	case BMP_State_Wait_TempMeasurement:
		if(temp_wait == 0)
 80012e0:	4b3f      	ldr	r3, [pc, #252]	; (80013e0 <BMP_State_handler+0x168>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d167      	bne.n	80013b8 <BMP_State_handler+0x140>
		{
			temp_wait = 1;
 80012e8:	4b3d      	ldr	r3, [pc, #244]	; (80013e0 <BMP_State_handler+0x168>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	701a      	strb	r2, [r3, #0]
		//	HAL_GPIO_WritePin(Timertest_GPIO_Port, Timertest_Pin, SET);
	   	    HAL_TIM_Base_Start_IT(&htim17);
 80012ee:	483d      	ldr	r0, [pc, #244]	; (80013e4 <BMP_State_handler+0x16c>)
 80012f0:	f005 ffc0 	bl	8007274 <HAL_TIM_Base_Start_IT>
		//    HAL_Delay(5);
        //    BMP_State = BMP_State_Temp_ReadResult;
		}
		break;
 80012f4:	e060      	b.n	80013b8 <BMP_State_handler+0x140>
	case BMP_State_Temp_ReadResult:
		if (temp_is_read == 0)
 80012f6:	4b3c      	ldr	r3, [pc, #240]	; (80013e8 <BMP_State_handler+0x170>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d15e      	bne.n	80013bc <BMP_State_handler+0x144>
		{
			temp_is_read = 1;
 80012fe:	4b3a      	ldr	r3, [pc, #232]	; (80013e8 <BMP_State_handler+0x170>)
 8001300:	2201      	movs	r2, #1
 8001302:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Mem_Read_IT(&hi2c1, BMP_ADDR_READ, 0xF6,I2C_MEMADD_SIZE_8BIT, tempMLsb, 2);
 8001304:	2302      	movs	r3, #2
 8001306:	9301      	str	r3, [sp, #4]
 8001308:	4b38      	ldr	r3, [pc, #224]	; (80013ec <BMP_State_handler+0x174>)
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	2301      	movs	r3, #1
 800130e:	22f6      	movs	r2, #246	; 0xf6
 8001310:	21ef      	movs	r1, #239	; 0xef
 8001312:	4832      	ldr	r0, [pc, #200]	; (80013dc <BMP_State_handler+0x164>)
 8001314:	f002 f986 	bl	8003624 <HAL_I2C_Mem_Read_IT>

			//trecem la urm state cand intra in callback
		}
		break;
 8001318:	e050      	b.n	80013bc <BMP_State_handler+0x144>
	case BMP_State_Temp_Measure:
		BMP_GetTemp();
 800131a:	f7ff feb9 	bl	8001090 <BMP_GetTemp>
		BMP_State = BMP_State_Pressure_StartMeasurement;
 800131e:	4b2d      	ldr	r3, [pc, #180]	; (80013d4 <BMP_State_handler+0x15c>)
 8001320:	2204      	movs	r2, #4
 8001322:	701a      	strb	r2, [r3, #0]
		break;
 8001324:	e051      	b.n	80013ca <BMP_State_handler+0x152>
	case BMP_State_Pressure_StartMeasurement:
		if (pres_is_started == 0)
 8001326:	4b32      	ldr	r3, [pc, #200]	; (80013f0 <BMP_State_handler+0x178>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d148      	bne.n	80013c0 <BMP_State_handler+0x148>
		{
			pres_is_started = 1;
 800132e:	4b30      	ldr	r3, [pc, #192]	; (80013f0 <BMP_State_handler+0x178>)
 8001330:	2201      	movs	r2, #1
 8001332:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Mem_Write_IT(&hi2c1, BMP_ADDR_WRITE, 0xF4,I2C_MEMADD_SIZE_8BIT, &writePres, 1);
 8001334:	2301      	movs	r3, #1
 8001336:	9301      	str	r3, [sp, #4]
 8001338:	1d7b      	adds	r3, r7, #5
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	2301      	movs	r3, #1
 800133e:	22f4      	movs	r2, #244	; 0xf4
 8001340:	21ee      	movs	r1, #238	; 0xee
 8001342:	4826      	ldr	r0, [pc, #152]	; (80013dc <BMP_State_handler+0x164>)
 8001344:	f002 f8e8 	bl	8003518 <HAL_I2C_Mem_Write_IT>
		}
		// fa mem write it complete callback si treci cand intra acolo la urm state
		break;
 8001348:	e03a      	b.n	80013c0 <BMP_State_handler+0x148>
	case BMP_State_Wait_PresMeasurement:
		if(pres_wait == 0)
 800134a:	4b2a      	ldr	r3, [pc, #168]	; (80013f4 <BMP_State_handler+0x17c>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d138      	bne.n	80013c4 <BMP_State_handler+0x14c>
		{
			pres_wait = 1;
 8001352:	4b28      	ldr	r3, [pc, #160]	; (80013f4 <BMP_State_handler+0x17c>)
 8001354:	2201      	movs	r2, #1
 8001356:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim17);
 8001358:	4822      	ldr	r0, [pc, #136]	; (80013e4 <BMP_State_handler+0x16c>)
 800135a:	f005 ff8b 	bl	8007274 <HAL_TIM_Base_Start_IT>
		//	HAL_Delay(5);
		//	BMP_State = BMP_State_Pressure_ReadResult;
        }

        break;
 800135e:	e031      	b.n	80013c4 <BMP_State_handler+0x14c>
	case BMP_State_Pressure_ReadResult:
		if (pres_is_read == 0)
 8001360:	4b25      	ldr	r3, [pc, #148]	; (80013f8 <BMP_State_handler+0x180>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d12f      	bne.n	80013c8 <BMP_State_handler+0x150>
		{
			pres_is_read = 1;
 8001368:	4b23      	ldr	r3, [pc, #140]	; (80013f8 <BMP_State_handler+0x180>)
 800136a:	2201      	movs	r2, #1
 800136c:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Mem_Read_IT(&hi2c1, BMP_ADDR_READ, 0xF6,I2C_MEMADD_SIZE_8BIT, presMLsb, 2);
 800136e:	2302      	movs	r3, #2
 8001370:	9301      	str	r3, [sp, #4]
 8001372:	4b22      	ldr	r3, [pc, #136]	; (80013fc <BMP_State_handler+0x184>)
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	2301      	movs	r3, #1
 8001378:	22f6      	movs	r2, #246	; 0xf6
 800137a:	21ef      	movs	r1, #239	; 0xef
 800137c:	4817      	ldr	r0, [pc, #92]	; (80013dc <BMP_State_handler+0x164>)
 800137e:	f002 f951 	bl	8003624 <HAL_I2C_Mem_Read_IT>

		}
		//trecem la urm state cand intra in callback
		break;
 8001382:	e021      	b.n	80013c8 <BMP_State_handler+0x150>
	case BMP_State_Pressure_Measure:
		BMP_State = BMP_State_Temp_StartMeasurement;
 8001384:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <BMP_State_handler+0x15c>)
 8001386:	2200      	movs	r2, #0
 8001388:	701a      	strb	r2, [r3, #0]
		temp_is_started = 0;
 800138a:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <BMP_State_handler+0x160>)
 800138c:	2200      	movs	r2, #0
 800138e:	701a      	strb	r2, [r3, #0]
		temp_is_read = 0;
 8001390:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <BMP_State_handler+0x170>)
 8001392:	2200      	movs	r2, #0
 8001394:	701a      	strb	r2, [r3, #0]
		pres_is_started = 0;
 8001396:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <BMP_State_handler+0x178>)
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]
		pres_is_read = 0;
 800139c:	4b16      	ldr	r3, [pc, #88]	; (80013f8 <BMP_State_handler+0x180>)
 800139e:	2200      	movs	r2, #0
 80013a0:	701a      	strb	r2, [r3, #0]
		temp_wait = 0;
 80013a2:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <BMP_State_handler+0x168>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	701a      	strb	r2, [r3, #0]
		pres_wait = 0;
 80013a8:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <BMP_State_handler+0x17c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	701a      	strb	r2, [r3, #0]
		ok = 1;
 80013ae:	2301      	movs	r3, #1
 80013b0:	71fb      	strb	r3, [r7, #7]
		break;
 80013b2:	e00a      	b.n	80013ca <BMP_State_handler+0x152>
		break;
 80013b4:	bf00      	nop
 80013b6:	e008      	b.n	80013ca <BMP_State_handler+0x152>
		break;
 80013b8:	bf00      	nop
 80013ba:	e006      	b.n	80013ca <BMP_State_handler+0x152>
		break;
 80013bc:	bf00      	nop
 80013be:	e004      	b.n	80013ca <BMP_State_handler+0x152>
		break;
 80013c0:	bf00      	nop
 80013c2:	e002      	b.n	80013ca <BMP_State_handler+0x152>
        break;
 80013c4:	bf00      	nop
 80013c6:	e000      	b.n	80013ca <BMP_State_handler+0x152>
		break;
 80013c8:	bf00      	nop
	}

	return ok;
 80013ca:	79fb      	ldrb	r3, [r7, #7]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000230 	.word	0x20000230
 80013d8:	2000022a 	.word	0x2000022a
 80013dc:	2000023c 	.word	0x2000023c
 80013e0:	2000022e 	.word	0x2000022e
 80013e4:	200003d8 	.word	0x200003d8
 80013e8:	2000022b 	.word	0x2000022b
 80013ec:	20000224 	.word	0x20000224
 80013f0:	2000022c 	.word	0x2000022c
 80013f4:	2000022f 	.word	0x2000022f
 80013f8:	2000022d 	.word	0x2000022d
 80013fc:	20000228 	.word	0x20000228

08001400 <HMC_DEVIDv2>:
    return true;

}

bool HMC_DEVIDv2()
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af04      	add	r7, sp, #16
	uint8_t idA = 0xA;
 8001406:	230a      	movs	r3, #10
 8001408:	71fb      	strb	r3, [r7, #7]
    uint8_t idle = 0x3;
 800140a:	2303      	movs	r3, #3
 800140c:	71bb      	strb	r3, [r7, #6]

	if(HAL_I2C_IsDeviceReady(&hi2c1, HMC_ADDR_WRITE, 3, HAL_MAX_DELAY)  != HAL_OK)
 800140e:	f04f 33ff 	mov.w	r3, #4294967295
 8001412:	2203      	movs	r2, #3
 8001414:	213c      	movs	r1, #60	; 0x3c
 8001416:	4822      	ldr	r0, [pc, #136]	; (80014a0 <HMC_DEVIDv2+0xa0>)
 8001418:	f002 fa70 	bl	80038fc <HAL_I2C_IsDeviceReady>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <HMC_DEVIDv2+0x26>
	{
		return false;
 8001422:	2300      	movs	r3, #0
 8001424:	e037      	b.n	8001496 <HMC_DEVIDv2+0x96>
	}

    if(HAL_I2C_Mem_Read(&hi2c1, HMC_ADDR_WRITE, idA, I2C_MEMADD_SIZE_8BIT, &idA, 1, HAL_MAX_DELAY) != HAL_OK)
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	b29a      	uxth	r2, r3
 800142a:	f04f 33ff 	mov.w	r3, #4294967295
 800142e:	9302      	str	r3, [sp, #8]
 8001430:	2301      	movs	r3, #1
 8001432:	9301      	str	r3, [sp, #4]
 8001434:	1dfb      	adds	r3, r7, #7
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	2301      	movs	r3, #1
 800143a:	213c      	movs	r1, #60	; 0x3c
 800143c:	4818      	ldr	r0, [pc, #96]	; (80014a0 <HMC_DEVIDv2+0xa0>)
 800143e:	f001 ff51 	bl	80032e4 <HAL_I2C_Mem_Read>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <HMC_DEVIDv2+0x4c>
    {
    	return false;
 8001448:	2300      	movs	r3, #0
 800144a:	e024      	b.n	8001496 <HMC_DEVIDv2+0x96>
    }

    if(idA != 0x48)
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	2b48      	cmp	r3, #72	; 0x48
 8001450:	d001      	beq.n	8001456 <HMC_DEVIDv2+0x56>
    {
    	return false;
 8001452:	2300      	movs	r3, #0
 8001454:	e01f      	b.n	8001496 <HMC_DEVIDv2+0x96>
    }

    HAL_I2C_Mem_Write(&hi2c1, HMC_ADDR_WRITE, 0x2, I2C_MEMADD_SIZE_8BIT, &idle, 1, HAL_MAX_DELAY);  //punem senzorul in idle state
 8001456:	f04f 33ff 	mov.w	r3, #4294967295
 800145a:	9302      	str	r3, [sp, #8]
 800145c:	2301      	movs	r3, #1
 800145e:	9301      	str	r3, [sp, #4]
 8001460:	1dbb      	adds	r3, r7, #6
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	2301      	movs	r3, #1
 8001466:	2202      	movs	r2, #2
 8001468:	213c      	movs	r1, #60	; 0x3c
 800146a:	480d      	ldr	r0, [pc, #52]	; (80014a0 <HMC_DEVIDv2+0xa0>)
 800146c:	f001 fe26 	bl	80030bc <HAL_I2C_Mem_Write>

    if(HAL_I2C_Mem_Read(&hi2c1, HMC_ADDR_WRITE, HMC_DATAXO, I2C_MEMADD_SIZE_8BIT, databuffer, 6,HAL_MAX_DELAY) != HAL_OK)
 8001470:	f04f 33ff 	mov.w	r3, #4294967295
 8001474:	9302      	str	r3, [sp, #8]
 8001476:	2306      	movs	r3, #6
 8001478:	9301      	str	r3, [sp, #4]
 800147a:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <HMC_DEVIDv2+0xa4>)
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	2301      	movs	r3, #1
 8001480:	2203      	movs	r2, #3
 8001482:	213c      	movs	r1, #60	; 0x3c
 8001484:	4806      	ldr	r0, [pc, #24]	; (80014a0 <HMC_DEVIDv2+0xa0>)
 8001486:	f001 ff2d 	bl	80032e4 <HAL_I2C_Mem_Read>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <HMC_DEVIDv2+0x94>
    	{
    		return false;   //facem un dummy read
 8001490:	2300      	movs	r3, #0
 8001492:	e000      	b.n	8001496 <HMC_DEVIDv2+0x96>
    	}
    return true;
 8001494:	2301      	movs	r3, #1

}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	2000023c 	.word	0x2000023c
 80014a4:	20000234 	.word	0x20000234

080014a8 <HMC_ReadValues>:
{
	HAL_I2C_Mem_Read(&hi2c1, HMC_ADDR_WRITE, HMC_DATAXO, I2C_MEMADD_SIZE_8BIT, databuffer, 6,HAL_MAX_DELAY);
}

bool HMC_ReadValues ()
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af02      	add	r7, sp, #8
	if(HAL_I2C_Mem_Read_DMA(&hi2c1, HMC_ADDR_WRITE, HMC_DATAXO, I2C_MEMADD_SIZE_8BIT, databuffer, 6) != HAL_OK)
 80014ae:	2306      	movs	r3, #6
 80014b0:	9301      	str	r3, [sp, #4]
 80014b2:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <HMC_ReadValues+0x2c>)
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	2301      	movs	r3, #1
 80014b8:	2203      	movs	r2, #3
 80014ba:	213c      	movs	r1, #60	; 0x3c
 80014bc:	4806      	ldr	r0, [pc, #24]	; (80014d8 <HMC_ReadValues+0x30>)
 80014be:	f002 f937 	bl	8003730 <HAL_I2C_Mem_Read_DMA>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <HMC_ReadValues+0x24>
	{
		return false;
 80014c8:	2300      	movs	r3, #0
 80014ca:	e000      	b.n	80014ce <HMC_ReadValues+0x26>
	}

	return true;
 80014cc:	2301      	movs	r3, #1
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20000234 	.word	0x20000234
 80014d8:	2000023c 	.word	0x2000023c

080014dc <HMC_Set_SingleMeasureMode>:



bool HMC_Set_SingleMeasureMode()
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af04      	add	r7, sp, #16
	uint8_t single = 0x1;  //punel pe 1 sa fie in sigle measurement mode, daca lam setat pe 0 ii in continous measure mode
 80014e2:	2301      	movs	r3, #1
 80014e4:	71fb      	strb	r3, [r7, #7]

	if(HAL_I2C_Mem_Write(&hi2c1, HMC_ADDR_WRITE, 0x2, I2C_MEMADD_SIZE_8BIT, &single, 1, HAL_MAX_DELAY) != HAL_OK)
 80014e6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ea:	9302      	str	r3, [sp, #8]
 80014ec:	2301      	movs	r3, #1
 80014ee:	9301      	str	r3, [sp, #4]
 80014f0:	1dfb      	adds	r3, r7, #7
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	2301      	movs	r3, #1
 80014f6:	2202      	movs	r2, #2
 80014f8:	213c      	movs	r1, #60	; 0x3c
 80014fa:	4806      	ldr	r0, [pc, #24]	; (8001514 <HMC_Set_SingleMeasureMode+0x38>)
 80014fc:	f001 fdde 	bl	80030bc <HAL_I2C_Mem_Write>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <HMC_Set_SingleMeasureMode+0x2e>
	{
		return false;
 8001506:	2300      	movs	r3, #0
 8001508:	e000      	b.n	800150c <HMC_Set_SingleMeasureMode+0x30>
	}
	return true;
 800150a:	2301      	movs	r3, #1
}
 800150c:	4618      	mov	r0, r3
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	2000023c 	.word	0x2000023c

08001518 <HMC_IT_GetValuesXYZ>:
	}
	return true;
}

void HMC_IT_GetValuesXYZ(int16_t *x, int16_t *y, int16_t *z)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
	*x = ((int16_t) databuffer[0] << 8) | databuffer[1];
 8001524:	4b28      	ldr	r3, [pc, #160]	; (80015c8 <HMC_IT_GetValuesXYZ+0xb0>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	021b      	lsls	r3, r3, #8
 800152a:	b21a      	sxth	r2, r3
 800152c:	4b26      	ldr	r3, [pc, #152]	; (80015c8 <HMC_IT_GetValuesXYZ+0xb0>)
 800152e:	785b      	ldrb	r3, [r3, #1]
 8001530:	b21b      	sxth	r3, r3
 8001532:	4313      	orrs	r3, r2
 8001534:	b21a      	sxth	r2, r3
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	801a      	strh	r2, [r3, #0]
	*y = ((int16_t) databuffer[2] << 8) | databuffer[3];
 800153a:	4b23      	ldr	r3, [pc, #140]	; (80015c8 <HMC_IT_GetValuesXYZ+0xb0>)
 800153c:	789b      	ldrb	r3, [r3, #2]
 800153e:	021b      	lsls	r3, r3, #8
 8001540:	b21a      	sxth	r2, r3
 8001542:	4b21      	ldr	r3, [pc, #132]	; (80015c8 <HMC_IT_GetValuesXYZ+0xb0>)
 8001544:	78db      	ldrb	r3, [r3, #3]
 8001546:	b21b      	sxth	r3, r3
 8001548:	4313      	orrs	r3, r2
 800154a:	b21a      	sxth	r2, r3
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	801a      	strh	r2, [r3, #0]
	*z = ((int16_t) databuffer[4] << 8) | databuffer[5];
 8001550:	4b1d      	ldr	r3, [pc, #116]	; (80015c8 <HMC_IT_GetValuesXYZ+0xb0>)
 8001552:	791b      	ldrb	r3, [r3, #4]
 8001554:	021b      	lsls	r3, r3, #8
 8001556:	b21a      	sxth	r2, r3
 8001558:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <HMC_IT_GetValuesXYZ+0xb0>)
 800155a:	795b      	ldrb	r3, [r3, #5]
 800155c:	b21b      	sxth	r3, r3
 800155e:	4313      	orrs	r3, r2
 8001560:	b21a      	sxth	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	801a      	strh	r2, [r3, #0]

	*x = *x * 92;      // pentru a obtine valorile corecte la x ,y ,z
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f9b3 3000 	ldrsh.w	r3, [r3]
 800156c:	b29b      	uxth	r3, r3
 800156e:	461a      	mov	r2, r3
 8001570:	0052      	lsls	r2, r2, #1
 8001572:	441a      	add	r2, r3
 8001574:	00d2      	lsls	r2, r2, #3
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	b29b      	uxth	r3, r3
 800157c:	b21a      	sxth	r2, r3
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	801a      	strh	r2, [r3, #0]
 	*y = *y * 92;      // trb inmultite valorile cu 0.92(fol 92 ca sa nu folosim float ,la afisare trb prelucrate)
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001588:	b29b      	uxth	r3, r3
 800158a:	461a      	mov	r2, r3
 800158c:	0052      	lsls	r2, r2, #1
 800158e:	441a      	add	r2, r3
 8001590:	00d2      	lsls	r2, r2, #3
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	b29b      	uxth	r3, r3
 8001598:	b21a      	sxth	r2, r3
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	801a      	strh	r2, [r3, #0]
	*z = *z * 92;      // folosim 0.92 pentru ca sensor field range +- 1.3GA pentru alte valori folosim alt scale pag 13 datasheet
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	461a      	mov	r2, r3
 80015a8:	0052      	lsls	r2, r2, #1
 80015aa:	441a      	add	r2, r3
 80015ac:	00d2      	lsls	r2, r2, #3
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	b21a      	sxth	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	801a      	strh	r2, [r3, #0]

}
 80015ba:	bf00      	nop
 80015bc:	3714      	adds	r7, #20
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	20000234 	.word	0x20000234

080015cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015d2:	4b14      	ldr	r3, [pc, #80]	; (8001624 <MX_DMA_Init+0x58>)
 80015d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015d6:	4a13      	ldr	r2, [pc, #76]	; (8001624 <MX_DMA_Init+0x58>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	6493      	str	r3, [r2, #72]	; 0x48
 80015de:	4b11      	ldr	r3, [pc, #68]	; (8001624 <MX_DMA_Init+0x58>)
 80015e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	607b      	str	r3, [r7, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 80015ea:	2200      	movs	r2, #0
 80015ec:	2102      	movs	r1, #2
 80015ee:	200c      	movs	r0, #12
 80015f0:	f001 f87d 	bl	80026ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80015f4:	200c      	movs	r0, #12
 80015f6:	f001 f896 	bl	8002726 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 2, 0);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2102      	movs	r1, #2
 80015fe:	200d      	movs	r0, #13
 8001600:	f001 f875 	bl	80026ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001604:	200d      	movs	r0, #13
 8001606:	f001 f88e 	bl	8002726 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800160a:	2200      	movs	r2, #0
 800160c:	2100      	movs	r1, #0
 800160e:	2011      	movs	r0, #17
 8001610:	f001 f86d 	bl	80026ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001614:	2011      	movs	r0, #17
 8001616:	f001 f886 	bl	8002726 <HAL_NVIC_EnableIRQ>

}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40021000 	.word	0x40021000

08001628 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	; 0x28
 800162c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162e:	f107 0314 	add.w	r3, r7, #20
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	60da      	str	r2, [r3, #12]
 800163c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800163e:	4b63      	ldr	r3, [pc, #396]	; (80017cc <MX_GPIO_Init+0x1a4>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001642:	4a62      	ldr	r2, [pc, #392]	; (80017cc <MX_GPIO_Init+0x1a4>)
 8001644:	f043 0304 	orr.w	r3, r3, #4
 8001648:	64d3      	str	r3, [r2, #76]	; 0x4c
 800164a:	4b60      	ldr	r3, [pc, #384]	; (80017cc <MX_GPIO_Init+0x1a4>)
 800164c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164e:	f003 0304 	and.w	r3, r3, #4
 8001652:	613b      	str	r3, [r7, #16]
 8001654:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001656:	4b5d      	ldr	r3, [pc, #372]	; (80017cc <MX_GPIO_Init+0x1a4>)
 8001658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165a:	4a5c      	ldr	r2, [pc, #368]	; (80017cc <MX_GPIO_Init+0x1a4>)
 800165c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001660:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001662:	4b5a      	ldr	r3, [pc, #360]	; (80017cc <MX_GPIO_Init+0x1a4>)
 8001664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800166e:	4b57      	ldr	r3, [pc, #348]	; (80017cc <MX_GPIO_Init+0x1a4>)
 8001670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001672:	4a56      	ldr	r2, [pc, #344]	; (80017cc <MX_GPIO_Init+0x1a4>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	64d3      	str	r3, [r2, #76]	; 0x4c
 800167a:	4b54      	ldr	r3, [pc, #336]	; (80017cc <MX_GPIO_Init+0x1a4>)
 800167c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001686:	4b51      	ldr	r3, [pc, #324]	; (80017cc <MX_GPIO_Init+0x1a4>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168a:	4a50      	ldr	r2, [pc, #320]	; (80017cc <MX_GPIO_Init+0x1a4>)
 800168c:	f043 0302 	orr.w	r3, r3, #2
 8001690:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001692:	4b4e      	ldr	r3, [pc, #312]	; (80017cc <MX_GPIO_Init+0x1a4>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	607b      	str	r3, [r7, #4]
 800169c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GYRO_GPIO_Port, SPI_CS_GYRO_Pin, GPIO_PIN_SET);
 800169e:	2201      	movs	r2, #1
 80016a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a8:	f001 fc48 	bl	8002f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Timertest_GPIO_Port, Timertest_Pin, GPIO_PIN_RESET);
 80016ac:	2200      	movs	r2, #0
 80016ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b6:	f001 fc41 	bl	8002f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADXL_RESET_GPIO_Port, ADXL_RESET_Pin, GPIO_PIN_RESET);
 80016ba:	2200      	movs	r2, #0
 80016bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016c0:	4843      	ldr	r0, [pc, #268]	; (80017d0 <MX_GPIO_Init+0x1a8>)
 80016c2:	f001 fc3b 	bl	8002f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_ACC_GPIO_Port, SPI_CS_ACC_Pin, GPIO_PIN_SET);
 80016c6:	2201      	movs	r2, #1
 80016c8:	2140      	movs	r1, #64	; 0x40
 80016ca:	4842      	ldr	r0, [pc, #264]	; (80017d4 <MX_GPIO_Init+0x1ac>)
 80016cc:	f001 fc36 	bl	8002f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016d6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80016da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	4619      	mov	r1, r3
 80016e6:	483a      	ldr	r0, [pc, #232]	; (80017d0 <MX_GPIO_Init+0x1a8>)
 80016e8:	f001 fa7e 	bl	8002be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_EXTI_ACC_Pin;
 80016ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_EXTI_ACC_GPIO_Port, &GPIO_InitStruct);
 80016fa:	f107 0314 	add.w	r3, r7, #20
 80016fe:	4619      	mov	r1, r3
 8001700:	4833      	ldr	r0, [pc, #204]	; (80017d0 <MX_GPIO_Init+0x1a8>)
 8001702:	f001 fa71 	bl	8002be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_GYRO_Pin;
 8001706:	f44f 7300 	mov.w	r3, #512	; 0x200
 800170a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170c:	2301      	movs	r3, #1
 800170e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001714:	2302      	movs	r3, #2
 8001716:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GYRO_GPIO_Port, &GPIO_InitStruct);
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	4619      	mov	r1, r3
 800171e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001722:	f001 fa61 	bl	8002be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Timertest_Pin;
 8001726:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800172a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172c:	2301      	movs	r3, #1
 800172e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001734:	2300      	movs	r3, #0
 8001736:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Timertest_GPIO_Port, &GPIO_InitStruct);
 8001738:	f107 0314 	add.w	r3, r7, #20
 800173c:	4619      	mov	r1, r3
 800173e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001742:	f001 fa51 	bl	8002be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADXL_RESET_Pin;
 8001746:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800174a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174c:	2301      	movs	r3, #1
 800174e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001754:	2300      	movs	r3, #0
 8001756:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ADXL_RESET_GPIO_Port, &GPIO_InitStruct);
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	4619      	mov	r1, r3
 800175e:	481c      	ldr	r0, [pc, #112]	; (80017d0 <MX_GPIO_Init+0x1a8>)
 8001760:	f001 fa42 	bl	8002be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_EXTI5_HMC_Pin;
 8001764:	2320      	movs	r3, #32
 8001766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001768:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800176c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800176e:	2301      	movs	r3, #1
 8001770:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_EXTI5_HMC_GPIO_Port, &GPIO_InitStruct);
 8001772:	f107 0314 	add.w	r3, r7, #20
 8001776:	4619      	mov	r1, r3
 8001778:	4816      	ldr	r0, [pc, #88]	; (80017d4 <MX_GPIO_Init+0x1ac>)
 800177a:	f001 fa35 	bl	8002be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_ACC_Pin;
 800177e:	2340      	movs	r3, #64	; 0x40
 8001780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001782:	2301      	movs	r3, #1
 8001784:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800178a:	2302      	movs	r3, #2
 800178c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_ACC_GPIO_Port, &GPIO_InitStruct);
 800178e:	f107 0314 	add.w	r3, r7, #20
 8001792:	4619      	mov	r1, r3
 8001794:	480f      	ldr	r0, [pc, #60]	; (80017d4 <MX_GPIO_Init+0x1ac>)
 8001796:	f001 fa27 	bl	8002be8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_EXTI_GYRO_Pin;
 800179a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800179e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a0:	2300      	movs	r3, #0
 80017a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_EXTI_GYRO_GPIO_Port, &GPIO_InitStruct);
 80017a8:	f107 0314 	add.w	r3, r7, #20
 80017ac:	4619      	mov	r1, r3
 80017ae:	4809      	ldr	r0, [pc, #36]	; (80017d4 <MX_GPIO_Init+0x1ac>)
 80017b0:	f001 fa1a 	bl	8002be8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 80017b4:	2200      	movs	r2, #0
 80017b6:	2102      	movs	r1, #2
 80017b8:	2017      	movs	r0, #23
 80017ba:	f000 ff98 	bl	80026ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017be:	2017      	movs	r0, #23
 80017c0:	f000 ffb1 	bl	8002726 <HAL_NVIC_EnableIRQ>

}
 80017c4:	bf00      	nop
 80017c6:	3728      	adds	r7, #40	; 0x28
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40021000 	.word	0x40021000
 80017d0:	48000800 	.word	0x48000800
 80017d4:	48000400 	.word	0x48000400

080017d8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_EXTI5_HMC_Pin)
 80017e2:	88fb      	ldrh	r3, [r7, #6]
 80017e4:	2b20      	cmp	r3, #32
 80017e6:	d104      	bne.n	80017f2 <HAL_GPIO_EXTI_Callback+0x1a>
  {
	  HMC_EXTI_Ready = true;
 80017e8:	4b04      	ldr	r3, [pc, #16]	; (80017fc <HAL_GPIO_EXTI_Callback+0x24>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	701a      	strb	r2, [r3, #0]
	  HMC_ReadValues();
 80017ee:	f7ff fe5b 	bl	80014a8 <HMC_ReadValues>
  }
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	200002d8 	.word	0x200002d8

08001800 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001804:	4b1b      	ldr	r3, [pc, #108]	; (8001874 <MX_I2C1_Init+0x74>)
 8001806:	4a1c      	ldr	r2, [pc, #112]	; (8001878 <MX_I2C1_Init+0x78>)
 8001808:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 800180a:	4b1a      	ldr	r3, [pc, #104]	; (8001874 <MX_I2C1_Init+0x74>)
 800180c:	4a1b      	ldr	r2, [pc, #108]	; (800187c <MX_I2C1_Init+0x7c>)
 800180e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001810:	4b18      	ldr	r3, [pc, #96]	; (8001874 <MX_I2C1_Init+0x74>)
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001816:	4b17      	ldr	r3, [pc, #92]	; (8001874 <MX_I2C1_Init+0x74>)
 8001818:	2201      	movs	r2, #1
 800181a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800181c:	4b15      	ldr	r3, [pc, #84]	; (8001874 <MX_I2C1_Init+0x74>)
 800181e:	2200      	movs	r2, #0
 8001820:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001822:	4b14      	ldr	r3, [pc, #80]	; (8001874 <MX_I2C1_Init+0x74>)
 8001824:	2200      	movs	r2, #0
 8001826:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001828:	4b12      	ldr	r3, [pc, #72]	; (8001874 <MX_I2C1_Init+0x74>)
 800182a:	2200      	movs	r2, #0
 800182c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800182e:	4b11      	ldr	r3, [pc, #68]	; (8001874 <MX_I2C1_Init+0x74>)
 8001830:	2200      	movs	r2, #0
 8001832:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001834:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <MX_I2C1_Init+0x74>)
 8001836:	2200      	movs	r2, #0
 8001838:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800183a:	480e      	ldr	r0, [pc, #56]	; (8001874 <MX_I2C1_Init+0x74>)
 800183c:	f001 fbae 	bl	8002f9c <HAL_I2C_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001846:	f000 f9ba 	bl	8001bbe <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800184a:	2100      	movs	r1, #0
 800184c:	4809      	ldr	r0, [pc, #36]	; (8001874 <MX_I2C1_Init+0x74>)
 800184e:	f003 ff1f 	bl	8005690 <HAL_I2CEx_ConfigAnalogFilter>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001858:	f000 f9b1 	bl	8001bbe <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800185c:	2100      	movs	r1, #0
 800185e:	4805      	ldr	r0, [pc, #20]	; (8001874 <MX_I2C1_Init+0x74>)
 8001860:	f003 ff61 	bl	8005726 <HAL_I2CEx_ConfigDigitalFilter>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800186a:	f000 f9a8 	bl	8001bbe <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	2000023c 	.word	0x2000023c
 8001878:	40005400 	.word	0x40005400
 800187c:	00702991 	.word	0x00702991

08001880 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b0ac      	sub	sp, #176	; 0xb0
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	2288      	movs	r2, #136	; 0x88
 800189e:	2100      	movs	r1, #0
 80018a0:	4618      	mov	r0, r3
 80018a2:	f006 fcf9 	bl	8008298 <memset>
  if(i2cHandle->Instance==I2C1)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a3e      	ldr	r2, [pc, #248]	; (80019a4 <HAL_I2C_MspInit+0x124>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d174      	bne.n	800199a <HAL_I2C_MspInit+0x11a>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80018b0:	2340      	movs	r3, #64	; 0x40
 80018b2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80018b4:	2300      	movs	r3, #0
 80018b6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	4618      	mov	r0, r3
 80018be:	f004 fe03 	bl	80064c8 <HAL_RCCEx_PeriphCLKConfig>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80018c8:	f000 f979 	bl	8001bbe <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018cc:	4b36      	ldr	r3, [pc, #216]	; (80019a8 <HAL_I2C_MspInit+0x128>)
 80018ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d0:	4a35      	ldr	r2, [pc, #212]	; (80019a8 <HAL_I2C_MspInit+0x128>)
 80018d2:	f043 0302 	orr.w	r3, r3, #2
 80018d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018d8:	4b33      	ldr	r3, [pc, #204]	; (80019a8 <HAL_I2C_MspInit+0x128>)
 80018da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	613b      	str	r3, [r7, #16]
 80018e2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80018e4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80018e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018ec:	2312      	movs	r3, #18
 80018ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018f2:	2301      	movs	r3, #1
 80018f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f8:	2303      	movs	r3, #3
 80018fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018fe:	2304      	movs	r3, #4
 8001900:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001904:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001908:	4619      	mov	r1, r3
 800190a:	4828      	ldr	r0, [pc, #160]	; (80019ac <HAL_I2C_MspInit+0x12c>)
 800190c:	f001 f96c 	bl	8002be8 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB7);
 8001910:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001914:	f003 ff54 	bl	80057c0 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_PB8);
 8001918:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800191c:	f003 ff50 	bl	80057c0 <HAL_I2CEx_EnableFastModePlus>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001920:	4b21      	ldr	r3, [pc, #132]	; (80019a8 <HAL_I2C_MspInit+0x128>)
 8001922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001924:	4a20      	ldr	r2, [pc, #128]	; (80019a8 <HAL_I2C_MspInit+0x128>)
 8001926:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800192a:	6593      	str	r3, [r2, #88]	; 0x58
 800192c:	4b1e      	ldr	r3, [pc, #120]	; (80019a8 <HAL_I2C_MspInit+0x128>)
 800192e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001930:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8001938:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <HAL_I2C_MspInit+0x130>)
 800193a:	4a1e      	ldr	r2, [pc, #120]	; (80019b4 <HAL_I2C_MspInit+0x134>)
 800193c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_3;
 800193e:	4b1c      	ldr	r3, [pc, #112]	; (80019b0 <HAL_I2C_MspInit+0x130>)
 8001940:	2203      	movs	r2, #3
 8001942:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001944:	4b1a      	ldr	r3, [pc, #104]	; (80019b0 <HAL_I2C_MspInit+0x130>)
 8001946:	2200      	movs	r2, #0
 8001948:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800194a:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <HAL_I2C_MspInit+0x130>)
 800194c:	2200      	movs	r2, #0
 800194e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001950:	4b17      	ldr	r3, [pc, #92]	; (80019b0 <HAL_I2C_MspInit+0x130>)
 8001952:	2280      	movs	r2, #128	; 0x80
 8001954:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001956:	4b16      	ldr	r3, [pc, #88]	; (80019b0 <HAL_I2C_MspInit+0x130>)
 8001958:	2200      	movs	r2, #0
 800195a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800195c:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <HAL_I2C_MspInit+0x130>)
 800195e:	2200      	movs	r2, #0
 8001960:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001962:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <HAL_I2C_MspInit+0x130>)
 8001964:	2200      	movs	r2, #0
 8001966:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001968:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <HAL_I2C_MspInit+0x130>)
 800196a:	2200      	movs	r2, #0
 800196c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800196e:	4810      	ldr	r0, [pc, #64]	; (80019b0 <HAL_I2C_MspInit+0x130>)
 8001970:	f000 fef4 	bl	800275c <HAL_DMA_Init>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <HAL_I2C_MspInit+0xfe>
    {
      Error_Handler();
 800197a:	f000 f920 	bl	8001bbe <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a0b      	ldr	r2, [pc, #44]	; (80019b0 <HAL_I2C_MspInit+0x130>)
 8001982:	63da      	str	r2, [r3, #60]	; 0x3c
 8001984:	4a0a      	ldr	r2, [pc, #40]	; (80019b0 <HAL_I2C_MspInit+0x130>)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 2, 0);
 800198a:	2200      	movs	r2, #0
 800198c:	2102      	movs	r1, #2
 800198e:	201f      	movs	r0, #31
 8001990:	f000 fead 	bl	80026ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001994:	201f      	movs	r0, #31
 8001996:	f000 fec6 	bl	8002726 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800199a:	bf00      	nop
 800199c:	37b0      	adds	r7, #176	; 0xb0
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40005400 	.word	0x40005400
 80019a8:	40021000 	.word	0x40021000
 80019ac:	48000400 	.word	0x48000400
 80019b0:	20000290 	.word	0x20000290
 80019b4:	40020080 	.word	0x40020080

080019b8 <HAL_I2C_MemRxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{  // uint8_t idle = 0x3;
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]

	if(HMC_EXTI_Ready)
 80019c0:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <HAL_I2C_MemRxCpltCallback+0x60>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d007      	beq.n	80019d8 <HAL_I2C_MemRxCpltCallback+0x20>
	{
		HMC_Set_SingleMeasureMode();
 80019c8:	f7ff fd88 	bl	80014dc <HMC_Set_SingleMeasureMode>
		HMC_EXTI_Ready = false;
 80019cc:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <HAL_I2C_MemRxCpltCallback+0x60>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]
		HMC_IT_Ready = true;
 80019d2:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <HAL_I2C_MemRxCpltCallback+0x64>)
 80019d4:	2201      	movs	r2, #1
 80019d6:	701a      	strb	r2, [r3, #0]
	}


	if(temp_is_read == 1)
 80019d8:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <HAL_I2C_MemRxCpltCallback+0x68>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d109      	bne.n	80019f4 <HAL_I2C_MemRxCpltCallback+0x3c>
	{
		temp_is_read++;
 80019e0:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <HAL_I2C_MemRxCpltCallback+0x68>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	3301      	adds	r3, #1
 80019e6:	b2da      	uxtb	r2, r3
 80019e8:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <HAL_I2C_MemRxCpltCallback+0x68>)
 80019ea:	701a      	strb	r2, [r3, #0]
		BMP_State = BMP_State_Temp_Measure;
 80019ec:	4b0d      	ldr	r3, [pc, #52]	; (8001a24 <HAL_I2C_MemRxCpltCallback+0x6c>)
 80019ee:	2203      	movs	r2, #3
 80019f0:	701a      	strb	r2, [r3, #0]
	{
		pres_is_read++;
		BMP_State = BMP_State_Pressure_Measure;
	}

}
 80019f2:	e00c      	b.n	8001a0e <HAL_I2C_MemRxCpltCallback+0x56>
	else if(pres_is_read == 1)
 80019f4:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <HAL_I2C_MemRxCpltCallback+0x70>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d108      	bne.n	8001a0e <HAL_I2C_MemRxCpltCallback+0x56>
		pres_is_read++;
 80019fc:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <HAL_I2C_MemRxCpltCallback+0x70>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	3301      	adds	r3, #1
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <HAL_I2C_MemRxCpltCallback+0x70>)
 8001a06:	701a      	strb	r2, [r3, #0]
		BMP_State = BMP_State_Pressure_Measure;
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <HAL_I2C_MemRxCpltCallback+0x6c>)
 8001a0a:	2207      	movs	r2, #7
 8001a0c:	701a      	strb	r2, [r3, #0]
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	200002d8 	.word	0x200002d8
 8001a1c:	200002d9 	.word	0x200002d9
 8001a20:	2000022b 	.word	0x2000022b
 8001a24:	20000230 	.word	0x20000230
 8001a28:	2000022d 	.word	0x2000022d

08001a2c <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
	if(temp_is_started == 1)
 8001a34:	4b10      	ldr	r3, [pc, #64]	; (8001a78 <HAL_I2C_MemTxCpltCallback+0x4c>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d109      	bne.n	8001a50 <HAL_I2C_MemTxCpltCallback+0x24>
	{
		temp_is_started++;
 8001a3c:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <HAL_I2C_MemTxCpltCallback+0x4c>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	3301      	adds	r3, #1
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <HAL_I2C_MemTxCpltCallback+0x4c>)
 8001a46:	701a      	strb	r2, [r3, #0]
		BMP_State = BMP_State_Wait_TempMeasurement;
 8001a48:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <HAL_I2C_MemTxCpltCallback+0x50>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	701a      	strb	r2, [r3, #0]
	else if(pres_is_started == 1)
	{
		pres_is_started++;
		BMP_State = BMP_State_Wait_PresMeasurement;
    }
}
 8001a4e:	e00c      	b.n	8001a6a <HAL_I2C_MemTxCpltCallback+0x3e>
	else if(pres_is_started == 1)
 8001a50:	4b0b      	ldr	r3, [pc, #44]	; (8001a80 <HAL_I2C_MemTxCpltCallback+0x54>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d108      	bne.n	8001a6a <HAL_I2C_MemTxCpltCallback+0x3e>
		pres_is_started++;
 8001a58:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <HAL_I2C_MemTxCpltCallback+0x54>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <HAL_I2C_MemTxCpltCallback+0x54>)
 8001a62:	701a      	strb	r2, [r3, #0]
		BMP_State = BMP_State_Wait_PresMeasurement;
 8001a64:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <HAL_I2C_MemTxCpltCallback+0x50>)
 8001a66:	2205      	movs	r2, #5
 8001a68:	701a      	strb	r2, [r3, #0]
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	2000022a 	.word	0x2000022a
 8001a7c:	20000230 	.word	0x20000230
 8001a80:	2000022c 	.word	0x2000022c

08001a84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a8a:	f000 fcd9 	bl	8002440 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a8e:	f000 f845 	bl	8001b1c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  TIM17->DIER &= ~(TIM_IT_UPDATE);
 8001a92:	4b1f      	ldr	r3, [pc, #124]	; (8001b10 <main+0x8c>)
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	4a1e      	ldr	r2, [pc, #120]	; (8001b10 <main+0x8c>)
 8001a98:	f023 0301 	bic.w	r3, r3, #1
 8001a9c:	60d3      	str	r3, [r2, #12]
  TIM17->CR1  &= ~(TIM_CR1_CEN);
 8001a9e:	4b1c      	ldr	r3, [pc, #112]	; (8001b10 <main+0x8c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a1b      	ldr	r2, [pc, #108]	; (8001b10 <main+0x8c>)
 8001aa4:	f023 0301 	bic.w	r3, r3, #1
 8001aa8:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001aaa:	f7ff fdbd 	bl	8001628 <MX_GPIO_Init>
  MX_DMA_Init();
 8001aae:	f7ff fd8d 	bl	80015cc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001ab2:	f000 fb69 	bl	8002188 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001ab6:	f000 f887 	bl	8001bc8 <MX_SPI1_Init>
  MX_I2C1_Init();
 8001aba:	f7ff fea1 	bl	8001800 <MX_I2C1_Init>
  MX_TIM17_Init();
 8001abe:	f000 fae1 	bl	8002084 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  BMP_Init();
 8001ac2:	f7ff fa8b 	bl	8000fdc <BMP_Init>
  HMC_DEVIDv2();
 8001ac6:	f7ff fc9b 	bl	8001400 <HMC_DEVIDv2>
  HMC_Set_SingleMeasureMode();
 8001aca:	f7ff fd07 	bl	80014dc <HMC_Set_SingleMeasureMode>
  	    GYRO_XYZConv(&x, &y, &z);

  	 //   USART_TransmitGYROValues(&x, &y, &z);
    }
*/
	  if(BMP_State_handler() == 1)
 8001ace:	f7ff fbd3 	bl	8001278 <BMP_State_handler>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d107      	bne.n	8001ae8 <main+0x64>
     {
        baropres = BMP_GetPres();
 8001ad8:	f7ff fbc4 	bl	8001264 <BMP_GetPres>
 8001adc:	4603      	mov	r3, r0
 8001ade:	4a0d      	ldr	r2, [pc, #52]	; (8001b14 <main+0x90>)
 8001ae0:	6013      	str	r3, [r2, #0]
        USART_TransmitBMPValue(&baropres);
 8001ae2:	480c      	ldr	r0, [pc, #48]	; (8001b14 <main+0x90>)
 8001ae4:	f000 fc60 	bl	80023a8 <USART_TransmitBMPValue>
     }

	 if(HMC_IT_Ready)
 8001ae8:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <main+0x94>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0ee      	beq.n	8001ace <main+0x4a>
	 {
         HMC_IT_GetValuesXYZ(&x, &y, &z);
 8001af0:	1cba      	adds	r2, r7, #2
 8001af2:	1d39      	adds	r1, r7, #4
 8001af4:	1dbb      	adds	r3, r7, #6
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff fd0e 	bl	8001518 <HMC_IT_GetValuesXYZ>
		 USART_TransmitHMCValues(&x, &y, &z);
 8001afc:	1cba      	adds	r2, r7, #2
 8001afe:	1d39      	adds	r1, r7, #4
 8001b00:	1dbb      	adds	r3, r7, #6
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 fbcc 	bl	80022a0 <USART_TransmitHMCValues>
		 HMC_IT_Ready = false;
 8001b08:	4b03      	ldr	r3, [pc, #12]	; (8001b18 <main+0x94>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
	  if(BMP_State_handler() == 1)
 8001b0e:	e7de      	b.n	8001ace <main+0x4a>
 8001b10:	40014800 	.word	0x40014800
 8001b14:	200002dc 	.word	0x200002dc
 8001b18:	200002d9 	.word	0x200002d9

08001b1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b096      	sub	sp, #88	; 0x58
 8001b20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b22:	f107 0314 	add.w	r3, r7, #20
 8001b26:	2244      	movs	r2, #68	; 0x44
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f006 fbb4 	bl	8008298 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b30:	463b      	mov	r3, r7
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	605a      	str	r2, [r3, #4]
 8001b38:	609a      	str	r2, [r3, #8]
 8001b3a:	60da      	str	r2, [r3, #12]
 8001b3c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001b3e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b42:	f003 fe6b 	bl	800581c <HAL_PWREx_ControlVoltageScaling>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001b4c:	f000 f837 	bl	8001bbe <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b50:	2302      	movs	r3, #2
 8001b52:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b58:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b5a:	2310      	movs	r3, #16
 8001b5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b62:	2302      	movs	r3, #2
 8001b64:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001b66:	2301      	movs	r3, #1
 8001b68:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001b6a:	230a      	movs	r3, #10
 8001b6c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001b6e:	2307      	movs	r3, #7
 8001b70:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b72:	2302      	movs	r3, #2
 8001b74:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b76:	2302      	movs	r3, #2
 8001b78:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b7a:	f107 0314 	add.w	r3, r7, #20
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f003 fea2 	bl	80058c8 <HAL_RCC_OscConfig>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001b8a:	f000 f818 	bl	8001bbe <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b8e:	230f      	movs	r3, #15
 8001b90:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b92:	2303      	movs	r3, #3
 8001b94:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b96:	2300      	movs	r3, #0
 8001b98:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001ba2:	463b      	mov	r3, r7
 8001ba4:	2104      	movs	r1, #4
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f004 fa6a 	bl	8006080 <HAL_RCC_ClockConfig>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001bb2:	f000 f804 	bl	8001bbe <Error_Handler>
  }
}
 8001bb6:	bf00      	nop
 8001bb8:	3758      	adds	r7, #88	; 0x58
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bc2:	b672      	cpsid	i
}
 8001bc4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bc6:	e7fe      	b.n	8001bc6 <Error_Handler+0x8>

08001bc8 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001bcc:	4b1b      	ldr	r3, [pc, #108]	; (8001c3c <MX_SPI1_Init+0x74>)
 8001bce:	4a1c      	ldr	r2, [pc, #112]	; (8001c40 <MX_SPI1_Init+0x78>)
 8001bd0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bd2:	4b1a      	ldr	r3, [pc, #104]	; (8001c3c <MX_SPI1_Init+0x74>)
 8001bd4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bd8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bda:	4b18      	ldr	r3, [pc, #96]	; (8001c3c <MX_SPI1_Init+0x74>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001be0:	4b16      	ldr	r3, [pc, #88]	; (8001c3c <MX_SPI1_Init+0x74>)
 8001be2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001be6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001be8:	4b14      	ldr	r3, [pc, #80]	; (8001c3c <MX_SPI1_Init+0x74>)
 8001bea:	2202      	movs	r2, #2
 8001bec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001bee:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <MX_SPI1_Init+0x74>)
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bf4:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <MX_SPI1_Init+0x74>)
 8001bf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bfa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001bfc:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <MX_SPI1_Init+0x74>)
 8001bfe:	2238      	movs	r2, #56	; 0x38
 8001c00:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c02:	4b0e      	ldr	r3, [pc, #56]	; (8001c3c <MX_SPI1_Init+0x74>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c08:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <MX_SPI1_Init+0x74>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c0e:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <MX_SPI1_Init+0x74>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001c14:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <MX_SPI1_Init+0x74>)
 8001c16:	2207      	movs	r2, #7
 8001c18:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c1a:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <MX_SPI1_Init+0x74>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001c20:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <MX_SPI1_Init+0x74>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c26:	4805      	ldr	r0, [pc, #20]	; (8001c3c <MX_SPI1_Init+0x74>)
 8001c28:	f005 f90a 	bl	8006e40 <HAL_SPI_Init>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001c32:	f7ff ffc4 	bl	8001bbe <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	200002e0 	.word	0x200002e0
 8001c40:	40013000 	.word	0x40013000

08001c44 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08a      	sub	sp, #40	; 0x28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a4d      	ldr	r2, [pc, #308]	; (8001d98 <HAL_SPI_MspInit+0x154>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	f040 8094 	bne.w	8001d90 <HAL_SPI_MspInit+0x14c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c68:	4b4c      	ldr	r3, [pc, #304]	; (8001d9c <HAL_SPI_MspInit+0x158>)
 8001c6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c6c:	4a4b      	ldr	r2, [pc, #300]	; (8001d9c <HAL_SPI_MspInit+0x158>)
 8001c6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c72:	6613      	str	r3, [r2, #96]	; 0x60
 8001c74:	4b49      	ldr	r3, [pc, #292]	; (8001d9c <HAL_SPI_MspInit+0x158>)
 8001c76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c7c:	613b      	str	r3, [r7, #16]
 8001c7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c80:	4b46      	ldr	r3, [pc, #280]	; (8001d9c <HAL_SPI_MspInit+0x158>)
 8001c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c84:	4a45      	ldr	r2, [pc, #276]	; (8001d9c <HAL_SPI_MspInit+0x158>)
 8001c86:	f043 0301 	orr.w	r3, r3, #1
 8001c8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c8c:	4b43      	ldr	r3, [pc, #268]	; (8001d9c <HAL_SPI_MspInit+0x158>)
 8001c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c98:	2320      	movs	r3, #32
 8001c9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ca8:	2305      	movs	r3, #5
 8001caa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cac:	f107 0314 	add.w	r3, r7, #20
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cb6:	f000 ff97 	bl	8002be8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cba:	23c0      	movs	r3, #192	; 0xc0
 8001cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cca:	2305      	movs	r3, #5
 8001ccc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cce:	f107 0314 	add.w	r3, r7, #20
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cd8:	f000 ff86 	bl	8002be8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8001cdc:	4b30      	ldr	r3, [pc, #192]	; (8001da0 <HAL_SPI_MspInit+0x15c>)
 8001cde:	4a31      	ldr	r2, [pc, #196]	; (8001da4 <HAL_SPI_MspInit+0x160>)
 8001ce0:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8001ce2:	4b2f      	ldr	r3, [pc, #188]	; (8001da0 <HAL_SPI_MspInit+0x15c>)
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ce8:	4b2d      	ldr	r3, [pc, #180]	; (8001da0 <HAL_SPI_MspInit+0x15c>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cee:	4b2c      	ldr	r3, [pc, #176]	; (8001da0 <HAL_SPI_MspInit+0x15c>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cf4:	4b2a      	ldr	r3, [pc, #168]	; (8001da0 <HAL_SPI_MspInit+0x15c>)
 8001cf6:	2280      	movs	r2, #128	; 0x80
 8001cf8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cfa:	4b29      	ldr	r3, [pc, #164]	; (8001da0 <HAL_SPI_MspInit+0x15c>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d00:	4b27      	ldr	r3, [pc, #156]	; (8001da0 <HAL_SPI_MspInit+0x15c>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001d06:	4b26      	ldr	r3, [pc, #152]	; (8001da0 <HAL_SPI_MspInit+0x15c>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d0c:	4b24      	ldr	r3, [pc, #144]	; (8001da0 <HAL_SPI_MspInit+0x15c>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001d12:	4823      	ldr	r0, [pc, #140]	; (8001da0 <HAL_SPI_MspInit+0x15c>)
 8001d14:	f000 fd22 	bl	800275c <HAL_DMA_Init>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <HAL_SPI_MspInit+0xde>
    {
      Error_Handler();
 8001d1e:	f7ff ff4e 	bl	8001bbe <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a1e      	ldr	r2, [pc, #120]	; (8001da0 <HAL_SPI_MspInit+0x15c>)
 8001d26:	659a      	str	r2, [r3, #88]	; 0x58
 8001d28:	4a1d      	ldr	r2, [pc, #116]	; (8001da0 <HAL_SPI_MspInit+0x15c>)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001d2e:	4b1e      	ldr	r3, [pc, #120]	; (8001da8 <HAL_SPI_MspInit+0x164>)
 8001d30:	4a1e      	ldr	r2, [pc, #120]	; (8001dac <HAL_SPI_MspInit+0x168>)
 8001d32:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8001d34:	4b1c      	ldr	r3, [pc, #112]	; (8001da8 <HAL_SPI_MspInit+0x164>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d3a:	4b1b      	ldr	r3, [pc, #108]	; (8001da8 <HAL_SPI_MspInit+0x164>)
 8001d3c:	2210      	movs	r2, #16
 8001d3e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d40:	4b19      	ldr	r3, [pc, #100]	; (8001da8 <HAL_SPI_MspInit+0x164>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d46:	4b18      	ldr	r3, [pc, #96]	; (8001da8 <HAL_SPI_MspInit+0x164>)
 8001d48:	2280      	movs	r2, #128	; 0x80
 8001d4a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d4c:	4b16      	ldr	r3, [pc, #88]	; (8001da8 <HAL_SPI_MspInit+0x164>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d52:	4b15      	ldr	r3, [pc, #84]	; (8001da8 <HAL_SPI_MspInit+0x164>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001d58:	4b13      	ldr	r3, [pc, #76]	; (8001da8 <HAL_SPI_MspInit+0x164>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d5e:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <HAL_SPI_MspInit+0x164>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001d64:	4810      	ldr	r0, [pc, #64]	; (8001da8 <HAL_SPI_MspInit+0x164>)
 8001d66:	f000 fcf9 	bl	800275c <HAL_DMA_Init>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <HAL_SPI_MspInit+0x130>
    {
      Error_Handler();
 8001d70:	f7ff ff25 	bl	8001bbe <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a0c      	ldr	r2, [pc, #48]	; (8001da8 <HAL_SPI_MspInit+0x164>)
 8001d78:	655a      	str	r2, [r3, #84]	; 0x54
 8001d7a:	4a0b      	ldr	r2, [pc, #44]	; (8001da8 <HAL_SPI_MspInit+0x164>)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8001d80:	2200      	movs	r2, #0
 8001d82:	2102      	movs	r1, #2
 8001d84:	2023      	movs	r0, #35	; 0x23
 8001d86:	f000 fcb2 	bl	80026ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001d8a:	2023      	movs	r0, #35	; 0x23
 8001d8c:	f000 fccb 	bl	8002726 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001d90:	bf00      	nop
 8001d92:	3728      	adds	r7, #40	; 0x28
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40013000 	.word	0x40013000
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	20000344 	.word	0x20000344
 8001da4:	4002001c 	.word	0x4002001c
 8001da8:	2000038c 	.word	0x2000038c
 8001dac:	40020030 	.word	0x40020030

08001db0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db6:	4b0f      	ldr	r3, [pc, #60]	; (8001df4 <HAL_MspInit+0x44>)
 8001db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dba:	4a0e      	ldr	r2, [pc, #56]	; (8001df4 <HAL_MspInit+0x44>)
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	6613      	str	r3, [r2, #96]	; 0x60
 8001dc2:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <HAL_MspInit+0x44>)
 8001dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	607b      	str	r3, [r7, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dce:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <HAL_MspInit+0x44>)
 8001dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd2:	4a08      	ldr	r2, [pc, #32]	; (8001df4 <HAL_MspInit+0x44>)
 8001dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd8:	6593      	str	r3, [r2, #88]	; 0x58
 8001dda:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <HAL_MspInit+0x44>)
 8001ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de2:	603b      	str	r3, [r7, #0]
 8001de4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	40021000 	.word	0x40021000

08001df8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dfc:	e7fe      	b.n	8001dfc <NMI_Handler+0x4>

08001dfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e02:	e7fe      	b.n	8001e02 <HardFault_Handler+0x4>

08001e04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e08:	e7fe      	b.n	8001e08 <MemManage_Handler+0x4>

08001e0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e0e:	e7fe      	b.n	8001e0e <BusFault_Handler+0x4>

08001e10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e14:	e7fe      	b.n	8001e14 <UsageFault_Handler+0x4>

08001e16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e16:	b480      	push	{r7}
 8001e18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e32:	b480      	push	{r7}
 8001e34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e44:	f000 fb58 	bl	80024f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e48:	bf00      	nop
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001e50:	4802      	ldr	r0, [pc, #8]	; (8001e5c <DMA1_Channel2_IRQHandler+0x10>)
 8001e52:	f000 fddc 	bl	8002a0e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	20000344 	.word	0x20000344

08001e60 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001e64:	4802      	ldr	r0, [pc, #8]	; (8001e70 <DMA1_Channel3_IRQHandler+0x10>)
 8001e66:	f000 fdd2 	bl	8002a0e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	2000038c 	.word	0x2000038c

08001e74 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001e78:	4802      	ldr	r0, [pc, #8]	; (8001e84 <DMA1_Channel7_IRQHandler+0x10>)
 8001e7a:	f000 fdc8 	bl	8002a0e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20000290 	.word	0x20000290

08001e88 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_EXTI5_HMC_Pin);
 8001e8c:	2020      	movs	r0, #32
 8001e8e:	f001 f86d 	bl	8002f6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
	...

08001e98 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001e9c:	4802      	ldr	r0, [pc, #8]	; (8001ea8 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001e9e:	f005 fa88 	bl	80073b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	200003d8 	.word	0x200003d8

08001eac <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001eb0:	4802      	ldr	r0, [pc, #8]	; (8001ebc <I2C1_EV_IRQHandler+0x10>)
 8001eb2:	f001 fe2a 	bl	8003b0a <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	2000023c 	.word	0x2000023c

08001ec0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001ec4:	4802      	ldr	r0, [pc, #8]	; (8001ed0 <SPI1_IRQHandler+0x10>)
 8001ec6:	f005 f85f 	bl	8006f88 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	200002e0 	.word	0x200002e0

08001ed4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
	return 1;
 8001ed8:	2301      	movs	r3, #1
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <_kill>:

int _kill(int pid, int sig)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001eee:	f006 f9a9 	bl	8008244 <__errno>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2216      	movs	r2, #22
 8001ef6:	601a      	str	r2, [r3, #0]
	return -1;
 8001ef8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <_exit>:

void _exit (int status)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f7ff ffe7 	bl	8001ee4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f16:	e7fe      	b.n	8001f16 <_exit+0x12>

08001f18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f24:	2300      	movs	r3, #0
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	e00a      	b.n	8001f40 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f2a:	f3af 8000 	nop.w
 8001f2e:	4601      	mov	r1, r0
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	1c5a      	adds	r2, r3, #1
 8001f34:	60ba      	str	r2, [r7, #8]
 8001f36:	b2ca      	uxtb	r2, r1
 8001f38:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	617b      	str	r3, [r7, #20]
 8001f40:	697a      	ldr	r2, [r7, #20]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	dbf0      	blt.n	8001f2a <_read+0x12>
	}

return len;
 8001f48:	687b      	ldr	r3, [r7, #4]
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3718      	adds	r7, #24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b086      	sub	sp, #24
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	60f8      	str	r0, [r7, #12]
 8001f5a:	60b9      	str	r1, [r7, #8]
 8001f5c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f5e:	2300      	movs	r3, #0
 8001f60:	617b      	str	r3, [r7, #20]
 8001f62:	e009      	b.n	8001f78 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	1c5a      	adds	r2, r3, #1
 8001f68:	60ba      	str	r2, [r7, #8]
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	3301      	adds	r3, #1
 8001f76:	617b      	str	r3, [r7, #20]
 8001f78:	697a      	ldr	r2, [r7, #20]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	dbf1      	blt.n	8001f64 <_write+0x12>
	}
	return len;
 8001f80:	687b      	ldr	r3, [r7, #4]
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3718      	adds	r7, #24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <_close>:

int _close(int file)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
	return -1;
 8001f92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
 8001faa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fb2:	605a      	str	r2, [r3, #4]
	return 0;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <_isatty>:

int _isatty(int file)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
	return 1;
 8001fca:	2301      	movs	r3, #1
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
	return 0;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3714      	adds	r7, #20
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
	...

08001ff4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ffc:	4a14      	ldr	r2, [pc, #80]	; (8002050 <_sbrk+0x5c>)
 8001ffe:	4b15      	ldr	r3, [pc, #84]	; (8002054 <_sbrk+0x60>)
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002008:	4b13      	ldr	r3, [pc, #76]	; (8002058 <_sbrk+0x64>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d102      	bne.n	8002016 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002010:	4b11      	ldr	r3, [pc, #68]	; (8002058 <_sbrk+0x64>)
 8002012:	4a12      	ldr	r2, [pc, #72]	; (800205c <_sbrk+0x68>)
 8002014:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002016:	4b10      	ldr	r3, [pc, #64]	; (8002058 <_sbrk+0x64>)
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4413      	add	r3, r2
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	429a      	cmp	r2, r3
 8002022:	d207      	bcs.n	8002034 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002024:	f006 f90e 	bl	8008244 <__errno>
 8002028:	4603      	mov	r3, r0
 800202a:	220c      	movs	r2, #12
 800202c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800202e:	f04f 33ff 	mov.w	r3, #4294967295
 8002032:	e009      	b.n	8002048 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002034:	4b08      	ldr	r3, [pc, #32]	; (8002058 <_sbrk+0x64>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800203a:	4b07      	ldr	r3, [pc, #28]	; (8002058 <_sbrk+0x64>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4413      	add	r3, r2
 8002042:	4a05      	ldr	r2, [pc, #20]	; (8002058 <_sbrk+0x64>)
 8002044:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002046:	68fb      	ldr	r3, [r7, #12]
}
 8002048:	4618      	mov	r0, r3
 800204a:	3718      	adds	r7, #24
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	20018000 	.word	0x20018000
 8002054:	00000400 	.word	0x00000400
 8002058:	200003d4 	.word	0x200003d4
 800205c:	200004c0 	.word	0x200004c0

08002060 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002064:	4b06      	ldr	r3, [pc, #24]	; (8002080 <SystemInit+0x20>)
 8002066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800206a:	4a05      	ldr	r2, [pc, #20]	; (8002080 <SystemInit+0x20>)
 800206c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002070:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <MX_TIM17_Init>:

TIM_HandleTypeDef htim17;

/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002088:	4b0f      	ldr	r3, [pc, #60]	; (80020c8 <MX_TIM17_Init+0x44>)
 800208a:	4a10      	ldr	r2, [pc, #64]	; (80020cc <MX_TIM17_Init+0x48>)
 800208c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 10;
 800208e:	4b0e      	ldr	r3, [pc, #56]	; (80020c8 <MX_TIM17_Init+0x44>)
 8002090:	220a      	movs	r2, #10
 8002092:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002094:	4b0c      	ldr	r3, [pc, #48]	; (80020c8 <MX_TIM17_Init+0x44>)
 8002096:	2200      	movs	r2, #0
 8002098:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 49999;
 800209a:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <MX_TIM17_Init+0x44>)
 800209c:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80020a0:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020a2:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <MX_TIM17_Init+0x44>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80020a8:	4b07      	ldr	r3, [pc, #28]	; (80020c8 <MX_TIM17_Init+0x44>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ae:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <MX_TIM17_Init+0x44>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80020b4:	4804      	ldr	r0, [pc, #16]	; (80020c8 <MX_TIM17_Init+0x44>)
 80020b6:	f005 f886 	bl	80071c6 <HAL_TIM_Base_Init>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80020c0:	f7ff fd7d 	bl	8001bbe <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80020c4:	bf00      	nop
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	200003d8 	.word	0x200003d8
 80020cc:	40014800 	.word	0x40014800

080020d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM17)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a0d      	ldr	r2, [pc, #52]	; (8002114 <HAL_TIM_Base_MspInit+0x44>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d113      	bne.n	800210a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 80020e2:	4b0d      	ldr	r3, [pc, #52]	; (8002118 <HAL_TIM_Base_MspInit+0x48>)
 80020e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020e6:	4a0c      	ldr	r2, [pc, #48]	; (8002118 <HAL_TIM_Base_MspInit+0x48>)
 80020e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020ec:	6613      	str	r3, [r2, #96]	; 0x60
 80020ee:	4b0a      	ldr	r3, [pc, #40]	; (8002118 <HAL_TIM_Base_MspInit+0x48>)
 80020f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]

    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 2, 0);
 80020fa:	2200      	movs	r2, #0
 80020fc:	2102      	movs	r1, #2
 80020fe:	201a      	movs	r0, #26
 8002100:	f000 faf5 	bl	80026ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002104:	201a      	movs	r0, #26
 8002106:	f000 fb0e 	bl	8002726 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800210a:	bf00      	nop
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40014800 	.word	0x40014800
 8002118:	40021000 	.word	0x40021000

0800211c <HAL_TIM_PeriodElapsedCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
	if (htim == &htim17)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a14      	ldr	r2, [pc, #80]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d120      	bne.n	800216e <HAL_TIM_PeriodElapsedCallback+0x52>
	{
	//	HAL_GPIO_WritePin(Timertest_GPIO_Port, Timertest_Pin, RESET);
		if (temp_wait == 1)
 800212c:	4b13      	ldr	r3, [pc, #76]	; (800217c <HAL_TIM_PeriodElapsedCallback+0x60>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d10c      	bne.n	800214e <HAL_TIM_PeriodElapsedCallback+0x32>
		{
		    temp_wait++;
 8002134:	4b11      	ldr	r3, [pc, #68]	; (800217c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	3301      	adds	r3, #1
 800213a:	b2da      	uxtb	r2, r3
 800213c:	4b0f      	ldr	r3, [pc, #60]	; (800217c <HAL_TIM_PeriodElapsedCallback+0x60>)
 800213e:	701a      	strb	r2, [r3, #0]
			BMP_State = BMP_State_Temp_ReadResult;
 8002140:	4b0f      	ldr	r3, [pc, #60]	; (8002180 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002142:	2202      	movs	r2, #2
 8002144:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim17);
 8002146:	480c      	ldr	r0, [pc, #48]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002148:	f005 f904 	bl	8007354 <HAL_TIM_Base_Stop_IT>
			pres_wait++;
			BMP_State = BMP_State_Pressure_ReadResult;
			HAL_TIM_Base_Stop_IT(&htim17);
		}
	}
}
 800214c:	e00f      	b.n	800216e <HAL_TIM_PeriodElapsedCallback+0x52>
		else if(pres_wait == 1)
 800214e:	4b0d      	ldr	r3, [pc, #52]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d10b      	bne.n	800216e <HAL_TIM_PeriodElapsedCallback+0x52>
			pres_wait++;
 8002156:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	3301      	adds	r3, #1
 800215c:	b2da      	uxtb	r2, r3
 800215e:	4b09      	ldr	r3, [pc, #36]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002160:	701a      	strb	r2, [r3, #0]
			BMP_State = BMP_State_Pressure_ReadResult;
 8002162:	4b07      	ldr	r3, [pc, #28]	; (8002180 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002164:	2206      	movs	r2, #6
 8002166:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim17);
 8002168:	4803      	ldr	r0, [pc, #12]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800216a:	f005 f8f3 	bl	8007354 <HAL_TIM_Base_Stop_IT>
}
 800216e:	bf00      	nop
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	200003d8 	.word	0x200003d8
 800217c:	2000022e 	.word	0x2000022e
 8002180:	20000230 	.word	0x20000230
 8002184:	2000022f 	.word	0x2000022f

08002188 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800218c:	4b14      	ldr	r3, [pc, #80]	; (80021e0 <MX_USART2_UART_Init+0x58>)
 800218e:	4a15      	ldr	r2, [pc, #84]	; (80021e4 <MX_USART2_UART_Init+0x5c>)
 8002190:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002192:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <MX_USART2_UART_Init+0x58>)
 8002194:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002198:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800219a:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <MX_USART2_UART_Init+0x58>)
 800219c:	2200      	movs	r2, #0
 800219e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021a0:	4b0f      	ldr	r3, [pc, #60]	; (80021e0 <MX_USART2_UART_Init+0x58>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021a6:	4b0e      	ldr	r3, [pc, #56]	; (80021e0 <MX_USART2_UART_Init+0x58>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021ac:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <MX_USART2_UART_Init+0x58>)
 80021ae:	220c      	movs	r2, #12
 80021b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021b2:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <MX_USART2_UART_Init+0x58>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021b8:	4b09      	ldr	r3, [pc, #36]	; (80021e0 <MX_USART2_UART_Init+0x58>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021be:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <MX_USART2_UART_Init+0x58>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021c4:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <MX_USART2_UART_Init+0x58>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021ca:	4805      	ldr	r0, [pc, #20]	; (80021e0 <MX_USART2_UART_Init+0x58>)
 80021cc:	f005 faf0 	bl	80077b0 <HAL_UART_Init>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80021d6:	f7ff fcf2 	bl	8001bbe <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	20000424 	.word	0x20000424
 80021e4:	40004400 	.word	0x40004400

080021e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b0ac      	sub	sp, #176	; 0xb0
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	60da      	str	r2, [r3, #12]
 80021fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002200:	f107 0314 	add.w	r3, r7, #20
 8002204:	2288      	movs	r2, #136	; 0x88
 8002206:	2100      	movs	r1, #0
 8002208:	4618      	mov	r0, r3
 800220a:	f006 f845 	bl	8008298 <memset>
  if(uartHandle->Instance==USART2)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a21      	ldr	r2, [pc, #132]	; (8002298 <HAL_UART_MspInit+0xb0>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d13b      	bne.n	8002290 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002218:	2302      	movs	r3, #2
 800221a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800221c:	2300      	movs	r3, #0
 800221e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002220:	f107 0314 	add.w	r3, r7, #20
 8002224:	4618      	mov	r0, r3
 8002226:	f004 f94f 	bl	80064c8 <HAL_RCCEx_PeriphCLKConfig>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002230:	f7ff fcc5 	bl	8001bbe <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002234:	4b19      	ldr	r3, [pc, #100]	; (800229c <HAL_UART_MspInit+0xb4>)
 8002236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002238:	4a18      	ldr	r2, [pc, #96]	; (800229c <HAL_UART_MspInit+0xb4>)
 800223a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800223e:	6593      	str	r3, [r2, #88]	; 0x58
 8002240:	4b16      	ldr	r3, [pc, #88]	; (800229c <HAL_UART_MspInit+0xb4>)
 8002242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002248:	613b      	str	r3, [r7, #16]
 800224a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800224c:	4b13      	ldr	r3, [pc, #76]	; (800229c <HAL_UART_MspInit+0xb4>)
 800224e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002250:	4a12      	ldr	r2, [pc, #72]	; (800229c <HAL_UART_MspInit+0xb4>)
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002258:	4b10      	ldr	r3, [pc, #64]	; (800229c <HAL_UART_MspInit+0xb4>)
 800225a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002264:	230c      	movs	r3, #12
 8002266:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226a:	2302      	movs	r3, #2
 800226c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002270:	2300      	movs	r3, #0
 8002272:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002276:	2303      	movs	r3, #3
 8002278:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800227c:	2307      	movs	r3, #7
 800227e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002282:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002286:	4619      	mov	r1, r3
 8002288:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800228c:	f000 fcac 	bl	8002be8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002290:	bf00      	nop
 8002292:	37b0      	adds	r7, #176	; 0xb0
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40004400 	.word	0x40004400
 800229c:	40021000 	.word	0x40021000

080022a0 <USART_TransmitHMCValues>:
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);

}

void USART_TransmitHMCValues(int16_t *x, int16_t *y, int16_t *z)
{
 80022a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022a2:	b0bb      	sub	sp, #236	; 0xec
 80022a4:	af04      	add	r7, sp, #16
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
    char buffer[200];
    sprintf(buffer, "Compass: x = %d,%02d   y = %d,%02d  z = %.d,%02d \r\n", (*x) / 100, abs((*x) % 100), (*y) / 1000, abs((*y) % 100) , (*z) / 100, abs((*z) % 100));
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022b2:	4a39      	ldr	r2, [pc, #228]	; (8002398 <USART_TransmitHMCValues+0xf8>)
 80022b4:	fb82 1203 	smull	r1, r2, r2, r3
 80022b8:	1152      	asrs	r2, r2, #5
 80022ba:	17db      	asrs	r3, r3, #31
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	b21b      	sxth	r3, r3
 80022c0:	469c      	mov	ip, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022c8:	4a33      	ldr	r2, [pc, #204]	; (8002398 <USART_TransmitHMCValues+0xf8>)
 80022ca:	fb82 1203 	smull	r1, r2, r2, r3
 80022ce:	1151      	asrs	r1, r2, #5
 80022d0:	17da      	asrs	r2, r3, #31
 80022d2:	1a8a      	subs	r2, r1, r2
 80022d4:	2164      	movs	r1, #100	; 0x64
 80022d6:	fb01 f202 	mul.w	r2, r1, r2
 80022da:	1a9b      	subs	r3, r3, r2
 80022dc:	b21b      	sxth	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	bfb8      	it	lt
 80022e2:	425b      	neglt	r3, r3
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	469e      	mov	lr, r3
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022ee:	4a2b      	ldr	r2, [pc, #172]	; (800239c <USART_TransmitHMCValues+0xfc>)
 80022f0:	fb82 1203 	smull	r1, r2, r2, r3
 80022f4:	1192      	asrs	r2, r2, #6
 80022f6:	17db      	asrs	r3, r3, #31
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	b21b      	sxth	r3, r3
 80022fc:	461c      	mov	r4, r3
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002304:	4a24      	ldr	r2, [pc, #144]	; (8002398 <USART_TransmitHMCValues+0xf8>)
 8002306:	fb82 1203 	smull	r1, r2, r2, r3
 800230a:	1151      	asrs	r1, r2, #5
 800230c:	17da      	asrs	r2, r3, #31
 800230e:	1a8a      	subs	r2, r1, r2
 8002310:	2164      	movs	r1, #100	; 0x64
 8002312:	fb01 f202 	mul.w	r2, r1, r2
 8002316:	1a9b      	subs	r3, r3, r2
 8002318:	b21b      	sxth	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	bfb8      	it	lt
 800231e:	425b      	neglt	r3, r3
 8002320:	b29b      	uxth	r3, r3
 8002322:	461d      	mov	r5, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f9b3 3000 	ldrsh.w	r3, [r3]
 800232a:	4a1b      	ldr	r2, [pc, #108]	; (8002398 <USART_TransmitHMCValues+0xf8>)
 800232c:	fb82 1203 	smull	r1, r2, r2, r3
 8002330:	1152      	asrs	r2, r2, #5
 8002332:	17db      	asrs	r3, r3, #31
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	b21b      	sxth	r3, r3
 8002338:	461e      	mov	r6, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002340:	4a15      	ldr	r2, [pc, #84]	; (8002398 <USART_TransmitHMCValues+0xf8>)
 8002342:	fb82 1203 	smull	r1, r2, r2, r3
 8002346:	1151      	asrs	r1, r2, #5
 8002348:	17da      	asrs	r2, r3, #31
 800234a:	1a8a      	subs	r2, r1, r2
 800234c:	2164      	movs	r1, #100	; 0x64
 800234e:	fb01 f202 	mul.w	r2, r1, r2
 8002352:	1a9b      	subs	r3, r3, r2
 8002354:	b21b      	sxth	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	bfb8      	it	lt
 800235a:	425b      	neglt	r3, r3
 800235c:	b29b      	uxth	r3, r3
 800235e:	f107 0010 	add.w	r0, r7, #16
 8002362:	9303      	str	r3, [sp, #12]
 8002364:	9602      	str	r6, [sp, #8]
 8002366:	9501      	str	r5, [sp, #4]
 8002368:	9400      	str	r4, [sp, #0]
 800236a:	4673      	mov	r3, lr
 800236c:	4662      	mov	r2, ip
 800236e:	490c      	ldr	r1, [pc, #48]	; (80023a0 <USART_TransmitHMCValues+0x100>)
 8002370:	f006 fc04 	bl	8008b7c <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8002374:	f107 0310 	add.w	r3, r7, #16
 8002378:	4618      	mov	r0, r3
 800237a:	f7fd ff29 	bl	80001d0 <strlen>
 800237e:	4603      	mov	r3, r0
 8002380:	b29a      	uxth	r2, r3
 8002382:	f107 0110 	add.w	r1, r7, #16
 8002386:	f04f 33ff 	mov.w	r3, #4294967295
 800238a:	4806      	ldr	r0, [pc, #24]	; (80023a4 <USART_TransmitHMCValues+0x104>)
 800238c:	f005 fa5e 	bl	800784c <HAL_UART_Transmit>
}
 8002390:	bf00      	nop
 8002392:	37dc      	adds	r7, #220	; 0xdc
 8002394:	46bd      	mov	sp, r7
 8002396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002398:	51eb851f 	.word	0x51eb851f
 800239c:	10624dd3 	.word	0x10624dd3
 80023a0:	0800b0f0 	.word	0x0800b0f0
 80023a4:	20000424 	.word	0x20000424

080023a8 <USART_TransmitBMPValue>:

void USART_TransmitBMPValue(int32_t* pres)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b0b4      	sub	sp, #208	; 0xd0
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
    char buffer[200];
    sprintf(buffer, "Pres:%ld \r\n", *pres);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	f107 0308 	add.w	r3, r7, #8
 80023b8:	490a      	ldr	r1, [pc, #40]	; (80023e4 <USART_TransmitBMPValue+0x3c>)
 80023ba:	4618      	mov	r0, r3
 80023bc:	f006 fbde 	bl	8008b7c <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80023c0:	f107 0308 	add.w	r3, r7, #8
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fd ff03 	bl	80001d0 <strlen>
 80023ca:	4603      	mov	r3, r0
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	f107 0108 	add.w	r1, r7, #8
 80023d2:	f04f 33ff 	mov.w	r3, #4294967295
 80023d6:	4804      	ldr	r0, [pc, #16]	; (80023e8 <USART_TransmitBMPValue+0x40>)
 80023d8:	f005 fa38 	bl	800784c <HAL_UART_Transmit>
}
 80023dc:	bf00      	nop
 80023de:	37d0      	adds	r7, #208	; 0xd0
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	0800b124 	.word	0x0800b124
 80023e8:	20000424 	.word	0x20000424

080023ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80023ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002424 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023f0:	f7ff fe36 	bl	8002060 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023f4:	480c      	ldr	r0, [pc, #48]	; (8002428 <LoopForever+0x6>)
  ldr r1, =_edata
 80023f6:	490d      	ldr	r1, [pc, #52]	; (800242c <LoopForever+0xa>)
  ldr r2, =_sidata
 80023f8:	4a0d      	ldr	r2, [pc, #52]	; (8002430 <LoopForever+0xe>)
  movs r3, #0
 80023fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023fc:	e002      	b.n	8002404 <LoopCopyDataInit>

080023fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002400:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002402:	3304      	adds	r3, #4

08002404 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002404:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002406:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002408:	d3f9      	bcc.n	80023fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800240a:	4a0a      	ldr	r2, [pc, #40]	; (8002434 <LoopForever+0x12>)
  ldr r4, =_ebss
 800240c:	4c0a      	ldr	r4, [pc, #40]	; (8002438 <LoopForever+0x16>)
  movs r3, #0
 800240e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002410:	e001      	b.n	8002416 <LoopFillZerobss>

08002412 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002412:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002414:	3204      	adds	r2, #4

08002416 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002416:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002418:	d3fb      	bcc.n	8002412 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800241a:	f005 ff19 	bl	8008250 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800241e:	f7ff fb31 	bl	8001a84 <main>

08002422 <LoopForever>:

LoopForever:
    b LoopForever
 8002422:	e7fe      	b.n	8002422 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002424:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002428:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800242c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002430:	0800b564 	.word	0x0800b564
  ldr r2, =_sbss
 8002434:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002438:	200004bc 	.word	0x200004bc

0800243c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800243c:	e7fe      	b.n	800243c <ADC1_2_IRQHandler>
	...

08002440 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002446:	2300      	movs	r3, #0
 8002448:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800244a:	4b0c      	ldr	r3, [pc, #48]	; (800247c <HAL_Init+0x3c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a0b      	ldr	r2, [pc, #44]	; (800247c <HAL_Init+0x3c>)
 8002450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002454:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002456:	2003      	movs	r0, #3
 8002458:	f000 f93e 	bl	80026d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800245c:	2000      	movs	r0, #0
 800245e:	f000 f80f 	bl	8002480 <HAL_InitTick>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d002      	beq.n	800246e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	71fb      	strb	r3, [r7, #7]
 800246c:	e001      	b.n	8002472 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800246e:	f7ff fc9f 	bl	8001db0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002472:	79fb      	ldrb	r3, [r7, #7]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40022000 	.word	0x40022000

08002480 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002488:	2300      	movs	r3, #0
 800248a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800248c:	4b17      	ldr	r3, [pc, #92]	; (80024ec <HAL_InitTick+0x6c>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d023      	beq.n	80024dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002494:	4b16      	ldr	r3, [pc, #88]	; (80024f0 <HAL_InitTick+0x70>)
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	4b14      	ldr	r3, [pc, #80]	; (80024ec <HAL_InitTick+0x6c>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	4619      	mov	r1, r3
 800249e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 f949 	bl	8002742 <HAL_SYSTICK_Config>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10f      	bne.n	80024d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b0f      	cmp	r3, #15
 80024ba:	d809      	bhi.n	80024d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024bc:	2200      	movs	r2, #0
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	f04f 30ff 	mov.w	r0, #4294967295
 80024c4:	f000 f913 	bl	80026ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024c8:	4a0a      	ldr	r2, [pc, #40]	; (80024f4 <HAL_InitTick+0x74>)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6013      	str	r3, [r2, #0]
 80024ce:	e007      	b.n	80024e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	73fb      	strb	r3, [r7, #15]
 80024d4:	e004      	b.n	80024e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	73fb      	strb	r3, [r7, #15]
 80024da:	e001      	b.n	80024e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	20000008 	.word	0x20000008
 80024f0:	20000000 	.word	0x20000000
 80024f4:	20000004 	.word	0x20000004

080024f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024fc:	4b06      	ldr	r3, [pc, #24]	; (8002518 <HAL_IncTick+0x20>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	461a      	mov	r2, r3
 8002502:	4b06      	ldr	r3, [pc, #24]	; (800251c <HAL_IncTick+0x24>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4413      	add	r3, r2
 8002508:	4a04      	ldr	r2, [pc, #16]	; (800251c <HAL_IncTick+0x24>)
 800250a:	6013      	str	r3, [r2, #0]
}
 800250c:	bf00      	nop
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	20000008 	.word	0x20000008
 800251c:	200004a8 	.word	0x200004a8

08002520 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  return uwTick;
 8002524:	4b03      	ldr	r3, [pc, #12]	; (8002534 <HAL_GetTick+0x14>)
 8002526:	681b      	ldr	r3, [r3, #0]
}
 8002528:	4618      	mov	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	200004a8 	.word	0x200004a8

08002538 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002548:	4b0c      	ldr	r3, [pc, #48]	; (800257c <__NVIC_SetPriorityGrouping+0x44>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002554:	4013      	ands	r3, r2
 8002556:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002560:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002568:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800256a:	4a04      	ldr	r2, [pc, #16]	; (800257c <__NVIC_SetPriorityGrouping+0x44>)
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	60d3      	str	r3, [r2, #12]
}
 8002570:	bf00      	nop
 8002572:	3714      	adds	r7, #20
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	e000ed00 	.word	0xe000ed00

08002580 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002584:	4b04      	ldr	r3, [pc, #16]	; (8002598 <__NVIC_GetPriorityGrouping+0x18>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	0a1b      	lsrs	r3, r3, #8
 800258a:	f003 0307 	and.w	r3, r3, #7
}
 800258e:	4618      	mov	r0, r3
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	e000ed00 	.word	0xe000ed00

0800259c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4603      	mov	r3, r0
 80025a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	db0b      	blt.n	80025c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ae:	79fb      	ldrb	r3, [r7, #7]
 80025b0:	f003 021f 	and.w	r2, r3, #31
 80025b4:	4907      	ldr	r1, [pc, #28]	; (80025d4 <__NVIC_EnableIRQ+0x38>)
 80025b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ba:	095b      	lsrs	r3, r3, #5
 80025bc:	2001      	movs	r0, #1
 80025be:	fa00 f202 	lsl.w	r2, r0, r2
 80025c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	e000e100 	.word	0xe000e100

080025d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	6039      	str	r1, [r7, #0]
 80025e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	db0a      	blt.n	8002602 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	490c      	ldr	r1, [pc, #48]	; (8002624 <__NVIC_SetPriority+0x4c>)
 80025f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f6:	0112      	lsls	r2, r2, #4
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	440b      	add	r3, r1
 80025fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002600:	e00a      	b.n	8002618 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	b2da      	uxtb	r2, r3
 8002606:	4908      	ldr	r1, [pc, #32]	; (8002628 <__NVIC_SetPriority+0x50>)
 8002608:	79fb      	ldrb	r3, [r7, #7]
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	3b04      	subs	r3, #4
 8002610:	0112      	lsls	r2, r2, #4
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	440b      	add	r3, r1
 8002616:	761a      	strb	r2, [r3, #24]
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	e000e100 	.word	0xe000e100
 8002628:	e000ed00 	.word	0xe000ed00

0800262c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800262c:	b480      	push	{r7}
 800262e:	b089      	sub	sp, #36	; 0x24
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	f1c3 0307 	rsb	r3, r3, #7
 8002646:	2b04      	cmp	r3, #4
 8002648:	bf28      	it	cs
 800264a:	2304      	movcs	r3, #4
 800264c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	3304      	adds	r3, #4
 8002652:	2b06      	cmp	r3, #6
 8002654:	d902      	bls.n	800265c <NVIC_EncodePriority+0x30>
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	3b03      	subs	r3, #3
 800265a:	e000      	b.n	800265e <NVIC_EncodePriority+0x32>
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002660:	f04f 32ff 	mov.w	r2, #4294967295
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	43da      	mvns	r2, r3
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	401a      	ands	r2, r3
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002674:	f04f 31ff 	mov.w	r1, #4294967295
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	fa01 f303 	lsl.w	r3, r1, r3
 800267e:	43d9      	mvns	r1, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002684:	4313      	orrs	r3, r2
         );
}
 8002686:	4618      	mov	r0, r3
 8002688:	3724      	adds	r7, #36	; 0x24
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
	...

08002694 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3b01      	subs	r3, #1
 80026a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026a4:	d301      	bcc.n	80026aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026a6:	2301      	movs	r3, #1
 80026a8:	e00f      	b.n	80026ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026aa:	4a0a      	ldr	r2, [pc, #40]	; (80026d4 <SysTick_Config+0x40>)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026b2:	210f      	movs	r1, #15
 80026b4:	f04f 30ff 	mov.w	r0, #4294967295
 80026b8:	f7ff ff8e 	bl	80025d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026bc:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <SysTick_Config+0x40>)
 80026be:	2200      	movs	r2, #0
 80026c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026c2:	4b04      	ldr	r3, [pc, #16]	; (80026d4 <SysTick_Config+0x40>)
 80026c4:	2207      	movs	r2, #7
 80026c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	e000e010 	.word	0xe000e010

080026d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f7ff ff29 	bl	8002538 <__NVIC_SetPriorityGrouping>
}
 80026e6:	bf00      	nop
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b086      	sub	sp, #24
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	4603      	mov	r3, r0
 80026f6:	60b9      	str	r1, [r7, #8]
 80026f8:	607a      	str	r2, [r7, #4]
 80026fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002700:	f7ff ff3e 	bl	8002580 <__NVIC_GetPriorityGrouping>
 8002704:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	68b9      	ldr	r1, [r7, #8]
 800270a:	6978      	ldr	r0, [r7, #20]
 800270c:	f7ff ff8e 	bl	800262c <NVIC_EncodePriority>
 8002710:	4602      	mov	r2, r0
 8002712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002716:	4611      	mov	r1, r2
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff ff5d 	bl	80025d8 <__NVIC_SetPriority>
}
 800271e:	bf00      	nop
 8002720:	3718      	adds	r7, #24
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b082      	sub	sp, #8
 800272a:	af00      	add	r7, sp, #0
 800272c:	4603      	mov	r3, r0
 800272e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff ff31 	bl	800259c <__NVIC_EnableIRQ>
}
 800273a:	bf00      	nop
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b082      	sub	sp, #8
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7ff ffa2 	bl	8002694 <SysTick_Config>
 8002750:	4603      	mov	r3, r0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
	...

0800275c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e098      	b.n	80028a0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	461a      	mov	r2, r3
 8002774:	4b4d      	ldr	r3, [pc, #308]	; (80028ac <HAL_DMA_Init+0x150>)
 8002776:	429a      	cmp	r2, r3
 8002778:	d80f      	bhi.n	800279a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	461a      	mov	r2, r3
 8002780:	4b4b      	ldr	r3, [pc, #300]	; (80028b0 <HAL_DMA_Init+0x154>)
 8002782:	4413      	add	r3, r2
 8002784:	4a4b      	ldr	r2, [pc, #300]	; (80028b4 <HAL_DMA_Init+0x158>)
 8002786:	fba2 2303 	umull	r2, r3, r2, r3
 800278a:	091b      	lsrs	r3, r3, #4
 800278c:	009a      	lsls	r2, r3, #2
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a48      	ldr	r2, [pc, #288]	; (80028b8 <HAL_DMA_Init+0x15c>)
 8002796:	641a      	str	r2, [r3, #64]	; 0x40
 8002798:	e00e      	b.n	80027b8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	4b46      	ldr	r3, [pc, #280]	; (80028bc <HAL_DMA_Init+0x160>)
 80027a2:	4413      	add	r3, r2
 80027a4:	4a43      	ldr	r2, [pc, #268]	; (80028b4 <HAL_DMA_Init+0x158>)
 80027a6:	fba2 2303 	umull	r2, r3, r2, r3
 80027aa:	091b      	lsrs	r3, r3, #4
 80027ac:	009a      	lsls	r2, r3, #2
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a42      	ldr	r2, [pc, #264]	; (80028c0 <HAL_DMA_Init+0x164>)
 80027b6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2202      	movs	r2, #2
 80027bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80027ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80027dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	4313      	orrs	r3, r2
 8002800:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002812:	d039      	beq.n	8002888 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002818:	4a27      	ldr	r2, [pc, #156]	; (80028b8 <HAL_DMA_Init+0x15c>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d11a      	bne.n	8002854 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800281e:	4b29      	ldr	r3, [pc, #164]	; (80028c4 <HAL_DMA_Init+0x168>)
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002826:	f003 031c 	and.w	r3, r3, #28
 800282a:	210f      	movs	r1, #15
 800282c:	fa01 f303 	lsl.w	r3, r1, r3
 8002830:	43db      	mvns	r3, r3
 8002832:	4924      	ldr	r1, [pc, #144]	; (80028c4 <HAL_DMA_Init+0x168>)
 8002834:	4013      	ands	r3, r2
 8002836:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002838:	4b22      	ldr	r3, [pc, #136]	; (80028c4 <HAL_DMA_Init+0x168>)
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6859      	ldr	r1, [r3, #4]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002844:	f003 031c 	and.w	r3, r3, #28
 8002848:	fa01 f303 	lsl.w	r3, r1, r3
 800284c:	491d      	ldr	r1, [pc, #116]	; (80028c4 <HAL_DMA_Init+0x168>)
 800284e:	4313      	orrs	r3, r2
 8002850:	600b      	str	r3, [r1, #0]
 8002852:	e019      	b.n	8002888 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002854:	4b1c      	ldr	r3, [pc, #112]	; (80028c8 <HAL_DMA_Init+0x16c>)
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285c:	f003 031c 	and.w	r3, r3, #28
 8002860:	210f      	movs	r1, #15
 8002862:	fa01 f303 	lsl.w	r3, r1, r3
 8002866:	43db      	mvns	r3, r3
 8002868:	4917      	ldr	r1, [pc, #92]	; (80028c8 <HAL_DMA_Init+0x16c>)
 800286a:	4013      	ands	r3, r2
 800286c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800286e:	4b16      	ldr	r3, [pc, #88]	; (80028c8 <HAL_DMA_Init+0x16c>)
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6859      	ldr	r1, [r3, #4]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287a:	f003 031c 	and.w	r3, r3, #28
 800287e:	fa01 f303 	lsl.w	r3, r1, r3
 8002882:	4911      	ldr	r1, [pc, #68]	; (80028c8 <HAL_DMA_Init+0x16c>)
 8002884:	4313      	orrs	r3, r2
 8002886:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3714      	adds	r7, #20
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	40020407 	.word	0x40020407
 80028b0:	bffdfff8 	.word	0xbffdfff8
 80028b4:	cccccccd 	.word	0xcccccccd
 80028b8:	40020000 	.word	0x40020000
 80028bc:	bffdfbf8 	.word	0xbffdfbf8
 80028c0:	40020400 	.word	0x40020400
 80028c4:	400200a8 	.word	0x400200a8
 80028c8:	400204a8 	.word	0x400204a8

080028cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
 80028d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028da:	2300      	movs	r3, #0
 80028dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d101      	bne.n	80028ec <HAL_DMA_Start_IT+0x20>
 80028e8:	2302      	movs	r3, #2
 80028ea:	e04b      	b.n	8002984 <HAL_DMA_Start_IT+0xb8>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d13a      	bne.n	8002976 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2202      	movs	r2, #2
 8002904:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f022 0201 	bic.w	r2, r2, #1
 800291c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	68b9      	ldr	r1, [r7, #8]
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f000 f92f 	bl	8002b88 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	2b00      	cmp	r3, #0
 8002930:	d008      	beq.n	8002944 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f042 020e 	orr.w	r2, r2, #14
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	e00f      	b.n	8002964 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0204 	bic.w	r2, r2, #4
 8002952:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f042 020a 	orr.w	r2, r2, #10
 8002962:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f042 0201 	orr.w	r2, r2, #1
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	e005      	b.n	8002982 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800297e:	2302      	movs	r3, #2
 8002980:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002982:	7dfb      	ldrb	r3, [r7, #23]
}
 8002984:	4618      	mov	r0, r3
 8002986:	3718      	adds	r7, #24
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002994:	2300      	movs	r3, #0
 8002996:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d005      	beq.n	80029b0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2204      	movs	r2, #4
 80029a8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	73fb      	strb	r3, [r7, #15]
 80029ae:	e029      	b.n	8002a04 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 020e 	bic.w	r2, r2, #14
 80029be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 0201 	bic.w	r2, r2, #1
 80029ce:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d4:	f003 021c 	and.w	r2, r3, #28
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	2101      	movs	r1, #1
 80029de:	fa01 f202 	lsl.w	r2, r1, r2
 80029e2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d003      	beq.n	8002a04 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	4798      	blx	r3
    }
  }
  return status;
 8002a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b084      	sub	sp, #16
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2a:	f003 031c 	and.w	r3, r3, #28
 8002a2e:	2204      	movs	r2, #4
 8002a30:	409a      	lsls	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	4013      	ands	r3, r2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d026      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x7a>
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d021      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0320 	and.w	r3, r3, #32
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d107      	bne.n	8002a62 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 0204 	bic.w	r2, r2, #4
 8002a60:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a66:	f003 021c 	and.w	r2, r3, #28
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	2104      	movs	r1, #4
 8002a70:	fa01 f202 	lsl.w	r2, r1, r2
 8002a74:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d071      	beq.n	8002b62 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002a86:	e06c      	b.n	8002b62 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8c:	f003 031c 	and.w	r3, r3, #28
 8002a90:	2202      	movs	r2, #2
 8002a92:	409a      	lsls	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4013      	ands	r3, r2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d02e      	beq.n	8002afa <HAL_DMA_IRQHandler+0xec>
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d029      	beq.n	8002afa <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0320 	and.w	r3, r3, #32
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10b      	bne.n	8002acc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 020a 	bic.w	r2, r2, #10
 8002ac2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad0:	f003 021c 	and.w	r2, r3, #28
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad8:	2102      	movs	r1, #2
 8002ada:	fa01 f202 	lsl.w	r2, r1, r2
 8002ade:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d038      	beq.n	8002b62 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002af8:	e033      	b.n	8002b62 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afe:	f003 031c 	and.w	r3, r3, #28
 8002b02:	2208      	movs	r2, #8
 8002b04:	409a      	lsls	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d02a      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x156>
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	f003 0308 	and.w	r3, r3, #8
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d025      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 020e 	bic.w	r2, r2, #14
 8002b26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2c:	f003 021c 	and.w	r2, r3, #28
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b34:	2101      	movs	r1, #1
 8002b36:	fa01 f202 	lsl.w	r2, r1, r2
 8002b3a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d004      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002b62:	bf00      	nop
 8002b64:	bf00      	nop
}
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b7a:	b2db      	uxtb	r3, r3
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
 8002b94:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9a:	f003 021c 	and.w	r2, r3, #28
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ba8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	2b10      	cmp	r3, #16
 8002bb8:	d108      	bne.n	8002bcc <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002bca:	e007      	b.n	8002bdc <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68ba      	ldr	r2, [r7, #8]
 8002bd2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	60da      	str	r2, [r3, #12]
}
 8002bdc:	bf00      	nop
 8002bde:	3714      	adds	r7, #20
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b087      	sub	sp, #28
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bf6:	e17f      	b.n	8002ef8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	2101      	movs	r1, #1
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	fa01 f303 	lsl.w	r3, r1, r3
 8002c04:	4013      	ands	r3, r2
 8002c06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 8171 	beq.w	8002ef2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f003 0303 	and.w	r3, r3, #3
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d005      	beq.n	8002c28 <HAL_GPIO_Init+0x40>
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 0303 	and.w	r3, r3, #3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d130      	bne.n	8002c8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	2203      	movs	r2, #3
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	68da      	ldr	r2, [r3, #12]
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c5e:	2201      	movs	r2, #1
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	43db      	mvns	r3, r3
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	091b      	lsrs	r3, r3, #4
 8002c74:	f003 0201 	and.w	r2, r3, #1
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	2b03      	cmp	r3, #3
 8002c94:	d118      	bne.n	8002cc8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	08db      	lsrs	r3, r3, #3
 8002cb2:	f003 0201 	and.w	r2, r3, #1
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f003 0303 	and.w	r3, r3, #3
 8002cd0:	2b03      	cmp	r3, #3
 8002cd2:	d017      	beq.n	8002d04 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	2203      	movs	r2, #3
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f003 0303 	and.w	r3, r3, #3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d123      	bne.n	8002d58 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	08da      	lsrs	r2, r3, #3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3208      	adds	r2, #8
 8002d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	f003 0307 	and.w	r3, r3, #7
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	220f      	movs	r2, #15
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	4013      	ands	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	691a      	ldr	r2, [r3, #16]
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	08da      	lsrs	r2, r3, #3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	3208      	adds	r2, #8
 8002d52:	6939      	ldr	r1, [r7, #16]
 8002d54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	2203      	movs	r2, #3
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f003 0203 	and.w	r2, r3, #3
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 80ac 	beq.w	8002ef2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d9a:	4b5f      	ldr	r3, [pc, #380]	; (8002f18 <HAL_GPIO_Init+0x330>)
 8002d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d9e:	4a5e      	ldr	r2, [pc, #376]	; (8002f18 <HAL_GPIO_Init+0x330>)
 8002da0:	f043 0301 	orr.w	r3, r3, #1
 8002da4:	6613      	str	r3, [r2, #96]	; 0x60
 8002da6:	4b5c      	ldr	r3, [pc, #368]	; (8002f18 <HAL_GPIO_Init+0x330>)
 8002da8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	60bb      	str	r3, [r7, #8]
 8002db0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002db2:	4a5a      	ldr	r2, [pc, #360]	; (8002f1c <HAL_GPIO_Init+0x334>)
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	089b      	lsrs	r3, r3, #2
 8002db8:	3302      	adds	r3, #2
 8002dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	220f      	movs	r2, #15
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ddc:	d025      	beq.n	8002e2a <HAL_GPIO_Init+0x242>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a4f      	ldr	r2, [pc, #316]	; (8002f20 <HAL_GPIO_Init+0x338>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d01f      	beq.n	8002e26 <HAL_GPIO_Init+0x23e>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a4e      	ldr	r2, [pc, #312]	; (8002f24 <HAL_GPIO_Init+0x33c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d019      	beq.n	8002e22 <HAL_GPIO_Init+0x23a>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a4d      	ldr	r2, [pc, #308]	; (8002f28 <HAL_GPIO_Init+0x340>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d013      	beq.n	8002e1e <HAL_GPIO_Init+0x236>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a4c      	ldr	r2, [pc, #304]	; (8002f2c <HAL_GPIO_Init+0x344>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d00d      	beq.n	8002e1a <HAL_GPIO_Init+0x232>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a4b      	ldr	r2, [pc, #300]	; (8002f30 <HAL_GPIO_Init+0x348>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d007      	beq.n	8002e16 <HAL_GPIO_Init+0x22e>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a4a      	ldr	r2, [pc, #296]	; (8002f34 <HAL_GPIO_Init+0x34c>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d101      	bne.n	8002e12 <HAL_GPIO_Init+0x22a>
 8002e0e:	2306      	movs	r3, #6
 8002e10:	e00c      	b.n	8002e2c <HAL_GPIO_Init+0x244>
 8002e12:	2307      	movs	r3, #7
 8002e14:	e00a      	b.n	8002e2c <HAL_GPIO_Init+0x244>
 8002e16:	2305      	movs	r3, #5
 8002e18:	e008      	b.n	8002e2c <HAL_GPIO_Init+0x244>
 8002e1a:	2304      	movs	r3, #4
 8002e1c:	e006      	b.n	8002e2c <HAL_GPIO_Init+0x244>
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e004      	b.n	8002e2c <HAL_GPIO_Init+0x244>
 8002e22:	2302      	movs	r3, #2
 8002e24:	e002      	b.n	8002e2c <HAL_GPIO_Init+0x244>
 8002e26:	2301      	movs	r3, #1
 8002e28:	e000      	b.n	8002e2c <HAL_GPIO_Init+0x244>
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	697a      	ldr	r2, [r7, #20]
 8002e2e:	f002 0203 	and.w	r2, r2, #3
 8002e32:	0092      	lsls	r2, r2, #2
 8002e34:	4093      	lsls	r3, r2
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e3c:	4937      	ldr	r1, [pc, #220]	; (8002f1c <HAL_GPIO_Init+0x334>)
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	089b      	lsrs	r3, r3, #2
 8002e42:	3302      	adds	r3, #2
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e4a:	4b3b      	ldr	r3, [pc, #236]	; (8002f38 <HAL_GPIO_Init+0x350>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	43db      	mvns	r3, r3
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	4013      	ands	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e6e:	4a32      	ldr	r2, [pc, #200]	; (8002f38 <HAL_GPIO_Init+0x350>)
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e74:	4b30      	ldr	r3, [pc, #192]	; (8002f38 <HAL_GPIO_Init+0x350>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	4013      	ands	r3, r2
 8002e82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d003      	beq.n	8002e98 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e98:	4a27      	ldr	r2, [pc, #156]	; (8002f38 <HAL_GPIO_Init+0x350>)
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002e9e:	4b26      	ldr	r3, [pc, #152]	; (8002f38 <HAL_GPIO_Init+0x350>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ec2:	4a1d      	ldr	r2, [pc, #116]	; (8002f38 <HAL_GPIO_Init+0x350>)
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002ec8:	4b1b      	ldr	r3, [pc, #108]	; (8002f38 <HAL_GPIO_Init+0x350>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d003      	beq.n	8002eec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002eec:	4a12      	ldr	r2, [pc, #72]	; (8002f38 <HAL_GPIO_Init+0x350>)
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	fa22 f303 	lsr.w	r3, r2, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f47f ae78 	bne.w	8002bf8 <HAL_GPIO_Init+0x10>
  }
}
 8002f08:	bf00      	nop
 8002f0a:	bf00      	nop
 8002f0c:	371c      	adds	r7, #28
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	40010000 	.word	0x40010000
 8002f20:	48000400 	.word	0x48000400
 8002f24:	48000800 	.word	0x48000800
 8002f28:	48000c00 	.word	0x48000c00
 8002f2c:	48001000 	.word	0x48001000
 8002f30:	48001400 	.word	0x48001400
 8002f34:	48001800 	.word	0x48001800
 8002f38:	40010400 	.word	0x40010400

08002f3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	460b      	mov	r3, r1
 8002f46:	807b      	strh	r3, [r7, #2]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f4c:	787b      	ldrb	r3, [r7, #1]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f52:	887a      	ldrh	r2, [r7, #2]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f58:	e002      	b.n	8002f60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f5a:	887a      	ldrh	r2, [r7, #2]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	4603      	mov	r3, r0
 8002f74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f76:	4b08      	ldr	r3, [pc, #32]	; (8002f98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f78:	695a      	ldr	r2, [r3, #20]
 8002f7a:	88fb      	ldrh	r3, [r7, #6]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d006      	beq.n	8002f90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f82:	4a05      	ldr	r2, [pc, #20]	; (8002f98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f84:	88fb      	ldrh	r3, [r7, #6]
 8002f86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f88:	88fb      	ldrh	r3, [r7, #6]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fe fc24 	bl	80017d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f90:	bf00      	nop
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	40010400 	.word	0x40010400

08002f9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e081      	b.n	80030b2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d106      	bne.n	8002fc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7fe fc5c 	bl	8001880 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2224      	movs	r2, #36	; 0x24
 8002fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 0201 	bic.w	r2, r2, #1
 8002fde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ffc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d107      	bne.n	8003016 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689a      	ldr	r2, [r3, #8]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003012:	609a      	str	r2, [r3, #8]
 8003014:	e006      	b.n	8003024 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689a      	ldr	r2, [r3, #8]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003022:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	2b02      	cmp	r3, #2
 800302a:	d104      	bne.n	8003036 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003034:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	6812      	ldr	r2, [r2, #0]
 8003040:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003044:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003048:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68da      	ldr	r2, [r3, #12]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003058:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	691a      	ldr	r2, [r3, #16]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	430a      	orrs	r2, r1
 8003072:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	69d9      	ldr	r1, [r3, #28]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a1a      	ldr	r2, [r3, #32]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	430a      	orrs	r2, r1
 8003082:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f042 0201 	orr.w	r2, r2, #1
 8003092:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2220      	movs	r2, #32
 800309e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
	...

080030bc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b088      	sub	sp, #32
 80030c0:	af02      	add	r7, sp, #8
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	4608      	mov	r0, r1
 80030c6:	4611      	mov	r1, r2
 80030c8:	461a      	mov	r2, r3
 80030ca:	4603      	mov	r3, r0
 80030cc:	817b      	strh	r3, [r7, #10]
 80030ce:	460b      	mov	r3, r1
 80030d0:	813b      	strh	r3, [r7, #8]
 80030d2:	4613      	mov	r3, r2
 80030d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b20      	cmp	r3, #32
 80030e0:	f040 80f9 	bne.w	80032d6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80030e4:	6a3b      	ldr	r3, [r7, #32]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d002      	beq.n	80030f0 <HAL_I2C_Mem_Write+0x34>
 80030ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d105      	bne.n	80030fc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030f6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e0ed      	b.n	80032d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003102:	2b01      	cmp	r3, #1
 8003104:	d101      	bne.n	800310a <HAL_I2C_Mem_Write+0x4e>
 8003106:	2302      	movs	r3, #2
 8003108:	e0e6      	b.n	80032d8 <HAL_I2C_Mem_Write+0x21c>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003112:	f7ff fa05 	bl	8002520 <HAL_GetTick>
 8003116:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	9300      	str	r3, [sp, #0]
 800311c:	2319      	movs	r3, #25
 800311e:	2201      	movs	r2, #1
 8003120:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f002 f810 	bl	800514a <I2C_WaitOnFlagUntilTimeout>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e0d1      	b.n	80032d8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2221      	movs	r2, #33	; 0x21
 8003138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2240      	movs	r2, #64	; 0x40
 8003140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6a3a      	ldr	r2, [r7, #32]
 800314e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003154:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800315c:	88f8      	ldrh	r0, [r7, #6]
 800315e:	893a      	ldrh	r2, [r7, #8]
 8003160:	8979      	ldrh	r1, [r7, #10]
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	9301      	str	r3, [sp, #4]
 8003166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	4603      	mov	r3, r0
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f001 fa5f 	bl	8004630 <I2C_RequestMemoryWrite>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d005      	beq.n	8003184 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e0a9      	b.n	80032d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003188:	b29b      	uxth	r3, r3
 800318a:	2bff      	cmp	r3, #255	; 0xff
 800318c:	d90e      	bls.n	80031ac <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	22ff      	movs	r2, #255	; 0xff
 8003192:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003198:	b2da      	uxtb	r2, r3
 800319a:	8979      	ldrh	r1, [r7, #10]
 800319c:	2300      	movs	r3, #0
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f002 f979 	bl	800549c <I2C_TransferConfig>
 80031aa:	e00f      	b.n	80031cc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ba:	b2da      	uxtb	r2, r3
 80031bc:	8979      	ldrh	r1, [r7, #10]
 80031be:	2300      	movs	r3, #0
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f002 f968 	bl	800549c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f001 fffa 	bl	80051ca <I2C_WaitOnTXISFlagUntilTimeout>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e07b      	b.n	80032d8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e4:	781a      	ldrb	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	1c5a      	adds	r2, r3, #1
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b29a      	uxth	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003208:	3b01      	subs	r3, #1
 800320a:	b29a      	uxth	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003214:	b29b      	uxth	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d034      	beq.n	8003284 <HAL_I2C_Mem_Write+0x1c8>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800321e:	2b00      	cmp	r3, #0
 8003220:	d130      	bne.n	8003284 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003228:	2200      	movs	r2, #0
 800322a:	2180      	movs	r1, #128	; 0x80
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f001 ff8c 	bl	800514a <I2C_WaitOnFlagUntilTimeout>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e04d      	b.n	80032d8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003240:	b29b      	uxth	r3, r3
 8003242:	2bff      	cmp	r3, #255	; 0xff
 8003244:	d90e      	bls.n	8003264 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	22ff      	movs	r2, #255	; 0xff
 800324a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003250:	b2da      	uxtb	r2, r3
 8003252:	8979      	ldrh	r1, [r7, #10]
 8003254:	2300      	movs	r3, #0
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f002 f91d 	bl	800549c <I2C_TransferConfig>
 8003262:	e00f      	b.n	8003284 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003268:	b29a      	uxth	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003272:	b2da      	uxtb	r2, r3
 8003274:	8979      	ldrh	r1, [r7, #10]
 8003276:	2300      	movs	r3, #0
 8003278:	9300      	str	r3, [sp, #0]
 800327a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f002 f90c 	bl	800549c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003288:	b29b      	uxth	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d19e      	bne.n	80031cc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f001 ffd9 	bl	800524a <I2C_WaitOnSTOPFlagUntilTimeout>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e01a      	b.n	80032d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2220      	movs	r2, #32
 80032a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6859      	ldr	r1, [r3, #4]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	4b0a      	ldr	r3, [pc, #40]	; (80032e0 <HAL_I2C_Mem_Write+0x224>)
 80032b6:	400b      	ands	r3, r1
 80032b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2220      	movs	r2, #32
 80032be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032d2:	2300      	movs	r3, #0
 80032d4:	e000      	b.n	80032d8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80032d6:	2302      	movs	r3, #2
  }
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3718      	adds	r7, #24
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	fe00e800 	.word	0xfe00e800

080032e4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b088      	sub	sp, #32
 80032e8:	af02      	add	r7, sp, #8
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	4608      	mov	r0, r1
 80032ee:	4611      	mov	r1, r2
 80032f0:	461a      	mov	r2, r3
 80032f2:	4603      	mov	r3, r0
 80032f4:	817b      	strh	r3, [r7, #10]
 80032f6:	460b      	mov	r3, r1
 80032f8:	813b      	strh	r3, [r7, #8]
 80032fa:	4613      	mov	r3, r2
 80032fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b20      	cmp	r3, #32
 8003308:	f040 80fd 	bne.w	8003506 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800330c:	6a3b      	ldr	r3, [r7, #32]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d002      	beq.n	8003318 <HAL_I2C_Mem_Read+0x34>
 8003312:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003314:	2b00      	cmp	r3, #0
 8003316:	d105      	bne.n	8003324 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800331e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e0f1      	b.n	8003508 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800332a:	2b01      	cmp	r3, #1
 800332c:	d101      	bne.n	8003332 <HAL_I2C_Mem_Read+0x4e>
 800332e:	2302      	movs	r3, #2
 8003330:	e0ea      	b.n	8003508 <HAL_I2C_Mem_Read+0x224>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800333a:	f7ff f8f1 	bl	8002520 <HAL_GetTick>
 800333e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	2319      	movs	r3, #25
 8003346:	2201      	movs	r2, #1
 8003348:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f001 fefc 	bl	800514a <I2C_WaitOnFlagUntilTimeout>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e0d5      	b.n	8003508 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2222      	movs	r2, #34	; 0x22
 8003360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2240      	movs	r2, #64	; 0x40
 8003368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6a3a      	ldr	r2, [r7, #32]
 8003376:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800337c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003384:	88f8      	ldrh	r0, [r7, #6]
 8003386:	893a      	ldrh	r2, [r7, #8]
 8003388:	8979      	ldrh	r1, [r7, #10]
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	9301      	str	r3, [sp, #4]
 800338e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	4603      	mov	r3, r0
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	f001 f99f 	bl	80046d8 <I2C_RequestMemoryRead>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d005      	beq.n	80033ac <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e0ad      	b.n	8003508 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	2bff      	cmp	r3, #255	; 0xff
 80033b4:	d90e      	bls.n	80033d4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	22ff      	movs	r2, #255	; 0xff
 80033ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c0:	b2da      	uxtb	r2, r3
 80033c2:	8979      	ldrh	r1, [r7, #10]
 80033c4:	4b52      	ldr	r3, [pc, #328]	; (8003510 <HAL_I2C_Mem_Read+0x22c>)
 80033c6:	9300      	str	r3, [sp, #0]
 80033c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f002 f865 	bl	800549c <I2C_TransferConfig>
 80033d2:	e00f      	b.n	80033f4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d8:	b29a      	uxth	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e2:	b2da      	uxtb	r2, r3
 80033e4:	8979      	ldrh	r1, [r7, #10]
 80033e6:	4b4a      	ldr	r3, [pc, #296]	; (8003510 <HAL_I2C_Mem_Read+0x22c>)
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f002 f854 	bl	800549c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fa:	2200      	movs	r2, #0
 80033fc:	2104      	movs	r1, #4
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f001 fea3 	bl	800514a <I2C_WaitOnFlagUntilTimeout>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e07c      	b.n	8003508 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	b2d2      	uxtb	r2, r2
 800341a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003420:	1c5a      	adds	r2, r3, #1
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800342a:	3b01      	subs	r3, #1
 800342c:	b29a      	uxth	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003436:	b29b      	uxth	r3, r3
 8003438:	3b01      	subs	r3, #1
 800343a:	b29a      	uxth	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003444:	b29b      	uxth	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d034      	beq.n	80034b4 <HAL_I2C_Mem_Read+0x1d0>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800344e:	2b00      	cmp	r3, #0
 8003450:	d130      	bne.n	80034b4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003458:	2200      	movs	r2, #0
 800345a:	2180      	movs	r1, #128	; 0x80
 800345c:	68f8      	ldr	r0, [r7, #12]
 800345e:	f001 fe74 	bl	800514a <I2C_WaitOnFlagUntilTimeout>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e04d      	b.n	8003508 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003470:	b29b      	uxth	r3, r3
 8003472:	2bff      	cmp	r3, #255	; 0xff
 8003474:	d90e      	bls.n	8003494 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	22ff      	movs	r2, #255	; 0xff
 800347a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003480:	b2da      	uxtb	r2, r3
 8003482:	8979      	ldrh	r1, [r7, #10]
 8003484:	2300      	movs	r3, #0
 8003486:	9300      	str	r3, [sp, #0]
 8003488:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f002 f805 	bl	800549c <I2C_TransferConfig>
 8003492:	e00f      	b.n	80034b4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003498:	b29a      	uxth	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a2:	b2da      	uxtb	r2, r3
 80034a4:	8979      	ldrh	r1, [r7, #10]
 80034a6:	2300      	movs	r3, #0
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f001 fff4 	bl	800549c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d19a      	bne.n	80033f4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034be:	697a      	ldr	r2, [r7, #20]
 80034c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f001 fec1 	bl	800524a <I2C_WaitOnSTOPFlagUntilTimeout>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e01a      	b.n	8003508 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2220      	movs	r2, #32
 80034d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6859      	ldr	r1, [r3, #4]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	4b0b      	ldr	r3, [pc, #44]	; (8003514 <HAL_I2C_Mem_Read+0x230>)
 80034e6:	400b      	ands	r3, r1
 80034e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2220      	movs	r2, #32
 80034ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003502:	2300      	movs	r3, #0
 8003504:	e000      	b.n	8003508 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003506:	2302      	movs	r3, #2
  }
}
 8003508:	4618      	mov	r0, r3
 800350a:	3718      	adds	r7, #24
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	80002400 	.word	0x80002400
 8003514:	fe00e800 	.word	0xfe00e800

08003518 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b086      	sub	sp, #24
 800351c:	af02      	add	r7, sp, #8
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	4608      	mov	r0, r1
 8003522:	4611      	mov	r1, r2
 8003524:	461a      	mov	r2, r3
 8003526:	4603      	mov	r3, r0
 8003528:	817b      	strh	r3, [r7, #10]
 800352a:	460b      	mov	r3, r1
 800352c:	813b      	strh	r3, [r7, #8]
 800352e:	4613      	mov	r3, r2
 8003530:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b20      	cmp	r3, #32
 800353c:	d167      	bne.n	800360e <HAL_I2C_Mem_Write_IT+0xf6>
  {
    if ((pData == NULL) || (Size == 0U))
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d002      	beq.n	800354a <HAL_I2C_Mem_Write_IT+0x32>
 8003544:	8bbb      	ldrh	r3, [r7, #28]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d105      	bne.n	8003556 <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003550:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e05c      	b.n	8003610 <HAL_I2C_Mem_Write_IT+0xf8>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003560:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003564:	d101      	bne.n	800356a <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 8003566:	2302      	movs	r3, #2
 8003568:	e052      	b.n	8003610 <HAL_I2C_Mem_Write_IT+0xf8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003570:	2b01      	cmp	r3, #1
 8003572:	d101      	bne.n	8003578 <HAL_I2C_Mem_Write_IT+0x60>
 8003574:	2302      	movs	r3, #2
 8003576:	e04b      	b.n	8003610 <HAL_I2C_Mem_Write_IT+0xf8>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2221      	movs	r2, #33	; 0x21
 8003584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2240      	movs	r2, #64	; 0x40
 800358c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8bba      	ldrh	r2, [r7, #28]
 80035a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	4a1c      	ldr	r2, [pc, #112]	; (8003618 <HAL_I2C_Mem_Write_IT+0x100>)
 80035a6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	4a1c      	ldr	r2, [pc, #112]	; (800361c <HAL_I2C_Mem_Write_IT+0x104>)
 80035ac:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 80035ae:	897a      	ldrh	r2, [r7, #10]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035b4:	88fb      	ldrh	r3, [r7, #6]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d109      	bne.n	80035ce <HAL_I2C_Mem_Write_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80035ba:	893b      	ldrh	r3, [r7, #8]
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f04f 32ff 	mov.w	r2, #4294967295
 80035ca:	651a      	str	r2, [r3, #80]	; 0x50
 80035cc:	e00b      	b.n	80035e6 <HAL_I2C_Mem_Write_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80035ce:	893b      	ldrh	r3, [r7, #8]
 80035d0:	0a1b      	lsrs	r3, r3, #8
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 80035dc:	893b      	ldrh	r3, [r7, #8]
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	461a      	mov	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80035e6:	88fb      	ldrh	r3, [r7, #6]
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	8979      	ldrh	r1, [r7, #10]
 80035ec:	4b0c      	ldr	r3, [pc, #48]	; (8003620 <HAL_I2C_Mem_Write_IT+0x108>)
 80035ee:	9300      	str	r3, [sp, #0]
 80035f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f001 ff51 	bl	800549c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003602:	2101      	movs	r1, #1
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f001 ff7b 	bl	8005500 <I2C_Enable_IRQ>

    return HAL_OK;
 800360a:	2300      	movs	r3, #0
 800360c:	e000      	b.n	8003610 <HAL_I2C_Mem_Write_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800360e:	2302      	movs	r3, #2
  }
}
 8003610:	4618      	mov	r0, r3
 8003612:	3710      	adds	r7, #16
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	ffff0000 	.word	0xffff0000
 800361c:	08003be9 	.word	0x08003be9
 8003620:	80002000 	.word	0x80002000

08003624 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af02      	add	r7, sp, #8
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	4608      	mov	r0, r1
 800362e:	4611      	mov	r1, r2
 8003630:	461a      	mov	r2, r3
 8003632:	4603      	mov	r3, r0
 8003634:	817b      	strh	r3, [r7, #10]
 8003636:	460b      	mov	r3, r1
 8003638:	813b      	strh	r3, [r7, #8]
 800363a:	4613      	mov	r3, r2
 800363c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b20      	cmp	r3, #32
 8003648:	d166      	bne.n	8003718 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d002      	beq.n	8003656 <HAL_I2C_Mem_Read_IT+0x32>
 8003650:	8bbb      	ldrh	r3, [r7, #28]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d105      	bne.n	8003662 <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f44f 7200 	mov.w	r2, #512	; 0x200
 800365c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e05b      	b.n	800371a <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800366c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003670:	d101      	bne.n	8003676 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 8003672:	2302      	movs	r3, #2
 8003674:	e051      	b.n	800371a <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800367c:	2b01      	cmp	r3, #1
 800367e:	d101      	bne.n	8003684 <HAL_I2C_Mem_Read_IT+0x60>
 8003680:	2302      	movs	r3, #2
 8003682:	e04a      	b.n	800371a <HAL_I2C_Mem_Read_IT+0xf6>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2222      	movs	r2, #34	; 0x22
 8003690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2240      	movs	r2, #64	; 0x40
 8003698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8bba      	ldrh	r2, [r7, #28]
 80036ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	4a1c      	ldr	r2, [pc, #112]	; (8003724 <HAL_I2C_Mem_Read_IT+0x100>)
 80036b2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4a1c      	ldr	r2, [pc, #112]	; (8003728 <HAL_I2C_Mem_Read_IT+0x104>)
 80036b8:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 80036ba:	897a      	ldrh	r2, [r7, #10]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036c0:	88fb      	ldrh	r3, [r7, #6]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d109      	bne.n	80036da <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036c6:	893b      	ldrh	r3, [r7, #8]
 80036c8:	b2da      	uxtb	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f04f 32ff 	mov.w	r2, #4294967295
 80036d6:	651a      	str	r2, [r3, #80]	; 0x50
 80036d8:	e00b      	b.n	80036f2 <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80036da:	893b      	ldrh	r3, [r7, #8]
 80036dc:	0a1b      	lsrs	r3, r3, #8
 80036de:	b29b      	uxth	r3, r3
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 80036e8:	893b      	ldrh	r3, [r7, #8]
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	461a      	mov	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80036f2:	88fb      	ldrh	r3, [r7, #6]
 80036f4:	b2da      	uxtb	r2, r3
 80036f6:	8979      	ldrh	r1, [r7, #10]
 80036f8:	4b0c      	ldr	r3, [pc, #48]	; (800372c <HAL_I2C_Mem_Read_IT+0x108>)
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	2300      	movs	r3, #0
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f001 fecc 	bl	800549c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, (I2C_XFER_TX_IT | I2C_XFER_RX_IT));
 800370c:	2103      	movs	r1, #3
 800370e:	68f8      	ldr	r0, [r7, #12]
 8003710:	f001 fef6 	bl	8005500 <I2C_Enable_IRQ>

    return HAL_OK;
 8003714:	2300      	movs	r3, #0
 8003716:	e000      	b.n	800371a <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 8003718:	2302      	movs	r3, #2
  }
}
 800371a:	4618      	mov	r0, r3
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	ffff0000 	.word	0xffff0000
 8003728:	08003be9 	.word	0x08003be9
 800372c:	80002000 	.word	0x80002000

08003730 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b088      	sub	sp, #32
 8003734:	af02      	add	r7, sp, #8
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	4608      	mov	r0, r1
 800373a:	4611      	mov	r1, r2
 800373c:	461a      	mov	r2, r3
 800373e:	4603      	mov	r3, r0
 8003740:	817b      	strh	r3, [r7, #10]
 8003742:	460b      	mov	r3, r1
 8003744:	813b      	strh	r3, [r7, #8]
 8003746:	4613      	mov	r3, r2
 8003748:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b20      	cmp	r3, #32
 8003754:	f040 80c2 	bne.w	80038dc <HAL_I2C_Mem_Read_DMA+0x1ac>
  {
    if ((pData == NULL) || (Size == 0U))
 8003758:	6a3b      	ldr	r3, [r7, #32]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d002      	beq.n	8003764 <HAL_I2C_Mem_Read_DMA+0x34>
 800375e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003760:	2b00      	cmp	r3, #0
 8003762:	d105      	bne.n	8003770 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f44f 7200 	mov.w	r2, #512	; 0x200
 800376a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e0b6      	b.n	80038de <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800377a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800377e:	d101      	bne.n	8003784 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 8003780:	2302      	movs	r3, #2
 8003782:	e0ac      	b.n	80038de <HAL_I2C_Mem_Read_DMA+0x1ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800378a:	2b01      	cmp	r3, #1
 800378c:	d101      	bne.n	8003792 <HAL_I2C_Mem_Read_DMA+0x62>
 800378e:	2302      	movs	r3, #2
 8003790:	e0a5      	b.n	80038de <HAL_I2C_Mem_Read_DMA+0x1ae>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2222      	movs	r2, #34	; 0x22
 800379e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2240      	movs	r2, #64	; 0x40
 80037a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6a3a      	ldr	r2, [r7, #32]
 80037b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80037ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4a4a      	ldr	r2, [pc, #296]	; (80038e8 <HAL_I2C_Mem_Read_DMA+0x1b8>)
 80037c0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	4a49      	ldr	r2, [pc, #292]	; (80038ec <HAL_I2C_Mem_Read_DMA+0x1bc>)
 80037c6:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 80037c8:	897a      	ldrh	r2, [r7, #10]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	64da      	str	r2, [r3, #76]	; 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	2bff      	cmp	r3, #255	; 0xff
 80037d6:	d903      	bls.n	80037e0 <HAL_I2C_Mem_Read_DMA+0xb0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	22ff      	movs	r2, #255	; 0xff
 80037dc:	851a      	strh	r2, [r3, #40]	; 0x28
 80037de:	e004      	b.n	80037ea <HAL_I2C_Mem_Read_DMA+0xba>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80037ea:	88fb      	ldrh	r3, [r7, #6]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d109      	bne.n	8003804 <HAL_I2C_Mem_Read_DMA+0xd4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80037f0:	893b      	ldrh	r3, [r7, #8]
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003800:	651a      	str	r2, [r3, #80]	; 0x50
 8003802:	e00b      	b.n	800381c <HAL_I2C_Mem_Read_DMA+0xec>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003804:	893b      	ldrh	r3, [r7, #8]
 8003806:	0a1b      	lsrs	r3, r3, #8
 8003808:	b29b      	uxth	r3, r3
 800380a:	b2da      	uxtb	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8003812:	893b      	ldrh	r3, [r7, #8]
 8003814:	b2db      	uxtb	r3, r3
 8003816:	461a      	mov	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	651a      	str	r2, [r3, #80]	; 0x50
    }

    if (hi2c->hdmarx != NULL)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003820:	2b00      	cmp	r3, #0
 8003822:	d020      	beq.n	8003866 <HAL_I2C_Mem_Read_DMA+0x136>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003828:	4a31      	ldr	r2, [pc, #196]	; (80038f0 <HAL_I2C_Mem_Read_DMA+0x1c0>)
 800382a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003830:	4a30      	ldr	r2, [pc, #192]	; (80038f4 <HAL_I2C_Mem_Read_DMA+0x1c4>)
 8003832:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003838:	2200      	movs	r2, #0
 800383a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003840:	2200      	movs	r2, #0
 8003842:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	3324      	adds	r3, #36	; 0x24
 800384e:	4619      	mov	r1, r3
 8003850:	6a3a      	ldr	r2, [r7, #32]
                                       hi2c->XferSize);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8003856:	f7ff f839 	bl	80028cc <HAL_DMA_Start_IT>
 800385a:	4603      	mov	r3, r0
 800385c:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800385e:	7dfb      	ldrb	r3, [r7, #23]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d127      	bne.n	80038b4 <HAL_I2C_Mem_Read_DMA+0x184>
 8003864:	e013      	b.n	800388e <HAL_I2C_Mem_Read_DMA+0x15e>
      hi2c->State     = HAL_I2C_STATE_READY;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2220      	movs	r2, #32
 800386a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e027      	b.n	80038de <HAL_I2C_Mem_Read_DMA+0x1ae>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800388e:	88fb      	ldrh	r3, [r7, #6]
 8003890:	b2da      	uxtb	r2, r3
 8003892:	8979      	ldrh	r1, [r7, #10]
 8003894:	4b18      	ldr	r3, [pc, #96]	; (80038f8 <HAL_I2C_Mem_Read_DMA+0x1c8>)
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	2300      	movs	r3, #0
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f001 fdfe 	bl	800549c <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80038a8:	2101      	movs	r1, #1
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f001 fe28 	bl	8005500 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80038b0:	2300      	movs	r3, #0
 80038b2:	e014      	b.n	80038de <HAL_I2C_Mem_Read_DMA+0x1ae>
      hi2c->State     = HAL_I2C_STATE_READY;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2220      	movs	r2, #32
 80038b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c8:	f043 0210 	orr.w	r2, r3, #16
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e000      	b.n	80038de <HAL_I2C_Mem_Read_DMA+0x1ae>
  }
  else
  {
    return HAL_BUSY;
 80038dc:	2302      	movs	r3, #2
  }
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	ffff0000 	.word	0xffff0000
 80038ec:	08004229 	.word	0x08004229
 80038f0:	0800504b 	.word	0x0800504b
 80038f4:	080050e1 	.word	0x080050e1
 80038f8:	80002000 	.word	0x80002000

080038fc <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b08a      	sub	sp, #40	; 0x28
 8003900:	af02      	add	r7, sp, #8
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	607a      	str	r2, [r7, #4]
 8003906:	603b      	str	r3, [r7, #0]
 8003908:	460b      	mov	r3, r1
 800390a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800390c:	2300      	movs	r3, #0
 800390e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2b20      	cmp	r3, #32
 800391a:	f040 80f1 	bne.w	8003b00 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003928:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800392c:	d101      	bne.n	8003932 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800392e:	2302      	movs	r3, #2
 8003930:	e0e7      	b.n	8003b02 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003938:	2b01      	cmp	r3, #1
 800393a:	d101      	bne.n	8003940 <HAL_I2C_IsDeviceReady+0x44>
 800393c:	2302      	movs	r3, #2
 800393e:	e0e0      	b.n	8003b02 <HAL_I2C_IsDeviceReady+0x206>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2224      	movs	r2, #36	; 0x24
 800394c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d107      	bne.n	800396e <HAL_I2C_IsDeviceReady+0x72>
 800395e:	897b      	ldrh	r3, [r7, #10]
 8003960:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003964:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003968:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800396c:	e004      	b.n	8003978 <HAL_I2C_IsDeviceReady+0x7c>
 800396e:	897b      	ldrh	r3, [r7, #10]
 8003970:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003974:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	6812      	ldr	r2, [r2, #0]
 800397c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800397e:	f7fe fdcf 	bl	8002520 <HAL_GetTick>
 8003982:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	f003 0320 	and.w	r3, r3, #32
 800398e:	2b20      	cmp	r3, #32
 8003990:	bf0c      	ite	eq
 8003992:	2301      	moveq	r3, #1
 8003994:	2300      	movne	r3, #0
 8003996:	b2db      	uxtb	r3, r3
 8003998:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	f003 0310 	and.w	r3, r3, #16
 80039a4:	2b10      	cmp	r3, #16
 80039a6:	bf0c      	ite	eq
 80039a8:	2301      	moveq	r3, #1
 80039aa:	2300      	movne	r3, #0
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80039b0:	e034      	b.n	8003a1c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b8:	d01a      	beq.n	80039f0 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80039ba:	f7fe fdb1 	bl	8002520 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d302      	bcc.n	80039d0 <HAL_I2C_IsDeviceReady+0xd4>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10f      	bne.n	80039f0 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2220      	movs	r2, #32
 80039d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039dc:	f043 0220 	orr.w	r2, r3, #32
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e088      	b.n	8003b02 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	f003 0320 	and.w	r3, r3, #32
 80039fa:	2b20      	cmp	r3, #32
 80039fc:	bf0c      	ite	eq
 80039fe:	2301      	moveq	r3, #1
 8003a00:	2300      	movne	r3, #0
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	f003 0310 	and.w	r3, r3, #16
 8003a10:	2b10      	cmp	r3, #16
 8003a12:	bf0c      	ite	eq
 8003a14:	2301      	moveq	r3, #1
 8003a16:	2300      	movne	r3, #0
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003a1c:	7ffb      	ldrb	r3, [r7, #31]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d102      	bne.n	8003a28 <HAL_I2C_IsDeviceReady+0x12c>
 8003a22:	7fbb      	ldrb	r3, [r7, #30]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d0c4      	beq.n	80039b2 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	f003 0310 	and.w	r3, r3, #16
 8003a32:	2b10      	cmp	r3, #16
 8003a34:	d01a      	beq.n	8003a6c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	9300      	str	r3, [sp, #0]
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	2120      	movs	r1, #32
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	f001 fb82 	bl	800514a <I2C_WaitOnFlagUntilTimeout>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d001      	beq.n	8003a50 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e058      	b.n	8003b02 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2220      	movs	r2, #32
 8003a56:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	e04a      	b.n	8003b02 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	2200      	movs	r2, #0
 8003a74:	2120      	movs	r1, #32
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	f001 fb67 	bl	800514a <I2C_WaitOnFlagUntilTimeout>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e03d      	b.n	8003b02 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2210      	movs	r2, #16
 8003a8c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2220      	movs	r2, #32
 8003a94:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d118      	bne.n	8003ad0 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	685a      	ldr	r2, [r3, #4]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003aac:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	2120      	movs	r1, #32
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f001 fb46 	bl	800514a <I2C_WaitOnFlagUntilTimeout>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e01c      	b.n	8003b02 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2220      	movs	r2, #32
 8003ace:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	f63f af3b 	bhi.w	8003956 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aec:	f043 0220 	orr.w	r2, r3, #32
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e000      	b.n	8003b02 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8003b00:	2302      	movs	r3, #2
  }
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3720      	adds	r7, #32
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b084      	sub	sp, #16
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d005      	beq.n	8003b36 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	68f9      	ldr	r1, [r7, #12]
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	4798      	blx	r3
  }
}
 8003b36:	bf00      	nop
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	b083      	sub	sp, #12
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003b46:	bf00      	nop
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr

08003b52 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b52:	b480      	push	{r7}
 8003b54:	b083      	sub	sp, #12
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003b5a:	bf00      	nop
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b66:	b480      	push	{r7}
 8003b68:	b083      	sub	sp, #12
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003b6e:	bf00      	nop
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b083      	sub	sp, #12
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003b82:	bf00      	nop
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr

08003b8e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b083      	sub	sp, #12
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
 8003b96:	460b      	mov	r3, r1
 8003b98:	70fb      	strb	r3, [r7, #3]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003b9e:	bf00      	nop
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003baa:	b480      	push	{r7}
 8003bac:	b083      	sub	sp, #12
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003bb2:	bf00      	nop
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b083      	sub	sp, #12
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003bc6:	bf00      	nop
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b083      	sub	sp, #12
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003bda:	bf00      	nop
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
	...

08003be8 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b088      	sub	sp, #32
 8003bec:	af02      	add	r7, sp, #8
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8003bf4:	4b8f      	ldr	r3, [pc, #572]	; (8003e34 <I2C_Mem_ISR_IT+0x24c>)
 8003bf6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d101      	bne.n	8003c0a <I2C_Mem_ISR_IT+0x22>
 8003c06:	2302      	movs	r3, #2
 8003c08:	e110      	b.n	8003e2c <I2C_Mem_ISR_IT+0x244>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	091b      	lsrs	r3, r3, #4
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d013      	beq.n	8003c46 <I2C_Mem_ISR_IT+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	091b      	lsrs	r3, r3, #4
 8003c22:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00d      	beq.n	8003c46 <I2C_Mem_ISR_IT+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2210      	movs	r2, #16
 8003c30:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c36:	f043 0204 	orr.w	r2, r3, #4
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f001 f9df 	bl	8005002 <I2C_Flush_TXDR>
 8003c44:	e0dd      	b.n	8003e02 <I2C_Mem_ISR_IT+0x21a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	089b      	lsrs	r3, r3, #2
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d023      	beq.n	8003c9a <I2C_Mem_ISR_IT+0xb2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	089b      	lsrs	r3, r3, #2
 8003c56:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d01d      	beq.n	8003c9a <I2C_Mem_ISR_IT+0xb2>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	f023 0304 	bic.w	r3, r3, #4
 8003c64:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c70:	b2d2      	uxtb	r2, r2
 8003c72:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	1c5a      	adds	r2, r3, #1
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c82:	3b01      	subs	r3, #1
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	3b01      	subs	r3, #1
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c98:	e0b3      	b.n	8003e02 <I2C_Mem_ISR_IT+0x21a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	085b      	lsrs	r3, r3, #1
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d02d      	beq.n	8003d02 <I2C_Mem_ISR_IT+0x11a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	085b      	lsrs	r3, r3, #1
 8003caa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d027      	beq.n	8003d02 <I2C_Mem_ISR_IT+0x11a>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cba:	d118      	bne.n	8003cee <I2C_Mem_ISR_IT+0x106>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc0:	781a      	ldrb	r2, [r3, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	1c5a      	adds	r2, r3, #1
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8003cec:	e089      	b.n	8003e02 <I2C_Mem_ISR_IT+0x21a>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003cf6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8003cfe:	651a      	str	r2, [r3, #80]	; 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8003d00:	e07f      	b.n	8003e02 <I2C_Mem_ISR_IT+0x21a>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	09db      	lsrs	r3, r3, #7
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d03d      	beq.n	8003d8a <I2C_Mem_ISR_IT+0x1a2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	099b      	lsrs	r3, r3, #6
 8003d12:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d037      	beq.n	8003d8a <I2C_Mem_ISR_IT+0x1a2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d02c      	beq.n	8003d7e <I2C_Mem_ISR_IT+0x196>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d128      	bne.n	8003d7e <I2C_Mem_ISR_IT+0x196>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	2bff      	cmp	r3, #255	; 0xff
 8003d34:	d910      	bls.n	8003d58 <I2C_Mem_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	22ff      	movs	r2, #255	; 0xff
 8003d3a:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d40:	b299      	uxth	r1, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d46:	b2da      	uxtb	r2, r3
 8003d48:	2300      	movs	r3, #0
 8003d4a:	9300      	str	r3, [sp, #0]
 8003d4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	f001 fba3 	bl	800549c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d56:	e017      	b.n	8003d88 <I2C_Mem_ISR_IT+0x1a0>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d66:	b299      	uxth	r1, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	2300      	movs	r3, #0
 8003d70:	9300      	str	r3, [sp, #0]
 8003d72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f001 fb90 	bl	800549c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d7c:	e004      	b.n	8003d88 <I2C_Mem_ISR_IT+0x1a0>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003d7e:	2140      	movs	r1, #64	; 0x40
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f001 f847 	bl	8004e14 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d86:	e03c      	b.n	8003e02 <I2C_Mem_ISR_IT+0x21a>
 8003d88:	e03b      	b.n	8003e02 <I2C_Mem_ISR_IT+0x21a>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	099b      	lsrs	r3, r3, #6
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d035      	beq.n	8003e02 <I2C_Mem_ISR_IT+0x21a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	099b      	lsrs	r3, r3, #6
 8003d9a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d02f      	beq.n	8003e02 <I2C_Mem_ISR_IT+0x21a>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b22      	cmp	r3, #34	; 0x22
 8003dac:	d101      	bne.n	8003db2 <I2C_Mem_ISR_IT+0x1ca>
    {
      direction = I2C_GENERATE_START_READ;
 8003dae:	4b22      	ldr	r3, [pc, #136]	; (8003e38 <I2C_Mem_ISR_IT+0x250>)
 8003db0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	2bff      	cmp	r3, #255	; 0xff
 8003dba:	d910      	bls.n	8003dde <I2C_Mem_ISR_IT+0x1f6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	22ff      	movs	r2, #255	; 0xff
 8003dc0:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dc6:	b299      	uxth	r1, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dcc:	b2da      	uxtb	r2, r3
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f001 fb60 	bl	800549c <I2C_TransferConfig>
 8003ddc:	e011      	b.n	8003e02 <I2C_Mem_ISR_IT+0x21a>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dec:	b299      	uxth	r1, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df2:	b2da      	uxtb	r2, r3
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	9300      	str	r3, [sp, #0]
 8003df8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f001 fb4d 	bl	800549c <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	095b      	lsrs	r3, r3, #5
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d009      	beq.n	8003e22 <I2C_Mem_ISR_IT+0x23a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	095b      	lsrs	r3, r3, #5
 8003e12:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d003      	beq.n	8003e22 <I2C_Mem_ISR_IT+0x23a>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8003e1a:	6939      	ldr	r1, [r7, #16]
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f000 fdcf 	bl	80049c0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3718      	adds	r7, #24
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	80002000 	.word	0x80002000
 8003e38:	80002400 	.word	0x80002400

08003e3c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d101      	bne.n	8003e60 <I2C_Slave_ISR_IT+0x24>
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	e0ec      	b.n	800403a <I2C_Slave_ISR_IT+0x1fe>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	095b      	lsrs	r3, r3, #5
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d009      	beq.n	8003e88 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	095b      	lsrs	r3, r3, #5
 8003e78:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d003      	beq.n	8003e88 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003e80:	6939      	ldr	r1, [r7, #16]
 8003e82:	68f8      	ldr	r0, [r7, #12]
 8003e84:	f000 fe66 	bl	8004b54 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	091b      	lsrs	r3, r3, #4
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d04d      	beq.n	8003f30 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	091b      	lsrs	r3, r3, #4
 8003e98:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d047      	beq.n	8003f30 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d128      	bne.n	8003efc <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b28      	cmp	r3, #40	; 0x28
 8003eb4:	d108      	bne.n	8003ec8 <I2C_Slave_ISR_IT+0x8c>
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ebc:	d104      	bne.n	8003ec8 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003ebe:	6939      	ldr	r1, [r7, #16]
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f000 ff51 	bl	8004d68 <I2C_ITListenCplt>
 8003ec6:	e032      	b.n	8003f2e <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	2b29      	cmp	r3, #41	; 0x29
 8003ed2:	d10e      	bne.n	8003ef2 <I2C_Slave_ISR_IT+0xb6>
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003eda:	d00a      	beq.n	8003ef2 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2210      	movs	r2, #16
 8003ee2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	f001 f88c 	bl	8005002 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f000 fd09 	bl	8004902 <I2C_ITSlaveSeqCplt>
 8003ef0:	e01d      	b.n	8003f2e <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2210      	movs	r2, #16
 8003ef8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003efa:	e096      	b.n	800402a <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2210      	movs	r2, #16
 8003f02:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f08:	f043 0204 	orr.w	r2, r3, #4
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d004      	beq.n	8003f20 <I2C_Slave_ISR_IT+0xe4>
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f1c:	f040 8085 	bne.w	800402a <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f24:	4619      	mov	r1, r3
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f000 ff74 	bl	8004e14 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003f2c:	e07d      	b.n	800402a <I2C_Slave_ISR_IT+0x1ee>
 8003f2e:	e07c      	b.n	800402a <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	089b      	lsrs	r3, r3, #2
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d030      	beq.n	8003f9e <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	089b      	lsrs	r3, r3, #2
 8003f40:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d02a      	beq.n	8003f9e <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d018      	beq.n	8003f84 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	b2d2      	uxtb	r2, r2
 8003f5e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f64:	1c5a      	adds	r2, r3, #1
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d14f      	bne.n	800402e <I2C_Slave_ISR_IT+0x1f2>
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f94:	d04b      	beq.n	800402e <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f000 fcb3 	bl	8004902 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003f9c:	e047      	b.n	800402e <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	08db      	lsrs	r3, r3, #3
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00a      	beq.n	8003fc0 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	08db      	lsrs	r3, r3, #3
 8003fae:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d004      	beq.n	8003fc0 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003fb6:	6939      	ldr	r1, [r7, #16]
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f000 fbe1 	bl	8004780 <I2C_ITAddrCplt>
 8003fbe:	e037      	b.n	8004030 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	085b      	lsrs	r3, r3, #1
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d031      	beq.n	8004030 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	085b      	lsrs	r3, r3, #1
 8003fd0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d02b      	beq.n	8004030 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d018      	beq.n	8004014 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe6:	781a      	ldrb	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff2:	1c5a      	adds	r2, r3, #1
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	3b01      	subs	r3, #1
 8004000:	b29a      	uxth	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800400a:	3b01      	subs	r3, #1
 800400c:	b29a      	uxth	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	851a      	strh	r2, [r3, #40]	; 0x28
 8004012:	e00d      	b.n	8004030 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800401a:	d002      	beq.n	8004022 <I2C_Slave_ISR_IT+0x1e6>
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d106      	bne.n	8004030 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	f000 fc6d 	bl	8004902 <I2C_ITSlaveSeqCplt>
 8004028:	e002      	b.n	8004030 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800402a:	bf00      	nop
 800402c:	e000      	b.n	8004030 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800402e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3718      	adds	r7, #24
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8004042:	b580      	push	{r7, lr}
 8004044:	b088      	sub	sp, #32
 8004046:	af02      	add	r7, sp, #8
 8004048:	60f8      	str	r0, [r7, #12]
 800404a:	60b9      	str	r1, [r7, #8]
 800404c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004054:	2b01      	cmp	r3, #1
 8004056:	d101      	bne.n	800405c <I2C_Master_ISR_DMA+0x1a>
 8004058:	2302      	movs	r3, #2
 800405a:	e0e1      	b.n	8004220 <I2C_Master_ISR_DMA+0x1de>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	091b      	lsrs	r3, r3, #4
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b00      	cmp	r3, #0
 800406e:	d017      	beq.n	80040a0 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	091b      	lsrs	r3, r3, #4
 8004074:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004078:	2b00      	cmp	r3, #0
 800407a:	d011      	beq.n	80040a0 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2210      	movs	r2, #16
 8004082:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004088:	f043 0204 	orr.w	r2, r3, #4
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004090:	2120      	movs	r1, #32
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	f001 fa34 	bl	8005500 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f000 ffb2 	bl	8005002 <I2C_Flush_TXDR>
 800409e:	e0ba      	b.n	8004216 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	09db      	lsrs	r3, r3, #7
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d072      	beq.n	8004192 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	099b      	lsrs	r3, r3, #6
 80040b0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d06c      	beq.n	8004192 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040c6:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d04e      	beq.n	8004170 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	b29b      	uxth	r3, r3
 80040da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040de:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	2bff      	cmp	r3, #255	; 0xff
 80040e8:	d906      	bls.n	80040f8 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	22ff      	movs	r2, #255	; 0xff
 80040ee:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80040f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040f4:	617b      	str	r3, [r7, #20]
 80040f6:	e010      	b.n	800411a <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004106:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800410a:	d003      	beq.n	8004114 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004110:	617b      	str	r3, [r7, #20]
 8004112:	e002      	b.n	800411a <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8004114:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004118:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800411e:	b2da      	uxtb	r2, r3
 8004120:	8a79      	ldrh	r1, [r7, #18]
 8004122:	2300      	movs	r3, #0
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	68f8      	ldr	r0, [r7, #12]
 800412a:	f001 f9b7 	bl	800549c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004132:	b29a      	uxth	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	b29a      	uxth	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004146:	b2db      	uxtb	r3, r3
 8004148:	2b22      	cmp	r3, #34	; 0x22
 800414a:	d108      	bne.n	800415e <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800415a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800415c:	e05b      	b.n	8004216 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800416c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800416e:	e052      	b.n	8004216 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800417a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800417e:	d003      	beq.n	8004188 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f000 fb81 	bl	8004888 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8004186:	e046      	b.n	8004216 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004188:	2140      	movs	r1, #64	; 0x40
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 fe42 	bl	8004e14 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004190:	e041      	b.n	8004216 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	099b      	lsrs	r3, r3, #6
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b00      	cmp	r3, #0
 800419c:	d029      	beq.n	80041f2 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	099b      	lsrs	r3, r3, #6
 80041a2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d023      	beq.n	80041f2 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d119      	bne.n	80041e8 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041c2:	d027      	beq.n	8004214 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041cc:	d108      	bne.n	80041e0 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	685a      	ldr	r2, [r3, #4]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041dc:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80041de:	e019      	b.n	8004214 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 fb51 	bl	8004888 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80041e6:	e015      	b.n	8004214 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80041e8:	2140      	movs	r1, #64	; 0x40
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f000 fe12 	bl	8004e14 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80041f0:	e010      	b.n	8004214 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	095b      	lsrs	r3, r3, #5
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00b      	beq.n	8004216 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	095b      	lsrs	r3, r3, #5
 8004202:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004206:	2b00      	cmp	r3, #0
 8004208:	d005      	beq.n	8004216 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800420a:	68b9      	ldr	r1, [r7, #8]
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f000 fbd7 	bl	80049c0 <I2C_ITMasterCplt>
 8004212:	e000      	b.n	8004216 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8004214:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3718      	adds	r7, #24
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b088      	sub	sp, #32
 800422c:	af02      	add	r7, sp, #8
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8004234:	4b8c      	ldr	r3, [pc, #560]	; (8004468 <I2C_Mem_ISR_DMA+0x240>)
 8004236:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800423e:	2b01      	cmp	r3, #1
 8004240:	d101      	bne.n	8004246 <I2C_Mem_ISR_DMA+0x1e>
 8004242:	2302      	movs	r3, #2
 8004244:	e10c      	b.n	8004460 <I2C_Mem_ISR_DMA+0x238>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	091b      	lsrs	r3, r3, #4
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b00      	cmp	r3, #0
 8004258:	d017      	beq.n	800428a <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	091b      	lsrs	r3, r3, #4
 800425e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004262:	2b00      	cmp	r3, #0
 8004264:	d011      	beq.n	800428a <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2210      	movs	r2, #16
 800426c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004272:	f043 0204 	orr.w	r2, r3, #4
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800427a:	2120      	movs	r1, #32
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f001 f93f 	bl	8005500 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f000 febd 	bl	8005002 <I2C_Flush_TXDR>
 8004288:	e0e5      	b.n	8004456 <I2C_Mem_ISR_DMA+0x22e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	085b      	lsrs	r3, r3, #1
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00f      	beq.n	80042b6 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	085b      	lsrs	r3, r3, #1
 800429a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d009      	beq.n	80042b6 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80042aa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f04f 32ff 	mov.w	r2, #4294967295
 80042b2:	651a      	str	r2, [r3, #80]	; 0x50
 80042b4:	e0cf      	b.n	8004456 <I2C_Mem_ISR_DMA+0x22e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	09db      	lsrs	r3, r3, #7
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d05c      	beq.n	800437c <I2C_Mem_ISR_DMA+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	099b      	lsrs	r3, r3, #6
 80042c6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d056      	beq.n	800437c <I2C_Mem_ISR_DMA+0x154>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80042ce:	2110      	movs	r1, #16
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f001 f915 	bl	8005500 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042da:	b29b      	uxth	r3, r3
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d048      	beq.n	8004372 <I2C_Mem_ISR_DMA+0x14a>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	2bff      	cmp	r3, #255	; 0xff
 80042e8:	d910      	bls.n	800430c <I2C_Mem_ISR_DMA+0xe4>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	22ff      	movs	r2, #255	; 0xff
 80042ee:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042f4:	b299      	uxth	r1, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042fa:	b2da      	uxtb	r2, r3
 80042fc:	2300      	movs	r3, #0
 80042fe:	9300      	str	r3, [sp, #0]
 8004300:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f001 f8c9 	bl	800549c <I2C_TransferConfig>
 800430a:	e011      	b.n	8004330 <I2C_Mem_ISR_DMA+0x108>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004310:	b29a      	uxth	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800431a:	b299      	uxth	r1, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004320:	b2da      	uxtb	r2, r3
 8004322:	2300      	movs	r3, #0
 8004324:	9300      	str	r3, [sp, #0]
 8004326:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f001 f8b6 	bl	800549c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004334:	b29a      	uxth	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	b29a      	uxth	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b22      	cmp	r3, #34	; 0x22
 800434c:	d108      	bne.n	8004360 <I2C_Mem_ISR_DMA+0x138>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800435c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800435e:	e07a      	b.n	8004456 <I2C_Mem_ISR_DMA+0x22e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800436e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004370:	e071      	b.n	8004456 <I2C_Mem_ISR_DMA+0x22e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004372:	2140      	movs	r1, #64	; 0x40
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f000 fd4d 	bl	8004e14 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800437a:	e06c      	b.n	8004456 <I2C_Mem_ISR_DMA+0x22e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	099b      	lsrs	r3, r3, #6
 8004380:	f003 0301 	and.w	r3, r3, #1
 8004384:	2b00      	cmp	r3, #0
 8004386:	d056      	beq.n	8004436 <I2C_Mem_ISR_DMA+0x20e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	099b      	lsrs	r3, r3, #6
 800438c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004390:	2b00      	cmp	r3, #0
 8004392:	d050      	beq.n	8004436 <I2C_Mem_ISR_DMA+0x20e>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b22      	cmp	r3, #34	; 0x22
 800439e:	d101      	bne.n	80043a4 <I2C_Mem_ISR_DMA+0x17c>
    {
      direction = I2C_GENERATE_START_READ;
 80043a0:	4b32      	ldr	r3, [pc, #200]	; (800446c <I2C_Mem_ISR_DMA+0x244>)
 80043a2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	2bff      	cmp	r3, #255	; 0xff
 80043ac:	d910      	bls.n	80043d0 <I2C_Mem_ISR_DMA+0x1a8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	22ff      	movs	r2, #255	; 0xff
 80043b2:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043b8:	b299      	uxth	r1, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043be:	b2da      	uxtb	r2, r3
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	9300      	str	r3, [sp, #0]
 80043c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f001 f867 	bl	800549c <I2C_TransferConfig>
 80043ce:	e011      	b.n	80043f4 <I2C_Mem_ISR_DMA+0x1cc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043de:	b299      	uxth	r1, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043e4:	b2da      	uxtb	r2, r3
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	9300      	str	r3, [sp, #0]
 80043ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f001 f854 	bl	800549c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	b29a      	uxth	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b22      	cmp	r3, #34	; 0x22
 8004410:	d108      	bne.n	8004424 <I2C_Mem_ISR_DMA+0x1fc>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004420:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004422:	e018      	b.n	8004456 <I2C_Mem_ISR_DMA+0x22e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004432:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004434:	e00f      	b.n	8004456 <I2C_Mem_ISR_DMA+0x22e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	095b      	lsrs	r3, r3, #5
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	d009      	beq.n	8004456 <I2C_Mem_ISR_DMA+0x22e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	095b      	lsrs	r3, r3, #5
 8004446:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800444a:	2b00      	cmp	r3, #0
 800444c:	d003      	beq.n	8004456 <I2C_Mem_ISR_DMA+0x22e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800444e:	68b9      	ldr	r1, [r7, #8]
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f000 fab5 	bl	80049c0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3718      	adds	r7, #24
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	80002000 	.word	0x80002000
 800446c:	80002400 	.word	0x80002400

08004470 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b088      	sub	sp, #32
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004480:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8004482:	2300      	movs	r3, #0
 8004484:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800448c:	2b01      	cmp	r3, #1
 800448e:	d101      	bne.n	8004494 <I2C_Slave_ISR_DMA+0x24>
 8004490:	2302      	movs	r3, #2
 8004492:	e0c9      	b.n	8004628 <I2C_Slave_ISR_DMA+0x1b8>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	095b      	lsrs	r3, r3, #5
 80044a0:	f003 0301 	and.w	r3, r3, #1
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d009      	beq.n	80044bc <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	095b      	lsrs	r3, r3, #5
 80044ac:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d003      	beq.n	80044bc <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80044b4:	68b9      	ldr	r1, [r7, #8]
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f000 fb4c 	bl	8004b54 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	091b      	lsrs	r3, r3, #4
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f000 809a 	beq.w	80045fe <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	091b      	lsrs	r3, r3, #4
 80044ce:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f000 8093 	beq.w	80045fe <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	0b9b      	lsrs	r3, r3, #14
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d105      	bne.n	80044f0 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	0bdb      	lsrs	r3, r3, #15
 80044e8:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d07f      	beq.n	80045f0 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00d      	beq.n	8004514 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	0bdb      	lsrs	r3, r3, #15
 80044fc:	f003 0301 	and.w	r3, r3, #1
 8004500:	2b00      	cmp	r3, #0
 8004502:	d007      	beq.n	8004514 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d101      	bne.n	8004514 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8004510:	2301      	movs	r3, #1
 8004512:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00d      	beq.n	8004538 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	0b9b      	lsrs	r3, r3, #14
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	2b00      	cmp	r3, #0
 8004526:	d007      	beq.n	8004538 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d101      	bne.n	8004538 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8004534:	2301      	movs	r3, #1
 8004536:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d128      	bne.n	8004590 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004544:	b2db      	uxtb	r3, r3
 8004546:	2b28      	cmp	r3, #40	; 0x28
 8004548:	d108      	bne.n	800455c <I2C_Slave_ISR_DMA+0xec>
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004550:	d104      	bne.n	800455c <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8004552:	68b9      	ldr	r1, [r7, #8]
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f000 fc07 	bl	8004d68 <I2C_ITListenCplt>
 800455a:	e048      	b.n	80045ee <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004562:	b2db      	uxtb	r3, r3
 8004564:	2b29      	cmp	r3, #41	; 0x29
 8004566:	d10e      	bne.n	8004586 <I2C_Slave_ISR_DMA+0x116>
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800456e:	d00a      	beq.n	8004586 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2210      	movs	r2, #16
 8004576:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f000 fd42 	bl	8005002 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f000 f9bf 	bl	8004902 <I2C_ITSlaveSeqCplt>
 8004584:	e033      	b.n	80045ee <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2210      	movs	r2, #16
 800458c:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800458e:	e034      	b.n	80045fa <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2210      	movs	r2, #16
 8004596:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800459c:	f043 0204 	orr.w	r2, r3, #4
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045aa:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <I2C_Slave_ISR_DMA+0x14a>
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045b8:	d11f      	bne.n	80045fa <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80045ba:	7dfb      	ldrb	r3, [r7, #23]
 80045bc:	2b21      	cmp	r3, #33	; 0x21
 80045be:	d002      	beq.n	80045c6 <I2C_Slave_ISR_DMA+0x156>
 80045c0:	7dfb      	ldrb	r3, [r7, #23]
 80045c2:	2b29      	cmp	r3, #41	; 0x29
 80045c4:	d103      	bne.n	80045ce <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2221      	movs	r2, #33	; 0x21
 80045ca:	631a      	str	r2, [r3, #48]	; 0x30
 80045cc:	e008      	b.n	80045e0 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80045ce:	7dfb      	ldrb	r3, [r7, #23]
 80045d0:	2b22      	cmp	r3, #34	; 0x22
 80045d2:	d002      	beq.n	80045da <I2C_Slave_ISR_DMA+0x16a>
 80045d4:	7dfb      	ldrb	r3, [r7, #23]
 80045d6:	2b2a      	cmp	r3, #42	; 0x2a
 80045d8:	d102      	bne.n	80045e0 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2222      	movs	r2, #34	; 0x22
 80045de:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e4:	4619      	mov	r1, r3
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f000 fc14 	bl	8004e14 <I2C_ITError>
      if (treatdmanack == 1U)
 80045ec:	e005      	b.n	80045fa <I2C_Slave_ISR_DMA+0x18a>
 80045ee:	e004      	b.n	80045fa <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2210      	movs	r2, #16
 80045f6:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80045f8:	e011      	b.n	800461e <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 80045fa:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80045fc:	e00f      	b.n	800461e <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	08db      	lsrs	r3, r3, #3
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	d009      	beq.n	800461e <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	08db      	lsrs	r3, r3, #3
 800460e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004612:	2b00      	cmp	r3, #0
 8004614:	d003      	beq.n	800461e <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8004616:	68b9      	ldr	r1, [r7, #8]
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f000 f8b1 	bl	8004780 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	3720      	adds	r7, #32
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b086      	sub	sp, #24
 8004634:	af02      	add	r7, sp, #8
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	4608      	mov	r0, r1
 800463a:	4611      	mov	r1, r2
 800463c:	461a      	mov	r2, r3
 800463e:	4603      	mov	r3, r0
 8004640:	817b      	strh	r3, [r7, #10]
 8004642:	460b      	mov	r3, r1
 8004644:	813b      	strh	r3, [r7, #8]
 8004646:	4613      	mov	r3, r2
 8004648:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800464a:	88fb      	ldrh	r3, [r7, #6]
 800464c:	b2da      	uxtb	r2, r3
 800464e:	8979      	ldrh	r1, [r7, #10]
 8004650:	4b20      	ldr	r3, [pc, #128]	; (80046d4 <I2C_RequestMemoryWrite+0xa4>)
 8004652:	9300      	str	r3, [sp, #0]
 8004654:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f000 ff1f 	bl	800549c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800465e:	69fa      	ldr	r2, [r7, #28]
 8004660:	69b9      	ldr	r1, [r7, #24]
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f000 fdb1 	bl	80051ca <I2C_WaitOnTXISFlagUntilTimeout>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e02c      	b.n	80046cc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004672:	88fb      	ldrh	r3, [r7, #6]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d105      	bne.n	8004684 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004678:	893b      	ldrh	r3, [r7, #8]
 800467a:	b2da      	uxtb	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	629a      	str	r2, [r3, #40]	; 0x28
 8004682:	e015      	b.n	80046b0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004684:	893b      	ldrh	r3, [r7, #8]
 8004686:	0a1b      	lsrs	r3, r3, #8
 8004688:	b29b      	uxth	r3, r3
 800468a:	b2da      	uxtb	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004692:	69fa      	ldr	r2, [r7, #28]
 8004694:	69b9      	ldr	r1, [r7, #24]
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f000 fd97 	bl	80051ca <I2C_WaitOnTXISFlagUntilTimeout>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e012      	b.n	80046cc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80046a6:	893b      	ldrh	r3, [r7, #8]
 80046a8:	b2da      	uxtb	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	9300      	str	r3, [sp, #0]
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	2200      	movs	r2, #0
 80046b8:	2180      	movs	r1, #128	; 0x80
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f000 fd45 	bl	800514a <I2C_WaitOnFlagUntilTimeout>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d001      	beq.n	80046ca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e000      	b.n	80046cc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	80002000 	.word	0x80002000

080046d8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b086      	sub	sp, #24
 80046dc:	af02      	add	r7, sp, #8
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	4608      	mov	r0, r1
 80046e2:	4611      	mov	r1, r2
 80046e4:	461a      	mov	r2, r3
 80046e6:	4603      	mov	r3, r0
 80046e8:	817b      	strh	r3, [r7, #10]
 80046ea:	460b      	mov	r3, r1
 80046ec:	813b      	strh	r3, [r7, #8]
 80046ee:	4613      	mov	r3, r2
 80046f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80046f2:	88fb      	ldrh	r3, [r7, #6]
 80046f4:	b2da      	uxtb	r2, r3
 80046f6:	8979      	ldrh	r1, [r7, #10]
 80046f8:	4b20      	ldr	r3, [pc, #128]	; (800477c <I2C_RequestMemoryRead+0xa4>)
 80046fa:	9300      	str	r3, [sp, #0]
 80046fc:	2300      	movs	r3, #0
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	f000 fecc 	bl	800549c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004704:	69fa      	ldr	r2, [r7, #28]
 8004706:	69b9      	ldr	r1, [r7, #24]
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f000 fd5e 	bl	80051ca <I2C_WaitOnTXISFlagUntilTimeout>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d001      	beq.n	8004718 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e02c      	b.n	8004772 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004718:	88fb      	ldrh	r3, [r7, #6]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d105      	bne.n	800472a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800471e:	893b      	ldrh	r3, [r7, #8]
 8004720:	b2da      	uxtb	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	629a      	str	r2, [r3, #40]	; 0x28
 8004728:	e015      	b.n	8004756 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800472a:	893b      	ldrh	r3, [r7, #8]
 800472c:	0a1b      	lsrs	r3, r3, #8
 800472e:	b29b      	uxth	r3, r3
 8004730:	b2da      	uxtb	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004738:	69fa      	ldr	r2, [r7, #28]
 800473a:	69b9      	ldr	r1, [r7, #24]
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 fd44 	bl	80051ca <I2C_WaitOnTXISFlagUntilTimeout>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e012      	b.n	8004772 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800474c:	893b      	ldrh	r3, [r7, #8]
 800474e:	b2da      	uxtb	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	9300      	str	r3, [sp, #0]
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	2200      	movs	r2, #0
 800475e:	2140      	movs	r1, #64	; 0x40
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f000 fcf2 	bl	800514a <I2C_WaitOnFlagUntilTimeout>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d001      	beq.n	8004770 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e000      	b.n	8004772 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	80002000 	.word	0x80002000

08004780 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004790:	b2db      	uxtb	r3, r3
 8004792:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004796:	2b28      	cmp	r3, #40	; 0x28
 8004798:	d16a      	bne.n	8004870 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	0c1b      	lsrs	r3, r3, #16
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	0c1b      	lsrs	r3, r3, #16
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80047b8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047c6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80047d4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d138      	bne.n	8004850 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80047de:	897b      	ldrh	r3, [r7, #10]
 80047e0:	09db      	lsrs	r3, r3, #7
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	89bb      	ldrh	r3, [r7, #12]
 80047e6:	4053      	eors	r3, r2
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	f003 0306 	and.w	r3, r3, #6
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d11c      	bne.n	800482c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80047f2:	897b      	ldrh	r3, [r7, #10]
 80047f4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047fa:	1c5a      	adds	r2, r3, #1
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004804:	2b02      	cmp	r3, #2
 8004806:	d13b      	bne.n	8004880 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2208      	movs	r2, #8
 8004814:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800481e:	89ba      	ldrh	r2, [r7, #12]
 8004820:	7bfb      	ldrb	r3, [r7, #15]
 8004822:	4619      	mov	r1, r3
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f7ff f9b2 	bl	8003b8e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800482a:	e029      	b.n	8004880 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800482c:	893b      	ldrh	r3, [r7, #8]
 800482e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004830:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 fecd 	bl	80055d4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004842:	89ba      	ldrh	r2, [r7, #12]
 8004844:	7bfb      	ldrb	r3, [r7, #15]
 8004846:	4619      	mov	r1, r3
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f7ff f9a0 	bl	8003b8e <HAL_I2C_AddrCallback>
}
 800484e:	e017      	b.n	8004880 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004850:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 febd 	bl	80055d4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004862:	89ba      	ldrh	r2, [r7, #12]
 8004864:	7bfb      	ldrb	r3, [r7, #15]
 8004866:	4619      	mov	r1, r3
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f7ff f990 	bl	8003b8e <HAL_I2C_AddrCallback>
}
 800486e:	e007      	b.n	8004880 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2208      	movs	r2, #8
 8004876:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004880:	bf00      	nop
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	2b21      	cmp	r3, #33	; 0x21
 80048a2:	d115      	bne.n	80048d0 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2220      	movs	r2, #32
 80048a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2211      	movs	r2, #17
 80048b0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80048b8:	2101      	movs	r1, #1
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 fe8a 	bl	80055d4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f7ff f938 	bl	8003b3e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80048ce:	e014      	b.n	80048fa <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2220      	movs	r2, #32
 80048d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2212      	movs	r2, #18
 80048dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80048e4:	2102      	movs	r1, #2
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 fe74 	bl	80055d4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f7ff f92c 	bl	8003b52 <HAL_I2C_MasterRxCpltCallback>
}
 80048fa:	bf00      	nop
 80048fc:	3708      	adds	r7, #8
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b084      	sub	sp, #16
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	0b9b      	lsrs	r3, r3, #14
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b00      	cmp	r3, #0
 8004924:	d008      	beq.n	8004938 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	e00d      	b.n	8004954 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	0bdb      	lsrs	r3, r3, #15
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	2b00      	cmp	r3, #0
 8004942:	d007      	beq.n	8004954 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004952:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2b29      	cmp	r3, #41	; 0x29
 800495e:	d112      	bne.n	8004986 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2228      	movs	r2, #40	; 0x28
 8004964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2221      	movs	r2, #33	; 0x21
 800496c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800496e:	2101      	movs	r1, #1
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 fe2f 	bl	80055d4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7ff f8f1 	bl	8003b66 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004984:	e017      	b.n	80049b6 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b2a      	cmp	r3, #42	; 0x2a
 8004990:	d111      	bne.n	80049b6 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2228      	movs	r2, #40	; 0x28
 8004996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2222      	movs	r2, #34	; 0x22
 800499e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80049a0:	2102      	movs	r1, #2
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 fe16 	bl	80055d4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f7ff f8e2 	bl	8003b7a <HAL_I2C_SlaveRxCpltCallback>
}
 80049b6:	bf00      	nop
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
	...

080049c0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2220      	movs	r2, #32
 80049d4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b21      	cmp	r3, #33	; 0x21
 80049e0:	d107      	bne.n	80049f2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80049e2:	2101      	movs	r1, #1
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 fdf5 	bl	80055d4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2211      	movs	r2, #17
 80049ee:	631a      	str	r2, [r3, #48]	; 0x30
 80049f0:	e00c      	b.n	8004a0c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b22      	cmp	r3, #34	; 0x22
 80049fc:	d106      	bne.n	8004a0c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80049fe:	2102      	movs	r1, #2
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 fde7 	bl	80055d4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2212      	movs	r2, #18
 8004a0a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	6859      	ldr	r1, [r3, #4]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	4b4d      	ldr	r3, [pc, #308]	; (8004b4c <I2C_ITMasterCplt+0x18c>)
 8004a18:	400b      	ands	r3, r1
 8004a1a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a4a      	ldr	r2, [pc, #296]	; (8004b50 <I2C_ITMasterCplt+0x190>)
 8004a26:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	091b      	lsrs	r3, r3, #4
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d009      	beq.n	8004a48 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2210      	movs	r2, #16
 8004a3a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a40:	f043 0204 	orr.w	r2, r3, #4
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	2b60      	cmp	r3, #96	; 0x60
 8004a52:	d10b      	bne.n	8004a6c <I2C_ITMasterCplt+0xac>
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	089b      	lsrs	r3, r3, #2
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d005      	beq.n	8004a6c <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 fac8 	bl	8005002 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a76:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b60      	cmp	r3, #96	; 0x60
 8004a82:	d002      	beq.n	8004a8a <I2C_ITMasterCplt+0xca>
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d006      	beq.n	8004a98 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a8e:	4619      	mov	r1, r3
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 f9bf 	bl	8004e14 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004a96:	e054      	b.n	8004b42 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	2b21      	cmp	r3, #33	; 0x21
 8004aa2:	d124      	bne.n	8004aee <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2220      	movs	r2, #32
 8004aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b40      	cmp	r3, #64	; 0x40
 8004abc:	d10b      	bne.n	8004ad6 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f7fc ffac 	bl	8001a2c <HAL_I2C_MemTxCpltCallback>
}
 8004ad4:	e035      	b.n	8004b42 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7ff f829 	bl	8003b3e <HAL_I2C_MasterTxCpltCallback>
}
 8004aec:	e029      	b.n	8004b42 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b22      	cmp	r3, #34	; 0x22
 8004af8:	d123      	bne.n	8004b42 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2220      	movs	r2, #32
 8004afe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b40      	cmp	r3, #64	; 0x40
 8004b12:	d10b      	bne.n	8004b2c <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f7fc ff47 	bl	80019b8 <HAL_I2C_MemRxCpltCallback>
}
 8004b2a:	e00a      	b.n	8004b42 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f7ff f808 	bl	8003b52 <HAL_I2C_MasterRxCpltCallback>
}
 8004b42:	bf00      	nop
 8004b44:	3718      	adds	r7, #24
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	fe00e800 	.word	0xfe00e800
 8004b50:	ffff0000 	.word	0xffff0000

08004b54 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b70:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2220      	movs	r2, #32
 8004b78:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004b7a:	7bfb      	ldrb	r3, [r7, #15]
 8004b7c:	2b21      	cmp	r3, #33	; 0x21
 8004b7e:	d002      	beq.n	8004b86 <I2C_ITSlaveCplt+0x32>
 8004b80:	7bfb      	ldrb	r3, [r7, #15]
 8004b82:	2b29      	cmp	r3, #41	; 0x29
 8004b84:	d108      	bne.n	8004b98 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004b86:	f248 0101 	movw	r1, #32769	; 0x8001
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 fd22 	bl	80055d4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2221      	movs	r2, #33	; 0x21
 8004b94:	631a      	str	r2, [r3, #48]	; 0x30
 8004b96:	e00d      	b.n	8004bb4 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004b98:	7bfb      	ldrb	r3, [r7, #15]
 8004b9a:	2b22      	cmp	r3, #34	; 0x22
 8004b9c:	d002      	beq.n	8004ba4 <I2C_ITSlaveCplt+0x50>
 8004b9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ba0:	2b2a      	cmp	r3, #42	; 0x2a
 8004ba2:	d107      	bne.n	8004bb4 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004ba4:	f248 0102 	movw	r1, #32770	; 0x8002
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 fd13 	bl	80055d4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2222      	movs	r2, #34	; 0x22
 8004bb2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685a      	ldr	r2, [r3, #4]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bc2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6859      	ldr	r1, [r3, #4]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	4b64      	ldr	r3, [pc, #400]	; (8004d60 <I2C_ITSlaveCplt+0x20c>)
 8004bd0:	400b      	ands	r3, r1
 8004bd2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 fa14 	bl	8005002 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	0b9b      	lsrs	r3, r3, #14
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d013      	beq.n	8004c0e <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004bf4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d020      	beq.n	8004c40 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c0c:	e018      	b.n	8004c40 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	0bdb      	lsrs	r3, r3, #15
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d012      	beq.n	8004c40 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c28:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d006      	beq.n	8004c40 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	089b      	lsrs	r3, r3, #2
 8004c44:	f003 0301 	and.w	r3, r3, #1
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d020      	beq.n	8004c8e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	f023 0304 	bic.w	r3, r3, #4
 8004c52:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	b2d2      	uxtb	r2, r2
 8004c60:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c66:	1c5a      	adds	r2, r3, #1
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00c      	beq.n	8004c8e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	3b01      	subs	r3, #1
 8004c88:	b29a      	uxth	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d005      	beq.n	8004ca4 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c9c:	f043 0204 	orr.w	r2, r3, #4
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d010      	beq.n	8004cdc <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 f8a7 	bl	8004e14 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b28      	cmp	r3, #40	; 0x28
 8004cd0:	d141      	bne.n	8004d56 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004cd2:	6979      	ldr	r1, [r7, #20]
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 f847 	bl	8004d68 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004cda:	e03c      	b.n	8004d56 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ce4:	d014      	beq.n	8004d10 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f7ff fe0b 	bl	8004902 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a1d      	ldr	r2, [pc, #116]	; (8004d64 <I2C_ITSlaveCplt+0x210>)
 8004cf0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2220      	movs	r2, #32
 8004cf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f7fe ff4e 	bl	8003baa <HAL_I2C_ListenCpltCallback>
}
 8004d0e:	e022      	b.n	8004d56 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	2b22      	cmp	r3, #34	; 0x22
 8004d1a:	d10e      	bne.n	8004d3a <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2220      	movs	r2, #32
 8004d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7fe ff21 	bl	8003b7a <HAL_I2C_SlaveRxCpltCallback>
}
 8004d38:	e00d      	b.n	8004d56 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2220      	movs	r2, #32
 8004d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f7fe ff08 	bl	8003b66 <HAL_I2C_SlaveTxCpltCallback>
}
 8004d56:	bf00      	nop
 8004d58:	3718      	adds	r7, #24
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	fe00e800 	.word	0xfe00e800
 8004d64:	ffff0000 	.word	0xffff0000

08004d68 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a26      	ldr	r2, [pc, #152]	; (8004e10 <I2C_ITListenCplt+0xa8>)
 8004d76:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2220      	movs	r2, #32
 8004d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	089b      	lsrs	r3, r3, #2
 8004d98:	f003 0301 	and.w	r3, r3, #1
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d022      	beq.n	8004de6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004daa:	b2d2      	uxtb	r2, r2
 8004dac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db2:	1c5a      	adds	r2, r3, #1
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d012      	beq.n	8004de6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dde:	f043 0204 	orr.w	r2, r3, #4
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004de6:	f248 0103 	movw	r1, #32771	; 0x8003
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 fbf2 	bl	80055d4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2210      	movs	r2, #16
 8004df6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f7fe fed2 	bl	8003baa <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004e06:	bf00      	nop
 8004e08:	3708      	adds	r7, #8
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	ffff0000 	.word	0xffff0000

08004e14 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a5d      	ldr	r2, [pc, #372]	; (8004fa8 <I2C_ITError+0x194>)
 8004e32:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	431a      	orrs	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004e46:	7bfb      	ldrb	r3, [r7, #15]
 8004e48:	2b28      	cmp	r3, #40	; 0x28
 8004e4a:	d005      	beq.n	8004e58 <I2C_ITError+0x44>
 8004e4c:	7bfb      	ldrb	r3, [r7, #15]
 8004e4e:	2b29      	cmp	r3, #41	; 0x29
 8004e50:	d002      	beq.n	8004e58 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004e52:	7bfb      	ldrb	r3, [r7, #15]
 8004e54:	2b2a      	cmp	r3, #42	; 0x2a
 8004e56:	d10b      	bne.n	8004e70 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004e58:	2103      	movs	r1, #3
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 fbba 	bl	80055d4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2228      	movs	r2, #40	; 0x28
 8004e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a50      	ldr	r2, [pc, #320]	; (8004fac <I2C_ITError+0x198>)
 8004e6c:	635a      	str	r2, [r3, #52]	; 0x34
 8004e6e:	e011      	b.n	8004e94 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004e70:	f248 0103 	movw	r1, #32771	; 0x8003
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 fbad 	bl	80055d4 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	2b60      	cmp	r3, #96	; 0x60
 8004e84:	d003      	beq.n	8004e8e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2220      	movs	r2, #32
 8004e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e98:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d039      	beq.n	8004f16 <I2C_ITError+0x102>
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	2b11      	cmp	r3, #17
 8004ea6:	d002      	beq.n	8004eae <I2C_ITError+0x9a>
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	2b21      	cmp	r3, #33	; 0x21
 8004eac:	d133      	bne.n	8004f16 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ebc:	d107      	bne.n	8004ece <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ecc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7fd fe4a 	bl	8002b6c <HAL_DMA_GetState>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d017      	beq.n	8004f0e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee2:	4a33      	ldr	r2, [pc, #204]	; (8004fb0 <I2C_ITError+0x19c>)
 8004ee4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7fd fd4a 	bl	800298c <HAL_DMA_Abort_IT>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d04d      	beq.n	8004f9a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f08:	4610      	mov	r0, r2
 8004f0a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f0c:	e045      	b.n	8004f9a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f850 	bl	8004fb4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f14:	e041      	b.n	8004f9a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d039      	beq.n	8004f92 <I2C_ITError+0x17e>
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	2b12      	cmp	r3, #18
 8004f22:	d002      	beq.n	8004f2a <I2C_ITError+0x116>
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	2b22      	cmp	r3, #34	; 0x22
 8004f28:	d133      	bne.n	8004f92 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f38:	d107      	bne.n	8004f4a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f48:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7fd fe0c 	bl	8002b6c <HAL_DMA_GetState>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d017      	beq.n	8004f8a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f5e:	4a14      	ldr	r2, [pc, #80]	; (8004fb0 <I2C_ITError+0x19c>)
 8004f60:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7fd fd0c 	bl	800298c <HAL_DMA_Abort_IT>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d011      	beq.n	8004f9e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004f84:	4610      	mov	r0, r2
 8004f86:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f88:	e009      	b.n	8004f9e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 f812 	bl	8004fb4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f90:	e005      	b.n	8004f9e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 f80e 	bl	8004fb4 <I2C_TreatErrorCallback>
  }
}
 8004f98:	e002      	b.n	8004fa0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f9a:	bf00      	nop
 8004f9c:	e000      	b.n	8004fa0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f9e:	bf00      	nop
}
 8004fa0:	bf00      	nop
 8004fa2:	3710      	adds	r7, #16
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	ffff0000 	.word	0xffff0000
 8004fac:	08003e3d 	.word	0x08003e3d
 8004fb0:	0800510f 	.word	0x0800510f

08004fb4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	2b60      	cmp	r3, #96	; 0x60
 8004fc6:	d10e      	bne.n	8004fe6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2220      	movs	r2, #32
 8004fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f7fe fdf7 	bl	8003bd2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004fe4:	e009      	b.n	8004ffa <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f7fe fde2 	bl	8003bbe <HAL_I2C_ErrorCallback>
}
 8004ffa:	bf00      	nop
 8004ffc:	3708      	adds	r7, #8
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005002:	b480      	push	{r7}
 8005004:	b083      	sub	sp, #12
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	f003 0302 	and.w	r3, r3, #2
 8005014:	2b02      	cmp	r3, #2
 8005016:	d103      	bne.n	8005020 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2200      	movs	r2, #0
 800501e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	2b01      	cmp	r3, #1
 800502c:	d007      	beq.n	800503e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	699a      	ldr	r2, [r3, #24]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f042 0201 	orr.w	r2, r2, #1
 800503c:	619a      	str	r2, [r3, #24]
  }
}
 800503e:	bf00      	nop
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b084      	sub	sp, #16
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005056:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005066:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800506c:	b29b      	uxth	r3, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	d104      	bne.n	800507c <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005072:	2120      	movs	r1, #32
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f000 fa43 	bl	8005500 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800507a:	e02d      	b.n	80050d8 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8005084:	441a      	add	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800508e:	b29b      	uxth	r3, r3
 8005090:	2bff      	cmp	r3, #255	; 0xff
 8005092:	d903      	bls.n	800509c <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	22ff      	movs	r2, #255	; 0xff
 8005098:	851a      	strh	r2, [r3, #40]	; 0x28
 800509a:	e004      	b.n	80050a6 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a0:	b29a      	uxth	r2, r3
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	3324      	adds	r3, #36	; 0x24
 80050b0:	4619      	mov	r1, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b6:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80050bc:	f7fd fc06 	bl	80028cc <HAL_DMA_Start_IT>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d004      	beq.n	80050d0 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80050c6:	2110      	movs	r1, #16
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	f7ff fea3 	bl	8004e14 <I2C_ITError>
}
 80050ce:	e003      	b.n	80050d8 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80050d0:	2140      	movs	r1, #64	; 0x40
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f000 fa14 	bl	8005500 <I2C_Enable_IRQ>
}
 80050d8:	bf00      	nop
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ec:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	685a      	ldr	r2, [r3, #4]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050fc:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80050fe:	2110      	movs	r1, #16
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f7ff fe87 	bl	8004e14 <I2C_ITError>
}
 8005106:	bf00      	nop
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800510e:	b580      	push	{r7, lr}
 8005110:	b084      	sub	sp, #16
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800511a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005120:	2b00      	cmp	r3, #0
 8005122:	d003      	beq.n	800512c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005128:	2200      	movs	r2, #0
 800512a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005130:	2b00      	cmp	r3, #0
 8005132:	d003      	beq.n	800513c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005138:	2200      	movs	r2, #0
 800513a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f7ff ff39 	bl	8004fb4 <I2C_TreatErrorCallback>
}
 8005142:	bf00      	nop
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b084      	sub	sp, #16
 800514e:	af00      	add	r7, sp, #0
 8005150:	60f8      	str	r0, [r7, #12]
 8005152:	60b9      	str	r1, [r7, #8]
 8005154:	603b      	str	r3, [r7, #0]
 8005156:	4613      	mov	r3, r2
 8005158:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800515a:	e022      	b.n	80051a2 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005162:	d01e      	beq.n	80051a2 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005164:	f7fd f9dc 	bl	8002520 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	683a      	ldr	r2, [r7, #0]
 8005170:	429a      	cmp	r2, r3
 8005172:	d302      	bcc.n	800517a <I2C_WaitOnFlagUntilTimeout+0x30>
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d113      	bne.n	80051a2 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800517e:	f043 0220 	orr.w	r2, r3, #32
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2220      	movs	r2, #32
 800518a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e00f      	b.n	80051c2 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	699a      	ldr	r2, [r3, #24]
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	4013      	ands	r3, r2
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	bf0c      	ite	eq
 80051b2:	2301      	moveq	r3, #1
 80051b4:	2300      	movne	r3, #0
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	461a      	mov	r2, r3
 80051ba:	79fb      	ldrb	r3, [r7, #7]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d0cd      	beq.n	800515c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b084      	sub	sp, #16
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	60f8      	str	r0, [r7, #12]
 80051d2:	60b9      	str	r1, [r7, #8]
 80051d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80051d6:	e02c      	b.n	8005232 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	68b9      	ldr	r1, [r7, #8]
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f000 f871 	bl	80052c4 <I2C_IsErrorOccurred>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d001      	beq.n	80051ec <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e02a      	b.n	8005242 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f2:	d01e      	beq.n	8005232 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051f4:	f7fd f994 	bl	8002520 <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	68ba      	ldr	r2, [r7, #8]
 8005200:	429a      	cmp	r2, r3
 8005202:	d302      	bcc.n	800520a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d113      	bne.n	8005232 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800520e:	f043 0220 	orr.w	r2, r3, #32
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2220      	movs	r2, #32
 800521a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e007      	b.n	8005242 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	f003 0302 	and.w	r3, r3, #2
 800523c:	2b02      	cmp	r3, #2
 800523e:	d1cb      	bne.n	80051d8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800524a:	b580      	push	{r7, lr}
 800524c:	b084      	sub	sp, #16
 800524e:	af00      	add	r7, sp, #0
 8005250:	60f8      	str	r0, [r7, #12]
 8005252:	60b9      	str	r1, [r7, #8]
 8005254:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005256:	e028      	b.n	80052aa <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	68b9      	ldr	r1, [r7, #8]
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f000 f831 	bl	80052c4 <I2C_IsErrorOccurred>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d001      	beq.n	800526c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e026      	b.n	80052ba <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800526c:	f7fd f958 	bl	8002520 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	68ba      	ldr	r2, [r7, #8]
 8005278:	429a      	cmp	r2, r3
 800527a:	d302      	bcc.n	8005282 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d113      	bne.n	80052aa <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005286:	f043 0220 	orr.w	r2, r3, #32
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2220      	movs	r2, #32
 8005292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e007      	b.n	80052ba <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	f003 0320 	and.w	r3, r3, #32
 80052b4:	2b20      	cmp	r3, #32
 80052b6:	d1cf      	bne.n	8005258 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
	...

080052c4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b08a      	sub	sp, #40	; 0x28
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052d0:	2300      	movs	r3, #0
 80052d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80052de:	2300      	movs	r3, #0
 80052e0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	f003 0310 	and.w	r3, r3, #16
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d075      	beq.n	80053dc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2210      	movs	r2, #16
 80052f6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80052f8:	e056      	b.n	80053a8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005300:	d052      	beq.n	80053a8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005302:	f7fd f90d 	bl	8002520 <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	429a      	cmp	r2, r3
 8005310:	d302      	bcc.n	8005318 <I2C_IsErrorOccurred+0x54>
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d147      	bne.n	80053a8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005322:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800532a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005336:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800533a:	d12e      	bne.n	800539a <I2C_IsErrorOccurred+0xd6>
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005342:	d02a      	beq.n	800539a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005344:	7cfb      	ldrb	r3, [r7, #19]
 8005346:	2b20      	cmp	r3, #32
 8005348:	d027      	beq.n	800539a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005358:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800535a:	f7fd f8e1 	bl	8002520 <HAL_GetTick>
 800535e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005360:	e01b      	b.n	800539a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005362:	f7fd f8dd 	bl	8002520 <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	2b19      	cmp	r3, #25
 800536e:	d914      	bls.n	800539a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005374:	f043 0220 	orr.w	r2, r3, #32
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2220      	movs	r2, #32
 8005380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	f003 0320 	and.w	r3, r3, #32
 80053a4:	2b20      	cmp	r3, #32
 80053a6:	d1dc      	bne.n	8005362 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	f003 0320 	and.w	r3, r3, #32
 80053b2:	2b20      	cmp	r3, #32
 80053b4:	d003      	beq.n	80053be <I2C_IsErrorOccurred+0xfa>
 80053b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d09d      	beq.n	80052fa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80053be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d103      	bne.n	80053ce <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2220      	movs	r2, #32
 80053cc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80053ce:	6a3b      	ldr	r3, [r7, #32]
 80053d0:	f043 0304 	orr.w	r3, r3, #4
 80053d4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00b      	beq.n	8005406 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80053ee:	6a3b      	ldr	r3, [r7, #32]
 80053f0:	f043 0301 	orr.w	r3, r3, #1
 80053f4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00b      	beq.n	8005428 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005410:	6a3b      	ldr	r3, [r7, #32]
 8005412:	f043 0308 	orr.w	r3, r3, #8
 8005416:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005420:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00b      	beq.n	800544a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005432:	6a3b      	ldr	r3, [r7, #32]
 8005434:	f043 0302 	orr.w	r3, r3, #2
 8005438:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005442:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800544a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800544e:	2b00      	cmp	r3, #0
 8005450:	d01c      	beq.n	800548c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f7ff fdd5 	bl	8005002 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	6859      	ldr	r1, [r3, #4]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	4b0d      	ldr	r3, [pc, #52]	; (8005498 <I2C_IsErrorOccurred+0x1d4>)
 8005464:	400b      	ands	r3, r1
 8005466:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800546c:	6a3b      	ldr	r3, [r7, #32]
 800546e:	431a      	orrs	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2220      	movs	r2, #32
 8005478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800548c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005490:	4618      	mov	r0, r3
 8005492:	3728      	adds	r7, #40	; 0x28
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	fe00e800 	.word	0xfe00e800

0800549c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800549c:	b480      	push	{r7}
 800549e:	b087      	sub	sp, #28
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	607b      	str	r3, [r7, #4]
 80054a6:	460b      	mov	r3, r1
 80054a8:	817b      	strh	r3, [r7, #10]
 80054aa:	4613      	mov	r3, r2
 80054ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80054ae:	897b      	ldrh	r3, [r7, #10]
 80054b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80054b4:	7a7b      	ldrb	r3, [r7, #9]
 80054b6:	041b      	lsls	r3, r3, #16
 80054b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80054bc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80054c2:	6a3b      	ldr	r3, [r7, #32]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80054ca:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	685a      	ldr	r2, [r3, #4]
 80054d2:	6a3b      	ldr	r3, [r7, #32]
 80054d4:	0d5b      	lsrs	r3, r3, #21
 80054d6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80054da:	4b08      	ldr	r3, [pc, #32]	; (80054fc <I2C_TransferConfig+0x60>)
 80054dc:	430b      	orrs	r3, r1
 80054de:	43db      	mvns	r3, r3
 80054e0:	ea02 0103 	and.w	r1, r2, r3
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	697a      	ldr	r2, [r7, #20]
 80054ea:	430a      	orrs	r2, r1
 80054ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80054ee:	bf00      	nop
 80054f0:	371c      	adds	r7, #28
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	03ff63ff 	.word	0x03ff63ff

08005500 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	460b      	mov	r3, r1
 800550a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800550c:	2300      	movs	r3, #0
 800550e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005514:	4a2d      	ldr	r2, [pc, #180]	; (80055cc <I2C_Enable_IRQ+0xcc>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d004      	beq.n	8005524 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800551e:	4a2c      	ldr	r2, [pc, #176]	; (80055d0 <I2C_Enable_IRQ+0xd0>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d11d      	bne.n	8005560 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005524:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005528:	2b00      	cmp	r3, #0
 800552a:	da03      	bge.n	8005534 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005532:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005534:	887b      	ldrh	r3, [r7, #2]
 8005536:	2b10      	cmp	r3, #16
 8005538:	d103      	bne.n	8005542 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005540:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005542:	887b      	ldrh	r3, [r7, #2]
 8005544:	2b20      	cmp	r3, #32
 8005546:	d103      	bne.n	8005550 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800554e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005550:	887b      	ldrh	r3, [r7, #2]
 8005552:	2b40      	cmp	r3, #64	; 0x40
 8005554:	d12c      	bne.n	80055b0 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800555c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800555e:	e027      	b.n	80055b0 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005560:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005564:	2b00      	cmp	r3, #0
 8005566:	da03      	bge.n	8005570 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800556e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005570:	887b      	ldrh	r3, [r7, #2]
 8005572:	f003 0301 	and.w	r3, r3, #1
 8005576:	2b00      	cmp	r3, #0
 8005578:	d003      	beq.n	8005582 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8005580:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005582:	887b      	ldrh	r3, [r7, #2]
 8005584:	f003 0302 	and.w	r3, r3, #2
 8005588:	2b00      	cmp	r3, #0
 800558a:	d003      	beq.n	8005594 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8005592:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005594:	887b      	ldrh	r3, [r7, #2]
 8005596:	2b10      	cmp	r3, #16
 8005598:	d103      	bne.n	80055a2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80055a0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80055a2:	887b      	ldrh	r3, [r7, #2]
 80055a4:	2b20      	cmp	r3, #32
 80055a6:	d103      	bne.n	80055b0 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f043 0320 	orr.w	r3, r3, #32
 80055ae:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	6819      	ldr	r1, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	430a      	orrs	r2, r1
 80055be:	601a      	str	r2, [r3, #0]
}
 80055c0:	bf00      	nop
 80055c2:	3714      	adds	r7, #20
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr
 80055cc:	08004043 	.word	0x08004043
 80055d0:	08004471 	.word	0x08004471

080055d4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	460b      	mov	r3, r1
 80055de:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80055e0:	2300      	movs	r3, #0
 80055e2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80055e4:	887b      	ldrh	r3, [r7, #2]
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d00f      	beq.n	800560e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80055f4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005602:	2b28      	cmp	r3, #40	; 0x28
 8005604:	d003      	beq.n	800560e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800560c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800560e:	887b      	ldrh	r3, [r7, #2]
 8005610:	f003 0302 	and.w	r3, r3, #2
 8005614:	2b00      	cmp	r3, #0
 8005616:	d00f      	beq.n	8005638 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800561e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005626:	b2db      	uxtb	r3, r3
 8005628:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800562c:	2b28      	cmp	r3, #40	; 0x28
 800562e:	d003      	beq.n	8005638 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005636:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005638:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800563c:	2b00      	cmp	r3, #0
 800563e:	da03      	bge.n	8005648 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005646:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005648:	887b      	ldrh	r3, [r7, #2]
 800564a:	2b10      	cmp	r3, #16
 800564c:	d103      	bne.n	8005656 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005654:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005656:	887b      	ldrh	r3, [r7, #2]
 8005658:	2b20      	cmp	r3, #32
 800565a:	d103      	bne.n	8005664 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f043 0320 	orr.w	r3, r3, #32
 8005662:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005664:	887b      	ldrh	r3, [r7, #2]
 8005666:	2b40      	cmp	r3, #64	; 0x40
 8005668:	d103      	bne.n	8005672 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005670:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	6819      	ldr	r1, [r3, #0]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	43da      	mvns	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	400a      	ands	r2, r1
 8005682:	601a      	str	r2, [r3, #0]
}
 8005684:	bf00      	nop
 8005686:	3714      	adds	r7, #20
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	2b20      	cmp	r3, #32
 80056a4:	d138      	bne.n	8005718 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d101      	bne.n	80056b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80056b0:	2302      	movs	r3, #2
 80056b2:	e032      	b.n	800571a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2224      	movs	r2, #36	; 0x24
 80056c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f022 0201 	bic.w	r2, r2, #1
 80056d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80056e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6819      	ldr	r1, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	683a      	ldr	r2, [r7, #0]
 80056f0:	430a      	orrs	r2, r1
 80056f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f042 0201 	orr.w	r2, r2, #1
 8005702:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2220      	movs	r2, #32
 8005708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005714:	2300      	movs	r3, #0
 8005716:	e000      	b.n	800571a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005718:	2302      	movs	r3, #2
  }
}
 800571a:	4618      	mov	r0, r3
 800571c:	370c      	adds	r7, #12
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr

08005726 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005726:	b480      	push	{r7}
 8005728:	b085      	sub	sp, #20
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
 800572e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005736:	b2db      	uxtb	r3, r3
 8005738:	2b20      	cmp	r3, #32
 800573a:	d139      	bne.n	80057b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005742:	2b01      	cmp	r3, #1
 8005744:	d101      	bne.n	800574a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005746:	2302      	movs	r3, #2
 8005748:	e033      	b.n	80057b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2201      	movs	r2, #1
 800574e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2224      	movs	r2, #36	; 0x24
 8005756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f022 0201 	bic.w	r2, r2, #1
 8005768:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005778:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	021b      	lsls	r3, r3, #8
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	4313      	orrs	r3, r2
 8005782:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f042 0201 	orr.w	r2, r2, #1
 800579a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2220      	movs	r2, #32
 80057a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80057ac:	2300      	movs	r3, #0
 80057ae:	e000      	b.n	80057b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80057b0:	2302      	movs	r3, #2
  }
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3714      	adds	r7, #20
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
	...

080057c0 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b085      	sub	sp, #20
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057c8:	4b0b      	ldr	r3, [pc, #44]	; (80057f8 <HAL_I2CEx_EnableFastModePlus+0x38>)
 80057ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057cc:	4a0a      	ldr	r2, [pc, #40]	; (80057f8 <HAL_I2CEx_EnableFastModePlus+0x38>)
 80057ce:	f043 0301 	orr.w	r3, r3, #1
 80057d2:	6613      	str	r3, [r2, #96]	; 0x60
 80057d4:	4b08      	ldr	r3, [pc, #32]	; (80057f8 <HAL_I2CEx_EnableFastModePlus+0x38>)
 80057d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057d8:	f003 0301 	and.w	r3, r3, #1
 80057dc:	60fb      	str	r3, [r7, #12]
 80057de:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 80057e0:	4b06      	ldr	r3, [pc, #24]	; (80057fc <HAL_I2CEx_EnableFastModePlus+0x3c>)
 80057e2:	685a      	ldr	r2, [r3, #4]
 80057e4:	4905      	ldr	r1, [pc, #20]	; (80057fc <HAL_I2CEx_EnableFastModePlus+0x3c>)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	604b      	str	r3, [r1, #4]
}
 80057ec:	bf00      	nop
 80057ee:	3714      	adds	r7, #20
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr
 80057f8:	40021000 	.word	0x40021000
 80057fc:	40010000 	.word	0x40010000

08005800 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005800:	b480      	push	{r7}
 8005802:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005804:	4b04      	ldr	r3, [pc, #16]	; (8005818 <HAL_PWREx_GetVoltageRange+0x18>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800580c:	4618      	mov	r0, r3
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	40007000 	.word	0x40007000

0800581c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800582a:	d130      	bne.n	800588e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800582c:	4b23      	ldr	r3, [pc, #140]	; (80058bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005834:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005838:	d038      	beq.n	80058ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800583a:	4b20      	ldr	r3, [pc, #128]	; (80058bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005842:	4a1e      	ldr	r2, [pc, #120]	; (80058bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005844:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005848:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800584a:	4b1d      	ldr	r3, [pc, #116]	; (80058c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2232      	movs	r2, #50	; 0x32
 8005850:	fb02 f303 	mul.w	r3, r2, r3
 8005854:	4a1b      	ldr	r2, [pc, #108]	; (80058c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005856:	fba2 2303 	umull	r2, r3, r2, r3
 800585a:	0c9b      	lsrs	r3, r3, #18
 800585c:	3301      	adds	r3, #1
 800585e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005860:	e002      	b.n	8005868 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	3b01      	subs	r3, #1
 8005866:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005868:	4b14      	ldr	r3, [pc, #80]	; (80058bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005870:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005874:	d102      	bne.n	800587c <HAL_PWREx_ControlVoltageScaling+0x60>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1f2      	bne.n	8005862 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800587c:	4b0f      	ldr	r3, [pc, #60]	; (80058bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800587e:	695b      	ldr	r3, [r3, #20]
 8005880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005888:	d110      	bne.n	80058ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e00f      	b.n	80058ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800588e:	4b0b      	ldr	r3, [pc, #44]	; (80058bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800589a:	d007      	beq.n	80058ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800589c:	4b07      	ldr	r3, [pc, #28]	; (80058bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80058a4:	4a05      	ldr	r2, [pc, #20]	; (80058bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3714      	adds	r7, #20
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	40007000 	.word	0x40007000
 80058c0:	20000000 	.word	0x20000000
 80058c4:	431bde83 	.word	0x431bde83

080058c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b088      	sub	sp, #32
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e3ca      	b.n	8006070 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058da:	4b97      	ldr	r3, [pc, #604]	; (8005b38 <HAL_RCC_OscConfig+0x270>)
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f003 030c 	and.w	r3, r3, #12
 80058e2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058e4:	4b94      	ldr	r3, [pc, #592]	; (8005b38 <HAL_RCC_OscConfig+0x270>)
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	f003 0303 	and.w	r3, r3, #3
 80058ec:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0310 	and.w	r3, r3, #16
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f000 80e4 	beq.w	8005ac4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d007      	beq.n	8005912 <HAL_RCC_OscConfig+0x4a>
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	2b0c      	cmp	r3, #12
 8005906:	f040 808b 	bne.w	8005a20 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	2b01      	cmp	r3, #1
 800590e:	f040 8087 	bne.w	8005a20 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005912:	4b89      	ldr	r3, [pc, #548]	; (8005b38 <HAL_RCC_OscConfig+0x270>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0302 	and.w	r3, r3, #2
 800591a:	2b00      	cmp	r3, #0
 800591c:	d005      	beq.n	800592a <HAL_RCC_OscConfig+0x62>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	699b      	ldr	r3, [r3, #24]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d101      	bne.n	800592a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e3a2      	b.n	8006070 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1a      	ldr	r2, [r3, #32]
 800592e:	4b82      	ldr	r3, [pc, #520]	; (8005b38 <HAL_RCC_OscConfig+0x270>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0308 	and.w	r3, r3, #8
 8005936:	2b00      	cmp	r3, #0
 8005938:	d004      	beq.n	8005944 <HAL_RCC_OscConfig+0x7c>
 800593a:	4b7f      	ldr	r3, [pc, #508]	; (8005b38 <HAL_RCC_OscConfig+0x270>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005942:	e005      	b.n	8005950 <HAL_RCC_OscConfig+0x88>
 8005944:	4b7c      	ldr	r3, [pc, #496]	; (8005b38 <HAL_RCC_OscConfig+0x270>)
 8005946:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800594a:	091b      	lsrs	r3, r3, #4
 800594c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005950:	4293      	cmp	r3, r2
 8005952:	d223      	bcs.n	800599c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a1b      	ldr	r3, [r3, #32]
 8005958:	4618      	mov	r0, r3
 800595a:	f000 fd55 	bl	8006408 <RCC_SetFlashLatencyFromMSIRange>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d001      	beq.n	8005968 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e383      	b.n	8006070 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005968:	4b73      	ldr	r3, [pc, #460]	; (8005b38 <HAL_RCC_OscConfig+0x270>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a72      	ldr	r2, [pc, #456]	; (8005b38 <HAL_RCC_OscConfig+0x270>)
 800596e:	f043 0308 	orr.w	r3, r3, #8
 8005972:	6013      	str	r3, [r2, #0]
 8005974:	4b70      	ldr	r3, [pc, #448]	; (8005b38 <HAL_RCC_OscConfig+0x270>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a1b      	ldr	r3, [r3, #32]
 8005980:	496d      	ldr	r1, [pc, #436]	; (8005b38 <HAL_RCC_OscConfig+0x270>)
 8005982:	4313      	orrs	r3, r2
 8005984:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005986:	4b6c      	ldr	r3, [pc, #432]	; (8005b38 <HAL_RCC_OscConfig+0x270>)
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	69db      	ldr	r3, [r3, #28]
 8005992:	021b      	lsls	r3, r3, #8
 8005994:	4968      	ldr	r1, [pc, #416]	; (8005b38 <HAL_RCC_OscConfig+0x270>)
 8005996:	4313      	orrs	r3, r2
 8005998:	604b      	str	r3, [r1, #4]
 800599a:	e025      	b.n	80059e8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800599c:	4b66      	ldr	r3, [pc, #408]	; (8005b38 <HAL_RCC_OscConfig+0x270>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a65      	ldr	r2, [pc, #404]	; (8005b38 <HAL_RCC_OscConfig+0x270>)
 80059a2:	f043 0308 	orr.w	r3, r3, #8
 80059a6:	6013      	str	r3, [r2, #0]
 80059a8:	4b63      	ldr	r3, [pc, #396]	; (8005b38 <HAL_RCC_OscConfig+0x270>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a1b      	ldr	r3, [r3, #32]
 80059b4:	4960      	ldr	r1, [pc, #384]	; (8005b38 <HAL_RCC_OscConfig+0x270>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80059ba:	4b5f      	ldr	r3, [pc, #380]	; (8005b38 <HAL_RCC_OscConfig+0x270>)
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	69db      	ldr	r3, [r3, #28]
 80059c6:	021b      	lsls	r3, r3, #8
 80059c8:	495b      	ldr	r1, [pc, #364]	; (8005b38 <HAL_RCC_OscConfig+0x270>)
 80059ca:	4313      	orrs	r3, r2
 80059cc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d109      	bne.n	80059e8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a1b      	ldr	r3, [r3, #32]
 80059d8:	4618      	mov	r0, r3
 80059da:	f000 fd15 	bl	8006408 <RCC_SetFlashLatencyFromMSIRange>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d001      	beq.n	80059e8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e343      	b.n	8006070 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80059e8:	f000 fc4a 	bl	8006280 <HAL_RCC_GetSysClockFreq>
 80059ec:	4602      	mov	r2, r0
 80059ee:	4b52      	ldr	r3, [pc, #328]	; (8005b38 <HAL_RCC_OscConfig+0x270>)
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	091b      	lsrs	r3, r3, #4
 80059f4:	f003 030f 	and.w	r3, r3, #15
 80059f8:	4950      	ldr	r1, [pc, #320]	; (8005b3c <HAL_RCC_OscConfig+0x274>)
 80059fa:	5ccb      	ldrb	r3, [r1, r3]
 80059fc:	f003 031f 	and.w	r3, r3, #31
 8005a00:	fa22 f303 	lsr.w	r3, r2, r3
 8005a04:	4a4e      	ldr	r2, [pc, #312]	; (8005b40 <HAL_RCC_OscConfig+0x278>)
 8005a06:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005a08:	4b4e      	ldr	r3, [pc, #312]	; (8005b44 <HAL_RCC_OscConfig+0x27c>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f7fc fd37 	bl	8002480 <HAL_InitTick>
 8005a12:	4603      	mov	r3, r0
 8005a14:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005a16:	7bfb      	ldrb	r3, [r7, #15]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d052      	beq.n	8005ac2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005a1c:	7bfb      	ldrb	r3, [r7, #15]
 8005a1e:	e327      	b.n	8006070 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	699b      	ldr	r3, [r3, #24]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d032      	beq.n	8005a8e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005a28:	4b43      	ldr	r3, [pc, #268]	; (8005b38 <HAL_RCC_OscConfig+0x270>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a42      	ldr	r2, [pc, #264]	; (8005b38 <HAL_RCC_OscConfig+0x270>)
 8005a2e:	f043 0301 	orr.w	r3, r3, #1
 8005a32:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005a34:	f7fc fd74 	bl	8002520 <HAL_GetTick>
 8005a38:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a3a:	e008      	b.n	8005a4e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005a3c:	f7fc fd70 	bl	8002520 <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d901      	bls.n	8005a4e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e310      	b.n	8006070 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a4e:	4b3a      	ldr	r3, [pc, #232]	; (8005b38 <HAL_RCC_OscConfig+0x270>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0302 	and.w	r3, r3, #2
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d0f0      	beq.n	8005a3c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a5a:	4b37      	ldr	r3, [pc, #220]	; (8005b38 <HAL_RCC_OscConfig+0x270>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a36      	ldr	r2, [pc, #216]	; (8005b38 <HAL_RCC_OscConfig+0x270>)
 8005a60:	f043 0308 	orr.w	r3, r3, #8
 8005a64:	6013      	str	r3, [r2, #0]
 8005a66:	4b34      	ldr	r3, [pc, #208]	; (8005b38 <HAL_RCC_OscConfig+0x270>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	4931      	ldr	r1, [pc, #196]	; (8005b38 <HAL_RCC_OscConfig+0x270>)
 8005a74:	4313      	orrs	r3, r2
 8005a76:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a78:	4b2f      	ldr	r3, [pc, #188]	; (8005b38 <HAL_RCC_OscConfig+0x270>)
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	69db      	ldr	r3, [r3, #28]
 8005a84:	021b      	lsls	r3, r3, #8
 8005a86:	492c      	ldr	r1, [pc, #176]	; (8005b38 <HAL_RCC_OscConfig+0x270>)
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	604b      	str	r3, [r1, #4]
 8005a8c:	e01a      	b.n	8005ac4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005a8e:	4b2a      	ldr	r3, [pc, #168]	; (8005b38 <HAL_RCC_OscConfig+0x270>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a29      	ldr	r2, [pc, #164]	; (8005b38 <HAL_RCC_OscConfig+0x270>)
 8005a94:	f023 0301 	bic.w	r3, r3, #1
 8005a98:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005a9a:	f7fc fd41 	bl	8002520 <HAL_GetTick>
 8005a9e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005aa0:	e008      	b.n	8005ab4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005aa2:	f7fc fd3d 	bl	8002520 <HAL_GetTick>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d901      	bls.n	8005ab4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	e2dd      	b.n	8006070 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005ab4:	4b20      	ldr	r3, [pc, #128]	; (8005b38 <HAL_RCC_OscConfig+0x270>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0302 	and.w	r3, r3, #2
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d1f0      	bne.n	8005aa2 <HAL_RCC_OscConfig+0x1da>
 8005ac0:	e000      	b.n	8005ac4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005ac2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0301 	and.w	r3, r3, #1
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d074      	beq.n	8005bba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	2b08      	cmp	r3, #8
 8005ad4:	d005      	beq.n	8005ae2 <HAL_RCC_OscConfig+0x21a>
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	2b0c      	cmp	r3, #12
 8005ada:	d10e      	bne.n	8005afa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	2b03      	cmp	r3, #3
 8005ae0:	d10b      	bne.n	8005afa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ae2:	4b15      	ldr	r3, [pc, #84]	; (8005b38 <HAL_RCC_OscConfig+0x270>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d064      	beq.n	8005bb8 <HAL_RCC_OscConfig+0x2f0>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d160      	bne.n	8005bb8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e2ba      	b.n	8006070 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b02:	d106      	bne.n	8005b12 <HAL_RCC_OscConfig+0x24a>
 8005b04:	4b0c      	ldr	r3, [pc, #48]	; (8005b38 <HAL_RCC_OscConfig+0x270>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a0b      	ldr	r2, [pc, #44]	; (8005b38 <HAL_RCC_OscConfig+0x270>)
 8005b0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b0e:	6013      	str	r3, [r2, #0]
 8005b10:	e026      	b.n	8005b60 <HAL_RCC_OscConfig+0x298>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b1a:	d115      	bne.n	8005b48 <HAL_RCC_OscConfig+0x280>
 8005b1c:	4b06      	ldr	r3, [pc, #24]	; (8005b38 <HAL_RCC_OscConfig+0x270>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a05      	ldr	r2, [pc, #20]	; (8005b38 <HAL_RCC_OscConfig+0x270>)
 8005b22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b26:	6013      	str	r3, [r2, #0]
 8005b28:	4b03      	ldr	r3, [pc, #12]	; (8005b38 <HAL_RCC_OscConfig+0x270>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a02      	ldr	r2, [pc, #8]	; (8005b38 <HAL_RCC_OscConfig+0x270>)
 8005b2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b32:	6013      	str	r3, [r2, #0]
 8005b34:	e014      	b.n	8005b60 <HAL_RCC_OscConfig+0x298>
 8005b36:	bf00      	nop
 8005b38:	40021000 	.word	0x40021000
 8005b3c:	0800b130 	.word	0x0800b130
 8005b40:	20000000 	.word	0x20000000
 8005b44:	20000004 	.word	0x20000004
 8005b48:	4ba0      	ldr	r3, [pc, #640]	; (8005dcc <HAL_RCC_OscConfig+0x504>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a9f      	ldr	r2, [pc, #636]	; (8005dcc <HAL_RCC_OscConfig+0x504>)
 8005b4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b52:	6013      	str	r3, [r2, #0]
 8005b54:	4b9d      	ldr	r3, [pc, #628]	; (8005dcc <HAL_RCC_OscConfig+0x504>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a9c      	ldr	r2, [pc, #624]	; (8005dcc <HAL_RCC_OscConfig+0x504>)
 8005b5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d013      	beq.n	8005b90 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b68:	f7fc fcda 	bl	8002520 <HAL_GetTick>
 8005b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b6e:	e008      	b.n	8005b82 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b70:	f7fc fcd6 	bl	8002520 <HAL_GetTick>
 8005b74:	4602      	mov	r2, r0
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	2b64      	cmp	r3, #100	; 0x64
 8005b7c:	d901      	bls.n	8005b82 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e276      	b.n	8006070 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b82:	4b92      	ldr	r3, [pc, #584]	; (8005dcc <HAL_RCC_OscConfig+0x504>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d0f0      	beq.n	8005b70 <HAL_RCC_OscConfig+0x2a8>
 8005b8e:	e014      	b.n	8005bba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b90:	f7fc fcc6 	bl	8002520 <HAL_GetTick>
 8005b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b96:	e008      	b.n	8005baa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b98:	f7fc fcc2 	bl	8002520 <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	2b64      	cmp	r3, #100	; 0x64
 8005ba4:	d901      	bls.n	8005baa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e262      	b.n	8006070 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005baa:	4b88      	ldr	r3, [pc, #544]	; (8005dcc <HAL_RCC_OscConfig+0x504>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d1f0      	bne.n	8005b98 <HAL_RCC_OscConfig+0x2d0>
 8005bb6:	e000      	b.n	8005bba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0302 	and.w	r3, r3, #2
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d060      	beq.n	8005c88 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	2b04      	cmp	r3, #4
 8005bca:	d005      	beq.n	8005bd8 <HAL_RCC_OscConfig+0x310>
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	2b0c      	cmp	r3, #12
 8005bd0:	d119      	bne.n	8005c06 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d116      	bne.n	8005c06 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005bd8:	4b7c      	ldr	r3, [pc, #496]	; (8005dcc <HAL_RCC_OscConfig+0x504>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d005      	beq.n	8005bf0 <HAL_RCC_OscConfig+0x328>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d101      	bne.n	8005bf0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e23f      	b.n	8006070 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bf0:	4b76      	ldr	r3, [pc, #472]	; (8005dcc <HAL_RCC_OscConfig+0x504>)
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	061b      	lsls	r3, r3, #24
 8005bfe:	4973      	ldr	r1, [pc, #460]	; (8005dcc <HAL_RCC_OscConfig+0x504>)
 8005c00:	4313      	orrs	r3, r2
 8005c02:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c04:	e040      	b.n	8005c88 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d023      	beq.n	8005c56 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c0e:	4b6f      	ldr	r3, [pc, #444]	; (8005dcc <HAL_RCC_OscConfig+0x504>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a6e      	ldr	r2, [pc, #440]	; (8005dcc <HAL_RCC_OscConfig+0x504>)
 8005c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c1a:	f7fc fc81 	bl	8002520 <HAL_GetTick>
 8005c1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c20:	e008      	b.n	8005c34 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c22:	f7fc fc7d 	bl	8002520 <HAL_GetTick>
 8005c26:	4602      	mov	r2, r0
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d901      	bls.n	8005c34 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005c30:	2303      	movs	r3, #3
 8005c32:	e21d      	b.n	8006070 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c34:	4b65      	ldr	r3, [pc, #404]	; (8005dcc <HAL_RCC_OscConfig+0x504>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d0f0      	beq.n	8005c22 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c40:	4b62      	ldr	r3, [pc, #392]	; (8005dcc <HAL_RCC_OscConfig+0x504>)
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	061b      	lsls	r3, r3, #24
 8005c4e:	495f      	ldr	r1, [pc, #380]	; (8005dcc <HAL_RCC_OscConfig+0x504>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	604b      	str	r3, [r1, #4]
 8005c54:	e018      	b.n	8005c88 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c56:	4b5d      	ldr	r3, [pc, #372]	; (8005dcc <HAL_RCC_OscConfig+0x504>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a5c      	ldr	r2, [pc, #368]	; (8005dcc <HAL_RCC_OscConfig+0x504>)
 8005c5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c62:	f7fc fc5d 	bl	8002520 <HAL_GetTick>
 8005c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c68:	e008      	b.n	8005c7c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c6a:	f7fc fc59 	bl	8002520 <HAL_GetTick>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d901      	bls.n	8005c7c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	e1f9      	b.n	8006070 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c7c:	4b53      	ldr	r3, [pc, #332]	; (8005dcc <HAL_RCC_OscConfig+0x504>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1f0      	bne.n	8005c6a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0308 	and.w	r3, r3, #8
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d03c      	beq.n	8005d0e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	695b      	ldr	r3, [r3, #20]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d01c      	beq.n	8005cd6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c9c:	4b4b      	ldr	r3, [pc, #300]	; (8005dcc <HAL_RCC_OscConfig+0x504>)
 8005c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ca2:	4a4a      	ldr	r2, [pc, #296]	; (8005dcc <HAL_RCC_OscConfig+0x504>)
 8005ca4:	f043 0301 	orr.w	r3, r3, #1
 8005ca8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cac:	f7fc fc38 	bl	8002520 <HAL_GetTick>
 8005cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005cb2:	e008      	b.n	8005cc6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cb4:	f7fc fc34 	bl	8002520 <HAL_GetTick>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d901      	bls.n	8005cc6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e1d4      	b.n	8006070 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005cc6:	4b41      	ldr	r3, [pc, #260]	; (8005dcc <HAL_RCC_OscConfig+0x504>)
 8005cc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ccc:	f003 0302 	and.w	r3, r3, #2
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d0ef      	beq.n	8005cb4 <HAL_RCC_OscConfig+0x3ec>
 8005cd4:	e01b      	b.n	8005d0e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cd6:	4b3d      	ldr	r3, [pc, #244]	; (8005dcc <HAL_RCC_OscConfig+0x504>)
 8005cd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cdc:	4a3b      	ldr	r2, [pc, #236]	; (8005dcc <HAL_RCC_OscConfig+0x504>)
 8005cde:	f023 0301 	bic.w	r3, r3, #1
 8005ce2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ce6:	f7fc fc1b 	bl	8002520 <HAL_GetTick>
 8005cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005cec:	e008      	b.n	8005d00 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cee:	f7fc fc17 	bl	8002520 <HAL_GetTick>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d901      	bls.n	8005d00 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	e1b7      	b.n	8006070 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d00:	4b32      	ldr	r3, [pc, #200]	; (8005dcc <HAL_RCC_OscConfig+0x504>)
 8005d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d06:	f003 0302 	and.w	r3, r3, #2
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d1ef      	bne.n	8005cee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0304 	and.w	r3, r3, #4
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	f000 80a6 	beq.w	8005e68 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005d20:	4b2a      	ldr	r3, [pc, #168]	; (8005dcc <HAL_RCC_OscConfig+0x504>)
 8005d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d10d      	bne.n	8005d48 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d2c:	4b27      	ldr	r3, [pc, #156]	; (8005dcc <HAL_RCC_OscConfig+0x504>)
 8005d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d30:	4a26      	ldr	r2, [pc, #152]	; (8005dcc <HAL_RCC_OscConfig+0x504>)
 8005d32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d36:	6593      	str	r3, [r2, #88]	; 0x58
 8005d38:	4b24      	ldr	r3, [pc, #144]	; (8005dcc <HAL_RCC_OscConfig+0x504>)
 8005d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d40:	60bb      	str	r3, [r7, #8]
 8005d42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d44:	2301      	movs	r3, #1
 8005d46:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d48:	4b21      	ldr	r3, [pc, #132]	; (8005dd0 <HAL_RCC_OscConfig+0x508>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d118      	bne.n	8005d86 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d54:	4b1e      	ldr	r3, [pc, #120]	; (8005dd0 <HAL_RCC_OscConfig+0x508>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a1d      	ldr	r2, [pc, #116]	; (8005dd0 <HAL_RCC_OscConfig+0x508>)
 8005d5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d5e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d60:	f7fc fbde 	bl	8002520 <HAL_GetTick>
 8005d64:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d66:	e008      	b.n	8005d7a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d68:	f7fc fbda 	bl	8002520 <HAL_GetTick>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d901      	bls.n	8005d7a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e17a      	b.n	8006070 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d7a:	4b15      	ldr	r3, [pc, #84]	; (8005dd0 <HAL_RCC_OscConfig+0x508>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d0f0      	beq.n	8005d68 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d108      	bne.n	8005da0 <HAL_RCC_OscConfig+0x4d8>
 8005d8e:	4b0f      	ldr	r3, [pc, #60]	; (8005dcc <HAL_RCC_OscConfig+0x504>)
 8005d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d94:	4a0d      	ldr	r2, [pc, #52]	; (8005dcc <HAL_RCC_OscConfig+0x504>)
 8005d96:	f043 0301 	orr.w	r3, r3, #1
 8005d9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d9e:	e029      	b.n	8005df4 <HAL_RCC_OscConfig+0x52c>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	2b05      	cmp	r3, #5
 8005da6:	d115      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x50c>
 8005da8:	4b08      	ldr	r3, [pc, #32]	; (8005dcc <HAL_RCC_OscConfig+0x504>)
 8005daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dae:	4a07      	ldr	r2, [pc, #28]	; (8005dcc <HAL_RCC_OscConfig+0x504>)
 8005db0:	f043 0304 	orr.w	r3, r3, #4
 8005db4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005db8:	4b04      	ldr	r3, [pc, #16]	; (8005dcc <HAL_RCC_OscConfig+0x504>)
 8005dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dbe:	4a03      	ldr	r2, [pc, #12]	; (8005dcc <HAL_RCC_OscConfig+0x504>)
 8005dc0:	f043 0301 	orr.w	r3, r3, #1
 8005dc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005dc8:	e014      	b.n	8005df4 <HAL_RCC_OscConfig+0x52c>
 8005dca:	bf00      	nop
 8005dcc:	40021000 	.word	0x40021000
 8005dd0:	40007000 	.word	0x40007000
 8005dd4:	4b9c      	ldr	r3, [pc, #624]	; (8006048 <HAL_RCC_OscConfig+0x780>)
 8005dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dda:	4a9b      	ldr	r2, [pc, #620]	; (8006048 <HAL_RCC_OscConfig+0x780>)
 8005ddc:	f023 0301 	bic.w	r3, r3, #1
 8005de0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005de4:	4b98      	ldr	r3, [pc, #608]	; (8006048 <HAL_RCC_OscConfig+0x780>)
 8005de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dea:	4a97      	ldr	r2, [pc, #604]	; (8006048 <HAL_RCC_OscConfig+0x780>)
 8005dec:	f023 0304 	bic.w	r3, r3, #4
 8005df0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d016      	beq.n	8005e2a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dfc:	f7fc fb90 	bl	8002520 <HAL_GetTick>
 8005e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e02:	e00a      	b.n	8005e1a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e04:	f7fc fb8c 	bl	8002520 <HAL_GetTick>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d901      	bls.n	8005e1a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e12a      	b.n	8006070 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e1a:	4b8b      	ldr	r3, [pc, #556]	; (8006048 <HAL_RCC_OscConfig+0x780>)
 8005e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e20:	f003 0302 	and.w	r3, r3, #2
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d0ed      	beq.n	8005e04 <HAL_RCC_OscConfig+0x53c>
 8005e28:	e015      	b.n	8005e56 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e2a:	f7fc fb79 	bl	8002520 <HAL_GetTick>
 8005e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e30:	e00a      	b.n	8005e48 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e32:	f7fc fb75 	bl	8002520 <HAL_GetTick>
 8005e36:	4602      	mov	r2, r0
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d901      	bls.n	8005e48 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e113      	b.n	8006070 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e48:	4b7f      	ldr	r3, [pc, #508]	; (8006048 <HAL_RCC_OscConfig+0x780>)
 8005e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1ed      	bne.n	8005e32 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e56:	7ffb      	ldrb	r3, [r7, #31]
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d105      	bne.n	8005e68 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e5c:	4b7a      	ldr	r3, [pc, #488]	; (8006048 <HAL_RCC_OscConfig+0x780>)
 8005e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e60:	4a79      	ldr	r2, [pc, #484]	; (8006048 <HAL_RCC_OscConfig+0x780>)
 8005e62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e66:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f000 80fe 	beq.w	800606e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	f040 80d0 	bne.w	800601c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005e7c:	4b72      	ldr	r3, [pc, #456]	; (8006048 <HAL_RCC_OscConfig+0x780>)
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	f003 0203 	and.w	r2, r3, #3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d130      	bne.n	8005ef2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d127      	bne.n	8005ef2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eac:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d11f      	bne.n	8005ef2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ebc:	2a07      	cmp	r2, #7
 8005ebe:	bf14      	ite	ne
 8005ec0:	2201      	movne	r2, #1
 8005ec2:	2200      	moveq	r2, #0
 8005ec4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d113      	bne.n	8005ef2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ed4:	085b      	lsrs	r3, r3, #1
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d109      	bne.n	8005ef2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee8:	085b      	lsrs	r3, r3, #1
 8005eea:	3b01      	subs	r3, #1
 8005eec:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d06e      	beq.n	8005fd0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	2b0c      	cmp	r3, #12
 8005ef6:	d069      	beq.n	8005fcc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005ef8:	4b53      	ldr	r3, [pc, #332]	; (8006048 <HAL_RCC_OscConfig+0x780>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d105      	bne.n	8005f10 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005f04:	4b50      	ldr	r3, [pc, #320]	; (8006048 <HAL_RCC_OscConfig+0x780>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d001      	beq.n	8005f14 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e0ad      	b.n	8006070 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005f14:	4b4c      	ldr	r3, [pc, #304]	; (8006048 <HAL_RCC_OscConfig+0x780>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a4b      	ldr	r2, [pc, #300]	; (8006048 <HAL_RCC_OscConfig+0x780>)
 8005f1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f1e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005f20:	f7fc fafe 	bl	8002520 <HAL_GetTick>
 8005f24:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f26:	e008      	b.n	8005f3a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f28:	f7fc fafa 	bl	8002520 <HAL_GetTick>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d901      	bls.n	8005f3a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e09a      	b.n	8006070 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f3a:	4b43      	ldr	r3, [pc, #268]	; (8006048 <HAL_RCC_OscConfig+0x780>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d1f0      	bne.n	8005f28 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f46:	4b40      	ldr	r3, [pc, #256]	; (8006048 <HAL_RCC_OscConfig+0x780>)
 8005f48:	68da      	ldr	r2, [r3, #12]
 8005f4a:	4b40      	ldr	r3, [pc, #256]	; (800604c <HAL_RCC_OscConfig+0x784>)
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005f56:	3a01      	subs	r2, #1
 8005f58:	0112      	lsls	r2, r2, #4
 8005f5a:	4311      	orrs	r1, r2
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005f60:	0212      	lsls	r2, r2, #8
 8005f62:	4311      	orrs	r1, r2
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005f68:	0852      	lsrs	r2, r2, #1
 8005f6a:	3a01      	subs	r2, #1
 8005f6c:	0552      	lsls	r2, r2, #21
 8005f6e:	4311      	orrs	r1, r2
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005f74:	0852      	lsrs	r2, r2, #1
 8005f76:	3a01      	subs	r2, #1
 8005f78:	0652      	lsls	r2, r2, #25
 8005f7a:	4311      	orrs	r1, r2
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005f80:	0912      	lsrs	r2, r2, #4
 8005f82:	0452      	lsls	r2, r2, #17
 8005f84:	430a      	orrs	r2, r1
 8005f86:	4930      	ldr	r1, [pc, #192]	; (8006048 <HAL_RCC_OscConfig+0x780>)
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005f8c:	4b2e      	ldr	r3, [pc, #184]	; (8006048 <HAL_RCC_OscConfig+0x780>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a2d      	ldr	r2, [pc, #180]	; (8006048 <HAL_RCC_OscConfig+0x780>)
 8005f92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f96:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005f98:	4b2b      	ldr	r3, [pc, #172]	; (8006048 <HAL_RCC_OscConfig+0x780>)
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	4a2a      	ldr	r2, [pc, #168]	; (8006048 <HAL_RCC_OscConfig+0x780>)
 8005f9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005fa2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005fa4:	f7fc fabc 	bl	8002520 <HAL_GetTick>
 8005fa8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005faa:	e008      	b.n	8005fbe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fac:	f7fc fab8 	bl	8002520 <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	2b02      	cmp	r3, #2
 8005fb8:	d901      	bls.n	8005fbe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e058      	b.n	8006070 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fbe:	4b22      	ldr	r3, [pc, #136]	; (8006048 <HAL_RCC_OscConfig+0x780>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d0f0      	beq.n	8005fac <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005fca:	e050      	b.n	800606e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e04f      	b.n	8006070 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fd0:	4b1d      	ldr	r3, [pc, #116]	; (8006048 <HAL_RCC_OscConfig+0x780>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d148      	bne.n	800606e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005fdc:	4b1a      	ldr	r3, [pc, #104]	; (8006048 <HAL_RCC_OscConfig+0x780>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a19      	ldr	r2, [pc, #100]	; (8006048 <HAL_RCC_OscConfig+0x780>)
 8005fe2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005fe6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005fe8:	4b17      	ldr	r3, [pc, #92]	; (8006048 <HAL_RCC_OscConfig+0x780>)
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	4a16      	ldr	r2, [pc, #88]	; (8006048 <HAL_RCC_OscConfig+0x780>)
 8005fee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ff2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005ff4:	f7fc fa94 	bl	8002520 <HAL_GetTick>
 8005ff8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ffa:	e008      	b.n	800600e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ffc:	f7fc fa90 	bl	8002520 <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	2b02      	cmp	r3, #2
 8006008:	d901      	bls.n	800600e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e030      	b.n	8006070 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800600e:	4b0e      	ldr	r3, [pc, #56]	; (8006048 <HAL_RCC_OscConfig+0x780>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d0f0      	beq.n	8005ffc <HAL_RCC_OscConfig+0x734>
 800601a:	e028      	b.n	800606e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	2b0c      	cmp	r3, #12
 8006020:	d023      	beq.n	800606a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006022:	4b09      	ldr	r3, [pc, #36]	; (8006048 <HAL_RCC_OscConfig+0x780>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a08      	ldr	r2, [pc, #32]	; (8006048 <HAL_RCC_OscConfig+0x780>)
 8006028:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800602c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800602e:	f7fc fa77 	bl	8002520 <HAL_GetTick>
 8006032:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006034:	e00c      	b.n	8006050 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006036:	f7fc fa73 	bl	8002520 <HAL_GetTick>
 800603a:	4602      	mov	r2, r0
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	2b02      	cmp	r3, #2
 8006042:	d905      	bls.n	8006050 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8006044:	2303      	movs	r3, #3
 8006046:	e013      	b.n	8006070 <HAL_RCC_OscConfig+0x7a8>
 8006048:	40021000 	.word	0x40021000
 800604c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006050:	4b09      	ldr	r3, [pc, #36]	; (8006078 <HAL_RCC_OscConfig+0x7b0>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1ec      	bne.n	8006036 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800605c:	4b06      	ldr	r3, [pc, #24]	; (8006078 <HAL_RCC_OscConfig+0x7b0>)
 800605e:	68da      	ldr	r2, [r3, #12]
 8006060:	4905      	ldr	r1, [pc, #20]	; (8006078 <HAL_RCC_OscConfig+0x7b0>)
 8006062:	4b06      	ldr	r3, [pc, #24]	; (800607c <HAL_RCC_OscConfig+0x7b4>)
 8006064:	4013      	ands	r3, r2
 8006066:	60cb      	str	r3, [r1, #12]
 8006068:	e001      	b.n	800606e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e000      	b.n	8006070 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800606e:	2300      	movs	r3, #0
}
 8006070:	4618      	mov	r0, r3
 8006072:	3720      	adds	r7, #32
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	40021000 	.word	0x40021000
 800607c:	feeefffc 	.word	0xfeeefffc

08006080 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d101      	bne.n	8006094 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e0e7      	b.n	8006264 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006094:	4b75      	ldr	r3, [pc, #468]	; (800626c <HAL_RCC_ClockConfig+0x1ec>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0307 	and.w	r3, r3, #7
 800609c:	683a      	ldr	r2, [r7, #0]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d910      	bls.n	80060c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060a2:	4b72      	ldr	r3, [pc, #456]	; (800626c <HAL_RCC_ClockConfig+0x1ec>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f023 0207 	bic.w	r2, r3, #7
 80060aa:	4970      	ldr	r1, [pc, #448]	; (800626c <HAL_RCC_ClockConfig+0x1ec>)
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060b2:	4b6e      	ldr	r3, [pc, #440]	; (800626c <HAL_RCC_ClockConfig+0x1ec>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0307 	and.w	r3, r3, #7
 80060ba:	683a      	ldr	r2, [r7, #0]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d001      	beq.n	80060c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e0cf      	b.n	8006264 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 0302 	and.w	r3, r3, #2
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d010      	beq.n	80060f2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	689a      	ldr	r2, [r3, #8]
 80060d4:	4b66      	ldr	r3, [pc, #408]	; (8006270 <HAL_RCC_ClockConfig+0x1f0>)
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060dc:	429a      	cmp	r2, r3
 80060de:	d908      	bls.n	80060f2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060e0:	4b63      	ldr	r3, [pc, #396]	; (8006270 <HAL_RCC_ClockConfig+0x1f0>)
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	4960      	ldr	r1, [pc, #384]	; (8006270 <HAL_RCC_ClockConfig+0x1f0>)
 80060ee:	4313      	orrs	r3, r2
 80060f0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0301 	and.w	r3, r3, #1
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d04c      	beq.n	8006198 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	2b03      	cmp	r3, #3
 8006104:	d107      	bne.n	8006116 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006106:	4b5a      	ldr	r3, [pc, #360]	; (8006270 <HAL_RCC_ClockConfig+0x1f0>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d121      	bne.n	8006156 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e0a6      	b.n	8006264 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	2b02      	cmp	r3, #2
 800611c:	d107      	bne.n	800612e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800611e:	4b54      	ldr	r3, [pc, #336]	; (8006270 <HAL_RCC_ClockConfig+0x1f0>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006126:	2b00      	cmp	r3, #0
 8006128:	d115      	bne.n	8006156 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e09a      	b.n	8006264 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d107      	bne.n	8006146 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006136:	4b4e      	ldr	r3, [pc, #312]	; (8006270 <HAL_RCC_ClockConfig+0x1f0>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 0302 	and.w	r3, r3, #2
 800613e:	2b00      	cmp	r3, #0
 8006140:	d109      	bne.n	8006156 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e08e      	b.n	8006264 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006146:	4b4a      	ldr	r3, [pc, #296]	; (8006270 <HAL_RCC_ClockConfig+0x1f0>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800614e:	2b00      	cmp	r3, #0
 8006150:	d101      	bne.n	8006156 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e086      	b.n	8006264 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006156:	4b46      	ldr	r3, [pc, #280]	; (8006270 <HAL_RCC_ClockConfig+0x1f0>)
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f023 0203 	bic.w	r2, r3, #3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	4943      	ldr	r1, [pc, #268]	; (8006270 <HAL_RCC_ClockConfig+0x1f0>)
 8006164:	4313      	orrs	r3, r2
 8006166:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006168:	f7fc f9da 	bl	8002520 <HAL_GetTick>
 800616c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800616e:	e00a      	b.n	8006186 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006170:	f7fc f9d6 	bl	8002520 <HAL_GetTick>
 8006174:	4602      	mov	r2, r0
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	f241 3288 	movw	r2, #5000	; 0x1388
 800617e:	4293      	cmp	r3, r2
 8006180:	d901      	bls.n	8006186 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	e06e      	b.n	8006264 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006186:	4b3a      	ldr	r3, [pc, #232]	; (8006270 <HAL_RCC_ClockConfig+0x1f0>)
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f003 020c 	and.w	r2, r3, #12
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	429a      	cmp	r2, r3
 8006196:	d1eb      	bne.n	8006170 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0302 	and.w	r3, r3, #2
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d010      	beq.n	80061c6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	689a      	ldr	r2, [r3, #8]
 80061a8:	4b31      	ldr	r3, [pc, #196]	; (8006270 <HAL_RCC_ClockConfig+0x1f0>)
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d208      	bcs.n	80061c6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061b4:	4b2e      	ldr	r3, [pc, #184]	; (8006270 <HAL_RCC_ClockConfig+0x1f0>)
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	492b      	ldr	r1, [pc, #172]	; (8006270 <HAL_RCC_ClockConfig+0x1f0>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80061c6:	4b29      	ldr	r3, [pc, #164]	; (800626c <HAL_RCC_ClockConfig+0x1ec>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 0307 	and.w	r3, r3, #7
 80061ce:	683a      	ldr	r2, [r7, #0]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d210      	bcs.n	80061f6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061d4:	4b25      	ldr	r3, [pc, #148]	; (800626c <HAL_RCC_ClockConfig+0x1ec>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f023 0207 	bic.w	r2, r3, #7
 80061dc:	4923      	ldr	r1, [pc, #140]	; (800626c <HAL_RCC_ClockConfig+0x1ec>)
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061e4:	4b21      	ldr	r3, [pc, #132]	; (800626c <HAL_RCC_ClockConfig+0x1ec>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0307 	and.w	r3, r3, #7
 80061ec:	683a      	ldr	r2, [r7, #0]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d001      	beq.n	80061f6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e036      	b.n	8006264 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 0304 	and.w	r3, r3, #4
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d008      	beq.n	8006214 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006202:	4b1b      	ldr	r3, [pc, #108]	; (8006270 <HAL_RCC_ClockConfig+0x1f0>)
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	4918      	ldr	r1, [pc, #96]	; (8006270 <HAL_RCC_ClockConfig+0x1f0>)
 8006210:	4313      	orrs	r3, r2
 8006212:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 0308 	and.w	r3, r3, #8
 800621c:	2b00      	cmp	r3, #0
 800621e:	d009      	beq.n	8006234 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006220:	4b13      	ldr	r3, [pc, #76]	; (8006270 <HAL_RCC_ClockConfig+0x1f0>)
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	00db      	lsls	r3, r3, #3
 800622e:	4910      	ldr	r1, [pc, #64]	; (8006270 <HAL_RCC_ClockConfig+0x1f0>)
 8006230:	4313      	orrs	r3, r2
 8006232:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006234:	f000 f824 	bl	8006280 <HAL_RCC_GetSysClockFreq>
 8006238:	4602      	mov	r2, r0
 800623a:	4b0d      	ldr	r3, [pc, #52]	; (8006270 <HAL_RCC_ClockConfig+0x1f0>)
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	091b      	lsrs	r3, r3, #4
 8006240:	f003 030f 	and.w	r3, r3, #15
 8006244:	490b      	ldr	r1, [pc, #44]	; (8006274 <HAL_RCC_ClockConfig+0x1f4>)
 8006246:	5ccb      	ldrb	r3, [r1, r3]
 8006248:	f003 031f 	and.w	r3, r3, #31
 800624c:	fa22 f303 	lsr.w	r3, r2, r3
 8006250:	4a09      	ldr	r2, [pc, #36]	; (8006278 <HAL_RCC_ClockConfig+0x1f8>)
 8006252:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006254:	4b09      	ldr	r3, [pc, #36]	; (800627c <HAL_RCC_ClockConfig+0x1fc>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4618      	mov	r0, r3
 800625a:	f7fc f911 	bl	8002480 <HAL_InitTick>
 800625e:	4603      	mov	r3, r0
 8006260:	72fb      	strb	r3, [r7, #11]

  return status;
 8006262:	7afb      	ldrb	r3, [r7, #11]
}
 8006264:	4618      	mov	r0, r3
 8006266:	3710      	adds	r7, #16
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}
 800626c:	40022000 	.word	0x40022000
 8006270:	40021000 	.word	0x40021000
 8006274:	0800b130 	.word	0x0800b130
 8006278:	20000000 	.word	0x20000000
 800627c:	20000004 	.word	0x20000004

08006280 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006280:	b480      	push	{r7}
 8006282:	b089      	sub	sp, #36	; 0x24
 8006284:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006286:	2300      	movs	r3, #0
 8006288:	61fb      	str	r3, [r7, #28]
 800628a:	2300      	movs	r3, #0
 800628c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800628e:	4b3e      	ldr	r3, [pc, #248]	; (8006388 <HAL_RCC_GetSysClockFreq+0x108>)
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	f003 030c 	and.w	r3, r3, #12
 8006296:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006298:	4b3b      	ldr	r3, [pc, #236]	; (8006388 <HAL_RCC_GetSysClockFreq+0x108>)
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	f003 0303 	and.w	r3, r3, #3
 80062a0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d005      	beq.n	80062b4 <HAL_RCC_GetSysClockFreq+0x34>
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	2b0c      	cmp	r3, #12
 80062ac:	d121      	bne.n	80062f2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d11e      	bne.n	80062f2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80062b4:	4b34      	ldr	r3, [pc, #208]	; (8006388 <HAL_RCC_GetSysClockFreq+0x108>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 0308 	and.w	r3, r3, #8
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d107      	bne.n	80062d0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80062c0:	4b31      	ldr	r3, [pc, #196]	; (8006388 <HAL_RCC_GetSysClockFreq+0x108>)
 80062c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062c6:	0a1b      	lsrs	r3, r3, #8
 80062c8:	f003 030f 	and.w	r3, r3, #15
 80062cc:	61fb      	str	r3, [r7, #28]
 80062ce:	e005      	b.n	80062dc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80062d0:	4b2d      	ldr	r3, [pc, #180]	; (8006388 <HAL_RCC_GetSysClockFreq+0x108>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	091b      	lsrs	r3, r3, #4
 80062d6:	f003 030f 	and.w	r3, r3, #15
 80062da:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80062dc:	4a2b      	ldr	r2, [pc, #172]	; (800638c <HAL_RCC_GetSysClockFreq+0x10c>)
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062e4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d10d      	bne.n	8006308 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80062f0:	e00a      	b.n	8006308 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	2b04      	cmp	r3, #4
 80062f6:	d102      	bne.n	80062fe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80062f8:	4b25      	ldr	r3, [pc, #148]	; (8006390 <HAL_RCC_GetSysClockFreq+0x110>)
 80062fa:	61bb      	str	r3, [r7, #24]
 80062fc:	e004      	b.n	8006308 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	2b08      	cmp	r3, #8
 8006302:	d101      	bne.n	8006308 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006304:	4b23      	ldr	r3, [pc, #140]	; (8006394 <HAL_RCC_GetSysClockFreq+0x114>)
 8006306:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	2b0c      	cmp	r3, #12
 800630c:	d134      	bne.n	8006378 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800630e:	4b1e      	ldr	r3, [pc, #120]	; (8006388 <HAL_RCC_GetSysClockFreq+0x108>)
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	f003 0303 	and.w	r3, r3, #3
 8006316:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	2b02      	cmp	r3, #2
 800631c:	d003      	beq.n	8006326 <HAL_RCC_GetSysClockFreq+0xa6>
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	2b03      	cmp	r3, #3
 8006322:	d003      	beq.n	800632c <HAL_RCC_GetSysClockFreq+0xac>
 8006324:	e005      	b.n	8006332 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006326:	4b1a      	ldr	r3, [pc, #104]	; (8006390 <HAL_RCC_GetSysClockFreq+0x110>)
 8006328:	617b      	str	r3, [r7, #20]
      break;
 800632a:	e005      	b.n	8006338 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800632c:	4b19      	ldr	r3, [pc, #100]	; (8006394 <HAL_RCC_GetSysClockFreq+0x114>)
 800632e:	617b      	str	r3, [r7, #20]
      break;
 8006330:	e002      	b.n	8006338 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	617b      	str	r3, [r7, #20]
      break;
 8006336:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006338:	4b13      	ldr	r3, [pc, #76]	; (8006388 <HAL_RCC_GetSysClockFreq+0x108>)
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	091b      	lsrs	r3, r3, #4
 800633e:	f003 0307 	and.w	r3, r3, #7
 8006342:	3301      	adds	r3, #1
 8006344:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006346:	4b10      	ldr	r3, [pc, #64]	; (8006388 <HAL_RCC_GetSysClockFreq+0x108>)
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	0a1b      	lsrs	r3, r3, #8
 800634c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006350:	697a      	ldr	r2, [r7, #20]
 8006352:	fb03 f202 	mul.w	r2, r3, r2
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	fbb2 f3f3 	udiv	r3, r2, r3
 800635c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800635e:	4b0a      	ldr	r3, [pc, #40]	; (8006388 <HAL_RCC_GetSysClockFreq+0x108>)
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	0e5b      	lsrs	r3, r3, #25
 8006364:	f003 0303 	and.w	r3, r3, #3
 8006368:	3301      	adds	r3, #1
 800636a:	005b      	lsls	r3, r3, #1
 800636c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800636e:	697a      	ldr	r2, [r7, #20]
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	fbb2 f3f3 	udiv	r3, r2, r3
 8006376:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006378:	69bb      	ldr	r3, [r7, #24]
}
 800637a:	4618      	mov	r0, r3
 800637c:	3724      	adds	r7, #36	; 0x24
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	40021000 	.word	0x40021000
 800638c:	0800b148 	.word	0x0800b148
 8006390:	00f42400 	.word	0x00f42400
 8006394:	007a1200 	.word	0x007a1200

08006398 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006398:	b480      	push	{r7}
 800639a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800639c:	4b03      	ldr	r3, [pc, #12]	; (80063ac <HAL_RCC_GetHCLKFreq+0x14>)
 800639e:	681b      	ldr	r3, [r3, #0]
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	20000000 	.word	0x20000000

080063b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80063b4:	f7ff fff0 	bl	8006398 <HAL_RCC_GetHCLKFreq>
 80063b8:	4602      	mov	r2, r0
 80063ba:	4b06      	ldr	r3, [pc, #24]	; (80063d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	0a1b      	lsrs	r3, r3, #8
 80063c0:	f003 0307 	and.w	r3, r3, #7
 80063c4:	4904      	ldr	r1, [pc, #16]	; (80063d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80063c6:	5ccb      	ldrb	r3, [r1, r3]
 80063c8:	f003 031f 	and.w	r3, r3, #31
 80063cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	40021000 	.word	0x40021000
 80063d8:	0800b140 	.word	0x0800b140

080063dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80063e0:	f7ff ffda 	bl	8006398 <HAL_RCC_GetHCLKFreq>
 80063e4:	4602      	mov	r2, r0
 80063e6:	4b06      	ldr	r3, [pc, #24]	; (8006400 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	0adb      	lsrs	r3, r3, #11
 80063ec:	f003 0307 	and.w	r3, r3, #7
 80063f0:	4904      	ldr	r1, [pc, #16]	; (8006404 <HAL_RCC_GetPCLK2Freq+0x28>)
 80063f2:	5ccb      	ldrb	r3, [r1, r3]
 80063f4:	f003 031f 	and.w	r3, r3, #31
 80063f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	40021000 	.word	0x40021000
 8006404:	0800b140 	.word	0x0800b140

08006408 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b086      	sub	sp, #24
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006410:	2300      	movs	r3, #0
 8006412:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006414:	4b2a      	ldr	r3, [pc, #168]	; (80064c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800641c:	2b00      	cmp	r3, #0
 800641e:	d003      	beq.n	8006428 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006420:	f7ff f9ee 	bl	8005800 <HAL_PWREx_GetVoltageRange>
 8006424:	6178      	str	r0, [r7, #20]
 8006426:	e014      	b.n	8006452 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006428:	4b25      	ldr	r3, [pc, #148]	; (80064c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800642a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800642c:	4a24      	ldr	r2, [pc, #144]	; (80064c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800642e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006432:	6593      	str	r3, [r2, #88]	; 0x58
 8006434:	4b22      	ldr	r3, [pc, #136]	; (80064c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800643c:	60fb      	str	r3, [r7, #12]
 800643e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006440:	f7ff f9de 	bl	8005800 <HAL_PWREx_GetVoltageRange>
 8006444:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006446:	4b1e      	ldr	r3, [pc, #120]	; (80064c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800644a:	4a1d      	ldr	r2, [pc, #116]	; (80064c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800644c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006450:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006458:	d10b      	bne.n	8006472 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2b80      	cmp	r3, #128	; 0x80
 800645e:	d919      	bls.n	8006494 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2ba0      	cmp	r3, #160	; 0xa0
 8006464:	d902      	bls.n	800646c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006466:	2302      	movs	r3, #2
 8006468:	613b      	str	r3, [r7, #16]
 800646a:	e013      	b.n	8006494 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800646c:	2301      	movs	r3, #1
 800646e:	613b      	str	r3, [r7, #16]
 8006470:	e010      	b.n	8006494 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2b80      	cmp	r3, #128	; 0x80
 8006476:	d902      	bls.n	800647e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006478:	2303      	movs	r3, #3
 800647a:	613b      	str	r3, [r7, #16]
 800647c:	e00a      	b.n	8006494 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2b80      	cmp	r3, #128	; 0x80
 8006482:	d102      	bne.n	800648a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006484:	2302      	movs	r3, #2
 8006486:	613b      	str	r3, [r7, #16]
 8006488:	e004      	b.n	8006494 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2b70      	cmp	r3, #112	; 0x70
 800648e:	d101      	bne.n	8006494 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006490:	2301      	movs	r3, #1
 8006492:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006494:	4b0b      	ldr	r3, [pc, #44]	; (80064c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f023 0207 	bic.w	r2, r3, #7
 800649c:	4909      	ldr	r1, [pc, #36]	; (80064c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80064a4:	4b07      	ldr	r3, [pc, #28]	; (80064c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 0307 	and.w	r3, r3, #7
 80064ac:	693a      	ldr	r2, [r7, #16]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d001      	beq.n	80064b6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e000      	b.n	80064b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3718      	adds	r7, #24
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	40021000 	.word	0x40021000
 80064c4:	40022000 	.word	0x40022000

080064c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b086      	sub	sp, #24
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80064d0:	2300      	movs	r3, #0
 80064d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80064d4:	2300      	movs	r3, #0
 80064d6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d041      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064e8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80064ec:	d02a      	beq.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80064ee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80064f2:	d824      	bhi.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80064f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064f8:	d008      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x44>
 80064fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064fe:	d81e      	bhi.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006500:	2b00      	cmp	r3, #0
 8006502:	d00a      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006504:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006508:	d010      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800650a:	e018      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800650c:	4b86      	ldr	r3, [pc, #536]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	4a85      	ldr	r2, [pc, #532]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006512:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006516:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006518:	e015      	b.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	3304      	adds	r3, #4
 800651e:	2100      	movs	r1, #0
 8006520:	4618      	mov	r0, r3
 8006522:	f000 fabb 	bl	8006a9c <RCCEx_PLLSAI1_Config>
 8006526:	4603      	mov	r3, r0
 8006528:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800652a:	e00c      	b.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	3320      	adds	r3, #32
 8006530:	2100      	movs	r1, #0
 8006532:	4618      	mov	r0, r3
 8006534:	f000 fba6 	bl	8006c84 <RCCEx_PLLSAI2_Config>
 8006538:	4603      	mov	r3, r0
 800653a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800653c:	e003      	b.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	74fb      	strb	r3, [r7, #19]
      break;
 8006542:	e000      	b.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006544:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006546:	7cfb      	ldrb	r3, [r7, #19]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d10b      	bne.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800654c:	4b76      	ldr	r3, [pc, #472]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800654e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006552:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800655a:	4973      	ldr	r1, [pc, #460]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800655c:	4313      	orrs	r3, r2
 800655e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006562:	e001      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006564:	7cfb      	ldrb	r3, [r7, #19]
 8006566:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006570:	2b00      	cmp	r3, #0
 8006572:	d041      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006578:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800657c:	d02a      	beq.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800657e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006582:	d824      	bhi.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006584:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006588:	d008      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800658a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800658e:	d81e      	bhi.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006590:	2b00      	cmp	r3, #0
 8006592:	d00a      	beq.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006594:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006598:	d010      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800659a:	e018      	b.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800659c:	4b62      	ldr	r3, [pc, #392]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	4a61      	ldr	r2, [pc, #388]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065a6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80065a8:	e015      	b.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	3304      	adds	r3, #4
 80065ae:	2100      	movs	r1, #0
 80065b0:	4618      	mov	r0, r3
 80065b2:	f000 fa73 	bl	8006a9c <RCCEx_PLLSAI1_Config>
 80065b6:	4603      	mov	r3, r0
 80065b8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80065ba:	e00c      	b.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	3320      	adds	r3, #32
 80065c0:	2100      	movs	r1, #0
 80065c2:	4618      	mov	r0, r3
 80065c4:	f000 fb5e 	bl	8006c84 <RCCEx_PLLSAI2_Config>
 80065c8:	4603      	mov	r3, r0
 80065ca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80065cc:	e003      	b.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	74fb      	strb	r3, [r7, #19]
      break;
 80065d2:	e000      	b.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80065d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065d6:	7cfb      	ldrb	r3, [r7, #19]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d10b      	bne.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80065dc:	4b52      	ldr	r3, [pc, #328]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065e2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065ea:	494f      	ldr	r1, [pc, #316]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065ec:	4313      	orrs	r3, r2
 80065ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80065f2:	e001      	b.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065f4:	7cfb      	ldrb	r3, [r7, #19]
 80065f6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006600:	2b00      	cmp	r3, #0
 8006602:	f000 80a0 	beq.w	8006746 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006606:	2300      	movs	r3, #0
 8006608:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800660a:	4b47      	ldr	r3, [pc, #284]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800660c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800660e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006612:	2b00      	cmp	r3, #0
 8006614:	d101      	bne.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006616:	2301      	movs	r3, #1
 8006618:	e000      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800661a:	2300      	movs	r3, #0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00d      	beq.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006620:	4b41      	ldr	r3, [pc, #260]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006624:	4a40      	ldr	r2, [pc, #256]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800662a:	6593      	str	r3, [r2, #88]	; 0x58
 800662c:	4b3e      	ldr	r3, [pc, #248]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800662e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006634:	60bb      	str	r3, [r7, #8]
 8006636:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006638:	2301      	movs	r3, #1
 800663a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800663c:	4b3b      	ldr	r3, [pc, #236]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a3a      	ldr	r2, [pc, #232]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006646:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006648:	f7fb ff6a 	bl	8002520 <HAL_GetTick>
 800664c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800664e:	e009      	b.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006650:	f7fb ff66 	bl	8002520 <HAL_GetTick>
 8006654:	4602      	mov	r2, r0
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	2b02      	cmp	r3, #2
 800665c:	d902      	bls.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800665e:	2303      	movs	r3, #3
 8006660:	74fb      	strb	r3, [r7, #19]
        break;
 8006662:	e005      	b.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006664:	4b31      	ldr	r3, [pc, #196]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800666c:	2b00      	cmp	r3, #0
 800666e:	d0ef      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006670:	7cfb      	ldrb	r3, [r7, #19]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d15c      	bne.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006676:	4b2c      	ldr	r3, [pc, #176]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800667c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006680:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d01f      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	429a      	cmp	r2, r3
 8006692:	d019      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006694:	4b24      	ldr	r3, [pc, #144]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800669a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800669e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80066a0:	4b21      	ldr	r3, [pc, #132]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066a6:	4a20      	ldr	r2, [pc, #128]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80066b0:	4b1d      	ldr	r3, [pc, #116]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066b6:	4a1c      	ldr	r2, [pc, #112]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80066c0:	4a19      	ldr	r2, [pc, #100]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	f003 0301 	and.w	r3, r3, #1
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d016      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066d2:	f7fb ff25 	bl	8002520 <HAL_GetTick>
 80066d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066d8:	e00b      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066da:	f7fb ff21 	bl	8002520 <HAL_GetTick>
 80066de:	4602      	mov	r2, r0
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d902      	bls.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80066ec:	2303      	movs	r3, #3
 80066ee:	74fb      	strb	r3, [r7, #19]
            break;
 80066f0:	e006      	b.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066f2:	4b0d      	ldr	r3, [pc, #52]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066f8:	f003 0302 	and.w	r3, r3, #2
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d0ec      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006700:	7cfb      	ldrb	r3, [r7, #19]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d10c      	bne.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006706:	4b08      	ldr	r3, [pc, #32]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800670c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006716:	4904      	ldr	r1, [pc, #16]	; (8006728 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006718:	4313      	orrs	r3, r2
 800671a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800671e:	e009      	b.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006720:	7cfb      	ldrb	r3, [r7, #19]
 8006722:	74bb      	strb	r3, [r7, #18]
 8006724:	e006      	b.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006726:	bf00      	nop
 8006728:	40021000 	.word	0x40021000
 800672c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006730:	7cfb      	ldrb	r3, [r7, #19]
 8006732:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006734:	7c7b      	ldrb	r3, [r7, #17]
 8006736:	2b01      	cmp	r3, #1
 8006738:	d105      	bne.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800673a:	4b9e      	ldr	r3, [pc, #632]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800673c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800673e:	4a9d      	ldr	r2, [pc, #628]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006740:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006744:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 0301 	and.w	r3, r3, #1
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00a      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006752:	4b98      	ldr	r3, [pc, #608]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006758:	f023 0203 	bic.w	r2, r3, #3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006760:	4994      	ldr	r1, [pc, #592]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006762:	4313      	orrs	r3, r2
 8006764:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0302 	and.w	r3, r3, #2
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00a      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006774:	4b8f      	ldr	r3, [pc, #572]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800677a:	f023 020c 	bic.w	r2, r3, #12
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006782:	498c      	ldr	r1, [pc, #560]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006784:	4313      	orrs	r3, r2
 8006786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0304 	and.w	r3, r3, #4
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00a      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006796:	4b87      	ldr	r3, [pc, #540]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800679c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a4:	4983      	ldr	r1, [pc, #524]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067a6:	4313      	orrs	r3, r2
 80067a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 0308 	and.w	r3, r3, #8
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d00a      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80067b8:	4b7e      	ldr	r3, [pc, #504]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067c6:	497b      	ldr	r1, [pc, #492]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067c8:	4313      	orrs	r3, r2
 80067ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 0310 	and.w	r3, r3, #16
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00a      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80067da:	4b76      	ldr	r3, [pc, #472]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067e8:	4972      	ldr	r1, [pc, #456]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067ea:	4313      	orrs	r3, r2
 80067ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 0320 	and.w	r3, r3, #32
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d00a      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80067fc:	4b6d      	ldr	r3, [pc, #436]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006802:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800680a:	496a      	ldr	r1, [pc, #424]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800680c:	4313      	orrs	r3, r2
 800680e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800681a:	2b00      	cmp	r3, #0
 800681c:	d00a      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800681e:	4b65      	ldr	r3, [pc, #404]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006824:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800682c:	4961      	ldr	r1, [pc, #388]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800682e:	4313      	orrs	r3, r2
 8006830:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800683c:	2b00      	cmp	r3, #0
 800683e:	d00a      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006840:	4b5c      	ldr	r3, [pc, #368]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006846:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800684e:	4959      	ldr	r1, [pc, #356]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006850:	4313      	orrs	r3, r2
 8006852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00a      	beq.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006862:	4b54      	ldr	r3, [pc, #336]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006868:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006870:	4950      	ldr	r1, [pc, #320]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006872:	4313      	orrs	r3, r2
 8006874:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00a      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006884:	4b4b      	ldr	r3, [pc, #300]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800688a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006892:	4948      	ldr	r1, [pc, #288]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006894:	4313      	orrs	r3, r2
 8006896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00a      	beq.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80068a6:	4b43      	ldr	r3, [pc, #268]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068b4:	493f      	ldr	r1, [pc, #252]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068b6:	4313      	orrs	r3, r2
 80068b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d028      	beq.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80068c8:	4b3a      	ldr	r3, [pc, #232]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068d6:	4937      	ldr	r1, [pc, #220]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068d8:	4313      	orrs	r3, r2
 80068da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068e6:	d106      	bne.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068e8:	4b32      	ldr	r3, [pc, #200]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	4a31      	ldr	r2, [pc, #196]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068f2:	60d3      	str	r3, [r2, #12]
 80068f4:	e011      	b.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068fe:	d10c      	bne.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	3304      	adds	r3, #4
 8006904:	2101      	movs	r1, #1
 8006906:	4618      	mov	r0, r3
 8006908:	f000 f8c8 	bl	8006a9c <RCCEx_PLLSAI1_Config>
 800690c:	4603      	mov	r3, r0
 800690e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006910:	7cfb      	ldrb	r3, [r7, #19]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d001      	beq.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006916:	7cfb      	ldrb	r3, [r7, #19]
 8006918:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006922:	2b00      	cmp	r3, #0
 8006924:	d028      	beq.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006926:	4b23      	ldr	r3, [pc, #140]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800692c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006934:	491f      	ldr	r1, [pc, #124]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006936:	4313      	orrs	r3, r2
 8006938:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006940:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006944:	d106      	bne.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006946:	4b1b      	ldr	r3, [pc, #108]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	4a1a      	ldr	r2, [pc, #104]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800694c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006950:	60d3      	str	r3, [r2, #12]
 8006952:	e011      	b.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006958:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800695c:	d10c      	bne.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	3304      	adds	r3, #4
 8006962:	2101      	movs	r1, #1
 8006964:	4618      	mov	r0, r3
 8006966:	f000 f899 	bl	8006a9c <RCCEx_PLLSAI1_Config>
 800696a:	4603      	mov	r3, r0
 800696c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800696e:	7cfb      	ldrb	r3, [r7, #19]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d001      	beq.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006974:	7cfb      	ldrb	r3, [r7, #19]
 8006976:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006980:	2b00      	cmp	r3, #0
 8006982:	d02b      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006984:	4b0b      	ldr	r3, [pc, #44]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800698a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006992:	4908      	ldr	r1, [pc, #32]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006994:	4313      	orrs	r3, r2
 8006996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800699e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069a2:	d109      	bne.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069a4:	4b03      	ldr	r3, [pc, #12]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	4a02      	ldr	r2, [pc, #8]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069ae:	60d3      	str	r3, [r2, #12]
 80069b0:	e014      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80069b2:	bf00      	nop
 80069b4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80069c0:	d10c      	bne.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	3304      	adds	r3, #4
 80069c6:	2101      	movs	r1, #1
 80069c8:	4618      	mov	r0, r3
 80069ca:	f000 f867 	bl	8006a9c <RCCEx_PLLSAI1_Config>
 80069ce:	4603      	mov	r3, r0
 80069d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80069d2:	7cfb      	ldrb	r3, [r7, #19]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d001      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80069d8:	7cfb      	ldrb	r3, [r7, #19]
 80069da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d02f      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80069e8:	4b2b      	ldr	r3, [pc, #172]	; (8006a98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80069ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069f6:	4928      	ldr	r1, [pc, #160]	; (8006a98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80069f8:	4313      	orrs	r3, r2
 80069fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a06:	d10d      	bne.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	3304      	adds	r3, #4
 8006a0c:	2102      	movs	r1, #2
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f000 f844 	bl	8006a9c <RCCEx_PLLSAI1_Config>
 8006a14:	4603      	mov	r3, r0
 8006a16:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006a18:	7cfb      	ldrb	r3, [r7, #19]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d014      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006a1e:	7cfb      	ldrb	r3, [r7, #19]
 8006a20:	74bb      	strb	r3, [r7, #18]
 8006a22:	e011      	b.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a2c:	d10c      	bne.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	3320      	adds	r3, #32
 8006a32:	2102      	movs	r1, #2
 8006a34:	4618      	mov	r0, r3
 8006a36:	f000 f925 	bl	8006c84 <RCCEx_PLLSAI2_Config>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006a3e:	7cfb      	ldrb	r3, [r7, #19]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d001      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006a44:	7cfb      	ldrb	r3, [r7, #19]
 8006a46:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00a      	beq.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006a54:	4b10      	ldr	r3, [pc, #64]	; (8006a98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a5a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a62:	490d      	ldr	r1, [pc, #52]	; (8006a98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006a64:	4313      	orrs	r3, r2
 8006a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00b      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006a76:	4b08      	ldr	r3, [pc, #32]	; (8006a98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a7c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a86:	4904      	ldr	r1, [pc, #16]	; (8006a98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006a8e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3718      	adds	r7, #24
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	40021000 	.word	0x40021000

08006a9c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006aaa:	4b75      	ldr	r3, [pc, #468]	; (8006c80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	f003 0303 	and.w	r3, r3, #3
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d018      	beq.n	8006ae8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006ab6:	4b72      	ldr	r3, [pc, #456]	; (8006c80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	f003 0203 	and.w	r2, r3, #3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d10d      	bne.n	8006ae2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
       ||
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d009      	beq.n	8006ae2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006ace:	4b6c      	ldr	r3, [pc, #432]	; (8006c80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	091b      	lsrs	r3, r3, #4
 8006ad4:	f003 0307 	and.w	r3, r3, #7
 8006ad8:	1c5a      	adds	r2, r3, #1
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	685b      	ldr	r3, [r3, #4]
       ||
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d047      	beq.n	8006b72 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	73fb      	strb	r3, [r7, #15]
 8006ae6:	e044      	b.n	8006b72 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2b03      	cmp	r3, #3
 8006aee:	d018      	beq.n	8006b22 <RCCEx_PLLSAI1_Config+0x86>
 8006af0:	2b03      	cmp	r3, #3
 8006af2:	d825      	bhi.n	8006b40 <RCCEx_PLLSAI1_Config+0xa4>
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d002      	beq.n	8006afe <RCCEx_PLLSAI1_Config+0x62>
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d009      	beq.n	8006b10 <RCCEx_PLLSAI1_Config+0x74>
 8006afc:	e020      	b.n	8006b40 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006afe:	4b60      	ldr	r3, [pc, #384]	; (8006c80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 0302 	and.w	r3, r3, #2
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d11d      	bne.n	8006b46 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b0e:	e01a      	b.n	8006b46 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006b10:	4b5b      	ldr	r3, [pc, #364]	; (8006c80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d116      	bne.n	8006b4a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b20:	e013      	b.n	8006b4a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006b22:	4b57      	ldr	r3, [pc, #348]	; (8006c80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d10f      	bne.n	8006b4e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006b2e:	4b54      	ldr	r3, [pc, #336]	; (8006c80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d109      	bne.n	8006b4e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006b3e:	e006      	b.n	8006b4e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	73fb      	strb	r3, [r7, #15]
      break;
 8006b44:	e004      	b.n	8006b50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006b46:	bf00      	nop
 8006b48:	e002      	b.n	8006b50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006b4a:	bf00      	nop
 8006b4c:	e000      	b.n	8006b50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006b4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006b50:	7bfb      	ldrb	r3, [r7, #15]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d10d      	bne.n	8006b72 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006b56:	4b4a      	ldr	r3, [pc, #296]	; (8006c80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6819      	ldr	r1, [r3, #0]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	3b01      	subs	r3, #1
 8006b68:	011b      	lsls	r3, r3, #4
 8006b6a:	430b      	orrs	r3, r1
 8006b6c:	4944      	ldr	r1, [pc, #272]	; (8006c80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006b72:	7bfb      	ldrb	r3, [r7, #15]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d17d      	bne.n	8006c74 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006b78:	4b41      	ldr	r3, [pc, #260]	; (8006c80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a40      	ldr	r2, [pc, #256]	; (8006c80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b7e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006b82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b84:	f7fb fccc 	bl	8002520 <HAL_GetTick>
 8006b88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006b8a:	e009      	b.n	8006ba0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006b8c:	f7fb fcc8 	bl	8002520 <HAL_GetTick>
 8006b90:	4602      	mov	r2, r0
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	d902      	bls.n	8006ba0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	73fb      	strb	r3, [r7, #15]
        break;
 8006b9e:	e005      	b.n	8006bac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006ba0:	4b37      	ldr	r3, [pc, #220]	; (8006c80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1ef      	bne.n	8006b8c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006bac:	7bfb      	ldrb	r3, [r7, #15]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d160      	bne.n	8006c74 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d111      	bne.n	8006bdc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006bb8:	4b31      	ldr	r3, [pc, #196]	; (8006c80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006bc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	6892      	ldr	r2, [r2, #8]
 8006bc8:	0211      	lsls	r1, r2, #8
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	68d2      	ldr	r2, [r2, #12]
 8006bce:	0912      	lsrs	r2, r2, #4
 8006bd0:	0452      	lsls	r2, r2, #17
 8006bd2:	430a      	orrs	r2, r1
 8006bd4:	492a      	ldr	r1, [pc, #168]	; (8006c80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	610b      	str	r3, [r1, #16]
 8006bda:	e027      	b.n	8006c2c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d112      	bne.n	8006c08 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006be2:	4b27      	ldr	r3, [pc, #156]	; (8006c80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006bea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	6892      	ldr	r2, [r2, #8]
 8006bf2:	0211      	lsls	r1, r2, #8
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	6912      	ldr	r2, [r2, #16]
 8006bf8:	0852      	lsrs	r2, r2, #1
 8006bfa:	3a01      	subs	r2, #1
 8006bfc:	0552      	lsls	r2, r2, #21
 8006bfe:	430a      	orrs	r2, r1
 8006c00:	491f      	ldr	r1, [pc, #124]	; (8006c80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c02:	4313      	orrs	r3, r2
 8006c04:	610b      	str	r3, [r1, #16]
 8006c06:	e011      	b.n	8006c2c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006c08:	4b1d      	ldr	r3, [pc, #116]	; (8006c80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006c10:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	6892      	ldr	r2, [r2, #8]
 8006c18:	0211      	lsls	r1, r2, #8
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	6952      	ldr	r2, [r2, #20]
 8006c1e:	0852      	lsrs	r2, r2, #1
 8006c20:	3a01      	subs	r2, #1
 8006c22:	0652      	lsls	r2, r2, #25
 8006c24:	430a      	orrs	r2, r1
 8006c26:	4916      	ldr	r1, [pc, #88]	; (8006c80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006c2c:	4b14      	ldr	r3, [pc, #80]	; (8006c80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a13      	ldr	r2, [pc, #76]	; (8006c80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006c36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c38:	f7fb fc72 	bl	8002520 <HAL_GetTick>
 8006c3c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006c3e:	e009      	b.n	8006c54 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006c40:	f7fb fc6e 	bl	8002520 <HAL_GetTick>
 8006c44:	4602      	mov	r2, r0
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	1ad3      	subs	r3, r2, r3
 8006c4a:	2b02      	cmp	r3, #2
 8006c4c:	d902      	bls.n	8006c54 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006c4e:	2303      	movs	r3, #3
 8006c50:	73fb      	strb	r3, [r7, #15]
          break;
 8006c52:	e005      	b.n	8006c60 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006c54:	4b0a      	ldr	r3, [pc, #40]	; (8006c80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d0ef      	beq.n	8006c40 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006c60:	7bfb      	ldrb	r3, [r7, #15]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d106      	bne.n	8006c74 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006c66:	4b06      	ldr	r3, [pc, #24]	; (8006c80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c68:	691a      	ldr	r2, [r3, #16]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	4904      	ldr	r1, [pc, #16]	; (8006c80 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c70:	4313      	orrs	r3, r2
 8006c72:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3710      	adds	r7, #16
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	40021000 	.word	0x40021000

08006c84 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006c92:	4b6a      	ldr	r3, [pc, #424]	; (8006e3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	f003 0303 	and.w	r3, r3, #3
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d018      	beq.n	8006cd0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006c9e:	4b67      	ldr	r3, [pc, #412]	; (8006e3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	f003 0203 	and.w	r2, r3, #3
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d10d      	bne.n	8006cca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
       ||
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d009      	beq.n	8006cca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006cb6:	4b61      	ldr	r3, [pc, #388]	; (8006e3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	091b      	lsrs	r3, r3, #4
 8006cbc:	f003 0307 	and.w	r3, r3, #7
 8006cc0:	1c5a      	adds	r2, r3, #1
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	685b      	ldr	r3, [r3, #4]
       ||
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d047      	beq.n	8006d5a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	73fb      	strb	r3, [r7, #15]
 8006cce:	e044      	b.n	8006d5a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2b03      	cmp	r3, #3
 8006cd6:	d018      	beq.n	8006d0a <RCCEx_PLLSAI2_Config+0x86>
 8006cd8:	2b03      	cmp	r3, #3
 8006cda:	d825      	bhi.n	8006d28 <RCCEx_PLLSAI2_Config+0xa4>
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d002      	beq.n	8006ce6 <RCCEx_PLLSAI2_Config+0x62>
 8006ce0:	2b02      	cmp	r3, #2
 8006ce2:	d009      	beq.n	8006cf8 <RCCEx_PLLSAI2_Config+0x74>
 8006ce4:	e020      	b.n	8006d28 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006ce6:	4b55      	ldr	r3, [pc, #340]	; (8006e3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 0302 	and.w	r3, r3, #2
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d11d      	bne.n	8006d2e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006cf6:	e01a      	b.n	8006d2e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006cf8:	4b50      	ldr	r3, [pc, #320]	; (8006e3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d116      	bne.n	8006d32 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d08:	e013      	b.n	8006d32 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006d0a:	4b4c      	ldr	r3, [pc, #304]	; (8006e3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d10f      	bne.n	8006d36 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006d16:	4b49      	ldr	r3, [pc, #292]	; (8006e3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d109      	bne.n	8006d36 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006d26:	e006      	b.n	8006d36 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	73fb      	strb	r3, [r7, #15]
      break;
 8006d2c:	e004      	b.n	8006d38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006d2e:	bf00      	nop
 8006d30:	e002      	b.n	8006d38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006d32:	bf00      	nop
 8006d34:	e000      	b.n	8006d38 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006d36:	bf00      	nop
    }

    if(status == HAL_OK)
 8006d38:	7bfb      	ldrb	r3, [r7, #15]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d10d      	bne.n	8006d5a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006d3e:	4b3f      	ldr	r3, [pc, #252]	; (8006e3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6819      	ldr	r1, [r3, #0]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	3b01      	subs	r3, #1
 8006d50:	011b      	lsls	r3, r3, #4
 8006d52:	430b      	orrs	r3, r1
 8006d54:	4939      	ldr	r1, [pc, #228]	; (8006e3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d56:	4313      	orrs	r3, r2
 8006d58:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006d5a:	7bfb      	ldrb	r3, [r7, #15]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d167      	bne.n	8006e30 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006d60:	4b36      	ldr	r3, [pc, #216]	; (8006e3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a35      	ldr	r2, [pc, #212]	; (8006e3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d6c:	f7fb fbd8 	bl	8002520 <HAL_GetTick>
 8006d70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006d72:	e009      	b.n	8006d88 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006d74:	f7fb fbd4 	bl	8002520 <HAL_GetTick>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	1ad3      	subs	r3, r2, r3
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d902      	bls.n	8006d88 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006d82:	2303      	movs	r3, #3
 8006d84:	73fb      	strb	r3, [r7, #15]
        break;
 8006d86:	e005      	b.n	8006d94 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006d88:	4b2c      	ldr	r3, [pc, #176]	; (8006e3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d1ef      	bne.n	8006d74 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006d94:	7bfb      	ldrb	r3, [r7, #15]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d14a      	bne.n	8006e30 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d111      	bne.n	8006dc4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006da0:	4b26      	ldr	r3, [pc, #152]	; (8006e3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006da2:	695b      	ldr	r3, [r3, #20]
 8006da4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006da8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	6892      	ldr	r2, [r2, #8]
 8006db0:	0211      	lsls	r1, r2, #8
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	68d2      	ldr	r2, [r2, #12]
 8006db6:	0912      	lsrs	r2, r2, #4
 8006db8:	0452      	lsls	r2, r2, #17
 8006dba:	430a      	orrs	r2, r1
 8006dbc:	491f      	ldr	r1, [pc, #124]	; (8006e3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	614b      	str	r3, [r1, #20]
 8006dc2:	e011      	b.n	8006de8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006dc4:	4b1d      	ldr	r3, [pc, #116]	; (8006e3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006dc6:	695b      	ldr	r3, [r3, #20]
 8006dc8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006dcc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	6892      	ldr	r2, [r2, #8]
 8006dd4:	0211      	lsls	r1, r2, #8
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	6912      	ldr	r2, [r2, #16]
 8006dda:	0852      	lsrs	r2, r2, #1
 8006ddc:	3a01      	subs	r2, #1
 8006dde:	0652      	lsls	r2, r2, #25
 8006de0:	430a      	orrs	r2, r1
 8006de2:	4916      	ldr	r1, [pc, #88]	; (8006e3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006de4:	4313      	orrs	r3, r2
 8006de6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006de8:	4b14      	ldr	r3, [pc, #80]	; (8006e3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a13      	ldr	r2, [pc, #76]	; (8006e3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006dee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006df2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006df4:	f7fb fb94 	bl	8002520 <HAL_GetTick>
 8006df8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006dfa:	e009      	b.n	8006e10 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006dfc:	f7fb fb90 	bl	8002520 <HAL_GetTick>
 8006e00:	4602      	mov	r2, r0
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d902      	bls.n	8006e10 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	73fb      	strb	r3, [r7, #15]
          break;
 8006e0e:	e005      	b.n	8006e1c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006e10:	4b0a      	ldr	r3, [pc, #40]	; (8006e3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d0ef      	beq.n	8006dfc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006e1c:	7bfb      	ldrb	r3, [r7, #15]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d106      	bne.n	8006e30 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006e22:	4b06      	ldr	r3, [pc, #24]	; (8006e3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e24:	695a      	ldr	r2, [r3, #20]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	695b      	ldr	r3, [r3, #20]
 8006e2a:	4904      	ldr	r1, [pc, #16]	; (8006e3c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3710      	adds	r7, #16
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	40021000 	.word	0x40021000

08006e40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d101      	bne.n	8006e52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e095      	b.n	8006f7e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d108      	bne.n	8006e6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e62:	d009      	beq.n	8006e78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	61da      	str	r2, [r3, #28]
 8006e6a:	e005      	b.n	8006e78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d106      	bne.n	8006e98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f7fa fed6 	bl	8001c44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2202      	movs	r2, #2
 8006e9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006eae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006eb8:	d902      	bls.n	8006ec0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	60fb      	str	r3, [r7, #12]
 8006ebe:	e002      	b.n	8006ec6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006ec0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ec4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006ece:	d007      	beq.n	8006ee0 <HAL_SPI_Init+0xa0>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ed8:	d002      	beq.n	8006ee0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006ef0:	431a      	orrs	r2, r3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	f003 0302 	and.w	r3, r3, #2
 8006efa:	431a      	orrs	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	695b      	ldr	r3, [r3, #20]
 8006f00:	f003 0301 	and.w	r3, r3, #1
 8006f04:	431a      	orrs	r2, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f0e:	431a      	orrs	r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	69db      	ldr	r3, [r3, #28]
 8006f14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f18:	431a      	orrs	r2, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a1b      	ldr	r3, [r3, #32]
 8006f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f22:	ea42 0103 	orr.w	r1, r2, r3
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f2a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	430a      	orrs	r2, r1
 8006f34:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	0c1b      	lsrs	r3, r3, #16
 8006f3c:	f003 0204 	and.w	r2, r3, #4
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f44:	f003 0310 	and.w	r3, r3, #16
 8006f48:	431a      	orrs	r2, r3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f4e:	f003 0308 	and.w	r3, r3, #8
 8006f52:	431a      	orrs	r2, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006f5c:	ea42 0103 	orr.w	r1, r2, r3
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	430a      	orrs	r2, r1
 8006f6c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
	...

08006f88 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b088      	sub	sp, #32
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	099b      	lsrs	r3, r3, #6
 8006fa4:	f003 0301 	and.w	r3, r3, #1
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d10f      	bne.n	8006fcc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00a      	beq.n	8006fcc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	099b      	lsrs	r3, r3, #6
 8006fba:	f003 0301 	and.w	r3, r3, #1
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d004      	beq.n	8006fcc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	4798      	blx	r3
    return;
 8006fca:	e0d7      	b.n	800717c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	085b      	lsrs	r3, r3, #1
 8006fd0:	f003 0301 	and.w	r3, r3, #1
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d00a      	beq.n	8006fee <HAL_SPI_IRQHandler+0x66>
 8006fd8:	69fb      	ldr	r3, [r7, #28]
 8006fda:	09db      	lsrs	r3, r3, #7
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d004      	beq.n	8006fee <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	4798      	blx	r3
    return;
 8006fec:	e0c6      	b.n	800717c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006fee:	69bb      	ldr	r3, [r7, #24]
 8006ff0:	095b      	lsrs	r3, r3, #5
 8006ff2:	f003 0301 	and.w	r3, r3, #1
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d10c      	bne.n	8007014 <HAL_SPI_IRQHandler+0x8c>
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	099b      	lsrs	r3, r3, #6
 8006ffe:	f003 0301 	and.w	r3, r3, #1
 8007002:	2b00      	cmp	r3, #0
 8007004:	d106      	bne.n	8007014 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	0a1b      	lsrs	r3, r3, #8
 800700a:	f003 0301 	and.w	r3, r3, #1
 800700e:	2b00      	cmp	r3, #0
 8007010:	f000 80b4 	beq.w	800717c <HAL_SPI_IRQHandler+0x1f4>
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	095b      	lsrs	r3, r3, #5
 8007018:	f003 0301 	and.w	r3, r3, #1
 800701c:	2b00      	cmp	r3, #0
 800701e:	f000 80ad 	beq.w	800717c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007022:	69bb      	ldr	r3, [r7, #24]
 8007024:	099b      	lsrs	r3, r3, #6
 8007026:	f003 0301 	and.w	r3, r3, #1
 800702a:	2b00      	cmp	r3, #0
 800702c:	d023      	beq.n	8007076 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007034:	b2db      	uxtb	r3, r3
 8007036:	2b03      	cmp	r3, #3
 8007038:	d011      	beq.n	800705e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800703e:	f043 0204 	orr.w	r2, r3, #4
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007046:	2300      	movs	r3, #0
 8007048:	617b      	str	r3, [r7, #20]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	617b      	str	r3, [r7, #20]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	617b      	str	r3, [r7, #20]
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	e00b      	b.n	8007076 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800705e:	2300      	movs	r3, #0
 8007060:	613b      	str	r3, [r7, #16]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	613b      	str	r3, [r7, #16]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	613b      	str	r3, [r7, #16]
 8007072:	693b      	ldr	r3, [r7, #16]
        return;
 8007074:	e082      	b.n	800717c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	095b      	lsrs	r3, r3, #5
 800707a:	f003 0301 	and.w	r3, r3, #1
 800707e:	2b00      	cmp	r3, #0
 8007080:	d014      	beq.n	80070ac <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007086:	f043 0201 	orr.w	r2, r3, #1
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800708e:	2300      	movs	r3, #0
 8007090:	60fb      	str	r3, [r7, #12]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	60fb      	str	r3, [r7, #12]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070a8:	601a      	str	r2, [r3, #0]
 80070aa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	0a1b      	lsrs	r3, r3, #8
 80070b0:	f003 0301 	and.w	r3, r3, #1
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00c      	beq.n	80070d2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070bc:	f043 0208 	orr.w	r2, r3, #8
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80070c4:	2300      	movs	r3, #0
 80070c6:	60bb      	str	r3, [r7, #8]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	60bb      	str	r3, [r7, #8]
 80070d0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d04f      	beq.n	800717a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	685a      	ldr	r2, [r3, #4]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80070e8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2201      	movs	r2, #1
 80070ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	f003 0302 	and.w	r3, r3, #2
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d104      	bne.n	8007106 <HAL_SPI_IRQHandler+0x17e>
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	f003 0301 	and.w	r3, r3, #1
 8007102:	2b00      	cmp	r3, #0
 8007104:	d034      	beq.n	8007170 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	685a      	ldr	r2, [r3, #4]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f022 0203 	bic.w	r2, r2, #3
 8007114:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800711a:	2b00      	cmp	r3, #0
 800711c:	d011      	beq.n	8007142 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007122:	4a18      	ldr	r2, [pc, #96]	; (8007184 <HAL_SPI_IRQHandler+0x1fc>)
 8007124:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800712a:	4618      	mov	r0, r3
 800712c:	f7fb fc2e 	bl	800298c <HAL_DMA_Abort_IT>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d005      	beq.n	8007142 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800713a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007146:	2b00      	cmp	r3, #0
 8007148:	d016      	beq.n	8007178 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800714e:	4a0d      	ldr	r2, [pc, #52]	; (8007184 <HAL_SPI_IRQHandler+0x1fc>)
 8007150:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007156:	4618      	mov	r0, r3
 8007158:	f7fb fc18 	bl	800298c <HAL_DMA_Abort_IT>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00a      	beq.n	8007178 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007166:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800716e:	e003      	b.n	8007178 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 f809 	bl	8007188 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007176:	e000      	b.n	800717a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007178:	bf00      	nop
    return;
 800717a:	bf00      	nop
  }
}
 800717c:	3720      	adds	r7, #32
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	0800719d 	.word	0x0800719d

08007188 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007190:	bf00      	nop
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2200      	movs	r2, #0
 80071b6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f7ff ffe5 	bl	8007188 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80071be:	bf00      	nop
 80071c0:	3710      	adds	r7, #16
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}

080071c6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80071c6:	b580      	push	{r7, lr}
 80071c8:	b082      	sub	sp, #8
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d101      	bne.n	80071d8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	e049      	b.n	800726c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d106      	bne.n	80071f2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f7fa ff6f 	bl	80020d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2202      	movs	r2, #2
 80071f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	3304      	adds	r3, #4
 8007202:	4619      	mov	r1, r3
 8007204:	4610      	mov	r0, r2
 8007206:	f000 fa1b 	bl	8007640 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2201      	movs	r2, #1
 800720e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2201      	movs	r2, #1
 8007216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2201      	movs	r2, #1
 800721e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2201      	movs	r2, #1
 8007226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2201      	movs	r2, #1
 800722e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2201      	movs	r2, #1
 8007236:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2201      	movs	r2, #1
 800723e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2201      	movs	r2, #1
 8007246:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2201      	movs	r2, #1
 800724e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2201      	movs	r2, #1
 8007256:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2201      	movs	r2, #1
 800725e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	3708      	adds	r7, #8
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007274:	b480      	push	{r7}
 8007276:	b085      	sub	sp, #20
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007282:	b2db      	uxtb	r3, r3
 8007284:	2b01      	cmp	r3, #1
 8007286:	d001      	beq.n	800728c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	e04f      	b.n	800732c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2202      	movs	r2, #2
 8007290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	68da      	ldr	r2, [r3, #12]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f042 0201 	orr.w	r2, r2, #1
 80072a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a23      	ldr	r2, [pc, #140]	; (8007338 <HAL_TIM_Base_Start_IT+0xc4>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d01d      	beq.n	80072ea <HAL_TIM_Base_Start_IT+0x76>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072b6:	d018      	beq.n	80072ea <HAL_TIM_Base_Start_IT+0x76>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a1f      	ldr	r2, [pc, #124]	; (800733c <HAL_TIM_Base_Start_IT+0xc8>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d013      	beq.n	80072ea <HAL_TIM_Base_Start_IT+0x76>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a1e      	ldr	r2, [pc, #120]	; (8007340 <HAL_TIM_Base_Start_IT+0xcc>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d00e      	beq.n	80072ea <HAL_TIM_Base_Start_IT+0x76>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a1c      	ldr	r2, [pc, #112]	; (8007344 <HAL_TIM_Base_Start_IT+0xd0>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d009      	beq.n	80072ea <HAL_TIM_Base_Start_IT+0x76>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a1b      	ldr	r2, [pc, #108]	; (8007348 <HAL_TIM_Base_Start_IT+0xd4>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d004      	beq.n	80072ea <HAL_TIM_Base_Start_IT+0x76>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a19      	ldr	r2, [pc, #100]	; (800734c <HAL_TIM_Base_Start_IT+0xd8>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d115      	bne.n	8007316 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	689a      	ldr	r2, [r3, #8]
 80072f0:	4b17      	ldr	r3, [pc, #92]	; (8007350 <HAL_TIM_Base_Start_IT+0xdc>)
 80072f2:	4013      	ands	r3, r2
 80072f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2b06      	cmp	r3, #6
 80072fa:	d015      	beq.n	8007328 <HAL_TIM_Base_Start_IT+0xb4>
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007302:	d011      	beq.n	8007328 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f042 0201 	orr.w	r2, r2, #1
 8007312:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007314:	e008      	b.n	8007328 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f042 0201 	orr.w	r2, r2, #1
 8007324:	601a      	str	r2, [r3, #0]
 8007326:	e000      	b.n	800732a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007328:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800732a:	2300      	movs	r3, #0
}
 800732c:	4618      	mov	r0, r3
 800732e:	3714      	adds	r7, #20
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr
 8007338:	40012c00 	.word	0x40012c00
 800733c:	40000400 	.word	0x40000400
 8007340:	40000800 	.word	0x40000800
 8007344:	40000c00 	.word	0x40000c00
 8007348:	40013400 	.word	0x40013400
 800734c:	40014000 	.word	0x40014000
 8007350:	00010007 	.word	0x00010007

08007354 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007354:	b480      	push	{r7}
 8007356:	b083      	sub	sp, #12
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	68da      	ldr	r2, [r3, #12]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f022 0201 	bic.w	r2, r2, #1
 800736a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	6a1a      	ldr	r2, [r3, #32]
 8007372:	f241 1311 	movw	r3, #4369	; 0x1111
 8007376:	4013      	ands	r3, r2
 8007378:	2b00      	cmp	r3, #0
 800737a:	d10f      	bne.n	800739c <HAL_TIM_Base_Stop_IT+0x48>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	6a1a      	ldr	r2, [r3, #32]
 8007382:	f240 4344 	movw	r3, #1092	; 0x444
 8007386:	4013      	ands	r3, r2
 8007388:	2b00      	cmp	r3, #0
 800738a:	d107      	bne.n	800739c <HAL_TIM_Base_Stop_IT+0x48>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f022 0201 	bic.w	r2, r2, #1
 800739a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80073a4:	2300      	movs	r3, #0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	370c      	adds	r7, #12
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr

080073b2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073b2:	b580      	push	{r7, lr}
 80073b4:	b082      	sub	sp, #8
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	691b      	ldr	r3, [r3, #16]
 80073c0:	f003 0302 	and.w	r3, r3, #2
 80073c4:	2b02      	cmp	r3, #2
 80073c6:	d122      	bne.n	800740e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	f003 0302 	and.w	r3, r3, #2
 80073d2:	2b02      	cmp	r3, #2
 80073d4:	d11b      	bne.n	800740e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f06f 0202 	mvn.w	r2, #2
 80073de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	699b      	ldr	r3, [r3, #24]
 80073ec:	f003 0303 	and.w	r3, r3, #3
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d003      	beq.n	80073fc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 f905 	bl	8007604 <HAL_TIM_IC_CaptureCallback>
 80073fa:	e005      	b.n	8007408 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 f8f7 	bl	80075f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 f908 	bl	8007618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	691b      	ldr	r3, [r3, #16]
 8007414:	f003 0304 	and.w	r3, r3, #4
 8007418:	2b04      	cmp	r3, #4
 800741a:	d122      	bne.n	8007462 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	f003 0304 	and.w	r3, r3, #4
 8007426:	2b04      	cmp	r3, #4
 8007428:	d11b      	bne.n	8007462 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f06f 0204 	mvn.w	r2, #4
 8007432:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2202      	movs	r2, #2
 8007438:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	699b      	ldr	r3, [r3, #24]
 8007440:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007444:	2b00      	cmp	r3, #0
 8007446:	d003      	beq.n	8007450 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 f8db 	bl	8007604 <HAL_TIM_IC_CaptureCallback>
 800744e:	e005      	b.n	800745c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 f8cd 	bl	80075f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 f8de 	bl	8007618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	691b      	ldr	r3, [r3, #16]
 8007468:	f003 0308 	and.w	r3, r3, #8
 800746c:	2b08      	cmp	r3, #8
 800746e:	d122      	bne.n	80074b6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	f003 0308 	and.w	r3, r3, #8
 800747a:	2b08      	cmp	r3, #8
 800747c:	d11b      	bne.n	80074b6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f06f 0208 	mvn.w	r2, #8
 8007486:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2204      	movs	r2, #4
 800748c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	69db      	ldr	r3, [r3, #28]
 8007494:	f003 0303 	and.w	r3, r3, #3
 8007498:	2b00      	cmp	r3, #0
 800749a:	d003      	beq.n	80074a4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 f8b1 	bl	8007604 <HAL_TIM_IC_CaptureCallback>
 80074a2:	e005      	b.n	80074b0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 f8a3 	bl	80075f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 f8b4 	bl	8007618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	f003 0310 	and.w	r3, r3, #16
 80074c0:	2b10      	cmp	r3, #16
 80074c2:	d122      	bne.n	800750a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	f003 0310 	and.w	r3, r3, #16
 80074ce:	2b10      	cmp	r3, #16
 80074d0:	d11b      	bne.n	800750a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f06f 0210 	mvn.w	r2, #16
 80074da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2208      	movs	r2, #8
 80074e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	69db      	ldr	r3, [r3, #28]
 80074e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d003      	beq.n	80074f8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 f887 	bl	8007604 <HAL_TIM_IC_CaptureCallback>
 80074f6:	e005      	b.n	8007504 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 f879 	bl	80075f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 f88a 	bl	8007618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	f003 0301 	and.w	r3, r3, #1
 8007514:	2b01      	cmp	r3, #1
 8007516:	d10e      	bne.n	8007536 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	f003 0301 	and.w	r3, r3, #1
 8007522:	2b01      	cmp	r3, #1
 8007524:	d107      	bne.n	8007536 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f06f 0201 	mvn.w	r2, #1
 800752e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f7fa fdf3 	bl	800211c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	691b      	ldr	r3, [r3, #16]
 800753c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007540:	2b80      	cmp	r3, #128	; 0x80
 8007542:	d10e      	bne.n	8007562 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800754e:	2b80      	cmp	r3, #128	; 0x80
 8007550:	d107      	bne.n	8007562 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800755a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 f913 	bl	8007788 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800756c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007570:	d10e      	bne.n	8007590 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800757c:	2b80      	cmp	r3, #128	; 0x80
 800757e:	d107      	bne.n	8007590 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 f906 	bl	800779c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800759a:	2b40      	cmp	r3, #64	; 0x40
 800759c:	d10e      	bne.n	80075bc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a8:	2b40      	cmp	r3, #64	; 0x40
 80075aa:	d107      	bne.n	80075bc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80075b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 f838 	bl	800762c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	f003 0320 	and.w	r3, r3, #32
 80075c6:	2b20      	cmp	r3, #32
 80075c8:	d10e      	bne.n	80075e8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	f003 0320 	and.w	r3, r3, #32
 80075d4:	2b20      	cmp	r3, #32
 80075d6:	d107      	bne.n	80075e8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f06f 0220 	mvn.w	r2, #32
 80075e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 f8c6 	bl	8007774 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80075e8:	bf00      	nop
 80075ea:	3708      	adds	r7, #8
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80075f8:	bf00      	nop
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800760c:	bf00      	nop
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007620:	bf00      	nop
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007634:	bf00      	nop
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007640:	b480      	push	{r7}
 8007642:	b085      	sub	sp, #20
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a40      	ldr	r2, [pc, #256]	; (8007754 <TIM_Base_SetConfig+0x114>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d013      	beq.n	8007680 <TIM_Base_SetConfig+0x40>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800765e:	d00f      	beq.n	8007680 <TIM_Base_SetConfig+0x40>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4a3d      	ldr	r2, [pc, #244]	; (8007758 <TIM_Base_SetConfig+0x118>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d00b      	beq.n	8007680 <TIM_Base_SetConfig+0x40>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	4a3c      	ldr	r2, [pc, #240]	; (800775c <TIM_Base_SetConfig+0x11c>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d007      	beq.n	8007680 <TIM_Base_SetConfig+0x40>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	4a3b      	ldr	r2, [pc, #236]	; (8007760 <TIM_Base_SetConfig+0x120>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d003      	beq.n	8007680 <TIM_Base_SetConfig+0x40>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4a3a      	ldr	r2, [pc, #232]	; (8007764 <TIM_Base_SetConfig+0x124>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d108      	bne.n	8007692 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007686:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	68fa      	ldr	r2, [r7, #12]
 800768e:	4313      	orrs	r3, r2
 8007690:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4a2f      	ldr	r2, [pc, #188]	; (8007754 <TIM_Base_SetConfig+0x114>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d01f      	beq.n	80076da <TIM_Base_SetConfig+0x9a>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076a0:	d01b      	beq.n	80076da <TIM_Base_SetConfig+0x9a>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4a2c      	ldr	r2, [pc, #176]	; (8007758 <TIM_Base_SetConfig+0x118>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d017      	beq.n	80076da <TIM_Base_SetConfig+0x9a>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4a2b      	ldr	r2, [pc, #172]	; (800775c <TIM_Base_SetConfig+0x11c>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d013      	beq.n	80076da <TIM_Base_SetConfig+0x9a>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4a2a      	ldr	r2, [pc, #168]	; (8007760 <TIM_Base_SetConfig+0x120>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d00f      	beq.n	80076da <TIM_Base_SetConfig+0x9a>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4a29      	ldr	r2, [pc, #164]	; (8007764 <TIM_Base_SetConfig+0x124>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d00b      	beq.n	80076da <TIM_Base_SetConfig+0x9a>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4a28      	ldr	r2, [pc, #160]	; (8007768 <TIM_Base_SetConfig+0x128>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d007      	beq.n	80076da <TIM_Base_SetConfig+0x9a>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	4a27      	ldr	r2, [pc, #156]	; (800776c <TIM_Base_SetConfig+0x12c>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d003      	beq.n	80076da <TIM_Base_SetConfig+0x9a>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4a26      	ldr	r2, [pc, #152]	; (8007770 <TIM_Base_SetConfig+0x130>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d108      	bne.n	80076ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	695b      	ldr	r3, [r3, #20]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	689a      	ldr	r2, [r3, #8]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4a10      	ldr	r2, [pc, #64]	; (8007754 <TIM_Base_SetConfig+0x114>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d00f      	beq.n	8007738 <TIM_Base_SetConfig+0xf8>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4a12      	ldr	r2, [pc, #72]	; (8007764 <TIM_Base_SetConfig+0x124>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d00b      	beq.n	8007738 <TIM_Base_SetConfig+0xf8>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4a11      	ldr	r2, [pc, #68]	; (8007768 <TIM_Base_SetConfig+0x128>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d007      	beq.n	8007738 <TIM_Base_SetConfig+0xf8>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a10      	ldr	r2, [pc, #64]	; (800776c <TIM_Base_SetConfig+0x12c>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d003      	beq.n	8007738 <TIM_Base_SetConfig+0xf8>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4a0f      	ldr	r2, [pc, #60]	; (8007770 <TIM_Base_SetConfig+0x130>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d103      	bne.n	8007740 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	691a      	ldr	r2, [r3, #16]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	615a      	str	r2, [r3, #20]
}
 8007746:	bf00      	nop
 8007748:	3714      	adds	r7, #20
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr
 8007752:	bf00      	nop
 8007754:	40012c00 	.word	0x40012c00
 8007758:	40000400 	.word	0x40000400
 800775c:	40000800 	.word	0x40000800
 8007760:	40000c00 	.word	0x40000c00
 8007764:	40013400 	.word	0x40013400
 8007768:	40014000 	.word	0x40014000
 800776c:	40014400 	.word	0x40014400
 8007770:	40014800 	.word	0x40014800

08007774 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800777c:	bf00      	nop
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007788:	b480      	push	{r7}
 800778a:	b083      	sub	sp, #12
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007790:	bf00      	nop
 8007792:	370c      	adds	r7, #12
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800779c:	b480      	push	{r7}
 800779e:	b083      	sub	sp, #12
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80077a4:	bf00      	nop
 80077a6:	370c      	adds	r7, #12
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d101      	bne.n	80077c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e040      	b.n	8007844 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d106      	bne.n	80077d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f7fa fd08 	bl	80021e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2224      	movs	r2, #36	; 0x24
 80077dc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f022 0201 	bic.w	r2, r2, #1
 80077ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 f8c0 	bl	8007974 <UART_SetConfig>
 80077f4:	4603      	mov	r3, r0
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d101      	bne.n	80077fe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	e022      	b.n	8007844 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007802:	2b00      	cmp	r3, #0
 8007804:	d002      	beq.n	800780c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 fb6c 	bl	8007ee4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	685a      	ldr	r2, [r3, #4]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800781a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	689a      	ldr	r2, [r3, #8]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800782a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f042 0201 	orr.w	r2, r2, #1
 800783a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 fbf3 	bl	8008028 <UART_CheckIdleState>
 8007842:	4603      	mov	r3, r0
}
 8007844:	4618      	mov	r0, r3
 8007846:	3708      	adds	r7, #8
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b08a      	sub	sp, #40	; 0x28
 8007850:	af02      	add	r7, sp, #8
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	603b      	str	r3, [r7, #0]
 8007858:	4613      	mov	r3, r2
 800785a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007860:	2b20      	cmp	r3, #32
 8007862:	f040 8082 	bne.w	800796a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d002      	beq.n	8007872 <HAL_UART_Transmit+0x26>
 800786c:	88fb      	ldrh	r3, [r7, #6]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d101      	bne.n	8007876 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	e07a      	b.n	800796c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800787c:	2b01      	cmp	r3, #1
 800787e:	d101      	bne.n	8007884 <HAL_UART_Transmit+0x38>
 8007880:	2302      	movs	r3, #2
 8007882:	e073      	b.n	800796c <HAL_UART_Transmit+0x120>
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2201      	movs	r2, #1
 8007888:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2200      	movs	r2, #0
 8007890:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2221      	movs	r2, #33	; 0x21
 8007898:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800789a:	f7fa fe41 	bl	8002520 <HAL_GetTick>
 800789e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	88fa      	ldrh	r2, [r7, #6]
 80078a4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	88fa      	ldrh	r2, [r7, #6]
 80078ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078b8:	d108      	bne.n	80078cc <HAL_UART_Transmit+0x80>
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d104      	bne.n	80078cc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80078c2:	2300      	movs	r3, #0
 80078c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	61bb      	str	r3, [r7, #24]
 80078ca:	e003      	b.n	80078d4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078d0:	2300      	movs	r3, #0
 80078d2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2200      	movs	r2, #0
 80078d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80078dc:	e02d      	b.n	800793a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	9300      	str	r3, [sp, #0]
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	2200      	movs	r2, #0
 80078e6:	2180      	movs	r1, #128	; 0x80
 80078e8:	68f8      	ldr	r0, [r7, #12]
 80078ea:	f000 fbe6 	bl	80080ba <UART_WaitOnFlagUntilTimeout>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d001      	beq.n	80078f8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80078f4:	2303      	movs	r3, #3
 80078f6:	e039      	b.n	800796c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d10b      	bne.n	8007916 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	881a      	ldrh	r2, [r3, #0]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800790a:	b292      	uxth	r2, r2
 800790c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800790e:	69bb      	ldr	r3, [r7, #24]
 8007910:	3302      	adds	r3, #2
 8007912:	61bb      	str	r3, [r7, #24]
 8007914:	e008      	b.n	8007928 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	781a      	ldrb	r2, [r3, #0]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	b292      	uxth	r2, r2
 8007920:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	3301      	adds	r3, #1
 8007926:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800792e:	b29b      	uxth	r3, r3
 8007930:	3b01      	subs	r3, #1
 8007932:	b29a      	uxth	r2, r3
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007940:	b29b      	uxth	r3, r3
 8007942:	2b00      	cmp	r3, #0
 8007944:	d1cb      	bne.n	80078de <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	9300      	str	r3, [sp, #0]
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	2200      	movs	r2, #0
 800794e:	2140      	movs	r1, #64	; 0x40
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	f000 fbb2 	bl	80080ba <UART_WaitOnFlagUntilTimeout>
 8007956:	4603      	mov	r3, r0
 8007958:	2b00      	cmp	r3, #0
 800795a:	d001      	beq.n	8007960 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800795c:	2303      	movs	r3, #3
 800795e:	e005      	b.n	800796c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2220      	movs	r2, #32
 8007964:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007966:	2300      	movs	r3, #0
 8007968:	e000      	b.n	800796c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800796a:	2302      	movs	r3, #2
  }
}
 800796c:	4618      	mov	r0, r3
 800796e:	3720      	adds	r7, #32
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007974:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007978:	b08a      	sub	sp, #40	; 0x28
 800797a:	af00      	add	r7, sp, #0
 800797c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800797e:	2300      	movs	r3, #0
 8007980:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	689a      	ldr	r2, [r3, #8]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	691b      	ldr	r3, [r3, #16]
 800798c:	431a      	orrs	r2, r3
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	695b      	ldr	r3, [r3, #20]
 8007992:	431a      	orrs	r2, r3
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	69db      	ldr	r3, [r3, #28]
 8007998:	4313      	orrs	r3, r2
 800799a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	4ba4      	ldr	r3, [pc, #656]	; (8007c34 <UART_SetConfig+0x2c0>)
 80079a4:	4013      	ands	r3, r2
 80079a6:	68fa      	ldr	r2, [r7, #12]
 80079a8:	6812      	ldr	r2, [r2, #0]
 80079aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80079ac:	430b      	orrs	r3, r1
 80079ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	68da      	ldr	r2, [r3, #12]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	430a      	orrs	r2, r1
 80079c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	699b      	ldr	r3, [r3, #24]
 80079ca:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a99      	ldr	r2, [pc, #612]	; (8007c38 <UART_SetConfig+0x2c4>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d004      	beq.n	80079e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6a1b      	ldr	r3, [r3, #32]
 80079da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079dc:	4313      	orrs	r3, r2
 80079de:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079f0:	430a      	orrs	r2, r1
 80079f2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a90      	ldr	r2, [pc, #576]	; (8007c3c <UART_SetConfig+0x2c8>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d126      	bne.n	8007a4c <UART_SetConfig+0xd8>
 80079fe:	4b90      	ldr	r3, [pc, #576]	; (8007c40 <UART_SetConfig+0x2cc>)
 8007a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a04:	f003 0303 	and.w	r3, r3, #3
 8007a08:	2b03      	cmp	r3, #3
 8007a0a:	d81b      	bhi.n	8007a44 <UART_SetConfig+0xd0>
 8007a0c:	a201      	add	r2, pc, #4	; (adr r2, 8007a14 <UART_SetConfig+0xa0>)
 8007a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a12:	bf00      	nop
 8007a14:	08007a25 	.word	0x08007a25
 8007a18:	08007a35 	.word	0x08007a35
 8007a1c:	08007a2d 	.word	0x08007a2d
 8007a20:	08007a3d 	.word	0x08007a3d
 8007a24:	2301      	movs	r3, #1
 8007a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a2a:	e116      	b.n	8007c5a <UART_SetConfig+0x2e6>
 8007a2c:	2302      	movs	r3, #2
 8007a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a32:	e112      	b.n	8007c5a <UART_SetConfig+0x2e6>
 8007a34:	2304      	movs	r3, #4
 8007a36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a3a:	e10e      	b.n	8007c5a <UART_SetConfig+0x2e6>
 8007a3c:	2308      	movs	r3, #8
 8007a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a42:	e10a      	b.n	8007c5a <UART_SetConfig+0x2e6>
 8007a44:	2310      	movs	r3, #16
 8007a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a4a:	e106      	b.n	8007c5a <UART_SetConfig+0x2e6>
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a7c      	ldr	r2, [pc, #496]	; (8007c44 <UART_SetConfig+0x2d0>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d138      	bne.n	8007ac8 <UART_SetConfig+0x154>
 8007a56:	4b7a      	ldr	r3, [pc, #488]	; (8007c40 <UART_SetConfig+0x2cc>)
 8007a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a5c:	f003 030c 	and.w	r3, r3, #12
 8007a60:	2b0c      	cmp	r3, #12
 8007a62:	d82d      	bhi.n	8007ac0 <UART_SetConfig+0x14c>
 8007a64:	a201      	add	r2, pc, #4	; (adr r2, 8007a6c <UART_SetConfig+0xf8>)
 8007a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a6a:	bf00      	nop
 8007a6c:	08007aa1 	.word	0x08007aa1
 8007a70:	08007ac1 	.word	0x08007ac1
 8007a74:	08007ac1 	.word	0x08007ac1
 8007a78:	08007ac1 	.word	0x08007ac1
 8007a7c:	08007ab1 	.word	0x08007ab1
 8007a80:	08007ac1 	.word	0x08007ac1
 8007a84:	08007ac1 	.word	0x08007ac1
 8007a88:	08007ac1 	.word	0x08007ac1
 8007a8c:	08007aa9 	.word	0x08007aa9
 8007a90:	08007ac1 	.word	0x08007ac1
 8007a94:	08007ac1 	.word	0x08007ac1
 8007a98:	08007ac1 	.word	0x08007ac1
 8007a9c:	08007ab9 	.word	0x08007ab9
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007aa6:	e0d8      	b.n	8007c5a <UART_SetConfig+0x2e6>
 8007aa8:	2302      	movs	r3, #2
 8007aaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007aae:	e0d4      	b.n	8007c5a <UART_SetConfig+0x2e6>
 8007ab0:	2304      	movs	r3, #4
 8007ab2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ab6:	e0d0      	b.n	8007c5a <UART_SetConfig+0x2e6>
 8007ab8:	2308      	movs	r3, #8
 8007aba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007abe:	e0cc      	b.n	8007c5a <UART_SetConfig+0x2e6>
 8007ac0:	2310      	movs	r3, #16
 8007ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ac6:	e0c8      	b.n	8007c5a <UART_SetConfig+0x2e6>
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a5e      	ldr	r2, [pc, #376]	; (8007c48 <UART_SetConfig+0x2d4>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d125      	bne.n	8007b1e <UART_SetConfig+0x1aa>
 8007ad2:	4b5b      	ldr	r3, [pc, #364]	; (8007c40 <UART_SetConfig+0x2cc>)
 8007ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ad8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007adc:	2b30      	cmp	r3, #48	; 0x30
 8007ade:	d016      	beq.n	8007b0e <UART_SetConfig+0x19a>
 8007ae0:	2b30      	cmp	r3, #48	; 0x30
 8007ae2:	d818      	bhi.n	8007b16 <UART_SetConfig+0x1a2>
 8007ae4:	2b20      	cmp	r3, #32
 8007ae6:	d00a      	beq.n	8007afe <UART_SetConfig+0x18a>
 8007ae8:	2b20      	cmp	r3, #32
 8007aea:	d814      	bhi.n	8007b16 <UART_SetConfig+0x1a2>
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d002      	beq.n	8007af6 <UART_SetConfig+0x182>
 8007af0:	2b10      	cmp	r3, #16
 8007af2:	d008      	beq.n	8007b06 <UART_SetConfig+0x192>
 8007af4:	e00f      	b.n	8007b16 <UART_SetConfig+0x1a2>
 8007af6:	2300      	movs	r3, #0
 8007af8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007afc:	e0ad      	b.n	8007c5a <UART_SetConfig+0x2e6>
 8007afe:	2302      	movs	r3, #2
 8007b00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b04:	e0a9      	b.n	8007c5a <UART_SetConfig+0x2e6>
 8007b06:	2304      	movs	r3, #4
 8007b08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b0c:	e0a5      	b.n	8007c5a <UART_SetConfig+0x2e6>
 8007b0e:	2308      	movs	r3, #8
 8007b10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b14:	e0a1      	b.n	8007c5a <UART_SetConfig+0x2e6>
 8007b16:	2310      	movs	r3, #16
 8007b18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b1c:	e09d      	b.n	8007c5a <UART_SetConfig+0x2e6>
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a4a      	ldr	r2, [pc, #296]	; (8007c4c <UART_SetConfig+0x2d8>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d125      	bne.n	8007b74 <UART_SetConfig+0x200>
 8007b28:	4b45      	ldr	r3, [pc, #276]	; (8007c40 <UART_SetConfig+0x2cc>)
 8007b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b2e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007b32:	2bc0      	cmp	r3, #192	; 0xc0
 8007b34:	d016      	beq.n	8007b64 <UART_SetConfig+0x1f0>
 8007b36:	2bc0      	cmp	r3, #192	; 0xc0
 8007b38:	d818      	bhi.n	8007b6c <UART_SetConfig+0x1f8>
 8007b3a:	2b80      	cmp	r3, #128	; 0x80
 8007b3c:	d00a      	beq.n	8007b54 <UART_SetConfig+0x1e0>
 8007b3e:	2b80      	cmp	r3, #128	; 0x80
 8007b40:	d814      	bhi.n	8007b6c <UART_SetConfig+0x1f8>
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d002      	beq.n	8007b4c <UART_SetConfig+0x1d8>
 8007b46:	2b40      	cmp	r3, #64	; 0x40
 8007b48:	d008      	beq.n	8007b5c <UART_SetConfig+0x1e8>
 8007b4a:	e00f      	b.n	8007b6c <UART_SetConfig+0x1f8>
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b52:	e082      	b.n	8007c5a <UART_SetConfig+0x2e6>
 8007b54:	2302      	movs	r3, #2
 8007b56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b5a:	e07e      	b.n	8007c5a <UART_SetConfig+0x2e6>
 8007b5c:	2304      	movs	r3, #4
 8007b5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b62:	e07a      	b.n	8007c5a <UART_SetConfig+0x2e6>
 8007b64:	2308      	movs	r3, #8
 8007b66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b6a:	e076      	b.n	8007c5a <UART_SetConfig+0x2e6>
 8007b6c:	2310      	movs	r3, #16
 8007b6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b72:	e072      	b.n	8007c5a <UART_SetConfig+0x2e6>
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a35      	ldr	r2, [pc, #212]	; (8007c50 <UART_SetConfig+0x2dc>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d12a      	bne.n	8007bd4 <UART_SetConfig+0x260>
 8007b7e:	4b30      	ldr	r3, [pc, #192]	; (8007c40 <UART_SetConfig+0x2cc>)
 8007b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b8c:	d01a      	beq.n	8007bc4 <UART_SetConfig+0x250>
 8007b8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b92:	d81b      	bhi.n	8007bcc <UART_SetConfig+0x258>
 8007b94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b98:	d00c      	beq.n	8007bb4 <UART_SetConfig+0x240>
 8007b9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b9e:	d815      	bhi.n	8007bcc <UART_SetConfig+0x258>
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d003      	beq.n	8007bac <UART_SetConfig+0x238>
 8007ba4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ba8:	d008      	beq.n	8007bbc <UART_SetConfig+0x248>
 8007baa:	e00f      	b.n	8007bcc <UART_SetConfig+0x258>
 8007bac:	2300      	movs	r3, #0
 8007bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bb2:	e052      	b.n	8007c5a <UART_SetConfig+0x2e6>
 8007bb4:	2302      	movs	r3, #2
 8007bb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bba:	e04e      	b.n	8007c5a <UART_SetConfig+0x2e6>
 8007bbc:	2304      	movs	r3, #4
 8007bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bc2:	e04a      	b.n	8007c5a <UART_SetConfig+0x2e6>
 8007bc4:	2308      	movs	r3, #8
 8007bc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bca:	e046      	b.n	8007c5a <UART_SetConfig+0x2e6>
 8007bcc:	2310      	movs	r3, #16
 8007bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bd2:	e042      	b.n	8007c5a <UART_SetConfig+0x2e6>
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a17      	ldr	r2, [pc, #92]	; (8007c38 <UART_SetConfig+0x2c4>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d13a      	bne.n	8007c54 <UART_SetConfig+0x2e0>
 8007bde:	4b18      	ldr	r3, [pc, #96]	; (8007c40 <UART_SetConfig+0x2cc>)
 8007be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007be4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007be8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007bec:	d01a      	beq.n	8007c24 <UART_SetConfig+0x2b0>
 8007bee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007bf2:	d81b      	bhi.n	8007c2c <UART_SetConfig+0x2b8>
 8007bf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bf8:	d00c      	beq.n	8007c14 <UART_SetConfig+0x2a0>
 8007bfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bfe:	d815      	bhi.n	8007c2c <UART_SetConfig+0x2b8>
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d003      	beq.n	8007c0c <UART_SetConfig+0x298>
 8007c04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c08:	d008      	beq.n	8007c1c <UART_SetConfig+0x2a8>
 8007c0a:	e00f      	b.n	8007c2c <UART_SetConfig+0x2b8>
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c12:	e022      	b.n	8007c5a <UART_SetConfig+0x2e6>
 8007c14:	2302      	movs	r3, #2
 8007c16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c1a:	e01e      	b.n	8007c5a <UART_SetConfig+0x2e6>
 8007c1c:	2304      	movs	r3, #4
 8007c1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c22:	e01a      	b.n	8007c5a <UART_SetConfig+0x2e6>
 8007c24:	2308      	movs	r3, #8
 8007c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c2a:	e016      	b.n	8007c5a <UART_SetConfig+0x2e6>
 8007c2c:	2310      	movs	r3, #16
 8007c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c32:	e012      	b.n	8007c5a <UART_SetConfig+0x2e6>
 8007c34:	efff69f3 	.word	0xefff69f3
 8007c38:	40008000 	.word	0x40008000
 8007c3c:	40013800 	.word	0x40013800
 8007c40:	40021000 	.word	0x40021000
 8007c44:	40004400 	.word	0x40004400
 8007c48:	40004800 	.word	0x40004800
 8007c4c:	40004c00 	.word	0x40004c00
 8007c50:	40005000 	.word	0x40005000
 8007c54:	2310      	movs	r3, #16
 8007c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a9f      	ldr	r2, [pc, #636]	; (8007edc <UART_SetConfig+0x568>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d17a      	bne.n	8007d5a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007c64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c68:	2b08      	cmp	r3, #8
 8007c6a:	d824      	bhi.n	8007cb6 <UART_SetConfig+0x342>
 8007c6c:	a201      	add	r2, pc, #4	; (adr r2, 8007c74 <UART_SetConfig+0x300>)
 8007c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c72:	bf00      	nop
 8007c74:	08007c99 	.word	0x08007c99
 8007c78:	08007cb7 	.word	0x08007cb7
 8007c7c:	08007ca1 	.word	0x08007ca1
 8007c80:	08007cb7 	.word	0x08007cb7
 8007c84:	08007ca7 	.word	0x08007ca7
 8007c88:	08007cb7 	.word	0x08007cb7
 8007c8c:	08007cb7 	.word	0x08007cb7
 8007c90:	08007cb7 	.word	0x08007cb7
 8007c94:	08007caf 	.word	0x08007caf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c98:	f7fe fb8a 	bl	80063b0 <HAL_RCC_GetPCLK1Freq>
 8007c9c:	61f8      	str	r0, [r7, #28]
        break;
 8007c9e:	e010      	b.n	8007cc2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ca0:	4b8f      	ldr	r3, [pc, #572]	; (8007ee0 <UART_SetConfig+0x56c>)
 8007ca2:	61fb      	str	r3, [r7, #28]
        break;
 8007ca4:	e00d      	b.n	8007cc2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ca6:	f7fe faeb 	bl	8006280 <HAL_RCC_GetSysClockFreq>
 8007caa:	61f8      	str	r0, [r7, #28]
        break;
 8007cac:	e009      	b.n	8007cc2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cb2:	61fb      	str	r3, [r7, #28]
        break;
 8007cb4:	e005      	b.n	8007cc2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007cc0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	f000 80fb 	beq.w	8007ec0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	685a      	ldr	r2, [r3, #4]
 8007cce:	4613      	mov	r3, r2
 8007cd0:	005b      	lsls	r3, r3, #1
 8007cd2:	4413      	add	r3, r2
 8007cd4:	69fa      	ldr	r2, [r7, #28]
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d305      	bcc.n	8007ce6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007ce0:	69fa      	ldr	r2, [r7, #28]
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d903      	bls.n	8007cee <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007cec:	e0e8      	b.n	8007ec0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007cee:	69fb      	ldr	r3, [r7, #28]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	461c      	mov	r4, r3
 8007cf4:	4615      	mov	r5, r2
 8007cf6:	f04f 0200 	mov.w	r2, #0
 8007cfa:	f04f 0300 	mov.w	r3, #0
 8007cfe:	022b      	lsls	r3, r5, #8
 8007d00:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007d04:	0222      	lsls	r2, r4, #8
 8007d06:	68f9      	ldr	r1, [r7, #12]
 8007d08:	6849      	ldr	r1, [r1, #4]
 8007d0a:	0849      	lsrs	r1, r1, #1
 8007d0c:	2000      	movs	r0, #0
 8007d0e:	4688      	mov	r8, r1
 8007d10:	4681      	mov	r9, r0
 8007d12:	eb12 0a08 	adds.w	sl, r2, r8
 8007d16:	eb43 0b09 	adc.w	fp, r3, r9
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	603b      	str	r3, [r7, #0]
 8007d22:	607a      	str	r2, [r7, #4]
 8007d24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d28:	4650      	mov	r0, sl
 8007d2a:	4659      	mov	r1, fp
 8007d2c:	f7f8 ff3c 	bl	8000ba8 <__aeabi_uldivmod>
 8007d30:	4602      	mov	r2, r0
 8007d32:	460b      	mov	r3, r1
 8007d34:	4613      	mov	r3, r2
 8007d36:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d38:	69bb      	ldr	r3, [r7, #24]
 8007d3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d3e:	d308      	bcc.n	8007d52 <UART_SetConfig+0x3de>
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d46:	d204      	bcs.n	8007d52 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	69ba      	ldr	r2, [r7, #24]
 8007d4e:	60da      	str	r2, [r3, #12]
 8007d50:	e0b6      	b.n	8007ec0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007d58:	e0b2      	b.n	8007ec0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	69db      	ldr	r3, [r3, #28]
 8007d5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d62:	d15e      	bne.n	8007e22 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007d64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d68:	2b08      	cmp	r3, #8
 8007d6a:	d828      	bhi.n	8007dbe <UART_SetConfig+0x44a>
 8007d6c:	a201      	add	r2, pc, #4	; (adr r2, 8007d74 <UART_SetConfig+0x400>)
 8007d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d72:	bf00      	nop
 8007d74:	08007d99 	.word	0x08007d99
 8007d78:	08007da1 	.word	0x08007da1
 8007d7c:	08007da9 	.word	0x08007da9
 8007d80:	08007dbf 	.word	0x08007dbf
 8007d84:	08007daf 	.word	0x08007daf
 8007d88:	08007dbf 	.word	0x08007dbf
 8007d8c:	08007dbf 	.word	0x08007dbf
 8007d90:	08007dbf 	.word	0x08007dbf
 8007d94:	08007db7 	.word	0x08007db7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d98:	f7fe fb0a 	bl	80063b0 <HAL_RCC_GetPCLK1Freq>
 8007d9c:	61f8      	str	r0, [r7, #28]
        break;
 8007d9e:	e014      	b.n	8007dca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007da0:	f7fe fb1c 	bl	80063dc <HAL_RCC_GetPCLK2Freq>
 8007da4:	61f8      	str	r0, [r7, #28]
        break;
 8007da6:	e010      	b.n	8007dca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007da8:	4b4d      	ldr	r3, [pc, #308]	; (8007ee0 <UART_SetConfig+0x56c>)
 8007daa:	61fb      	str	r3, [r7, #28]
        break;
 8007dac:	e00d      	b.n	8007dca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007dae:	f7fe fa67 	bl	8006280 <HAL_RCC_GetSysClockFreq>
 8007db2:	61f8      	str	r0, [r7, #28]
        break;
 8007db4:	e009      	b.n	8007dca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007db6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dba:	61fb      	str	r3, [r7, #28]
        break;
 8007dbc:	e005      	b.n	8007dca <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007dc8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d077      	beq.n	8007ec0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007dd0:	69fb      	ldr	r3, [r7, #28]
 8007dd2:	005a      	lsls	r2, r3, #1
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	085b      	lsrs	r3, r3, #1
 8007dda:	441a      	add	r2, r3
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007de4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007de6:	69bb      	ldr	r3, [r7, #24]
 8007de8:	2b0f      	cmp	r3, #15
 8007dea:	d916      	bls.n	8007e1a <UART_SetConfig+0x4a6>
 8007dec:	69bb      	ldr	r3, [r7, #24]
 8007dee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007df2:	d212      	bcs.n	8007e1a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007df4:	69bb      	ldr	r3, [r7, #24]
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	f023 030f 	bic.w	r3, r3, #15
 8007dfc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007dfe:	69bb      	ldr	r3, [r7, #24]
 8007e00:	085b      	lsrs	r3, r3, #1
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	f003 0307 	and.w	r3, r3, #7
 8007e08:	b29a      	uxth	r2, r3
 8007e0a:	8afb      	ldrh	r3, [r7, #22]
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	8afa      	ldrh	r2, [r7, #22]
 8007e16:	60da      	str	r2, [r3, #12]
 8007e18:	e052      	b.n	8007ec0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007e20:	e04e      	b.n	8007ec0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007e22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e26:	2b08      	cmp	r3, #8
 8007e28:	d827      	bhi.n	8007e7a <UART_SetConfig+0x506>
 8007e2a:	a201      	add	r2, pc, #4	; (adr r2, 8007e30 <UART_SetConfig+0x4bc>)
 8007e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e30:	08007e55 	.word	0x08007e55
 8007e34:	08007e5d 	.word	0x08007e5d
 8007e38:	08007e65 	.word	0x08007e65
 8007e3c:	08007e7b 	.word	0x08007e7b
 8007e40:	08007e6b 	.word	0x08007e6b
 8007e44:	08007e7b 	.word	0x08007e7b
 8007e48:	08007e7b 	.word	0x08007e7b
 8007e4c:	08007e7b 	.word	0x08007e7b
 8007e50:	08007e73 	.word	0x08007e73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e54:	f7fe faac 	bl	80063b0 <HAL_RCC_GetPCLK1Freq>
 8007e58:	61f8      	str	r0, [r7, #28]
        break;
 8007e5a:	e014      	b.n	8007e86 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e5c:	f7fe fabe 	bl	80063dc <HAL_RCC_GetPCLK2Freq>
 8007e60:	61f8      	str	r0, [r7, #28]
        break;
 8007e62:	e010      	b.n	8007e86 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e64:	4b1e      	ldr	r3, [pc, #120]	; (8007ee0 <UART_SetConfig+0x56c>)
 8007e66:	61fb      	str	r3, [r7, #28]
        break;
 8007e68:	e00d      	b.n	8007e86 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e6a:	f7fe fa09 	bl	8006280 <HAL_RCC_GetSysClockFreq>
 8007e6e:	61f8      	str	r0, [r7, #28]
        break;
 8007e70:	e009      	b.n	8007e86 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e76:	61fb      	str	r3, [r7, #28]
        break;
 8007e78:	e005      	b.n	8007e86 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007e84:	bf00      	nop
    }

    if (pclk != 0U)
 8007e86:	69fb      	ldr	r3, [r7, #28]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d019      	beq.n	8007ec0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	085a      	lsrs	r2, r3, #1
 8007e92:	69fb      	ldr	r3, [r7, #28]
 8007e94:	441a      	add	r2, r3
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e9e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	2b0f      	cmp	r3, #15
 8007ea4:	d909      	bls.n	8007eba <UART_SetConfig+0x546>
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007eac:	d205      	bcs.n	8007eba <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	b29a      	uxth	r2, r3
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	60da      	str	r2, [r3, #12]
 8007eb8:	e002      	b.n	8007ec0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007ecc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3728      	adds	r7, #40	; 0x28
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007eda:	bf00      	nop
 8007edc:	40008000 	.word	0x40008000
 8007ee0:	00f42400 	.word	0x00f42400

08007ee4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b083      	sub	sp, #12
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef0:	f003 0301 	and.w	r3, r3, #1
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d00a      	beq.n	8007f0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	430a      	orrs	r2, r1
 8007f0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f12:	f003 0302 	and.w	r3, r3, #2
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d00a      	beq.n	8007f30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	430a      	orrs	r2, r1
 8007f2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f34:	f003 0304 	and.w	r3, r3, #4
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d00a      	beq.n	8007f52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	430a      	orrs	r2, r1
 8007f50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f56:	f003 0308 	and.w	r3, r3, #8
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d00a      	beq.n	8007f74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	430a      	orrs	r2, r1
 8007f72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f78:	f003 0310 	and.w	r3, r3, #16
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d00a      	beq.n	8007f96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	430a      	orrs	r2, r1
 8007f94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9a:	f003 0320 	and.w	r3, r3, #32
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d00a      	beq.n	8007fb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	430a      	orrs	r2, r1
 8007fb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d01a      	beq.n	8007ffa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	430a      	orrs	r2, r1
 8007fd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fe2:	d10a      	bne.n	8007ffa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	430a      	orrs	r2, r1
 8007ff8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008002:	2b00      	cmp	r3, #0
 8008004:	d00a      	beq.n	800801c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	430a      	orrs	r2, r1
 800801a:	605a      	str	r2, [r3, #4]
  }
}
 800801c:	bf00      	nop
 800801e:	370c      	adds	r7, #12
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr

08008028 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b086      	sub	sp, #24
 800802c:	af02      	add	r7, sp, #8
 800802e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008038:	f7fa fa72 	bl	8002520 <HAL_GetTick>
 800803c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f003 0308 	and.w	r3, r3, #8
 8008048:	2b08      	cmp	r3, #8
 800804a:	d10e      	bne.n	800806a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800804c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008050:	9300      	str	r3, [sp, #0]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2200      	movs	r2, #0
 8008056:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 f82d 	bl	80080ba <UART_WaitOnFlagUntilTimeout>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d001      	beq.n	800806a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008066:	2303      	movs	r3, #3
 8008068:	e023      	b.n	80080b2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f003 0304 	and.w	r3, r3, #4
 8008074:	2b04      	cmp	r3, #4
 8008076:	d10e      	bne.n	8008096 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008078:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800807c:	9300      	str	r3, [sp, #0]
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2200      	movs	r2, #0
 8008082:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 f817 	bl	80080ba <UART_WaitOnFlagUntilTimeout>
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d001      	beq.n	8008096 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008092:	2303      	movs	r3, #3
 8008094:	e00d      	b.n	80080b2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2220      	movs	r2, #32
 800809a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2220      	movs	r2, #32
 80080a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b09c      	sub	sp, #112	; 0x70
 80080be:	af00      	add	r7, sp, #0
 80080c0:	60f8      	str	r0, [r7, #12]
 80080c2:	60b9      	str	r1, [r7, #8]
 80080c4:	603b      	str	r3, [r7, #0]
 80080c6:	4613      	mov	r3, r2
 80080c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080ca:	e0a5      	b.n	8008218 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080d2:	f000 80a1 	beq.w	8008218 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080d6:	f7fa fa23 	bl	8002520 <HAL_GetTick>
 80080da:	4602      	mov	r2, r0
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	1ad3      	subs	r3, r2, r3
 80080e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d302      	bcc.n	80080ec <UART_WaitOnFlagUntilTimeout+0x32>
 80080e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d13e      	bne.n	800816a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080f4:	e853 3f00 	ldrex	r3, [r3]
 80080f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80080fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008100:	667b      	str	r3, [r7, #100]	; 0x64
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	461a      	mov	r2, r3
 8008108:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800810a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800810c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800810e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008110:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008112:	e841 2300 	strex	r3, r2, [r1]
 8008116:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008118:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800811a:	2b00      	cmp	r3, #0
 800811c:	d1e6      	bne.n	80080ec <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	3308      	adds	r3, #8
 8008124:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008128:	e853 3f00 	ldrex	r3, [r3]
 800812c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800812e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008130:	f023 0301 	bic.w	r3, r3, #1
 8008134:	663b      	str	r3, [r7, #96]	; 0x60
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	3308      	adds	r3, #8
 800813c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800813e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008140:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008142:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008144:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008146:	e841 2300 	strex	r3, r2, [r1]
 800814a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800814c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800814e:	2b00      	cmp	r3, #0
 8008150:	d1e5      	bne.n	800811e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2220      	movs	r2, #32
 8008156:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2220      	movs	r2, #32
 800815c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2200      	movs	r2, #0
 8008162:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008166:	2303      	movs	r3, #3
 8008168:	e067      	b.n	800823a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f003 0304 	and.w	r3, r3, #4
 8008174:	2b00      	cmp	r3, #0
 8008176:	d04f      	beq.n	8008218 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	69db      	ldr	r3, [r3, #28]
 800817e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008182:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008186:	d147      	bne.n	8008218 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008190:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800819a:	e853 3f00 	ldrex	r3, [r3]
 800819e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80081a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	461a      	mov	r2, r3
 80081ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081b0:	637b      	str	r3, [r7, #52]	; 0x34
 80081b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80081b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081b8:	e841 2300 	strex	r3, r2, [r1]
 80081bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80081be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d1e6      	bne.n	8008192 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	3308      	adds	r3, #8
 80081ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	e853 3f00 	ldrex	r3, [r3]
 80081d2:	613b      	str	r3, [r7, #16]
   return(result);
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	f023 0301 	bic.w	r3, r3, #1
 80081da:	66bb      	str	r3, [r7, #104]	; 0x68
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	3308      	adds	r3, #8
 80081e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80081e4:	623a      	str	r2, [r7, #32]
 80081e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e8:	69f9      	ldr	r1, [r7, #28]
 80081ea:	6a3a      	ldr	r2, [r7, #32]
 80081ec:	e841 2300 	strex	r3, r2, [r1]
 80081f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80081f2:	69bb      	ldr	r3, [r7, #24]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d1e5      	bne.n	80081c4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2220      	movs	r2, #32
 80081fc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2220      	movs	r2, #32
 8008202:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2220      	movs	r2, #32
 8008208:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2200      	movs	r2, #0
 8008210:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008214:	2303      	movs	r3, #3
 8008216:	e010      	b.n	800823a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	69da      	ldr	r2, [r3, #28]
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	4013      	ands	r3, r2
 8008222:	68ba      	ldr	r2, [r7, #8]
 8008224:	429a      	cmp	r2, r3
 8008226:	bf0c      	ite	eq
 8008228:	2301      	moveq	r3, #1
 800822a:	2300      	movne	r3, #0
 800822c:	b2db      	uxtb	r3, r3
 800822e:	461a      	mov	r2, r3
 8008230:	79fb      	ldrb	r3, [r7, #7]
 8008232:	429a      	cmp	r2, r3
 8008234:	f43f af4a 	beq.w	80080cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008238:	2300      	movs	r3, #0
}
 800823a:	4618      	mov	r0, r3
 800823c:	3770      	adds	r7, #112	; 0x70
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
	...

08008244 <__errno>:
 8008244:	4b01      	ldr	r3, [pc, #4]	; (800824c <__errno+0x8>)
 8008246:	6818      	ldr	r0, [r3, #0]
 8008248:	4770      	bx	lr
 800824a:	bf00      	nop
 800824c:	2000000c 	.word	0x2000000c

08008250 <__libc_init_array>:
 8008250:	b570      	push	{r4, r5, r6, lr}
 8008252:	4d0d      	ldr	r5, [pc, #52]	; (8008288 <__libc_init_array+0x38>)
 8008254:	4c0d      	ldr	r4, [pc, #52]	; (800828c <__libc_init_array+0x3c>)
 8008256:	1b64      	subs	r4, r4, r5
 8008258:	10a4      	asrs	r4, r4, #2
 800825a:	2600      	movs	r6, #0
 800825c:	42a6      	cmp	r6, r4
 800825e:	d109      	bne.n	8008274 <__libc_init_array+0x24>
 8008260:	4d0b      	ldr	r5, [pc, #44]	; (8008290 <__libc_init_array+0x40>)
 8008262:	4c0c      	ldr	r4, [pc, #48]	; (8008294 <__libc_init_array+0x44>)
 8008264:	f002 ff04 	bl	800b070 <_init>
 8008268:	1b64      	subs	r4, r4, r5
 800826a:	10a4      	asrs	r4, r4, #2
 800826c:	2600      	movs	r6, #0
 800826e:	42a6      	cmp	r6, r4
 8008270:	d105      	bne.n	800827e <__libc_init_array+0x2e>
 8008272:	bd70      	pop	{r4, r5, r6, pc}
 8008274:	f855 3b04 	ldr.w	r3, [r5], #4
 8008278:	4798      	blx	r3
 800827a:	3601      	adds	r6, #1
 800827c:	e7ee      	b.n	800825c <__libc_init_array+0xc>
 800827e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008282:	4798      	blx	r3
 8008284:	3601      	adds	r6, #1
 8008286:	e7f2      	b.n	800826e <__libc_init_array+0x1e>
 8008288:	0800b55c 	.word	0x0800b55c
 800828c:	0800b55c 	.word	0x0800b55c
 8008290:	0800b55c 	.word	0x0800b55c
 8008294:	0800b560 	.word	0x0800b560

08008298 <memset>:
 8008298:	4402      	add	r2, r0
 800829a:	4603      	mov	r3, r0
 800829c:	4293      	cmp	r3, r2
 800829e:	d100      	bne.n	80082a2 <memset+0xa>
 80082a0:	4770      	bx	lr
 80082a2:	f803 1b01 	strb.w	r1, [r3], #1
 80082a6:	e7f9      	b.n	800829c <memset+0x4>

080082a8 <__cvt>:
 80082a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082ac:	ec55 4b10 	vmov	r4, r5, d0
 80082b0:	2d00      	cmp	r5, #0
 80082b2:	460e      	mov	r6, r1
 80082b4:	4619      	mov	r1, r3
 80082b6:	462b      	mov	r3, r5
 80082b8:	bfbb      	ittet	lt
 80082ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80082be:	461d      	movlt	r5, r3
 80082c0:	2300      	movge	r3, #0
 80082c2:	232d      	movlt	r3, #45	; 0x2d
 80082c4:	700b      	strb	r3, [r1, #0]
 80082c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80082cc:	4691      	mov	r9, r2
 80082ce:	f023 0820 	bic.w	r8, r3, #32
 80082d2:	bfbc      	itt	lt
 80082d4:	4622      	movlt	r2, r4
 80082d6:	4614      	movlt	r4, r2
 80082d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80082dc:	d005      	beq.n	80082ea <__cvt+0x42>
 80082de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80082e2:	d100      	bne.n	80082e6 <__cvt+0x3e>
 80082e4:	3601      	adds	r6, #1
 80082e6:	2102      	movs	r1, #2
 80082e8:	e000      	b.n	80082ec <__cvt+0x44>
 80082ea:	2103      	movs	r1, #3
 80082ec:	ab03      	add	r3, sp, #12
 80082ee:	9301      	str	r3, [sp, #4]
 80082f0:	ab02      	add	r3, sp, #8
 80082f2:	9300      	str	r3, [sp, #0]
 80082f4:	ec45 4b10 	vmov	d0, r4, r5
 80082f8:	4653      	mov	r3, sl
 80082fa:	4632      	mov	r2, r6
 80082fc:	f000 fcec 	bl	8008cd8 <_dtoa_r>
 8008300:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008304:	4607      	mov	r7, r0
 8008306:	d102      	bne.n	800830e <__cvt+0x66>
 8008308:	f019 0f01 	tst.w	r9, #1
 800830c:	d022      	beq.n	8008354 <__cvt+0xac>
 800830e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008312:	eb07 0906 	add.w	r9, r7, r6
 8008316:	d110      	bne.n	800833a <__cvt+0x92>
 8008318:	783b      	ldrb	r3, [r7, #0]
 800831a:	2b30      	cmp	r3, #48	; 0x30
 800831c:	d10a      	bne.n	8008334 <__cvt+0x8c>
 800831e:	2200      	movs	r2, #0
 8008320:	2300      	movs	r3, #0
 8008322:	4620      	mov	r0, r4
 8008324:	4629      	mov	r1, r5
 8008326:	f7f8 fbcf 	bl	8000ac8 <__aeabi_dcmpeq>
 800832a:	b918      	cbnz	r0, 8008334 <__cvt+0x8c>
 800832c:	f1c6 0601 	rsb	r6, r6, #1
 8008330:	f8ca 6000 	str.w	r6, [sl]
 8008334:	f8da 3000 	ldr.w	r3, [sl]
 8008338:	4499      	add	r9, r3
 800833a:	2200      	movs	r2, #0
 800833c:	2300      	movs	r3, #0
 800833e:	4620      	mov	r0, r4
 8008340:	4629      	mov	r1, r5
 8008342:	f7f8 fbc1 	bl	8000ac8 <__aeabi_dcmpeq>
 8008346:	b108      	cbz	r0, 800834c <__cvt+0xa4>
 8008348:	f8cd 900c 	str.w	r9, [sp, #12]
 800834c:	2230      	movs	r2, #48	; 0x30
 800834e:	9b03      	ldr	r3, [sp, #12]
 8008350:	454b      	cmp	r3, r9
 8008352:	d307      	bcc.n	8008364 <__cvt+0xbc>
 8008354:	9b03      	ldr	r3, [sp, #12]
 8008356:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008358:	1bdb      	subs	r3, r3, r7
 800835a:	4638      	mov	r0, r7
 800835c:	6013      	str	r3, [r2, #0]
 800835e:	b004      	add	sp, #16
 8008360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008364:	1c59      	adds	r1, r3, #1
 8008366:	9103      	str	r1, [sp, #12]
 8008368:	701a      	strb	r2, [r3, #0]
 800836a:	e7f0      	b.n	800834e <__cvt+0xa6>

0800836c <__exponent>:
 800836c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800836e:	4603      	mov	r3, r0
 8008370:	2900      	cmp	r1, #0
 8008372:	bfb8      	it	lt
 8008374:	4249      	neglt	r1, r1
 8008376:	f803 2b02 	strb.w	r2, [r3], #2
 800837a:	bfb4      	ite	lt
 800837c:	222d      	movlt	r2, #45	; 0x2d
 800837e:	222b      	movge	r2, #43	; 0x2b
 8008380:	2909      	cmp	r1, #9
 8008382:	7042      	strb	r2, [r0, #1]
 8008384:	dd2a      	ble.n	80083dc <__exponent+0x70>
 8008386:	f10d 0407 	add.w	r4, sp, #7
 800838a:	46a4      	mov	ip, r4
 800838c:	270a      	movs	r7, #10
 800838e:	46a6      	mov	lr, r4
 8008390:	460a      	mov	r2, r1
 8008392:	fb91 f6f7 	sdiv	r6, r1, r7
 8008396:	fb07 1516 	mls	r5, r7, r6, r1
 800839a:	3530      	adds	r5, #48	; 0x30
 800839c:	2a63      	cmp	r2, #99	; 0x63
 800839e:	f104 34ff 	add.w	r4, r4, #4294967295
 80083a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80083a6:	4631      	mov	r1, r6
 80083a8:	dcf1      	bgt.n	800838e <__exponent+0x22>
 80083aa:	3130      	adds	r1, #48	; 0x30
 80083ac:	f1ae 0502 	sub.w	r5, lr, #2
 80083b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80083b4:	1c44      	adds	r4, r0, #1
 80083b6:	4629      	mov	r1, r5
 80083b8:	4561      	cmp	r1, ip
 80083ba:	d30a      	bcc.n	80083d2 <__exponent+0x66>
 80083bc:	f10d 0209 	add.w	r2, sp, #9
 80083c0:	eba2 020e 	sub.w	r2, r2, lr
 80083c4:	4565      	cmp	r5, ip
 80083c6:	bf88      	it	hi
 80083c8:	2200      	movhi	r2, #0
 80083ca:	4413      	add	r3, r2
 80083cc:	1a18      	subs	r0, r3, r0
 80083ce:	b003      	add	sp, #12
 80083d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80083da:	e7ed      	b.n	80083b8 <__exponent+0x4c>
 80083dc:	2330      	movs	r3, #48	; 0x30
 80083de:	3130      	adds	r1, #48	; 0x30
 80083e0:	7083      	strb	r3, [r0, #2]
 80083e2:	70c1      	strb	r1, [r0, #3]
 80083e4:	1d03      	adds	r3, r0, #4
 80083e6:	e7f1      	b.n	80083cc <__exponent+0x60>

080083e8 <_printf_float>:
 80083e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ec:	ed2d 8b02 	vpush	{d8}
 80083f0:	b08d      	sub	sp, #52	; 0x34
 80083f2:	460c      	mov	r4, r1
 80083f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80083f8:	4616      	mov	r6, r2
 80083fa:	461f      	mov	r7, r3
 80083fc:	4605      	mov	r5, r0
 80083fe:	f001 fa59 	bl	80098b4 <_localeconv_r>
 8008402:	f8d0 a000 	ldr.w	sl, [r0]
 8008406:	4650      	mov	r0, sl
 8008408:	f7f7 fee2 	bl	80001d0 <strlen>
 800840c:	2300      	movs	r3, #0
 800840e:	930a      	str	r3, [sp, #40]	; 0x28
 8008410:	6823      	ldr	r3, [r4, #0]
 8008412:	9305      	str	r3, [sp, #20]
 8008414:	f8d8 3000 	ldr.w	r3, [r8]
 8008418:	f894 b018 	ldrb.w	fp, [r4, #24]
 800841c:	3307      	adds	r3, #7
 800841e:	f023 0307 	bic.w	r3, r3, #7
 8008422:	f103 0208 	add.w	r2, r3, #8
 8008426:	f8c8 2000 	str.w	r2, [r8]
 800842a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008432:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008436:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800843a:	9307      	str	r3, [sp, #28]
 800843c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008440:	ee08 0a10 	vmov	s16, r0
 8008444:	4b9f      	ldr	r3, [pc, #636]	; (80086c4 <_printf_float+0x2dc>)
 8008446:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800844a:	f04f 32ff 	mov.w	r2, #4294967295
 800844e:	f7f8 fb6d 	bl	8000b2c <__aeabi_dcmpun>
 8008452:	bb88      	cbnz	r0, 80084b8 <_printf_float+0xd0>
 8008454:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008458:	4b9a      	ldr	r3, [pc, #616]	; (80086c4 <_printf_float+0x2dc>)
 800845a:	f04f 32ff 	mov.w	r2, #4294967295
 800845e:	f7f8 fb47 	bl	8000af0 <__aeabi_dcmple>
 8008462:	bb48      	cbnz	r0, 80084b8 <_printf_float+0xd0>
 8008464:	2200      	movs	r2, #0
 8008466:	2300      	movs	r3, #0
 8008468:	4640      	mov	r0, r8
 800846a:	4649      	mov	r1, r9
 800846c:	f7f8 fb36 	bl	8000adc <__aeabi_dcmplt>
 8008470:	b110      	cbz	r0, 8008478 <_printf_float+0x90>
 8008472:	232d      	movs	r3, #45	; 0x2d
 8008474:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008478:	4b93      	ldr	r3, [pc, #588]	; (80086c8 <_printf_float+0x2e0>)
 800847a:	4894      	ldr	r0, [pc, #592]	; (80086cc <_printf_float+0x2e4>)
 800847c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008480:	bf94      	ite	ls
 8008482:	4698      	movls	r8, r3
 8008484:	4680      	movhi	r8, r0
 8008486:	2303      	movs	r3, #3
 8008488:	6123      	str	r3, [r4, #16]
 800848a:	9b05      	ldr	r3, [sp, #20]
 800848c:	f023 0204 	bic.w	r2, r3, #4
 8008490:	6022      	str	r2, [r4, #0]
 8008492:	f04f 0900 	mov.w	r9, #0
 8008496:	9700      	str	r7, [sp, #0]
 8008498:	4633      	mov	r3, r6
 800849a:	aa0b      	add	r2, sp, #44	; 0x2c
 800849c:	4621      	mov	r1, r4
 800849e:	4628      	mov	r0, r5
 80084a0:	f000 f9d8 	bl	8008854 <_printf_common>
 80084a4:	3001      	adds	r0, #1
 80084a6:	f040 8090 	bne.w	80085ca <_printf_float+0x1e2>
 80084aa:	f04f 30ff 	mov.w	r0, #4294967295
 80084ae:	b00d      	add	sp, #52	; 0x34
 80084b0:	ecbd 8b02 	vpop	{d8}
 80084b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084b8:	4642      	mov	r2, r8
 80084ba:	464b      	mov	r3, r9
 80084bc:	4640      	mov	r0, r8
 80084be:	4649      	mov	r1, r9
 80084c0:	f7f8 fb34 	bl	8000b2c <__aeabi_dcmpun>
 80084c4:	b140      	cbz	r0, 80084d8 <_printf_float+0xf0>
 80084c6:	464b      	mov	r3, r9
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	bfbc      	itt	lt
 80084cc:	232d      	movlt	r3, #45	; 0x2d
 80084ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80084d2:	487f      	ldr	r0, [pc, #508]	; (80086d0 <_printf_float+0x2e8>)
 80084d4:	4b7f      	ldr	r3, [pc, #508]	; (80086d4 <_printf_float+0x2ec>)
 80084d6:	e7d1      	b.n	800847c <_printf_float+0x94>
 80084d8:	6863      	ldr	r3, [r4, #4]
 80084da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80084de:	9206      	str	r2, [sp, #24]
 80084e0:	1c5a      	adds	r2, r3, #1
 80084e2:	d13f      	bne.n	8008564 <_printf_float+0x17c>
 80084e4:	2306      	movs	r3, #6
 80084e6:	6063      	str	r3, [r4, #4]
 80084e8:	9b05      	ldr	r3, [sp, #20]
 80084ea:	6861      	ldr	r1, [r4, #4]
 80084ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80084f0:	2300      	movs	r3, #0
 80084f2:	9303      	str	r3, [sp, #12]
 80084f4:	ab0a      	add	r3, sp, #40	; 0x28
 80084f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80084fa:	ab09      	add	r3, sp, #36	; 0x24
 80084fc:	ec49 8b10 	vmov	d0, r8, r9
 8008500:	9300      	str	r3, [sp, #0]
 8008502:	6022      	str	r2, [r4, #0]
 8008504:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008508:	4628      	mov	r0, r5
 800850a:	f7ff fecd 	bl	80082a8 <__cvt>
 800850e:	9b06      	ldr	r3, [sp, #24]
 8008510:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008512:	2b47      	cmp	r3, #71	; 0x47
 8008514:	4680      	mov	r8, r0
 8008516:	d108      	bne.n	800852a <_printf_float+0x142>
 8008518:	1cc8      	adds	r0, r1, #3
 800851a:	db02      	blt.n	8008522 <_printf_float+0x13a>
 800851c:	6863      	ldr	r3, [r4, #4]
 800851e:	4299      	cmp	r1, r3
 8008520:	dd41      	ble.n	80085a6 <_printf_float+0x1be>
 8008522:	f1ab 0b02 	sub.w	fp, fp, #2
 8008526:	fa5f fb8b 	uxtb.w	fp, fp
 800852a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800852e:	d820      	bhi.n	8008572 <_printf_float+0x18a>
 8008530:	3901      	subs	r1, #1
 8008532:	465a      	mov	r2, fp
 8008534:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008538:	9109      	str	r1, [sp, #36]	; 0x24
 800853a:	f7ff ff17 	bl	800836c <__exponent>
 800853e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008540:	1813      	adds	r3, r2, r0
 8008542:	2a01      	cmp	r2, #1
 8008544:	4681      	mov	r9, r0
 8008546:	6123      	str	r3, [r4, #16]
 8008548:	dc02      	bgt.n	8008550 <_printf_float+0x168>
 800854a:	6822      	ldr	r2, [r4, #0]
 800854c:	07d2      	lsls	r2, r2, #31
 800854e:	d501      	bpl.n	8008554 <_printf_float+0x16c>
 8008550:	3301      	adds	r3, #1
 8008552:	6123      	str	r3, [r4, #16]
 8008554:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008558:	2b00      	cmp	r3, #0
 800855a:	d09c      	beq.n	8008496 <_printf_float+0xae>
 800855c:	232d      	movs	r3, #45	; 0x2d
 800855e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008562:	e798      	b.n	8008496 <_printf_float+0xae>
 8008564:	9a06      	ldr	r2, [sp, #24]
 8008566:	2a47      	cmp	r2, #71	; 0x47
 8008568:	d1be      	bne.n	80084e8 <_printf_float+0x100>
 800856a:	2b00      	cmp	r3, #0
 800856c:	d1bc      	bne.n	80084e8 <_printf_float+0x100>
 800856e:	2301      	movs	r3, #1
 8008570:	e7b9      	b.n	80084e6 <_printf_float+0xfe>
 8008572:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008576:	d118      	bne.n	80085aa <_printf_float+0x1c2>
 8008578:	2900      	cmp	r1, #0
 800857a:	6863      	ldr	r3, [r4, #4]
 800857c:	dd0b      	ble.n	8008596 <_printf_float+0x1ae>
 800857e:	6121      	str	r1, [r4, #16]
 8008580:	b913      	cbnz	r3, 8008588 <_printf_float+0x1a0>
 8008582:	6822      	ldr	r2, [r4, #0]
 8008584:	07d0      	lsls	r0, r2, #31
 8008586:	d502      	bpl.n	800858e <_printf_float+0x1a6>
 8008588:	3301      	adds	r3, #1
 800858a:	440b      	add	r3, r1
 800858c:	6123      	str	r3, [r4, #16]
 800858e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008590:	f04f 0900 	mov.w	r9, #0
 8008594:	e7de      	b.n	8008554 <_printf_float+0x16c>
 8008596:	b913      	cbnz	r3, 800859e <_printf_float+0x1b6>
 8008598:	6822      	ldr	r2, [r4, #0]
 800859a:	07d2      	lsls	r2, r2, #31
 800859c:	d501      	bpl.n	80085a2 <_printf_float+0x1ba>
 800859e:	3302      	adds	r3, #2
 80085a0:	e7f4      	b.n	800858c <_printf_float+0x1a4>
 80085a2:	2301      	movs	r3, #1
 80085a4:	e7f2      	b.n	800858c <_printf_float+0x1a4>
 80085a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80085aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085ac:	4299      	cmp	r1, r3
 80085ae:	db05      	blt.n	80085bc <_printf_float+0x1d4>
 80085b0:	6823      	ldr	r3, [r4, #0]
 80085b2:	6121      	str	r1, [r4, #16]
 80085b4:	07d8      	lsls	r0, r3, #31
 80085b6:	d5ea      	bpl.n	800858e <_printf_float+0x1a6>
 80085b8:	1c4b      	adds	r3, r1, #1
 80085ba:	e7e7      	b.n	800858c <_printf_float+0x1a4>
 80085bc:	2900      	cmp	r1, #0
 80085be:	bfd4      	ite	le
 80085c0:	f1c1 0202 	rsble	r2, r1, #2
 80085c4:	2201      	movgt	r2, #1
 80085c6:	4413      	add	r3, r2
 80085c8:	e7e0      	b.n	800858c <_printf_float+0x1a4>
 80085ca:	6823      	ldr	r3, [r4, #0]
 80085cc:	055a      	lsls	r2, r3, #21
 80085ce:	d407      	bmi.n	80085e0 <_printf_float+0x1f8>
 80085d0:	6923      	ldr	r3, [r4, #16]
 80085d2:	4642      	mov	r2, r8
 80085d4:	4631      	mov	r1, r6
 80085d6:	4628      	mov	r0, r5
 80085d8:	47b8      	blx	r7
 80085da:	3001      	adds	r0, #1
 80085dc:	d12c      	bne.n	8008638 <_printf_float+0x250>
 80085de:	e764      	b.n	80084aa <_printf_float+0xc2>
 80085e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80085e4:	f240 80e0 	bls.w	80087a8 <_printf_float+0x3c0>
 80085e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80085ec:	2200      	movs	r2, #0
 80085ee:	2300      	movs	r3, #0
 80085f0:	f7f8 fa6a 	bl	8000ac8 <__aeabi_dcmpeq>
 80085f4:	2800      	cmp	r0, #0
 80085f6:	d034      	beq.n	8008662 <_printf_float+0x27a>
 80085f8:	4a37      	ldr	r2, [pc, #220]	; (80086d8 <_printf_float+0x2f0>)
 80085fa:	2301      	movs	r3, #1
 80085fc:	4631      	mov	r1, r6
 80085fe:	4628      	mov	r0, r5
 8008600:	47b8      	blx	r7
 8008602:	3001      	adds	r0, #1
 8008604:	f43f af51 	beq.w	80084aa <_printf_float+0xc2>
 8008608:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800860c:	429a      	cmp	r2, r3
 800860e:	db02      	blt.n	8008616 <_printf_float+0x22e>
 8008610:	6823      	ldr	r3, [r4, #0]
 8008612:	07d8      	lsls	r0, r3, #31
 8008614:	d510      	bpl.n	8008638 <_printf_float+0x250>
 8008616:	ee18 3a10 	vmov	r3, s16
 800861a:	4652      	mov	r2, sl
 800861c:	4631      	mov	r1, r6
 800861e:	4628      	mov	r0, r5
 8008620:	47b8      	blx	r7
 8008622:	3001      	adds	r0, #1
 8008624:	f43f af41 	beq.w	80084aa <_printf_float+0xc2>
 8008628:	f04f 0800 	mov.w	r8, #0
 800862c:	f104 091a 	add.w	r9, r4, #26
 8008630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008632:	3b01      	subs	r3, #1
 8008634:	4543      	cmp	r3, r8
 8008636:	dc09      	bgt.n	800864c <_printf_float+0x264>
 8008638:	6823      	ldr	r3, [r4, #0]
 800863a:	079b      	lsls	r3, r3, #30
 800863c:	f100 8105 	bmi.w	800884a <_printf_float+0x462>
 8008640:	68e0      	ldr	r0, [r4, #12]
 8008642:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008644:	4298      	cmp	r0, r3
 8008646:	bfb8      	it	lt
 8008648:	4618      	movlt	r0, r3
 800864a:	e730      	b.n	80084ae <_printf_float+0xc6>
 800864c:	2301      	movs	r3, #1
 800864e:	464a      	mov	r2, r9
 8008650:	4631      	mov	r1, r6
 8008652:	4628      	mov	r0, r5
 8008654:	47b8      	blx	r7
 8008656:	3001      	adds	r0, #1
 8008658:	f43f af27 	beq.w	80084aa <_printf_float+0xc2>
 800865c:	f108 0801 	add.w	r8, r8, #1
 8008660:	e7e6      	b.n	8008630 <_printf_float+0x248>
 8008662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008664:	2b00      	cmp	r3, #0
 8008666:	dc39      	bgt.n	80086dc <_printf_float+0x2f4>
 8008668:	4a1b      	ldr	r2, [pc, #108]	; (80086d8 <_printf_float+0x2f0>)
 800866a:	2301      	movs	r3, #1
 800866c:	4631      	mov	r1, r6
 800866e:	4628      	mov	r0, r5
 8008670:	47b8      	blx	r7
 8008672:	3001      	adds	r0, #1
 8008674:	f43f af19 	beq.w	80084aa <_printf_float+0xc2>
 8008678:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800867c:	4313      	orrs	r3, r2
 800867e:	d102      	bne.n	8008686 <_printf_float+0x29e>
 8008680:	6823      	ldr	r3, [r4, #0]
 8008682:	07d9      	lsls	r1, r3, #31
 8008684:	d5d8      	bpl.n	8008638 <_printf_float+0x250>
 8008686:	ee18 3a10 	vmov	r3, s16
 800868a:	4652      	mov	r2, sl
 800868c:	4631      	mov	r1, r6
 800868e:	4628      	mov	r0, r5
 8008690:	47b8      	blx	r7
 8008692:	3001      	adds	r0, #1
 8008694:	f43f af09 	beq.w	80084aa <_printf_float+0xc2>
 8008698:	f04f 0900 	mov.w	r9, #0
 800869c:	f104 0a1a 	add.w	sl, r4, #26
 80086a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086a2:	425b      	negs	r3, r3
 80086a4:	454b      	cmp	r3, r9
 80086a6:	dc01      	bgt.n	80086ac <_printf_float+0x2c4>
 80086a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086aa:	e792      	b.n	80085d2 <_printf_float+0x1ea>
 80086ac:	2301      	movs	r3, #1
 80086ae:	4652      	mov	r2, sl
 80086b0:	4631      	mov	r1, r6
 80086b2:	4628      	mov	r0, r5
 80086b4:	47b8      	blx	r7
 80086b6:	3001      	adds	r0, #1
 80086b8:	f43f aef7 	beq.w	80084aa <_printf_float+0xc2>
 80086bc:	f109 0901 	add.w	r9, r9, #1
 80086c0:	e7ee      	b.n	80086a0 <_printf_float+0x2b8>
 80086c2:	bf00      	nop
 80086c4:	7fefffff 	.word	0x7fefffff
 80086c8:	0800b17c 	.word	0x0800b17c
 80086cc:	0800b180 	.word	0x0800b180
 80086d0:	0800b188 	.word	0x0800b188
 80086d4:	0800b184 	.word	0x0800b184
 80086d8:	0800b18c 	.word	0x0800b18c
 80086dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80086e0:	429a      	cmp	r2, r3
 80086e2:	bfa8      	it	ge
 80086e4:	461a      	movge	r2, r3
 80086e6:	2a00      	cmp	r2, #0
 80086e8:	4691      	mov	r9, r2
 80086ea:	dc37      	bgt.n	800875c <_printf_float+0x374>
 80086ec:	f04f 0b00 	mov.w	fp, #0
 80086f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80086f4:	f104 021a 	add.w	r2, r4, #26
 80086f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80086fa:	9305      	str	r3, [sp, #20]
 80086fc:	eba3 0309 	sub.w	r3, r3, r9
 8008700:	455b      	cmp	r3, fp
 8008702:	dc33      	bgt.n	800876c <_printf_float+0x384>
 8008704:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008708:	429a      	cmp	r2, r3
 800870a:	db3b      	blt.n	8008784 <_printf_float+0x39c>
 800870c:	6823      	ldr	r3, [r4, #0]
 800870e:	07da      	lsls	r2, r3, #31
 8008710:	d438      	bmi.n	8008784 <_printf_float+0x39c>
 8008712:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008714:	9a05      	ldr	r2, [sp, #20]
 8008716:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008718:	1a9a      	subs	r2, r3, r2
 800871a:	eba3 0901 	sub.w	r9, r3, r1
 800871e:	4591      	cmp	r9, r2
 8008720:	bfa8      	it	ge
 8008722:	4691      	movge	r9, r2
 8008724:	f1b9 0f00 	cmp.w	r9, #0
 8008728:	dc35      	bgt.n	8008796 <_printf_float+0x3ae>
 800872a:	f04f 0800 	mov.w	r8, #0
 800872e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008732:	f104 0a1a 	add.w	sl, r4, #26
 8008736:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800873a:	1a9b      	subs	r3, r3, r2
 800873c:	eba3 0309 	sub.w	r3, r3, r9
 8008740:	4543      	cmp	r3, r8
 8008742:	f77f af79 	ble.w	8008638 <_printf_float+0x250>
 8008746:	2301      	movs	r3, #1
 8008748:	4652      	mov	r2, sl
 800874a:	4631      	mov	r1, r6
 800874c:	4628      	mov	r0, r5
 800874e:	47b8      	blx	r7
 8008750:	3001      	adds	r0, #1
 8008752:	f43f aeaa 	beq.w	80084aa <_printf_float+0xc2>
 8008756:	f108 0801 	add.w	r8, r8, #1
 800875a:	e7ec      	b.n	8008736 <_printf_float+0x34e>
 800875c:	4613      	mov	r3, r2
 800875e:	4631      	mov	r1, r6
 8008760:	4642      	mov	r2, r8
 8008762:	4628      	mov	r0, r5
 8008764:	47b8      	blx	r7
 8008766:	3001      	adds	r0, #1
 8008768:	d1c0      	bne.n	80086ec <_printf_float+0x304>
 800876a:	e69e      	b.n	80084aa <_printf_float+0xc2>
 800876c:	2301      	movs	r3, #1
 800876e:	4631      	mov	r1, r6
 8008770:	4628      	mov	r0, r5
 8008772:	9205      	str	r2, [sp, #20]
 8008774:	47b8      	blx	r7
 8008776:	3001      	adds	r0, #1
 8008778:	f43f ae97 	beq.w	80084aa <_printf_float+0xc2>
 800877c:	9a05      	ldr	r2, [sp, #20]
 800877e:	f10b 0b01 	add.w	fp, fp, #1
 8008782:	e7b9      	b.n	80086f8 <_printf_float+0x310>
 8008784:	ee18 3a10 	vmov	r3, s16
 8008788:	4652      	mov	r2, sl
 800878a:	4631      	mov	r1, r6
 800878c:	4628      	mov	r0, r5
 800878e:	47b8      	blx	r7
 8008790:	3001      	adds	r0, #1
 8008792:	d1be      	bne.n	8008712 <_printf_float+0x32a>
 8008794:	e689      	b.n	80084aa <_printf_float+0xc2>
 8008796:	9a05      	ldr	r2, [sp, #20]
 8008798:	464b      	mov	r3, r9
 800879a:	4442      	add	r2, r8
 800879c:	4631      	mov	r1, r6
 800879e:	4628      	mov	r0, r5
 80087a0:	47b8      	blx	r7
 80087a2:	3001      	adds	r0, #1
 80087a4:	d1c1      	bne.n	800872a <_printf_float+0x342>
 80087a6:	e680      	b.n	80084aa <_printf_float+0xc2>
 80087a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087aa:	2a01      	cmp	r2, #1
 80087ac:	dc01      	bgt.n	80087b2 <_printf_float+0x3ca>
 80087ae:	07db      	lsls	r3, r3, #31
 80087b0:	d538      	bpl.n	8008824 <_printf_float+0x43c>
 80087b2:	2301      	movs	r3, #1
 80087b4:	4642      	mov	r2, r8
 80087b6:	4631      	mov	r1, r6
 80087b8:	4628      	mov	r0, r5
 80087ba:	47b8      	blx	r7
 80087bc:	3001      	adds	r0, #1
 80087be:	f43f ae74 	beq.w	80084aa <_printf_float+0xc2>
 80087c2:	ee18 3a10 	vmov	r3, s16
 80087c6:	4652      	mov	r2, sl
 80087c8:	4631      	mov	r1, r6
 80087ca:	4628      	mov	r0, r5
 80087cc:	47b8      	blx	r7
 80087ce:	3001      	adds	r0, #1
 80087d0:	f43f ae6b 	beq.w	80084aa <_printf_float+0xc2>
 80087d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80087d8:	2200      	movs	r2, #0
 80087da:	2300      	movs	r3, #0
 80087dc:	f7f8 f974 	bl	8000ac8 <__aeabi_dcmpeq>
 80087e0:	b9d8      	cbnz	r0, 800881a <_printf_float+0x432>
 80087e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087e4:	f108 0201 	add.w	r2, r8, #1
 80087e8:	3b01      	subs	r3, #1
 80087ea:	4631      	mov	r1, r6
 80087ec:	4628      	mov	r0, r5
 80087ee:	47b8      	blx	r7
 80087f0:	3001      	adds	r0, #1
 80087f2:	d10e      	bne.n	8008812 <_printf_float+0x42a>
 80087f4:	e659      	b.n	80084aa <_printf_float+0xc2>
 80087f6:	2301      	movs	r3, #1
 80087f8:	4652      	mov	r2, sl
 80087fa:	4631      	mov	r1, r6
 80087fc:	4628      	mov	r0, r5
 80087fe:	47b8      	blx	r7
 8008800:	3001      	adds	r0, #1
 8008802:	f43f ae52 	beq.w	80084aa <_printf_float+0xc2>
 8008806:	f108 0801 	add.w	r8, r8, #1
 800880a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800880c:	3b01      	subs	r3, #1
 800880e:	4543      	cmp	r3, r8
 8008810:	dcf1      	bgt.n	80087f6 <_printf_float+0x40e>
 8008812:	464b      	mov	r3, r9
 8008814:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008818:	e6dc      	b.n	80085d4 <_printf_float+0x1ec>
 800881a:	f04f 0800 	mov.w	r8, #0
 800881e:	f104 0a1a 	add.w	sl, r4, #26
 8008822:	e7f2      	b.n	800880a <_printf_float+0x422>
 8008824:	2301      	movs	r3, #1
 8008826:	4642      	mov	r2, r8
 8008828:	e7df      	b.n	80087ea <_printf_float+0x402>
 800882a:	2301      	movs	r3, #1
 800882c:	464a      	mov	r2, r9
 800882e:	4631      	mov	r1, r6
 8008830:	4628      	mov	r0, r5
 8008832:	47b8      	blx	r7
 8008834:	3001      	adds	r0, #1
 8008836:	f43f ae38 	beq.w	80084aa <_printf_float+0xc2>
 800883a:	f108 0801 	add.w	r8, r8, #1
 800883e:	68e3      	ldr	r3, [r4, #12]
 8008840:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008842:	1a5b      	subs	r3, r3, r1
 8008844:	4543      	cmp	r3, r8
 8008846:	dcf0      	bgt.n	800882a <_printf_float+0x442>
 8008848:	e6fa      	b.n	8008640 <_printf_float+0x258>
 800884a:	f04f 0800 	mov.w	r8, #0
 800884e:	f104 0919 	add.w	r9, r4, #25
 8008852:	e7f4      	b.n	800883e <_printf_float+0x456>

08008854 <_printf_common>:
 8008854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008858:	4616      	mov	r6, r2
 800885a:	4699      	mov	r9, r3
 800885c:	688a      	ldr	r2, [r1, #8]
 800885e:	690b      	ldr	r3, [r1, #16]
 8008860:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008864:	4293      	cmp	r3, r2
 8008866:	bfb8      	it	lt
 8008868:	4613      	movlt	r3, r2
 800886a:	6033      	str	r3, [r6, #0]
 800886c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008870:	4607      	mov	r7, r0
 8008872:	460c      	mov	r4, r1
 8008874:	b10a      	cbz	r2, 800887a <_printf_common+0x26>
 8008876:	3301      	adds	r3, #1
 8008878:	6033      	str	r3, [r6, #0]
 800887a:	6823      	ldr	r3, [r4, #0]
 800887c:	0699      	lsls	r1, r3, #26
 800887e:	bf42      	ittt	mi
 8008880:	6833      	ldrmi	r3, [r6, #0]
 8008882:	3302      	addmi	r3, #2
 8008884:	6033      	strmi	r3, [r6, #0]
 8008886:	6825      	ldr	r5, [r4, #0]
 8008888:	f015 0506 	ands.w	r5, r5, #6
 800888c:	d106      	bne.n	800889c <_printf_common+0x48>
 800888e:	f104 0a19 	add.w	sl, r4, #25
 8008892:	68e3      	ldr	r3, [r4, #12]
 8008894:	6832      	ldr	r2, [r6, #0]
 8008896:	1a9b      	subs	r3, r3, r2
 8008898:	42ab      	cmp	r3, r5
 800889a:	dc26      	bgt.n	80088ea <_printf_common+0x96>
 800889c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80088a0:	1e13      	subs	r3, r2, #0
 80088a2:	6822      	ldr	r2, [r4, #0]
 80088a4:	bf18      	it	ne
 80088a6:	2301      	movne	r3, #1
 80088a8:	0692      	lsls	r2, r2, #26
 80088aa:	d42b      	bmi.n	8008904 <_printf_common+0xb0>
 80088ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80088b0:	4649      	mov	r1, r9
 80088b2:	4638      	mov	r0, r7
 80088b4:	47c0      	blx	r8
 80088b6:	3001      	adds	r0, #1
 80088b8:	d01e      	beq.n	80088f8 <_printf_common+0xa4>
 80088ba:	6823      	ldr	r3, [r4, #0]
 80088bc:	68e5      	ldr	r5, [r4, #12]
 80088be:	6832      	ldr	r2, [r6, #0]
 80088c0:	f003 0306 	and.w	r3, r3, #6
 80088c4:	2b04      	cmp	r3, #4
 80088c6:	bf08      	it	eq
 80088c8:	1aad      	subeq	r5, r5, r2
 80088ca:	68a3      	ldr	r3, [r4, #8]
 80088cc:	6922      	ldr	r2, [r4, #16]
 80088ce:	bf0c      	ite	eq
 80088d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80088d4:	2500      	movne	r5, #0
 80088d6:	4293      	cmp	r3, r2
 80088d8:	bfc4      	itt	gt
 80088da:	1a9b      	subgt	r3, r3, r2
 80088dc:	18ed      	addgt	r5, r5, r3
 80088de:	2600      	movs	r6, #0
 80088e0:	341a      	adds	r4, #26
 80088e2:	42b5      	cmp	r5, r6
 80088e4:	d11a      	bne.n	800891c <_printf_common+0xc8>
 80088e6:	2000      	movs	r0, #0
 80088e8:	e008      	b.n	80088fc <_printf_common+0xa8>
 80088ea:	2301      	movs	r3, #1
 80088ec:	4652      	mov	r2, sl
 80088ee:	4649      	mov	r1, r9
 80088f0:	4638      	mov	r0, r7
 80088f2:	47c0      	blx	r8
 80088f4:	3001      	adds	r0, #1
 80088f6:	d103      	bne.n	8008900 <_printf_common+0xac>
 80088f8:	f04f 30ff 	mov.w	r0, #4294967295
 80088fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008900:	3501      	adds	r5, #1
 8008902:	e7c6      	b.n	8008892 <_printf_common+0x3e>
 8008904:	18e1      	adds	r1, r4, r3
 8008906:	1c5a      	adds	r2, r3, #1
 8008908:	2030      	movs	r0, #48	; 0x30
 800890a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800890e:	4422      	add	r2, r4
 8008910:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008914:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008918:	3302      	adds	r3, #2
 800891a:	e7c7      	b.n	80088ac <_printf_common+0x58>
 800891c:	2301      	movs	r3, #1
 800891e:	4622      	mov	r2, r4
 8008920:	4649      	mov	r1, r9
 8008922:	4638      	mov	r0, r7
 8008924:	47c0      	blx	r8
 8008926:	3001      	adds	r0, #1
 8008928:	d0e6      	beq.n	80088f8 <_printf_common+0xa4>
 800892a:	3601      	adds	r6, #1
 800892c:	e7d9      	b.n	80088e2 <_printf_common+0x8e>
	...

08008930 <_printf_i>:
 8008930:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008934:	7e0f      	ldrb	r7, [r1, #24]
 8008936:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008938:	2f78      	cmp	r7, #120	; 0x78
 800893a:	4691      	mov	r9, r2
 800893c:	4680      	mov	r8, r0
 800893e:	460c      	mov	r4, r1
 8008940:	469a      	mov	sl, r3
 8008942:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008946:	d807      	bhi.n	8008958 <_printf_i+0x28>
 8008948:	2f62      	cmp	r7, #98	; 0x62
 800894a:	d80a      	bhi.n	8008962 <_printf_i+0x32>
 800894c:	2f00      	cmp	r7, #0
 800894e:	f000 80d8 	beq.w	8008b02 <_printf_i+0x1d2>
 8008952:	2f58      	cmp	r7, #88	; 0x58
 8008954:	f000 80a3 	beq.w	8008a9e <_printf_i+0x16e>
 8008958:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800895c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008960:	e03a      	b.n	80089d8 <_printf_i+0xa8>
 8008962:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008966:	2b15      	cmp	r3, #21
 8008968:	d8f6      	bhi.n	8008958 <_printf_i+0x28>
 800896a:	a101      	add	r1, pc, #4	; (adr r1, 8008970 <_printf_i+0x40>)
 800896c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008970:	080089c9 	.word	0x080089c9
 8008974:	080089dd 	.word	0x080089dd
 8008978:	08008959 	.word	0x08008959
 800897c:	08008959 	.word	0x08008959
 8008980:	08008959 	.word	0x08008959
 8008984:	08008959 	.word	0x08008959
 8008988:	080089dd 	.word	0x080089dd
 800898c:	08008959 	.word	0x08008959
 8008990:	08008959 	.word	0x08008959
 8008994:	08008959 	.word	0x08008959
 8008998:	08008959 	.word	0x08008959
 800899c:	08008ae9 	.word	0x08008ae9
 80089a0:	08008a0d 	.word	0x08008a0d
 80089a4:	08008acb 	.word	0x08008acb
 80089a8:	08008959 	.word	0x08008959
 80089ac:	08008959 	.word	0x08008959
 80089b0:	08008b0b 	.word	0x08008b0b
 80089b4:	08008959 	.word	0x08008959
 80089b8:	08008a0d 	.word	0x08008a0d
 80089bc:	08008959 	.word	0x08008959
 80089c0:	08008959 	.word	0x08008959
 80089c4:	08008ad3 	.word	0x08008ad3
 80089c8:	682b      	ldr	r3, [r5, #0]
 80089ca:	1d1a      	adds	r2, r3, #4
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	602a      	str	r2, [r5, #0]
 80089d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80089d8:	2301      	movs	r3, #1
 80089da:	e0a3      	b.n	8008b24 <_printf_i+0x1f4>
 80089dc:	6820      	ldr	r0, [r4, #0]
 80089de:	6829      	ldr	r1, [r5, #0]
 80089e0:	0606      	lsls	r6, r0, #24
 80089e2:	f101 0304 	add.w	r3, r1, #4
 80089e6:	d50a      	bpl.n	80089fe <_printf_i+0xce>
 80089e8:	680e      	ldr	r6, [r1, #0]
 80089ea:	602b      	str	r3, [r5, #0]
 80089ec:	2e00      	cmp	r6, #0
 80089ee:	da03      	bge.n	80089f8 <_printf_i+0xc8>
 80089f0:	232d      	movs	r3, #45	; 0x2d
 80089f2:	4276      	negs	r6, r6
 80089f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089f8:	485e      	ldr	r0, [pc, #376]	; (8008b74 <_printf_i+0x244>)
 80089fa:	230a      	movs	r3, #10
 80089fc:	e019      	b.n	8008a32 <_printf_i+0x102>
 80089fe:	680e      	ldr	r6, [r1, #0]
 8008a00:	602b      	str	r3, [r5, #0]
 8008a02:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008a06:	bf18      	it	ne
 8008a08:	b236      	sxthne	r6, r6
 8008a0a:	e7ef      	b.n	80089ec <_printf_i+0xbc>
 8008a0c:	682b      	ldr	r3, [r5, #0]
 8008a0e:	6820      	ldr	r0, [r4, #0]
 8008a10:	1d19      	adds	r1, r3, #4
 8008a12:	6029      	str	r1, [r5, #0]
 8008a14:	0601      	lsls	r1, r0, #24
 8008a16:	d501      	bpl.n	8008a1c <_printf_i+0xec>
 8008a18:	681e      	ldr	r6, [r3, #0]
 8008a1a:	e002      	b.n	8008a22 <_printf_i+0xf2>
 8008a1c:	0646      	lsls	r6, r0, #25
 8008a1e:	d5fb      	bpl.n	8008a18 <_printf_i+0xe8>
 8008a20:	881e      	ldrh	r6, [r3, #0]
 8008a22:	4854      	ldr	r0, [pc, #336]	; (8008b74 <_printf_i+0x244>)
 8008a24:	2f6f      	cmp	r7, #111	; 0x6f
 8008a26:	bf0c      	ite	eq
 8008a28:	2308      	moveq	r3, #8
 8008a2a:	230a      	movne	r3, #10
 8008a2c:	2100      	movs	r1, #0
 8008a2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a32:	6865      	ldr	r5, [r4, #4]
 8008a34:	60a5      	str	r5, [r4, #8]
 8008a36:	2d00      	cmp	r5, #0
 8008a38:	bfa2      	ittt	ge
 8008a3a:	6821      	ldrge	r1, [r4, #0]
 8008a3c:	f021 0104 	bicge.w	r1, r1, #4
 8008a40:	6021      	strge	r1, [r4, #0]
 8008a42:	b90e      	cbnz	r6, 8008a48 <_printf_i+0x118>
 8008a44:	2d00      	cmp	r5, #0
 8008a46:	d04d      	beq.n	8008ae4 <_printf_i+0x1b4>
 8008a48:	4615      	mov	r5, r2
 8008a4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008a4e:	fb03 6711 	mls	r7, r3, r1, r6
 8008a52:	5dc7      	ldrb	r7, [r0, r7]
 8008a54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008a58:	4637      	mov	r7, r6
 8008a5a:	42bb      	cmp	r3, r7
 8008a5c:	460e      	mov	r6, r1
 8008a5e:	d9f4      	bls.n	8008a4a <_printf_i+0x11a>
 8008a60:	2b08      	cmp	r3, #8
 8008a62:	d10b      	bne.n	8008a7c <_printf_i+0x14c>
 8008a64:	6823      	ldr	r3, [r4, #0]
 8008a66:	07de      	lsls	r6, r3, #31
 8008a68:	d508      	bpl.n	8008a7c <_printf_i+0x14c>
 8008a6a:	6923      	ldr	r3, [r4, #16]
 8008a6c:	6861      	ldr	r1, [r4, #4]
 8008a6e:	4299      	cmp	r1, r3
 8008a70:	bfde      	ittt	le
 8008a72:	2330      	movle	r3, #48	; 0x30
 8008a74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008a78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008a7c:	1b52      	subs	r2, r2, r5
 8008a7e:	6122      	str	r2, [r4, #16]
 8008a80:	f8cd a000 	str.w	sl, [sp]
 8008a84:	464b      	mov	r3, r9
 8008a86:	aa03      	add	r2, sp, #12
 8008a88:	4621      	mov	r1, r4
 8008a8a:	4640      	mov	r0, r8
 8008a8c:	f7ff fee2 	bl	8008854 <_printf_common>
 8008a90:	3001      	adds	r0, #1
 8008a92:	d14c      	bne.n	8008b2e <_printf_i+0x1fe>
 8008a94:	f04f 30ff 	mov.w	r0, #4294967295
 8008a98:	b004      	add	sp, #16
 8008a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a9e:	4835      	ldr	r0, [pc, #212]	; (8008b74 <_printf_i+0x244>)
 8008aa0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008aa4:	6829      	ldr	r1, [r5, #0]
 8008aa6:	6823      	ldr	r3, [r4, #0]
 8008aa8:	f851 6b04 	ldr.w	r6, [r1], #4
 8008aac:	6029      	str	r1, [r5, #0]
 8008aae:	061d      	lsls	r5, r3, #24
 8008ab0:	d514      	bpl.n	8008adc <_printf_i+0x1ac>
 8008ab2:	07df      	lsls	r7, r3, #31
 8008ab4:	bf44      	itt	mi
 8008ab6:	f043 0320 	orrmi.w	r3, r3, #32
 8008aba:	6023      	strmi	r3, [r4, #0]
 8008abc:	b91e      	cbnz	r6, 8008ac6 <_printf_i+0x196>
 8008abe:	6823      	ldr	r3, [r4, #0]
 8008ac0:	f023 0320 	bic.w	r3, r3, #32
 8008ac4:	6023      	str	r3, [r4, #0]
 8008ac6:	2310      	movs	r3, #16
 8008ac8:	e7b0      	b.n	8008a2c <_printf_i+0xfc>
 8008aca:	6823      	ldr	r3, [r4, #0]
 8008acc:	f043 0320 	orr.w	r3, r3, #32
 8008ad0:	6023      	str	r3, [r4, #0]
 8008ad2:	2378      	movs	r3, #120	; 0x78
 8008ad4:	4828      	ldr	r0, [pc, #160]	; (8008b78 <_printf_i+0x248>)
 8008ad6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008ada:	e7e3      	b.n	8008aa4 <_printf_i+0x174>
 8008adc:	0659      	lsls	r1, r3, #25
 8008ade:	bf48      	it	mi
 8008ae0:	b2b6      	uxthmi	r6, r6
 8008ae2:	e7e6      	b.n	8008ab2 <_printf_i+0x182>
 8008ae4:	4615      	mov	r5, r2
 8008ae6:	e7bb      	b.n	8008a60 <_printf_i+0x130>
 8008ae8:	682b      	ldr	r3, [r5, #0]
 8008aea:	6826      	ldr	r6, [r4, #0]
 8008aec:	6961      	ldr	r1, [r4, #20]
 8008aee:	1d18      	adds	r0, r3, #4
 8008af0:	6028      	str	r0, [r5, #0]
 8008af2:	0635      	lsls	r5, r6, #24
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	d501      	bpl.n	8008afc <_printf_i+0x1cc>
 8008af8:	6019      	str	r1, [r3, #0]
 8008afa:	e002      	b.n	8008b02 <_printf_i+0x1d2>
 8008afc:	0670      	lsls	r0, r6, #25
 8008afe:	d5fb      	bpl.n	8008af8 <_printf_i+0x1c8>
 8008b00:	8019      	strh	r1, [r3, #0]
 8008b02:	2300      	movs	r3, #0
 8008b04:	6123      	str	r3, [r4, #16]
 8008b06:	4615      	mov	r5, r2
 8008b08:	e7ba      	b.n	8008a80 <_printf_i+0x150>
 8008b0a:	682b      	ldr	r3, [r5, #0]
 8008b0c:	1d1a      	adds	r2, r3, #4
 8008b0e:	602a      	str	r2, [r5, #0]
 8008b10:	681d      	ldr	r5, [r3, #0]
 8008b12:	6862      	ldr	r2, [r4, #4]
 8008b14:	2100      	movs	r1, #0
 8008b16:	4628      	mov	r0, r5
 8008b18:	f7f7 fb62 	bl	80001e0 <memchr>
 8008b1c:	b108      	cbz	r0, 8008b22 <_printf_i+0x1f2>
 8008b1e:	1b40      	subs	r0, r0, r5
 8008b20:	6060      	str	r0, [r4, #4]
 8008b22:	6863      	ldr	r3, [r4, #4]
 8008b24:	6123      	str	r3, [r4, #16]
 8008b26:	2300      	movs	r3, #0
 8008b28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b2c:	e7a8      	b.n	8008a80 <_printf_i+0x150>
 8008b2e:	6923      	ldr	r3, [r4, #16]
 8008b30:	462a      	mov	r2, r5
 8008b32:	4649      	mov	r1, r9
 8008b34:	4640      	mov	r0, r8
 8008b36:	47d0      	blx	sl
 8008b38:	3001      	adds	r0, #1
 8008b3a:	d0ab      	beq.n	8008a94 <_printf_i+0x164>
 8008b3c:	6823      	ldr	r3, [r4, #0]
 8008b3e:	079b      	lsls	r3, r3, #30
 8008b40:	d413      	bmi.n	8008b6a <_printf_i+0x23a>
 8008b42:	68e0      	ldr	r0, [r4, #12]
 8008b44:	9b03      	ldr	r3, [sp, #12]
 8008b46:	4298      	cmp	r0, r3
 8008b48:	bfb8      	it	lt
 8008b4a:	4618      	movlt	r0, r3
 8008b4c:	e7a4      	b.n	8008a98 <_printf_i+0x168>
 8008b4e:	2301      	movs	r3, #1
 8008b50:	4632      	mov	r2, r6
 8008b52:	4649      	mov	r1, r9
 8008b54:	4640      	mov	r0, r8
 8008b56:	47d0      	blx	sl
 8008b58:	3001      	adds	r0, #1
 8008b5a:	d09b      	beq.n	8008a94 <_printf_i+0x164>
 8008b5c:	3501      	adds	r5, #1
 8008b5e:	68e3      	ldr	r3, [r4, #12]
 8008b60:	9903      	ldr	r1, [sp, #12]
 8008b62:	1a5b      	subs	r3, r3, r1
 8008b64:	42ab      	cmp	r3, r5
 8008b66:	dcf2      	bgt.n	8008b4e <_printf_i+0x21e>
 8008b68:	e7eb      	b.n	8008b42 <_printf_i+0x212>
 8008b6a:	2500      	movs	r5, #0
 8008b6c:	f104 0619 	add.w	r6, r4, #25
 8008b70:	e7f5      	b.n	8008b5e <_printf_i+0x22e>
 8008b72:	bf00      	nop
 8008b74:	0800b18e 	.word	0x0800b18e
 8008b78:	0800b19f 	.word	0x0800b19f

08008b7c <siprintf>:
 8008b7c:	b40e      	push	{r1, r2, r3}
 8008b7e:	b500      	push	{lr}
 8008b80:	b09c      	sub	sp, #112	; 0x70
 8008b82:	ab1d      	add	r3, sp, #116	; 0x74
 8008b84:	9002      	str	r0, [sp, #8]
 8008b86:	9006      	str	r0, [sp, #24]
 8008b88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008b8c:	4809      	ldr	r0, [pc, #36]	; (8008bb4 <siprintf+0x38>)
 8008b8e:	9107      	str	r1, [sp, #28]
 8008b90:	9104      	str	r1, [sp, #16]
 8008b92:	4909      	ldr	r1, [pc, #36]	; (8008bb8 <siprintf+0x3c>)
 8008b94:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b98:	9105      	str	r1, [sp, #20]
 8008b9a:	6800      	ldr	r0, [r0, #0]
 8008b9c:	9301      	str	r3, [sp, #4]
 8008b9e:	a902      	add	r1, sp, #8
 8008ba0:	f001 fb78 	bl	800a294 <_svfiprintf_r>
 8008ba4:	9b02      	ldr	r3, [sp, #8]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	701a      	strb	r2, [r3, #0]
 8008baa:	b01c      	add	sp, #112	; 0x70
 8008bac:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bb0:	b003      	add	sp, #12
 8008bb2:	4770      	bx	lr
 8008bb4:	2000000c 	.word	0x2000000c
 8008bb8:	ffff0208 	.word	0xffff0208

08008bbc <quorem>:
 8008bbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bc0:	6903      	ldr	r3, [r0, #16]
 8008bc2:	690c      	ldr	r4, [r1, #16]
 8008bc4:	42a3      	cmp	r3, r4
 8008bc6:	4607      	mov	r7, r0
 8008bc8:	f2c0 8081 	blt.w	8008cce <quorem+0x112>
 8008bcc:	3c01      	subs	r4, #1
 8008bce:	f101 0814 	add.w	r8, r1, #20
 8008bd2:	f100 0514 	add.w	r5, r0, #20
 8008bd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008bda:	9301      	str	r3, [sp, #4]
 8008bdc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008be0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008be4:	3301      	adds	r3, #1
 8008be6:	429a      	cmp	r2, r3
 8008be8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008bec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008bf0:	fbb2 f6f3 	udiv	r6, r2, r3
 8008bf4:	d331      	bcc.n	8008c5a <quorem+0x9e>
 8008bf6:	f04f 0e00 	mov.w	lr, #0
 8008bfa:	4640      	mov	r0, r8
 8008bfc:	46ac      	mov	ip, r5
 8008bfe:	46f2      	mov	sl, lr
 8008c00:	f850 2b04 	ldr.w	r2, [r0], #4
 8008c04:	b293      	uxth	r3, r2
 8008c06:	fb06 e303 	mla	r3, r6, r3, lr
 8008c0a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	ebaa 0303 	sub.w	r3, sl, r3
 8008c14:	f8dc a000 	ldr.w	sl, [ip]
 8008c18:	0c12      	lsrs	r2, r2, #16
 8008c1a:	fa13 f38a 	uxtah	r3, r3, sl
 8008c1e:	fb06 e202 	mla	r2, r6, r2, lr
 8008c22:	9300      	str	r3, [sp, #0]
 8008c24:	9b00      	ldr	r3, [sp, #0]
 8008c26:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008c2a:	b292      	uxth	r2, r2
 8008c2c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008c30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c34:	f8bd 3000 	ldrh.w	r3, [sp]
 8008c38:	4581      	cmp	r9, r0
 8008c3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c3e:	f84c 3b04 	str.w	r3, [ip], #4
 8008c42:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008c46:	d2db      	bcs.n	8008c00 <quorem+0x44>
 8008c48:	f855 300b 	ldr.w	r3, [r5, fp]
 8008c4c:	b92b      	cbnz	r3, 8008c5a <quorem+0x9e>
 8008c4e:	9b01      	ldr	r3, [sp, #4]
 8008c50:	3b04      	subs	r3, #4
 8008c52:	429d      	cmp	r5, r3
 8008c54:	461a      	mov	r2, r3
 8008c56:	d32e      	bcc.n	8008cb6 <quorem+0xfa>
 8008c58:	613c      	str	r4, [r7, #16]
 8008c5a:	4638      	mov	r0, r7
 8008c5c:	f001 f8c6 	bl	8009dec <__mcmp>
 8008c60:	2800      	cmp	r0, #0
 8008c62:	db24      	blt.n	8008cae <quorem+0xf2>
 8008c64:	3601      	adds	r6, #1
 8008c66:	4628      	mov	r0, r5
 8008c68:	f04f 0c00 	mov.w	ip, #0
 8008c6c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008c70:	f8d0 e000 	ldr.w	lr, [r0]
 8008c74:	b293      	uxth	r3, r2
 8008c76:	ebac 0303 	sub.w	r3, ip, r3
 8008c7a:	0c12      	lsrs	r2, r2, #16
 8008c7c:	fa13 f38e 	uxtah	r3, r3, lr
 8008c80:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008c84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c8e:	45c1      	cmp	r9, r8
 8008c90:	f840 3b04 	str.w	r3, [r0], #4
 8008c94:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008c98:	d2e8      	bcs.n	8008c6c <quorem+0xb0>
 8008c9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ca2:	b922      	cbnz	r2, 8008cae <quorem+0xf2>
 8008ca4:	3b04      	subs	r3, #4
 8008ca6:	429d      	cmp	r5, r3
 8008ca8:	461a      	mov	r2, r3
 8008caa:	d30a      	bcc.n	8008cc2 <quorem+0x106>
 8008cac:	613c      	str	r4, [r7, #16]
 8008cae:	4630      	mov	r0, r6
 8008cb0:	b003      	add	sp, #12
 8008cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cb6:	6812      	ldr	r2, [r2, #0]
 8008cb8:	3b04      	subs	r3, #4
 8008cba:	2a00      	cmp	r2, #0
 8008cbc:	d1cc      	bne.n	8008c58 <quorem+0x9c>
 8008cbe:	3c01      	subs	r4, #1
 8008cc0:	e7c7      	b.n	8008c52 <quorem+0x96>
 8008cc2:	6812      	ldr	r2, [r2, #0]
 8008cc4:	3b04      	subs	r3, #4
 8008cc6:	2a00      	cmp	r2, #0
 8008cc8:	d1f0      	bne.n	8008cac <quorem+0xf0>
 8008cca:	3c01      	subs	r4, #1
 8008ccc:	e7eb      	b.n	8008ca6 <quorem+0xea>
 8008cce:	2000      	movs	r0, #0
 8008cd0:	e7ee      	b.n	8008cb0 <quorem+0xf4>
 8008cd2:	0000      	movs	r0, r0
 8008cd4:	0000      	movs	r0, r0
	...

08008cd8 <_dtoa_r>:
 8008cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cdc:	ed2d 8b04 	vpush	{d8-d9}
 8008ce0:	ec57 6b10 	vmov	r6, r7, d0
 8008ce4:	b093      	sub	sp, #76	; 0x4c
 8008ce6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008ce8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008cec:	9106      	str	r1, [sp, #24]
 8008cee:	ee10 aa10 	vmov	sl, s0
 8008cf2:	4604      	mov	r4, r0
 8008cf4:	9209      	str	r2, [sp, #36]	; 0x24
 8008cf6:	930c      	str	r3, [sp, #48]	; 0x30
 8008cf8:	46bb      	mov	fp, r7
 8008cfa:	b975      	cbnz	r5, 8008d1a <_dtoa_r+0x42>
 8008cfc:	2010      	movs	r0, #16
 8008cfe:	f000 fddd 	bl	80098bc <malloc>
 8008d02:	4602      	mov	r2, r0
 8008d04:	6260      	str	r0, [r4, #36]	; 0x24
 8008d06:	b920      	cbnz	r0, 8008d12 <_dtoa_r+0x3a>
 8008d08:	4ba7      	ldr	r3, [pc, #668]	; (8008fa8 <_dtoa_r+0x2d0>)
 8008d0a:	21ea      	movs	r1, #234	; 0xea
 8008d0c:	48a7      	ldr	r0, [pc, #668]	; (8008fac <_dtoa_r+0x2d4>)
 8008d0e:	f001 fbd1 	bl	800a4b4 <__assert_func>
 8008d12:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008d16:	6005      	str	r5, [r0, #0]
 8008d18:	60c5      	str	r5, [r0, #12]
 8008d1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d1c:	6819      	ldr	r1, [r3, #0]
 8008d1e:	b151      	cbz	r1, 8008d36 <_dtoa_r+0x5e>
 8008d20:	685a      	ldr	r2, [r3, #4]
 8008d22:	604a      	str	r2, [r1, #4]
 8008d24:	2301      	movs	r3, #1
 8008d26:	4093      	lsls	r3, r2
 8008d28:	608b      	str	r3, [r1, #8]
 8008d2a:	4620      	mov	r0, r4
 8008d2c:	f000 fe1c 	bl	8009968 <_Bfree>
 8008d30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d32:	2200      	movs	r2, #0
 8008d34:	601a      	str	r2, [r3, #0]
 8008d36:	1e3b      	subs	r3, r7, #0
 8008d38:	bfaa      	itet	ge
 8008d3a:	2300      	movge	r3, #0
 8008d3c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008d40:	f8c8 3000 	strge.w	r3, [r8]
 8008d44:	4b9a      	ldr	r3, [pc, #616]	; (8008fb0 <_dtoa_r+0x2d8>)
 8008d46:	bfbc      	itt	lt
 8008d48:	2201      	movlt	r2, #1
 8008d4a:	f8c8 2000 	strlt.w	r2, [r8]
 8008d4e:	ea33 030b 	bics.w	r3, r3, fp
 8008d52:	d11b      	bne.n	8008d8c <_dtoa_r+0xb4>
 8008d54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d56:	f242 730f 	movw	r3, #9999	; 0x270f
 8008d5a:	6013      	str	r3, [r2, #0]
 8008d5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008d60:	4333      	orrs	r3, r6
 8008d62:	f000 8592 	beq.w	800988a <_dtoa_r+0xbb2>
 8008d66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d68:	b963      	cbnz	r3, 8008d84 <_dtoa_r+0xac>
 8008d6a:	4b92      	ldr	r3, [pc, #584]	; (8008fb4 <_dtoa_r+0x2dc>)
 8008d6c:	e022      	b.n	8008db4 <_dtoa_r+0xdc>
 8008d6e:	4b92      	ldr	r3, [pc, #584]	; (8008fb8 <_dtoa_r+0x2e0>)
 8008d70:	9301      	str	r3, [sp, #4]
 8008d72:	3308      	adds	r3, #8
 8008d74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008d76:	6013      	str	r3, [r2, #0]
 8008d78:	9801      	ldr	r0, [sp, #4]
 8008d7a:	b013      	add	sp, #76	; 0x4c
 8008d7c:	ecbd 8b04 	vpop	{d8-d9}
 8008d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d84:	4b8b      	ldr	r3, [pc, #556]	; (8008fb4 <_dtoa_r+0x2dc>)
 8008d86:	9301      	str	r3, [sp, #4]
 8008d88:	3303      	adds	r3, #3
 8008d8a:	e7f3      	b.n	8008d74 <_dtoa_r+0x9c>
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	2300      	movs	r3, #0
 8008d90:	4650      	mov	r0, sl
 8008d92:	4659      	mov	r1, fp
 8008d94:	f7f7 fe98 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d98:	ec4b ab19 	vmov	d9, sl, fp
 8008d9c:	4680      	mov	r8, r0
 8008d9e:	b158      	cbz	r0, 8008db8 <_dtoa_r+0xe0>
 8008da0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008da2:	2301      	movs	r3, #1
 8008da4:	6013      	str	r3, [r2, #0]
 8008da6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	f000 856b 	beq.w	8009884 <_dtoa_r+0xbac>
 8008dae:	4883      	ldr	r0, [pc, #524]	; (8008fbc <_dtoa_r+0x2e4>)
 8008db0:	6018      	str	r0, [r3, #0]
 8008db2:	1e43      	subs	r3, r0, #1
 8008db4:	9301      	str	r3, [sp, #4]
 8008db6:	e7df      	b.n	8008d78 <_dtoa_r+0xa0>
 8008db8:	ec4b ab10 	vmov	d0, sl, fp
 8008dbc:	aa10      	add	r2, sp, #64	; 0x40
 8008dbe:	a911      	add	r1, sp, #68	; 0x44
 8008dc0:	4620      	mov	r0, r4
 8008dc2:	f001 f8b9 	bl	8009f38 <__d2b>
 8008dc6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008dca:	ee08 0a10 	vmov	s16, r0
 8008dce:	2d00      	cmp	r5, #0
 8008dd0:	f000 8084 	beq.w	8008edc <_dtoa_r+0x204>
 8008dd4:	ee19 3a90 	vmov	r3, s19
 8008dd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ddc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008de0:	4656      	mov	r6, sl
 8008de2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008de6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008dea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008dee:	4b74      	ldr	r3, [pc, #464]	; (8008fc0 <_dtoa_r+0x2e8>)
 8008df0:	2200      	movs	r2, #0
 8008df2:	4630      	mov	r0, r6
 8008df4:	4639      	mov	r1, r7
 8008df6:	f7f7 fa47 	bl	8000288 <__aeabi_dsub>
 8008dfa:	a365      	add	r3, pc, #404	; (adr r3, 8008f90 <_dtoa_r+0x2b8>)
 8008dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e00:	f7f7 fbfa 	bl	80005f8 <__aeabi_dmul>
 8008e04:	a364      	add	r3, pc, #400	; (adr r3, 8008f98 <_dtoa_r+0x2c0>)
 8008e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e0a:	f7f7 fa3f 	bl	800028c <__adddf3>
 8008e0e:	4606      	mov	r6, r0
 8008e10:	4628      	mov	r0, r5
 8008e12:	460f      	mov	r7, r1
 8008e14:	f7f7 fb86 	bl	8000524 <__aeabi_i2d>
 8008e18:	a361      	add	r3, pc, #388	; (adr r3, 8008fa0 <_dtoa_r+0x2c8>)
 8008e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e1e:	f7f7 fbeb 	bl	80005f8 <__aeabi_dmul>
 8008e22:	4602      	mov	r2, r0
 8008e24:	460b      	mov	r3, r1
 8008e26:	4630      	mov	r0, r6
 8008e28:	4639      	mov	r1, r7
 8008e2a:	f7f7 fa2f 	bl	800028c <__adddf3>
 8008e2e:	4606      	mov	r6, r0
 8008e30:	460f      	mov	r7, r1
 8008e32:	f7f7 fe91 	bl	8000b58 <__aeabi_d2iz>
 8008e36:	2200      	movs	r2, #0
 8008e38:	9000      	str	r0, [sp, #0]
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	4630      	mov	r0, r6
 8008e3e:	4639      	mov	r1, r7
 8008e40:	f7f7 fe4c 	bl	8000adc <__aeabi_dcmplt>
 8008e44:	b150      	cbz	r0, 8008e5c <_dtoa_r+0x184>
 8008e46:	9800      	ldr	r0, [sp, #0]
 8008e48:	f7f7 fb6c 	bl	8000524 <__aeabi_i2d>
 8008e4c:	4632      	mov	r2, r6
 8008e4e:	463b      	mov	r3, r7
 8008e50:	f7f7 fe3a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e54:	b910      	cbnz	r0, 8008e5c <_dtoa_r+0x184>
 8008e56:	9b00      	ldr	r3, [sp, #0]
 8008e58:	3b01      	subs	r3, #1
 8008e5a:	9300      	str	r3, [sp, #0]
 8008e5c:	9b00      	ldr	r3, [sp, #0]
 8008e5e:	2b16      	cmp	r3, #22
 8008e60:	d85a      	bhi.n	8008f18 <_dtoa_r+0x240>
 8008e62:	9a00      	ldr	r2, [sp, #0]
 8008e64:	4b57      	ldr	r3, [pc, #348]	; (8008fc4 <_dtoa_r+0x2ec>)
 8008e66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e6e:	ec51 0b19 	vmov	r0, r1, d9
 8008e72:	f7f7 fe33 	bl	8000adc <__aeabi_dcmplt>
 8008e76:	2800      	cmp	r0, #0
 8008e78:	d050      	beq.n	8008f1c <_dtoa_r+0x244>
 8008e7a:	9b00      	ldr	r3, [sp, #0]
 8008e7c:	3b01      	subs	r3, #1
 8008e7e:	9300      	str	r3, [sp, #0]
 8008e80:	2300      	movs	r3, #0
 8008e82:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e86:	1b5d      	subs	r5, r3, r5
 8008e88:	1e6b      	subs	r3, r5, #1
 8008e8a:	9305      	str	r3, [sp, #20]
 8008e8c:	bf45      	ittet	mi
 8008e8e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008e92:	9304      	strmi	r3, [sp, #16]
 8008e94:	2300      	movpl	r3, #0
 8008e96:	2300      	movmi	r3, #0
 8008e98:	bf4c      	ite	mi
 8008e9a:	9305      	strmi	r3, [sp, #20]
 8008e9c:	9304      	strpl	r3, [sp, #16]
 8008e9e:	9b00      	ldr	r3, [sp, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	db3d      	blt.n	8008f20 <_dtoa_r+0x248>
 8008ea4:	9b05      	ldr	r3, [sp, #20]
 8008ea6:	9a00      	ldr	r2, [sp, #0]
 8008ea8:	920a      	str	r2, [sp, #40]	; 0x28
 8008eaa:	4413      	add	r3, r2
 8008eac:	9305      	str	r3, [sp, #20]
 8008eae:	2300      	movs	r3, #0
 8008eb0:	9307      	str	r3, [sp, #28]
 8008eb2:	9b06      	ldr	r3, [sp, #24]
 8008eb4:	2b09      	cmp	r3, #9
 8008eb6:	f200 8089 	bhi.w	8008fcc <_dtoa_r+0x2f4>
 8008eba:	2b05      	cmp	r3, #5
 8008ebc:	bfc4      	itt	gt
 8008ebe:	3b04      	subgt	r3, #4
 8008ec0:	9306      	strgt	r3, [sp, #24]
 8008ec2:	9b06      	ldr	r3, [sp, #24]
 8008ec4:	f1a3 0302 	sub.w	r3, r3, #2
 8008ec8:	bfcc      	ite	gt
 8008eca:	2500      	movgt	r5, #0
 8008ecc:	2501      	movle	r5, #1
 8008ece:	2b03      	cmp	r3, #3
 8008ed0:	f200 8087 	bhi.w	8008fe2 <_dtoa_r+0x30a>
 8008ed4:	e8df f003 	tbb	[pc, r3]
 8008ed8:	59383a2d 	.word	0x59383a2d
 8008edc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008ee0:	441d      	add	r5, r3
 8008ee2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008ee6:	2b20      	cmp	r3, #32
 8008ee8:	bfc1      	itttt	gt
 8008eea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008eee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008ef2:	fa0b f303 	lslgt.w	r3, fp, r3
 8008ef6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008efa:	bfda      	itte	le
 8008efc:	f1c3 0320 	rsble	r3, r3, #32
 8008f00:	fa06 f003 	lslle.w	r0, r6, r3
 8008f04:	4318      	orrgt	r0, r3
 8008f06:	f7f7 fafd 	bl	8000504 <__aeabi_ui2d>
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	4606      	mov	r6, r0
 8008f0e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008f12:	3d01      	subs	r5, #1
 8008f14:	930e      	str	r3, [sp, #56]	; 0x38
 8008f16:	e76a      	b.n	8008dee <_dtoa_r+0x116>
 8008f18:	2301      	movs	r3, #1
 8008f1a:	e7b2      	b.n	8008e82 <_dtoa_r+0x1aa>
 8008f1c:	900b      	str	r0, [sp, #44]	; 0x2c
 8008f1e:	e7b1      	b.n	8008e84 <_dtoa_r+0x1ac>
 8008f20:	9b04      	ldr	r3, [sp, #16]
 8008f22:	9a00      	ldr	r2, [sp, #0]
 8008f24:	1a9b      	subs	r3, r3, r2
 8008f26:	9304      	str	r3, [sp, #16]
 8008f28:	4253      	negs	r3, r2
 8008f2a:	9307      	str	r3, [sp, #28]
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	930a      	str	r3, [sp, #40]	; 0x28
 8008f30:	e7bf      	b.n	8008eb2 <_dtoa_r+0x1da>
 8008f32:	2300      	movs	r3, #0
 8008f34:	9308      	str	r3, [sp, #32]
 8008f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	dc55      	bgt.n	8008fe8 <_dtoa_r+0x310>
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008f42:	461a      	mov	r2, r3
 8008f44:	9209      	str	r2, [sp, #36]	; 0x24
 8008f46:	e00c      	b.n	8008f62 <_dtoa_r+0x28a>
 8008f48:	2301      	movs	r3, #1
 8008f4a:	e7f3      	b.n	8008f34 <_dtoa_r+0x25c>
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f50:	9308      	str	r3, [sp, #32]
 8008f52:	9b00      	ldr	r3, [sp, #0]
 8008f54:	4413      	add	r3, r2
 8008f56:	9302      	str	r3, [sp, #8]
 8008f58:	3301      	adds	r3, #1
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	9303      	str	r3, [sp, #12]
 8008f5e:	bfb8      	it	lt
 8008f60:	2301      	movlt	r3, #1
 8008f62:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008f64:	2200      	movs	r2, #0
 8008f66:	6042      	str	r2, [r0, #4]
 8008f68:	2204      	movs	r2, #4
 8008f6a:	f102 0614 	add.w	r6, r2, #20
 8008f6e:	429e      	cmp	r6, r3
 8008f70:	6841      	ldr	r1, [r0, #4]
 8008f72:	d93d      	bls.n	8008ff0 <_dtoa_r+0x318>
 8008f74:	4620      	mov	r0, r4
 8008f76:	f000 fcb7 	bl	80098e8 <_Balloc>
 8008f7a:	9001      	str	r0, [sp, #4]
 8008f7c:	2800      	cmp	r0, #0
 8008f7e:	d13b      	bne.n	8008ff8 <_dtoa_r+0x320>
 8008f80:	4b11      	ldr	r3, [pc, #68]	; (8008fc8 <_dtoa_r+0x2f0>)
 8008f82:	4602      	mov	r2, r0
 8008f84:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008f88:	e6c0      	b.n	8008d0c <_dtoa_r+0x34>
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	e7df      	b.n	8008f4e <_dtoa_r+0x276>
 8008f8e:	bf00      	nop
 8008f90:	636f4361 	.word	0x636f4361
 8008f94:	3fd287a7 	.word	0x3fd287a7
 8008f98:	8b60c8b3 	.word	0x8b60c8b3
 8008f9c:	3fc68a28 	.word	0x3fc68a28
 8008fa0:	509f79fb 	.word	0x509f79fb
 8008fa4:	3fd34413 	.word	0x3fd34413
 8008fa8:	0800b1bd 	.word	0x0800b1bd
 8008fac:	0800b1d4 	.word	0x0800b1d4
 8008fb0:	7ff00000 	.word	0x7ff00000
 8008fb4:	0800b1b9 	.word	0x0800b1b9
 8008fb8:	0800b1b0 	.word	0x0800b1b0
 8008fbc:	0800b18d 	.word	0x0800b18d
 8008fc0:	3ff80000 	.word	0x3ff80000
 8008fc4:	0800b2c8 	.word	0x0800b2c8
 8008fc8:	0800b22f 	.word	0x0800b22f
 8008fcc:	2501      	movs	r5, #1
 8008fce:	2300      	movs	r3, #0
 8008fd0:	9306      	str	r3, [sp, #24]
 8008fd2:	9508      	str	r5, [sp, #32]
 8008fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8008fd8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	2312      	movs	r3, #18
 8008fe0:	e7b0      	b.n	8008f44 <_dtoa_r+0x26c>
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	9308      	str	r3, [sp, #32]
 8008fe6:	e7f5      	b.n	8008fd4 <_dtoa_r+0x2fc>
 8008fe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008fee:	e7b8      	b.n	8008f62 <_dtoa_r+0x28a>
 8008ff0:	3101      	adds	r1, #1
 8008ff2:	6041      	str	r1, [r0, #4]
 8008ff4:	0052      	lsls	r2, r2, #1
 8008ff6:	e7b8      	b.n	8008f6a <_dtoa_r+0x292>
 8008ff8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ffa:	9a01      	ldr	r2, [sp, #4]
 8008ffc:	601a      	str	r2, [r3, #0]
 8008ffe:	9b03      	ldr	r3, [sp, #12]
 8009000:	2b0e      	cmp	r3, #14
 8009002:	f200 809d 	bhi.w	8009140 <_dtoa_r+0x468>
 8009006:	2d00      	cmp	r5, #0
 8009008:	f000 809a 	beq.w	8009140 <_dtoa_r+0x468>
 800900c:	9b00      	ldr	r3, [sp, #0]
 800900e:	2b00      	cmp	r3, #0
 8009010:	dd32      	ble.n	8009078 <_dtoa_r+0x3a0>
 8009012:	4ab7      	ldr	r2, [pc, #732]	; (80092f0 <_dtoa_r+0x618>)
 8009014:	f003 030f 	and.w	r3, r3, #15
 8009018:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800901c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009020:	9b00      	ldr	r3, [sp, #0]
 8009022:	05d8      	lsls	r0, r3, #23
 8009024:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009028:	d516      	bpl.n	8009058 <_dtoa_r+0x380>
 800902a:	4bb2      	ldr	r3, [pc, #712]	; (80092f4 <_dtoa_r+0x61c>)
 800902c:	ec51 0b19 	vmov	r0, r1, d9
 8009030:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009034:	f7f7 fc0a 	bl	800084c <__aeabi_ddiv>
 8009038:	f007 070f 	and.w	r7, r7, #15
 800903c:	4682      	mov	sl, r0
 800903e:	468b      	mov	fp, r1
 8009040:	2503      	movs	r5, #3
 8009042:	4eac      	ldr	r6, [pc, #688]	; (80092f4 <_dtoa_r+0x61c>)
 8009044:	b957      	cbnz	r7, 800905c <_dtoa_r+0x384>
 8009046:	4642      	mov	r2, r8
 8009048:	464b      	mov	r3, r9
 800904a:	4650      	mov	r0, sl
 800904c:	4659      	mov	r1, fp
 800904e:	f7f7 fbfd 	bl	800084c <__aeabi_ddiv>
 8009052:	4682      	mov	sl, r0
 8009054:	468b      	mov	fp, r1
 8009056:	e028      	b.n	80090aa <_dtoa_r+0x3d2>
 8009058:	2502      	movs	r5, #2
 800905a:	e7f2      	b.n	8009042 <_dtoa_r+0x36a>
 800905c:	07f9      	lsls	r1, r7, #31
 800905e:	d508      	bpl.n	8009072 <_dtoa_r+0x39a>
 8009060:	4640      	mov	r0, r8
 8009062:	4649      	mov	r1, r9
 8009064:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009068:	f7f7 fac6 	bl	80005f8 <__aeabi_dmul>
 800906c:	3501      	adds	r5, #1
 800906e:	4680      	mov	r8, r0
 8009070:	4689      	mov	r9, r1
 8009072:	107f      	asrs	r7, r7, #1
 8009074:	3608      	adds	r6, #8
 8009076:	e7e5      	b.n	8009044 <_dtoa_r+0x36c>
 8009078:	f000 809b 	beq.w	80091b2 <_dtoa_r+0x4da>
 800907c:	9b00      	ldr	r3, [sp, #0]
 800907e:	4f9d      	ldr	r7, [pc, #628]	; (80092f4 <_dtoa_r+0x61c>)
 8009080:	425e      	negs	r6, r3
 8009082:	4b9b      	ldr	r3, [pc, #620]	; (80092f0 <_dtoa_r+0x618>)
 8009084:	f006 020f 	and.w	r2, r6, #15
 8009088:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800908c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009090:	ec51 0b19 	vmov	r0, r1, d9
 8009094:	f7f7 fab0 	bl	80005f8 <__aeabi_dmul>
 8009098:	1136      	asrs	r6, r6, #4
 800909a:	4682      	mov	sl, r0
 800909c:	468b      	mov	fp, r1
 800909e:	2300      	movs	r3, #0
 80090a0:	2502      	movs	r5, #2
 80090a2:	2e00      	cmp	r6, #0
 80090a4:	d17a      	bne.n	800919c <_dtoa_r+0x4c4>
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d1d3      	bne.n	8009052 <_dtoa_r+0x37a>
 80090aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	f000 8082 	beq.w	80091b6 <_dtoa_r+0x4de>
 80090b2:	4b91      	ldr	r3, [pc, #580]	; (80092f8 <_dtoa_r+0x620>)
 80090b4:	2200      	movs	r2, #0
 80090b6:	4650      	mov	r0, sl
 80090b8:	4659      	mov	r1, fp
 80090ba:	f7f7 fd0f 	bl	8000adc <__aeabi_dcmplt>
 80090be:	2800      	cmp	r0, #0
 80090c0:	d079      	beq.n	80091b6 <_dtoa_r+0x4de>
 80090c2:	9b03      	ldr	r3, [sp, #12]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d076      	beq.n	80091b6 <_dtoa_r+0x4de>
 80090c8:	9b02      	ldr	r3, [sp, #8]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	dd36      	ble.n	800913c <_dtoa_r+0x464>
 80090ce:	9b00      	ldr	r3, [sp, #0]
 80090d0:	4650      	mov	r0, sl
 80090d2:	4659      	mov	r1, fp
 80090d4:	1e5f      	subs	r7, r3, #1
 80090d6:	2200      	movs	r2, #0
 80090d8:	4b88      	ldr	r3, [pc, #544]	; (80092fc <_dtoa_r+0x624>)
 80090da:	f7f7 fa8d 	bl	80005f8 <__aeabi_dmul>
 80090de:	9e02      	ldr	r6, [sp, #8]
 80090e0:	4682      	mov	sl, r0
 80090e2:	468b      	mov	fp, r1
 80090e4:	3501      	adds	r5, #1
 80090e6:	4628      	mov	r0, r5
 80090e8:	f7f7 fa1c 	bl	8000524 <__aeabi_i2d>
 80090ec:	4652      	mov	r2, sl
 80090ee:	465b      	mov	r3, fp
 80090f0:	f7f7 fa82 	bl	80005f8 <__aeabi_dmul>
 80090f4:	4b82      	ldr	r3, [pc, #520]	; (8009300 <_dtoa_r+0x628>)
 80090f6:	2200      	movs	r2, #0
 80090f8:	f7f7 f8c8 	bl	800028c <__adddf3>
 80090fc:	46d0      	mov	r8, sl
 80090fe:	46d9      	mov	r9, fp
 8009100:	4682      	mov	sl, r0
 8009102:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009106:	2e00      	cmp	r6, #0
 8009108:	d158      	bne.n	80091bc <_dtoa_r+0x4e4>
 800910a:	4b7e      	ldr	r3, [pc, #504]	; (8009304 <_dtoa_r+0x62c>)
 800910c:	2200      	movs	r2, #0
 800910e:	4640      	mov	r0, r8
 8009110:	4649      	mov	r1, r9
 8009112:	f7f7 f8b9 	bl	8000288 <__aeabi_dsub>
 8009116:	4652      	mov	r2, sl
 8009118:	465b      	mov	r3, fp
 800911a:	4680      	mov	r8, r0
 800911c:	4689      	mov	r9, r1
 800911e:	f7f7 fcfb 	bl	8000b18 <__aeabi_dcmpgt>
 8009122:	2800      	cmp	r0, #0
 8009124:	f040 8295 	bne.w	8009652 <_dtoa_r+0x97a>
 8009128:	4652      	mov	r2, sl
 800912a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800912e:	4640      	mov	r0, r8
 8009130:	4649      	mov	r1, r9
 8009132:	f7f7 fcd3 	bl	8000adc <__aeabi_dcmplt>
 8009136:	2800      	cmp	r0, #0
 8009138:	f040 8289 	bne.w	800964e <_dtoa_r+0x976>
 800913c:	ec5b ab19 	vmov	sl, fp, d9
 8009140:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009142:	2b00      	cmp	r3, #0
 8009144:	f2c0 8148 	blt.w	80093d8 <_dtoa_r+0x700>
 8009148:	9a00      	ldr	r2, [sp, #0]
 800914a:	2a0e      	cmp	r2, #14
 800914c:	f300 8144 	bgt.w	80093d8 <_dtoa_r+0x700>
 8009150:	4b67      	ldr	r3, [pc, #412]	; (80092f0 <_dtoa_r+0x618>)
 8009152:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009156:	e9d3 8900 	ldrd	r8, r9, [r3]
 800915a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800915c:	2b00      	cmp	r3, #0
 800915e:	f280 80d5 	bge.w	800930c <_dtoa_r+0x634>
 8009162:	9b03      	ldr	r3, [sp, #12]
 8009164:	2b00      	cmp	r3, #0
 8009166:	f300 80d1 	bgt.w	800930c <_dtoa_r+0x634>
 800916a:	f040 826f 	bne.w	800964c <_dtoa_r+0x974>
 800916e:	4b65      	ldr	r3, [pc, #404]	; (8009304 <_dtoa_r+0x62c>)
 8009170:	2200      	movs	r2, #0
 8009172:	4640      	mov	r0, r8
 8009174:	4649      	mov	r1, r9
 8009176:	f7f7 fa3f 	bl	80005f8 <__aeabi_dmul>
 800917a:	4652      	mov	r2, sl
 800917c:	465b      	mov	r3, fp
 800917e:	f7f7 fcc1 	bl	8000b04 <__aeabi_dcmpge>
 8009182:	9e03      	ldr	r6, [sp, #12]
 8009184:	4637      	mov	r7, r6
 8009186:	2800      	cmp	r0, #0
 8009188:	f040 8245 	bne.w	8009616 <_dtoa_r+0x93e>
 800918c:	9d01      	ldr	r5, [sp, #4]
 800918e:	2331      	movs	r3, #49	; 0x31
 8009190:	f805 3b01 	strb.w	r3, [r5], #1
 8009194:	9b00      	ldr	r3, [sp, #0]
 8009196:	3301      	adds	r3, #1
 8009198:	9300      	str	r3, [sp, #0]
 800919a:	e240      	b.n	800961e <_dtoa_r+0x946>
 800919c:	07f2      	lsls	r2, r6, #31
 800919e:	d505      	bpl.n	80091ac <_dtoa_r+0x4d4>
 80091a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091a4:	f7f7 fa28 	bl	80005f8 <__aeabi_dmul>
 80091a8:	3501      	adds	r5, #1
 80091aa:	2301      	movs	r3, #1
 80091ac:	1076      	asrs	r6, r6, #1
 80091ae:	3708      	adds	r7, #8
 80091b0:	e777      	b.n	80090a2 <_dtoa_r+0x3ca>
 80091b2:	2502      	movs	r5, #2
 80091b4:	e779      	b.n	80090aa <_dtoa_r+0x3d2>
 80091b6:	9f00      	ldr	r7, [sp, #0]
 80091b8:	9e03      	ldr	r6, [sp, #12]
 80091ba:	e794      	b.n	80090e6 <_dtoa_r+0x40e>
 80091bc:	9901      	ldr	r1, [sp, #4]
 80091be:	4b4c      	ldr	r3, [pc, #304]	; (80092f0 <_dtoa_r+0x618>)
 80091c0:	4431      	add	r1, r6
 80091c2:	910d      	str	r1, [sp, #52]	; 0x34
 80091c4:	9908      	ldr	r1, [sp, #32]
 80091c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80091ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80091ce:	2900      	cmp	r1, #0
 80091d0:	d043      	beq.n	800925a <_dtoa_r+0x582>
 80091d2:	494d      	ldr	r1, [pc, #308]	; (8009308 <_dtoa_r+0x630>)
 80091d4:	2000      	movs	r0, #0
 80091d6:	f7f7 fb39 	bl	800084c <__aeabi_ddiv>
 80091da:	4652      	mov	r2, sl
 80091dc:	465b      	mov	r3, fp
 80091de:	f7f7 f853 	bl	8000288 <__aeabi_dsub>
 80091e2:	9d01      	ldr	r5, [sp, #4]
 80091e4:	4682      	mov	sl, r0
 80091e6:	468b      	mov	fp, r1
 80091e8:	4649      	mov	r1, r9
 80091ea:	4640      	mov	r0, r8
 80091ec:	f7f7 fcb4 	bl	8000b58 <__aeabi_d2iz>
 80091f0:	4606      	mov	r6, r0
 80091f2:	f7f7 f997 	bl	8000524 <__aeabi_i2d>
 80091f6:	4602      	mov	r2, r0
 80091f8:	460b      	mov	r3, r1
 80091fa:	4640      	mov	r0, r8
 80091fc:	4649      	mov	r1, r9
 80091fe:	f7f7 f843 	bl	8000288 <__aeabi_dsub>
 8009202:	3630      	adds	r6, #48	; 0x30
 8009204:	f805 6b01 	strb.w	r6, [r5], #1
 8009208:	4652      	mov	r2, sl
 800920a:	465b      	mov	r3, fp
 800920c:	4680      	mov	r8, r0
 800920e:	4689      	mov	r9, r1
 8009210:	f7f7 fc64 	bl	8000adc <__aeabi_dcmplt>
 8009214:	2800      	cmp	r0, #0
 8009216:	d163      	bne.n	80092e0 <_dtoa_r+0x608>
 8009218:	4642      	mov	r2, r8
 800921a:	464b      	mov	r3, r9
 800921c:	4936      	ldr	r1, [pc, #216]	; (80092f8 <_dtoa_r+0x620>)
 800921e:	2000      	movs	r0, #0
 8009220:	f7f7 f832 	bl	8000288 <__aeabi_dsub>
 8009224:	4652      	mov	r2, sl
 8009226:	465b      	mov	r3, fp
 8009228:	f7f7 fc58 	bl	8000adc <__aeabi_dcmplt>
 800922c:	2800      	cmp	r0, #0
 800922e:	f040 80b5 	bne.w	800939c <_dtoa_r+0x6c4>
 8009232:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009234:	429d      	cmp	r5, r3
 8009236:	d081      	beq.n	800913c <_dtoa_r+0x464>
 8009238:	4b30      	ldr	r3, [pc, #192]	; (80092fc <_dtoa_r+0x624>)
 800923a:	2200      	movs	r2, #0
 800923c:	4650      	mov	r0, sl
 800923e:	4659      	mov	r1, fp
 8009240:	f7f7 f9da 	bl	80005f8 <__aeabi_dmul>
 8009244:	4b2d      	ldr	r3, [pc, #180]	; (80092fc <_dtoa_r+0x624>)
 8009246:	4682      	mov	sl, r0
 8009248:	468b      	mov	fp, r1
 800924a:	4640      	mov	r0, r8
 800924c:	4649      	mov	r1, r9
 800924e:	2200      	movs	r2, #0
 8009250:	f7f7 f9d2 	bl	80005f8 <__aeabi_dmul>
 8009254:	4680      	mov	r8, r0
 8009256:	4689      	mov	r9, r1
 8009258:	e7c6      	b.n	80091e8 <_dtoa_r+0x510>
 800925a:	4650      	mov	r0, sl
 800925c:	4659      	mov	r1, fp
 800925e:	f7f7 f9cb 	bl	80005f8 <__aeabi_dmul>
 8009262:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009264:	9d01      	ldr	r5, [sp, #4]
 8009266:	930f      	str	r3, [sp, #60]	; 0x3c
 8009268:	4682      	mov	sl, r0
 800926a:	468b      	mov	fp, r1
 800926c:	4649      	mov	r1, r9
 800926e:	4640      	mov	r0, r8
 8009270:	f7f7 fc72 	bl	8000b58 <__aeabi_d2iz>
 8009274:	4606      	mov	r6, r0
 8009276:	f7f7 f955 	bl	8000524 <__aeabi_i2d>
 800927a:	3630      	adds	r6, #48	; 0x30
 800927c:	4602      	mov	r2, r0
 800927e:	460b      	mov	r3, r1
 8009280:	4640      	mov	r0, r8
 8009282:	4649      	mov	r1, r9
 8009284:	f7f7 f800 	bl	8000288 <__aeabi_dsub>
 8009288:	f805 6b01 	strb.w	r6, [r5], #1
 800928c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800928e:	429d      	cmp	r5, r3
 8009290:	4680      	mov	r8, r0
 8009292:	4689      	mov	r9, r1
 8009294:	f04f 0200 	mov.w	r2, #0
 8009298:	d124      	bne.n	80092e4 <_dtoa_r+0x60c>
 800929a:	4b1b      	ldr	r3, [pc, #108]	; (8009308 <_dtoa_r+0x630>)
 800929c:	4650      	mov	r0, sl
 800929e:	4659      	mov	r1, fp
 80092a0:	f7f6 fff4 	bl	800028c <__adddf3>
 80092a4:	4602      	mov	r2, r0
 80092a6:	460b      	mov	r3, r1
 80092a8:	4640      	mov	r0, r8
 80092aa:	4649      	mov	r1, r9
 80092ac:	f7f7 fc34 	bl	8000b18 <__aeabi_dcmpgt>
 80092b0:	2800      	cmp	r0, #0
 80092b2:	d173      	bne.n	800939c <_dtoa_r+0x6c4>
 80092b4:	4652      	mov	r2, sl
 80092b6:	465b      	mov	r3, fp
 80092b8:	4913      	ldr	r1, [pc, #76]	; (8009308 <_dtoa_r+0x630>)
 80092ba:	2000      	movs	r0, #0
 80092bc:	f7f6 ffe4 	bl	8000288 <__aeabi_dsub>
 80092c0:	4602      	mov	r2, r0
 80092c2:	460b      	mov	r3, r1
 80092c4:	4640      	mov	r0, r8
 80092c6:	4649      	mov	r1, r9
 80092c8:	f7f7 fc08 	bl	8000adc <__aeabi_dcmplt>
 80092cc:	2800      	cmp	r0, #0
 80092ce:	f43f af35 	beq.w	800913c <_dtoa_r+0x464>
 80092d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80092d4:	1e6b      	subs	r3, r5, #1
 80092d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80092d8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80092dc:	2b30      	cmp	r3, #48	; 0x30
 80092de:	d0f8      	beq.n	80092d2 <_dtoa_r+0x5fa>
 80092e0:	9700      	str	r7, [sp, #0]
 80092e2:	e049      	b.n	8009378 <_dtoa_r+0x6a0>
 80092e4:	4b05      	ldr	r3, [pc, #20]	; (80092fc <_dtoa_r+0x624>)
 80092e6:	f7f7 f987 	bl	80005f8 <__aeabi_dmul>
 80092ea:	4680      	mov	r8, r0
 80092ec:	4689      	mov	r9, r1
 80092ee:	e7bd      	b.n	800926c <_dtoa_r+0x594>
 80092f0:	0800b2c8 	.word	0x0800b2c8
 80092f4:	0800b2a0 	.word	0x0800b2a0
 80092f8:	3ff00000 	.word	0x3ff00000
 80092fc:	40240000 	.word	0x40240000
 8009300:	401c0000 	.word	0x401c0000
 8009304:	40140000 	.word	0x40140000
 8009308:	3fe00000 	.word	0x3fe00000
 800930c:	9d01      	ldr	r5, [sp, #4]
 800930e:	4656      	mov	r6, sl
 8009310:	465f      	mov	r7, fp
 8009312:	4642      	mov	r2, r8
 8009314:	464b      	mov	r3, r9
 8009316:	4630      	mov	r0, r6
 8009318:	4639      	mov	r1, r7
 800931a:	f7f7 fa97 	bl	800084c <__aeabi_ddiv>
 800931e:	f7f7 fc1b 	bl	8000b58 <__aeabi_d2iz>
 8009322:	4682      	mov	sl, r0
 8009324:	f7f7 f8fe 	bl	8000524 <__aeabi_i2d>
 8009328:	4642      	mov	r2, r8
 800932a:	464b      	mov	r3, r9
 800932c:	f7f7 f964 	bl	80005f8 <__aeabi_dmul>
 8009330:	4602      	mov	r2, r0
 8009332:	460b      	mov	r3, r1
 8009334:	4630      	mov	r0, r6
 8009336:	4639      	mov	r1, r7
 8009338:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800933c:	f7f6 ffa4 	bl	8000288 <__aeabi_dsub>
 8009340:	f805 6b01 	strb.w	r6, [r5], #1
 8009344:	9e01      	ldr	r6, [sp, #4]
 8009346:	9f03      	ldr	r7, [sp, #12]
 8009348:	1bae      	subs	r6, r5, r6
 800934a:	42b7      	cmp	r7, r6
 800934c:	4602      	mov	r2, r0
 800934e:	460b      	mov	r3, r1
 8009350:	d135      	bne.n	80093be <_dtoa_r+0x6e6>
 8009352:	f7f6 ff9b 	bl	800028c <__adddf3>
 8009356:	4642      	mov	r2, r8
 8009358:	464b      	mov	r3, r9
 800935a:	4606      	mov	r6, r0
 800935c:	460f      	mov	r7, r1
 800935e:	f7f7 fbdb 	bl	8000b18 <__aeabi_dcmpgt>
 8009362:	b9d0      	cbnz	r0, 800939a <_dtoa_r+0x6c2>
 8009364:	4642      	mov	r2, r8
 8009366:	464b      	mov	r3, r9
 8009368:	4630      	mov	r0, r6
 800936a:	4639      	mov	r1, r7
 800936c:	f7f7 fbac 	bl	8000ac8 <__aeabi_dcmpeq>
 8009370:	b110      	cbz	r0, 8009378 <_dtoa_r+0x6a0>
 8009372:	f01a 0f01 	tst.w	sl, #1
 8009376:	d110      	bne.n	800939a <_dtoa_r+0x6c2>
 8009378:	4620      	mov	r0, r4
 800937a:	ee18 1a10 	vmov	r1, s16
 800937e:	f000 faf3 	bl	8009968 <_Bfree>
 8009382:	2300      	movs	r3, #0
 8009384:	9800      	ldr	r0, [sp, #0]
 8009386:	702b      	strb	r3, [r5, #0]
 8009388:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800938a:	3001      	adds	r0, #1
 800938c:	6018      	str	r0, [r3, #0]
 800938e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009390:	2b00      	cmp	r3, #0
 8009392:	f43f acf1 	beq.w	8008d78 <_dtoa_r+0xa0>
 8009396:	601d      	str	r5, [r3, #0]
 8009398:	e4ee      	b.n	8008d78 <_dtoa_r+0xa0>
 800939a:	9f00      	ldr	r7, [sp, #0]
 800939c:	462b      	mov	r3, r5
 800939e:	461d      	mov	r5, r3
 80093a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80093a4:	2a39      	cmp	r2, #57	; 0x39
 80093a6:	d106      	bne.n	80093b6 <_dtoa_r+0x6de>
 80093a8:	9a01      	ldr	r2, [sp, #4]
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d1f7      	bne.n	800939e <_dtoa_r+0x6c6>
 80093ae:	9901      	ldr	r1, [sp, #4]
 80093b0:	2230      	movs	r2, #48	; 0x30
 80093b2:	3701      	adds	r7, #1
 80093b4:	700a      	strb	r2, [r1, #0]
 80093b6:	781a      	ldrb	r2, [r3, #0]
 80093b8:	3201      	adds	r2, #1
 80093ba:	701a      	strb	r2, [r3, #0]
 80093bc:	e790      	b.n	80092e0 <_dtoa_r+0x608>
 80093be:	4ba6      	ldr	r3, [pc, #664]	; (8009658 <_dtoa_r+0x980>)
 80093c0:	2200      	movs	r2, #0
 80093c2:	f7f7 f919 	bl	80005f8 <__aeabi_dmul>
 80093c6:	2200      	movs	r2, #0
 80093c8:	2300      	movs	r3, #0
 80093ca:	4606      	mov	r6, r0
 80093cc:	460f      	mov	r7, r1
 80093ce:	f7f7 fb7b 	bl	8000ac8 <__aeabi_dcmpeq>
 80093d2:	2800      	cmp	r0, #0
 80093d4:	d09d      	beq.n	8009312 <_dtoa_r+0x63a>
 80093d6:	e7cf      	b.n	8009378 <_dtoa_r+0x6a0>
 80093d8:	9a08      	ldr	r2, [sp, #32]
 80093da:	2a00      	cmp	r2, #0
 80093dc:	f000 80d7 	beq.w	800958e <_dtoa_r+0x8b6>
 80093e0:	9a06      	ldr	r2, [sp, #24]
 80093e2:	2a01      	cmp	r2, #1
 80093e4:	f300 80ba 	bgt.w	800955c <_dtoa_r+0x884>
 80093e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80093ea:	2a00      	cmp	r2, #0
 80093ec:	f000 80b2 	beq.w	8009554 <_dtoa_r+0x87c>
 80093f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80093f4:	9e07      	ldr	r6, [sp, #28]
 80093f6:	9d04      	ldr	r5, [sp, #16]
 80093f8:	9a04      	ldr	r2, [sp, #16]
 80093fa:	441a      	add	r2, r3
 80093fc:	9204      	str	r2, [sp, #16]
 80093fe:	9a05      	ldr	r2, [sp, #20]
 8009400:	2101      	movs	r1, #1
 8009402:	441a      	add	r2, r3
 8009404:	4620      	mov	r0, r4
 8009406:	9205      	str	r2, [sp, #20]
 8009408:	f000 fb66 	bl	8009ad8 <__i2b>
 800940c:	4607      	mov	r7, r0
 800940e:	2d00      	cmp	r5, #0
 8009410:	dd0c      	ble.n	800942c <_dtoa_r+0x754>
 8009412:	9b05      	ldr	r3, [sp, #20]
 8009414:	2b00      	cmp	r3, #0
 8009416:	dd09      	ble.n	800942c <_dtoa_r+0x754>
 8009418:	42ab      	cmp	r3, r5
 800941a:	9a04      	ldr	r2, [sp, #16]
 800941c:	bfa8      	it	ge
 800941e:	462b      	movge	r3, r5
 8009420:	1ad2      	subs	r2, r2, r3
 8009422:	9204      	str	r2, [sp, #16]
 8009424:	9a05      	ldr	r2, [sp, #20]
 8009426:	1aed      	subs	r5, r5, r3
 8009428:	1ad3      	subs	r3, r2, r3
 800942a:	9305      	str	r3, [sp, #20]
 800942c:	9b07      	ldr	r3, [sp, #28]
 800942e:	b31b      	cbz	r3, 8009478 <_dtoa_r+0x7a0>
 8009430:	9b08      	ldr	r3, [sp, #32]
 8009432:	2b00      	cmp	r3, #0
 8009434:	f000 80af 	beq.w	8009596 <_dtoa_r+0x8be>
 8009438:	2e00      	cmp	r6, #0
 800943a:	dd13      	ble.n	8009464 <_dtoa_r+0x78c>
 800943c:	4639      	mov	r1, r7
 800943e:	4632      	mov	r2, r6
 8009440:	4620      	mov	r0, r4
 8009442:	f000 fc09 	bl	8009c58 <__pow5mult>
 8009446:	ee18 2a10 	vmov	r2, s16
 800944a:	4601      	mov	r1, r0
 800944c:	4607      	mov	r7, r0
 800944e:	4620      	mov	r0, r4
 8009450:	f000 fb58 	bl	8009b04 <__multiply>
 8009454:	ee18 1a10 	vmov	r1, s16
 8009458:	4680      	mov	r8, r0
 800945a:	4620      	mov	r0, r4
 800945c:	f000 fa84 	bl	8009968 <_Bfree>
 8009460:	ee08 8a10 	vmov	s16, r8
 8009464:	9b07      	ldr	r3, [sp, #28]
 8009466:	1b9a      	subs	r2, r3, r6
 8009468:	d006      	beq.n	8009478 <_dtoa_r+0x7a0>
 800946a:	ee18 1a10 	vmov	r1, s16
 800946e:	4620      	mov	r0, r4
 8009470:	f000 fbf2 	bl	8009c58 <__pow5mult>
 8009474:	ee08 0a10 	vmov	s16, r0
 8009478:	2101      	movs	r1, #1
 800947a:	4620      	mov	r0, r4
 800947c:	f000 fb2c 	bl	8009ad8 <__i2b>
 8009480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009482:	2b00      	cmp	r3, #0
 8009484:	4606      	mov	r6, r0
 8009486:	f340 8088 	ble.w	800959a <_dtoa_r+0x8c2>
 800948a:	461a      	mov	r2, r3
 800948c:	4601      	mov	r1, r0
 800948e:	4620      	mov	r0, r4
 8009490:	f000 fbe2 	bl	8009c58 <__pow5mult>
 8009494:	9b06      	ldr	r3, [sp, #24]
 8009496:	2b01      	cmp	r3, #1
 8009498:	4606      	mov	r6, r0
 800949a:	f340 8081 	ble.w	80095a0 <_dtoa_r+0x8c8>
 800949e:	f04f 0800 	mov.w	r8, #0
 80094a2:	6933      	ldr	r3, [r6, #16]
 80094a4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80094a8:	6918      	ldr	r0, [r3, #16]
 80094aa:	f000 fac5 	bl	8009a38 <__hi0bits>
 80094ae:	f1c0 0020 	rsb	r0, r0, #32
 80094b2:	9b05      	ldr	r3, [sp, #20]
 80094b4:	4418      	add	r0, r3
 80094b6:	f010 001f 	ands.w	r0, r0, #31
 80094ba:	f000 8092 	beq.w	80095e2 <_dtoa_r+0x90a>
 80094be:	f1c0 0320 	rsb	r3, r0, #32
 80094c2:	2b04      	cmp	r3, #4
 80094c4:	f340 808a 	ble.w	80095dc <_dtoa_r+0x904>
 80094c8:	f1c0 001c 	rsb	r0, r0, #28
 80094cc:	9b04      	ldr	r3, [sp, #16]
 80094ce:	4403      	add	r3, r0
 80094d0:	9304      	str	r3, [sp, #16]
 80094d2:	9b05      	ldr	r3, [sp, #20]
 80094d4:	4403      	add	r3, r0
 80094d6:	4405      	add	r5, r0
 80094d8:	9305      	str	r3, [sp, #20]
 80094da:	9b04      	ldr	r3, [sp, #16]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	dd07      	ble.n	80094f0 <_dtoa_r+0x818>
 80094e0:	ee18 1a10 	vmov	r1, s16
 80094e4:	461a      	mov	r2, r3
 80094e6:	4620      	mov	r0, r4
 80094e8:	f000 fc10 	bl	8009d0c <__lshift>
 80094ec:	ee08 0a10 	vmov	s16, r0
 80094f0:	9b05      	ldr	r3, [sp, #20]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	dd05      	ble.n	8009502 <_dtoa_r+0x82a>
 80094f6:	4631      	mov	r1, r6
 80094f8:	461a      	mov	r2, r3
 80094fa:	4620      	mov	r0, r4
 80094fc:	f000 fc06 	bl	8009d0c <__lshift>
 8009500:	4606      	mov	r6, r0
 8009502:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009504:	2b00      	cmp	r3, #0
 8009506:	d06e      	beq.n	80095e6 <_dtoa_r+0x90e>
 8009508:	ee18 0a10 	vmov	r0, s16
 800950c:	4631      	mov	r1, r6
 800950e:	f000 fc6d 	bl	8009dec <__mcmp>
 8009512:	2800      	cmp	r0, #0
 8009514:	da67      	bge.n	80095e6 <_dtoa_r+0x90e>
 8009516:	9b00      	ldr	r3, [sp, #0]
 8009518:	3b01      	subs	r3, #1
 800951a:	ee18 1a10 	vmov	r1, s16
 800951e:	9300      	str	r3, [sp, #0]
 8009520:	220a      	movs	r2, #10
 8009522:	2300      	movs	r3, #0
 8009524:	4620      	mov	r0, r4
 8009526:	f000 fa41 	bl	80099ac <__multadd>
 800952a:	9b08      	ldr	r3, [sp, #32]
 800952c:	ee08 0a10 	vmov	s16, r0
 8009530:	2b00      	cmp	r3, #0
 8009532:	f000 81b1 	beq.w	8009898 <_dtoa_r+0xbc0>
 8009536:	2300      	movs	r3, #0
 8009538:	4639      	mov	r1, r7
 800953a:	220a      	movs	r2, #10
 800953c:	4620      	mov	r0, r4
 800953e:	f000 fa35 	bl	80099ac <__multadd>
 8009542:	9b02      	ldr	r3, [sp, #8]
 8009544:	2b00      	cmp	r3, #0
 8009546:	4607      	mov	r7, r0
 8009548:	f300 808e 	bgt.w	8009668 <_dtoa_r+0x990>
 800954c:	9b06      	ldr	r3, [sp, #24]
 800954e:	2b02      	cmp	r3, #2
 8009550:	dc51      	bgt.n	80095f6 <_dtoa_r+0x91e>
 8009552:	e089      	b.n	8009668 <_dtoa_r+0x990>
 8009554:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009556:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800955a:	e74b      	b.n	80093f4 <_dtoa_r+0x71c>
 800955c:	9b03      	ldr	r3, [sp, #12]
 800955e:	1e5e      	subs	r6, r3, #1
 8009560:	9b07      	ldr	r3, [sp, #28]
 8009562:	42b3      	cmp	r3, r6
 8009564:	bfbf      	itttt	lt
 8009566:	9b07      	ldrlt	r3, [sp, #28]
 8009568:	9607      	strlt	r6, [sp, #28]
 800956a:	1af2      	sublt	r2, r6, r3
 800956c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800956e:	bfb6      	itet	lt
 8009570:	189b      	addlt	r3, r3, r2
 8009572:	1b9e      	subge	r6, r3, r6
 8009574:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009576:	9b03      	ldr	r3, [sp, #12]
 8009578:	bfb8      	it	lt
 800957a:	2600      	movlt	r6, #0
 800957c:	2b00      	cmp	r3, #0
 800957e:	bfb7      	itett	lt
 8009580:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009584:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009588:	1a9d      	sublt	r5, r3, r2
 800958a:	2300      	movlt	r3, #0
 800958c:	e734      	b.n	80093f8 <_dtoa_r+0x720>
 800958e:	9e07      	ldr	r6, [sp, #28]
 8009590:	9d04      	ldr	r5, [sp, #16]
 8009592:	9f08      	ldr	r7, [sp, #32]
 8009594:	e73b      	b.n	800940e <_dtoa_r+0x736>
 8009596:	9a07      	ldr	r2, [sp, #28]
 8009598:	e767      	b.n	800946a <_dtoa_r+0x792>
 800959a:	9b06      	ldr	r3, [sp, #24]
 800959c:	2b01      	cmp	r3, #1
 800959e:	dc18      	bgt.n	80095d2 <_dtoa_r+0x8fa>
 80095a0:	f1ba 0f00 	cmp.w	sl, #0
 80095a4:	d115      	bne.n	80095d2 <_dtoa_r+0x8fa>
 80095a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80095aa:	b993      	cbnz	r3, 80095d2 <_dtoa_r+0x8fa>
 80095ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80095b0:	0d1b      	lsrs	r3, r3, #20
 80095b2:	051b      	lsls	r3, r3, #20
 80095b4:	b183      	cbz	r3, 80095d8 <_dtoa_r+0x900>
 80095b6:	9b04      	ldr	r3, [sp, #16]
 80095b8:	3301      	adds	r3, #1
 80095ba:	9304      	str	r3, [sp, #16]
 80095bc:	9b05      	ldr	r3, [sp, #20]
 80095be:	3301      	adds	r3, #1
 80095c0:	9305      	str	r3, [sp, #20]
 80095c2:	f04f 0801 	mov.w	r8, #1
 80095c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	f47f af6a 	bne.w	80094a2 <_dtoa_r+0x7ca>
 80095ce:	2001      	movs	r0, #1
 80095d0:	e76f      	b.n	80094b2 <_dtoa_r+0x7da>
 80095d2:	f04f 0800 	mov.w	r8, #0
 80095d6:	e7f6      	b.n	80095c6 <_dtoa_r+0x8ee>
 80095d8:	4698      	mov	r8, r3
 80095da:	e7f4      	b.n	80095c6 <_dtoa_r+0x8ee>
 80095dc:	f43f af7d 	beq.w	80094da <_dtoa_r+0x802>
 80095e0:	4618      	mov	r0, r3
 80095e2:	301c      	adds	r0, #28
 80095e4:	e772      	b.n	80094cc <_dtoa_r+0x7f4>
 80095e6:	9b03      	ldr	r3, [sp, #12]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	dc37      	bgt.n	800965c <_dtoa_r+0x984>
 80095ec:	9b06      	ldr	r3, [sp, #24]
 80095ee:	2b02      	cmp	r3, #2
 80095f0:	dd34      	ble.n	800965c <_dtoa_r+0x984>
 80095f2:	9b03      	ldr	r3, [sp, #12]
 80095f4:	9302      	str	r3, [sp, #8]
 80095f6:	9b02      	ldr	r3, [sp, #8]
 80095f8:	b96b      	cbnz	r3, 8009616 <_dtoa_r+0x93e>
 80095fa:	4631      	mov	r1, r6
 80095fc:	2205      	movs	r2, #5
 80095fe:	4620      	mov	r0, r4
 8009600:	f000 f9d4 	bl	80099ac <__multadd>
 8009604:	4601      	mov	r1, r0
 8009606:	4606      	mov	r6, r0
 8009608:	ee18 0a10 	vmov	r0, s16
 800960c:	f000 fbee 	bl	8009dec <__mcmp>
 8009610:	2800      	cmp	r0, #0
 8009612:	f73f adbb 	bgt.w	800918c <_dtoa_r+0x4b4>
 8009616:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009618:	9d01      	ldr	r5, [sp, #4]
 800961a:	43db      	mvns	r3, r3
 800961c:	9300      	str	r3, [sp, #0]
 800961e:	f04f 0800 	mov.w	r8, #0
 8009622:	4631      	mov	r1, r6
 8009624:	4620      	mov	r0, r4
 8009626:	f000 f99f 	bl	8009968 <_Bfree>
 800962a:	2f00      	cmp	r7, #0
 800962c:	f43f aea4 	beq.w	8009378 <_dtoa_r+0x6a0>
 8009630:	f1b8 0f00 	cmp.w	r8, #0
 8009634:	d005      	beq.n	8009642 <_dtoa_r+0x96a>
 8009636:	45b8      	cmp	r8, r7
 8009638:	d003      	beq.n	8009642 <_dtoa_r+0x96a>
 800963a:	4641      	mov	r1, r8
 800963c:	4620      	mov	r0, r4
 800963e:	f000 f993 	bl	8009968 <_Bfree>
 8009642:	4639      	mov	r1, r7
 8009644:	4620      	mov	r0, r4
 8009646:	f000 f98f 	bl	8009968 <_Bfree>
 800964a:	e695      	b.n	8009378 <_dtoa_r+0x6a0>
 800964c:	2600      	movs	r6, #0
 800964e:	4637      	mov	r7, r6
 8009650:	e7e1      	b.n	8009616 <_dtoa_r+0x93e>
 8009652:	9700      	str	r7, [sp, #0]
 8009654:	4637      	mov	r7, r6
 8009656:	e599      	b.n	800918c <_dtoa_r+0x4b4>
 8009658:	40240000 	.word	0x40240000
 800965c:	9b08      	ldr	r3, [sp, #32]
 800965e:	2b00      	cmp	r3, #0
 8009660:	f000 80ca 	beq.w	80097f8 <_dtoa_r+0xb20>
 8009664:	9b03      	ldr	r3, [sp, #12]
 8009666:	9302      	str	r3, [sp, #8]
 8009668:	2d00      	cmp	r5, #0
 800966a:	dd05      	ble.n	8009678 <_dtoa_r+0x9a0>
 800966c:	4639      	mov	r1, r7
 800966e:	462a      	mov	r2, r5
 8009670:	4620      	mov	r0, r4
 8009672:	f000 fb4b 	bl	8009d0c <__lshift>
 8009676:	4607      	mov	r7, r0
 8009678:	f1b8 0f00 	cmp.w	r8, #0
 800967c:	d05b      	beq.n	8009736 <_dtoa_r+0xa5e>
 800967e:	6879      	ldr	r1, [r7, #4]
 8009680:	4620      	mov	r0, r4
 8009682:	f000 f931 	bl	80098e8 <_Balloc>
 8009686:	4605      	mov	r5, r0
 8009688:	b928      	cbnz	r0, 8009696 <_dtoa_r+0x9be>
 800968a:	4b87      	ldr	r3, [pc, #540]	; (80098a8 <_dtoa_r+0xbd0>)
 800968c:	4602      	mov	r2, r0
 800968e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009692:	f7ff bb3b 	b.w	8008d0c <_dtoa_r+0x34>
 8009696:	693a      	ldr	r2, [r7, #16]
 8009698:	3202      	adds	r2, #2
 800969a:	0092      	lsls	r2, r2, #2
 800969c:	f107 010c 	add.w	r1, r7, #12
 80096a0:	300c      	adds	r0, #12
 80096a2:	f000 f913 	bl	80098cc <memcpy>
 80096a6:	2201      	movs	r2, #1
 80096a8:	4629      	mov	r1, r5
 80096aa:	4620      	mov	r0, r4
 80096ac:	f000 fb2e 	bl	8009d0c <__lshift>
 80096b0:	9b01      	ldr	r3, [sp, #4]
 80096b2:	f103 0901 	add.w	r9, r3, #1
 80096b6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80096ba:	4413      	add	r3, r2
 80096bc:	9305      	str	r3, [sp, #20]
 80096be:	f00a 0301 	and.w	r3, sl, #1
 80096c2:	46b8      	mov	r8, r7
 80096c4:	9304      	str	r3, [sp, #16]
 80096c6:	4607      	mov	r7, r0
 80096c8:	4631      	mov	r1, r6
 80096ca:	ee18 0a10 	vmov	r0, s16
 80096ce:	f7ff fa75 	bl	8008bbc <quorem>
 80096d2:	4641      	mov	r1, r8
 80096d4:	9002      	str	r0, [sp, #8]
 80096d6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80096da:	ee18 0a10 	vmov	r0, s16
 80096de:	f000 fb85 	bl	8009dec <__mcmp>
 80096e2:	463a      	mov	r2, r7
 80096e4:	9003      	str	r0, [sp, #12]
 80096e6:	4631      	mov	r1, r6
 80096e8:	4620      	mov	r0, r4
 80096ea:	f000 fb9b 	bl	8009e24 <__mdiff>
 80096ee:	68c2      	ldr	r2, [r0, #12]
 80096f0:	f109 3bff 	add.w	fp, r9, #4294967295
 80096f4:	4605      	mov	r5, r0
 80096f6:	bb02      	cbnz	r2, 800973a <_dtoa_r+0xa62>
 80096f8:	4601      	mov	r1, r0
 80096fa:	ee18 0a10 	vmov	r0, s16
 80096fe:	f000 fb75 	bl	8009dec <__mcmp>
 8009702:	4602      	mov	r2, r0
 8009704:	4629      	mov	r1, r5
 8009706:	4620      	mov	r0, r4
 8009708:	9207      	str	r2, [sp, #28]
 800970a:	f000 f92d 	bl	8009968 <_Bfree>
 800970e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009712:	ea43 0102 	orr.w	r1, r3, r2
 8009716:	9b04      	ldr	r3, [sp, #16]
 8009718:	430b      	orrs	r3, r1
 800971a:	464d      	mov	r5, r9
 800971c:	d10f      	bne.n	800973e <_dtoa_r+0xa66>
 800971e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009722:	d02a      	beq.n	800977a <_dtoa_r+0xaa2>
 8009724:	9b03      	ldr	r3, [sp, #12]
 8009726:	2b00      	cmp	r3, #0
 8009728:	dd02      	ble.n	8009730 <_dtoa_r+0xa58>
 800972a:	9b02      	ldr	r3, [sp, #8]
 800972c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009730:	f88b a000 	strb.w	sl, [fp]
 8009734:	e775      	b.n	8009622 <_dtoa_r+0x94a>
 8009736:	4638      	mov	r0, r7
 8009738:	e7ba      	b.n	80096b0 <_dtoa_r+0x9d8>
 800973a:	2201      	movs	r2, #1
 800973c:	e7e2      	b.n	8009704 <_dtoa_r+0xa2c>
 800973e:	9b03      	ldr	r3, [sp, #12]
 8009740:	2b00      	cmp	r3, #0
 8009742:	db04      	blt.n	800974e <_dtoa_r+0xa76>
 8009744:	9906      	ldr	r1, [sp, #24]
 8009746:	430b      	orrs	r3, r1
 8009748:	9904      	ldr	r1, [sp, #16]
 800974a:	430b      	orrs	r3, r1
 800974c:	d122      	bne.n	8009794 <_dtoa_r+0xabc>
 800974e:	2a00      	cmp	r2, #0
 8009750:	ddee      	ble.n	8009730 <_dtoa_r+0xa58>
 8009752:	ee18 1a10 	vmov	r1, s16
 8009756:	2201      	movs	r2, #1
 8009758:	4620      	mov	r0, r4
 800975a:	f000 fad7 	bl	8009d0c <__lshift>
 800975e:	4631      	mov	r1, r6
 8009760:	ee08 0a10 	vmov	s16, r0
 8009764:	f000 fb42 	bl	8009dec <__mcmp>
 8009768:	2800      	cmp	r0, #0
 800976a:	dc03      	bgt.n	8009774 <_dtoa_r+0xa9c>
 800976c:	d1e0      	bne.n	8009730 <_dtoa_r+0xa58>
 800976e:	f01a 0f01 	tst.w	sl, #1
 8009772:	d0dd      	beq.n	8009730 <_dtoa_r+0xa58>
 8009774:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009778:	d1d7      	bne.n	800972a <_dtoa_r+0xa52>
 800977a:	2339      	movs	r3, #57	; 0x39
 800977c:	f88b 3000 	strb.w	r3, [fp]
 8009780:	462b      	mov	r3, r5
 8009782:	461d      	mov	r5, r3
 8009784:	3b01      	subs	r3, #1
 8009786:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800978a:	2a39      	cmp	r2, #57	; 0x39
 800978c:	d071      	beq.n	8009872 <_dtoa_r+0xb9a>
 800978e:	3201      	adds	r2, #1
 8009790:	701a      	strb	r2, [r3, #0]
 8009792:	e746      	b.n	8009622 <_dtoa_r+0x94a>
 8009794:	2a00      	cmp	r2, #0
 8009796:	dd07      	ble.n	80097a8 <_dtoa_r+0xad0>
 8009798:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800979c:	d0ed      	beq.n	800977a <_dtoa_r+0xaa2>
 800979e:	f10a 0301 	add.w	r3, sl, #1
 80097a2:	f88b 3000 	strb.w	r3, [fp]
 80097a6:	e73c      	b.n	8009622 <_dtoa_r+0x94a>
 80097a8:	9b05      	ldr	r3, [sp, #20]
 80097aa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80097ae:	4599      	cmp	r9, r3
 80097b0:	d047      	beq.n	8009842 <_dtoa_r+0xb6a>
 80097b2:	ee18 1a10 	vmov	r1, s16
 80097b6:	2300      	movs	r3, #0
 80097b8:	220a      	movs	r2, #10
 80097ba:	4620      	mov	r0, r4
 80097bc:	f000 f8f6 	bl	80099ac <__multadd>
 80097c0:	45b8      	cmp	r8, r7
 80097c2:	ee08 0a10 	vmov	s16, r0
 80097c6:	f04f 0300 	mov.w	r3, #0
 80097ca:	f04f 020a 	mov.w	r2, #10
 80097ce:	4641      	mov	r1, r8
 80097d0:	4620      	mov	r0, r4
 80097d2:	d106      	bne.n	80097e2 <_dtoa_r+0xb0a>
 80097d4:	f000 f8ea 	bl	80099ac <__multadd>
 80097d8:	4680      	mov	r8, r0
 80097da:	4607      	mov	r7, r0
 80097dc:	f109 0901 	add.w	r9, r9, #1
 80097e0:	e772      	b.n	80096c8 <_dtoa_r+0x9f0>
 80097e2:	f000 f8e3 	bl	80099ac <__multadd>
 80097e6:	4639      	mov	r1, r7
 80097e8:	4680      	mov	r8, r0
 80097ea:	2300      	movs	r3, #0
 80097ec:	220a      	movs	r2, #10
 80097ee:	4620      	mov	r0, r4
 80097f0:	f000 f8dc 	bl	80099ac <__multadd>
 80097f4:	4607      	mov	r7, r0
 80097f6:	e7f1      	b.n	80097dc <_dtoa_r+0xb04>
 80097f8:	9b03      	ldr	r3, [sp, #12]
 80097fa:	9302      	str	r3, [sp, #8]
 80097fc:	9d01      	ldr	r5, [sp, #4]
 80097fe:	ee18 0a10 	vmov	r0, s16
 8009802:	4631      	mov	r1, r6
 8009804:	f7ff f9da 	bl	8008bbc <quorem>
 8009808:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800980c:	9b01      	ldr	r3, [sp, #4]
 800980e:	f805 ab01 	strb.w	sl, [r5], #1
 8009812:	1aea      	subs	r2, r5, r3
 8009814:	9b02      	ldr	r3, [sp, #8]
 8009816:	4293      	cmp	r3, r2
 8009818:	dd09      	ble.n	800982e <_dtoa_r+0xb56>
 800981a:	ee18 1a10 	vmov	r1, s16
 800981e:	2300      	movs	r3, #0
 8009820:	220a      	movs	r2, #10
 8009822:	4620      	mov	r0, r4
 8009824:	f000 f8c2 	bl	80099ac <__multadd>
 8009828:	ee08 0a10 	vmov	s16, r0
 800982c:	e7e7      	b.n	80097fe <_dtoa_r+0xb26>
 800982e:	9b02      	ldr	r3, [sp, #8]
 8009830:	2b00      	cmp	r3, #0
 8009832:	bfc8      	it	gt
 8009834:	461d      	movgt	r5, r3
 8009836:	9b01      	ldr	r3, [sp, #4]
 8009838:	bfd8      	it	le
 800983a:	2501      	movle	r5, #1
 800983c:	441d      	add	r5, r3
 800983e:	f04f 0800 	mov.w	r8, #0
 8009842:	ee18 1a10 	vmov	r1, s16
 8009846:	2201      	movs	r2, #1
 8009848:	4620      	mov	r0, r4
 800984a:	f000 fa5f 	bl	8009d0c <__lshift>
 800984e:	4631      	mov	r1, r6
 8009850:	ee08 0a10 	vmov	s16, r0
 8009854:	f000 faca 	bl	8009dec <__mcmp>
 8009858:	2800      	cmp	r0, #0
 800985a:	dc91      	bgt.n	8009780 <_dtoa_r+0xaa8>
 800985c:	d102      	bne.n	8009864 <_dtoa_r+0xb8c>
 800985e:	f01a 0f01 	tst.w	sl, #1
 8009862:	d18d      	bne.n	8009780 <_dtoa_r+0xaa8>
 8009864:	462b      	mov	r3, r5
 8009866:	461d      	mov	r5, r3
 8009868:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800986c:	2a30      	cmp	r2, #48	; 0x30
 800986e:	d0fa      	beq.n	8009866 <_dtoa_r+0xb8e>
 8009870:	e6d7      	b.n	8009622 <_dtoa_r+0x94a>
 8009872:	9a01      	ldr	r2, [sp, #4]
 8009874:	429a      	cmp	r2, r3
 8009876:	d184      	bne.n	8009782 <_dtoa_r+0xaaa>
 8009878:	9b00      	ldr	r3, [sp, #0]
 800987a:	3301      	adds	r3, #1
 800987c:	9300      	str	r3, [sp, #0]
 800987e:	2331      	movs	r3, #49	; 0x31
 8009880:	7013      	strb	r3, [r2, #0]
 8009882:	e6ce      	b.n	8009622 <_dtoa_r+0x94a>
 8009884:	4b09      	ldr	r3, [pc, #36]	; (80098ac <_dtoa_r+0xbd4>)
 8009886:	f7ff ba95 	b.w	8008db4 <_dtoa_r+0xdc>
 800988a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800988c:	2b00      	cmp	r3, #0
 800988e:	f47f aa6e 	bne.w	8008d6e <_dtoa_r+0x96>
 8009892:	4b07      	ldr	r3, [pc, #28]	; (80098b0 <_dtoa_r+0xbd8>)
 8009894:	f7ff ba8e 	b.w	8008db4 <_dtoa_r+0xdc>
 8009898:	9b02      	ldr	r3, [sp, #8]
 800989a:	2b00      	cmp	r3, #0
 800989c:	dcae      	bgt.n	80097fc <_dtoa_r+0xb24>
 800989e:	9b06      	ldr	r3, [sp, #24]
 80098a0:	2b02      	cmp	r3, #2
 80098a2:	f73f aea8 	bgt.w	80095f6 <_dtoa_r+0x91e>
 80098a6:	e7a9      	b.n	80097fc <_dtoa_r+0xb24>
 80098a8:	0800b22f 	.word	0x0800b22f
 80098ac:	0800b18c 	.word	0x0800b18c
 80098b0:	0800b1b0 	.word	0x0800b1b0

080098b4 <_localeconv_r>:
 80098b4:	4800      	ldr	r0, [pc, #0]	; (80098b8 <_localeconv_r+0x4>)
 80098b6:	4770      	bx	lr
 80098b8:	20000160 	.word	0x20000160

080098bc <malloc>:
 80098bc:	4b02      	ldr	r3, [pc, #8]	; (80098c8 <malloc+0xc>)
 80098be:	4601      	mov	r1, r0
 80098c0:	6818      	ldr	r0, [r3, #0]
 80098c2:	f000 bc17 	b.w	800a0f4 <_malloc_r>
 80098c6:	bf00      	nop
 80098c8:	2000000c 	.word	0x2000000c

080098cc <memcpy>:
 80098cc:	440a      	add	r2, r1
 80098ce:	4291      	cmp	r1, r2
 80098d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80098d4:	d100      	bne.n	80098d8 <memcpy+0xc>
 80098d6:	4770      	bx	lr
 80098d8:	b510      	push	{r4, lr}
 80098da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098e2:	4291      	cmp	r1, r2
 80098e4:	d1f9      	bne.n	80098da <memcpy+0xe>
 80098e6:	bd10      	pop	{r4, pc}

080098e8 <_Balloc>:
 80098e8:	b570      	push	{r4, r5, r6, lr}
 80098ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80098ec:	4604      	mov	r4, r0
 80098ee:	460d      	mov	r5, r1
 80098f0:	b976      	cbnz	r6, 8009910 <_Balloc+0x28>
 80098f2:	2010      	movs	r0, #16
 80098f4:	f7ff ffe2 	bl	80098bc <malloc>
 80098f8:	4602      	mov	r2, r0
 80098fa:	6260      	str	r0, [r4, #36]	; 0x24
 80098fc:	b920      	cbnz	r0, 8009908 <_Balloc+0x20>
 80098fe:	4b18      	ldr	r3, [pc, #96]	; (8009960 <_Balloc+0x78>)
 8009900:	4818      	ldr	r0, [pc, #96]	; (8009964 <_Balloc+0x7c>)
 8009902:	2166      	movs	r1, #102	; 0x66
 8009904:	f000 fdd6 	bl	800a4b4 <__assert_func>
 8009908:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800990c:	6006      	str	r6, [r0, #0]
 800990e:	60c6      	str	r6, [r0, #12]
 8009910:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009912:	68f3      	ldr	r3, [r6, #12]
 8009914:	b183      	cbz	r3, 8009938 <_Balloc+0x50>
 8009916:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009918:	68db      	ldr	r3, [r3, #12]
 800991a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800991e:	b9b8      	cbnz	r0, 8009950 <_Balloc+0x68>
 8009920:	2101      	movs	r1, #1
 8009922:	fa01 f605 	lsl.w	r6, r1, r5
 8009926:	1d72      	adds	r2, r6, #5
 8009928:	0092      	lsls	r2, r2, #2
 800992a:	4620      	mov	r0, r4
 800992c:	f000 fb60 	bl	8009ff0 <_calloc_r>
 8009930:	b160      	cbz	r0, 800994c <_Balloc+0x64>
 8009932:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009936:	e00e      	b.n	8009956 <_Balloc+0x6e>
 8009938:	2221      	movs	r2, #33	; 0x21
 800993a:	2104      	movs	r1, #4
 800993c:	4620      	mov	r0, r4
 800993e:	f000 fb57 	bl	8009ff0 <_calloc_r>
 8009942:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009944:	60f0      	str	r0, [r6, #12]
 8009946:	68db      	ldr	r3, [r3, #12]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d1e4      	bne.n	8009916 <_Balloc+0x2e>
 800994c:	2000      	movs	r0, #0
 800994e:	bd70      	pop	{r4, r5, r6, pc}
 8009950:	6802      	ldr	r2, [r0, #0]
 8009952:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009956:	2300      	movs	r3, #0
 8009958:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800995c:	e7f7      	b.n	800994e <_Balloc+0x66>
 800995e:	bf00      	nop
 8009960:	0800b1bd 	.word	0x0800b1bd
 8009964:	0800b240 	.word	0x0800b240

08009968 <_Bfree>:
 8009968:	b570      	push	{r4, r5, r6, lr}
 800996a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800996c:	4605      	mov	r5, r0
 800996e:	460c      	mov	r4, r1
 8009970:	b976      	cbnz	r6, 8009990 <_Bfree+0x28>
 8009972:	2010      	movs	r0, #16
 8009974:	f7ff ffa2 	bl	80098bc <malloc>
 8009978:	4602      	mov	r2, r0
 800997a:	6268      	str	r0, [r5, #36]	; 0x24
 800997c:	b920      	cbnz	r0, 8009988 <_Bfree+0x20>
 800997e:	4b09      	ldr	r3, [pc, #36]	; (80099a4 <_Bfree+0x3c>)
 8009980:	4809      	ldr	r0, [pc, #36]	; (80099a8 <_Bfree+0x40>)
 8009982:	218a      	movs	r1, #138	; 0x8a
 8009984:	f000 fd96 	bl	800a4b4 <__assert_func>
 8009988:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800998c:	6006      	str	r6, [r0, #0]
 800998e:	60c6      	str	r6, [r0, #12]
 8009990:	b13c      	cbz	r4, 80099a2 <_Bfree+0x3a>
 8009992:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009994:	6862      	ldr	r2, [r4, #4]
 8009996:	68db      	ldr	r3, [r3, #12]
 8009998:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800999c:	6021      	str	r1, [r4, #0]
 800999e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80099a2:	bd70      	pop	{r4, r5, r6, pc}
 80099a4:	0800b1bd 	.word	0x0800b1bd
 80099a8:	0800b240 	.word	0x0800b240

080099ac <__multadd>:
 80099ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099b0:	690d      	ldr	r5, [r1, #16]
 80099b2:	4607      	mov	r7, r0
 80099b4:	460c      	mov	r4, r1
 80099b6:	461e      	mov	r6, r3
 80099b8:	f101 0c14 	add.w	ip, r1, #20
 80099bc:	2000      	movs	r0, #0
 80099be:	f8dc 3000 	ldr.w	r3, [ip]
 80099c2:	b299      	uxth	r1, r3
 80099c4:	fb02 6101 	mla	r1, r2, r1, r6
 80099c8:	0c1e      	lsrs	r6, r3, #16
 80099ca:	0c0b      	lsrs	r3, r1, #16
 80099cc:	fb02 3306 	mla	r3, r2, r6, r3
 80099d0:	b289      	uxth	r1, r1
 80099d2:	3001      	adds	r0, #1
 80099d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80099d8:	4285      	cmp	r5, r0
 80099da:	f84c 1b04 	str.w	r1, [ip], #4
 80099de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80099e2:	dcec      	bgt.n	80099be <__multadd+0x12>
 80099e4:	b30e      	cbz	r6, 8009a2a <__multadd+0x7e>
 80099e6:	68a3      	ldr	r3, [r4, #8]
 80099e8:	42ab      	cmp	r3, r5
 80099ea:	dc19      	bgt.n	8009a20 <__multadd+0x74>
 80099ec:	6861      	ldr	r1, [r4, #4]
 80099ee:	4638      	mov	r0, r7
 80099f0:	3101      	adds	r1, #1
 80099f2:	f7ff ff79 	bl	80098e8 <_Balloc>
 80099f6:	4680      	mov	r8, r0
 80099f8:	b928      	cbnz	r0, 8009a06 <__multadd+0x5a>
 80099fa:	4602      	mov	r2, r0
 80099fc:	4b0c      	ldr	r3, [pc, #48]	; (8009a30 <__multadd+0x84>)
 80099fe:	480d      	ldr	r0, [pc, #52]	; (8009a34 <__multadd+0x88>)
 8009a00:	21b5      	movs	r1, #181	; 0xb5
 8009a02:	f000 fd57 	bl	800a4b4 <__assert_func>
 8009a06:	6922      	ldr	r2, [r4, #16]
 8009a08:	3202      	adds	r2, #2
 8009a0a:	f104 010c 	add.w	r1, r4, #12
 8009a0e:	0092      	lsls	r2, r2, #2
 8009a10:	300c      	adds	r0, #12
 8009a12:	f7ff ff5b 	bl	80098cc <memcpy>
 8009a16:	4621      	mov	r1, r4
 8009a18:	4638      	mov	r0, r7
 8009a1a:	f7ff ffa5 	bl	8009968 <_Bfree>
 8009a1e:	4644      	mov	r4, r8
 8009a20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009a24:	3501      	adds	r5, #1
 8009a26:	615e      	str	r6, [r3, #20]
 8009a28:	6125      	str	r5, [r4, #16]
 8009a2a:	4620      	mov	r0, r4
 8009a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a30:	0800b22f 	.word	0x0800b22f
 8009a34:	0800b240 	.word	0x0800b240

08009a38 <__hi0bits>:
 8009a38:	0c03      	lsrs	r3, r0, #16
 8009a3a:	041b      	lsls	r3, r3, #16
 8009a3c:	b9d3      	cbnz	r3, 8009a74 <__hi0bits+0x3c>
 8009a3e:	0400      	lsls	r0, r0, #16
 8009a40:	2310      	movs	r3, #16
 8009a42:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009a46:	bf04      	itt	eq
 8009a48:	0200      	lsleq	r0, r0, #8
 8009a4a:	3308      	addeq	r3, #8
 8009a4c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009a50:	bf04      	itt	eq
 8009a52:	0100      	lsleq	r0, r0, #4
 8009a54:	3304      	addeq	r3, #4
 8009a56:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009a5a:	bf04      	itt	eq
 8009a5c:	0080      	lsleq	r0, r0, #2
 8009a5e:	3302      	addeq	r3, #2
 8009a60:	2800      	cmp	r0, #0
 8009a62:	db05      	blt.n	8009a70 <__hi0bits+0x38>
 8009a64:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009a68:	f103 0301 	add.w	r3, r3, #1
 8009a6c:	bf08      	it	eq
 8009a6e:	2320      	moveq	r3, #32
 8009a70:	4618      	mov	r0, r3
 8009a72:	4770      	bx	lr
 8009a74:	2300      	movs	r3, #0
 8009a76:	e7e4      	b.n	8009a42 <__hi0bits+0xa>

08009a78 <__lo0bits>:
 8009a78:	6803      	ldr	r3, [r0, #0]
 8009a7a:	f013 0207 	ands.w	r2, r3, #7
 8009a7e:	4601      	mov	r1, r0
 8009a80:	d00b      	beq.n	8009a9a <__lo0bits+0x22>
 8009a82:	07da      	lsls	r2, r3, #31
 8009a84:	d423      	bmi.n	8009ace <__lo0bits+0x56>
 8009a86:	0798      	lsls	r0, r3, #30
 8009a88:	bf49      	itett	mi
 8009a8a:	085b      	lsrmi	r3, r3, #1
 8009a8c:	089b      	lsrpl	r3, r3, #2
 8009a8e:	2001      	movmi	r0, #1
 8009a90:	600b      	strmi	r3, [r1, #0]
 8009a92:	bf5c      	itt	pl
 8009a94:	600b      	strpl	r3, [r1, #0]
 8009a96:	2002      	movpl	r0, #2
 8009a98:	4770      	bx	lr
 8009a9a:	b298      	uxth	r0, r3
 8009a9c:	b9a8      	cbnz	r0, 8009aca <__lo0bits+0x52>
 8009a9e:	0c1b      	lsrs	r3, r3, #16
 8009aa0:	2010      	movs	r0, #16
 8009aa2:	b2da      	uxtb	r2, r3
 8009aa4:	b90a      	cbnz	r2, 8009aaa <__lo0bits+0x32>
 8009aa6:	3008      	adds	r0, #8
 8009aa8:	0a1b      	lsrs	r3, r3, #8
 8009aaa:	071a      	lsls	r2, r3, #28
 8009aac:	bf04      	itt	eq
 8009aae:	091b      	lsreq	r3, r3, #4
 8009ab0:	3004      	addeq	r0, #4
 8009ab2:	079a      	lsls	r2, r3, #30
 8009ab4:	bf04      	itt	eq
 8009ab6:	089b      	lsreq	r3, r3, #2
 8009ab8:	3002      	addeq	r0, #2
 8009aba:	07da      	lsls	r2, r3, #31
 8009abc:	d403      	bmi.n	8009ac6 <__lo0bits+0x4e>
 8009abe:	085b      	lsrs	r3, r3, #1
 8009ac0:	f100 0001 	add.w	r0, r0, #1
 8009ac4:	d005      	beq.n	8009ad2 <__lo0bits+0x5a>
 8009ac6:	600b      	str	r3, [r1, #0]
 8009ac8:	4770      	bx	lr
 8009aca:	4610      	mov	r0, r2
 8009acc:	e7e9      	b.n	8009aa2 <__lo0bits+0x2a>
 8009ace:	2000      	movs	r0, #0
 8009ad0:	4770      	bx	lr
 8009ad2:	2020      	movs	r0, #32
 8009ad4:	4770      	bx	lr
	...

08009ad8 <__i2b>:
 8009ad8:	b510      	push	{r4, lr}
 8009ada:	460c      	mov	r4, r1
 8009adc:	2101      	movs	r1, #1
 8009ade:	f7ff ff03 	bl	80098e8 <_Balloc>
 8009ae2:	4602      	mov	r2, r0
 8009ae4:	b928      	cbnz	r0, 8009af2 <__i2b+0x1a>
 8009ae6:	4b05      	ldr	r3, [pc, #20]	; (8009afc <__i2b+0x24>)
 8009ae8:	4805      	ldr	r0, [pc, #20]	; (8009b00 <__i2b+0x28>)
 8009aea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009aee:	f000 fce1 	bl	800a4b4 <__assert_func>
 8009af2:	2301      	movs	r3, #1
 8009af4:	6144      	str	r4, [r0, #20]
 8009af6:	6103      	str	r3, [r0, #16]
 8009af8:	bd10      	pop	{r4, pc}
 8009afa:	bf00      	nop
 8009afc:	0800b22f 	.word	0x0800b22f
 8009b00:	0800b240 	.word	0x0800b240

08009b04 <__multiply>:
 8009b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b08:	4691      	mov	r9, r2
 8009b0a:	690a      	ldr	r2, [r1, #16]
 8009b0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009b10:	429a      	cmp	r2, r3
 8009b12:	bfb8      	it	lt
 8009b14:	460b      	movlt	r3, r1
 8009b16:	460c      	mov	r4, r1
 8009b18:	bfbc      	itt	lt
 8009b1a:	464c      	movlt	r4, r9
 8009b1c:	4699      	movlt	r9, r3
 8009b1e:	6927      	ldr	r7, [r4, #16]
 8009b20:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009b24:	68a3      	ldr	r3, [r4, #8]
 8009b26:	6861      	ldr	r1, [r4, #4]
 8009b28:	eb07 060a 	add.w	r6, r7, sl
 8009b2c:	42b3      	cmp	r3, r6
 8009b2e:	b085      	sub	sp, #20
 8009b30:	bfb8      	it	lt
 8009b32:	3101      	addlt	r1, #1
 8009b34:	f7ff fed8 	bl	80098e8 <_Balloc>
 8009b38:	b930      	cbnz	r0, 8009b48 <__multiply+0x44>
 8009b3a:	4602      	mov	r2, r0
 8009b3c:	4b44      	ldr	r3, [pc, #272]	; (8009c50 <__multiply+0x14c>)
 8009b3e:	4845      	ldr	r0, [pc, #276]	; (8009c54 <__multiply+0x150>)
 8009b40:	f240 115d 	movw	r1, #349	; 0x15d
 8009b44:	f000 fcb6 	bl	800a4b4 <__assert_func>
 8009b48:	f100 0514 	add.w	r5, r0, #20
 8009b4c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009b50:	462b      	mov	r3, r5
 8009b52:	2200      	movs	r2, #0
 8009b54:	4543      	cmp	r3, r8
 8009b56:	d321      	bcc.n	8009b9c <__multiply+0x98>
 8009b58:	f104 0314 	add.w	r3, r4, #20
 8009b5c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009b60:	f109 0314 	add.w	r3, r9, #20
 8009b64:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009b68:	9202      	str	r2, [sp, #8]
 8009b6a:	1b3a      	subs	r2, r7, r4
 8009b6c:	3a15      	subs	r2, #21
 8009b6e:	f022 0203 	bic.w	r2, r2, #3
 8009b72:	3204      	adds	r2, #4
 8009b74:	f104 0115 	add.w	r1, r4, #21
 8009b78:	428f      	cmp	r7, r1
 8009b7a:	bf38      	it	cc
 8009b7c:	2204      	movcc	r2, #4
 8009b7e:	9201      	str	r2, [sp, #4]
 8009b80:	9a02      	ldr	r2, [sp, #8]
 8009b82:	9303      	str	r3, [sp, #12]
 8009b84:	429a      	cmp	r2, r3
 8009b86:	d80c      	bhi.n	8009ba2 <__multiply+0x9e>
 8009b88:	2e00      	cmp	r6, #0
 8009b8a:	dd03      	ble.n	8009b94 <__multiply+0x90>
 8009b8c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d05a      	beq.n	8009c4a <__multiply+0x146>
 8009b94:	6106      	str	r6, [r0, #16]
 8009b96:	b005      	add	sp, #20
 8009b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b9c:	f843 2b04 	str.w	r2, [r3], #4
 8009ba0:	e7d8      	b.n	8009b54 <__multiply+0x50>
 8009ba2:	f8b3 a000 	ldrh.w	sl, [r3]
 8009ba6:	f1ba 0f00 	cmp.w	sl, #0
 8009baa:	d024      	beq.n	8009bf6 <__multiply+0xf2>
 8009bac:	f104 0e14 	add.w	lr, r4, #20
 8009bb0:	46a9      	mov	r9, r5
 8009bb2:	f04f 0c00 	mov.w	ip, #0
 8009bb6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009bba:	f8d9 1000 	ldr.w	r1, [r9]
 8009bbe:	fa1f fb82 	uxth.w	fp, r2
 8009bc2:	b289      	uxth	r1, r1
 8009bc4:	fb0a 110b 	mla	r1, sl, fp, r1
 8009bc8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009bcc:	f8d9 2000 	ldr.w	r2, [r9]
 8009bd0:	4461      	add	r1, ip
 8009bd2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009bd6:	fb0a c20b 	mla	r2, sl, fp, ip
 8009bda:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009bde:	b289      	uxth	r1, r1
 8009be0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009be4:	4577      	cmp	r7, lr
 8009be6:	f849 1b04 	str.w	r1, [r9], #4
 8009bea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009bee:	d8e2      	bhi.n	8009bb6 <__multiply+0xb2>
 8009bf0:	9a01      	ldr	r2, [sp, #4]
 8009bf2:	f845 c002 	str.w	ip, [r5, r2]
 8009bf6:	9a03      	ldr	r2, [sp, #12]
 8009bf8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009bfc:	3304      	adds	r3, #4
 8009bfe:	f1b9 0f00 	cmp.w	r9, #0
 8009c02:	d020      	beq.n	8009c46 <__multiply+0x142>
 8009c04:	6829      	ldr	r1, [r5, #0]
 8009c06:	f104 0c14 	add.w	ip, r4, #20
 8009c0a:	46ae      	mov	lr, r5
 8009c0c:	f04f 0a00 	mov.w	sl, #0
 8009c10:	f8bc b000 	ldrh.w	fp, [ip]
 8009c14:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009c18:	fb09 220b 	mla	r2, r9, fp, r2
 8009c1c:	4492      	add	sl, r2
 8009c1e:	b289      	uxth	r1, r1
 8009c20:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009c24:	f84e 1b04 	str.w	r1, [lr], #4
 8009c28:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009c2c:	f8be 1000 	ldrh.w	r1, [lr]
 8009c30:	0c12      	lsrs	r2, r2, #16
 8009c32:	fb09 1102 	mla	r1, r9, r2, r1
 8009c36:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009c3a:	4567      	cmp	r7, ip
 8009c3c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009c40:	d8e6      	bhi.n	8009c10 <__multiply+0x10c>
 8009c42:	9a01      	ldr	r2, [sp, #4]
 8009c44:	50a9      	str	r1, [r5, r2]
 8009c46:	3504      	adds	r5, #4
 8009c48:	e79a      	b.n	8009b80 <__multiply+0x7c>
 8009c4a:	3e01      	subs	r6, #1
 8009c4c:	e79c      	b.n	8009b88 <__multiply+0x84>
 8009c4e:	bf00      	nop
 8009c50:	0800b22f 	.word	0x0800b22f
 8009c54:	0800b240 	.word	0x0800b240

08009c58 <__pow5mult>:
 8009c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c5c:	4615      	mov	r5, r2
 8009c5e:	f012 0203 	ands.w	r2, r2, #3
 8009c62:	4606      	mov	r6, r0
 8009c64:	460f      	mov	r7, r1
 8009c66:	d007      	beq.n	8009c78 <__pow5mult+0x20>
 8009c68:	4c25      	ldr	r4, [pc, #148]	; (8009d00 <__pow5mult+0xa8>)
 8009c6a:	3a01      	subs	r2, #1
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009c72:	f7ff fe9b 	bl	80099ac <__multadd>
 8009c76:	4607      	mov	r7, r0
 8009c78:	10ad      	asrs	r5, r5, #2
 8009c7a:	d03d      	beq.n	8009cf8 <__pow5mult+0xa0>
 8009c7c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009c7e:	b97c      	cbnz	r4, 8009ca0 <__pow5mult+0x48>
 8009c80:	2010      	movs	r0, #16
 8009c82:	f7ff fe1b 	bl	80098bc <malloc>
 8009c86:	4602      	mov	r2, r0
 8009c88:	6270      	str	r0, [r6, #36]	; 0x24
 8009c8a:	b928      	cbnz	r0, 8009c98 <__pow5mult+0x40>
 8009c8c:	4b1d      	ldr	r3, [pc, #116]	; (8009d04 <__pow5mult+0xac>)
 8009c8e:	481e      	ldr	r0, [pc, #120]	; (8009d08 <__pow5mult+0xb0>)
 8009c90:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009c94:	f000 fc0e 	bl	800a4b4 <__assert_func>
 8009c98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009c9c:	6004      	str	r4, [r0, #0]
 8009c9e:	60c4      	str	r4, [r0, #12]
 8009ca0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009ca4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ca8:	b94c      	cbnz	r4, 8009cbe <__pow5mult+0x66>
 8009caa:	f240 2171 	movw	r1, #625	; 0x271
 8009cae:	4630      	mov	r0, r6
 8009cb0:	f7ff ff12 	bl	8009ad8 <__i2b>
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	f8c8 0008 	str.w	r0, [r8, #8]
 8009cba:	4604      	mov	r4, r0
 8009cbc:	6003      	str	r3, [r0, #0]
 8009cbe:	f04f 0900 	mov.w	r9, #0
 8009cc2:	07eb      	lsls	r3, r5, #31
 8009cc4:	d50a      	bpl.n	8009cdc <__pow5mult+0x84>
 8009cc6:	4639      	mov	r1, r7
 8009cc8:	4622      	mov	r2, r4
 8009cca:	4630      	mov	r0, r6
 8009ccc:	f7ff ff1a 	bl	8009b04 <__multiply>
 8009cd0:	4639      	mov	r1, r7
 8009cd2:	4680      	mov	r8, r0
 8009cd4:	4630      	mov	r0, r6
 8009cd6:	f7ff fe47 	bl	8009968 <_Bfree>
 8009cda:	4647      	mov	r7, r8
 8009cdc:	106d      	asrs	r5, r5, #1
 8009cde:	d00b      	beq.n	8009cf8 <__pow5mult+0xa0>
 8009ce0:	6820      	ldr	r0, [r4, #0]
 8009ce2:	b938      	cbnz	r0, 8009cf4 <__pow5mult+0x9c>
 8009ce4:	4622      	mov	r2, r4
 8009ce6:	4621      	mov	r1, r4
 8009ce8:	4630      	mov	r0, r6
 8009cea:	f7ff ff0b 	bl	8009b04 <__multiply>
 8009cee:	6020      	str	r0, [r4, #0]
 8009cf0:	f8c0 9000 	str.w	r9, [r0]
 8009cf4:	4604      	mov	r4, r0
 8009cf6:	e7e4      	b.n	8009cc2 <__pow5mult+0x6a>
 8009cf8:	4638      	mov	r0, r7
 8009cfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cfe:	bf00      	nop
 8009d00:	0800b390 	.word	0x0800b390
 8009d04:	0800b1bd 	.word	0x0800b1bd
 8009d08:	0800b240 	.word	0x0800b240

08009d0c <__lshift>:
 8009d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d10:	460c      	mov	r4, r1
 8009d12:	6849      	ldr	r1, [r1, #4]
 8009d14:	6923      	ldr	r3, [r4, #16]
 8009d16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009d1a:	68a3      	ldr	r3, [r4, #8]
 8009d1c:	4607      	mov	r7, r0
 8009d1e:	4691      	mov	r9, r2
 8009d20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009d24:	f108 0601 	add.w	r6, r8, #1
 8009d28:	42b3      	cmp	r3, r6
 8009d2a:	db0b      	blt.n	8009d44 <__lshift+0x38>
 8009d2c:	4638      	mov	r0, r7
 8009d2e:	f7ff fddb 	bl	80098e8 <_Balloc>
 8009d32:	4605      	mov	r5, r0
 8009d34:	b948      	cbnz	r0, 8009d4a <__lshift+0x3e>
 8009d36:	4602      	mov	r2, r0
 8009d38:	4b2a      	ldr	r3, [pc, #168]	; (8009de4 <__lshift+0xd8>)
 8009d3a:	482b      	ldr	r0, [pc, #172]	; (8009de8 <__lshift+0xdc>)
 8009d3c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009d40:	f000 fbb8 	bl	800a4b4 <__assert_func>
 8009d44:	3101      	adds	r1, #1
 8009d46:	005b      	lsls	r3, r3, #1
 8009d48:	e7ee      	b.n	8009d28 <__lshift+0x1c>
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	f100 0114 	add.w	r1, r0, #20
 8009d50:	f100 0210 	add.w	r2, r0, #16
 8009d54:	4618      	mov	r0, r3
 8009d56:	4553      	cmp	r3, sl
 8009d58:	db37      	blt.n	8009dca <__lshift+0xbe>
 8009d5a:	6920      	ldr	r0, [r4, #16]
 8009d5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009d60:	f104 0314 	add.w	r3, r4, #20
 8009d64:	f019 091f 	ands.w	r9, r9, #31
 8009d68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009d6c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009d70:	d02f      	beq.n	8009dd2 <__lshift+0xc6>
 8009d72:	f1c9 0e20 	rsb	lr, r9, #32
 8009d76:	468a      	mov	sl, r1
 8009d78:	f04f 0c00 	mov.w	ip, #0
 8009d7c:	681a      	ldr	r2, [r3, #0]
 8009d7e:	fa02 f209 	lsl.w	r2, r2, r9
 8009d82:	ea42 020c 	orr.w	r2, r2, ip
 8009d86:	f84a 2b04 	str.w	r2, [sl], #4
 8009d8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d8e:	4298      	cmp	r0, r3
 8009d90:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009d94:	d8f2      	bhi.n	8009d7c <__lshift+0x70>
 8009d96:	1b03      	subs	r3, r0, r4
 8009d98:	3b15      	subs	r3, #21
 8009d9a:	f023 0303 	bic.w	r3, r3, #3
 8009d9e:	3304      	adds	r3, #4
 8009da0:	f104 0215 	add.w	r2, r4, #21
 8009da4:	4290      	cmp	r0, r2
 8009da6:	bf38      	it	cc
 8009da8:	2304      	movcc	r3, #4
 8009daa:	f841 c003 	str.w	ip, [r1, r3]
 8009dae:	f1bc 0f00 	cmp.w	ip, #0
 8009db2:	d001      	beq.n	8009db8 <__lshift+0xac>
 8009db4:	f108 0602 	add.w	r6, r8, #2
 8009db8:	3e01      	subs	r6, #1
 8009dba:	4638      	mov	r0, r7
 8009dbc:	612e      	str	r6, [r5, #16]
 8009dbe:	4621      	mov	r1, r4
 8009dc0:	f7ff fdd2 	bl	8009968 <_Bfree>
 8009dc4:	4628      	mov	r0, r5
 8009dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dca:	f842 0f04 	str.w	r0, [r2, #4]!
 8009dce:	3301      	adds	r3, #1
 8009dd0:	e7c1      	b.n	8009d56 <__lshift+0x4a>
 8009dd2:	3904      	subs	r1, #4
 8009dd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dd8:	f841 2f04 	str.w	r2, [r1, #4]!
 8009ddc:	4298      	cmp	r0, r3
 8009dde:	d8f9      	bhi.n	8009dd4 <__lshift+0xc8>
 8009de0:	e7ea      	b.n	8009db8 <__lshift+0xac>
 8009de2:	bf00      	nop
 8009de4:	0800b22f 	.word	0x0800b22f
 8009de8:	0800b240 	.word	0x0800b240

08009dec <__mcmp>:
 8009dec:	b530      	push	{r4, r5, lr}
 8009dee:	6902      	ldr	r2, [r0, #16]
 8009df0:	690c      	ldr	r4, [r1, #16]
 8009df2:	1b12      	subs	r2, r2, r4
 8009df4:	d10e      	bne.n	8009e14 <__mcmp+0x28>
 8009df6:	f100 0314 	add.w	r3, r0, #20
 8009dfa:	3114      	adds	r1, #20
 8009dfc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009e00:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009e04:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009e08:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009e0c:	42a5      	cmp	r5, r4
 8009e0e:	d003      	beq.n	8009e18 <__mcmp+0x2c>
 8009e10:	d305      	bcc.n	8009e1e <__mcmp+0x32>
 8009e12:	2201      	movs	r2, #1
 8009e14:	4610      	mov	r0, r2
 8009e16:	bd30      	pop	{r4, r5, pc}
 8009e18:	4283      	cmp	r3, r0
 8009e1a:	d3f3      	bcc.n	8009e04 <__mcmp+0x18>
 8009e1c:	e7fa      	b.n	8009e14 <__mcmp+0x28>
 8009e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8009e22:	e7f7      	b.n	8009e14 <__mcmp+0x28>

08009e24 <__mdiff>:
 8009e24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e28:	460c      	mov	r4, r1
 8009e2a:	4606      	mov	r6, r0
 8009e2c:	4611      	mov	r1, r2
 8009e2e:	4620      	mov	r0, r4
 8009e30:	4690      	mov	r8, r2
 8009e32:	f7ff ffdb 	bl	8009dec <__mcmp>
 8009e36:	1e05      	subs	r5, r0, #0
 8009e38:	d110      	bne.n	8009e5c <__mdiff+0x38>
 8009e3a:	4629      	mov	r1, r5
 8009e3c:	4630      	mov	r0, r6
 8009e3e:	f7ff fd53 	bl	80098e8 <_Balloc>
 8009e42:	b930      	cbnz	r0, 8009e52 <__mdiff+0x2e>
 8009e44:	4b3a      	ldr	r3, [pc, #232]	; (8009f30 <__mdiff+0x10c>)
 8009e46:	4602      	mov	r2, r0
 8009e48:	f240 2132 	movw	r1, #562	; 0x232
 8009e4c:	4839      	ldr	r0, [pc, #228]	; (8009f34 <__mdiff+0x110>)
 8009e4e:	f000 fb31 	bl	800a4b4 <__assert_func>
 8009e52:	2301      	movs	r3, #1
 8009e54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009e58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e5c:	bfa4      	itt	ge
 8009e5e:	4643      	movge	r3, r8
 8009e60:	46a0      	movge	r8, r4
 8009e62:	4630      	mov	r0, r6
 8009e64:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009e68:	bfa6      	itte	ge
 8009e6a:	461c      	movge	r4, r3
 8009e6c:	2500      	movge	r5, #0
 8009e6e:	2501      	movlt	r5, #1
 8009e70:	f7ff fd3a 	bl	80098e8 <_Balloc>
 8009e74:	b920      	cbnz	r0, 8009e80 <__mdiff+0x5c>
 8009e76:	4b2e      	ldr	r3, [pc, #184]	; (8009f30 <__mdiff+0x10c>)
 8009e78:	4602      	mov	r2, r0
 8009e7a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009e7e:	e7e5      	b.n	8009e4c <__mdiff+0x28>
 8009e80:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009e84:	6926      	ldr	r6, [r4, #16]
 8009e86:	60c5      	str	r5, [r0, #12]
 8009e88:	f104 0914 	add.w	r9, r4, #20
 8009e8c:	f108 0514 	add.w	r5, r8, #20
 8009e90:	f100 0e14 	add.w	lr, r0, #20
 8009e94:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009e98:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009e9c:	f108 0210 	add.w	r2, r8, #16
 8009ea0:	46f2      	mov	sl, lr
 8009ea2:	2100      	movs	r1, #0
 8009ea4:	f859 3b04 	ldr.w	r3, [r9], #4
 8009ea8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009eac:	fa1f f883 	uxth.w	r8, r3
 8009eb0:	fa11 f18b 	uxtah	r1, r1, fp
 8009eb4:	0c1b      	lsrs	r3, r3, #16
 8009eb6:	eba1 0808 	sub.w	r8, r1, r8
 8009eba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009ebe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009ec2:	fa1f f888 	uxth.w	r8, r8
 8009ec6:	1419      	asrs	r1, r3, #16
 8009ec8:	454e      	cmp	r6, r9
 8009eca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009ece:	f84a 3b04 	str.w	r3, [sl], #4
 8009ed2:	d8e7      	bhi.n	8009ea4 <__mdiff+0x80>
 8009ed4:	1b33      	subs	r3, r6, r4
 8009ed6:	3b15      	subs	r3, #21
 8009ed8:	f023 0303 	bic.w	r3, r3, #3
 8009edc:	3304      	adds	r3, #4
 8009ede:	3415      	adds	r4, #21
 8009ee0:	42a6      	cmp	r6, r4
 8009ee2:	bf38      	it	cc
 8009ee4:	2304      	movcc	r3, #4
 8009ee6:	441d      	add	r5, r3
 8009ee8:	4473      	add	r3, lr
 8009eea:	469e      	mov	lr, r3
 8009eec:	462e      	mov	r6, r5
 8009eee:	4566      	cmp	r6, ip
 8009ef0:	d30e      	bcc.n	8009f10 <__mdiff+0xec>
 8009ef2:	f10c 0203 	add.w	r2, ip, #3
 8009ef6:	1b52      	subs	r2, r2, r5
 8009ef8:	f022 0203 	bic.w	r2, r2, #3
 8009efc:	3d03      	subs	r5, #3
 8009efe:	45ac      	cmp	ip, r5
 8009f00:	bf38      	it	cc
 8009f02:	2200      	movcc	r2, #0
 8009f04:	441a      	add	r2, r3
 8009f06:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009f0a:	b17b      	cbz	r3, 8009f2c <__mdiff+0x108>
 8009f0c:	6107      	str	r7, [r0, #16]
 8009f0e:	e7a3      	b.n	8009e58 <__mdiff+0x34>
 8009f10:	f856 8b04 	ldr.w	r8, [r6], #4
 8009f14:	fa11 f288 	uxtah	r2, r1, r8
 8009f18:	1414      	asrs	r4, r2, #16
 8009f1a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009f1e:	b292      	uxth	r2, r2
 8009f20:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009f24:	f84e 2b04 	str.w	r2, [lr], #4
 8009f28:	1421      	asrs	r1, r4, #16
 8009f2a:	e7e0      	b.n	8009eee <__mdiff+0xca>
 8009f2c:	3f01      	subs	r7, #1
 8009f2e:	e7ea      	b.n	8009f06 <__mdiff+0xe2>
 8009f30:	0800b22f 	.word	0x0800b22f
 8009f34:	0800b240 	.word	0x0800b240

08009f38 <__d2b>:
 8009f38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009f3c:	4689      	mov	r9, r1
 8009f3e:	2101      	movs	r1, #1
 8009f40:	ec57 6b10 	vmov	r6, r7, d0
 8009f44:	4690      	mov	r8, r2
 8009f46:	f7ff fccf 	bl	80098e8 <_Balloc>
 8009f4a:	4604      	mov	r4, r0
 8009f4c:	b930      	cbnz	r0, 8009f5c <__d2b+0x24>
 8009f4e:	4602      	mov	r2, r0
 8009f50:	4b25      	ldr	r3, [pc, #148]	; (8009fe8 <__d2b+0xb0>)
 8009f52:	4826      	ldr	r0, [pc, #152]	; (8009fec <__d2b+0xb4>)
 8009f54:	f240 310a 	movw	r1, #778	; 0x30a
 8009f58:	f000 faac 	bl	800a4b4 <__assert_func>
 8009f5c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009f60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009f64:	bb35      	cbnz	r5, 8009fb4 <__d2b+0x7c>
 8009f66:	2e00      	cmp	r6, #0
 8009f68:	9301      	str	r3, [sp, #4]
 8009f6a:	d028      	beq.n	8009fbe <__d2b+0x86>
 8009f6c:	4668      	mov	r0, sp
 8009f6e:	9600      	str	r6, [sp, #0]
 8009f70:	f7ff fd82 	bl	8009a78 <__lo0bits>
 8009f74:	9900      	ldr	r1, [sp, #0]
 8009f76:	b300      	cbz	r0, 8009fba <__d2b+0x82>
 8009f78:	9a01      	ldr	r2, [sp, #4]
 8009f7a:	f1c0 0320 	rsb	r3, r0, #32
 8009f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8009f82:	430b      	orrs	r3, r1
 8009f84:	40c2      	lsrs	r2, r0
 8009f86:	6163      	str	r3, [r4, #20]
 8009f88:	9201      	str	r2, [sp, #4]
 8009f8a:	9b01      	ldr	r3, [sp, #4]
 8009f8c:	61a3      	str	r3, [r4, #24]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	bf14      	ite	ne
 8009f92:	2202      	movne	r2, #2
 8009f94:	2201      	moveq	r2, #1
 8009f96:	6122      	str	r2, [r4, #16]
 8009f98:	b1d5      	cbz	r5, 8009fd0 <__d2b+0x98>
 8009f9a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009f9e:	4405      	add	r5, r0
 8009fa0:	f8c9 5000 	str.w	r5, [r9]
 8009fa4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009fa8:	f8c8 0000 	str.w	r0, [r8]
 8009fac:	4620      	mov	r0, r4
 8009fae:	b003      	add	sp, #12
 8009fb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009fb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009fb8:	e7d5      	b.n	8009f66 <__d2b+0x2e>
 8009fba:	6161      	str	r1, [r4, #20]
 8009fbc:	e7e5      	b.n	8009f8a <__d2b+0x52>
 8009fbe:	a801      	add	r0, sp, #4
 8009fc0:	f7ff fd5a 	bl	8009a78 <__lo0bits>
 8009fc4:	9b01      	ldr	r3, [sp, #4]
 8009fc6:	6163      	str	r3, [r4, #20]
 8009fc8:	2201      	movs	r2, #1
 8009fca:	6122      	str	r2, [r4, #16]
 8009fcc:	3020      	adds	r0, #32
 8009fce:	e7e3      	b.n	8009f98 <__d2b+0x60>
 8009fd0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009fd4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009fd8:	f8c9 0000 	str.w	r0, [r9]
 8009fdc:	6918      	ldr	r0, [r3, #16]
 8009fde:	f7ff fd2b 	bl	8009a38 <__hi0bits>
 8009fe2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009fe6:	e7df      	b.n	8009fa8 <__d2b+0x70>
 8009fe8:	0800b22f 	.word	0x0800b22f
 8009fec:	0800b240 	.word	0x0800b240

08009ff0 <_calloc_r>:
 8009ff0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ff2:	fba1 2402 	umull	r2, r4, r1, r2
 8009ff6:	b94c      	cbnz	r4, 800a00c <_calloc_r+0x1c>
 8009ff8:	4611      	mov	r1, r2
 8009ffa:	9201      	str	r2, [sp, #4]
 8009ffc:	f000 f87a 	bl	800a0f4 <_malloc_r>
 800a000:	9a01      	ldr	r2, [sp, #4]
 800a002:	4605      	mov	r5, r0
 800a004:	b930      	cbnz	r0, 800a014 <_calloc_r+0x24>
 800a006:	4628      	mov	r0, r5
 800a008:	b003      	add	sp, #12
 800a00a:	bd30      	pop	{r4, r5, pc}
 800a00c:	220c      	movs	r2, #12
 800a00e:	6002      	str	r2, [r0, #0]
 800a010:	2500      	movs	r5, #0
 800a012:	e7f8      	b.n	800a006 <_calloc_r+0x16>
 800a014:	4621      	mov	r1, r4
 800a016:	f7fe f93f 	bl	8008298 <memset>
 800a01a:	e7f4      	b.n	800a006 <_calloc_r+0x16>

0800a01c <_free_r>:
 800a01c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a01e:	2900      	cmp	r1, #0
 800a020:	d044      	beq.n	800a0ac <_free_r+0x90>
 800a022:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a026:	9001      	str	r0, [sp, #4]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	f1a1 0404 	sub.w	r4, r1, #4
 800a02e:	bfb8      	it	lt
 800a030:	18e4      	addlt	r4, r4, r3
 800a032:	f000 fa9b 	bl	800a56c <__malloc_lock>
 800a036:	4a1e      	ldr	r2, [pc, #120]	; (800a0b0 <_free_r+0x94>)
 800a038:	9801      	ldr	r0, [sp, #4]
 800a03a:	6813      	ldr	r3, [r2, #0]
 800a03c:	b933      	cbnz	r3, 800a04c <_free_r+0x30>
 800a03e:	6063      	str	r3, [r4, #4]
 800a040:	6014      	str	r4, [r2, #0]
 800a042:	b003      	add	sp, #12
 800a044:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a048:	f000 ba96 	b.w	800a578 <__malloc_unlock>
 800a04c:	42a3      	cmp	r3, r4
 800a04e:	d908      	bls.n	800a062 <_free_r+0x46>
 800a050:	6825      	ldr	r5, [r4, #0]
 800a052:	1961      	adds	r1, r4, r5
 800a054:	428b      	cmp	r3, r1
 800a056:	bf01      	itttt	eq
 800a058:	6819      	ldreq	r1, [r3, #0]
 800a05a:	685b      	ldreq	r3, [r3, #4]
 800a05c:	1949      	addeq	r1, r1, r5
 800a05e:	6021      	streq	r1, [r4, #0]
 800a060:	e7ed      	b.n	800a03e <_free_r+0x22>
 800a062:	461a      	mov	r2, r3
 800a064:	685b      	ldr	r3, [r3, #4]
 800a066:	b10b      	cbz	r3, 800a06c <_free_r+0x50>
 800a068:	42a3      	cmp	r3, r4
 800a06a:	d9fa      	bls.n	800a062 <_free_r+0x46>
 800a06c:	6811      	ldr	r1, [r2, #0]
 800a06e:	1855      	adds	r5, r2, r1
 800a070:	42a5      	cmp	r5, r4
 800a072:	d10b      	bne.n	800a08c <_free_r+0x70>
 800a074:	6824      	ldr	r4, [r4, #0]
 800a076:	4421      	add	r1, r4
 800a078:	1854      	adds	r4, r2, r1
 800a07a:	42a3      	cmp	r3, r4
 800a07c:	6011      	str	r1, [r2, #0]
 800a07e:	d1e0      	bne.n	800a042 <_free_r+0x26>
 800a080:	681c      	ldr	r4, [r3, #0]
 800a082:	685b      	ldr	r3, [r3, #4]
 800a084:	6053      	str	r3, [r2, #4]
 800a086:	4421      	add	r1, r4
 800a088:	6011      	str	r1, [r2, #0]
 800a08a:	e7da      	b.n	800a042 <_free_r+0x26>
 800a08c:	d902      	bls.n	800a094 <_free_r+0x78>
 800a08e:	230c      	movs	r3, #12
 800a090:	6003      	str	r3, [r0, #0]
 800a092:	e7d6      	b.n	800a042 <_free_r+0x26>
 800a094:	6825      	ldr	r5, [r4, #0]
 800a096:	1961      	adds	r1, r4, r5
 800a098:	428b      	cmp	r3, r1
 800a09a:	bf04      	itt	eq
 800a09c:	6819      	ldreq	r1, [r3, #0]
 800a09e:	685b      	ldreq	r3, [r3, #4]
 800a0a0:	6063      	str	r3, [r4, #4]
 800a0a2:	bf04      	itt	eq
 800a0a4:	1949      	addeq	r1, r1, r5
 800a0a6:	6021      	streq	r1, [r4, #0]
 800a0a8:	6054      	str	r4, [r2, #4]
 800a0aa:	e7ca      	b.n	800a042 <_free_r+0x26>
 800a0ac:	b003      	add	sp, #12
 800a0ae:	bd30      	pop	{r4, r5, pc}
 800a0b0:	200004ac 	.word	0x200004ac

0800a0b4 <sbrk_aligned>:
 800a0b4:	b570      	push	{r4, r5, r6, lr}
 800a0b6:	4e0e      	ldr	r6, [pc, #56]	; (800a0f0 <sbrk_aligned+0x3c>)
 800a0b8:	460c      	mov	r4, r1
 800a0ba:	6831      	ldr	r1, [r6, #0]
 800a0bc:	4605      	mov	r5, r0
 800a0be:	b911      	cbnz	r1, 800a0c6 <sbrk_aligned+0x12>
 800a0c0:	f000 f9e8 	bl	800a494 <_sbrk_r>
 800a0c4:	6030      	str	r0, [r6, #0]
 800a0c6:	4621      	mov	r1, r4
 800a0c8:	4628      	mov	r0, r5
 800a0ca:	f000 f9e3 	bl	800a494 <_sbrk_r>
 800a0ce:	1c43      	adds	r3, r0, #1
 800a0d0:	d00a      	beq.n	800a0e8 <sbrk_aligned+0x34>
 800a0d2:	1cc4      	adds	r4, r0, #3
 800a0d4:	f024 0403 	bic.w	r4, r4, #3
 800a0d8:	42a0      	cmp	r0, r4
 800a0da:	d007      	beq.n	800a0ec <sbrk_aligned+0x38>
 800a0dc:	1a21      	subs	r1, r4, r0
 800a0de:	4628      	mov	r0, r5
 800a0e0:	f000 f9d8 	bl	800a494 <_sbrk_r>
 800a0e4:	3001      	adds	r0, #1
 800a0e6:	d101      	bne.n	800a0ec <sbrk_aligned+0x38>
 800a0e8:	f04f 34ff 	mov.w	r4, #4294967295
 800a0ec:	4620      	mov	r0, r4
 800a0ee:	bd70      	pop	{r4, r5, r6, pc}
 800a0f0:	200004b0 	.word	0x200004b0

0800a0f4 <_malloc_r>:
 800a0f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0f8:	1ccd      	adds	r5, r1, #3
 800a0fa:	f025 0503 	bic.w	r5, r5, #3
 800a0fe:	3508      	adds	r5, #8
 800a100:	2d0c      	cmp	r5, #12
 800a102:	bf38      	it	cc
 800a104:	250c      	movcc	r5, #12
 800a106:	2d00      	cmp	r5, #0
 800a108:	4607      	mov	r7, r0
 800a10a:	db01      	blt.n	800a110 <_malloc_r+0x1c>
 800a10c:	42a9      	cmp	r1, r5
 800a10e:	d905      	bls.n	800a11c <_malloc_r+0x28>
 800a110:	230c      	movs	r3, #12
 800a112:	603b      	str	r3, [r7, #0]
 800a114:	2600      	movs	r6, #0
 800a116:	4630      	mov	r0, r6
 800a118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a11c:	4e2e      	ldr	r6, [pc, #184]	; (800a1d8 <_malloc_r+0xe4>)
 800a11e:	f000 fa25 	bl	800a56c <__malloc_lock>
 800a122:	6833      	ldr	r3, [r6, #0]
 800a124:	461c      	mov	r4, r3
 800a126:	bb34      	cbnz	r4, 800a176 <_malloc_r+0x82>
 800a128:	4629      	mov	r1, r5
 800a12a:	4638      	mov	r0, r7
 800a12c:	f7ff ffc2 	bl	800a0b4 <sbrk_aligned>
 800a130:	1c43      	adds	r3, r0, #1
 800a132:	4604      	mov	r4, r0
 800a134:	d14d      	bne.n	800a1d2 <_malloc_r+0xde>
 800a136:	6834      	ldr	r4, [r6, #0]
 800a138:	4626      	mov	r6, r4
 800a13a:	2e00      	cmp	r6, #0
 800a13c:	d140      	bne.n	800a1c0 <_malloc_r+0xcc>
 800a13e:	6823      	ldr	r3, [r4, #0]
 800a140:	4631      	mov	r1, r6
 800a142:	4638      	mov	r0, r7
 800a144:	eb04 0803 	add.w	r8, r4, r3
 800a148:	f000 f9a4 	bl	800a494 <_sbrk_r>
 800a14c:	4580      	cmp	r8, r0
 800a14e:	d13a      	bne.n	800a1c6 <_malloc_r+0xd2>
 800a150:	6821      	ldr	r1, [r4, #0]
 800a152:	3503      	adds	r5, #3
 800a154:	1a6d      	subs	r5, r5, r1
 800a156:	f025 0503 	bic.w	r5, r5, #3
 800a15a:	3508      	adds	r5, #8
 800a15c:	2d0c      	cmp	r5, #12
 800a15e:	bf38      	it	cc
 800a160:	250c      	movcc	r5, #12
 800a162:	4629      	mov	r1, r5
 800a164:	4638      	mov	r0, r7
 800a166:	f7ff ffa5 	bl	800a0b4 <sbrk_aligned>
 800a16a:	3001      	adds	r0, #1
 800a16c:	d02b      	beq.n	800a1c6 <_malloc_r+0xd2>
 800a16e:	6823      	ldr	r3, [r4, #0]
 800a170:	442b      	add	r3, r5
 800a172:	6023      	str	r3, [r4, #0]
 800a174:	e00e      	b.n	800a194 <_malloc_r+0xa0>
 800a176:	6822      	ldr	r2, [r4, #0]
 800a178:	1b52      	subs	r2, r2, r5
 800a17a:	d41e      	bmi.n	800a1ba <_malloc_r+0xc6>
 800a17c:	2a0b      	cmp	r2, #11
 800a17e:	d916      	bls.n	800a1ae <_malloc_r+0xba>
 800a180:	1961      	adds	r1, r4, r5
 800a182:	42a3      	cmp	r3, r4
 800a184:	6025      	str	r5, [r4, #0]
 800a186:	bf18      	it	ne
 800a188:	6059      	strne	r1, [r3, #4]
 800a18a:	6863      	ldr	r3, [r4, #4]
 800a18c:	bf08      	it	eq
 800a18e:	6031      	streq	r1, [r6, #0]
 800a190:	5162      	str	r2, [r4, r5]
 800a192:	604b      	str	r3, [r1, #4]
 800a194:	4638      	mov	r0, r7
 800a196:	f104 060b 	add.w	r6, r4, #11
 800a19a:	f000 f9ed 	bl	800a578 <__malloc_unlock>
 800a19e:	f026 0607 	bic.w	r6, r6, #7
 800a1a2:	1d23      	adds	r3, r4, #4
 800a1a4:	1af2      	subs	r2, r6, r3
 800a1a6:	d0b6      	beq.n	800a116 <_malloc_r+0x22>
 800a1a8:	1b9b      	subs	r3, r3, r6
 800a1aa:	50a3      	str	r3, [r4, r2]
 800a1ac:	e7b3      	b.n	800a116 <_malloc_r+0x22>
 800a1ae:	6862      	ldr	r2, [r4, #4]
 800a1b0:	42a3      	cmp	r3, r4
 800a1b2:	bf0c      	ite	eq
 800a1b4:	6032      	streq	r2, [r6, #0]
 800a1b6:	605a      	strne	r2, [r3, #4]
 800a1b8:	e7ec      	b.n	800a194 <_malloc_r+0xa0>
 800a1ba:	4623      	mov	r3, r4
 800a1bc:	6864      	ldr	r4, [r4, #4]
 800a1be:	e7b2      	b.n	800a126 <_malloc_r+0x32>
 800a1c0:	4634      	mov	r4, r6
 800a1c2:	6876      	ldr	r6, [r6, #4]
 800a1c4:	e7b9      	b.n	800a13a <_malloc_r+0x46>
 800a1c6:	230c      	movs	r3, #12
 800a1c8:	603b      	str	r3, [r7, #0]
 800a1ca:	4638      	mov	r0, r7
 800a1cc:	f000 f9d4 	bl	800a578 <__malloc_unlock>
 800a1d0:	e7a1      	b.n	800a116 <_malloc_r+0x22>
 800a1d2:	6025      	str	r5, [r4, #0]
 800a1d4:	e7de      	b.n	800a194 <_malloc_r+0xa0>
 800a1d6:	bf00      	nop
 800a1d8:	200004ac 	.word	0x200004ac

0800a1dc <__ssputs_r>:
 800a1dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1e0:	688e      	ldr	r6, [r1, #8]
 800a1e2:	429e      	cmp	r6, r3
 800a1e4:	4682      	mov	sl, r0
 800a1e6:	460c      	mov	r4, r1
 800a1e8:	4690      	mov	r8, r2
 800a1ea:	461f      	mov	r7, r3
 800a1ec:	d838      	bhi.n	800a260 <__ssputs_r+0x84>
 800a1ee:	898a      	ldrh	r2, [r1, #12]
 800a1f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a1f4:	d032      	beq.n	800a25c <__ssputs_r+0x80>
 800a1f6:	6825      	ldr	r5, [r4, #0]
 800a1f8:	6909      	ldr	r1, [r1, #16]
 800a1fa:	eba5 0901 	sub.w	r9, r5, r1
 800a1fe:	6965      	ldr	r5, [r4, #20]
 800a200:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a204:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a208:	3301      	adds	r3, #1
 800a20a:	444b      	add	r3, r9
 800a20c:	106d      	asrs	r5, r5, #1
 800a20e:	429d      	cmp	r5, r3
 800a210:	bf38      	it	cc
 800a212:	461d      	movcc	r5, r3
 800a214:	0553      	lsls	r3, r2, #21
 800a216:	d531      	bpl.n	800a27c <__ssputs_r+0xa0>
 800a218:	4629      	mov	r1, r5
 800a21a:	f7ff ff6b 	bl	800a0f4 <_malloc_r>
 800a21e:	4606      	mov	r6, r0
 800a220:	b950      	cbnz	r0, 800a238 <__ssputs_r+0x5c>
 800a222:	230c      	movs	r3, #12
 800a224:	f8ca 3000 	str.w	r3, [sl]
 800a228:	89a3      	ldrh	r3, [r4, #12]
 800a22a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a22e:	81a3      	strh	r3, [r4, #12]
 800a230:	f04f 30ff 	mov.w	r0, #4294967295
 800a234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a238:	6921      	ldr	r1, [r4, #16]
 800a23a:	464a      	mov	r2, r9
 800a23c:	f7ff fb46 	bl	80098cc <memcpy>
 800a240:	89a3      	ldrh	r3, [r4, #12]
 800a242:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a24a:	81a3      	strh	r3, [r4, #12]
 800a24c:	6126      	str	r6, [r4, #16]
 800a24e:	6165      	str	r5, [r4, #20]
 800a250:	444e      	add	r6, r9
 800a252:	eba5 0509 	sub.w	r5, r5, r9
 800a256:	6026      	str	r6, [r4, #0]
 800a258:	60a5      	str	r5, [r4, #8]
 800a25a:	463e      	mov	r6, r7
 800a25c:	42be      	cmp	r6, r7
 800a25e:	d900      	bls.n	800a262 <__ssputs_r+0x86>
 800a260:	463e      	mov	r6, r7
 800a262:	6820      	ldr	r0, [r4, #0]
 800a264:	4632      	mov	r2, r6
 800a266:	4641      	mov	r1, r8
 800a268:	f000 f966 	bl	800a538 <memmove>
 800a26c:	68a3      	ldr	r3, [r4, #8]
 800a26e:	1b9b      	subs	r3, r3, r6
 800a270:	60a3      	str	r3, [r4, #8]
 800a272:	6823      	ldr	r3, [r4, #0]
 800a274:	4433      	add	r3, r6
 800a276:	6023      	str	r3, [r4, #0]
 800a278:	2000      	movs	r0, #0
 800a27a:	e7db      	b.n	800a234 <__ssputs_r+0x58>
 800a27c:	462a      	mov	r2, r5
 800a27e:	f000 f981 	bl	800a584 <_realloc_r>
 800a282:	4606      	mov	r6, r0
 800a284:	2800      	cmp	r0, #0
 800a286:	d1e1      	bne.n	800a24c <__ssputs_r+0x70>
 800a288:	6921      	ldr	r1, [r4, #16]
 800a28a:	4650      	mov	r0, sl
 800a28c:	f7ff fec6 	bl	800a01c <_free_r>
 800a290:	e7c7      	b.n	800a222 <__ssputs_r+0x46>
	...

0800a294 <_svfiprintf_r>:
 800a294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a298:	4698      	mov	r8, r3
 800a29a:	898b      	ldrh	r3, [r1, #12]
 800a29c:	061b      	lsls	r3, r3, #24
 800a29e:	b09d      	sub	sp, #116	; 0x74
 800a2a0:	4607      	mov	r7, r0
 800a2a2:	460d      	mov	r5, r1
 800a2a4:	4614      	mov	r4, r2
 800a2a6:	d50e      	bpl.n	800a2c6 <_svfiprintf_r+0x32>
 800a2a8:	690b      	ldr	r3, [r1, #16]
 800a2aa:	b963      	cbnz	r3, 800a2c6 <_svfiprintf_r+0x32>
 800a2ac:	2140      	movs	r1, #64	; 0x40
 800a2ae:	f7ff ff21 	bl	800a0f4 <_malloc_r>
 800a2b2:	6028      	str	r0, [r5, #0]
 800a2b4:	6128      	str	r0, [r5, #16]
 800a2b6:	b920      	cbnz	r0, 800a2c2 <_svfiprintf_r+0x2e>
 800a2b8:	230c      	movs	r3, #12
 800a2ba:	603b      	str	r3, [r7, #0]
 800a2bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a2c0:	e0d1      	b.n	800a466 <_svfiprintf_r+0x1d2>
 800a2c2:	2340      	movs	r3, #64	; 0x40
 800a2c4:	616b      	str	r3, [r5, #20]
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	9309      	str	r3, [sp, #36]	; 0x24
 800a2ca:	2320      	movs	r3, #32
 800a2cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a2d0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2d4:	2330      	movs	r3, #48	; 0x30
 800a2d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a480 <_svfiprintf_r+0x1ec>
 800a2da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a2de:	f04f 0901 	mov.w	r9, #1
 800a2e2:	4623      	mov	r3, r4
 800a2e4:	469a      	mov	sl, r3
 800a2e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2ea:	b10a      	cbz	r2, 800a2f0 <_svfiprintf_r+0x5c>
 800a2ec:	2a25      	cmp	r2, #37	; 0x25
 800a2ee:	d1f9      	bne.n	800a2e4 <_svfiprintf_r+0x50>
 800a2f0:	ebba 0b04 	subs.w	fp, sl, r4
 800a2f4:	d00b      	beq.n	800a30e <_svfiprintf_r+0x7a>
 800a2f6:	465b      	mov	r3, fp
 800a2f8:	4622      	mov	r2, r4
 800a2fa:	4629      	mov	r1, r5
 800a2fc:	4638      	mov	r0, r7
 800a2fe:	f7ff ff6d 	bl	800a1dc <__ssputs_r>
 800a302:	3001      	adds	r0, #1
 800a304:	f000 80aa 	beq.w	800a45c <_svfiprintf_r+0x1c8>
 800a308:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a30a:	445a      	add	r2, fp
 800a30c:	9209      	str	r2, [sp, #36]	; 0x24
 800a30e:	f89a 3000 	ldrb.w	r3, [sl]
 800a312:	2b00      	cmp	r3, #0
 800a314:	f000 80a2 	beq.w	800a45c <_svfiprintf_r+0x1c8>
 800a318:	2300      	movs	r3, #0
 800a31a:	f04f 32ff 	mov.w	r2, #4294967295
 800a31e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a322:	f10a 0a01 	add.w	sl, sl, #1
 800a326:	9304      	str	r3, [sp, #16]
 800a328:	9307      	str	r3, [sp, #28]
 800a32a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a32e:	931a      	str	r3, [sp, #104]	; 0x68
 800a330:	4654      	mov	r4, sl
 800a332:	2205      	movs	r2, #5
 800a334:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a338:	4851      	ldr	r0, [pc, #324]	; (800a480 <_svfiprintf_r+0x1ec>)
 800a33a:	f7f5 ff51 	bl	80001e0 <memchr>
 800a33e:	9a04      	ldr	r2, [sp, #16]
 800a340:	b9d8      	cbnz	r0, 800a37a <_svfiprintf_r+0xe6>
 800a342:	06d0      	lsls	r0, r2, #27
 800a344:	bf44      	itt	mi
 800a346:	2320      	movmi	r3, #32
 800a348:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a34c:	0711      	lsls	r1, r2, #28
 800a34e:	bf44      	itt	mi
 800a350:	232b      	movmi	r3, #43	; 0x2b
 800a352:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a356:	f89a 3000 	ldrb.w	r3, [sl]
 800a35a:	2b2a      	cmp	r3, #42	; 0x2a
 800a35c:	d015      	beq.n	800a38a <_svfiprintf_r+0xf6>
 800a35e:	9a07      	ldr	r2, [sp, #28]
 800a360:	4654      	mov	r4, sl
 800a362:	2000      	movs	r0, #0
 800a364:	f04f 0c0a 	mov.w	ip, #10
 800a368:	4621      	mov	r1, r4
 800a36a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a36e:	3b30      	subs	r3, #48	; 0x30
 800a370:	2b09      	cmp	r3, #9
 800a372:	d94e      	bls.n	800a412 <_svfiprintf_r+0x17e>
 800a374:	b1b0      	cbz	r0, 800a3a4 <_svfiprintf_r+0x110>
 800a376:	9207      	str	r2, [sp, #28]
 800a378:	e014      	b.n	800a3a4 <_svfiprintf_r+0x110>
 800a37a:	eba0 0308 	sub.w	r3, r0, r8
 800a37e:	fa09 f303 	lsl.w	r3, r9, r3
 800a382:	4313      	orrs	r3, r2
 800a384:	9304      	str	r3, [sp, #16]
 800a386:	46a2      	mov	sl, r4
 800a388:	e7d2      	b.n	800a330 <_svfiprintf_r+0x9c>
 800a38a:	9b03      	ldr	r3, [sp, #12]
 800a38c:	1d19      	adds	r1, r3, #4
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	9103      	str	r1, [sp, #12]
 800a392:	2b00      	cmp	r3, #0
 800a394:	bfbb      	ittet	lt
 800a396:	425b      	neglt	r3, r3
 800a398:	f042 0202 	orrlt.w	r2, r2, #2
 800a39c:	9307      	strge	r3, [sp, #28]
 800a39e:	9307      	strlt	r3, [sp, #28]
 800a3a0:	bfb8      	it	lt
 800a3a2:	9204      	strlt	r2, [sp, #16]
 800a3a4:	7823      	ldrb	r3, [r4, #0]
 800a3a6:	2b2e      	cmp	r3, #46	; 0x2e
 800a3a8:	d10c      	bne.n	800a3c4 <_svfiprintf_r+0x130>
 800a3aa:	7863      	ldrb	r3, [r4, #1]
 800a3ac:	2b2a      	cmp	r3, #42	; 0x2a
 800a3ae:	d135      	bne.n	800a41c <_svfiprintf_r+0x188>
 800a3b0:	9b03      	ldr	r3, [sp, #12]
 800a3b2:	1d1a      	adds	r2, r3, #4
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	9203      	str	r2, [sp, #12]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	bfb8      	it	lt
 800a3bc:	f04f 33ff 	movlt.w	r3, #4294967295
 800a3c0:	3402      	adds	r4, #2
 800a3c2:	9305      	str	r3, [sp, #20]
 800a3c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a490 <_svfiprintf_r+0x1fc>
 800a3c8:	7821      	ldrb	r1, [r4, #0]
 800a3ca:	2203      	movs	r2, #3
 800a3cc:	4650      	mov	r0, sl
 800a3ce:	f7f5 ff07 	bl	80001e0 <memchr>
 800a3d2:	b140      	cbz	r0, 800a3e6 <_svfiprintf_r+0x152>
 800a3d4:	2340      	movs	r3, #64	; 0x40
 800a3d6:	eba0 000a 	sub.w	r0, r0, sl
 800a3da:	fa03 f000 	lsl.w	r0, r3, r0
 800a3de:	9b04      	ldr	r3, [sp, #16]
 800a3e0:	4303      	orrs	r3, r0
 800a3e2:	3401      	adds	r4, #1
 800a3e4:	9304      	str	r3, [sp, #16]
 800a3e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3ea:	4826      	ldr	r0, [pc, #152]	; (800a484 <_svfiprintf_r+0x1f0>)
 800a3ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3f0:	2206      	movs	r2, #6
 800a3f2:	f7f5 fef5 	bl	80001e0 <memchr>
 800a3f6:	2800      	cmp	r0, #0
 800a3f8:	d038      	beq.n	800a46c <_svfiprintf_r+0x1d8>
 800a3fa:	4b23      	ldr	r3, [pc, #140]	; (800a488 <_svfiprintf_r+0x1f4>)
 800a3fc:	bb1b      	cbnz	r3, 800a446 <_svfiprintf_r+0x1b2>
 800a3fe:	9b03      	ldr	r3, [sp, #12]
 800a400:	3307      	adds	r3, #7
 800a402:	f023 0307 	bic.w	r3, r3, #7
 800a406:	3308      	adds	r3, #8
 800a408:	9303      	str	r3, [sp, #12]
 800a40a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a40c:	4433      	add	r3, r6
 800a40e:	9309      	str	r3, [sp, #36]	; 0x24
 800a410:	e767      	b.n	800a2e2 <_svfiprintf_r+0x4e>
 800a412:	fb0c 3202 	mla	r2, ip, r2, r3
 800a416:	460c      	mov	r4, r1
 800a418:	2001      	movs	r0, #1
 800a41a:	e7a5      	b.n	800a368 <_svfiprintf_r+0xd4>
 800a41c:	2300      	movs	r3, #0
 800a41e:	3401      	adds	r4, #1
 800a420:	9305      	str	r3, [sp, #20]
 800a422:	4619      	mov	r1, r3
 800a424:	f04f 0c0a 	mov.w	ip, #10
 800a428:	4620      	mov	r0, r4
 800a42a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a42e:	3a30      	subs	r2, #48	; 0x30
 800a430:	2a09      	cmp	r2, #9
 800a432:	d903      	bls.n	800a43c <_svfiprintf_r+0x1a8>
 800a434:	2b00      	cmp	r3, #0
 800a436:	d0c5      	beq.n	800a3c4 <_svfiprintf_r+0x130>
 800a438:	9105      	str	r1, [sp, #20]
 800a43a:	e7c3      	b.n	800a3c4 <_svfiprintf_r+0x130>
 800a43c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a440:	4604      	mov	r4, r0
 800a442:	2301      	movs	r3, #1
 800a444:	e7f0      	b.n	800a428 <_svfiprintf_r+0x194>
 800a446:	ab03      	add	r3, sp, #12
 800a448:	9300      	str	r3, [sp, #0]
 800a44a:	462a      	mov	r2, r5
 800a44c:	4b0f      	ldr	r3, [pc, #60]	; (800a48c <_svfiprintf_r+0x1f8>)
 800a44e:	a904      	add	r1, sp, #16
 800a450:	4638      	mov	r0, r7
 800a452:	f7fd ffc9 	bl	80083e8 <_printf_float>
 800a456:	1c42      	adds	r2, r0, #1
 800a458:	4606      	mov	r6, r0
 800a45a:	d1d6      	bne.n	800a40a <_svfiprintf_r+0x176>
 800a45c:	89ab      	ldrh	r3, [r5, #12]
 800a45e:	065b      	lsls	r3, r3, #25
 800a460:	f53f af2c 	bmi.w	800a2bc <_svfiprintf_r+0x28>
 800a464:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a466:	b01d      	add	sp, #116	; 0x74
 800a468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a46c:	ab03      	add	r3, sp, #12
 800a46e:	9300      	str	r3, [sp, #0]
 800a470:	462a      	mov	r2, r5
 800a472:	4b06      	ldr	r3, [pc, #24]	; (800a48c <_svfiprintf_r+0x1f8>)
 800a474:	a904      	add	r1, sp, #16
 800a476:	4638      	mov	r0, r7
 800a478:	f7fe fa5a 	bl	8008930 <_printf_i>
 800a47c:	e7eb      	b.n	800a456 <_svfiprintf_r+0x1c2>
 800a47e:	bf00      	nop
 800a480:	0800b39c 	.word	0x0800b39c
 800a484:	0800b3a6 	.word	0x0800b3a6
 800a488:	080083e9 	.word	0x080083e9
 800a48c:	0800a1dd 	.word	0x0800a1dd
 800a490:	0800b3a2 	.word	0x0800b3a2

0800a494 <_sbrk_r>:
 800a494:	b538      	push	{r3, r4, r5, lr}
 800a496:	4d06      	ldr	r5, [pc, #24]	; (800a4b0 <_sbrk_r+0x1c>)
 800a498:	2300      	movs	r3, #0
 800a49a:	4604      	mov	r4, r0
 800a49c:	4608      	mov	r0, r1
 800a49e:	602b      	str	r3, [r5, #0]
 800a4a0:	f7f7 fda8 	bl	8001ff4 <_sbrk>
 800a4a4:	1c43      	adds	r3, r0, #1
 800a4a6:	d102      	bne.n	800a4ae <_sbrk_r+0x1a>
 800a4a8:	682b      	ldr	r3, [r5, #0]
 800a4aa:	b103      	cbz	r3, 800a4ae <_sbrk_r+0x1a>
 800a4ac:	6023      	str	r3, [r4, #0]
 800a4ae:	bd38      	pop	{r3, r4, r5, pc}
 800a4b0:	200004b4 	.word	0x200004b4

0800a4b4 <__assert_func>:
 800a4b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a4b6:	4614      	mov	r4, r2
 800a4b8:	461a      	mov	r2, r3
 800a4ba:	4b09      	ldr	r3, [pc, #36]	; (800a4e0 <__assert_func+0x2c>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	4605      	mov	r5, r0
 800a4c0:	68d8      	ldr	r0, [r3, #12]
 800a4c2:	b14c      	cbz	r4, 800a4d8 <__assert_func+0x24>
 800a4c4:	4b07      	ldr	r3, [pc, #28]	; (800a4e4 <__assert_func+0x30>)
 800a4c6:	9100      	str	r1, [sp, #0]
 800a4c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a4cc:	4906      	ldr	r1, [pc, #24]	; (800a4e8 <__assert_func+0x34>)
 800a4ce:	462b      	mov	r3, r5
 800a4d0:	f000 f80e 	bl	800a4f0 <fiprintf>
 800a4d4:	f000 faac 	bl	800aa30 <abort>
 800a4d8:	4b04      	ldr	r3, [pc, #16]	; (800a4ec <__assert_func+0x38>)
 800a4da:	461c      	mov	r4, r3
 800a4dc:	e7f3      	b.n	800a4c6 <__assert_func+0x12>
 800a4de:	bf00      	nop
 800a4e0:	2000000c 	.word	0x2000000c
 800a4e4:	0800b3ad 	.word	0x0800b3ad
 800a4e8:	0800b3ba 	.word	0x0800b3ba
 800a4ec:	0800b3e8 	.word	0x0800b3e8

0800a4f0 <fiprintf>:
 800a4f0:	b40e      	push	{r1, r2, r3}
 800a4f2:	b503      	push	{r0, r1, lr}
 800a4f4:	4601      	mov	r1, r0
 800a4f6:	ab03      	add	r3, sp, #12
 800a4f8:	4805      	ldr	r0, [pc, #20]	; (800a510 <fiprintf+0x20>)
 800a4fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4fe:	6800      	ldr	r0, [r0, #0]
 800a500:	9301      	str	r3, [sp, #4]
 800a502:	f000 f897 	bl	800a634 <_vfiprintf_r>
 800a506:	b002      	add	sp, #8
 800a508:	f85d eb04 	ldr.w	lr, [sp], #4
 800a50c:	b003      	add	sp, #12
 800a50e:	4770      	bx	lr
 800a510:	2000000c 	.word	0x2000000c

0800a514 <__ascii_mbtowc>:
 800a514:	b082      	sub	sp, #8
 800a516:	b901      	cbnz	r1, 800a51a <__ascii_mbtowc+0x6>
 800a518:	a901      	add	r1, sp, #4
 800a51a:	b142      	cbz	r2, 800a52e <__ascii_mbtowc+0x1a>
 800a51c:	b14b      	cbz	r3, 800a532 <__ascii_mbtowc+0x1e>
 800a51e:	7813      	ldrb	r3, [r2, #0]
 800a520:	600b      	str	r3, [r1, #0]
 800a522:	7812      	ldrb	r2, [r2, #0]
 800a524:	1e10      	subs	r0, r2, #0
 800a526:	bf18      	it	ne
 800a528:	2001      	movne	r0, #1
 800a52a:	b002      	add	sp, #8
 800a52c:	4770      	bx	lr
 800a52e:	4610      	mov	r0, r2
 800a530:	e7fb      	b.n	800a52a <__ascii_mbtowc+0x16>
 800a532:	f06f 0001 	mvn.w	r0, #1
 800a536:	e7f8      	b.n	800a52a <__ascii_mbtowc+0x16>

0800a538 <memmove>:
 800a538:	4288      	cmp	r0, r1
 800a53a:	b510      	push	{r4, lr}
 800a53c:	eb01 0402 	add.w	r4, r1, r2
 800a540:	d902      	bls.n	800a548 <memmove+0x10>
 800a542:	4284      	cmp	r4, r0
 800a544:	4623      	mov	r3, r4
 800a546:	d807      	bhi.n	800a558 <memmove+0x20>
 800a548:	1e43      	subs	r3, r0, #1
 800a54a:	42a1      	cmp	r1, r4
 800a54c:	d008      	beq.n	800a560 <memmove+0x28>
 800a54e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a552:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a556:	e7f8      	b.n	800a54a <memmove+0x12>
 800a558:	4402      	add	r2, r0
 800a55a:	4601      	mov	r1, r0
 800a55c:	428a      	cmp	r2, r1
 800a55e:	d100      	bne.n	800a562 <memmove+0x2a>
 800a560:	bd10      	pop	{r4, pc}
 800a562:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a566:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a56a:	e7f7      	b.n	800a55c <memmove+0x24>

0800a56c <__malloc_lock>:
 800a56c:	4801      	ldr	r0, [pc, #4]	; (800a574 <__malloc_lock+0x8>)
 800a56e:	f000 bc1f 	b.w	800adb0 <__retarget_lock_acquire_recursive>
 800a572:	bf00      	nop
 800a574:	200004b8 	.word	0x200004b8

0800a578 <__malloc_unlock>:
 800a578:	4801      	ldr	r0, [pc, #4]	; (800a580 <__malloc_unlock+0x8>)
 800a57a:	f000 bc1a 	b.w	800adb2 <__retarget_lock_release_recursive>
 800a57e:	bf00      	nop
 800a580:	200004b8 	.word	0x200004b8

0800a584 <_realloc_r>:
 800a584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a588:	4680      	mov	r8, r0
 800a58a:	4614      	mov	r4, r2
 800a58c:	460e      	mov	r6, r1
 800a58e:	b921      	cbnz	r1, 800a59a <_realloc_r+0x16>
 800a590:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a594:	4611      	mov	r1, r2
 800a596:	f7ff bdad 	b.w	800a0f4 <_malloc_r>
 800a59a:	b92a      	cbnz	r2, 800a5a8 <_realloc_r+0x24>
 800a59c:	f7ff fd3e 	bl	800a01c <_free_r>
 800a5a0:	4625      	mov	r5, r4
 800a5a2:	4628      	mov	r0, r5
 800a5a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5a8:	f000 fc6a 	bl	800ae80 <_malloc_usable_size_r>
 800a5ac:	4284      	cmp	r4, r0
 800a5ae:	4607      	mov	r7, r0
 800a5b0:	d802      	bhi.n	800a5b8 <_realloc_r+0x34>
 800a5b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a5b6:	d812      	bhi.n	800a5de <_realloc_r+0x5a>
 800a5b8:	4621      	mov	r1, r4
 800a5ba:	4640      	mov	r0, r8
 800a5bc:	f7ff fd9a 	bl	800a0f4 <_malloc_r>
 800a5c0:	4605      	mov	r5, r0
 800a5c2:	2800      	cmp	r0, #0
 800a5c4:	d0ed      	beq.n	800a5a2 <_realloc_r+0x1e>
 800a5c6:	42bc      	cmp	r4, r7
 800a5c8:	4622      	mov	r2, r4
 800a5ca:	4631      	mov	r1, r6
 800a5cc:	bf28      	it	cs
 800a5ce:	463a      	movcs	r2, r7
 800a5d0:	f7ff f97c 	bl	80098cc <memcpy>
 800a5d4:	4631      	mov	r1, r6
 800a5d6:	4640      	mov	r0, r8
 800a5d8:	f7ff fd20 	bl	800a01c <_free_r>
 800a5dc:	e7e1      	b.n	800a5a2 <_realloc_r+0x1e>
 800a5de:	4635      	mov	r5, r6
 800a5e0:	e7df      	b.n	800a5a2 <_realloc_r+0x1e>

0800a5e2 <__sfputc_r>:
 800a5e2:	6893      	ldr	r3, [r2, #8]
 800a5e4:	3b01      	subs	r3, #1
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	b410      	push	{r4}
 800a5ea:	6093      	str	r3, [r2, #8]
 800a5ec:	da08      	bge.n	800a600 <__sfputc_r+0x1e>
 800a5ee:	6994      	ldr	r4, [r2, #24]
 800a5f0:	42a3      	cmp	r3, r4
 800a5f2:	db01      	blt.n	800a5f8 <__sfputc_r+0x16>
 800a5f4:	290a      	cmp	r1, #10
 800a5f6:	d103      	bne.n	800a600 <__sfputc_r+0x1e>
 800a5f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5fc:	f000 b94a 	b.w	800a894 <__swbuf_r>
 800a600:	6813      	ldr	r3, [r2, #0]
 800a602:	1c58      	adds	r0, r3, #1
 800a604:	6010      	str	r0, [r2, #0]
 800a606:	7019      	strb	r1, [r3, #0]
 800a608:	4608      	mov	r0, r1
 800a60a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a60e:	4770      	bx	lr

0800a610 <__sfputs_r>:
 800a610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a612:	4606      	mov	r6, r0
 800a614:	460f      	mov	r7, r1
 800a616:	4614      	mov	r4, r2
 800a618:	18d5      	adds	r5, r2, r3
 800a61a:	42ac      	cmp	r4, r5
 800a61c:	d101      	bne.n	800a622 <__sfputs_r+0x12>
 800a61e:	2000      	movs	r0, #0
 800a620:	e007      	b.n	800a632 <__sfputs_r+0x22>
 800a622:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a626:	463a      	mov	r2, r7
 800a628:	4630      	mov	r0, r6
 800a62a:	f7ff ffda 	bl	800a5e2 <__sfputc_r>
 800a62e:	1c43      	adds	r3, r0, #1
 800a630:	d1f3      	bne.n	800a61a <__sfputs_r+0xa>
 800a632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a634 <_vfiprintf_r>:
 800a634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a638:	460d      	mov	r5, r1
 800a63a:	b09d      	sub	sp, #116	; 0x74
 800a63c:	4614      	mov	r4, r2
 800a63e:	4698      	mov	r8, r3
 800a640:	4606      	mov	r6, r0
 800a642:	b118      	cbz	r0, 800a64c <_vfiprintf_r+0x18>
 800a644:	6983      	ldr	r3, [r0, #24]
 800a646:	b90b      	cbnz	r3, 800a64c <_vfiprintf_r+0x18>
 800a648:	f000 fb14 	bl	800ac74 <__sinit>
 800a64c:	4b89      	ldr	r3, [pc, #548]	; (800a874 <_vfiprintf_r+0x240>)
 800a64e:	429d      	cmp	r5, r3
 800a650:	d11b      	bne.n	800a68a <_vfiprintf_r+0x56>
 800a652:	6875      	ldr	r5, [r6, #4]
 800a654:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a656:	07d9      	lsls	r1, r3, #31
 800a658:	d405      	bmi.n	800a666 <_vfiprintf_r+0x32>
 800a65a:	89ab      	ldrh	r3, [r5, #12]
 800a65c:	059a      	lsls	r2, r3, #22
 800a65e:	d402      	bmi.n	800a666 <_vfiprintf_r+0x32>
 800a660:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a662:	f000 fba5 	bl	800adb0 <__retarget_lock_acquire_recursive>
 800a666:	89ab      	ldrh	r3, [r5, #12]
 800a668:	071b      	lsls	r3, r3, #28
 800a66a:	d501      	bpl.n	800a670 <_vfiprintf_r+0x3c>
 800a66c:	692b      	ldr	r3, [r5, #16]
 800a66e:	b9eb      	cbnz	r3, 800a6ac <_vfiprintf_r+0x78>
 800a670:	4629      	mov	r1, r5
 800a672:	4630      	mov	r0, r6
 800a674:	f000 f96e 	bl	800a954 <__swsetup_r>
 800a678:	b1c0      	cbz	r0, 800a6ac <_vfiprintf_r+0x78>
 800a67a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a67c:	07dc      	lsls	r4, r3, #31
 800a67e:	d50e      	bpl.n	800a69e <_vfiprintf_r+0x6a>
 800a680:	f04f 30ff 	mov.w	r0, #4294967295
 800a684:	b01d      	add	sp, #116	; 0x74
 800a686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a68a:	4b7b      	ldr	r3, [pc, #492]	; (800a878 <_vfiprintf_r+0x244>)
 800a68c:	429d      	cmp	r5, r3
 800a68e:	d101      	bne.n	800a694 <_vfiprintf_r+0x60>
 800a690:	68b5      	ldr	r5, [r6, #8]
 800a692:	e7df      	b.n	800a654 <_vfiprintf_r+0x20>
 800a694:	4b79      	ldr	r3, [pc, #484]	; (800a87c <_vfiprintf_r+0x248>)
 800a696:	429d      	cmp	r5, r3
 800a698:	bf08      	it	eq
 800a69a:	68f5      	ldreq	r5, [r6, #12]
 800a69c:	e7da      	b.n	800a654 <_vfiprintf_r+0x20>
 800a69e:	89ab      	ldrh	r3, [r5, #12]
 800a6a0:	0598      	lsls	r0, r3, #22
 800a6a2:	d4ed      	bmi.n	800a680 <_vfiprintf_r+0x4c>
 800a6a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6a6:	f000 fb84 	bl	800adb2 <__retarget_lock_release_recursive>
 800a6aa:	e7e9      	b.n	800a680 <_vfiprintf_r+0x4c>
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	9309      	str	r3, [sp, #36]	; 0x24
 800a6b0:	2320      	movs	r3, #32
 800a6b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6ba:	2330      	movs	r3, #48	; 0x30
 800a6bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a880 <_vfiprintf_r+0x24c>
 800a6c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a6c4:	f04f 0901 	mov.w	r9, #1
 800a6c8:	4623      	mov	r3, r4
 800a6ca:	469a      	mov	sl, r3
 800a6cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6d0:	b10a      	cbz	r2, 800a6d6 <_vfiprintf_r+0xa2>
 800a6d2:	2a25      	cmp	r2, #37	; 0x25
 800a6d4:	d1f9      	bne.n	800a6ca <_vfiprintf_r+0x96>
 800a6d6:	ebba 0b04 	subs.w	fp, sl, r4
 800a6da:	d00b      	beq.n	800a6f4 <_vfiprintf_r+0xc0>
 800a6dc:	465b      	mov	r3, fp
 800a6de:	4622      	mov	r2, r4
 800a6e0:	4629      	mov	r1, r5
 800a6e2:	4630      	mov	r0, r6
 800a6e4:	f7ff ff94 	bl	800a610 <__sfputs_r>
 800a6e8:	3001      	adds	r0, #1
 800a6ea:	f000 80aa 	beq.w	800a842 <_vfiprintf_r+0x20e>
 800a6ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6f0:	445a      	add	r2, fp
 800a6f2:	9209      	str	r2, [sp, #36]	; 0x24
 800a6f4:	f89a 3000 	ldrb.w	r3, [sl]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	f000 80a2 	beq.w	800a842 <_vfiprintf_r+0x20e>
 800a6fe:	2300      	movs	r3, #0
 800a700:	f04f 32ff 	mov.w	r2, #4294967295
 800a704:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a708:	f10a 0a01 	add.w	sl, sl, #1
 800a70c:	9304      	str	r3, [sp, #16]
 800a70e:	9307      	str	r3, [sp, #28]
 800a710:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a714:	931a      	str	r3, [sp, #104]	; 0x68
 800a716:	4654      	mov	r4, sl
 800a718:	2205      	movs	r2, #5
 800a71a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a71e:	4858      	ldr	r0, [pc, #352]	; (800a880 <_vfiprintf_r+0x24c>)
 800a720:	f7f5 fd5e 	bl	80001e0 <memchr>
 800a724:	9a04      	ldr	r2, [sp, #16]
 800a726:	b9d8      	cbnz	r0, 800a760 <_vfiprintf_r+0x12c>
 800a728:	06d1      	lsls	r1, r2, #27
 800a72a:	bf44      	itt	mi
 800a72c:	2320      	movmi	r3, #32
 800a72e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a732:	0713      	lsls	r3, r2, #28
 800a734:	bf44      	itt	mi
 800a736:	232b      	movmi	r3, #43	; 0x2b
 800a738:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a73c:	f89a 3000 	ldrb.w	r3, [sl]
 800a740:	2b2a      	cmp	r3, #42	; 0x2a
 800a742:	d015      	beq.n	800a770 <_vfiprintf_r+0x13c>
 800a744:	9a07      	ldr	r2, [sp, #28]
 800a746:	4654      	mov	r4, sl
 800a748:	2000      	movs	r0, #0
 800a74a:	f04f 0c0a 	mov.w	ip, #10
 800a74e:	4621      	mov	r1, r4
 800a750:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a754:	3b30      	subs	r3, #48	; 0x30
 800a756:	2b09      	cmp	r3, #9
 800a758:	d94e      	bls.n	800a7f8 <_vfiprintf_r+0x1c4>
 800a75a:	b1b0      	cbz	r0, 800a78a <_vfiprintf_r+0x156>
 800a75c:	9207      	str	r2, [sp, #28]
 800a75e:	e014      	b.n	800a78a <_vfiprintf_r+0x156>
 800a760:	eba0 0308 	sub.w	r3, r0, r8
 800a764:	fa09 f303 	lsl.w	r3, r9, r3
 800a768:	4313      	orrs	r3, r2
 800a76a:	9304      	str	r3, [sp, #16]
 800a76c:	46a2      	mov	sl, r4
 800a76e:	e7d2      	b.n	800a716 <_vfiprintf_r+0xe2>
 800a770:	9b03      	ldr	r3, [sp, #12]
 800a772:	1d19      	adds	r1, r3, #4
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	9103      	str	r1, [sp, #12]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	bfbb      	ittet	lt
 800a77c:	425b      	neglt	r3, r3
 800a77e:	f042 0202 	orrlt.w	r2, r2, #2
 800a782:	9307      	strge	r3, [sp, #28]
 800a784:	9307      	strlt	r3, [sp, #28]
 800a786:	bfb8      	it	lt
 800a788:	9204      	strlt	r2, [sp, #16]
 800a78a:	7823      	ldrb	r3, [r4, #0]
 800a78c:	2b2e      	cmp	r3, #46	; 0x2e
 800a78e:	d10c      	bne.n	800a7aa <_vfiprintf_r+0x176>
 800a790:	7863      	ldrb	r3, [r4, #1]
 800a792:	2b2a      	cmp	r3, #42	; 0x2a
 800a794:	d135      	bne.n	800a802 <_vfiprintf_r+0x1ce>
 800a796:	9b03      	ldr	r3, [sp, #12]
 800a798:	1d1a      	adds	r2, r3, #4
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	9203      	str	r2, [sp, #12]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	bfb8      	it	lt
 800a7a2:	f04f 33ff 	movlt.w	r3, #4294967295
 800a7a6:	3402      	adds	r4, #2
 800a7a8:	9305      	str	r3, [sp, #20]
 800a7aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a890 <_vfiprintf_r+0x25c>
 800a7ae:	7821      	ldrb	r1, [r4, #0]
 800a7b0:	2203      	movs	r2, #3
 800a7b2:	4650      	mov	r0, sl
 800a7b4:	f7f5 fd14 	bl	80001e0 <memchr>
 800a7b8:	b140      	cbz	r0, 800a7cc <_vfiprintf_r+0x198>
 800a7ba:	2340      	movs	r3, #64	; 0x40
 800a7bc:	eba0 000a 	sub.w	r0, r0, sl
 800a7c0:	fa03 f000 	lsl.w	r0, r3, r0
 800a7c4:	9b04      	ldr	r3, [sp, #16]
 800a7c6:	4303      	orrs	r3, r0
 800a7c8:	3401      	adds	r4, #1
 800a7ca:	9304      	str	r3, [sp, #16]
 800a7cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7d0:	482c      	ldr	r0, [pc, #176]	; (800a884 <_vfiprintf_r+0x250>)
 800a7d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a7d6:	2206      	movs	r2, #6
 800a7d8:	f7f5 fd02 	bl	80001e0 <memchr>
 800a7dc:	2800      	cmp	r0, #0
 800a7de:	d03f      	beq.n	800a860 <_vfiprintf_r+0x22c>
 800a7e0:	4b29      	ldr	r3, [pc, #164]	; (800a888 <_vfiprintf_r+0x254>)
 800a7e2:	bb1b      	cbnz	r3, 800a82c <_vfiprintf_r+0x1f8>
 800a7e4:	9b03      	ldr	r3, [sp, #12]
 800a7e6:	3307      	adds	r3, #7
 800a7e8:	f023 0307 	bic.w	r3, r3, #7
 800a7ec:	3308      	adds	r3, #8
 800a7ee:	9303      	str	r3, [sp, #12]
 800a7f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7f2:	443b      	add	r3, r7
 800a7f4:	9309      	str	r3, [sp, #36]	; 0x24
 800a7f6:	e767      	b.n	800a6c8 <_vfiprintf_r+0x94>
 800a7f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7fc:	460c      	mov	r4, r1
 800a7fe:	2001      	movs	r0, #1
 800a800:	e7a5      	b.n	800a74e <_vfiprintf_r+0x11a>
 800a802:	2300      	movs	r3, #0
 800a804:	3401      	adds	r4, #1
 800a806:	9305      	str	r3, [sp, #20]
 800a808:	4619      	mov	r1, r3
 800a80a:	f04f 0c0a 	mov.w	ip, #10
 800a80e:	4620      	mov	r0, r4
 800a810:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a814:	3a30      	subs	r2, #48	; 0x30
 800a816:	2a09      	cmp	r2, #9
 800a818:	d903      	bls.n	800a822 <_vfiprintf_r+0x1ee>
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d0c5      	beq.n	800a7aa <_vfiprintf_r+0x176>
 800a81e:	9105      	str	r1, [sp, #20]
 800a820:	e7c3      	b.n	800a7aa <_vfiprintf_r+0x176>
 800a822:	fb0c 2101 	mla	r1, ip, r1, r2
 800a826:	4604      	mov	r4, r0
 800a828:	2301      	movs	r3, #1
 800a82a:	e7f0      	b.n	800a80e <_vfiprintf_r+0x1da>
 800a82c:	ab03      	add	r3, sp, #12
 800a82e:	9300      	str	r3, [sp, #0]
 800a830:	462a      	mov	r2, r5
 800a832:	4b16      	ldr	r3, [pc, #88]	; (800a88c <_vfiprintf_r+0x258>)
 800a834:	a904      	add	r1, sp, #16
 800a836:	4630      	mov	r0, r6
 800a838:	f7fd fdd6 	bl	80083e8 <_printf_float>
 800a83c:	4607      	mov	r7, r0
 800a83e:	1c78      	adds	r0, r7, #1
 800a840:	d1d6      	bne.n	800a7f0 <_vfiprintf_r+0x1bc>
 800a842:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a844:	07d9      	lsls	r1, r3, #31
 800a846:	d405      	bmi.n	800a854 <_vfiprintf_r+0x220>
 800a848:	89ab      	ldrh	r3, [r5, #12]
 800a84a:	059a      	lsls	r2, r3, #22
 800a84c:	d402      	bmi.n	800a854 <_vfiprintf_r+0x220>
 800a84e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a850:	f000 faaf 	bl	800adb2 <__retarget_lock_release_recursive>
 800a854:	89ab      	ldrh	r3, [r5, #12]
 800a856:	065b      	lsls	r3, r3, #25
 800a858:	f53f af12 	bmi.w	800a680 <_vfiprintf_r+0x4c>
 800a85c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a85e:	e711      	b.n	800a684 <_vfiprintf_r+0x50>
 800a860:	ab03      	add	r3, sp, #12
 800a862:	9300      	str	r3, [sp, #0]
 800a864:	462a      	mov	r2, r5
 800a866:	4b09      	ldr	r3, [pc, #36]	; (800a88c <_vfiprintf_r+0x258>)
 800a868:	a904      	add	r1, sp, #16
 800a86a:	4630      	mov	r0, r6
 800a86c:	f7fe f860 	bl	8008930 <_printf_i>
 800a870:	e7e4      	b.n	800a83c <_vfiprintf_r+0x208>
 800a872:	bf00      	nop
 800a874:	0800b514 	.word	0x0800b514
 800a878:	0800b534 	.word	0x0800b534
 800a87c:	0800b4f4 	.word	0x0800b4f4
 800a880:	0800b39c 	.word	0x0800b39c
 800a884:	0800b3a6 	.word	0x0800b3a6
 800a888:	080083e9 	.word	0x080083e9
 800a88c:	0800a611 	.word	0x0800a611
 800a890:	0800b3a2 	.word	0x0800b3a2

0800a894 <__swbuf_r>:
 800a894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a896:	460e      	mov	r6, r1
 800a898:	4614      	mov	r4, r2
 800a89a:	4605      	mov	r5, r0
 800a89c:	b118      	cbz	r0, 800a8a6 <__swbuf_r+0x12>
 800a89e:	6983      	ldr	r3, [r0, #24]
 800a8a0:	b90b      	cbnz	r3, 800a8a6 <__swbuf_r+0x12>
 800a8a2:	f000 f9e7 	bl	800ac74 <__sinit>
 800a8a6:	4b21      	ldr	r3, [pc, #132]	; (800a92c <__swbuf_r+0x98>)
 800a8a8:	429c      	cmp	r4, r3
 800a8aa:	d12b      	bne.n	800a904 <__swbuf_r+0x70>
 800a8ac:	686c      	ldr	r4, [r5, #4]
 800a8ae:	69a3      	ldr	r3, [r4, #24]
 800a8b0:	60a3      	str	r3, [r4, #8]
 800a8b2:	89a3      	ldrh	r3, [r4, #12]
 800a8b4:	071a      	lsls	r2, r3, #28
 800a8b6:	d52f      	bpl.n	800a918 <__swbuf_r+0x84>
 800a8b8:	6923      	ldr	r3, [r4, #16]
 800a8ba:	b36b      	cbz	r3, 800a918 <__swbuf_r+0x84>
 800a8bc:	6923      	ldr	r3, [r4, #16]
 800a8be:	6820      	ldr	r0, [r4, #0]
 800a8c0:	1ac0      	subs	r0, r0, r3
 800a8c2:	6963      	ldr	r3, [r4, #20]
 800a8c4:	b2f6      	uxtb	r6, r6
 800a8c6:	4283      	cmp	r3, r0
 800a8c8:	4637      	mov	r7, r6
 800a8ca:	dc04      	bgt.n	800a8d6 <__swbuf_r+0x42>
 800a8cc:	4621      	mov	r1, r4
 800a8ce:	4628      	mov	r0, r5
 800a8d0:	f000 f93c 	bl	800ab4c <_fflush_r>
 800a8d4:	bb30      	cbnz	r0, 800a924 <__swbuf_r+0x90>
 800a8d6:	68a3      	ldr	r3, [r4, #8]
 800a8d8:	3b01      	subs	r3, #1
 800a8da:	60a3      	str	r3, [r4, #8]
 800a8dc:	6823      	ldr	r3, [r4, #0]
 800a8de:	1c5a      	adds	r2, r3, #1
 800a8e0:	6022      	str	r2, [r4, #0]
 800a8e2:	701e      	strb	r6, [r3, #0]
 800a8e4:	6963      	ldr	r3, [r4, #20]
 800a8e6:	3001      	adds	r0, #1
 800a8e8:	4283      	cmp	r3, r0
 800a8ea:	d004      	beq.n	800a8f6 <__swbuf_r+0x62>
 800a8ec:	89a3      	ldrh	r3, [r4, #12]
 800a8ee:	07db      	lsls	r3, r3, #31
 800a8f0:	d506      	bpl.n	800a900 <__swbuf_r+0x6c>
 800a8f2:	2e0a      	cmp	r6, #10
 800a8f4:	d104      	bne.n	800a900 <__swbuf_r+0x6c>
 800a8f6:	4621      	mov	r1, r4
 800a8f8:	4628      	mov	r0, r5
 800a8fa:	f000 f927 	bl	800ab4c <_fflush_r>
 800a8fe:	b988      	cbnz	r0, 800a924 <__swbuf_r+0x90>
 800a900:	4638      	mov	r0, r7
 800a902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a904:	4b0a      	ldr	r3, [pc, #40]	; (800a930 <__swbuf_r+0x9c>)
 800a906:	429c      	cmp	r4, r3
 800a908:	d101      	bne.n	800a90e <__swbuf_r+0x7a>
 800a90a:	68ac      	ldr	r4, [r5, #8]
 800a90c:	e7cf      	b.n	800a8ae <__swbuf_r+0x1a>
 800a90e:	4b09      	ldr	r3, [pc, #36]	; (800a934 <__swbuf_r+0xa0>)
 800a910:	429c      	cmp	r4, r3
 800a912:	bf08      	it	eq
 800a914:	68ec      	ldreq	r4, [r5, #12]
 800a916:	e7ca      	b.n	800a8ae <__swbuf_r+0x1a>
 800a918:	4621      	mov	r1, r4
 800a91a:	4628      	mov	r0, r5
 800a91c:	f000 f81a 	bl	800a954 <__swsetup_r>
 800a920:	2800      	cmp	r0, #0
 800a922:	d0cb      	beq.n	800a8bc <__swbuf_r+0x28>
 800a924:	f04f 37ff 	mov.w	r7, #4294967295
 800a928:	e7ea      	b.n	800a900 <__swbuf_r+0x6c>
 800a92a:	bf00      	nop
 800a92c:	0800b514 	.word	0x0800b514
 800a930:	0800b534 	.word	0x0800b534
 800a934:	0800b4f4 	.word	0x0800b4f4

0800a938 <__ascii_wctomb>:
 800a938:	b149      	cbz	r1, 800a94e <__ascii_wctomb+0x16>
 800a93a:	2aff      	cmp	r2, #255	; 0xff
 800a93c:	bf85      	ittet	hi
 800a93e:	238a      	movhi	r3, #138	; 0x8a
 800a940:	6003      	strhi	r3, [r0, #0]
 800a942:	700a      	strbls	r2, [r1, #0]
 800a944:	f04f 30ff 	movhi.w	r0, #4294967295
 800a948:	bf98      	it	ls
 800a94a:	2001      	movls	r0, #1
 800a94c:	4770      	bx	lr
 800a94e:	4608      	mov	r0, r1
 800a950:	4770      	bx	lr
	...

0800a954 <__swsetup_r>:
 800a954:	4b32      	ldr	r3, [pc, #200]	; (800aa20 <__swsetup_r+0xcc>)
 800a956:	b570      	push	{r4, r5, r6, lr}
 800a958:	681d      	ldr	r5, [r3, #0]
 800a95a:	4606      	mov	r6, r0
 800a95c:	460c      	mov	r4, r1
 800a95e:	b125      	cbz	r5, 800a96a <__swsetup_r+0x16>
 800a960:	69ab      	ldr	r3, [r5, #24]
 800a962:	b913      	cbnz	r3, 800a96a <__swsetup_r+0x16>
 800a964:	4628      	mov	r0, r5
 800a966:	f000 f985 	bl	800ac74 <__sinit>
 800a96a:	4b2e      	ldr	r3, [pc, #184]	; (800aa24 <__swsetup_r+0xd0>)
 800a96c:	429c      	cmp	r4, r3
 800a96e:	d10f      	bne.n	800a990 <__swsetup_r+0x3c>
 800a970:	686c      	ldr	r4, [r5, #4]
 800a972:	89a3      	ldrh	r3, [r4, #12]
 800a974:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a978:	0719      	lsls	r1, r3, #28
 800a97a:	d42c      	bmi.n	800a9d6 <__swsetup_r+0x82>
 800a97c:	06dd      	lsls	r5, r3, #27
 800a97e:	d411      	bmi.n	800a9a4 <__swsetup_r+0x50>
 800a980:	2309      	movs	r3, #9
 800a982:	6033      	str	r3, [r6, #0]
 800a984:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a988:	81a3      	strh	r3, [r4, #12]
 800a98a:	f04f 30ff 	mov.w	r0, #4294967295
 800a98e:	e03e      	b.n	800aa0e <__swsetup_r+0xba>
 800a990:	4b25      	ldr	r3, [pc, #148]	; (800aa28 <__swsetup_r+0xd4>)
 800a992:	429c      	cmp	r4, r3
 800a994:	d101      	bne.n	800a99a <__swsetup_r+0x46>
 800a996:	68ac      	ldr	r4, [r5, #8]
 800a998:	e7eb      	b.n	800a972 <__swsetup_r+0x1e>
 800a99a:	4b24      	ldr	r3, [pc, #144]	; (800aa2c <__swsetup_r+0xd8>)
 800a99c:	429c      	cmp	r4, r3
 800a99e:	bf08      	it	eq
 800a9a0:	68ec      	ldreq	r4, [r5, #12]
 800a9a2:	e7e6      	b.n	800a972 <__swsetup_r+0x1e>
 800a9a4:	0758      	lsls	r0, r3, #29
 800a9a6:	d512      	bpl.n	800a9ce <__swsetup_r+0x7a>
 800a9a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9aa:	b141      	cbz	r1, 800a9be <__swsetup_r+0x6a>
 800a9ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9b0:	4299      	cmp	r1, r3
 800a9b2:	d002      	beq.n	800a9ba <__swsetup_r+0x66>
 800a9b4:	4630      	mov	r0, r6
 800a9b6:	f7ff fb31 	bl	800a01c <_free_r>
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	6363      	str	r3, [r4, #52]	; 0x34
 800a9be:	89a3      	ldrh	r3, [r4, #12]
 800a9c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a9c4:	81a3      	strh	r3, [r4, #12]
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	6063      	str	r3, [r4, #4]
 800a9ca:	6923      	ldr	r3, [r4, #16]
 800a9cc:	6023      	str	r3, [r4, #0]
 800a9ce:	89a3      	ldrh	r3, [r4, #12]
 800a9d0:	f043 0308 	orr.w	r3, r3, #8
 800a9d4:	81a3      	strh	r3, [r4, #12]
 800a9d6:	6923      	ldr	r3, [r4, #16]
 800a9d8:	b94b      	cbnz	r3, 800a9ee <__swsetup_r+0x9a>
 800a9da:	89a3      	ldrh	r3, [r4, #12]
 800a9dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a9e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a9e4:	d003      	beq.n	800a9ee <__swsetup_r+0x9a>
 800a9e6:	4621      	mov	r1, r4
 800a9e8:	4630      	mov	r0, r6
 800a9ea:	f000 fa09 	bl	800ae00 <__smakebuf_r>
 800a9ee:	89a0      	ldrh	r0, [r4, #12]
 800a9f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a9f4:	f010 0301 	ands.w	r3, r0, #1
 800a9f8:	d00a      	beq.n	800aa10 <__swsetup_r+0xbc>
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	60a3      	str	r3, [r4, #8]
 800a9fe:	6963      	ldr	r3, [r4, #20]
 800aa00:	425b      	negs	r3, r3
 800aa02:	61a3      	str	r3, [r4, #24]
 800aa04:	6923      	ldr	r3, [r4, #16]
 800aa06:	b943      	cbnz	r3, 800aa1a <__swsetup_r+0xc6>
 800aa08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aa0c:	d1ba      	bne.n	800a984 <__swsetup_r+0x30>
 800aa0e:	bd70      	pop	{r4, r5, r6, pc}
 800aa10:	0781      	lsls	r1, r0, #30
 800aa12:	bf58      	it	pl
 800aa14:	6963      	ldrpl	r3, [r4, #20]
 800aa16:	60a3      	str	r3, [r4, #8]
 800aa18:	e7f4      	b.n	800aa04 <__swsetup_r+0xb0>
 800aa1a:	2000      	movs	r0, #0
 800aa1c:	e7f7      	b.n	800aa0e <__swsetup_r+0xba>
 800aa1e:	bf00      	nop
 800aa20:	2000000c 	.word	0x2000000c
 800aa24:	0800b514 	.word	0x0800b514
 800aa28:	0800b534 	.word	0x0800b534
 800aa2c:	0800b4f4 	.word	0x0800b4f4

0800aa30 <abort>:
 800aa30:	b508      	push	{r3, lr}
 800aa32:	2006      	movs	r0, #6
 800aa34:	f000 fa54 	bl	800aee0 <raise>
 800aa38:	2001      	movs	r0, #1
 800aa3a:	f7f7 fa63 	bl	8001f04 <_exit>
	...

0800aa40 <__sflush_r>:
 800aa40:	898a      	ldrh	r2, [r1, #12]
 800aa42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa46:	4605      	mov	r5, r0
 800aa48:	0710      	lsls	r0, r2, #28
 800aa4a:	460c      	mov	r4, r1
 800aa4c:	d458      	bmi.n	800ab00 <__sflush_r+0xc0>
 800aa4e:	684b      	ldr	r3, [r1, #4]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	dc05      	bgt.n	800aa60 <__sflush_r+0x20>
 800aa54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	dc02      	bgt.n	800aa60 <__sflush_r+0x20>
 800aa5a:	2000      	movs	r0, #0
 800aa5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa62:	2e00      	cmp	r6, #0
 800aa64:	d0f9      	beq.n	800aa5a <__sflush_r+0x1a>
 800aa66:	2300      	movs	r3, #0
 800aa68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aa6c:	682f      	ldr	r7, [r5, #0]
 800aa6e:	602b      	str	r3, [r5, #0]
 800aa70:	d032      	beq.n	800aad8 <__sflush_r+0x98>
 800aa72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aa74:	89a3      	ldrh	r3, [r4, #12]
 800aa76:	075a      	lsls	r2, r3, #29
 800aa78:	d505      	bpl.n	800aa86 <__sflush_r+0x46>
 800aa7a:	6863      	ldr	r3, [r4, #4]
 800aa7c:	1ac0      	subs	r0, r0, r3
 800aa7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aa80:	b10b      	cbz	r3, 800aa86 <__sflush_r+0x46>
 800aa82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aa84:	1ac0      	subs	r0, r0, r3
 800aa86:	2300      	movs	r3, #0
 800aa88:	4602      	mov	r2, r0
 800aa8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa8c:	6a21      	ldr	r1, [r4, #32]
 800aa8e:	4628      	mov	r0, r5
 800aa90:	47b0      	blx	r6
 800aa92:	1c43      	adds	r3, r0, #1
 800aa94:	89a3      	ldrh	r3, [r4, #12]
 800aa96:	d106      	bne.n	800aaa6 <__sflush_r+0x66>
 800aa98:	6829      	ldr	r1, [r5, #0]
 800aa9a:	291d      	cmp	r1, #29
 800aa9c:	d82c      	bhi.n	800aaf8 <__sflush_r+0xb8>
 800aa9e:	4a2a      	ldr	r2, [pc, #168]	; (800ab48 <__sflush_r+0x108>)
 800aaa0:	40ca      	lsrs	r2, r1
 800aaa2:	07d6      	lsls	r6, r2, #31
 800aaa4:	d528      	bpl.n	800aaf8 <__sflush_r+0xb8>
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	6062      	str	r2, [r4, #4]
 800aaaa:	04d9      	lsls	r1, r3, #19
 800aaac:	6922      	ldr	r2, [r4, #16]
 800aaae:	6022      	str	r2, [r4, #0]
 800aab0:	d504      	bpl.n	800aabc <__sflush_r+0x7c>
 800aab2:	1c42      	adds	r2, r0, #1
 800aab4:	d101      	bne.n	800aaba <__sflush_r+0x7a>
 800aab6:	682b      	ldr	r3, [r5, #0]
 800aab8:	b903      	cbnz	r3, 800aabc <__sflush_r+0x7c>
 800aaba:	6560      	str	r0, [r4, #84]	; 0x54
 800aabc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aabe:	602f      	str	r7, [r5, #0]
 800aac0:	2900      	cmp	r1, #0
 800aac2:	d0ca      	beq.n	800aa5a <__sflush_r+0x1a>
 800aac4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aac8:	4299      	cmp	r1, r3
 800aaca:	d002      	beq.n	800aad2 <__sflush_r+0x92>
 800aacc:	4628      	mov	r0, r5
 800aace:	f7ff faa5 	bl	800a01c <_free_r>
 800aad2:	2000      	movs	r0, #0
 800aad4:	6360      	str	r0, [r4, #52]	; 0x34
 800aad6:	e7c1      	b.n	800aa5c <__sflush_r+0x1c>
 800aad8:	6a21      	ldr	r1, [r4, #32]
 800aada:	2301      	movs	r3, #1
 800aadc:	4628      	mov	r0, r5
 800aade:	47b0      	blx	r6
 800aae0:	1c41      	adds	r1, r0, #1
 800aae2:	d1c7      	bne.n	800aa74 <__sflush_r+0x34>
 800aae4:	682b      	ldr	r3, [r5, #0]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d0c4      	beq.n	800aa74 <__sflush_r+0x34>
 800aaea:	2b1d      	cmp	r3, #29
 800aaec:	d001      	beq.n	800aaf2 <__sflush_r+0xb2>
 800aaee:	2b16      	cmp	r3, #22
 800aaf0:	d101      	bne.n	800aaf6 <__sflush_r+0xb6>
 800aaf2:	602f      	str	r7, [r5, #0]
 800aaf4:	e7b1      	b.n	800aa5a <__sflush_r+0x1a>
 800aaf6:	89a3      	ldrh	r3, [r4, #12]
 800aaf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aafc:	81a3      	strh	r3, [r4, #12]
 800aafe:	e7ad      	b.n	800aa5c <__sflush_r+0x1c>
 800ab00:	690f      	ldr	r7, [r1, #16]
 800ab02:	2f00      	cmp	r7, #0
 800ab04:	d0a9      	beq.n	800aa5a <__sflush_r+0x1a>
 800ab06:	0793      	lsls	r3, r2, #30
 800ab08:	680e      	ldr	r6, [r1, #0]
 800ab0a:	bf08      	it	eq
 800ab0c:	694b      	ldreq	r3, [r1, #20]
 800ab0e:	600f      	str	r7, [r1, #0]
 800ab10:	bf18      	it	ne
 800ab12:	2300      	movne	r3, #0
 800ab14:	eba6 0807 	sub.w	r8, r6, r7
 800ab18:	608b      	str	r3, [r1, #8]
 800ab1a:	f1b8 0f00 	cmp.w	r8, #0
 800ab1e:	dd9c      	ble.n	800aa5a <__sflush_r+0x1a>
 800ab20:	6a21      	ldr	r1, [r4, #32]
 800ab22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ab24:	4643      	mov	r3, r8
 800ab26:	463a      	mov	r2, r7
 800ab28:	4628      	mov	r0, r5
 800ab2a:	47b0      	blx	r6
 800ab2c:	2800      	cmp	r0, #0
 800ab2e:	dc06      	bgt.n	800ab3e <__sflush_r+0xfe>
 800ab30:	89a3      	ldrh	r3, [r4, #12]
 800ab32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab36:	81a3      	strh	r3, [r4, #12]
 800ab38:	f04f 30ff 	mov.w	r0, #4294967295
 800ab3c:	e78e      	b.n	800aa5c <__sflush_r+0x1c>
 800ab3e:	4407      	add	r7, r0
 800ab40:	eba8 0800 	sub.w	r8, r8, r0
 800ab44:	e7e9      	b.n	800ab1a <__sflush_r+0xda>
 800ab46:	bf00      	nop
 800ab48:	20400001 	.word	0x20400001

0800ab4c <_fflush_r>:
 800ab4c:	b538      	push	{r3, r4, r5, lr}
 800ab4e:	690b      	ldr	r3, [r1, #16]
 800ab50:	4605      	mov	r5, r0
 800ab52:	460c      	mov	r4, r1
 800ab54:	b913      	cbnz	r3, 800ab5c <_fflush_r+0x10>
 800ab56:	2500      	movs	r5, #0
 800ab58:	4628      	mov	r0, r5
 800ab5a:	bd38      	pop	{r3, r4, r5, pc}
 800ab5c:	b118      	cbz	r0, 800ab66 <_fflush_r+0x1a>
 800ab5e:	6983      	ldr	r3, [r0, #24]
 800ab60:	b90b      	cbnz	r3, 800ab66 <_fflush_r+0x1a>
 800ab62:	f000 f887 	bl	800ac74 <__sinit>
 800ab66:	4b14      	ldr	r3, [pc, #80]	; (800abb8 <_fflush_r+0x6c>)
 800ab68:	429c      	cmp	r4, r3
 800ab6a:	d11b      	bne.n	800aba4 <_fflush_r+0x58>
 800ab6c:	686c      	ldr	r4, [r5, #4]
 800ab6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d0ef      	beq.n	800ab56 <_fflush_r+0xa>
 800ab76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ab78:	07d0      	lsls	r0, r2, #31
 800ab7a:	d404      	bmi.n	800ab86 <_fflush_r+0x3a>
 800ab7c:	0599      	lsls	r1, r3, #22
 800ab7e:	d402      	bmi.n	800ab86 <_fflush_r+0x3a>
 800ab80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab82:	f000 f915 	bl	800adb0 <__retarget_lock_acquire_recursive>
 800ab86:	4628      	mov	r0, r5
 800ab88:	4621      	mov	r1, r4
 800ab8a:	f7ff ff59 	bl	800aa40 <__sflush_r>
 800ab8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab90:	07da      	lsls	r2, r3, #31
 800ab92:	4605      	mov	r5, r0
 800ab94:	d4e0      	bmi.n	800ab58 <_fflush_r+0xc>
 800ab96:	89a3      	ldrh	r3, [r4, #12]
 800ab98:	059b      	lsls	r3, r3, #22
 800ab9a:	d4dd      	bmi.n	800ab58 <_fflush_r+0xc>
 800ab9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab9e:	f000 f908 	bl	800adb2 <__retarget_lock_release_recursive>
 800aba2:	e7d9      	b.n	800ab58 <_fflush_r+0xc>
 800aba4:	4b05      	ldr	r3, [pc, #20]	; (800abbc <_fflush_r+0x70>)
 800aba6:	429c      	cmp	r4, r3
 800aba8:	d101      	bne.n	800abae <_fflush_r+0x62>
 800abaa:	68ac      	ldr	r4, [r5, #8]
 800abac:	e7df      	b.n	800ab6e <_fflush_r+0x22>
 800abae:	4b04      	ldr	r3, [pc, #16]	; (800abc0 <_fflush_r+0x74>)
 800abb0:	429c      	cmp	r4, r3
 800abb2:	bf08      	it	eq
 800abb4:	68ec      	ldreq	r4, [r5, #12]
 800abb6:	e7da      	b.n	800ab6e <_fflush_r+0x22>
 800abb8:	0800b514 	.word	0x0800b514
 800abbc:	0800b534 	.word	0x0800b534
 800abc0:	0800b4f4 	.word	0x0800b4f4

0800abc4 <std>:
 800abc4:	2300      	movs	r3, #0
 800abc6:	b510      	push	{r4, lr}
 800abc8:	4604      	mov	r4, r0
 800abca:	e9c0 3300 	strd	r3, r3, [r0]
 800abce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800abd2:	6083      	str	r3, [r0, #8]
 800abd4:	8181      	strh	r1, [r0, #12]
 800abd6:	6643      	str	r3, [r0, #100]	; 0x64
 800abd8:	81c2      	strh	r2, [r0, #14]
 800abda:	6183      	str	r3, [r0, #24]
 800abdc:	4619      	mov	r1, r3
 800abde:	2208      	movs	r2, #8
 800abe0:	305c      	adds	r0, #92	; 0x5c
 800abe2:	f7fd fb59 	bl	8008298 <memset>
 800abe6:	4b05      	ldr	r3, [pc, #20]	; (800abfc <std+0x38>)
 800abe8:	6263      	str	r3, [r4, #36]	; 0x24
 800abea:	4b05      	ldr	r3, [pc, #20]	; (800ac00 <std+0x3c>)
 800abec:	62a3      	str	r3, [r4, #40]	; 0x28
 800abee:	4b05      	ldr	r3, [pc, #20]	; (800ac04 <std+0x40>)
 800abf0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800abf2:	4b05      	ldr	r3, [pc, #20]	; (800ac08 <std+0x44>)
 800abf4:	6224      	str	r4, [r4, #32]
 800abf6:	6323      	str	r3, [r4, #48]	; 0x30
 800abf8:	bd10      	pop	{r4, pc}
 800abfa:	bf00      	nop
 800abfc:	0800af19 	.word	0x0800af19
 800ac00:	0800af3b 	.word	0x0800af3b
 800ac04:	0800af73 	.word	0x0800af73
 800ac08:	0800af97 	.word	0x0800af97

0800ac0c <_cleanup_r>:
 800ac0c:	4901      	ldr	r1, [pc, #4]	; (800ac14 <_cleanup_r+0x8>)
 800ac0e:	f000 b8af 	b.w	800ad70 <_fwalk_reent>
 800ac12:	bf00      	nop
 800ac14:	0800ab4d 	.word	0x0800ab4d

0800ac18 <__sfmoreglue>:
 800ac18:	b570      	push	{r4, r5, r6, lr}
 800ac1a:	2268      	movs	r2, #104	; 0x68
 800ac1c:	1e4d      	subs	r5, r1, #1
 800ac1e:	4355      	muls	r5, r2
 800ac20:	460e      	mov	r6, r1
 800ac22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ac26:	f7ff fa65 	bl	800a0f4 <_malloc_r>
 800ac2a:	4604      	mov	r4, r0
 800ac2c:	b140      	cbz	r0, 800ac40 <__sfmoreglue+0x28>
 800ac2e:	2100      	movs	r1, #0
 800ac30:	e9c0 1600 	strd	r1, r6, [r0]
 800ac34:	300c      	adds	r0, #12
 800ac36:	60a0      	str	r0, [r4, #8]
 800ac38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ac3c:	f7fd fb2c 	bl	8008298 <memset>
 800ac40:	4620      	mov	r0, r4
 800ac42:	bd70      	pop	{r4, r5, r6, pc}

0800ac44 <__sfp_lock_acquire>:
 800ac44:	4801      	ldr	r0, [pc, #4]	; (800ac4c <__sfp_lock_acquire+0x8>)
 800ac46:	f000 b8b3 	b.w	800adb0 <__retarget_lock_acquire_recursive>
 800ac4a:	bf00      	nop
 800ac4c:	200004b9 	.word	0x200004b9

0800ac50 <__sfp_lock_release>:
 800ac50:	4801      	ldr	r0, [pc, #4]	; (800ac58 <__sfp_lock_release+0x8>)
 800ac52:	f000 b8ae 	b.w	800adb2 <__retarget_lock_release_recursive>
 800ac56:	bf00      	nop
 800ac58:	200004b9 	.word	0x200004b9

0800ac5c <__sinit_lock_acquire>:
 800ac5c:	4801      	ldr	r0, [pc, #4]	; (800ac64 <__sinit_lock_acquire+0x8>)
 800ac5e:	f000 b8a7 	b.w	800adb0 <__retarget_lock_acquire_recursive>
 800ac62:	bf00      	nop
 800ac64:	200004ba 	.word	0x200004ba

0800ac68 <__sinit_lock_release>:
 800ac68:	4801      	ldr	r0, [pc, #4]	; (800ac70 <__sinit_lock_release+0x8>)
 800ac6a:	f000 b8a2 	b.w	800adb2 <__retarget_lock_release_recursive>
 800ac6e:	bf00      	nop
 800ac70:	200004ba 	.word	0x200004ba

0800ac74 <__sinit>:
 800ac74:	b510      	push	{r4, lr}
 800ac76:	4604      	mov	r4, r0
 800ac78:	f7ff fff0 	bl	800ac5c <__sinit_lock_acquire>
 800ac7c:	69a3      	ldr	r3, [r4, #24]
 800ac7e:	b11b      	cbz	r3, 800ac88 <__sinit+0x14>
 800ac80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac84:	f7ff bff0 	b.w	800ac68 <__sinit_lock_release>
 800ac88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ac8c:	6523      	str	r3, [r4, #80]	; 0x50
 800ac8e:	4b13      	ldr	r3, [pc, #76]	; (800acdc <__sinit+0x68>)
 800ac90:	4a13      	ldr	r2, [pc, #76]	; (800ace0 <__sinit+0x6c>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	62a2      	str	r2, [r4, #40]	; 0x28
 800ac96:	42a3      	cmp	r3, r4
 800ac98:	bf04      	itt	eq
 800ac9a:	2301      	moveq	r3, #1
 800ac9c:	61a3      	streq	r3, [r4, #24]
 800ac9e:	4620      	mov	r0, r4
 800aca0:	f000 f820 	bl	800ace4 <__sfp>
 800aca4:	6060      	str	r0, [r4, #4]
 800aca6:	4620      	mov	r0, r4
 800aca8:	f000 f81c 	bl	800ace4 <__sfp>
 800acac:	60a0      	str	r0, [r4, #8]
 800acae:	4620      	mov	r0, r4
 800acb0:	f000 f818 	bl	800ace4 <__sfp>
 800acb4:	2200      	movs	r2, #0
 800acb6:	60e0      	str	r0, [r4, #12]
 800acb8:	2104      	movs	r1, #4
 800acba:	6860      	ldr	r0, [r4, #4]
 800acbc:	f7ff ff82 	bl	800abc4 <std>
 800acc0:	68a0      	ldr	r0, [r4, #8]
 800acc2:	2201      	movs	r2, #1
 800acc4:	2109      	movs	r1, #9
 800acc6:	f7ff ff7d 	bl	800abc4 <std>
 800acca:	68e0      	ldr	r0, [r4, #12]
 800accc:	2202      	movs	r2, #2
 800acce:	2112      	movs	r1, #18
 800acd0:	f7ff ff78 	bl	800abc4 <std>
 800acd4:	2301      	movs	r3, #1
 800acd6:	61a3      	str	r3, [r4, #24]
 800acd8:	e7d2      	b.n	800ac80 <__sinit+0xc>
 800acda:	bf00      	nop
 800acdc:	0800b178 	.word	0x0800b178
 800ace0:	0800ac0d 	.word	0x0800ac0d

0800ace4 <__sfp>:
 800ace4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ace6:	4607      	mov	r7, r0
 800ace8:	f7ff ffac 	bl	800ac44 <__sfp_lock_acquire>
 800acec:	4b1e      	ldr	r3, [pc, #120]	; (800ad68 <__sfp+0x84>)
 800acee:	681e      	ldr	r6, [r3, #0]
 800acf0:	69b3      	ldr	r3, [r6, #24]
 800acf2:	b913      	cbnz	r3, 800acfa <__sfp+0x16>
 800acf4:	4630      	mov	r0, r6
 800acf6:	f7ff ffbd 	bl	800ac74 <__sinit>
 800acfa:	3648      	adds	r6, #72	; 0x48
 800acfc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ad00:	3b01      	subs	r3, #1
 800ad02:	d503      	bpl.n	800ad0c <__sfp+0x28>
 800ad04:	6833      	ldr	r3, [r6, #0]
 800ad06:	b30b      	cbz	r3, 800ad4c <__sfp+0x68>
 800ad08:	6836      	ldr	r6, [r6, #0]
 800ad0a:	e7f7      	b.n	800acfc <__sfp+0x18>
 800ad0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ad10:	b9d5      	cbnz	r5, 800ad48 <__sfp+0x64>
 800ad12:	4b16      	ldr	r3, [pc, #88]	; (800ad6c <__sfp+0x88>)
 800ad14:	60e3      	str	r3, [r4, #12]
 800ad16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ad1a:	6665      	str	r5, [r4, #100]	; 0x64
 800ad1c:	f000 f847 	bl	800adae <__retarget_lock_init_recursive>
 800ad20:	f7ff ff96 	bl	800ac50 <__sfp_lock_release>
 800ad24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ad28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ad2c:	6025      	str	r5, [r4, #0]
 800ad2e:	61a5      	str	r5, [r4, #24]
 800ad30:	2208      	movs	r2, #8
 800ad32:	4629      	mov	r1, r5
 800ad34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ad38:	f7fd faae 	bl	8008298 <memset>
 800ad3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ad40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ad44:	4620      	mov	r0, r4
 800ad46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad48:	3468      	adds	r4, #104	; 0x68
 800ad4a:	e7d9      	b.n	800ad00 <__sfp+0x1c>
 800ad4c:	2104      	movs	r1, #4
 800ad4e:	4638      	mov	r0, r7
 800ad50:	f7ff ff62 	bl	800ac18 <__sfmoreglue>
 800ad54:	4604      	mov	r4, r0
 800ad56:	6030      	str	r0, [r6, #0]
 800ad58:	2800      	cmp	r0, #0
 800ad5a:	d1d5      	bne.n	800ad08 <__sfp+0x24>
 800ad5c:	f7ff ff78 	bl	800ac50 <__sfp_lock_release>
 800ad60:	230c      	movs	r3, #12
 800ad62:	603b      	str	r3, [r7, #0]
 800ad64:	e7ee      	b.n	800ad44 <__sfp+0x60>
 800ad66:	bf00      	nop
 800ad68:	0800b178 	.word	0x0800b178
 800ad6c:	ffff0001 	.word	0xffff0001

0800ad70 <_fwalk_reent>:
 800ad70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad74:	4606      	mov	r6, r0
 800ad76:	4688      	mov	r8, r1
 800ad78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ad7c:	2700      	movs	r7, #0
 800ad7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad82:	f1b9 0901 	subs.w	r9, r9, #1
 800ad86:	d505      	bpl.n	800ad94 <_fwalk_reent+0x24>
 800ad88:	6824      	ldr	r4, [r4, #0]
 800ad8a:	2c00      	cmp	r4, #0
 800ad8c:	d1f7      	bne.n	800ad7e <_fwalk_reent+0xe>
 800ad8e:	4638      	mov	r0, r7
 800ad90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad94:	89ab      	ldrh	r3, [r5, #12]
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	d907      	bls.n	800adaa <_fwalk_reent+0x3a>
 800ad9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad9e:	3301      	adds	r3, #1
 800ada0:	d003      	beq.n	800adaa <_fwalk_reent+0x3a>
 800ada2:	4629      	mov	r1, r5
 800ada4:	4630      	mov	r0, r6
 800ada6:	47c0      	blx	r8
 800ada8:	4307      	orrs	r7, r0
 800adaa:	3568      	adds	r5, #104	; 0x68
 800adac:	e7e9      	b.n	800ad82 <_fwalk_reent+0x12>

0800adae <__retarget_lock_init_recursive>:
 800adae:	4770      	bx	lr

0800adb0 <__retarget_lock_acquire_recursive>:
 800adb0:	4770      	bx	lr

0800adb2 <__retarget_lock_release_recursive>:
 800adb2:	4770      	bx	lr

0800adb4 <__swhatbuf_r>:
 800adb4:	b570      	push	{r4, r5, r6, lr}
 800adb6:	460e      	mov	r6, r1
 800adb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adbc:	2900      	cmp	r1, #0
 800adbe:	b096      	sub	sp, #88	; 0x58
 800adc0:	4614      	mov	r4, r2
 800adc2:	461d      	mov	r5, r3
 800adc4:	da08      	bge.n	800add8 <__swhatbuf_r+0x24>
 800adc6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800adca:	2200      	movs	r2, #0
 800adcc:	602a      	str	r2, [r5, #0]
 800adce:	061a      	lsls	r2, r3, #24
 800add0:	d410      	bmi.n	800adf4 <__swhatbuf_r+0x40>
 800add2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800add6:	e00e      	b.n	800adf6 <__swhatbuf_r+0x42>
 800add8:	466a      	mov	r2, sp
 800adda:	f000 f903 	bl	800afe4 <_fstat_r>
 800adde:	2800      	cmp	r0, #0
 800ade0:	dbf1      	blt.n	800adc6 <__swhatbuf_r+0x12>
 800ade2:	9a01      	ldr	r2, [sp, #4]
 800ade4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ade8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800adec:	425a      	negs	r2, r3
 800adee:	415a      	adcs	r2, r3
 800adf0:	602a      	str	r2, [r5, #0]
 800adf2:	e7ee      	b.n	800add2 <__swhatbuf_r+0x1e>
 800adf4:	2340      	movs	r3, #64	; 0x40
 800adf6:	2000      	movs	r0, #0
 800adf8:	6023      	str	r3, [r4, #0]
 800adfa:	b016      	add	sp, #88	; 0x58
 800adfc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ae00 <__smakebuf_r>:
 800ae00:	898b      	ldrh	r3, [r1, #12]
 800ae02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae04:	079d      	lsls	r5, r3, #30
 800ae06:	4606      	mov	r6, r0
 800ae08:	460c      	mov	r4, r1
 800ae0a:	d507      	bpl.n	800ae1c <__smakebuf_r+0x1c>
 800ae0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ae10:	6023      	str	r3, [r4, #0]
 800ae12:	6123      	str	r3, [r4, #16]
 800ae14:	2301      	movs	r3, #1
 800ae16:	6163      	str	r3, [r4, #20]
 800ae18:	b002      	add	sp, #8
 800ae1a:	bd70      	pop	{r4, r5, r6, pc}
 800ae1c:	ab01      	add	r3, sp, #4
 800ae1e:	466a      	mov	r2, sp
 800ae20:	f7ff ffc8 	bl	800adb4 <__swhatbuf_r>
 800ae24:	9900      	ldr	r1, [sp, #0]
 800ae26:	4605      	mov	r5, r0
 800ae28:	4630      	mov	r0, r6
 800ae2a:	f7ff f963 	bl	800a0f4 <_malloc_r>
 800ae2e:	b948      	cbnz	r0, 800ae44 <__smakebuf_r+0x44>
 800ae30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae34:	059a      	lsls	r2, r3, #22
 800ae36:	d4ef      	bmi.n	800ae18 <__smakebuf_r+0x18>
 800ae38:	f023 0303 	bic.w	r3, r3, #3
 800ae3c:	f043 0302 	orr.w	r3, r3, #2
 800ae40:	81a3      	strh	r3, [r4, #12]
 800ae42:	e7e3      	b.n	800ae0c <__smakebuf_r+0xc>
 800ae44:	4b0d      	ldr	r3, [pc, #52]	; (800ae7c <__smakebuf_r+0x7c>)
 800ae46:	62b3      	str	r3, [r6, #40]	; 0x28
 800ae48:	89a3      	ldrh	r3, [r4, #12]
 800ae4a:	6020      	str	r0, [r4, #0]
 800ae4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae50:	81a3      	strh	r3, [r4, #12]
 800ae52:	9b00      	ldr	r3, [sp, #0]
 800ae54:	6163      	str	r3, [r4, #20]
 800ae56:	9b01      	ldr	r3, [sp, #4]
 800ae58:	6120      	str	r0, [r4, #16]
 800ae5a:	b15b      	cbz	r3, 800ae74 <__smakebuf_r+0x74>
 800ae5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae60:	4630      	mov	r0, r6
 800ae62:	f000 f8d1 	bl	800b008 <_isatty_r>
 800ae66:	b128      	cbz	r0, 800ae74 <__smakebuf_r+0x74>
 800ae68:	89a3      	ldrh	r3, [r4, #12]
 800ae6a:	f023 0303 	bic.w	r3, r3, #3
 800ae6e:	f043 0301 	orr.w	r3, r3, #1
 800ae72:	81a3      	strh	r3, [r4, #12]
 800ae74:	89a0      	ldrh	r0, [r4, #12]
 800ae76:	4305      	orrs	r5, r0
 800ae78:	81a5      	strh	r5, [r4, #12]
 800ae7a:	e7cd      	b.n	800ae18 <__smakebuf_r+0x18>
 800ae7c:	0800ac0d 	.word	0x0800ac0d

0800ae80 <_malloc_usable_size_r>:
 800ae80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae84:	1f18      	subs	r0, r3, #4
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	bfbc      	itt	lt
 800ae8a:	580b      	ldrlt	r3, [r1, r0]
 800ae8c:	18c0      	addlt	r0, r0, r3
 800ae8e:	4770      	bx	lr

0800ae90 <_raise_r>:
 800ae90:	291f      	cmp	r1, #31
 800ae92:	b538      	push	{r3, r4, r5, lr}
 800ae94:	4604      	mov	r4, r0
 800ae96:	460d      	mov	r5, r1
 800ae98:	d904      	bls.n	800aea4 <_raise_r+0x14>
 800ae9a:	2316      	movs	r3, #22
 800ae9c:	6003      	str	r3, [r0, #0]
 800ae9e:	f04f 30ff 	mov.w	r0, #4294967295
 800aea2:	bd38      	pop	{r3, r4, r5, pc}
 800aea4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aea6:	b112      	cbz	r2, 800aeae <_raise_r+0x1e>
 800aea8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aeac:	b94b      	cbnz	r3, 800aec2 <_raise_r+0x32>
 800aeae:	4620      	mov	r0, r4
 800aeb0:	f000 f830 	bl	800af14 <_getpid_r>
 800aeb4:	462a      	mov	r2, r5
 800aeb6:	4601      	mov	r1, r0
 800aeb8:	4620      	mov	r0, r4
 800aeba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aebe:	f000 b817 	b.w	800aef0 <_kill_r>
 800aec2:	2b01      	cmp	r3, #1
 800aec4:	d00a      	beq.n	800aedc <_raise_r+0x4c>
 800aec6:	1c59      	adds	r1, r3, #1
 800aec8:	d103      	bne.n	800aed2 <_raise_r+0x42>
 800aeca:	2316      	movs	r3, #22
 800aecc:	6003      	str	r3, [r0, #0]
 800aece:	2001      	movs	r0, #1
 800aed0:	e7e7      	b.n	800aea2 <_raise_r+0x12>
 800aed2:	2400      	movs	r4, #0
 800aed4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aed8:	4628      	mov	r0, r5
 800aeda:	4798      	blx	r3
 800aedc:	2000      	movs	r0, #0
 800aede:	e7e0      	b.n	800aea2 <_raise_r+0x12>

0800aee0 <raise>:
 800aee0:	4b02      	ldr	r3, [pc, #8]	; (800aeec <raise+0xc>)
 800aee2:	4601      	mov	r1, r0
 800aee4:	6818      	ldr	r0, [r3, #0]
 800aee6:	f7ff bfd3 	b.w	800ae90 <_raise_r>
 800aeea:	bf00      	nop
 800aeec:	2000000c 	.word	0x2000000c

0800aef0 <_kill_r>:
 800aef0:	b538      	push	{r3, r4, r5, lr}
 800aef2:	4d07      	ldr	r5, [pc, #28]	; (800af10 <_kill_r+0x20>)
 800aef4:	2300      	movs	r3, #0
 800aef6:	4604      	mov	r4, r0
 800aef8:	4608      	mov	r0, r1
 800aefa:	4611      	mov	r1, r2
 800aefc:	602b      	str	r3, [r5, #0]
 800aefe:	f7f6 fff1 	bl	8001ee4 <_kill>
 800af02:	1c43      	adds	r3, r0, #1
 800af04:	d102      	bne.n	800af0c <_kill_r+0x1c>
 800af06:	682b      	ldr	r3, [r5, #0]
 800af08:	b103      	cbz	r3, 800af0c <_kill_r+0x1c>
 800af0a:	6023      	str	r3, [r4, #0]
 800af0c:	bd38      	pop	{r3, r4, r5, pc}
 800af0e:	bf00      	nop
 800af10:	200004b4 	.word	0x200004b4

0800af14 <_getpid_r>:
 800af14:	f7f6 bfde 	b.w	8001ed4 <_getpid>

0800af18 <__sread>:
 800af18:	b510      	push	{r4, lr}
 800af1a:	460c      	mov	r4, r1
 800af1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af20:	f000 f894 	bl	800b04c <_read_r>
 800af24:	2800      	cmp	r0, #0
 800af26:	bfab      	itete	ge
 800af28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800af2a:	89a3      	ldrhlt	r3, [r4, #12]
 800af2c:	181b      	addge	r3, r3, r0
 800af2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800af32:	bfac      	ite	ge
 800af34:	6563      	strge	r3, [r4, #84]	; 0x54
 800af36:	81a3      	strhlt	r3, [r4, #12]
 800af38:	bd10      	pop	{r4, pc}

0800af3a <__swrite>:
 800af3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af3e:	461f      	mov	r7, r3
 800af40:	898b      	ldrh	r3, [r1, #12]
 800af42:	05db      	lsls	r3, r3, #23
 800af44:	4605      	mov	r5, r0
 800af46:	460c      	mov	r4, r1
 800af48:	4616      	mov	r6, r2
 800af4a:	d505      	bpl.n	800af58 <__swrite+0x1e>
 800af4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af50:	2302      	movs	r3, #2
 800af52:	2200      	movs	r2, #0
 800af54:	f000 f868 	bl	800b028 <_lseek_r>
 800af58:	89a3      	ldrh	r3, [r4, #12]
 800af5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af62:	81a3      	strh	r3, [r4, #12]
 800af64:	4632      	mov	r2, r6
 800af66:	463b      	mov	r3, r7
 800af68:	4628      	mov	r0, r5
 800af6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af6e:	f000 b817 	b.w	800afa0 <_write_r>

0800af72 <__sseek>:
 800af72:	b510      	push	{r4, lr}
 800af74:	460c      	mov	r4, r1
 800af76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af7a:	f000 f855 	bl	800b028 <_lseek_r>
 800af7e:	1c43      	adds	r3, r0, #1
 800af80:	89a3      	ldrh	r3, [r4, #12]
 800af82:	bf15      	itete	ne
 800af84:	6560      	strne	r0, [r4, #84]	; 0x54
 800af86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800af8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800af8e:	81a3      	strheq	r3, [r4, #12]
 800af90:	bf18      	it	ne
 800af92:	81a3      	strhne	r3, [r4, #12]
 800af94:	bd10      	pop	{r4, pc}

0800af96 <__sclose>:
 800af96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af9a:	f000 b813 	b.w	800afc4 <_close_r>
	...

0800afa0 <_write_r>:
 800afa0:	b538      	push	{r3, r4, r5, lr}
 800afa2:	4d07      	ldr	r5, [pc, #28]	; (800afc0 <_write_r+0x20>)
 800afa4:	4604      	mov	r4, r0
 800afa6:	4608      	mov	r0, r1
 800afa8:	4611      	mov	r1, r2
 800afaa:	2200      	movs	r2, #0
 800afac:	602a      	str	r2, [r5, #0]
 800afae:	461a      	mov	r2, r3
 800afb0:	f7f6 ffcf 	bl	8001f52 <_write>
 800afb4:	1c43      	adds	r3, r0, #1
 800afb6:	d102      	bne.n	800afbe <_write_r+0x1e>
 800afb8:	682b      	ldr	r3, [r5, #0]
 800afba:	b103      	cbz	r3, 800afbe <_write_r+0x1e>
 800afbc:	6023      	str	r3, [r4, #0]
 800afbe:	bd38      	pop	{r3, r4, r5, pc}
 800afc0:	200004b4 	.word	0x200004b4

0800afc4 <_close_r>:
 800afc4:	b538      	push	{r3, r4, r5, lr}
 800afc6:	4d06      	ldr	r5, [pc, #24]	; (800afe0 <_close_r+0x1c>)
 800afc8:	2300      	movs	r3, #0
 800afca:	4604      	mov	r4, r0
 800afcc:	4608      	mov	r0, r1
 800afce:	602b      	str	r3, [r5, #0]
 800afd0:	f7f6 ffdb 	bl	8001f8a <_close>
 800afd4:	1c43      	adds	r3, r0, #1
 800afd6:	d102      	bne.n	800afde <_close_r+0x1a>
 800afd8:	682b      	ldr	r3, [r5, #0]
 800afda:	b103      	cbz	r3, 800afde <_close_r+0x1a>
 800afdc:	6023      	str	r3, [r4, #0]
 800afde:	bd38      	pop	{r3, r4, r5, pc}
 800afe0:	200004b4 	.word	0x200004b4

0800afe4 <_fstat_r>:
 800afe4:	b538      	push	{r3, r4, r5, lr}
 800afe6:	4d07      	ldr	r5, [pc, #28]	; (800b004 <_fstat_r+0x20>)
 800afe8:	2300      	movs	r3, #0
 800afea:	4604      	mov	r4, r0
 800afec:	4608      	mov	r0, r1
 800afee:	4611      	mov	r1, r2
 800aff0:	602b      	str	r3, [r5, #0]
 800aff2:	f7f6 ffd6 	bl	8001fa2 <_fstat>
 800aff6:	1c43      	adds	r3, r0, #1
 800aff8:	d102      	bne.n	800b000 <_fstat_r+0x1c>
 800affa:	682b      	ldr	r3, [r5, #0]
 800affc:	b103      	cbz	r3, 800b000 <_fstat_r+0x1c>
 800affe:	6023      	str	r3, [r4, #0]
 800b000:	bd38      	pop	{r3, r4, r5, pc}
 800b002:	bf00      	nop
 800b004:	200004b4 	.word	0x200004b4

0800b008 <_isatty_r>:
 800b008:	b538      	push	{r3, r4, r5, lr}
 800b00a:	4d06      	ldr	r5, [pc, #24]	; (800b024 <_isatty_r+0x1c>)
 800b00c:	2300      	movs	r3, #0
 800b00e:	4604      	mov	r4, r0
 800b010:	4608      	mov	r0, r1
 800b012:	602b      	str	r3, [r5, #0]
 800b014:	f7f6 ffd5 	bl	8001fc2 <_isatty>
 800b018:	1c43      	adds	r3, r0, #1
 800b01a:	d102      	bne.n	800b022 <_isatty_r+0x1a>
 800b01c:	682b      	ldr	r3, [r5, #0]
 800b01e:	b103      	cbz	r3, 800b022 <_isatty_r+0x1a>
 800b020:	6023      	str	r3, [r4, #0]
 800b022:	bd38      	pop	{r3, r4, r5, pc}
 800b024:	200004b4 	.word	0x200004b4

0800b028 <_lseek_r>:
 800b028:	b538      	push	{r3, r4, r5, lr}
 800b02a:	4d07      	ldr	r5, [pc, #28]	; (800b048 <_lseek_r+0x20>)
 800b02c:	4604      	mov	r4, r0
 800b02e:	4608      	mov	r0, r1
 800b030:	4611      	mov	r1, r2
 800b032:	2200      	movs	r2, #0
 800b034:	602a      	str	r2, [r5, #0]
 800b036:	461a      	mov	r2, r3
 800b038:	f7f6 ffce 	bl	8001fd8 <_lseek>
 800b03c:	1c43      	adds	r3, r0, #1
 800b03e:	d102      	bne.n	800b046 <_lseek_r+0x1e>
 800b040:	682b      	ldr	r3, [r5, #0]
 800b042:	b103      	cbz	r3, 800b046 <_lseek_r+0x1e>
 800b044:	6023      	str	r3, [r4, #0]
 800b046:	bd38      	pop	{r3, r4, r5, pc}
 800b048:	200004b4 	.word	0x200004b4

0800b04c <_read_r>:
 800b04c:	b538      	push	{r3, r4, r5, lr}
 800b04e:	4d07      	ldr	r5, [pc, #28]	; (800b06c <_read_r+0x20>)
 800b050:	4604      	mov	r4, r0
 800b052:	4608      	mov	r0, r1
 800b054:	4611      	mov	r1, r2
 800b056:	2200      	movs	r2, #0
 800b058:	602a      	str	r2, [r5, #0]
 800b05a:	461a      	mov	r2, r3
 800b05c:	f7f6 ff5c 	bl	8001f18 <_read>
 800b060:	1c43      	adds	r3, r0, #1
 800b062:	d102      	bne.n	800b06a <_read_r+0x1e>
 800b064:	682b      	ldr	r3, [r5, #0]
 800b066:	b103      	cbz	r3, 800b06a <_read_r+0x1e>
 800b068:	6023      	str	r3, [r4, #0]
 800b06a:	bd38      	pop	{r3, r4, r5, pc}
 800b06c:	200004b4 	.word	0x200004b4

0800b070 <_init>:
 800b070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b072:	bf00      	nop
 800b074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b076:	bc08      	pop	{r3}
 800b078:	469e      	mov	lr, r3
 800b07a:	4770      	bx	lr

0800b07c <_fini>:
 800b07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b07e:	bf00      	nop
 800b080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b082:	bc08      	pop	{r3}
 800b084:	469e      	mov	lr, r3
 800b086:	4770      	bx	lr
