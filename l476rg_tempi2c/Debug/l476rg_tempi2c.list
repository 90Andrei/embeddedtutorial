
l476rg_tempi2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004768  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080048f8  080048f8  000148f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004990  08004990  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004990  08004990  00014990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004998  08004998  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004998  08004998  00014998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800499c  0800499c  0001499c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080049a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000070  08004a10  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08004a10  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef89  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002163  00000000  00000000  0002f029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c58  00000000  00000000  00031190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b60  00000000  00000000  00031de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026d10  00000000  00000000  00032948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000106b8  00000000  00000000  00059658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eae89  00000000  00000000  00069d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00154b99  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003594  00000000  00000000  00154bec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080048e0 	.word	0x080048e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080048e0 	.word	0x080048e0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08a      	sub	sp, #40	; 0x28
 8000588:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058a:	f107 0314 	add.w	r3, r7, #20
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059a:	4b2b      	ldr	r3, [pc, #172]	; (8000648 <MX_GPIO_Init+0xc4>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059e:	4a2a      	ldr	r2, [pc, #168]	; (8000648 <MX_GPIO_Init+0xc4>)
 80005a0:	f043 0304 	orr.w	r3, r3, #4
 80005a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005a6:	4b28      	ldr	r3, [pc, #160]	; (8000648 <MX_GPIO_Init+0xc4>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005aa:	f003 0304 	and.w	r3, r3, #4
 80005ae:	613b      	str	r3, [r7, #16]
 80005b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005b2:	4b25      	ldr	r3, [pc, #148]	; (8000648 <MX_GPIO_Init+0xc4>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b6:	4a24      	ldr	r2, [pc, #144]	; (8000648 <MX_GPIO_Init+0xc4>)
 80005b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005be:	4b22      	ldr	r3, [pc, #136]	; (8000648 <MX_GPIO_Init+0xc4>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ca:	4b1f      	ldr	r3, [pc, #124]	; (8000648 <MX_GPIO_Init+0xc4>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ce:	4a1e      	ldr	r2, [pc, #120]	; (8000648 <MX_GPIO_Init+0xc4>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005d6:	4b1c      	ldr	r3, [pc, #112]	; (8000648 <MX_GPIO_Init+0xc4>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e2:	4b19      	ldr	r3, [pc, #100]	; (8000648 <MX_GPIO_Init+0xc4>)
 80005e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e6:	4a18      	ldr	r2, [pc, #96]	; (8000648 <MX_GPIO_Init+0xc4>)
 80005e8:	f043 0302 	orr.w	r3, r3, #2
 80005ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ee:	4b16      	ldr	r3, [pc, #88]	; (8000648 <MX_GPIO_Init+0xc4>)
 80005f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f2:	f003 0302 	and.w	r3, r3, #2
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2120      	movs	r1, #32
 80005fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000602:	f000 fec1 	bl	8001388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000606:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800060a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800060c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	2300      	movs	r3, #0
 8000614:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	4619      	mov	r1, r3
 800061c:	480b      	ldr	r0, [pc, #44]	; (800064c <MX_GPIO_Init+0xc8>)
 800061e:	f000 fd09 	bl	8001034 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000622:	2320      	movs	r3, #32
 8000624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000626:	2301      	movs	r3, #1
 8000628:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	2300      	movs	r3, #0
 800062c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062e:	2300      	movs	r3, #0
 8000630:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	4619      	mov	r1, r3
 8000638:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063c:	f000 fcfa 	bl	8001034 <HAL_GPIO_Init>

}
 8000640:	bf00      	nop
 8000642:	3728      	adds	r7, #40	; 0x28
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40021000 	.word	0x40021000
 800064c:	48000800 	.word	0x48000800

08000650 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000654:	4b1b      	ldr	r3, [pc, #108]	; (80006c4 <MX_I2C1_Init+0x74>)
 8000656:	4a1c      	ldr	r2, [pc, #112]	; (80006c8 <MX_I2C1_Init+0x78>)
 8000658:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800065a:	4b1a      	ldr	r3, [pc, #104]	; (80006c4 <MX_I2C1_Init+0x74>)
 800065c:	4a1b      	ldr	r2, [pc, #108]	; (80006cc <MX_I2C1_Init+0x7c>)
 800065e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000660:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <MX_I2C1_Init+0x74>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000666:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <MX_I2C1_Init+0x74>)
 8000668:	2201      	movs	r2, #1
 800066a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800066c:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <MX_I2C1_Init+0x74>)
 800066e:	2200      	movs	r2, #0
 8000670:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000672:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <MX_I2C1_Init+0x74>)
 8000674:	2200      	movs	r2, #0
 8000676:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000678:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <MX_I2C1_Init+0x74>)
 800067a:	2200      	movs	r2, #0
 800067c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <MX_I2C1_Init+0x74>)
 8000680:	2200      	movs	r2, #0
 8000682:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000684:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <MX_I2C1_Init+0x74>)
 8000686:	2200      	movs	r2, #0
 8000688:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800068a:	480e      	ldr	r0, [pc, #56]	; (80006c4 <MX_I2C1_Init+0x74>)
 800068c:	f000 fe94 	bl	80013b8 <HAL_I2C_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000696:	f000 f92e 	bl	80008f6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800069a:	2100      	movs	r1, #0
 800069c:	4809      	ldr	r0, [pc, #36]	; (80006c4 <MX_I2C1_Init+0x74>)
 800069e:	f001 fb7d 	bl	8001d9c <HAL_I2CEx_ConfigAnalogFilter>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006a8:	f000 f925 	bl	80008f6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006ac:	2100      	movs	r1, #0
 80006ae:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_I2C1_Init+0x74>)
 80006b0:	f001 fbbf 	bl	8001e32 <HAL_I2CEx_ConfigDigitalFilter>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006ba:	f000 f91c 	bl	80008f6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	2000008c 	.word	0x2000008c
 80006c8:	40005400 	.word	0x40005400
 80006cc:	10909cec 	.word	0x10909cec

080006d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b0ac      	sub	sp, #176	; 0xb0
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006e8:	f107 0314 	add.w	r3, r7, #20
 80006ec:	2288      	movs	r2, #136	; 0x88
 80006ee:	2100      	movs	r1, #0
 80006f0:	4618      	mov	r0, r3
 80006f2:	f003 fc7f 	bl	8003ff4 <memset>
  if(i2cHandle->Instance==I2C1)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4a21      	ldr	r2, [pc, #132]	; (8000780 <HAL_I2C_MspInit+0xb0>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d13b      	bne.n	8000778 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000700:	2340      	movs	r3, #64	; 0x40
 8000702:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000704:	2300      	movs	r3, #0
 8000706:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000708:	f107 0314 	add.w	r3, r7, #20
 800070c:	4618      	mov	r0, r3
 800070e:	f002 fa41 	bl	8002b94 <HAL_RCCEx_PeriphCLKConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000718:	f000 f8ed 	bl	80008f6 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800071c:	4b19      	ldr	r3, [pc, #100]	; (8000784 <HAL_I2C_MspInit+0xb4>)
 800071e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000720:	4a18      	ldr	r2, [pc, #96]	; (8000784 <HAL_I2C_MspInit+0xb4>)
 8000722:	f043 0302 	orr.w	r3, r3, #2
 8000726:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000728:	4b16      	ldr	r3, [pc, #88]	; (8000784 <HAL_I2C_MspInit+0xb4>)
 800072a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072c:	f003 0302 	and.w	r3, r3, #2
 8000730:	613b      	str	r3, [r7, #16]
 8000732:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000734:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000738:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800073c:	2312      	movs	r3, #18
 800073e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000748:	2303      	movs	r3, #3
 800074a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800074e:	2304      	movs	r3, #4
 8000750:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000754:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000758:	4619      	mov	r1, r3
 800075a:	480b      	ldr	r0, [pc, #44]	; (8000788 <HAL_I2C_MspInit+0xb8>)
 800075c:	f000 fc6a 	bl	8001034 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <HAL_I2C_MspInit+0xb4>)
 8000762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000764:	4a07      	ldr	r2, [pc, #28]	; (8000784 <HAL_I2C_MspInit+0xb4>)
 8000766:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800076a:	6593      	str	r3, [r2, #88]	; 0x58
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <HAL_I2C_MspInit+0xb4>)
 800076e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000770:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000778:	bf00      	nop
 800077a:	37b0      	adds	r7, #176	; 0xb0
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40005400 	.word	0x40005400
 8000784:	40021000 	.word	0x40021000
 8000788:	48000400 	.word	0x48000400

0800078c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800078c:	b590      	push	{r4, r7, lr}
 800078e:	b08b      	sub	sp, #44	; 0x2c
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000792:	f000 fac9 	bl	8000d28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000796:	f000 f85d 	bl	8000854 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800079a:	f7ff fef3 	bl	8000584 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800079e:	f000 fa0d 	bl	8000bbc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80007a2:	f7ff ff55 	bl	8000650 <MX_I2C1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  strcpy((char*)buf,"Error!\r\n");
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	4a26      	ldr	r2, [pc, #152]	; (8000844 <main+0xb8>)
 80007aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80007ac:	c303      	stmia	r3!, {r0, r1}
 80007ae:	701a      	strb	r2, [r3, #0]

  while (1)
  {
	 if(TEMPSENSOR_ReadTempData(&temp) == 0)
 80007b0:	f107 0326 	add.w	r3, r7, #38	; 0x26
 80007b4:	4618      	mov	r0, r3
 80007b6:	f000 f9e1 	bl	8000b7c <TEMPSENSOR_ReadTempData>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d130      	bne.n	8000822 <main+0x96>
	 {
		 sprintf(tempBuffer, "temp:%d.%d\r\n", temp/10, temp%10);
 80007c0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80007c4:	4a20      	ldr	r2, [pc, #128]	; (8000848 <main+0xbc>)
 80007c6:	fb82 1203 	smull	r1, r2, r2, r3
 80007ca:	1092      	asrs	r2, r2, #2
 80007cc:	17db      	asrs	r3, r3, #31
 80007ce:	1ad3      	subs	r3, r2, r3
 80007d0:	b21b      	sxth	r3, r3
 80007d2:	461c      	mov	r4, r3
 80007d4:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80007d8:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <main+0xbc>)
 80007da:	fb83 1302 	smull	r1, r3, r3, r2
 80007de:	1099      	asrs	r1, r3, #2
 80007e0:	17d3      	asrs	r3, r2, #31
 80007e2:	1ac9      	subs	r1, r1, r3
 80007e4:	460b      	mov	r3, r1
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	440b      	add	r3, r1
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	1ad3      	subs	r3, r2, r3
 80007ee:	b21b      	sxth	r3, r3
 80007f0:	f107 0010 	add.w	r0, r7, #16
 80007f4:	4622      	mov	r2, r4
 80007f6:	4915      	ldr	r1, [pc, #84]	; (800084c <main+0xc0>)
 80007f8:	f003 fc04 	bl	8004004 <siprintf>

		 HAL_UART_Transmit(&huart2, (uint8_t *)tempBuffer, strlen(tempBuffer), HAL_MAX_DELAY);
 80007fc:	f107 0310 	add.w	r3, r7, #16
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff fce5 	bl	80001d0 <strlen>
 8000806:	4603      	mov	r3, r0
 8000808:	b29a      	uxth	r2, r3
 800080a:	f107 0110 	add.w	r1, r7, #16
 800080e:	f04f 33ff 	mov.w	r3, #4294967295
 8000812:	480f      	ldr	r0, [pc, #60]	; (8000850 <main+0xc4>)
 8000814:	f002 fec8 	bl	80035a8 <HAL_UART_Transmit>
		 HAL_Delay(500);
 8000818:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800081c:	f000 fb00 	bl	8000e20 <HAL_Delay>
 8000820:	e7c6      	b.n	80007b0 <main+0x24>
	 }
	 else
	 {
		 HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff fcd3 	bl	80001d0 <strlen>
 800082a:	4603      	mov	r3, r0
 800082c:	b29a      	uxth	r2, r3
 800082e:	1d39      	adds	r1, r7, #4
 8000830:	f04f 33ff 	mov.w	r3, #4294967295
 8000834:	4806      	ldr	r0, [pc, #24]	; (8000850 <main+0xc4>)
 8000836:	f002 feb7 	bl	80035a8 <HAL_UART_Transmit>
		 HAL_Delay(500);
 800083a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800083e:	f000 faef 	bl	8000e20 <HAL_Delay>
	 if(TEMPSENSOR_ReadTempData(&temp) == 0)
 8000842:	e7b5      	b.n	80007b0 <main+0x24>
 8000844:	080048f8 	.word	0x080048f8
 8000848:	66666667 	.word	0x66666667
 800084c:	08004904 	.word	0x08004904
 8000850:	200000e4 	.word	0x200000e4

08000854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b096      	sub	sp, #88	; 0x58
 8000858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	2244      	movs	r2, #68	; 0x44
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f003 fbc6 	bl	8003ff4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000868:	463b      	mov	r3, r7
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000876:	f44f 7000 	mov.w	r0, #512	; 0x200
 800087a:	f001 fb35 	bl	8001ee8 <HAL_PWREx_ControlVoltageScaling>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000884:	f000 f837 	bl	80008f6 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000888:	2302      	movs	r3, #2
 800088a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800088c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000890:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000892:	2310      	movs	r3, #16
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000896:	2302      	movs	r3, #2
 8000898:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800089a:	2302      	movs	r3, #2
 800089c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800089e:	2301      	movs	r3, #1
 80008a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80008a2:	230a      	movs	r3, #10
 80008a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008a6:	2307      	movs	r3, #7
 80008a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008aa:	2302      	movs	r3, #2
 80008ac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008ae:	2302      	movs	r3, #2
 80008b0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b2:	f107 0314 	add.w	r3, r7, #20
 80008b6:	4618      	mov	r0, r3
 80008b8:	f001 fb6c 	bl	8001f94 <HAL_RCC_OscConfig>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80008c2:	f000 f818 	bl	80008f6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c6:	230f      	movs	r3, #15
 80008c8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ca:	2303      	movs	r3, #3
 80008cc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ce:	2300      	movs	r3, #0
 80008d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008da:	463b      	mov	r3, r7
 80008dc:	2104      	movs	r1, #4
 80008de:	4618      	mov	r0, r3
 80008e0:	f001 ff34 	bl	800274c <HAL_RCC_ClockConfig>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008ea:	f000 f804 	bl	80008f6 <Error_Handler>
  }
}
 80008ee:	bf00      	nop
 80008f0:	3758      	adds	r7, #88	; 0x58
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008fa:	b672      	cpsid	i
}
 80008fc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008fe:	e7fe      	b.n	80008fe <Error_Handler+0x8>

08000900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000906:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <HAL_MspInit+0x44>)
 8000908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800090a:	4a0e      	ldr	r2, [pc, #56]	; (8000944 <HAL_MspInit+0x44>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	6613      	str	r3, [r2, #96]	; 0x60
 8000912:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <HAL_MspInit+0x44>)
 8000914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <HAL_MspInit+0x44>)
 8000920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000922:	4a08      	ldr	r2, [pc, #32]	; (8000944 <HAL_MspInit+0x44>)
 8000924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000928:	6593      	str	r3, [r2, #88]	; 0x58
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <HAL_MspInit+0x44>)
 800092c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800092e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000936:	bf00      	nop
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	40021000 	.word	0x40021000

08000948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800094c:	e7fe      	b.n	800094c <NMI_Handler+0x4>

0800094e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000952:	e7fe      	b.n	8000952 <HardFault_Handler+0x4>

08000954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <MemManage_Handler+0x4>

0800095a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800095e:	e7fe      	b.n	800095e <BusFault_Handler+0x4>

08000960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <UsageFault_Handler+0x4>

08000966 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr

08000982 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000994:	f000 fa24 	bl	8000de0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}

0800099c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009a4:	4a14      	ldr	r2, [pc, #80]	; (80009f8 <_sbrk+0x5c>)
 80009a6:	4b15      	ldr	r3, [pc, #84]	; (80009fc <_sbrk+0x60>)
 80009a8:	1ad3      	subs	r3, r2, r3
 80009aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009b0:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <_sbrk+0x64>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d102      	bne.n	80009be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009b8:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <_sbrk+0x64>)
 80009ba:	4a12      	ldr	r2, [pc, #72]	; (8000a04 <_sbrk+0x68>)
 80009bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <_sbrk+0x64>)
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4413      	add	r3, r2
 80009c6:	693a      	ldr	r2, [r7, #16]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d207      	bcs.n	80009dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009cc:	f003 fae8 	bl	8003fa0 <__errno>
 80009d0:	4603      	mov	r3, r0
 80009d2:	220c      	movs	r2, #12
 80009d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009d6:	f04f 33ff 	mov.w	r3, #4294967295
 80009da:	e009      	b.n	80009f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <_sbrk+0x64>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009e2:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <_sbrk+0x64>)
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4413      	add	r3, r2
 80009ea:	4a05      	ldr	r2, [pc, #20]	; (8000a00 <_sbrk+0x64>)
 80009ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ee:	68fb      	ldr	r3, [r7, #12]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3718      	adds	r7, #24
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20018000 	.word	0x20018000
 80009fc:	00000400 	.word	0x00000400
 8000a00:	200000e0 	.word	0x200000e0
 8000a04:	20000180 	.word	0x20000180

08000a08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <SystemInit+0x20>)
 8000a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a12:	4a05      	ldr	r2, [pc, #20]	; (8000a28 <SystemInit+0x20>)
 8000a14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <DRIVERUTILS_ConvertHALStatus>:

/* Static Variable Declarations */

/* Static function prototypes */
static int DRIVERUTILS_ConvertHALStatus(HAL_StatusTypeDef HALStatus)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	71fb      	strb	r3, [r7, #7]
    int status = ESUCCESS;
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
    switch (HALStatus)
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	2b03      	cmp	r3, #3
 8000a3e:	d81a      	bhi.n	8000a76 <DRIVERUTILS_ConvertHALStatus+0x4a>
 8000a40:	a201      	add	r2, pc, #4	; (adr r2, 8000a48 <DRIVERUTILS_ConvertHALStatus+0x1c>)
 8000a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a46:	bf00      	nop
 8000a48:	08000a59 	.word	0x08000a59
 8000a4c:	08000a5f 	.word	0x08000a5f
 8000a50:	08000a67 	.word	0x08000a67
 8000a54:	08000a6f 	.word	0x08000a6f
    {
        case HAL_OK:
            status = ESUCCESS;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60fb      	str	r3, [r7, #12]
            break;
 8000a5c:	e00b      	b.n	8000a76 <DRIVERUTILS_ConvertHALStatus+0x4a>
        case HAL_ERROR:
            status = -EIO;
 8000a5e:	f06f 0304 	mvn.w	r3, #4
 8000a62:	60fb      	str	r3, [r7, #12]
            break;
 8000a64:	e007      	b.n	8000a76 <DRIVERUTILS_ConvertHALStatus+0x4a>
        case HAL_BUSY:
            status = -EBUSY;
 8000a66:	f06f 030f 	mvn.w	r3, #15
 8000a6a:	60fb      	str	r3, [r7, #12]
            break;
 8000a6c:	e003      	b.n	8000a76 <DRIVERUTILS_ConvertHALStatus+0x4a>
        case HAL_TIMEOUT:
            status = -ETIMEDOUT;
 8000a6e:	f06f 0373 	mvn.w	r3, #115	; 0x73
 8000a72:	60fb      	str	r3, [r7, #12]
            break;
 8000a74:	bf00      	nop
    }

    return status;
 8000a76:	68fb      	ldr	r3, [r7, #12]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3714      	adds	r7, #20
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <_selectTemperatureRegister>:
 * @brief Selects the Temperature Register for reading by writing the POINTER REGISTER
 *
 * @return status, 0 for success
 */
static int _selectTemperatureRegister(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af02      	add	r7, sp, #8
    // Select the Temperature Register
    uint8_t tempRegisterData = TEMPERATURE_REGISTER_POINTER;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	71bb      	strb	r3, [r7, #6]

    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&TEMP_SENSOR_I2C_HANDLER,
 8000a8e:	1dba      	adds	r2, r7, #6
 8000a90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a94:	9300      	str	r3, [sp, #0]
 8000a96:	2301      	movs	r3, #1
 8000a98:	2190      	movs	r1, #144	; 0x90
 8000a9a:	4807      	ldr	r0, [pc, #28]	; (8000ab8 <_selectTemperatureRegister+0x34>)
 8000a9c:	f000 fd1c 	bl	80014d8 <HAL_I2C_Master_Transmit>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	71fb      	strb	r3, [r7, #7]
            TEMP_SENSOR_I2C_ADDRESS, &tempRegisterData, TEMP_REGISTER_POINTER_SIZE, TEMP_SENSOR_I2C_TIMEOUT_MS);
    return DRIVERUTILS_ConvertHALStatus(status);
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff ffc0 	bl	8000a2c <DRIVERUTILS_ConvertHALStatus>
 8000aac:	4603      	mov	r3, r0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	2000008c 	.word	0x2000008c

08000abc <_readTempData>:
 * @param outputData
 * @param outputSize
 * @return status, 0 for success
 */
static int _readTempData(uint8_t *outputData, uint8_t outputSize)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af02      	add	r7, sp, #8
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	70fb      	strb	r3, [r7, #3]
    assert_param(outputSize == TEMP_DATA_SIZE);

    _selectTemperatureRegister();
 8000ac8:	f7ff ffdc 	bl	8000a84 <_selectTemperatureRegister>

    HAL_StatusTypeDef status = HAL_I2C_Master_Receive(&TEMP_SENSOR_I2C_HANDLER,
 8000acc:	78fb      	ldrb	r3, [r7, #3]
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ad4:	9200      	str	r2, [sp, #0]
 8000ad6:	687a      	ldr	r2, [r7, #4]
 8000ad8:	2190      	movs	r1, #144	; 0x90
 8000ada:	4807      	ldr	r0, [pc, #28]	; (8000af8 <_readTempData+0x3c>)
 8000adc:	f000 fdf0 	bl	80016c0 <HAL_I2C_Master_Receive>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	73fb      	strb	r3, [r7, #15]
            TEMP_SENSOR_I2C_ADDRESS, outputData, outputSize, TEMP_SENSOR_I2C_TIMEOUT_MS);
    return DRIVERUTILS_ConvertHALStatus(status);
 8000ae4:	7bfb      	ldrb	r3, [r7, #15]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff ffa0 	bl	8000a2c <DRIVERUTILS_ConvertHALStatus>
 8000aec:	4603      	mov	r3, r0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	2000008c 	.word	0x2000008c

08000afc <_convertRawTempValue>:
 * @param rawData 2 byte array containing raw data from temperature sensor
 * @param rawDatasize expected data size is 2, if not, an error is raised
 * @return converted temperature in degrees Celsius
 */
static int16_t _convertRawTempValue(const uint8_t *rawData, uint8_t rawDatasize)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	460b      	mov	r3, r1
 8000b06:	70fb      	strb	r3, [r7, #3]
    int16_t tempValue;
    assert_param(rawDatasize == TEMP_DATA_SIZE);

    uint8_t MSByte = rawData[0];
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	737b      	strb	r3, [r7, #13]
    uint8_t LSByte = rawData[1];
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	785b      	ldrb	r3, [r3, #1]
 8000b12:	733b      	strb	r3, [r7, #12]

    tempValue = (MSByte << 8u) + LSByte;
 8000b14:	7b7b      	ldrb	r3, [r7, #13]
 8000b16:	b29b      	uxth	r3, r3
 8000b18:	021b      	lsls	r3, r3, #8
 8000b1a:	b29a      	uxth	r2, r3
 8000b1c:	7b3b      	ldrb	r3, [r7, #12]
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	4413      	add	r3, r2
 8000b22:	b29b      	uxth	r3, r3
 8000b24:	81fb      	strh	r3, [r7, #14]

    // Ignore last 5 bits of LSB
    tempValue = tempValue >> 5u;
 8000b26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b2a:	115b      	asrs	r3, r3, #5
 8000b2c:	81fb      	strh	r3, [r7, #14]

    if (tempValue > 0x3FFu) // temperature value is negative
 8000b2e:	89fb      	ldrh	r3, [r7, #14]
 8000b30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b34:	d30f      	bcc.n	8000b56 <_convertRawTempValue+0x5a>
    {
        // Ignore signed bit
        tempValue &= ~(0x400u);
 8000b36:	89fb      	ldrh	r3, [r7, #14]
 8000b38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000b3c:	81fb      	strh	r3, [r7, #14]

        // Two's complement
        tempValue = (~(tempValue) + 1) * (-1);
        tempValue = (int16_t)(tempValue * 10 / 8); // tempValue * 10 * 125 / 1000 (0.125)
 8000b3e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000b42:	4613      	mov	r3, r2
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	4413      	add	r3, r2
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	da00      	bge.n	8000b50 <_convertRawTempValue+0x54>
 8000b4e:	3307      	adds	r3, #7
 8000b50:	10db      	asrs	r3, r3, #3
 8000b52:	81fb      	strh	r3, [r7, #14]
 8000b54:	e00a      	b.n	8000b6c <_convertRawTempValue+0x70>
    }
    else // temperature value is positive
    {
        tempValue = (int16_t)(tempValue * 10 / 8); // tempValue * 10 * 125 / 1000 (0.125)
 8000b56:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	4413      	add	r3, r2
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	da00      	bge.n	8000b68 <_convertRawTempValue+0x6c>
 8000b66:	3307      	adds	r3, #7
 8000b68:	10db      	asrs	r3, r3, #3
 8000b6a:	81fb      	strh	r3, [r7, #14]
    }

    return tempValue;
 8000b6c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <TEMPSENSOR_ReadTempData>:

    return err;
}

int TEMPSENSOR_ReadTempData(int16_t *outputValue)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
    int err;

    uint8_t rawTempData[TEMP_DATA_SIZE];
    err = _readTempData(rawTempData, ARRAY_LENGTH(rawTempData));
 8000b84:	f107 0308 	add.w	r3, r7, #8
 8000b88:	2102      	movs	r1, #2
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff ff96 	bl	8000abc <_readTempData>
 8000b90:	60f8      	str	r0, [r7, #12]

    if (err != ESUCCESS)
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <TEMPSENSOR_ReadTempData+0x20>
    {
      //  log_msg("TEMPSENSOR_ReadTempData FAILED WITH CODE: %d", err);
        return err;
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	e00a      	b.n	8000bb2 <TEMPSENSOR_ReadTempData+0x36>
    }

    *outputValue = _convertRawTempValue(rawTempData, ARRAY_LENGTH(rawTempData));
 8000b9c:	f107 0308 	add.w	r3, r7, #8
 8000ba0:	2102      	movs	r1, #2
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff ffaa 	bl	8000afc <_convertRawTempValue>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	461a      	mov	r2, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	801a      	strh	r2, [r3, #0]
//    log_msg("Temperature: %d", *outputValue);

    return err;
 8000bb0:	68fb      	ldr	r3, [r7, #12]
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bc0:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <MX_USART2_UART_Init+0x58>)
 8000bc2:	4a15      	ldr	r2, [pc, #84]	; (8000c18 <MX_USART2_UART_Init+0x5c>)
 8000bc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bc6:	4b13      	ldr	r3, [pc, #76]	; (8000c14 <MX_USART2_UART_Init+0x58>)
 8000bc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bcc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <MX_USART2_UART_Init+0x58>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <MX_USART2_UART_Init+0x58>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <MX_USART2_UART_Init+0x58>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <MX_USART2_UART_Init+0x58>)
 8000be2:	220c      	movs	r2, #12
 8000be4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be6:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <MX_USART2_UART_Init+0x58>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bec:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <MX_USART2_UART_Init+0x58>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bf2:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <MX_USART2_UART_Init+0x58>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <MX_USART2_UART_Init+0x58>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bfe:	4805      	ldr	r0, [pc, #20]	; (8000c14 <MX_USART2_UART_Init+0x58>)
 8000c00:	f002 fc84 	bl	800350c <HAL_UART_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c0a:	f7ff fe74 	bl	80008f6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	200000e4 	.word	0x200000e4
 8000c18:	40004400 	.word	0x40004400

08000c1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b0ac      	sub	sp, #176	; 0xb0
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	2288      	movs	r2, #136	; 0x88
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f003 f9d9 	bl	8003ff4 <memset>
  if(uartHandle->Instance==USART2)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a21      	ldr	r2, [pc, #132]	; (8000ccc <HAL_UART_MspInit+0xb0>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d13b      	bne.n	8000cc4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c50:	2300      	movs	r3, #0
 8000c52:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f001 ff9b 	bl	8002b94 <HAL_RCCEx_PeriphCLKConfig>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c64:	f7ff fe47 	bl	80008f6 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c68:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <HAL_UART_MspInit+0xb4>)
 8000c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c6c:	4a18      	ldr	r2, [pc, #96]	; (8000cd0 <HAL_UART_MspInit+0xb4>)
 8000c6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c72:	6593      	str	r3, [r2, #88]	; 0x58
 8000c74:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <HAL_UART_MspInit+0xb4>)
 8000c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c80:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <HAL_UART_MspInit+0xb4>)
 8000c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c84:	4a12      	ldr	r2, [pc, #72]	; (8000cd0 <HAL_UART_MspInit+0xb4>)
 8000c86:	f043 0301 	orr.w	r3, r3, #1
 8000c8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c8c:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <HAL_UART_MspInit+0xb4>)
 8000c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c90:	f003 0301 	and.w	r3, r3, #1
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c98:	230c      	movs	r3, #12
 8000c9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000caa:	2303      	movs	r3, #3
 8000cac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cb0:	2307      	movs	r3, #7
 8000cb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cba:	4619      	mov	r1, r3
 8000cbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc0:	f000 f9b8 	bl	8001034 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000cc4:	bf00      	nop
 8000cc6:	37b0      	adds	r7, #176	; 0xb0
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40004400 	.word	0x40004400
 8000cd0:	40021000 	.word	0x40021000

08000cd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d0c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cd8:	f7ff fe96 	bl	8000a08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cdc:	480c      	ldr	r0, [pc, #48]	; (8000d10 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cde:	490d      	ldr	r1, [pc, #52]	; (8000d14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ce0:	4a0d      	ldr	r2, [pc, #52]	; (8000d18 <LoopForever+0xe>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce4:	e002      	b.n	8000cec <LoopCopyDataInit>

08000ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cea:	3304      	adds	r3, #4

08000cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf0:	d3f9      	bcc.n	8000ce6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cf2:	4a0a      	ldr	r2, [pc, #40]	; (8000d1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cf4:	4c0a      	ldr	r4, [pc, #40]	; (8000d20 <LoopForever+0x16>)
  movs r3, #0
 8000cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf8:	e001      	b.n	8000cfe <LoopFillZerobss>

08000cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cfc:	3204      	adds	r2, #4

08000cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d00:	d3fb      	bcc.n	8000cfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d02:	f003 f953 	bl	8003fac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d06:	f7ff fd41 	bl	800078c <main>

08000d0a <LoopForever>:

LoopForever:
    b LoopForever
 8000d0a:	e7fe      	b.n	8000d0a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d0c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d14:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d18:	080049a0 	.word	0x080049a0
  ldr r2, =_sbss
 8000d1c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d20:	2000017c 	.word	0x2000017c

08000d24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d24:	e7fe      	b.n	8000d24 <ADC1_2_IRQHandler>
	...

08000d28 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d32:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <HAL_Init+0x3c>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a0b      	ldr	r2, [pc, #44]	; (8000d64 <HAL_Init+0x3c>)
 8000d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d3c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d3e:	2003      	movs	r0, #3
 8000d40:	f000 f944 	bl	8000fcc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d44:	2000      	movs	r0, #0
 8000d46:	f000 f80f 	bl	8000d68 <HAL_InitTick>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d002      	beq.n	8000d56 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d50:	2301      	movs	r3, #1
 8000d52:	71fb      	strb	r3, [r7, #7]
 8000d54:	e001      	b.n	8000d5a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d56:	f7ff fdd3 	bl	8000900 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40022000 	.word	0x40022000

08000d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d70:	2300      	movs	r3, #0
 8000d72:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d74:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <HAL_InitTick+0x6c>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d023      	beq.n	8000dc4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d7c:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <HAL_InitTick+0x70>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <HAL_InitTick+0x6c>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	4619      	mov	r1, r3
 8000d86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 f941 	bl	800101a <HAL_SYSTICK_Config>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d10f      	bne.n	8000dbe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2b0f      	cmp	r3, #15
 8000da2:	d809      	bhi.n	8000db8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da4:	2200      	movs	r2, #0
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dac:	f000 f919 	bl	8000fe2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000db0:	4a0a      	ldr	r2, [pc, #40]	; (8000ddc <HAL_InitTick+0x74>)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6013      	str	r3, [r2, #0]
 8000db6:	e007      	b.n	8000dc8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000db8:	2301      	movs	r3, #1
 8000dba:	73fb      	strb	r3, [r7, #15]
 8000dbc:	e004      	b.n	8000dc8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	73fb      	strb	r3, [r7, #15]
 8000dc2:	e001      	b.n	8000dc8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000008 	.word	0x20000008
 8000dd8:	20000000 	.word	0x20000000
 8000ddc:	20000004 	.word	0x20000004

08000de0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_IncTick+0x20>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	461a      	mov	r2, r3
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <HAL_IncTick+0x24>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4413      	add	r3, r2
 8000df0:	4a04      	ldr	r2, [pc, #16]	; (8000e04 <HAL_IncTick+0x24>)
 8000df2:	6013      	str	r3, [r2, #0]
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	20000008 	.word	0x20000008
 8000e04:	20000168 	.word	0x20000168

08000e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e0c:	4b03      	ldr	r3, [pc, #12]	; (8000e1c <HAL_GetTick+0x14>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	20000168 	.word	0x20000168

08000e20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e28:	f7ff ffee 	bl	8000e08 <HAL_GetTick>
 8000e2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e38:	d005      	beq.n	8000e46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e3a:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <HAL_Delay+0x44>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	461a      	mov	r2, r3
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	4413      	add	r3, r2
 8000e44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e46:	bf00      	nop
 8000e48:	f7ff ffde 	bl	8000e08 <HAL_GetTick>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	68fa      	ldr	r2, [r7, #12]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d8f7      	bhi.n	8000e48 <HAL_Delay+0x28>
  {
  }
}
 8000e58:	bf00      	nop
 8000e5a:	bf00      	nop
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000008 	.word	0x20000008

08000e68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e78:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e7e:	68ba      	ldr	r2, [r7, #8]
 8000e80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e84:	4013      	ands	r3, r2
 8000e86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e9a:	4a04      	ldr	r2, [pc, #16]	; (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	60d3      	str	r3, [r2, #12]
}
 8000ea0:	bf00      	nop
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb4:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	0a1b      	lsrs	r3, r3, #8
 8000eba:	f003 0307 	and.w	r3, r3, #7
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	6039      	str	r1, [r7, #0]
 8000ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	db0a      	blt.n	8000ef6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	490c      	ldr	r1, [pc, #48]	; (8000f18 <__NVIC_SetPriority+0x4c>)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	0112      	lsls	r2, r2, #4
 8000eec:	b2d2      	uxtb	r2, r2
 8000eee:	440b      	add	r3, r1
 8000ef0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef4:	e00a      	b.n	8000f0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	4908      	ldr	r1, [pc, #32]	; (8000f1c <__NVIC_SetPriority+0x50>)
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	f003 030f 	and.w	r3, r3, #15
 8000f02:	3b04      	subs	r3, #4
 8000f04:	0112      	lsls	r2, r2, #4
 8000f06:	b2d2      	uxtb	r2, r2
 8000f08:	440b      	add	r3, r1
 8000f0a:	761a      	strb	r2, [r3, #24]
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000e100 	.word	0xe000e100
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	; 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	f1c3 0307 	rsb	r3, r3, #7
 8000f3a:	2b04      	cmp	r3, #4
 8000f3c:	bf28      	it	cs
 8000f3e:	2304      	movcs	r3, #4
 8000f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3304      	adds	r3, #4
 8000f46:	2b06      	cmp	r3, #6
 8000f48:	d902      	bls.n	8000f50 <NVIC_EncodePriority+0x30>
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3b03      	subs	r3, #3
 8000f4e:	e000      	b.n	8000f52 <NVIC_EncodePriority+0x32>
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f54:	f04f 32ff 	mov.w	r2, #4294967295
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43da      	mvns	r2, r3
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	401a      	ands	r2, r3
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f68:	f04f 31ff 	mov.w	r1, #4294967295
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f72:	43d9      	mvns	r1, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f78:	4313      	orrs	r3, r2
         );
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3724      	adds	r7, #36	; 0x24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
	...

08000f88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3b01      	subs	r3, #1
 8000f94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f98:	d301      	bcc.n	8000f9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e00f      	b.n	8000fbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f9e:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <SysTick_Config+0x40>)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fa6:	210f      	movs	r1, #15
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	f7ff ff8e 	bl	8000ecc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <SysTick_Config+0x40>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fb6:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <SysTick_Config+0x40>)
 8000fb8:	2207      	movs	r2, #7
 8000fba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	e000e010 	.word	0xe000e010

08000fcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f7ff ff47 	bl	8000e68 <__NVIC_SetPriorityGrouping>
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b086      	sub	sp, #24
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	4603      	mov	r3, r0
 8000fea:	60b9      	str	r1, [r7, #8]
 8000fec:	607a      	str	r2, [r7, #4]
 8000fee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ff4:	f7ff ff5c 	bl	8000eb0 <__NVIC_GetPriorityGrouping>
 8000ff8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	68b9      	ldr	r1, [r7, #8]
 8000ffe:	6978      	ldr	r0, [r7, #20]
 8001000:	f7ff ff8e 	bl	8000f20 <NVIC_EncodePriority>
 8001004:	4602      	mov	r2, r0
 8001006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800100a:	4611      	mov	r1, r2
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ff5d 	bl	8000ecc <__NVIC_SetPriority>
}
 8001012:	bf00      	nop
 8001014:	3718      	adds	r7, #24
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b082      	sub	sp, #8
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff ffb0 	bl	8000f88 <SysTick_Config>
 8001028:	4603      	mov	r3, r0
}
 800102a:	4618      	mov	r0, r3
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001034:	b480      	push	{r7}
 8001036:	b087      	sub	sp, #28
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001042:	e17f      	b.n	8001344 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	2101      	movs	r1, #1
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	fa01 f303 	lsl.w	r3, r1, r3
 8001050:	4013      	ands	r3, r2
 8001052:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	2b00      	cmp	r3, #0
 8001058:	f000 8171 	beq.w	800133e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 0303 	and.w	r3, r3, #3
 8001064:	2b01      	cmp	r3, #1
 8001066:	d005      	beq.n	8001074 <HAL_GPIO_Init+0x40>
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 0303 	and.w	r3, r3, #3
 8001070:	2b02      	cmp	r3, #2
 8001072:	d130      	bne.n	80010d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	2203      	movs	r2, #3
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4013      	ands	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	68da      	ldr	r2, [r3, #12]
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4313      	orrs	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010aa:	2201      	movs	r2, #1
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	4013      	ands	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	091b      	lsrs	r3, r3, #4
 80010c0:	f003 0201 	and.w	r2, r3, #1
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f003 0303 	and.w	r3, r3, #3
 80010de:	2b03      	cmp	r3, #3
 80010e0:	d118      	bne.n	8001114 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80010e8:	2201      	movs	r2, #1
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	4013      	ands	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	08db      	lsrs	r3, r3, #3
 80010fe:	f003 0201 	and.w	r2, r3, #1
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	4313      	orrs	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 0303 	and.w	r3, r3, #3
 800111c:	2b03      	cmp	r3, #3
 800111e:	d017      	beq.n	8001150 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	2203      	movs	r2, #3
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4013      	ands	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	689a      	ldr	r2, [r3, #8]
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	4313      	orrs	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	2b02      	cmp	r3, #2
 800115a:	d123      	bne.n	80011a4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	08da      	lsrs	r2, r3, #3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3208      	adds	r2, #8
 8001164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001168:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	f003 0307 	and.w	r3, r3, #7
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	220f      	movs	r2, #15
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4013      	ands	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	691a      	ldr	r2, [r3, #16]
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	4313      	orrs	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	08da      	lsrs	r2, r3, #3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	3208      	adds	r2, #8
 800119e:	6939      	ldr	r1, [r7, #16]
 80011a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	2203      	movs	r2, #3
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 0203 	and.w	r2, r3, #3
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f000 80ac 	beq.w	800133e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e6:	4b5f      	ldr	r3, [pc, #380]	; (8001364 <HAL_GPIO_Init+0x330>)
 80011e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ea:	4a5e      	ldr	r2, [pc, #376]	; (8001364 <HAL_GPIO_Init+0x330>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6613      	str	r3, [r2, #96]	; 0x60
 80011f2:	4b5c      	ldr	r3, [pc, #368]	; (8001364 <HAL_GPIO_Init+0x330>)
 80011f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011fe:	4a5a      	ldr	r2, [pc, #360]	; (8001368 <HAL_GPIO_Init+0x334>)
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	089b      	lsrs	r3, r3, #2
 8001204:	3302      	adds	r3, #2
 8001206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800120a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	f003 0303 	and.w	r3, r3, #3
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	220f      	movs	r2, #15
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43db      	mvns	r3, r3
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4013      	ands	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001228:	d025      	beq.n	8001276 <HAL_GPIO_Init+0x242>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a4f      	ldr	r2, [pc, #316]	; (800136c <HAL_GPIO_Init+0x338>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d01f      	beq.n	8001272 <HAL_GPIO_Init+0x23e>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a4e      	ldr	r2, [pc, #312]	; (8001370 <HAL_GPIO_Init+0x33c>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d019      	beq.n	800126e <HAL_GPIO_Init+0x23a>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a4d      	ldr	r2, [pc, #308]	; (8001374 <HAL_GPIO_Init+0x340>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d013      	beq.n	800126a <HAL_GPIO_Init+0x236>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a4c      	ldr	r2, [pc, #304]	; (8001378 <HAL_GPIO_Init+0x344>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d00d      	beq.n	8001266 <HAL_GPIO_Init+0x232>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a4b      	ldr	r2, [pc, #300]	; (800137c <HAL_GPIO_Init+0x348>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d007      	beq.n	8001262 <HAL_GPIO_Init+0x22e>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a4a      	ldr	r2, [pc, #296]	; (8001380 <HAL_GPIO_Init+0x34c>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d101      	bne.n	800125e <HAL_GPIO_Init+0x22a>
 800125a:	2306      	movs	r3, #6
 800125c:	e00c      	b.n	8001278 <HAL_GPIO_Init+0x244>
 800125e:	2307      	movs	r3, #7
 8001260:	e00a      	b.n	8001278 <HAL_GPIO_Init+0x244>
 8001262:	2305      	movs	r3, #5
 8001264:	e008      	b.n	8001278 <HAL_GPIO_Init+0x244>
 8001266:	2304      	movs	r3, #4
 8001268:	e006      	b.n	8001278 <HAL_GPIO_Init+0x244>
 800126a:	2303      	movs	r3, #3
 800126c:	e004      	b.n	8001278 <HAL_GPIO_Init+0x244>
 800126e:	2302      	movs	r3, #2
 8001270:	e002      	b.n	8001278 <HAL_GPIO_Init+0x244>
 8001272:	2301      	movs	r3, #1
 8001274:	e000      	b.n	8001278 <HAL_GPIO_Init+0x244>
 8001276:	2300      	movs	r3, #0
 8001278:	697a      	ldr	r2, [r7, #20]
 800127a:	f002 0203 	and.w	r2, r2, #3
 800127e:	0092      	lsls	r2, r2, #2
 8001280:	4093      	lsls	r3, r2
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4313      	orrs	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001288:	4937      	ldr	r1, [pc, #220]	; (8001368 <HAL_GPIO_Init+0x334>)
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	089b      	lsrs	r3, r3, #2
 800128e:	3302      	adds	r3, #2
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001296:	4b3b      	ldr	r3, [pc, #236]	; (8001384 <HAL_GPIO_Init+0x350>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	43db      	mvns	r3, r3
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	4013      	ands	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012ba:	4a32      	ldr	r2, [pc, #200]	; (8001384 <HAL_GPIO_Init+0x350>)
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012c0:	4b30      	ldr	r3, [pc, #192]	; (8001384 <HAL_GPIO_Init+0x350>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	43db      	mvns	r3, r3
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4013      	ands	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d003      	beq.n	80012e4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012e4:	4a27      	ldr	r2, [pc, #156]	; (8001384 <HAL_GPIO_Init+0x350>)
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012ea:	4b26      	ldr	r3, [pc, #152]	; (8001384 <HAL_GPIO_Init+0x350>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	43db      	mvns	r3, r3
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	4013      	ands	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d003      	beq.n	800130e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	4313      	orrs	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800130e:	4a1d      	ldr	r2, [pc, #116]	; (8001384 <HAL_GPIO_Init+0x350>)
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001314:	4b1b      	ldr	r3, [pc, #108]	; (8001384 <HAL_GPIO_Init+0x350>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	43db      	mvns	r3, r3
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4013      	ands	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d003      	beq.n	8001338 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	4313      	orrs	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001338:	4a12      	ldr	r2, [pc, #72]	; (8001384 <HAL_GPIO_Init+0x350>)
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	3301      	adds	r3, #1
 8001342:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	fa22 f303 	lsr.w	r3, r2, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	f47f ae78 	bne.w	8001044 <HAL_GPIO_Init+0x10>
  }
}
 8001354:	bf00      	nop
 8001356:	bf00      	nop
 8001358:	371c      	adds	r7, #28
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	40021000 	.word	0x40021000
 8001368:	40010000 	.word	0x40010000
 800136c:	48000400 	.word	0x48000400
 8001370:	48000800 	.word	0x48000800
 8001374:	48000c00 	.word	0x48000c00
 8001378:	48001000 	.word	0x48001000
 800137c:	48001400 	.word	0x48001400
 8001380:	48001800 	.word	0x48001800
 8001384:	40010400 	.word	0x40010400

08001388 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	807b      	strh	r3, [r7, #2]
 8001394:	4613      	mov	r3, r2
 8001396:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001398:	787b      	ldrb	r3, [r7, #1]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800139e:	887a      	ldrh	r2, [r7, #2]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013a4:	e002      	b.n	80013ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013a6:	887a      	ldrh	r2, [r7, #2]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d101      	bne.n	80013ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e081      	b.n	80014ce <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d106      	bne.n	80013e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff f976 	bl	80006d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2224      	movs	r2, #36	; 0x24
 80013e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f022 0201 	bic.w	r2, r2, #1
 80013fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685a      	ldr	r2, [r3, #4]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001408:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	689a      	ldr	r2, [r3, #8]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001418:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d107      	bne.n	8001432 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	689a      	ldr	r2, [r3, #8]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	e006      	b.n	8001440 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	689a      	ldr	r2, [r3, #8]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800143e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	2b02      	cmp	r3, #2
 8001446:	d104      	bne.n	8001452 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001450:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	6812      	ldr	r2, [r2, #0]
 800145c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001460:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001464:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	68da      	ldr	r2, [r3, #12]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001474:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	691a      	ldr	r2, [r3, #16]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	430a      	orrs	r2, r1
 800148e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	69d9      	ldr	r1, [r3, #28]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a1a      	ldr	r2, [r3, #32]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	430a      	orrs	r2, r1
 800149e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f042 0201 	orr.w	r2, r2, #1
 80014ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2220      	movs	r2, #32
 80014ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
	...

080014d8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b088      	sub	sp, #32
 80014dc:	af02      	add	r7, sp, #8
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	607a      	str	r2, [r7, #4]
 80014e2:	461a      	mov	r2, r3
 80014e4:	460b      	mov	r3, r1
 80014e6:	817b      	strh	r3, [r7, #10]
 80014e8:	4613      	mov	r3, r2
 80014ea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	2b20      	cmp	r3, #32
 80014f6:	f040 80da 	bne.w	80016ae <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001500:	2b01      	cmp	r3, #1
 8001502:	d101      	bne.n	8001508 <HAL_I2C_Master_Transmit+0x30>
 8001504:	2302      	movs	r3, #2
 8001506:	e0d3      	b.n	80016b0 <HAL_I2C_Master_Transmit+0x1d8>
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2201      	movs	r2, #1
 800150c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001510:	f7ff fc7a 	bl	8000e08 <HAL_GetTick>
 8001514:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	2319      	movs	r3, #25
 800151c:	2201      	movs	r2, #1
 800151e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001522:	68f8      	ldr	r0, [r7, #12]
 8001524:	f000 f9e6 	bl	80018f4 <I2C_WaitOnFlagUntilTimeout>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e0be      	b.n	80016b0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2221      	movs	r2, #33	; 0x21
 8001536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2210      	movs	r2, #16
 800153e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	2200      	movs	r2, #0
 8001546:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	893a      	ldrh	r2, [r7, #8]
 8001552:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2200      	movs	r2, #0
 8001558:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800155e:	b29b      	uxth	r3, r3
 8001560:	2bff      	cmp	r3, #255	; 0xff
 8001562:	d90e      	bls.n	8001582 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	22ff      	movs	r2, #255	; 0xff
 8001568:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800156e:	b2da      	uxtb	r2, r3
 8001570:	8979      	ldrh	r1, [r7, #10]
 8001572:	4b51      	ldr	r3, [pc, #324]	; (80016b8 <HAL_I2C_Master_Transmit+0x1e0>)
 8001574:	9300      	str	r3, [sp, #0]
 8001576:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800157a:	68f8      	ldr	r0, [r7, #12]
 800157c:	f000 fbdc 	bl	8001d38 <I2C_TransferConfig>
 8001580:	e06c      	b.n	800165c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001586:	b29a      	uxth	r2, r3
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001590:	b2da      	uxtb	r2, r3
 8001592:	8979      	ldrh	r1, [r7, #10]
 8001594:	4b48      	ldr	r3, [pc, #288]	; (80016b8 <HAL_I2C_Master_Transmit+0x1e0>)
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800159c:	68f8      	ldr	r0, [r7, #12]
 800159e:	f000 fbcb 	bl	8001d38 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80015a2:	e05b      	b.n	800165c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015a4:	697a      	ldr	r2, [r7, #20]
 80015a6:	6a39      	ldr	r1, [r7, #32]
 80015a8:	68f8      	ldr	r0, [r7, #12]
 80015aa:	f000 f9e3 	bl	8001974 <I2C_WaitOnTXISFlagUntilTimeout>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e07b      	b.n	80016b0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015bc:	781a      	ldrb	r2, [r3, #0]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c8:	1c5a      	adds	r2, r3, #1
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	3b01      	subs	r3, #1
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015e0:	3b01      	subs	r3, #1
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d034      	beq.n	800165c <HAL_I2C_Master_Transmit+0x184>
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d130      	bne.n	800165c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	6a3b      	ldr	r3, [r7, #32]
 8001600:	2200      	movs	r2, #0
 8001602:	2180      	movs	r1, #128	; 0x80
 8001604:	68f8      	ldr	r0, [r7, #12]
 8001606:	f000 f975 	bl	80018f4 <I2C_WaitOnFlagUntilTimeout>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e04d      	b.n	80016b0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001618:	b29b      	uxth	r3, r3
 800161a:	2bff      	cmp	r3, #255	; 0xff
 800161c:	d90e      	bls.n	800163c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	22ff      	movs	r2, #255	; 0xff
 8001622:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001628:	b2da      	uxtb	r2, r3
 800162a:	8979      	ldrh	r1, [r7, #10]
 800162c:	2300      	movs	r3, #0
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001634:	68f8      	ldr	r0, [r7, #12]
 8001636:	f000 fb7f 	bl	8001d38 <I2C_TransferConfig>
 800163a:	e00f      	b.n	800165c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001640:	b29a      	uxth	r2, r3
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800164a:	b2da      	uxtb	r2, r3
 800164c:	8979      	ldrh	r1, [r7, #10]
 800164e:	2300      	movs	r3, #0
 8001650:	9300      	str	r3, [sp, #0]
 8001652:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001656:	68f8      	ldr	r0, [r7, #12]
 8001658:	f000 fb6e 	bl	8001d38 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001660:	b29b      	uxth	r3, r3
 8001662:	2b00      	cmp	r3, #0
 8001664:	d19e      	bne.n	80015a4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001666:	697a      	ldr	r2, [r7, #20]
 8001668:	6a39      	ldr	r1, [r7, #32]
 800166a:	68f8      	ldr	r0, [r7, #12]
 800166c:	f000 f9c2 	bl	80019f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e01a      	b.n	80016b0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2220      	movs	r2, #32
 8001680:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	6859      	ldr	r1, [r3, #4]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <HAL_I2C_Master_Transmit+0x1e4>)
 800168e:	400b      	ands	r3, r1
 8001690:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2220      	movs	r2, #32
 8001696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80016aa:	2300      	movs	r3, #0
 80016ac:	e000      	b.n	80016b0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80016ae:	2302      	movs	r3, #2
  }
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3718      	adds	r7, #24
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	80002000 	.word	0x80002000
 80016bc:	fe00e800 	.word	0xfe00e800

080016c0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b088      	sub	sp, #32
 80016c4:	af02      	add	r7, sp, #8
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	607a      	str	r2, [r7, #4]
 80016ca:	461a      	mov	r2, r3
 80016cc:	460b      	mov	r3, r1
 80016ce:	817b      	strh	r3, [r7, #10]
 80016d0:	4613      	mov	r3, r2
 80016d2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	2b20      	cmp	r3, #32
 80016de:	f040 80db 	bne.w	8001898 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d101      	bne.n	80016f0 <HAL_I2C_Master_Receive+0x30>
 80016ec:	2302      	movs	r3, #2
 80016ee:	e0d4      	b.n	800189a <HAL_I2C_Master_Receive+0x1da>
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016f8:	f7ff fb86 	bl	8000e08 <HAL_GetTick>
 80016fc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	2319      	movs	r3, #25
 8001704:	2201      	movs	r2, #1
 8001706:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800170a:	68f8      	ldr	r0, [r7, #12]
 800170c:	f000 f8f2 	bl	80018f4 <I2C_WaitOnFlagUntilTimeout>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e0bf      	b.n	800189a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2222      	movs	r2, #34	; 0x22
 800171e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2210      	movs	r2, #16
 8001726:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2200      	movs	r2, #0
 800172e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	893a      	ldrh	r2, [r7, #8]
 800173a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2200      	movs	r2, #0
 8001740:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001746:	b29b      	uxth	r3, r3
 8001748:	2bff      	cmp	r3, #255	; 0xff
 800174a:	d90e      	bls.n	800176a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	22ff      	movs	r2, #255	; 0xff
 8001750:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001756:	b2da      	uxtb	r2, r3
 8001758:	8979      	ldrh	r1, [r7, #10]
 800175a:	4b52      	ldr	r3, [pc, #328]	; (80018a4 <HAL_I2C_Master_Receive+0x1e4>)
 800175c:	9300      	str	r3, [sp, #0]
 800175e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f000 fae8 	bl	8001d38 <I2C_TransferConfig>
 8001768:	e06d      	b.n	8001846 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800176e:	b29a      	uxth	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001778:	b2da      	uxtb	r2, r3
 800177a:	8979      	ldrh	r1, [r7, #10]
 800177c:	4b49      	ldr	r3, [pc, #292]	; (80018a4 <HAL_I2C_Master_Receive+0x1e4>)
 800177e:	9300      	str	r3, [sp, #0]
 8001780:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001784:	68f8      	ldr	r0, [r7, #12]
 8001786:	f000 fad7 	bl	8001d38 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800178a:	e05c      	b.n	8001846 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800178c:	697a      	ldr	r2, [r7, #20]
 800178e:	6a39      	ldr	r1, [r7, #32]
 8001790:	68f8      	ldr	r0, [r7, #12]
 8001792:	f000 f96b 	bl	8001a6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e07c      	b.n	800189a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b2:	1c5a      	adds	r2, r3, #1
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017bc:	3b01      	subs	r3, #1
 80017be:	b29a      	uxth	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	3b01      	subs	r3, #1
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d034      	beq.n	8001846 <HAL_I2C_Master_Receive+0x186>
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d130      	bne.n	8001846 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	6a3b      	ldr	r3, [r7, #32]
 80017ea:	2200      	movs	r2, #0
 80017ec:	2180      	movs	r1, #128	; 0x80
 80017ee:	68f8      	ldr	r0, [r7, #12]
 80017f0:	f000 f880 	bl	80018f4 <I2C_WaitOnFlagUntilTimeout>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e04d      	b.n	800189a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001802:	b29b      	uxth	r3, r3
 8001804:	2bff      	cmp	r3, #255	; 0xff
 8001806:	d90e      	bls.n	8001826 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	22ff      	movs	r2, #255	; 0xff
 800180c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001812:	b2da      	uxtb	r2, r3
 8001814:	8979      	ldrh	r1, [r7, #10]
 8001816:	2300      	movs	r3, #0
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800181e:	68f8      	ldr	r0, [r7, #12]
 8001820:	f000 fa8a 	bl	8001d38 <I2C_TransferConfig>
 8001824:	e00f      	b.n	8001846 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800182a:	b29a      	uxth	r2, r3
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001834:	b2da      	uxtb	r2, r3
 8001836:	8979      	ldrh	r1, [r7, #10]
 8001838:	2300      	movs	r3, #0
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001840:	68f8      	ldr	r0, [r7, #12]
 8001842:	f000 fa79 	bl	8001d38 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800184a:	b29b      	uxth	r3, r3
 800184c:	2b00      	cmp	r3, #0
 800184e:	d19d      	bne.n	800178c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001850:	697a      	ldr	r2, [r7, #20]
 8001852:	6a39      	ldr	r1, [r7, #32]
 8001854:	68f8      	ldr	r0, [r7, #12]
 8001856:	f000 f8cd 	bl	80019f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e01a      	b.n	800189a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2220      	movs	r2, #32
 800186a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6859      	ldr	r1, [r3, #4]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <HAL_I2C_Master_Receive+0x1e8>)
 8001878:	400b      	ands	r3, r1
 800187a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2220      	movs	r2, #32
 8001880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2200      	movs	r2, #0
 8001888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2200      	movs	r2, #0
 8001890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001894:	2300      	movs	r3, #0
 8001896:	e000      	b.n	800189a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001898:	2302      	movs	r3, #2
  }
}
 800189a:	4618      	mov	r0, r3
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	80002400 	.word	0x80002400
 80018a8:	fe00e800 	.word	0xfe00e800

080018ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d103      	bne.n	80018ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2200      	movs	r2, #0
 80018c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d007      	beq.n	80018e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	699a      	ldr	r2, [r3, #24]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f042 0201 	orr.w	r2, r2, #1
 80018e6:	619a      	str	r2, [r3, #24]
  }
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	603b      	str	r3, [r7, #0]
 8001900:	4613      	mov	r3, r2
 8001902:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001904:	e022      	b.n	800194c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800190c:	d01e      	beq.n	800194c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800190e:	f7ff fa7b 	bl	8000e08 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	429a      	cmp	r2, r3
 800191c:	d302      	bcc.n	8001924 <I2C_WaitOnFlagUntilTimeout+0x30>
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d113      	bne.n	800194c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001928:	f043 0220 	orr.w	r2, r3, #32
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2220      	movs	r2, #32
 8001934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e00f      	b.n	800196c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	699a      	ldr	r2, [r3, #24]
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	4013      	ands	r3, r2
 8001956:	68ba      	ldr	r2, [r7, #8]
 8001958:	429a      	cmp	r2, r3
 800195a:	bf0c      	ite	eq
 800195c:	2301      	moveq	r3, #1
 800195e:	2300      	movne	r3, #0
 8001960:	b2db      	uxtb	r3, r3
 8001962:	461a      	mov	r2, r3
 8001964:	79fb      	ldrb	r3, [r7, #7]
 8001966:	429a      	cmp	r2, r3
 8001968:	d0cd      	beq.n	8001906 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001980:	e02c      	b.n	80019dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	68b9      	ldr	r1, [r7, #8]
 8001986:	68f8      	ldr	r0, [r7, #12]
 8001988:	f000 f8ea 	bl	8001b60 <I2C_IsErrorOccurred>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e02a      	b.n	80019ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800199c:	d01e      	beq.n	80019dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800199e:	f7ff fa33 	bl	8000e08 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	68ba      	ldr	r2, [r7, #8]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d302      	bcc.n	80019b4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d113      	bne.n	80019dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b8:	f043 0220 	orr.w	r2, r3, #32
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2220      	movs	r2, #32
 80019c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e007      	b.n	80019ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d1cb      	bne.n	8001982 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3710      	adds	r7, #16
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a00:	e028      	b.n	8001a54 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	68b9      	ldr	r1, [r7, #8]
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f000 f8aa 	bl	8001b60 <I2C_IsErrorOccurred>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e026      	b.n	8001a64 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a16:	f7ff f9f7 	bl	8000e08 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	68ba      	ldr	r2, [r7, #8]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d302      	bcc.n	8001a2c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d113      	bne.n	8001a54 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a30:	f043 0220 	orr.w	r2, r3, #32
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2220      	movs	r2, #32
 8001a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e007      	b.n	8001a64 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	f003 0320 	and.w	r3, r3, #32
 8001a5e:	2b20      	cmp	r3, #32
 8001a60:	d1cf      	bne.n	8001a02 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001a78:	e064      	b.n	8001b44 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	68b9      	ldr	r1, [r7, #8]
 8001a7e:	68f8      	ldr	r0, [r7, #12]
 8001a80:	f000 f86e 	bl	8001b60 <I2C_IsErrorOccurred>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e062      	b.n	8001b54 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	f003 0320 	and.w	r3, r3, #32
 8001a98:	2b20      	cmp	r3, #32
 8001a9a:	d138      	bne.n	8001b0e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	f003 0304 	and.w	r3, r3, #4
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	d105      	bne.n	8001ab6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	e04e      	b.n	8001b54 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	f003 0310 	and.w	r3, r3, #16
 8001ac0:	2b10      	cmp	r3, #16
 8001ac2:	d107      	bne.n	8001ad4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2210      	movs	r2, #16
 8001aca:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2204      	movs	r2, #4
 8001ad0:	645a      	str	r2, [r3, #68]	; 0x44
 8001ad2:	e002      	b.n	8001ada <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2220      	movs	r2, #32
 8001ae0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6859      	ldr	r1, [r3, #4]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	4b1b      	ldr	r3, [pc, #108]	; (8001b5c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8001aee:	400b      	ands	r3, r1
 8001af0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2220      	movs	r2, #32
 8001af6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e022      	b.n	8001b54 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b0e:	f7ff f97b 	bl	8000e08 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	68ba      	ldr	r2, [r7, #8]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d302      	bcc.n	8001b24 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d10f      	bne.n	8001b44 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b28:	f043 0220 	orr.w	r2, r3, #32
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2220      	movs	r2, #32
 8001b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e007      	b.n	8001b54 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	f003 0304 	and.w	r3, r3, #4
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	d193      	bne.n	8001a7a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	fe00e800 	.word	0xfe00e800

08001b60 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08a      	sub	sp, #40	; 0x28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	f003 0310 	and.w	r3, r3, #16
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d075      	beq.n	8001c78 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2210      	movs	r2, #16
 8001b92:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001b94:	e056      	b.n	8001c44 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b9c:	d052      	beq.n	8001c44 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001b9e:	f7ff f933 	bl	8000e08 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	68ba      	ldr	r2, [r7, #8]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d302      	bcc.n	8001bb4 <I2C_IsErrorOccurred+0x54>
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d147      	bne.n	8001c44 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bbe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001bc6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bd6:	d12e      	bne.n	8001c36 <I2C_IsErrorOccurred+0xd6>
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001bde:	d02a      	beq.n	8001c36 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001be0:	7cfb      	ldrb	r3, [r7, #19]
 8001be2:	2b20      	cmp	r3, #32
 8001be4:	d027      	beq.n	8001c36 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	685a      	ldr	r2, [r3, #4]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bf4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001bf6:	f7ff f907 	bl	8000e08 <HAL_GetTick>
 8001bfa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bfc:	e01b      	b.n	8001c36 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001bfe:	f7ff f903 	bl	8000e08 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b19      	cmp	r3, #25
 8001c0a:	d914      	bls.n	8001c36 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c10:	f043 0220 	orr.w	r2, r3, #32
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2220      	movs	r2, #32
 8001c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	f003 0320 	and.w	r3, r3, #32
 8001c40:	2b20      	cmp	r3, #32
 8001c42:	d1dc      	bne.n	8001bfe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	f003 0320 	and.w	r3, r3, #32
 8001c4e:	2b20      	cmp	r3, #32
 8001c50:	d003      	beq.n	8001c5a <I2C_IsErrorOccurred+0xfa>
 8001c52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d09d      	beq.n	8001b96 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001c5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d103      	bne.n	8001c6a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2220      	movs	r2, #32
 8001c68:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001c6a:	6a3b      	ldr	r3, [r7, #32]
 8001c6c:	f043 0304 	orr.w	r3, r3, #4
 8001c70:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d00b      	beq.n	8001ca2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001c8a:	6a3b      	ldr	r3, [r7, #32]
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c9a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d00b      	beq.n	8001cc4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001cac:	6a3b      	ldr	r3, [r7, #32]
 8001cae:	f043 0308 	orr.w	r3, r3, #8
 8001cb2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cbc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d00b      	beq.n	8001ce6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001cce:	6a3b      	ldr	r3, [r7, #32]
 8001cd0:	f043 0302 	orr.w	r3, r3, #2
 8001cd4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cde:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001ce6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d01c      	beq.n	8001d28 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f7ff fddc 	bl	80018ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6859      	ldr	r1, [r3, #4]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	4b0d      	ldr	r3, [pc, #52]	; (8001d34 <I2C_IsErrorOccurred+0x1d4>)
 8001d00:	400b      	ands	r3, r1
 8001d02:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d08:	6a3b      	ldr	r3, [r7, #32]
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2220      	movs	r2, #32
 8001d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001d28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3728      	adds	r7, #40	; 0x28
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	fe00e800 	.word	0xfe00e800

08001d38 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b087      	sub	sp, #28
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	607b      	str	r3, [r7, #4]
 8001d42:	460b      	mov	r3, r1
 8001d44:	817b      	strh	r3, [r7, #10]
 8001d46:	4613      	mov	r3, r2
 8001d48:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d4a:	897b      	ldrh	r3, [r7, #10]
 8001d4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001d50:	7a7b      	ldrb	r3, [r7, #9]
 8001d52:	041b      	lsls	r3, r3, #16
 8001d54:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d58:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d5e:	6a3b      	ldr	r3, [r7, #32]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d66:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	685a      	ldr	r2, [r3, #4]
 8001d6e:	6a3b      	ldr	r3, [r7, #32]
 8001d70:	0d5b      	lsrs	r3, r3, #21
 8001d72:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001d76:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <I2C_TransferConfig+0x60>)
 8001d78:	430b      	orrs	r3, r1
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	ea02 0103 	and.w	r1, r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	430a      	orrs	r2, r1
 8001d88:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001d8a:	bf00      	nop
 8001d8c:	371c      	adds	r7, #28
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	03ff63ff 	.word	0x03ff63ff

08001d9c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b20      	cmp	r3, #32
 8001db0:	d138      	bne.n	8001e24 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d101      	bne.n	8001dc0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	e032      	b.n	8001e26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2224      	movs	r2, #36	; 0x24
 8001dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0201 	bic.w	r2, r2, #1
 8001dde:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001dee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6819      	ldr	r1, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	683a      	ldr	r2, [r7, #0]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f042 0201 	orr.w	r2, r2, #1
 8001e0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2220      	movs	r2, #32
 8001e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e20:	2300      	movs	r3, #0
 8001e22:	e000      	b.n	8001e26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e24:	2302      	movs	r3, #2
  }
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b085      	sub	sp, #20
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
 8001e3a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b20      	cmp	r3, #32
 8001e46:	d139      	bne.n	8001ebc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d101      	bne.n	8001e56 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e52:	2302      	movs	r3, #2
 8001e54:	e033      	b.n	8001ebe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2224      	movs	r2, #36	; 0x24
 8001e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 0201 	bic.w	r2, r2, #1
 8001e74:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e84:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	021b      	lsls	r3, r3, #8
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0201 	orr.w	r2, r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2220      	movs	r2, #32
 8001eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	e000      	b.n	8001ebe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001ebc:	2302      	movs	r3, #2
  }
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
	...

08001ecc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ed0:	4b04      	ldr	r3, [pc, #16]	; (8001ee4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	40007000 	.word	0x40007000

08001ee8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ef6:	d130      	bne.n	8001f5a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ef8:	4b23      	ldr	r3, [pc, #140]	; (8001f88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f04:	d038      	beq.n	8001f78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f06:	4b20      	ldr	r3, [pc, #128]	; (8001f88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f0e:	4a1e      	ldr	r2, [pc, #120]	; (8001f88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f14:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f16:	4b1d      	ldr	r3, [pc, #116]	; (8001f8c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2232      	movs	r2, #50	; 0x32
 8001f1c:	fb02 f303 	mul.w	r3, r2, r3
 8001f20:	4a1b      	ldr	r2, [pc, #108]	; (8001f90 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f22:	fba2 2303 	umull	r2, r3, r2, r3
 8001f26:	0c9b      	lsrs	r3, r3, #18
 8001f28:	3301      	adds	r3, #1
 8001f2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f2c:	e002      	b.n	8001f34 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	3b01      	subs	r3, #1
 8001f32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f34:	4b14      	ldr	r3, [pc, #80]	; (8001f88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f36:	695b      	ldr	r3, [r3, #20]
 8001f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f40:	d102      	bne.n	8001f48 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1f2      	bne.n	8001f2e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f48:	4b0f      	ldr	r3, [pc, #60]	; (8001f88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f4a:	695b      	ldr	r3, [r3, #20]
 8001f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f54:	d110      	bne.n	8001f78 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e00f      	b.n	8001f7a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f5a:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f66:	d007      	beq.n	8001f78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f68:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f70:	4a05      	ldr	r2, [pc, #20]	; (8001f88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f76:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3714      	adds	r7, #20
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	40007000 	.word	0x40007000
 8001f8c:	20000000 	.word	0x20000000
 8001f90:	431bde83 	.word	0x431bde83

08001f94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b088      	sub	sp, #32
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e3ca      	b.n	800273c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fa6:	4b97      	ldr	r3, [pc, #604]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 030c 	and.w	r3, r3, #12
 8001fae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fb0:	4b94      	ldr	r3, [pc, #592]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	f003 0303 	and.w	r3, r3, #3
 8001fb8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0310 	and.w	r3, r3, #16
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 80e4 	beq.w	8002190 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d007      	beq.n	8001fde <HAL_RCC_OscConfig+0x4a>
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	2b0c      	cmp	r3, #12
 8001fd2:	f040 808b 	bne.w	80020ec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	f040 8087 	bne.w	80020ec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fde:	4b89      	ldr	r3, [pc, #548]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d005      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x62>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e3a2      	b.n	800273c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a1a      	ldr	r2, [r3, #32]
 8001ffa:	4b82      	ldr	r3, [pc, #520]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0308 	and.w	r3, r3, #8
 8002002:	2b00      	cmp	r3, #0
 8002004:	d004      	beq.n	8002010 <HAL_RCC_OscConfig+0x7c>
 8002006:	4b7f      	ldr	r3, [pc, #508]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800200e:	e005      	b.n	800201c <HAL_RCC_OscConfig+0x88>
 8002010:	4b7c      	ldr	r3, [pc, #496]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8002012:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002016:	091b      	lsrs	r3, r3, #4
 8002018:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800201c:	4293      	cmp	r3, r2
 800201e:	d223      	bcs.n	8002068 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a1b      	ldr	r3, [r3, #32]
 8002024:	4618      	mov	r0, r3
 8002026:	f000 fd55 	bl	8002ad4 <RCC_SetFlashLatencyFromMSIRange>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e383      	b.n	800273c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002034:	4b73      	ldr	r3, [pc, #460]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a72      	ldr	r2, [pc, #456]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 800203a:	f043 0308 	orr.w	r3, r3, #8
 800203e:	6013      	str	r3, [r2, #0]
 8002040:	4b70      	ldr	r3, [pc, #448]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	496d      	ldr	r1, [pc, #436]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 800204e:	4313      	orrs	r3, r2
 8002050:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002052:	4b6c      	ldr	r3, [pc, #432]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	021b      	lsls	r3, r3, #8
 8002060:	4968      	ldr	r1, [pc, #416]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8002062:	4313      	orrs	r3, r2
 8002064:	604b      	str	r3, [r1, #4]
 8002066:	e025      	b.n	80020b4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002068:	4b66      	ldr	r3, [pc, #408]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a65      	ldr	r2, [pc, #404]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 800206e:	f043 0308 	orr.w	r3, r3, #8
 8002072:	6013      	str	r3, [r2, #0]
 8002074:	4b63      	ldr	r3, [pc, #396]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	4960      	ldr	r1, [pc, #384]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8002082:	4313      	orrs	r3, r2
 8002084:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002086:	4b5f      	ldr	r3, [pc, #380]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	021b      	lsls	r3, r3, #8
 8002094:	495b      	ldr	r1, [pc, #364]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8002096:	4313      	orrs	r3, r2
 8002098:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d109      	bne.n	80020b4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f000 fd15 	bl	8002ad4 <RCC_SetFlashLatencyFromMSIRange>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e343      	b.n	800273c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020b4:	f000 fc4a 	bl	800294c <HAL_RCC_GetSysClockFreq>
 80020b8:	4602      	mov	r2, r0
 80020ba:	4b52      	ldr	r3, [pc, #328]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	091b      	lsrs	r3, r3, #4
 80020c0:	f003 030f 	and.w	r3, r3, #15
 80020c4:	4950      	ldr	r1, [pc, #320]	; (8002208 <HAL_RCC_OscConfig+0x274>)
 80020c6:	5ccb      	ldrb	r3, [r1, r3]
 80020c8:	f003 031f 	and.w	r3, r3, #31
 80020cc:	fa22 f303 	lsr.w	r3, r2, r3
 80020d0:	4a4e      	ldr	r2, [pc, #312]	; (800220c <HAL_RCC_OscConfig+0x278>)
 80020d2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80020d4:	4b4e      	ldr	r3, [pc, #312]	; (8002210 <HAL_RCC_OscConfig+0x27c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4618      	mov	r0, r3
 80020da:	f7fe fe45 	bl	8000d68 <HAL_InitTick>
 80020de:	4603      	mov	r3, r0
 80020e0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80020e2:	7bfb      	ldrb	r3, [r7, #15]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d052      	beq.n	800218e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80020e8:	7bfb      	ldrb	r3, [r7, #15]
 80020ea:	e327      	b.n	800273c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d032      	beq.n	800215a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80020f4:	4b43      	ldr	r3, [pc, #268]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a42      	ldr	r2, [pc, #264]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 80020fa:	f043 0301 	orr.w	r3, r3, #1
 80020fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002100:	f7fe fe82 	bl	8000e08 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002108:	f7fe fe7e 	bl	8000e08 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e310      	b.n	800273c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800211a:	4b3a      	ldr	r3, [pc, #232]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0f0      	beq.n	8002108 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002126:	4b37      	ldr	r3, [pc, #220]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a36      	ldr	r2, [pc, #216]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 800212c:	f043 0308 	orr.w	r3, r3, #8
 8002130:	6013      	str	r3, [r2, #0]
 8002132:	4b34      	ldr	r3, [pc, #208]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	4931      	ldr	r1, [pc, #196]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8002140:	4313      	orrs	r3, r2
 8002142:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002144:	4b2f      	ldr	r3, [pc, #188]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	69db      	ldr	r3, [r3, #28]
 8002150:	021b      	lsls	r3, r3, #8
 8002152:	492c      	ldr	r1, [pc, #176]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8002154:	4313      	orrs	r3, r2
 8002156:	604b      	str	r3, [r1, #4]
 8002158:	e01a      	b.n	8002190 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800215a:	4b2a      	ldr	r3, [pc, #168]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a29      	ldr	r2, [pc, #164]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8002160:	f023 0301 	bic.w	r3, r3, #1
 8002164:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002166:	f7fe fe4f 	bl	8000e08 <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800216e:	f7fe fe4b 	bl	8000e08 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e2dd      	b.n	800273c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002180:	4b20      	ldr	r3, [pc, #128]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1f0      	bne.n	800216e <HAL_RCC_OscConfig+0x1da>
 800218c:	e000      	b.n	8002190 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800218e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b00      	cmp	r3, #0
 800219a:	d074      	beq.n	8002286 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	2b08      	cmp	r3, #8
 80021a0:	d005      	beq.n	80021ae <HAL_RCC_OscConfig+0x21a>
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	2b0c      	cmp	r3, #12
 80021a6:	d10e      	bne.n	80021c6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	2b03      	cmp	r3, #3
 80021ac:	d10b      	bne.n	80021c6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ae:	4b15      	ldr	r3, [pc, #84]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d064      	beq.n	8002284 <HAL_RCC_OscConfig+0x2f0>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d160      	bne.n	8002284 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e2ba      	b.n	800273c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ce:	d106      	bne.n	80021de <HAL_RCC_OscConfig+0x24a>
 80021d0:	4b0c      	ldr	r3, [pc, #48]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a0b      	ldr	r2, [pc, #44]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 80021d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021da:	6013      	str	r3, [r2, #0]
 80021dc:	e026      	b.n	800222c <HAL_RCC_OscConfig+0x298>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021e6:	d115      	bne.n	8002214 <HAL_RCC_OscConfig+0x280>
 80021e8:	4b06      	ldr	r3, [pc, #24]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a05      	ldr	r2, [pc, #20]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 80021ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021f2:	6013      	str	r3, [r2, #0]
 80021f4:	4b03      	ldr	r3, [pc, #12]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a02      	ldr	r2, [pc, #8]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 80021fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021fe:	6013      	str	r3, [r2, #0]
 8002200:	e014      	b.n	800222c <HAL_RCC_OscConfig+0x298>
 8002202:	bf00      	nop
 8002204:	40021000 	.word	0x40021000
 8002208:	08004914 	.word	0x08004914
 800220c:	20000000 	.word	0x20000000
 8002210:	20000004 	.word	0x20000004
 8002214:	4ba0      	ldr	r3, [pc, #640]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a9f      	ldr	r2, [pc, #636]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 800221a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800221e:	6013      	str	r3, [r2, #0]
 8002220:	4b9d      	ldr	r3, [pc, #628]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a9c      	ldr	r2, [pc, #624]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 8002226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800222a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d013      	beq.n	800225c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002234:	f7fe fde8 	bl	8000e08 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800223c:	f7fe fde4 	bl	8000e08 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b64      	cmp	r3, #100	; 0x64
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e276      	b.n	800273c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800224e:	4b92      	ldr	r3, [pc, #584]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0f0      	beq.n	800223c <HAL_RCC_OscConfig+0x2a8>
 800225a:	e014      	b.n	8002286 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225c:	f7fe fdd4 	bl	8000e08 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002264:	f7fe fdd0 	bl	8000e08 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b64      	cmp	r3, #100	; 0x64
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e262      	b.n	800273c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002276:	4b88      	ldr	r3, [pc, #544]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f0      	bne.n	8002264 <HAL_RCC_OscConfig+0x2d0>
 8002282:	e000      	b.n	8002286 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002284:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d060      	beq.n	8002354 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	2b04      	cmp	r3, #4
 8002296:	d005      	beq.n	80022a4 <HAL_RCC_OscConfig+0x310>
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	2b0c      	cmp	r3, #12
 800229c:	d119      	bne.n	80022d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d116      	bne.n	80022d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022a4:	4b7c      	ldr	r3, [pc, #496]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d005      	beq.n	80022bc <HAL_RCC_OscConfig+0x328>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e23f      	b.n	800273c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022bc:	4b76      	ldr	r3, [pc, #472]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	061b      	lsls	r3, r3, #24
 80022ca:	4973      	ldr	r1, [pc, #460]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022d0:	e040      	b.n	8002354 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d023      	beq.n	8002322 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022da:	4b6f      	ldr	r3, [pc, #444]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a6e      	ldr	r2, [pc, #440]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 80022e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e6:	f7fe fd8f 	bl	8000e08 <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ee:	f7fe fd8b 	bl	8000e08 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e21d      	b.n	800273c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002300:	4b65      	ldr	r3, [pc, #404]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0f0      	beq.n	80022ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800230c:	4b62      	ldr	r3, [pc, #392]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	061b      	lsls	r3, r3, #24
 800231a:	495f      	ldr	r1, [pc, #380]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 800231c:	4313      	orrs	r3, r2
 800231e:	604b      	str	r3, [r1, #4]
 8002320:	e018      	b.n	8002354 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002322:	4b5d      	ldr	r3, [pc, #372]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a5c      	ldr	r2, [pc, #368]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 8002328:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800232c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232e:	f7fe fd6b 	bl	8000e08 <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002334:	e008      	b.n	8002348 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002336:	f7fe fd67 	bl	8000e08 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e1f9      	b.n	800273c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002348:	4b53      	ldr	r3, [pc, #332]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1f0      	bne.n	8002336 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0308 	and.w	r3, r3, #8
 800235c:	2b00      	cmp	r3, #0
 800235e:	d03c      	beq.n	80023da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d01c      	beq.n	80023a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002368:	4b4b      	ldr	r3, [pc, #300]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 800236a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800236e:	4a4a      	ldr	r2, [pc, #296]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002378:	f7fe fd46 	bl	8000e08 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002380:	f7fe fd42 	bl	8000e08 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e1d4      	b.n	800273c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002392:	4b41      	ldr	r3, [pc, #260]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 8002394:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0ef      	beq.n	8002380 <HAL_RCC_OscConfig+0x3ec>
 80023a0:	e01b      	b.n	80023da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023a2:	4b3d      	ldr	r3, [pc, #244]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 80023a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023a8:	4a3b      	ldr	r2, [pc, #236]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 80023aa:	f023 0301 	bic.w	r3, r3, #1
 80023ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b2:	f7fe fd29 	bl	8000e08 <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ba:	f7fe fd25 	bl	8000e08 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e1b7      	b.n	800273c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023cc:	4b32      	ldr	r3, [pc, #200]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 80023ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1ef      	bne.n	80023ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0304 	and.w	r3, r3, #4
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f000 80a6 	beq.w	8002534 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023e8:	2300      	movs	r3, #0
 80023ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80023ec:	4b2a      	ldr	r3, [pc, #168]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 80023ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d10d      	bne.n	8002414 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023f8:	4b27      	ldr	r3, [pc, #156]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 80023fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fc:	4a26      	ldr	r2, [pc, #152]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 80023fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002402:	6593      	str	r3, [r2, #88]	; 0x58
 8002404:	4b24      	ldr	r3, [pc, #144]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 8002406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240c:	60bb      	str	r3, [r7, #8]
 800240e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002410:	2301      	movs	r3, #1
 8002412:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002414:	4b21      	ldr	r3, [pc, #132]	; (800249c <HAL_RCC_OscConfig+0x508>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241c:	2b00      	cmp	r3, #0
 800241e:	d118      	bne.n	8002452 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002420:	4b1e      	ldr	r3, [pc, #120]	; (800249c <HAL_RCC_OscConfig+0x508>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a1d      	ldr	r2, [pc, #116]	; (800249c <HAL_RCC_OscConfig+0x508>)
 8002426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800242a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800242c:	f7fe fcec 	bl	8000e08 <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002434:	f7fe fce8 	bl	8000e08 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e17a      	b.n	800273c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002446:	4b15      	ldr	r3, [pc, #84]	; (800249c <HAL_RCC_OscConfig+0x508>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0f0      	beq.n	8002434 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d108      	bne.n	800246c <HAL_RCC_OscConfig+0x4d8>
 800245a:	4b0f      	ldr	r3, [pc, #60]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 800245c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002460:	4a0d      	ldr	r2, [pc, #52]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 8002462:	f043 0301 	orr.w	r3, r3, #1
 8002466:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800246a:	e029      	b.n	80024c0 <HAL_RCC_OscConfig+0x52c>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	2b05      	cmp	r3, #5
 8002472:	d115      	bne.n	80024a0 <HAL_RCC_OscConfig+0x50c>
 8002474:	4b08      	ldr	r3, [pc, #32]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 8002476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800247a:	4a07      	ldr	r2, [pc, #28]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 800247c:	f043 0304 	orr.w	r3, r3, #4
 8002480:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002484:	4b04      	ldr	r3, [pc, #16]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 8002486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800248a:	4a03      	ldr	r2, [pc, #12]	; (8002498 <HAL_RCC_OscConfig+0x504>)
 800248c:	f043 0301 	orr.w	r3, r3, #1
 8002490:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002494:	e014      	b.n	80024c0 <HAL_RCC_OscConfig+0x52c>
 8002496:	bf00      	nop
 8002498:	40021000 	.word	0x40021000
 800249c:	40007000 	.word	0x40007000
 80024a0:	4b9c      	ldr	r3, [pc, #624]	; (8002714 <HAL_RCC_OscConfig+0x780>)
 80024a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a6:	4a9b      	ldr	r2, [pc, #620]	; (8002714 <HAL_RCC_OscConfig+0x780>)
 80024a8:	f023 0301 	bic.w	r3, r3, #1
 80024ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024b0:	4b98      	ldr	r3, [pc, #608]	; (8002714 <HAL_RCC_OscConfig+0x780>)
 80024b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b6:	4a97      	ldr	r2, [pc, #604]	; (8002714 <HAL_RCC_OscConfig+0x780>)
 80024b8:	f023 0304 	bic.w	r3, r3, #4
 80024bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d016      	beq.n	80024f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c8:	f7fe fc9e 	bl	8000e08 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024ce:	e00a      	b.n	80024e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d0:	f7fe fc9a 	bl	8000e08 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	f241 3288 	movw	r2, #5000	; 0x1388
 80024de:	4293      	cmp	r3, r2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e12a      	b.n	800273c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024e6:	4b8b      	ldr	r3, [pc, #556]	; (8002714 <HAL_RCC_OscConfig+0x780>)
 80024e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0ed      	beq.n	80024d0 <HAL_RCC_OscConfig+0x53c>
 80024f4:	e015      	b.n	8002522 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f6:	f7fe fc87 	bl	8000e08 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024fc:	e00a      	b.n	8002514 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024fe:	f7fe fc83 	bl	8000e08 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	f241 3288 	movw	r2, #5000	; 0x1388
 800250c:	4293      	cmp	r3, r2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e113      	b.n	800273c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002514:	4b7f      	ldr	r3, [pc, #508]	; (8002714 <HAL_RCC_OscConfig+0x780>)
 8002516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1ed      	bne.n	80024fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002522:	7ffb      	ldrb	r3, [r7, #31]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d105      	bne.n	8002534 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002528:	4b7a      	ldr	r3, [pc, #488]	; (8002714 <HAL_RCC_OscConfig+0x780>)
 800252a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252c:	4a79      	ldr	r2, [pc, #484]	; (8002714 <HAL_RCC_OscConfig+0x780>)
 800252e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002532:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002538:	2b00      	cmp	r3, #0
 800253a:	f000 80fe 	beq.w	800273a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002542:	2b02      	cmp	r3, #2
 8002544:	f040 80d0 	bne.w	80026e8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002548:	4b72      	ldr	r3, [pc, #456]	; (8002714 <HAL_RCC_OscConfig+0x780>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	f003 0203 	and.w	r2, r3, #3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002558:	429a      	cmp	r2, r3
 800255a:	d130      	bne.n	80025be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	3b01      	subs	r3, #1
 8002568:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800256a:	429a      	cmp	r2, r3
 800256c:	d127      	bne.n	80025be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002578:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800257a:	429a      	cmp	r2, r3
 800257c:	d11f      	bne.n	80025be <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002588:	2a07      	cmp	r2, #7
 800258a:	bf14      	ite	ne
 800258c:	2201      	movne	r2, #1
 800258e:	2200      	moveq	r2, #0
 8002590:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002592:	4293      	cmp	r3, r2
 8002594:	d113      	bne.n	80025be <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a0:	085b      	lsrs	r3, r3, #1
 80025a2:	3b01      	subs	r3, #1
 80025a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d109      	bne.n	80025be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b4:	085b      	lsrs	r3, r3, #1
 80025b6:	3b01      	subs	r3, #1
 80025b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d06e      	beq.n	800269c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	2b0c      	cmp	r3, #12
 80025c2:	d069      	beq.n	8002698 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80025c4:	4b53      	ldr	r3, [pc, #332]	; (8002714 <HAL_RCC_OscConfig+0x780>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d105      	bne.n	80025dc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80025d0:	4b50      	ldr	r3, [pc, #320]	; (8002714 <HAL_RCC_OscConfig+0x780>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e0ad      	b.n	800273c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80025e0:	4b4c      	ldr	r3, [pc, #304]	; (8002714 <HAL_RCC_OscConfig+0x780>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a4b      	ldr	r2, [pc, #300]	; (8002714 <HAL_RCC_OscConfig+0x780>)
 80025e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025ea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025ec:	f7fe fc0c 	bl	8000e08 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f4:	f7fe fc08 	bl	8000e08 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e09a      	b.n	800273c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002606:	4b43      	ldr	r3, [pc, #268]	; (8002714 <HAL_RCC_OscConfig+0x780>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002612:	4b40      	ldr	r3, [pc, #256]	; (8002714 <HAL_RCC_OscConfig+0x780>)
 8002614:	68da      	ldr	r2, [r3, #12]
 8002616:	4b40      	ldr	r3, [pc, #256]	; (8002718 <HAL_RCC_OscConfig+0x784>)
 8002618:	4013      	ands	r3, r2
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002622:	3a01      	subs	r2, #1
 8002624:	0112      	lsls	r2, r2, #4
 8002626:	4311      	orrs	r1, r2
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800262c:	0212      	lsls	r2, r2, #8
 800262e:	4311      	orrs	r1, r2
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002634:	0852      	lsrs	r2, r2, #1
 8002636:	3a01      	subs	r2, #1
 8002638:	0552      	lsls	r2, r2, #21
 800263a:	4311      	orrs	r1, r2
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002640:	0852      	lsrs	r2, r2, #1
 8002642:	3a01      	subs	r2, #1
 8002644:	0652      	lsls	r2, r2, #25
 8002646:	4311      	orrs	r1, r2
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800264c:	0912      	lsrs	r2, r2, #4
 800264e:	0452      	lsls	r2, r2, #17
 8002650:	430a      	orrs	r2, r1
 8002652:	4930      	ldr	r1, [pc, #192]	; (8002714 <HAL_RCC_OscConfig+0x780>)
 8002654:	4313      	orrs	r3, r2
 8002656:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002658:	4b2e      	ldr	r3, [pc, #184]	; (8002714 <HAL_RCC_OscConfig+0x780>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a2d      	ldr	r2, [pc, #180]	; (8002714 <HAL_RCC_OscConfig+0x780>)
 800265e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002662:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002664:	4b2b      	ldr	r3, [pc, #172]	; (8002714 <HAL_RCC_OscConfig+0x780>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	4a2a      	ldr	r2, [pc, #168]	; (8002714 <HAL_RCC_OscConfig+0x780>)
 800266a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800266e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002670:	f7fe fbca 	bl	8000e08 <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002678:	f7fe fbc6 	bl	8000e08 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e058      	b.n	800273c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800268a:	4b22      	ldr	r3, [pc, #136]	; (8002714 <HAL_RCC_OscConfig+0x780>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0f0      	beq.n	8002678 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002696:	e050      	b.n	800273a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e04f      	b.n	800273c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800269c:	4b1d      	ldr	r3, [pc, #116]	; (8002714 <HAL_RCC_OscConfig+0x780>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d148      	bne.n	800273a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80026a8:	4b1a      	ldr	r3, [pc, #104]	; (8002714 <HAL_RCC_OscConfig+0x780>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a19      	ldr	r2, [pc, #100]	; (8002714 <HAL_RCC_OscConfig+0x780>)
 80026ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026b4:	4b17      	ldr	r3, [pc, #92]	; (8002714 <HAL_RCC_OscConfig+0x780>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	4a16      	ldr	r2, [pc, #88]	; (8002714 <HAL_RCC_OscConfig+0x780>)
 80026ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026c0:	f7fe fba2 	bl	8000e08 <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c8:	f7fe fb9e 	bl	8000e08 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e030      	b.n	800273c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026da:	4b0e      	ldr	r3, [pc, #56]	; (8002714 <HAL_RCC_OscConfig+0x780>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0f0      	beq.n	80026c8 <HAL_RCC_OscConfig+0x734>
 80026e6:	e028      	b.n	800273a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	2b0c      	cmp	r3, #12
 80026ec:	d023      	beq.n	8002736 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ee:	4b09      	ldr	r3, [pc, #36]	; (8002714 <HAL_RCC_OscConfig+0x780>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a08      	ldr	r2, [pc, #32]	; (8002714 <HAL_RCC_OscConfig+0x780>)
 80026f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026fa:	f7fe fb85 	bl	8000e08 <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002700:	e00c      	b.n	800271c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002702:	f7fe fb81 	bl	8000e08 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d905      	bls.n	800271c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e013      	b.n	800273c <HAL_RCC_OscConfig+0x7a8>
 8002714:	40021000 	.word	0x40021000
 8002718:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800271c:	4b09      	ldr	r3, [pc, #36]	; (8002744 <HAL_RCC_OscConfig+0x7b0>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1ec      	bne.n	8002702 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002728:	4b06      	ldr	r3, [pc, #24]	; (8002744 <HAL_RCC_OscConfig+0x7b0>)
 800272a:	68da      	ldr	r2, [r3, #12]
 800272c:	4905      	ldr	r1, [pc, #20]	; (8002744 <HAL_RCC_OscConfig+0x7b0>)
 800272e:	4b06      	ldr	r3, [pc, #24]	; (8002748 <HAL_RCC_OscConfig+0x7b4>)
 8002730:	4013      	ands	r3, r2
 8002732:	60cb      	str	r3, [r1, #12]
 8002734:	e001      	b.n	800273a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e000      	b.n	800273c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3720      	adds	r7, #32
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40021000 	.word	0x40021000
 8002748:	feeefffc 	.word	0xfeeefffc

0800274c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e0e7      	b.n	8002930 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002760:	4b75      	ldr	r3, [pc, #468]	; (8002938 <HAL_RCC_ClockConfig+0x1ec>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	429a      	cmp	r2, r3
 800276c:	d910      	bls.n	8002790 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800276e:	4b72      	ldr	r3, [pc, #456]	; (8002938 <HAL_RCC_ClockConfig+0x1ec>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f023 0207 	bic.w	r2, r3, #7
 8002776:	4970      	ldr	r1, [pc, #448]	; (8002938 <HAL_RCC_ClockConfig+0x1ec>)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	4313      	orrs	r3, r2
 800277c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800277e:	4b6e      	ldr	r3, [pc, #440]	; (8002938 <HAL_RCC_ClockConfig+0x1ec>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	429a      	cmp	r2, r3
 800278a:	d001      	beq.n	8002790 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e0cf      	b.n	8002930 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d010      	beq.n	80027be <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	4b66      	ldr	r3, [pc, #408]	; (800293c <HAL_RCC_ClockConfig+0x1f0>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d908      	bls.n	80027be <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027ac:	4b63      	ldr	r3, [pc, #396]	; (800293c <HAL_RCC_ClockConfig+0x1f0>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	4960      	ldr	r1, [pc, #384]	; (800293c <HAL_RCC_ClockConfig+0x1f0>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d04c      	beq.n	8002864 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2b03      	cmp	r3, #3
 80027d0:	d107      	bne.n	80027e2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027d2:	4b5a      	ldr	r3, [pc, #360]	; (800293c <HAL_RCC_ClockConfig+0x1f0>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d121      	bne.n	8002822 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e0a6      	b.n	8002930 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d107      	bne.n	80027fa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027ea:	4b54      	ldr	r3, [pc, #336]	; (800293c <HAL_RCC_ClockConfig+0x1f0>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d115      	bne.n	8002822 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e09a      	b.n	8002930 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d107      	bne.n	8002812 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002802:	4b4e      	ldr	r3, [pc, #312]	; (800293c <HAL_RCC_ClockConfig+0x1f0>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d109      	bne.n	8002822 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e08e      	b.n	8002930 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002812:	4b4a      	ldr	r3, [pc, #296]	; (800293c <HAL_RCC_ClockConfig+0x1f0>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e086      	b.n	8002930 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002822:	4b46      	ldr	r3, [pc, #280]	; (800293c <HAL_RCC_ClockConfig+0x1f0>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f023 0203 	bic.w	r2, r3, #3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	4943      	ldr	r1, [pc, #268]	; (800293c <HAL_RCC_ClockConfig+0x1f0>)
 8002830:	4313      	orrs	r3, r2
 8002832:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002834:	f7fe fae8 	bl	8000e08 <HAL_GetTick>
 8002838:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800283a:	e00a      	b.n	8002852 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800283c:	f7fe fae4 	bl	8000e08 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	f241 3288 	movw	r2, #5000	; 0x1388
 800284a:	4293      	cmp	r3, r2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e06e      	b.n	8002930 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002852:	4b3a      	ldr	r3, [pc, #232]	; (800293c <HAL_RCC_ClockConfig+0x1f0>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 020c 	and.w	r2, r3, #12
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	429a      	cmp	r2, r3
 8002862:	d1eb      	bne.n	800283c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d010      	beq.n	8002892 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	4b31      	ldr	r3, [pc, #196]	; (800293c <HAL_RCC_ClockConfig+0x1f0>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800287c:	429a      	cmp	r2, r3
 800287e:	d208      	bcs.n	8002892 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002880:	4b2e      	ldr	r3, [pc, #184]	; (800293c <HAL_RCC_ClockConfig+0x1f0>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	492b      	ldr	r1, [pc, #172]	; (800293c <HAL_RCC_ClockConfig+0x1f0>)
 800288e:	4313      	orrs	r3, r2
 8002890:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002892:	4b29      	ldr	r3, [pc, #164]	; (8002938 <HAL_RCC_ClockConfig+0x1ec>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	429a      	cmp	r2, r3
 800289e:	d210      	bcs.n	80028c2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a0:	4b25      	ldr	r3, [pc, #148]	; (8002938 <HAL_RCC_ClockConfig+0x1ec>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f023 0207 	bic.w	r2, r3, #7
 80028a8:	4923      	ldr	r1, [pc, #140]	; (8002938 <HAL_RCC_ClockConfig+0x1ec>)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b0:	4b21      	ldr	r3, [pc, #132]	; (8002938 <HAL_RCC_ClockConfig+0x1ec>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d001      	beq.n	80028c2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e036      	b.n	8002930 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0304 	and.w	r3, r3, #4
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d008      	beq.n	80028e0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028ce:	4b1b      	ldr	r3, [pc, #108]	; (800293c <HAL_RCC_ClockConfig+0x1f0>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	4918      	ldr	r1, [pc, #96]	; (800293c <HAL_RCC_ClockConfig+0x1f0>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0308 	and.w	r3, r3, #8
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d009      	beq.n	8002900 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028ec:	4b13      	ldr	r3, [pc, #76]	; (800293c <HAL_RCC_ClockConfig+0x1f0>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	4910      	ldr	r1, [pc, #64]	; (800293c <HAL_RCC_ClockConfig+0x1f0>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002900:	f000 f824 	bl	800294c <HAL_RCC_GetSysClockFreq>
 8002904:	4602      	mov	r2, r0
 8002906:	4b0d      	ldr	r3, [pc, #52]	; (800293c <HAL_RCC_ClockConfig+0x1f0>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	091b      	lsrs	r3, r3, #4
 800290c:	f003 030f 	and.w	r3, r3, #15
 8002910:	490b      	ldr	r1, [pc, #44]	; (8002940 <HAL_RCC_ClockConfig+0x1f4>)
 8002912:	5ccb      	ldrb	r3, [r1, r3]
 8002914:	f003 031f 	and.w	r3, r3, #31
 8002918:	fa22 f303 	lsr.w	r3, r2, r3
 800291c:	4a09      	ldr	r2, [pc, #36]	; (8002944 <HAL_RCC_ClockConfig+0x1f8>)
 800291e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002920:	4b09      	ldr	r3, [pc, #36]	; (8002948 <HAL_RCC_ClockConfig+0x1fc>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4618      	mov	r0, r3
 8002926:	f7fe fa1f 	bl	8000d68 <HAL_InitTick>
 800292a:	4603      	mov	r3, r0
 800292c:	72fb      	strb	r3, [r7, #11]

  return status;
 800292e:	7afb      	ldrb	r3, [r7, #11]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40022000 	.word	0x40022000
 800293c:	40021000 	.word	0x40021000
 8002940:	08004914 	.word	0x08004914
 8002944:	20000000 	.word	0x20000000
 8002948:	20000004 	.word	0x20000004

0800294c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800294c:	b480      	push	{r7}
 800294e:	b089      	sub	sp, #36	; 0x24
 8002950:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002952:	2300      	movs	r3, #0
 8002954:	61fb      	str	r3, [r7, #28]
 8002956:	2300      	movs	r3, #0
 8002958:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800295a:	4b3e      	ldr	r3, [pc, #248]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x108>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 030c 	and.w	r3, r3, #12
 8002962:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002964:	4b3b      	ldr	r3, [pc, #236]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	f003 0303 	and.w	r3, r3, #3
 800296c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d005      	beq.n	8002980 <HAL_RCC_GetSysClockFreq+0x34>
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	2b0c      	cmp	r3, #12
 8002978:	d121      	bne.n	80029be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d11e      	bne.n	80029be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002980:	4b34      	ldr	r3, [pc, #208]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0308 	and.w	r3, r3, #8
 8002988:	2b00      	cmp	r3, #0
 800298a:	d107      	bne.n	800299c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800298c:	4b31      	ldr	r3, [pc, #196]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x108>)
 800298e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002992:	0a1b      	lsrs	r3, r3, #8
 8002994:	f003 030f 	and.w	r3, r3, #15
 8002998:	61fb      	str	r3, [r7, #28]
 800299a:	e005      	b.n	80029a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800299c:	4b2d      	ldr	r3, [pc, #180]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x108>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	091b      	lsrs	r3, r3, #4
 80029a2:	f003 030f 	and.w	r3, r3, #15
 80029a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80029a8:	4a2b      	ldr	r2, [pc, #172]	; (8002a58 <HAL_RCC_GetSysClockFreq+0x10c>)
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10d      	bne.n	80029d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029bc:	e00a      	b.n	80029d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	2b04      	cmp	r3, #4
 80029c2:	d102      	bne.n	80029ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029c4:	4b25      	ldr	r3, [pc, #148]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x110>)
 80029c6:	61bb      	str	r3, [r7, #24]
 80029c8:	e004      	b.n	80029d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	d101      	bne.n	80029d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029d0:	4b23      	ldr	r3, [pc, #140]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x114>)
 80029d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	2b0c      	cmp	r3, #12
 80029d8:	d134      	bne.n	8002a44 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029da:	4b1e      	ldr	r3, [pc, #120]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x108>)
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d003      	beq.n	80029f2 <HAL_RCC_GetSysClockFreq+0xa6>
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	2b03      	cmp	r3, #3
 80029ee:	d003      	beq.n	80029f8 <HAL_RCC_GetSysClockFreq+0xac>
 80029f0:	e005      	b.n	80029fe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80029f2:	4b1a      	ldr	r3, [pc, #104]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x110>)
 80029f4:	617b      	str	r3, [r7, #20]
      break;
 80029f6:	e005      	b.n	8002a04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80029f8:	4b19      	ldr	r3, [pc, #100]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x114>)
 80029fa:	617b      	str	r3, [r7, #20]
      break;
 80029fc:	e002      	b.n	8002a04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	617b      	str	r3, [r7, #20]
      break;
 8002a02:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a04:	4b13      	ldr	r3, [pc, #76]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	091b      	lsrs	r3, r3, #4
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	3301      	adds	r3, #1
 8002a10:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a12:	4b10      	ldr	r3, [pc, #64]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	0a1b      	lsrs	r3, r3, #8
 8002a18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	fb03 f202 	mul.w	r2, r3, r2
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a28:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a2a:	4b0a      	ldr	r3, [pc, #40]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	0e5b      	lsrs	r3, r3, #25
 8002a30:	f003 0303 	and.w	r3, r3, #3
 8002a34:	3301      	adds	r3, #1
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a42:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a44:	69bb      	ldr	r3, [r7, #24]
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3724      	adds	r7, #36	; 0x24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	40021000 	.word	0x40021000
 8002a58:	0800492c 	.word	0x0800492c
 8002a5c:	00f42400 	.word	0x00f42400
 8002a60:	007a1200 	.word	0x007a1200

08002a64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a68:	4b03      	ldr	r3, [pc, #12]	; (8002a78 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	20000000 	.word	0x20000000

08002a7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a80:	f7ff fff0 	bl	8002a64 <HAL_RCC_GetHCLKFreq>
 8002a84:	4602      	mov	r2, r0
 8002a86:	4b06      	ldr	r3, [pc, #24]	; (8002aa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	0a1b      	lsrs	r3, r3, #8
 8002a8c:	f003 0307 	and.w	r3, r3, #7
 8002a90:	4904      	ldr	r1, [pc, #16]	; (8002aa4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a92:	5ccb      	ldrb	r3, [r1, r3]
 8002a94:	f003 031f 	and.w	r3, r3, #31
 8002a98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	08004924 	.word	0x08004924

08002aa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002aac:	f7ff ffda 	bl	8002a64 <HAL_RCC_GetHCLKFreq>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	4b06      	ldr	r3, [pc, #24]	; (8002acc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	0adb      	lsrs	r3, r3, #11
 8002ab8:	f003 0307 	and.w	r3, r3, #7
 8002abc:	4904      	ldr	r1, [pc, #16]	; (8002ad0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002abe:	5ccb      	ldrb	r3, [r1, r3]
 8002ac0:	f003 031f 	and.w	r3, r3, #31
 8002ac4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	08004924 	.word	0x08004924

08002ad4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002adc:	2300      	movs	r3, #0
 8002ade:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ae0:	4b2a      	ldr	r3, [pc, #168]	; (8002b8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002aec:	f7ff f9ee 	bl	8001ecc <HAL_PWREx_GetVoltageRange>
 8002af0:	6178      	str	r0, [r7, #20]
 8002af2:	e014      	b.n	8002b1e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002af4:	4b25      	ldr	r3, [pc, #148]	; (8002b8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af8:	4a24      	ldr	r2, [pc, #144]	; (8002b8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002afa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002afe:	6593      	str	r3, [r2, #88]	; 0x58
 8002b00:	4b22      	ldr	r3, [pc, #136]	; (8002b8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b08:	60fb      	str	r3, [r7, #12]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b0c:	f7ff f9de 	bl	8001ecc <HAL_PWREx_GetVoltageRange>
 8002b10:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b12:	4b1e      	ldr	r3, [pc, #120]	; (8002b8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b16:	4a1d      	ldr	r2, [pc, #116]	; (8002b8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b1c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b24:	d10b      	bne.n	8002b3e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b80      	cmp	r3, #128	; 0x80
 8002b2a:	d919      	bls.n	8002b60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2ba0      	cmp	r3, #160	; 0xa0
 8002b30:	d902      	bls.n	8002b38 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b32:	2302      	movs	r3, #2
 8002b34:	613b      	str	r3, [r7, #16]
 8002b36:	e013      	b.n	8002b60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b38:	2301      	movs	r3, #1
 8002b3a:	613b      	str	r3, [r7, #16]
 8002b3c:	e010      	b.n	8002b60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b80      	cmp	r3, #128	; 0x80
 8002b42:	d902      	bls.n	8002b4a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002b44:	2303      	movs	r3, #3
 8002b46:	613b      	str	r3, [r7, #16]
 8002b48:	e00a      	b.n	8002b60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b80      	cmp	r3, #128	; 0x80
 8002b4e:	d102      	bne.n	8002b56 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b50:	2302      	movs	r3, #2
 8002b52:	613b      	str	r3, [r7, #16]
 8002b54:	e004      	b.n	8002b60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b70      	cmp	r3, #112	; 0x70
 8002b5a:	d101      	bne.n	8002b60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b60:	4b0b      	ldr	r3, [pc, #44]	; (8002b90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f023 0207 	bic.w	r2, r3, #7
 8002b68:	4909      	ldr	r1, [pc, #36]	; (8002b90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b70:	4b07      	ldr	r3, [pc, #28]	; (8002b90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d001      	beq.n	8002b82 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e000      	b.n	8002b84 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3718      	adds	r7, #24
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	40022000 	.word	0x40022000

08002b94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d041      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bb4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002bb8:	d02a      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002bba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002bbe:	d824      	bhi.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002bc0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002bc4:	d008      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002bc6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002bca:	d81e      	bhi.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00a      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002bd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bd4:	d010      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002bd6:	e018      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002bd8:	4b86      	ldr	r3, [pc, #536]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	4a85      	ldr	r2, [pc, #532]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002be4:	e015      	b.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	3304      	adds	r3, #4
 8002bea:	2100      	movs	r1, #0
 8002bec:	4618      	mov	r0, r3
 8002bee:	f000 fabb 	bl	8003168 <RCCEx_PLLSAI1_Config>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bf6:	e00c      	b.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3320      	adds	r3, #32
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 fba6 	bl	8003350 <RCCEx_PLLSAI2_Config>
 8002c04:	4603      	mov	r3, r0
 8002c06:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c08:	e003      	b.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	74fb      	strb	r3, [r7, #19]
      break;
 8002c0e:	e000      	b.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002c10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c12:	7cfb      	ldrb	r3, [r7, #19]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d10b      	bne.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c18:	4b76      	ldr	r3, [pc, #472]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c1e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c26:	4973      	ldr	r1, [pc, #460]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c2e:	e001      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c30:	7cfb      	ldrb	r3, [r7, #19]
 8002c32:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d041      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c44:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c48:	d02a      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002c4a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c4e:	d824      	bhi.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002c50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c54:	d008      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002c56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c5a:	d81e      	bhi.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00a      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002c60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c64:	d010      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002c66:	e018      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c68:	4b62      	ldr	r3, [pc, #392]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	4a61      	ldr	r2, [pc, #388]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c72:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c74:	e015      	b.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	3304      	adds	r3, #4
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f000 fa73 	bl	8003168 <RCCEx_PLLSAI1_Config>
 8002c82:	4603      	mov	r3, r0
 8002c84:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c86:	e00c      	b.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	3320      	adds	r3, #32
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 fb5e 	bl	8003350 <RCCEx_PLLSAI2_Config>
 8002c94:	4603      	mov	r3, r0
 8002c96:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c98:	e003      	b.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	74fb      	strb	r3, [r7, #19]
      break;
 8002c9e:	e000      	b.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002ca0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ca2:	7cfb      	ldrb	r3, [r7, #19]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d10b      	bne.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ca8:	4b52      	ldr	r3, [pc, #328]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cb6:	494f      	ldr	r1, [pc, #316]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002cbe:	e001      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cc0:	7cfb      	ldrb	r3, [r7, #19]
 8002cc2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f000 80a0 	beq.w	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002cd6:	4b47      	ldr	r3, [pc, #284]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e000      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00d      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cec:	4b41      	ldr	r3, [pc, #260]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf0:	4a40      	ldr	r2, [pc, #256]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cf6:	6593      	str	r3, [r2, #88]	; 0x58
 8002cf8:	4b3e      	ldr	r3, [pc, #248]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d00:	60bb      	str	r3, [r7, #8]
 8002d02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d04:	2301      	movs	r3, #1
 8002d06:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d08:	4b3b      	ldr	r3, [pc, #236]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a3a      	ldr	r2, [pc, #232]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d14:	f7fe f878 	bl	8000e08 <HAL_GetTick>
 8002d18:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d1a:	e009      	b.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d1c:	f7fe f874 	bl	8000e08 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d902      	bls.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	74fb      	strb	r3, [r7, #19]
        break;
 8002d2e:	e005      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d30:	4b31      	ldr	r3, [pc, #196]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0ef      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002d3c:	7cfb      	ldrb	r3, [r7, #19]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d15c      	bne.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d42:	4b2c      	ldr	r3, [pc, #176]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d4c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d01f      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d019      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d60:	4b24      	ldr	r3, [pc, #144]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d6a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d6c:	4b21      	ldr	r3, [pc, #132]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d72:	4a20      	ldr	r2, [pc, #128]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d7c:	4b1d      	ldr	r3, [pc, #116]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d82:	4a1c      	ldr	r2, [pc, #112]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d8c:	4a19      	ldr	r2, [pc, #100]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d016      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9e:	f7fe f833 	bl	8000e08 <HAL_GetTick>
 8002da2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002da4:	e00b      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002da6:	f7fe f82f 	bl	8000e08 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d902      	bls.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	74fb      	strb	r3, [r7, #19]
            break;
 8002dbc:	e006      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dbe:	4b0d      	ldr	r3, [pc, #52]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0ec      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002dcc:	7cfb      	ldrb	r3, [r7, #19]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10c      	bne.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dd2:	4b08      	ldr	r3, [pc, #32]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002de2:	4904      	ldr	r1, [pc, #16]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002dea:	e009      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002dec:	7cfb      	ldrb	r3, [r7, #19]
 8002dee:	74bb      	strb	r3, [r7, #18]
 8002df0:	e006      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002df2:	bf00      	nop
 8002df4:	40021000 	.word	0x40021000
 8002df8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dfc:	7cfb      	ldrb	r3, [r7, #19]
 8002dfe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e00:	7c7b      	ldrb	r3, [r7, #17]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d105      	bne.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e06:	4b9e      	ldr	r3, [pc, #632]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e0a:	4a9d      	ldr	r2, [pc, #628]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e10:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00a      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e1e:	4b98      	ldr	r3, [pc, #608]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e24:	f023 0203 	bic.w	r2, r3, #3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2c:	4994      	ldr	r1, [pc, #592]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00a      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e40:	4b8f      	ldr	r3, [pc, #572]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e46:	f023 020c 	bic.w	r2, r3, #12
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e4e:	498c      	ldr	r1, [pc, #560]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0304 	and.w	r3, r3, #4
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00a      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e62:	4b87      	ldr	r3, [pc, #540]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e68:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e70:	4983      	ldr	r1, [pc, #524]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0308 	and.w	r3, r3, #8
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00a      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e84:	4b7e      	ldr	r3, [pc, #504]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e8a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e92:	497b      	ldr	r1, [pc, #492]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0310 	and.w	r3, r3, #16
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00a      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ea6:	4b76      	ldr	r3, [pc, #472]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eb4:	4972      	ldr	r1, [pc, #456]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0320 	and.w	r3, r3, #32
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00a      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ec8:	4b6d      	ldr	r3, [pc, #436]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ece:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ed6:	496a      	ldr	r1, [pc, #424]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00a      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002eea:	4b65      	ldr	r3, [pc, #404]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef8:	4961      	ldr	r1, [pc, #388]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00a      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f0c:	4b5c      	ldr	r3, [pc, #368]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f1a:	4959      	ldr	r1, [pc, #356]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00a      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f2e:	4b54      	ldr	r3, [pc, #336]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f34:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f3c:	4950      	ldr	r1, [pc, #320]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00a      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f50:	4b4b      	ldr	r3, [pc, #300]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f56:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f5e:	4948      	ldr	r1, [pc, #288]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00a      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f72:	4b43      	ldr	r3, [pc, #268]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f80:	493f      	ldr	r1, [pc, #252]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d028      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f94:	4b3a      	ldr	r3, [pc, #232]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fa2:	4937      	ldr	r1, [pc, #220]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fb2:	d106      	bne.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fb4:	4b32      	ldr	r3, [pc, #200]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	4a31      	ldr	r2, [pc, #196]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fbe:	60d3      	str	r3, [r2, #12]
 8002fc0:	e011      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fc6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fca:	d10c      	bne.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	3304      	adds	r3, #4
 8002fd0:	2101      	movs	r1, #1
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f000 f8c8 	bl	8003168 <RCCEx_PLLSAI1_Config>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002fdc:	7cfb      	ldrb	r3, [r7, #19]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002fe2:	7cfb      	ldrb	r3, [r7, #19]
 8002fe4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d028      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ff2:	4b23      	ldr	r3, [pc, #140]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003000:	491f      	ldr	r1, [pc, #124]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003002:	4313      	orrs	r3, r2
 8003004:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003010:	d106      	bne.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003012:	4b1b      	ldr	r3, [pc, #108]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	4a1a      	ldr	r2, [pc, #104]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003018:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800301c:	60d3      	str	r3, [r2, #12]
 800301e:	e011      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003024:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003028:	d10c      	bne.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	3304      	adds	r3, #4
 800302e:	2101      	movs	r1, #1
 8003030:	4618      	mov	r0, r3
 8003032:	f000 f899 	bl	8003168 <RCCEx_PLLSAI1_Config>
 8003036:	4603      	mov	r3, r0
 8003038:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800303a:	7cfb      	ldrb	r3, [r7, #19]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003040:	7cfb      	ldrb	r3, [r7, #19]
 8003042:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d02b      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003050:	4b0b      	ldr	r3, [pc, #44]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003056:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800305e:	4908      	ldr	r1, [pc, #32]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003060:	4313      	orrs	r3, r2
 8003062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800306a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800306e:	d109      	bne.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003070:	4b03      	ldr	r3, [pc, #12]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	4a02      	ldr	r2, [pc, #8]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003076:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800307a:	60d3      	str	r3, [r2, #12]
 800307c:	e014      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800307e:	bf00      	nop
 8003080:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003088:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800308c:	d10c      	bne.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	3304      	adds	r3, #4
 8003092:	2101      	movs	r1, #1
 8003094:	4618      	mov	r0, r3
 8003096:	f000 f867 	bl	8003168 <RCCEx_PLLSAI1_Config>
 800309a:	4603      	mov	r3, r0
 800309c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800309e:	7cfb      	ldrb	r3, [r7, #19]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80030a4:	7cfb      	ldrb	r3, [r7, #19]
 80030a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d02f      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030b4:	4b2b      	ldr	r3, [pc, #172]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030c2:	4928      	ldr	r1, [pc, #160]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030d2:	d10d      	bne.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	3304      	adds	r3, #4
 80030d8:	2102      	movs	r1, #2
 80030da:	4618      	mov	r0, r3
 80030dc:	f000 f844 	bl	8003168 <RCCEx_PLLSAI1_Config>
 80030e0:	4603      	mov	r3, r0
 80030e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030e4:	7cfb      	ldrb	r3, [r7, #19]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d014      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80030ea:	7cfb      	ldrb	r3, [r7, #19]
 80030ec:	74bb      	strb	r3, [r7, #18]
 80030ee:	e011      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030f8:	d10c      	bne.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	3320      	adds	r3, #32
 80030fe:	2102      	movs	r1, #2
 8003100:	4618      	mov	r0, r3
 8003102:	f000 f925 	bl	8003350 <RCCEx_PLLSAI2_Config>
 8003106:	4603      	mov	r3, r0
 8003108:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800310a:	7cfb      	ldrb	r3, [r7, #19]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003110:	7cfb      	ldrb	r3, [r7, #19]
 8003112:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00a      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003120:	4b10      	ldr	r3, [pc, #64]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003126:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800312e:	490d      	ldr	r1, [pc, #52]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003130:	4313      	orrs	r3, r2
 8003132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00b      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003142:	4b08      	ldr	r3, [pc, #32]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003148:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003152:	4904      	ldr	r1, [pc, #16]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003154:	4313      	orrs	r3, r2
 8003156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800315a:	7cbb      	ldrb	r3, [r7, #18]
}
 800315c:	4618      	mov	r0, r3
 800315e:	3718      	adds	r7, #24
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	40021000 	.word	0x40021000

08003168 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003172:	2300      	movs	r3, #0
 8003174:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003176:	4b75      	ldr	r3, [pc, #468]	; (800334c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	f003 0303 	and.w	r3, r3, #3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d018      	beq.n	80031b4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003182:	4b72      	ldr	r3, [pc, #456]	; (800334c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	f003 0203 	and.w	r2, r3, #3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	429a      	cmp	r2, r3
 8003190:	d10d      	bne.n	80031ae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
       ||
 8003196:	2b00      	cmp	r3, #0
 8003198:	d009      	beq.n	80031ae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800319a:	4b6c      	ldr	r3, [pc, #432]	; (800334c <RCCEx_PLLSAI1_Config+0x1e4>)
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	091b      	lsrs	r3, r3, #4
 80031a0:	f003 0307 	and.w	r3, r3, #7
 80031a4:	1c5a      	adds	r2, r3, #1
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
       ||
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d047      	beq.n	800323e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	73fb      	strb	r3, [r7, #15]
 80031b2:	e044      	b.n	800323e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2b03      	cmp	r3, #3
 80031ba:	d018      	beq.n	80031ee <RCCEx_PLLSAI1_Config+0x86>
 80031bc:	2b03      	cmp	r3, #3
 80031be:	d825      	bhi.n	800320c <RCCEx_PLLSAI1_Config+0xa4>
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d002      	beq.n	80031ca <RCCEx_PLLSAI1_Config+0x62>
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d009      	beq.n	80031dc <RCCEx_PLLSAI1_Config+0x74>
 80031c8:	e020      	b.n	800320c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031ca:	4b60      	ldr	r3, [pc, #384]	; (800334c <RCCEx_PLLSAI1_Config+0x1e4>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d11d      	bne.n	8003212 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031da:	e01a      	b.n	8003212 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031dc:	4b5b      	ldr	r3, [pc, #364]	; (800334c <RCCEx_PLLSAI1_Config+0x1e4>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d116      	bne.n	8003216 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031ec:	e013      	b.n	8003216 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031ee:	4b57      	ldr	r3, [pc, #348]	; (800334c <RCCEx_PLLSAI1_Config+0x1e4>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10f      	bne.n	800321a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80031fa:	4b54      	ldr	r3, [pc, #336]	; (800334c <RCCEx_PLLSAI1_Config+0x1e4>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d109      	bne.n	800321a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800320a:	e006      	b.n	800321a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	73fb      	strb	r3, [r7, #15]
      break;
 8003210:	e004      	b.n	800321c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003212:	bf00      	nop
 8003214:	e002      	b.n	800321c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003216:	bf00      	nop
 8003218:	e000      	b.n	800321c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800321a:	bf00      	nop
    }

    if(status == HAL_OK)
 800321c:	7bfb      	ldrb	r3, [r7, #15]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10d      	bne.n	800323e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003222:	4b4a      	ldr	r3, [pc, #296]	; (800334c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6819      	ldr	r1, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	3b01      	subs	r3, #1
 8003234:	011b      	lsls	r3, r3, #4
 8003236:	430b      	orrs	r3, r1
 8003238:	4944      	ldr	r1, [pc, #272]	; (800334c <RCCEx_PLLSAI1_Config+0x1e4>)
 800323a:	4313      	orrs	r3, r2
 800323c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800323e:	7bfb      	ldrb	r3, [r7, #15]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d17d      	bne.n	8003340 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003244:	4b41      	ldr	r3, [pc, #260]	; (800334c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a40      	ldr	r2, [pc, #256]	; (800334c <RCCEx_PLLSAI1_Config+0x1e4>)
 800324a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800324e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003250:	f7fd fdda 	bl	8000e08 <HAL_GetTick>
 8003254:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003256:	e009      	b.n	800326c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003258:	f7fd fdd6 	bl	8000e08 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d902      	bls.n	800326c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	73fb      	strb	r3, [r7, #15]
        break;
 800326a:	e005      	b.n	8003278 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800326c:	4b37      	ldr	r3, [pc, #220]	; (800334c <RCCEx_PLLSAI1_Config+0x1e4>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1ef      	bne.n	8003258 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003278:	7bfb      	ldrb	r3, [r7, #15]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d160      	bne.n	8003340 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d111      	bne.n	80032a8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003284:	4b31      	ldr	r3, [pc, #196]	; (800334c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800328c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6892      	ldr	r2, [r2, #8]
 8003294:	0211      	lsls	r1, r2, #8
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	68d2      	ldr	r2, [r2, #12]
 800329a:	0912      	lsrs	r2, r2, #4
 800329c:	0452      	lsls	r2, r2, #17
 800329e:	430a      	orrs	r2, r1
 80032a0:	492a      	ldr	r1, [pc, #168]	; (800334c <RCCEx_PLLSAI1_Config+0x1e4>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	610b      	str	r3, [r1, #16]
 80032a6:	e027      	b.n	80032f8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d112      	bne.n	80032d4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032ae:	4b27      	ldr	r3, [pc, #156]	; (800334c <RCCEx_PLLSAI1_Config+0x1e4>)
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80032b6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	6892      	ldr	r2, [r2, #8]
 80032be:	0211      	lsls	r1, r2, #8
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6912      	ldr	r2, [r2, #16]
 80032c4:	0852      	lsrs	r2, r2, #1
 80032c6:	3a01      	subs	r2, #1
 80032c8:	0552      	lsls	r2, r2, #21
 80032ca:	430a      	orrs	r2, r1
 80032cc:	491f      	ldr	r1, [pc, #124]	; (800334c <RCCEx_PLLSAI1_Config+0x1e4>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	610b      	str	r3, [r1, #16]
 80032d2:	e011      	b.n	80032f8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032d4:	4b1d      	ldr	r3, [pc, #116]	; (800334c <RCCEx_PLLSAI1_Config+0x1e4>)
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80032dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	6892      	ldr	r2, [r2, #8]
 80032e4:	0211      	lsls	r1, r2, #8
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	6952      	ldr	r2, [r2, #20]
 80032ea:	0852      	lsrs	r2, r2, #1
 80032ec:	3a01      	subs	r2, #1
 80032ee:	0652      	lsls	r2, r2, #25
 80032f0:	430a      	orrs	r2, r1
 80032f2:	4916      	ldr	r1, [pc, #88]	; (800334c <RCCEx_PLLSAI1_Config+0x1e4>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80032f8:	4b14      	ldr	r3, [pc, #80]	; (800334c <RCCEx_PLLSAI1_Config+0x1e4>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a13      	ldr	r2, [pc, #76]	; (800334c <RCCEx_PLLSAI1_Config+0x1e4>)
 80032fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003302:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003304:	f7fd fd80 	bl	8000e08 <HAL_GetTick>
 8003308:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800330a:	e009      	b.n	8003320 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800330c:	f7fd fd7c 	bl	8000e08 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d902      	bls.n	8003320 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	73fb      	strb	r3, [r7, #15]
          break;
 800331e:	e005      	b.n	800332c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003320:	4b0a      	ldr	r3, [pc, #40]	; (800334c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d0ef      	beq.n	800330c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800332c:	7bfb      	ldrb	r3, [r7, #15]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d106      	bne.n	8003340 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003332:	4b06      	ldr	r3, [pc, #24]	; (800334c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003334:	691a      	ldr	r2, [r3, #16]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	4904      	ldr	r1, [pc, #16]	; (800334c <RCCEx_PLLSAI1_Config+0x1e4>)
 800333c:	4313      	orrs	r3, r2
 800333e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003340:	7bfb      	ldrb	r3, [r7, #15]
}
 8003342:	4618      	mov	r0, r3
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40021000 	.word	0x40021000

08003350 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800335a:	2300      	movs	r3, #0
 800335c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800335e:	4b6a      	ldr	r3, [pc, #424]	; (8003508 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	f003 0303 	and.w	r3, r3, #3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d018      	beq.n	800339c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800336a:	4b67      	ldr	r3, [pc, #412]	; (8003508 <RCCEx_PLLSAI2_Config+0x1b8>)
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	f003 0203 	and.w	r2, r3, #3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	429a      	cmp	r2, r3
 8003378:	d10d      	bne.n	8003396 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
       ||
 800337e:	2b00      	cmp	r3, #0
 8003380:	d009      	beq.n	8003396 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003382:	4b61      	ldr	r3, [pc, #388]	; (8003508 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	091b      	lsrs	r3, r3, #4
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	1c5a      	adds	r2, r3, #1
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
       ||
 8003392:	429a      	cmp	r2, r3
 8003394:	d047      	beq.n	8003426 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	73fb      	strb	r3, [r7, #15]
 800339a:	e044      	b.n	8003426 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2b03      	cmp	r3, #3
 80033a2:	d018      	beq.n	80033d6 <RCCEx_PLLSAI2_Config+0x86>
 80033a4:	2b03      	cmp	r3, #3
 80033a6:	d825      	bhi.n	80033f4 <RCCEx_PLLSAI2_Config+0xa4>
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d002      	beq.n	80033b2 <RCCEx_PLLSAI2_Config+0x62>
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d009      	beq.n	80033c4 <RCCEx_PLLSAI2_Config+0x74>
 80033b0:	e020      	b.n	80033f4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80033b2:	4b55      	ldr	r3, [pc, #340]	; (8003508 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d11d      	bne.n	80033fa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033c2:	e01a      	b.n	80033fa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80033c4:	4b50      	ldr	r3, [pc, #320]	; (8003508 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d116      	bne.n	80033fe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033d4:	e013      	b.n	80033fe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80033d6:	4b4c      	ldr	r3, [pc, #304]	; (8003508 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10f      	bne.n	8003402 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80033e2:	4b49      	ldr	r3, [pc, #292]	; (8003508 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d109      	bne.n	8003402 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80033f2:	e006      	b.n	8003402 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	73fb      	strb	r3, [r7, #15]
      break;
 80033f8:	e004      	b.n	8003404 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80033fa:	bf00      	nop
 80033fc:	e002      	b.n	8003404 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80033fe:	bf00      	nop
 8003400:	e000      	b.n	8003404 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003402:	bf00      	nop
    }

    if(status == HAL_OK)
 8003404:	7bfb      	ldrb	r3, [r7, #15]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10d      	bne.n	8003426 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800340a:	4b3f      	ldr	r3, [pc, #252]	; (8003508 <RCCEx_PLLSAI2_Config+0x1b8>)
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6819      	ldr	r1, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	3b01      	subs	r3, #1
 800341c:	011b      	lsls	r3, r3, #4
 800341e:	430b      	orrs	r3, r1
 8003420:	4939      	ldr	r1, [pc, #228]	; (8003508 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003422:	4313      	orrs	r3, r2
 8003424:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003426:	7bfb      	ldrb	r3, [r7, #15]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d167      	bne.n	80034fc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800342c:	4b36      	ldr	r3, [pc, #216]	; (8003508 <RCCEx_PLLSAI2_Config+0x1b8>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a35      	ldr	r2, [pc, #212]	; (8003508 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003432:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003436:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003438:	f7fd fce6 	bl	8000e08 <HAL_GetTick>
 800343c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800343e:	e009      	b.n	8003454 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003440:	f7fd fce2 	bl	8000e08 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d902      	bls.n	8003454 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	73fb      	strb	r3, [r7, #15]
        break;
 8003452:	e005      	b.n	8003460 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003454:	4b2c      	ldr	r3, [pc, #176]	; (8003508 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1ef      	bne.n	8003440 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003460:	7bfb      	ldrb	r3, [r7, #15]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d14a      	bne.n	80034fc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d111      	bne.n	8003490 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800346c:	4b26      	ldr	r3, [pc, #152]	; (8003508 <RCCEx_PLLSAI2_Config+0x1b8>)
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	6892      	ldr	r2, [r2, #8]
 800347c:	0211      	lsls	r1, r2, #8
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	68d2      	ldr	r2, [r2, #12]
 8003482:	0912      	lsrs	r2, r2, #4
 8003484:	0452      	lsls	r2, r2, #17
 8003486:	430a      	orrs	r2, r1
 8003488:	491f      	ldr	r1, [pc, #124]	; (8003508 <RCCEx_PLLSAI2_Config+0x1b8>)
 800348a:	4313      	orrs	r3, r2
 800348c:	614b      	str	r3, [r1, #20]
 800348e:	e011      	b.n	80034b4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003490:	4b1d      	ldr	r3, [pc, #116]	; (8003508 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003498:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	6892      	ldr	r2, [r2, #8]
 80034a0:	0211      	lsls	r1, r2, #8
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6912      	ldr	r2, [r2, #16]
 80034a6:	0852      	lsrs	r2, r2, #1
 80034a8:	3a01      	subs	r2, #1
 80034aa:	0652      	lsls	r2, r2, #25
 80034ac:	430a      	orrs	r2, r1
 80034ae:	4916      	ldr	r1, [pc, #88]	; (8003508 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80034b4:	4b14      	ldr	r3, [pc, #80]	; (8003508 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a13      	ldr	r2, [pc, #76]	; (8003508 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c0:	f7fd fca2 	bl	8000e08 <HAL_GetTick>
 80034c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80034c6:	e009      	b.n	80034dc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80034c8:	f7fd fc9e 	bl	8000e08 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d902      	bls.n	80034dc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	73fb      	strb	r3, [r7, #15]
          break;
 80034da:	e005      	b.n	80034e8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80034dc:	4b0a      	ldr	r3, [pc, #40]	; (8003508 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0ef      	beq.n	80034c8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80034e8:	7bfb      	ldrb	r3, [r7, #15]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d106      	bne.n	80034fc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80034ee:	4b06      	ldr	r3, [pc, #24]	; (8003508 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034f0:	695a      	ldr	r2, [r3, #20]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	4904      	ldr	r1, [pc, #16]	; (8003508 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80034fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	40021000 	.word	0x40021000

0800350c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e040      	b.n	80035a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003522:	2b00      	cmp	r3, #0
 8003524:	d106      	bne.n	8003534 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f7fd fb74 	bl	8000c1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2224      	movs	r2, #36	; 0x24
 8003538:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0201 	bic.w	r2, r2, #1
 8003548:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f8c0 	bl	80036d0 <UART_SetConfig>
 8003550:	4603      	mov	r3, r0
 8003552:	2b01      	cmp	r3, #1
 8003554:	d101      	bne.n	800355a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e022      	b.n	80035a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355e:	2b00      	cmp	r3, #0
 8003560:	d002      	beq.n	8003568 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 fb6c 	bl	8003c40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003576:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689a      	ldr	r2, [r3, #8]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003586:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f042 0201 	orr.w	r2, r2, #1
 8003596:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 fbf3 	bl	8003d84 <UART_CheckIdleState>
 800359e:	4603      	mov	r3, r0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3708      	adds	r7, #8
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b08a      	sub	sp, #40	; 0x28
 80035ac:	af02      	add	r7, sp, #8
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	603b      	str	r3, [r7, #0]
 80035b4:	4613      	mov	r3, r2
 80035b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035bc:	2b20      	cmp	r3, #32
 80035be:	f040 8082 	bne.w	80036c6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d002      	beq.n	80035ce <HAL_UART_Transmit+0x26>
 80035c8:	88fb      	ldrh	r3, [r7, #6]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e07a      	b.n	80036c8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d101      	bne.n	80035e0 <HAL_UART_Transmit+0x38>
 80035dc:	2302      	movs	r3, #2
 80035de:	e073      	b.n	80036c8 <HAL_UART_Transmit+0x120>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2221      	movs	r2, #33	; 0x21
 80035f4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035f6:	f7fd fc07 	bl	8000e08 <HAL_GetTick>
 80035fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	88fa      	ldrh	r2, [r7, #6]
 8003600:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	88fa      	ldrh	r2, [r7, #6]
 8003608:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003614:	d108      	bne.n	8003628 <HAL_UART_Transmit+0x80>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d104      	bne.n	8003628 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800361e:	2300      	movs	r3, #0
 8003620:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	61bb      	str	r3, [r7, #24]
 8003626:	e003      	b.n	8003630 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800362c:	2300      	movs	r3, #0
 800362e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003638:	e02d      	b.n	8003696 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	2200      	movs	r2, #0
 8003642:	2180      	movs	r1, #128	; 0x80
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f000 fbe6 	bl	8003e16 <UART_WaitOnFlagUntilTimeout>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e039      	b.n	80036c8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10b      	bne.n	8003672 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	881a      	ldrh	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003666:	b292      	uxth	r2, r2
 8003668:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	3302      	adds	r3, #2
 800366e:	61bb      	str	r3, [r7, #24]
 8003670:	e008      	b.n	8003684 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	781a      	ldrb	r2, [r3, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	b292      	uxth	r2, r2
 800367c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	3301      	adds	r3, #1
 8003682:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800368a:	b29b      	uxth	r3, r3
 800368c:	3b01      	subs	r3, #1
 800368e:	b29a      	uxth	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800369c:	b29b      	uxth	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1cb      	bne.n	800363a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	9300      	str	r3, [sp, #0]
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	2200      	movs	r2, #0
 80036aa:	2140      	movs	r1, #64	; 0x40
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f000 fbb2 	bl	8003e16 <UART_WaitOnFlagUntilTimeout>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e005      	b.n	80036c8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2220      	movs	r2, #32
 80036c0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80036c2:	2300      	movs	r3, #0
 80036c4:	e000      	b.n	80036c8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80036c6:	2302      	movs	r3, #2
  }
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3720      	adds	r7, #32
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036d4:	b08a      	sub	sp, #40	; 0x28
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036da:	2300      	movs	r3, #0
 80036dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	689a      	ldr	r2, [r3, #8]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	431a      	orrs	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	431a      	orrs	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	69db      	ldr	r3, [r3, #28]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	4ba4      	ldr	r3, [pc, #656]	; (8003990 <UART_SetConfig+0x2c0>)
 8003700:	4013      	ands	r3, r2
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	6812      	ldr	r2, [r2, #0]
 8003706:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003708:	430b      	orrs	r3, r1
 800370a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	68da      	ldr	r2, [r3, #12]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a99      	ldr	r2, [pc, #612]	; (8003994 <UART_SetConfig+0x2c4>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d004      	beq.n	800373c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003738:	4313      	orrs	r3, r2
 800373a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800374c:	430a      	orrs	r2, r1
 800374e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a90      	ldr	r2, [pc, #576]	; (8003998 <UART_SetConfig+0x2c8>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d126      	bne.n	80037a8 <UART_SetConfig+0xd8>
 800375a:	4b90      	ldr	r3, [pc, #576]	; (800399c <UART_SetConfig+0x2cc>)
 800375c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003760:	f003 0303 	and.w	r3, r3, #3
 8003764:	2b03      	cmp	r3, #3
 8003766:	d81b      	bhi.n	80037a0 <UART_SetConfig+0xd0>
 8003768:	a201      	add	r2, pc, #4	; (adr r2, 8003770 <UART_SetConfig+0xa0>)
 800376a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376e:	bf00      	nop
 8003770:	08003781 	.word	0x08003781
 8003774:	08003791 	.word	0x08003791
 8003778:	08003789 	.word	0x08003789
 800377c:	08003799 	.word	0x08003799
 8003780:	2301      	movs	r3, #1
 8003782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003786:	e116      	b.n	80039b6 <UART_SetConfig+0x2e6>
 8003788:	2302      	movs	r3, #2
 800378a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800378e:	e112      	b.n	80039b6 <UART_SetConfig+0x2e6>
 8003790:	2304      	movs	r3, #4
 8003792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003796:	e10e      	b.n	80039b6 <UART_SetConfig+0x2e6>
 8003798:	2308      	movs	r3, #8
 800379a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800379e:	e10a      	b.n	80039b6 <UART_SetConfig+0x2e6>
 80037a0:	2310      	movs	r3, #16
 80037a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037a6:	e106      	b.n	80039b6 <UART_SetConfig+0x2e6>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a7c      	ldr	r2, [pc, #496]	; (80039a0 <UART_SetConfig+0x2d0>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d138      	bne.n	8003824 <UART_SetConfig+0x154>
 80037b2:	4b7a      	ldr	r3, [pc, #488]	; (800399c <UART_SetConfig+0x2cc>)
 80037b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b8:	f003 030c 	and.w	r3, r3, #12
 80037bc:	2b0c      	cmp	r3, #12
 80037be:	d82d      	bhi.n	800381c <UART_SetConfig+0x14c>
 80037c0:	a201      	add	r2, pc, #4	; (adr r2, 80037c8 <UART_SetConfig+0xf8>)
 80037c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c6:	bf00      	nop
 80037c8:	080037fd 	.word	0x080037fd
 80037cc:	0800381d 	.word	0x0800381d
 80037d0:	0800381d 	.word	0x0800381d
 80037d4:	0800381d 	.word	0x0800381d
 80037d8:	0800380d 	.word	0x0800380d
 80037dc:	0800381d 	.word	0x0800381d
 80037e0:	0800381d 	.word	0x0800381d
 80037e4:	0800381d 	.word	0x0800381d
 80037e8:	08003805 	.word	0x08003805
 80037ec:	0800381d 	.word	0x0800381d
 80037f0:	0800381d 	.word	0x0800381d
 80037f4:	0800381d 	.word	0x0800381d
 80037f8:	08003815 	.word	0x08003815
 80037fc:	2300      	movs	r3, #0
 80037fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003802:	e0d8      	b.n	80039b6 <UART_SetConfig+0x2e6>
 8003804:	2302      	movs	r3, #2
 8003806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800380a:	e0d4      	b.n	80039b6 <UART_SetConfig+0x2e6>
 800380c:	2304      	movs	r3, #4
 800380e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003812:	e0d0      	b.n	80039b6 <UART_SetConfig+0x2e6>
 8003814:	2308      	movs	r3, #8
 8003816:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800381a:	e0cc      	b.n	80039b6 <UART_SetConfig+0x2e6>
 800381c:	2310      	movs	r3, #16
 800381e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003822:	e0c8      	b.n	80039b6 <UART_SetConfig+0x2e6>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a5e      	ldr	r2, [pc, #376]	; (80039a4 <UART_SetConfig+0x2d4>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d125      	bne.n	800387a <UART_SetConfig+0x1aa>
 800382e:	4b5b      	ldr	r3, [pc, #364]	; (800399c <UART_SetConfig+0x2cc>)
 8003830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003834:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003838:	2b30      	cmp	r3, #48	; 0x30
 800383a:	d016      	beq.n	800386a <UART_SetConfig+0x19a>
 800383c:	2b30      	cmp	r3, #48	; 0x30
 800383e:	d818      	bhi.n	8003872 <UART_SetConfig+0x1a2>
 8003840:	2b20      	cmp	r3, #32
 8003842:	d00a      	beq.n	800385a <UART_SetConfig+0x18a>
 8003844:	2b20      	cmp	r3, #32
 8003846:	d814      	bhi.n	8003872 <UART_SetConfig+0x1a2>
 8003848:	2b00      	cmp	r3, #0
 800384a:	d002      	beq.n	8003852 <UART_SetConfig+0x182>
 800384c:	2b10      	cmp	r3, #16
 800384e:	d008      	beq.n	8003862 <UART_SetConfig+0x192>
 8003850:	e00f      	b.n	8003872 <UART_SetConfig+0x1a2>
 8003852:	2300      	movs	r3, #0
 8003854:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003858:	e0ad      	b.n	80039b6 <UART_SetConfig+0x2e6>
 800385a:	2302      	movs	r3, #2
 800385c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003860:	e0a9      	b.n	80039b6 <UART_SetConfig+0x2e6>
 8003862:	2304      	movs	r3, #4
 8003864:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003868:	e0a5      	b.n	80039b6 <UART_SetConfig+0x2e6>
 800386a:	2308      	movs	r3, #8
 800386c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003870:	e0a1      	b.n	80039b6 <UART_SetConfig+0x2e6>
 8003872:	2310      	movs	r3, #16
 8003874:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003878:	e09d      	b.n	80039b6 <UART_SetConfig+0x2e6>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a4a      	ldr	r2, [pc, #296]	; (80039a8 <UART_SetConfig+0x2d8>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d125      	bne.n	80038d0 <UART_SetConfig+0x200>
 8003884:	4b45      	ldr	r3, [pc, #276]	; (800399c <UART_SetConfig+0x2cc>)
 8003886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800388e:	2bc0      	cmp	r3, #192	; 0xc0
 8003890:	d016      	beq.n	80038c0 <UART_SetConfig+0x1f0>
 8003892:	2bc0      	cmp	r3, #192	; 0xc0
 8003894:	d818      	bhi.n	80038c8 <UART_SetConfig+0x1f8>
 8003896:	2b80      	cmp	r3, #128	; 0x80
 8003898:	d00a      	beq.n	80038b0 <UART_SetConfig+0x1e0>
 800389a:	2b80      	cmp	r3, #128	; 0x80
 800389c:	d814      	bhi.n	80038c8 <UART_SetConfig+0x1f8>
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d002      	beq.n	80038a8 <UART_SetConfig+0x1d8>
 80038a2:	2b40      	cmp	r3, #64	; 0x40
 80038a4:	d008      	beq.n	80038b8 <UART_SetConfig+0x1e8>
 80038a6:	e00f      	b.n	80038c8 <UART_SetConfig+0x1f8>
 80038a8:	2300      	movs	r3, #0
 80038aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ae:	e082      	b.n	80039b6 <UART_SetConfig+0x2e6>
 80038b0:	2302      	movs	r3, #2
 80038b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038b6:	e07e      	b.n	80039b6 <UART_SetConfig+0x2e6>
 80038b8:	2304      	movs	r3, #4
 80038ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038be:	e07a      	b.n	80039b6 <UART_SetConfig+0x2e6>
 80038c0:	2308      	movs	r3, #8
 80038c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038c6:	e076      	b.n	80039b6 <UART_SetConfig+0x2e6>
 80038c8:	2310      	movs	r3, #16
 80038ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ce:	e072      	b.n	80039b6 <UART_SetConfig+0x2e6>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a35      	ldr	r2, [pc, #212]	; (80039ac <UART_SetConfig+0x2dc>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d12a      	bne.n	8003930 <UART_SetConfig+0x260>
 80038da:	4b30      	ldr	r3, [pc, #192]	; (800399c <UART_SetConfig+0x2cc>)
 80038dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038e8:	d01a      	beq.n	8003920 <UART_SetConfig+0x250>
 80038ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038ee:	d81b      	bhi.n	8003928 <UART_SetConfig+0x258>
 80038f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038f4:	d00c      	beq.n	8003910 <UART_SetConfig+0x240>
 80038f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038fa:	d815      	bhi.n	8003928 <UART_SetConfig+0x258>
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d003      	beq.n	8003908 <UART_SetConfig+0x238>
 8003900:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003904:	d008      	beq.n	8003918 <UART_SetConfig+0x248>
 8003906:	e00f      	b.n	8003928 <UART_SetConfig+0x258>
 8003908:	2300      	movs	r3, #0
 800390a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800390e:	e052      	b.n	80039b6 <UART_SetConfig+0x2e6>
 8003910:	2302      	movs	r3, #2
 8003912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003916:	e04e      	b.n	80039b6 <UART_SetConfig+0x2e6>
 8003918:	2304      	movs	r3, #4
 800391a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800391e:	e04a      	b.n	80039b6 <UART_SetConfig+0x2e6>
 8003920:	2308      	movs	r3, #8
 8003922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003926:	e046      	b.n	80039b6 <UART_SetConfig+0x2e6>
 8003928:	2310      	movs	r3, #16
 800392a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800392e:	e042      	b.n	80039b6 <UART_SetConfig+0x2e6>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a17      	ldr	r2, [pc, #92]	; (8003994 <UART_SetConfig+0x2c4>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d13a      	bne.n	80039b0 <UART_SetConfig+0x2e0>
 800393a:	4b18      	ldr	r3, [pc, #96]	; (800399c <UART_SetConfig+0x2cc>)
 800393c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003940:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003944:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003948:	d01a      	beq.n	8003980 <UART_SetConfig+0x2b0>
 800394a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800394e:	d81b      	bhi.n	8003988 <UART_SetConfig+0x2b8>
 8003950:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003954:	d00c      	beq.n	8003970 <UART_SetConfig+0x2a0>
 8003956:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800395a:	d815      	bhi.n	8003988 <UART_SetConfig+0x2b8>
 800395c:	2b00      	cmp	r3, #0
 800395e:	d003      	beq.n	8003968 <UART_SetConfig+0x298>
 8003960:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003964:	d008      	beq.n	8003978 <UART_SetConfig+0x2a8>
 8003966:	e00f      	b.n	8003988 <UART_SetConfig+0x2b8>
 8003968:	2300      	movs	r3, #0
 800396a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800396e:	e022      	b.n	80039b6 <UART_SetConfig+0x2e6>
 8003970:	2302      	movs	r3, #2
 8003972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003976:	e01e      	b.n	80039b6 <UART_SetConfig+0x2e6>
 8003978:	2304      	movs	r3, #4
 800397a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800397e:	e01a      	b.n	80039b6 <UART_SetConfig+0x2e6>
 8003980:	2308      	movs	r3, #8
 8003982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003986:	e016      	b.n	80039b6 <UART_SetConfig+0x2e6>
 8003988:	2310      	movs	r3, #16
 800398a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800398e:	e012      	b.n	80039b6 <UART_SetConfig+0x2e6>
 8003990:	efff69f3 	.word	0xefff69f3
 8003994:	40008000 	.word	0x40008000
 8003998:	40013800 	.word	0x40013800
 800399c:	40021000 	.word	0x40021000
 80039a0:	40004400 	.word	0x40004400
 80039a4:	40004800 	.word	0x40004800
 80039a8:	40004c00 	.word	0x40004c00
 80039ac:	40005000 	.word	0x40005000
 80039b0:	2310      	movs	r3, #16
 80039b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a9f      	ldr	r2, [pc, #636]	; (8003c38 <UART_SetConfig+0x568>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d17a      	bne.n	8003ab6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80039c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	d824      	bhi.n	8003a12 <UART_SetConfig+0x342>
 80039c8:	a201      	add	r2, pc, #4	; (adr r2, 80039d0 <UART_SetConfig+0x300>)
 80039ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ce:	bf00      	nop
 80039d0:	080039f5 	.word	0x080039f5
 80039d4:	08003a13 	.word	0x08003a13
 80039d8:	080039fd 	.word	0x080039fd
 80039dc:	08003a13 	.word	0x08003a13
 80039e0:	08003a03 	.word	0x08003a03
 80039e4:	08003a13 	.word	0x08003a13
 80039e8:	08003a13 	.word	0x08003a13
 80039ec:	08003a13 	.word	0x08003a13
 80039f0:	08003a0b 	.word	0x08003a0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039f4:	f7ff f842 	bl	8002a7c <HAL_RCC_GetPCLK1Freq>
 80039f8:	61f8      	str	r0, [r7, #28]
        break;
 80039fa:	e010      	b.n	8003a1e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039fc:	4b8f      	ldr	r3, [pc, #572]	; (8003c3c <UART_SetConfig+0x56c>)
 80039fe:	61fb      	str	r3, [r7, #28]
        break;
 8003a00:	e00d      	b.n	8003a1e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a02:	f7fe ffa3 	bl	800294c <HAL_RCC_GetSysClockFreq>
 8003a06:	61f8      	str	r0, [r7, #28]
        break;
 8003a08:	e009      	b.n	8003a1e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a0e:	61fb      	str	r3, [r7, #28]
        break;
 8003a10:	e005      	b.n	8003a1e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003a12:	2300      	movs	r3, #0
 8003a14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 80fb 	beq.w	8003c1c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	4413      	add	r3, r2
 8003a30:	69fa      	ldr	r2, [r7, #28]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d305      	bcc.n	8003a42 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a3c:	69fa      	ldr	r2, [r7, #28]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d903      	bls.n	8003a4a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003a48:	e0e8      	b.n	8003c1c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	461c      	mov	r4, r3
 8003a50:	4615      	mov	r5, r2
 8003a52:	f04f 0200 	mov.w	r2, #0
 8003a56:	f04f 0300 	mov.w	r3, #0
 8003a5a:	022b      	lsls	r3, r5, #8
 8003a5c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003a60:	0222      	lsls	r2, r4, #8
 8003a62:	68f9      	ldr	r1, [r7, #12]
 8003a64:	6849      	ldr	r1, [r1, #4]
 8003a66:	0849      	lsrs	r1, r1, #1
 8003a68:	2000      	movs	r0, #0
 8003a6a:	4688      	mov	r8, r1
 8003a6c:	4681      	mov	r9, r0
 8003a6e:	eb12 0a08 	adds.w	sl, r2, r8
 8003a72:	eb43 0b09 	adc.w	fp, r3, r9
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	603b      	str	r3, [r7, #0]
 8003a7e:	607a      	str	r2, [r7, #4]
 8003a80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a84:	4650      	mov	r0, sl
 8003a86:	4659      	mov	r1, fp
 8003a88:	f7fc fbfa 	bl	8000280 <__aeabi_uldivmod>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	460b      	mov	r3, r1
 8003a90:	4613      	mov	r3, r2
 8003a92:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a9a:	d308      	bcc.n	8003aae <UART_SetConfig+0x3de>
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003aa2:	d204      	bcs.n	8003aae <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	60da      	str	r2, [r3, #12]
 8003aac:	e0b6      	b.n	8003c1c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003ab4:	e0b2      	b.n	8003c1c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003abe:	d15e      	bne.n	8003b7e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003ac0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	d828      	bhi.n	8003b1a <UART_SetConfig+0x44a>
 8003ac8:	a201      	add	r2, pc, #4	; (adr r2, 8003ad0 <UART_SetConfig+0x400>)
 8003aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ace:	bf00      	nop
 8003ad0:	08003af5 	.word	0x08003af5
 8003ad4:	08003afd 	.word	0x08003afd
 8003ad8:	08003b05 	.word	0x08003b05
 8003adc:	08003b1b 	.word	0x08003b1b
 8003ae0:	08003b0b 	.word	0x08003b0b
 8003ae4:	08003b1b 	.word	0x08003b1b
 8003ae8:	08003b1b 	.word	0x08003b1b
 8003aec:	08003b1b 	.word	0x08003b1b
 8003af0:	08003b13 	.word	0x08003b13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003af4:	f7fe ffc2 	bl	8002a7c <HAL_RCC_GetPCLK1Freq>
 8003af8:	61f8      	str	r0, [r7, #28]
        break;
 8003afa:	e014      	b.n	8003b26 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003afc:	f7fe ffd4 	bl	8002aa8 <HAL_RCC_GetPCLK2Freq>
 8003b00:	61f8      	str	r0, [r7, #28]
        break;
 8003b02:	e010      	b.n	8003b26 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b04:	4b4d      	ldr	r3, [pc, #308]	; (8003c3c <UART_SetConfig+0x56c>)
 8003b06:	61fb      	str	r3, [r7, #28]
        break;
 8003b08:	e00d      	b.n	8003b26 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b0a:	f7fe ff1f 	bl	800294c <HAL_RCC_GetSysClockFreq>
 8003b0e:	61f8      	str	r0, [r7, #28]
        break;
 8003b10:	e009      	b.n	8003b26 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b16:	61fb      	str	r3, [r7, #28]
        break;
 8003b18:	e005      	b.n	8003b26 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003b24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d077      	beq.n	8003c1c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	005a      	lsls	r2, r3, #1
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	085b      	lsrs	r3, r3, #1
 8003b36:	441a      	add	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b40:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	2b0f      	cmp	r3, #15
 8003b46:	d916      	bls.n	8003b76 <UART_SetConfig+0x4a6>
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b4e:	d212      	bcs.n	8003b76 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	f023 030f 	bic.w	r3, r3, #15
 8003b58:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	085b      	lsrs	r3, r3, #1
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	8afb      	ldrh	r3, [r7, #22]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	8afa      	ldrh	r2, [r7, #22]
 8003b72:	60da      	str	r2, [r3, #12]
 8003b74:	e052      	b.n	8003c1c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003b7c:	e04e      	b.n	8003c1c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b82:	2b08      	cmp	r3, #8
 8003b84:	d827      	bhi.n	8003bd6 <UART_SetConfig+0x506>
 8003b86:	a201      	add	r2, pc, #4	; (adr r2, 8003b8c <UART_SetConfig+0x4bc>)
 8003b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8c:	08003bb1 	.word	0x08003bb1
 8003b90:	08003bb9 	.word	0x08003bb9
 8003b94:	08003bc1 	.word	0x08003bc1
 8003b98:	08003bd7 	.word	0x08003bd7
 8003b9c:	08003bc7 	.word	0x08003bc7
 8003ba0:	08003bd7 	.word	0x08003bd7
 8003ba4:	08003bd7 	.word	0x08003bd7
 8003ba8:	08003bd7 	.word	0x08003bd7
 8003bac:	08003bcf 	.word	0x08003bcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bb0:	f7fe ff64 	bl	8002a7c <HAL_RCC_GetPCLK1Freq>
 8003bb4:	61f8      	str	r0, [r7, #28]
        break;
 8003bb6:	e014      	b.n	8003be2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bb8:	f7fe ff76 	bl	8002aa8 <HAL_RCC_GetPCLK2Freq>
 8003bbc:	61f8      	str	r0, [r7, #28]
        break;
 8003bbe:	e010      	b.n	8003be2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bc0:	4b1e      	ldr	r3, [pc, #120]	; (8003c3c <UART_SetConfig+0x56c>)
 8003bc2:	61fb      	str	r3, [r7, #28]
        break;
 8003bc4:	e00d      	b.n	8003be2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bc6:	f7fe fec1 	bl	800294c <HAL_RCC_GetSysClockFreq>
 8003bca:	61f8      	str	r0, [r7, #28]
        break;
 8003bcc:	e009      	b.n	8003be2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bd2:	61fb      	str	r3, [r7, #28]
        break;
 8003bd4:	e005      	b.n	8003be2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003be0:	bf00      	nop
    }

    if (pclk != 0U)
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d019      	beq.n	8003c1c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	085a      	lsrs	r2, r3, #1
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	441a      	add	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bfa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	2b0f      	cmp	r3, #15
 8003c00:	d909      	bls.n	8003c16 <UART_SetConfig+0x546>
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c08:	d205      	bcs.n	8003c16 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	60da      	str	r2, [r3, #12]
 8003c14:	e002      	b.n	8003c1c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003c28:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3728      	adds	r7, #40	; 0x28
 8003c30:	46bd      	mov	sp, r7
 8003c32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c36:	bf00      	nop
 8003c38:	40008000 	.word	0x40008000
 8003c3c:	00f42400 	.word	0x00f42400

08003c40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00a      	beq.n	8003c6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00a      	beq.n	8003c8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c90:	f003 0304 	and.w	r3, r3, #4
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00a      	beq.n	8003cae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb2:	f003 0308 	and.w	r3, r3, #8
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00a      	beq.n	8003cd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd4:	f003 0310 	and.w	r3, r3, #16
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00a      	beq.n	8003cf2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	f003 0320 	and.w	r3, r3, #32
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00a      	beq.n	8003d14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d01a      	beq.n	8003d56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d3e:	d10a      	bne.n	8003d56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00a      	beq.n	8003d78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	605a      	str	r2, [r3, #4]
  }
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af02      	add	r7, sp, #8
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d94:	f7fd f838 	bl	8000e08 <HAL_GetTick>
 8003d98:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0308 	and.w	r3, r3, #8
 8003da4:	2b08      	cmp	r3, #8
 8003da6:	d10e      	bne.n	8003dc6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003da8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003dac:	9300      	str	r3, [sp, #0]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f82d 	bl	8003e16 <UART_WaitOnFlagUntilTimeout>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e023      	b.n	8003e0e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0304 	and.w	r3, r3, #4
 8003dd0:	2b04      	cmp	r3, #4
 8003dd2:	d10e      	bne.n	8003df2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f817 	bl	8003e16 <UART_WaitOnFlagUntilTimeout>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e00d      	b.n	8003e0e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2220      	movs	r2, #32
 8003df6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b09c      	sub	sp, #112	; 0x70
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	60f8      	str	r0, [r7, #12]
 8003e1e:	60b9      	str	r1, [r7, #8]
 8003e20:	603b      	str	r3, [r7, #0]
 8003e22:	4613      	mov	r3, r2
 8003e24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e26:	e0a5      	b.n	8003f74 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e2e:	f000 80a1 	beq.w	8003f74 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e32:	f7fc ffe9 	bl	8000e08 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d302      	bcc.n	8003e48 <UART_WaitOnFlagUntilTimeout+0x32>
 8003e42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d13e      	bne.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e50:	e853 3f00 	ldrex	r3, [r3]
 8003e54:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003e56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e5c:	667b      	str	r3, [r7, #100]	; 0x64
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	461a      	mov	r2, r3
 8003e64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e68:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003e6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e6e:	e841 2300 	strex	r3, r2, [r1]
 8003e72:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003e74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1e6      	bne.n	8003e48 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	3308      	adds	r3, #8
 8003e80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e84:	e853 3f00 	ldrex	r3, [r3]
 8003e88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e8c:	f023 0301 	bic.w	r3, r3, #1
 8003e90:	663b      	str	r3, [r7, #96]	; 0x60
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	3308      	adds	r3, #8
 8003e98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003e9a:	64ba      	str	r2, [r7, #72]	; 0x48
 8003e9c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003ea0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ea2:	e841 2300 	strex	r3, r2, [r1]
 8003ea6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003ea8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1e5      	bne.n	8003e7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e067      	b.n	8003f96 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d04f      	beq.n	8003f74 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ede:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ee2:	d147      	bne.n	8003f74 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003eec:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef6:	e853 3f00 	ldrex	r3, [r3]
 8003efa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	461a      	mov	r2, r3
 8003f0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f0c:	637b      	str	r3, [r7, #52]	; 0x34
 8003f0e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f14:	e841 2300 	strex	r3, r2, [r1]
 8003f18:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1e6      	bne.n	8003eee <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	3308      	adds	r3, #8
 8003f26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	e853 3f00 	ldrex	r3, [r3]
 8003f2e:	613b      	str	r3, [r7, #16]
   return(result);
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	f023 0301 	bic.w	r3, r3, #1
 8003f36:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	3308      	adds	r3, #8
 8003f3e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003f40:	623a      	str	r2, [r7, #32]
 8003f42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f44:	69f9      	ldr	r1, [r7, #28]
 8003f46:	6a3a      	ldr	r2, [r7, #32]
 8003f48:	e841 2300 	strex	r3, r2, [r1]
 8003f4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1e5      	bne.n	8003f20 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2220      	movs	r2, #32
 8003f58:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2220      	movs	r2, #32
 8003f5e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2220      	movs	r2, #32
 8003f64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e010      	b.n	8003f96 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	69da      	ldr	r2, [r3, #28]
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	bf0c      	ite	eq
 8003f84:	2301      	moveq	r3, #1
 8003f86:	2300      	movne	r3, #0
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	79fb      	ldrb	r3, [r7, #7]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	f43f af4a 	beq.w	8003e28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3770      	adds	r7, #112	; 0x70
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
	...

08003fa0 <__errno>:
 8003fa0:	4b01      	ldr	r3, [pc, #4]	; (8003fa8 <__errno+0x8>)
 8003fa2:	6818      	ldr	r0, [r3, #0]
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	2000000c 	.word	0x2000000c

08003fac <__libc_init_array>:
 8003fac:	b570      	push	{r4, r5, r6, lr}
 8003fae:	4d0d      	ldr	r5, [pc, #52]	; (8003fe4 <__libc_init_array+0x38>)
 8003fb0:	4c0d      	ldr	r4, [pc, #52]	; (8003fe8 <__libc_init_array+0x3c>)
 8003fb2:	1b64      	subs	r4, r4, r5
 8003fb4:	10a4      	asrs	r4, r4, #2
 8003fb6:	2600      	movs	r6, #0
 8003fb8:	42a6      	cmp	r6, r4
 8003fba:	d109      	bne.n	8003fd0 <__libc_init_array+0x24>
 8003fbc:	4d0b      	ldr	r5, [pc, #44]	; (8003fec <__libc_init_array+0x40>)
 8003fbe:	4c0c      	ldr	r4, [pc, #48]	; (8003ff0 <__libc_init_array+0x44>)
 8003fc0:	f000 fc8e 	bl	80048e0 <_init>
 8003fc4:	1b64      	subs	r4, r4, r5
 8003fc6:	10a4      	asrs	r4, r4, #2
 8003fc8:	2600      	movs	r6, #0
 8003fca:	42a6      	cmp	r6, r4
 8003fcc:	d105      	bne.n	8003fda <__libc_init_array+0x2e>
 8003fce:	bd70      	pop	{r4, r5, r6, pc}
 8003fd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fd4:	4798      	blx	r3
 8003fd6:	3601      	adds	r6, #1
 8003fd8:	e7ee      	b.n	8003fb8 <__libc_init_array+0xc>
 8003fda:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fde:	4798      	blx	r3
 8003fe0:	3601      	adds	r6, #1
 8003fe2:	e7f2      	b.n	8003fca <__libc_init_array+0x1e>
 8003fe4:	08004998 	.word	0x08004998
 8003fe8:	08004998 	.word	0x08004998
 8003fec:	08004998 	.word	0x08004998
 8003ff0:	0800499c 	.word	0x0800499c

08003ff4 <memset>:
 8003ff4:	4402      	add	r2, r0
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d100      	bne.n	8003ffe <memset+0xa>
 8003ffc:	4770      	bx	lr
 8003ffe:	f803 1b01 	strb.w	r1, [r3], #1
 8004002:	e7f9      	b.n	8003ff8 <memset+0x4>

08004004 <siprintf>:
 8004004:	b40e      	push	{r1, r2, r3}
 8004006:	b500      	push	{lr}
 8004008:	b09c      	sub	sp, #112	; 0x70
 800400a:	ab1d      	add	r3, sp, #116	; 0x74
 800400c:	9002      	str	r0, [sp, #8]
 800400e:	9006      	str	r0, [sp, #24]
 8004010:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004014:	4809      	ldr	r0, [pc, #36]	; (800403c <siprintf+0x38>)
 8004016:	9107      	str	r1, [sp, #28]
 8004018:	9104      	str	r1, [sp, #16]
 800401a:	4909      	ldr	r1, [pc, #36]	; (8004040 <siprintf+0x3c>)
 800401c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004020:	9105      	str	r1, [sp, #20]
 8004022:	6800      	ldr	r0, [r0, #0]
 8004024:	9301      	str	r3, [sp, #4]
 8004026:	a902      	add	r1, sp, #8
 8004028:	f000 f868 	bl	80040fc <_svfiprintf_r>
 800402c:	9b02      	ldr	r3, [sp, #8]
 800402e:	2200      	movs	r2, #0
 8004030:	701a      	strb	r2, [r3, #0]
 8004032:	b01c      	add	sp, #112	; 0x70
 8004034:	f85d eb04 	ldr.w	lr, [sp], #4
 8004038:	b003      	add	sp, #12
 800403a:	4770      	bx	lr
 800403c:	2000000c 	.word	0x2000000c
 8004040:	ffff0208 	.word	0xffff0208

08004044 <__ssputs_r>:
 8004044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004048:	688e      	ldr	r6, [r1, #8]
 800404a:	429e      	cmp	r6, r3
 800404c:	4682      	mov	sl, r0
 800404e:	460c      	mov	r4, r1
 8004050:	4690      	mov	r8, r2
 8004052:	461f      	mov	r7, r3
 8004054:	d838      	bhi.n	80040c8 <__ssputs_r+0x84>
 8004056:	898a      	ldrh	r2, [r1, #12]
 8004058:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800405c:	d032      	beq.n	80040c4 <__ssputs_r+0x80>
 800405e:	6825      	ldr	r5, [r4, #0]
 8004060:	6909      	ldr	r1, [r1, #16]
 8004062:	eba5 0901 	sub.w	r9, r5, r1
 8004066:	6965      	ldr	r5, [r4, #20]
 8004068:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800406c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004070:	3301      	adds	r3, #1
 8004072:	444b      	add	r3, r9
 8004074:	106d      	asrs	r5, r5, #1
 8004076:	429d      	cmp	r5, r3
 8004078:	bf38      	it	cc
 800407a:	461d      	movcc	r5, r3
 800407c:	0553      	lsls	r3, r2, #21
 800407e:	d531      	bpl.n	80040e4 <__ssputs_r+0xa0>
 8004080:	4629      	mov	r1, r5
 8004082:	f000 fb63 	bl	800474c <_malloc_r>
 8004086:	4606      	mov	r6, r0
 8004088:	b950      	cbnz	r0, 80040a0 <__ssputs_r+0x5c>
 800408a:	230c      	movs	r3, #12
 800408c:	f8ca 3000 	str.w	r3, [sl]
 8004090:	89a3      	ldrh	r3, [r4, #12]
 8004092:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004096:	81a3      	strh	r3, [r4, #12]
 8004098:	f04f 30ff 	mov.w	r0, #4294967295
 800409c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040a0:	6921      	ldr	r1, [r4, #16]
 80040a2:	464a      	mov	r2, r9
 80040a4:	f000 fabe 	bl	8004624 <memcpy>
 80040a8:	89a3      	ldrh	r3, [r4, #12]
 80040aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80040ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040b2:	81a3      	strh	r3, [r4, #12]
 80040b4:	6126      	str	r6, [r4, #16]
 80040b6:	6165      	str	r5, [r4, #20]
 80040b8:	444e      	add	r6, r9
 80040ba:	eba5 0509 	sub.w	r5, r5, r9
 80040be:	6026      	str	r6, [r4, #0]
 80040c0:	60a5      	str	r5, [r4, #8]
 80040c2:	463e      	mov	r6, r7
 80040c4:	42be      	cmp	r6, r7
 80040c6:	d900      	bls.n	80040ca <__ssputs_r+0x86>
 80040c8:	463e      	mov	r6, r7
 80040ca:	6820      	ldr	r0, [r4, #0]
 80040cc:	4632      	mov	r2, r6
 80040ce:	4641      	mov	r1, r8
 80040d0:	f000 fab6 	bl	8004640 <memmove>
 80040d4:	68a3      	ldr	r3, [r4, #8]
 80040d6:	1b9b      	subs	r3, r3, r6
 80040d8:	60a3      	str	r3, [r4, #8]
 80040da:	6823      	ldr	r3, [r4, #0]
 80040dc:	4433      	add	r3, r6
 80040de:	6023      	str	r3, [r4, #0]
 80040e0:	2000      	movs	r0, #0
 80040e2:	e7db      	b.n	800409c <__ssputs_r+0x58>
 80040e4:	462a      	mov	r2, r5
 80040e6:	f000 fba5 	bl	8004834 <_realloc_r>
 80040ea:	4606      	mov	r6, r0
 80040ec:	2800      	cmp	r0, #0
 80040ee:	d1e1      	bne.n	80040b4 <__ssputs_r+0x70>
 80040f0:	6921      	ldr	r1, [r4, #16]
 80040f2:	4650      	mov	r0, sl
 80040f4:	f000 fabe 	bl	8004674 <_free_r>
 80040f8:	e7c7      	b.n	800408a <__ssputs_r+0x46>
	...

080040fc <_svfiprintf_r>:
 80040fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004100:	4698      	mov	r8, r3
 8004102:	898b      	ldrh	r3, [r1, #12]
 8004104:	061b      	lsls	r3, r3, #24
 8004106:	b09d      	sub	sp, #116	; 0x74
 8004108:	4607      	mov	r7, r0
 800410a:	460d      	mov	r5, r1
 800410c:	4614      	mov	r4, r2
 800410e:	d50e      	bpl.n	800412e <_svfiprintf_r+0x32>
 8004110:	690b      	ldr	r3, [r1, #16]
 8004112:	b963      	cbnz	r3, 800412e <_svfiprintf_r+0x32>
 8004114:	2140      	movs	r1, #64	; 0x40
 8004116:	f000 fb19 	bl	800474c <_malloc_r>
 800411a:	6028      	str	r0, [r5, #0]
 800411c:	6128      	str	r0, [r5, #16]
 800411e:	b920      	cbnz	r0, 800412a <_svfiprintf_r+0x2e>
 8004120:	230c      	movs	r3, #12
 8004122:	603b      	str	r3, [r7, #0]
 8004124:	f04f 30ff 	mov.w	r0, #4294967295
 8004128:	e0d1      	b.n	80042ce <_svfiprintf_r+0x1d2>
 800412a:	2340      	movs	r3, #64	; 0x40
 800412c:	616b      	str	r3, [r5, #20]
 800412e:	2300      	movs	r3, #0
 8004130:	9309      	str	r3, [sp, #36]	; 0x24
 8004132:	2320      	movs	r3, #32
 8004134:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004138:	f8cd 800c 	str.w	r8, [sp, #12]
 800413c:	2330      	movs	r3, #48	; 0x30
 800413e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80042e8 <_svfiprintf_r+0x1ec>
 8004142:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004146:	f04f 0901 	mov.w	r9, #1
 800414a:	4623      	mov	r3, r4
 800414c:	469a      	mov	sl, r3
 800414e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004152:	b10a      	cbz	r2, 8004158 <_svfiprintf_r+0x5c>
 8004154:	2a25      	cmp	r2, #37	; 0x25
 8004156:	d1f9      	bne.n	800414c <_svfiprintf_r+0x50>
 8004158:	ebba 0b04 	subs.w	fp, sl, r4
 800415c:	d00b      	beq.n	8004176 <_svfiprintf_r+0x7a>
 800415e:	465b      	mov	r3, fp
 8004160:	4622      	mov	r2, r4
 8004162:	4629      	mov	r1, r5
 8004164:	4638      	mov	r0, r7
 8004166:	f7ff ff6d 	bl	8004044 <__ssputs_r>
 800416a:	3001      	adds	r0, #1
 800416c:	f000 80aa 	beq.w	80042c4 <_svfiprintf_r+0x1c8>
 8004170:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004172:	445a      	add	r2, fp
 8004174:	9209      	str	r2, [sp, #36]	; 0x24
 8004176:	f89a 3000 	ldrb.w	r3, [sl]
 800417a:	2b00      	cmp	r3, #0
 800417c:	f000 80a2 	beq.w	80042c4 <_svfiprintf_r+0x1c8>
 8004180:	2300      	movs	r3, #0
 8004182:	f04f 32ff 	mov.w	r2, #4294967295
 8004186:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800418a:	f10a 0a01 	add.w	sl, sl, #1
 800418e:	9304      	str	r3, [sp, #16]
 8004190:	9307      	str	r3, [sp, #28]
 8004192:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004196:	931a      	str	r3, [sp, #104]	; 0x68
 8004198:	4654      	mov	r4, sl
 800419a:	2205      	movs	r2, #5
 800419c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041a0:	4851      	ldr	r0, [pc, #324]	; (80042e8 <_svfiprintf_r+0x1ec>)
 80041a2:	f7fc f81d 	bl	80001e0 <memchr>
 80041a6:	9a04      	ldr	r2, [sp, #16]
 80041a8:	b9d8      	cbnz	r0, 80041e2 <_svfiprintf_r+0xe6>
 80041aa:	06d0      	lsls	r0, r2, #27
 80041ac:	bf44      	itt	mi
 80041ae:	2320      	movmi	r3, #32
 80041b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041b4:	0711      	lsls	r1, r2, #28
 80041b6:	bf44      	itt	mi
 80041b8:	232b      	movmi	r3, #43	; 0x2b
 80041ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041be:	f89a 3000 	ldrb.w	r3, [sl]
 80041c2:	2b2a      	cmp	r3, #42	; 0x2a
 80041c4:	d015      	beq.n	80041f2 <_svfiprintf_r+0xf6>
 80041c6:	9a07      	ldr	r2, [sp, #28]
 80041c8:	4654      	mov	r4, sl
 80041ca:	2000      	movs	r0, #0
 80041cc:	f04f 0c0a 	mov.w	ip, #10
 80041d0:	4621      	mov	r1, r4
 80041d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041d6:	3b30      	subs	r3, #48	; 0x30
 80041d8:	2b09      	cmp	r3, #9
 80041da:	d94e      	bls.n	800427a <_svfiprintf_r+0x17e>
 80041dc:	b1b0      	cbz	r0, 800420c <_svfiprintf_r+0x110>
 80041de:	9207      	str	r2, [sp, #28]
 80041e0:	e014      	b.n	800420c <_svfiprintf_r+0x110>
 80041e2:	eba0 0308 	sub.w	r3, r0, r8
 80041e6:	fa09 f303 	lsl.w	r3, r9, r3
 80041ea:	4313      	orrs	r3, r2
 80041ec:	9304      	str	r3, [sp, #16]
 80041ee:	46a2      	mov	sl, r4
 80041f0:	e7d2      	b.n	8004198 <_svfiprintf_r+0x9c>
 80041f2:	9b03      	ldr	r3, [sp, #12]
 80041f4:	1d19      	adds	r1, r3, #4
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	9103      	str	r1, [sp, #12]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	bfbb      	ittet	lt
 80041fe:	425b      	neglt	r3, r3
 8004200:	f042 0202 	orrlt.w	r2, r2, #2
 8004204:	9307      	strge	r3, [sp, #28]
 8004206:	9307      	strlt	r3, [sp, #28]
 8004208:	bfb8      	it	lt
 800420a:	9204      	strlt	r2, [sp, #16]
 800420c:	7823      	ldrb	r3, [r4, #0]
 800420e:	2b2e      	cmp	r3, #46	; 0x2e
 8004210:	d10c      	bne.n	800422c <_svfiprintf_r+0x130>
 8004212:	7863      	ldrb	r3, [r4, #1]
 8004214:	2b2a      	cmp	r3, #42	; 0x2a
 8004216:	d135      	bne.n	8004284 <_svfiprintf_r+0x188>
 8004218:	9b03      	ldr	r3, [sp, #12]
 800421a:	1d1a      	adds	r2, r3, #4
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	9203      	str	r2, [sp, #12]
 8004220:	2b00      	cmp	r3, #0
 8004222:	bfb8      	it	lt
 8004224:	f04f 33ff 	movlt.w	r3, #4294967295
 8004228:	3402      	adds	r4, #2
 800422a:	9305      	str	r3, [sp, #20]
 800422c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80042f8 <_svfiprintf_r+0x1fc>
 8004230:	7821      	ldrb	r1, [r4, #0]
 8004232:	2203      	movs	r2, #3
 8004234:	4650      	mov	r0, sl
 8004236:	f7fb ffd3 	bl	80001e0 <memchr>
 800423a:	b140      	cbz	r0, 800424e <_svfiprintf_r+0x152>
 800423c:	2340      	movs	r3, #64	; 0x40
 800423e:	eba0 000a 	sub.w	r0, r0, sl
 8004242:	fa03 f000 	lsl.w	r0, r3, r0
 8004246:	9b04      	ldr	r3, [sp, #16]
 8004248:	4303      	orrs	r3, r0
 800424a:	3401      	adds	r4, #1
 800424c:	9304      	str	r3, [sp, #16]
 800424e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004252:	4826      	ldr	r0, [pc, #152]	; (80042ec <_svfiprintf_r+0x1f0>)
 8004254:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004258:	2206      	movs	r2, #6
 800425a:	f7fb ffc1 	bl	80001e0 <memchr>
 800425e:	2800      	cmp	r0, #0
 8004260:	d038      	beq.n	80042d4 <_svfiprintf_r+0x1d8>
 8004262:	4b23      	ldr	r3, [pc, #140]	; (80042f0 <_svfiprintf_r+0x1f4>)
 8004264:	bb1b      	cbnz	r3, 80042ae <_svfiprintf_r+0x1b2>
 8004266:	9b03      	ldr	r3, [sp, #12]
 8004268:	3307      	adds	r3, #7
 800426a:	f023 0307 	bic.w	r3, r3, #7
 800426e:	3308      	adds	r3, #8
 8004270:	9303      	str	r3, [sp, #12]
 8004272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004274:	4433      	add	r3, r6
 8004276:	9309      	str	r3, [sp, #36]	; 0x24
 8004278:	e767      	b.n	800414a <_svfiprintf_r+0x4e>
 800427a:	fb0c 3202 	mla	r2, ip, r2, r3
 800427e:	460c      	mov	r4, r1
 8004280:	2001      	movs	r0, #1
 8004282:	e7a5      	b.n	80041d0 <_svfiprintf_r+0xd4>
 8004284:	2300      	movs	r3, #0
 8004286:	3401      	adds	r4, #1
 8004288:	9305      	str	r3, [sp, #20]
 800428a:	4619      	mov	r1, r3
 800428c:	f04f 0c0a 	mov.w	ip, #10
 8004290:	4620      	mov	r0, r4
 8004292:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004296:	3a30      	subs	r2, #48	; 0x30
 8004298:	2a09      	cmp	r2, #9
 800429a:	d903      	bls.n	80042a4 <_svfiprintf_r+0x1a8>
 800429c:	2b00      	cmp	r3, #0
 800429e:	d0c5      	beq.n	800422c <_svfiprintf_r+0x130>
 80042a0:	9105      	str	r1, [sp, #20]
 80042a2:	e7c3      	b.n	800422c <_svfiprintf_r+0x130>
 80042a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80042a8:	4604      	mov	r4, r0
 80042aa:	2301      	movs	r3, #1
 80042ac:	e7f0      	b.n	8004290 <_svfiprintf_r+0x194>
 80042ae:	ab03      	add	r3, sp, #12
 80042b0:	9300      	str	r3, [sp, #0]
 80042b2:	462a      	mov	r2, r5
 80042b4:	4b0f      	ldr	r3, [pc, #60]	; (80042f4 <_svfiprintf_r+0x1f8>)
 80042b6:	a904      	add	r1, sp, #16
 80042b8:	4638      	mov	r0, r7
 80042ba:	f3af 8000 	nop.w
 80042be:	1c42      	adds	r2, r0, #1
 80042c0:	4606      	mov	r6, r0
 80042c2:	d1d6      	bne.n	8004272 <_svfiprintf_r+0x176>
 80042c4:	89ab      	ldrh	r3, [r5, #12]
 80042c6:	065b      	lsls	r3, r3, #25
 80042c8:	f53f af2c 	bmi.w	8004124 <_svfiprintf_r+0x28>
 80042cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042ce:	b01d      	add	sp, #116	; 0x74
 80042d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042d4:	ab03      	add	r3, sp, #12
 80042d6:	9300      	str	r3, [sp, #0]
 80042d8:	462a      	mov	r2, r5
 80042da:	4b06      	ldr	r3, [pc, #24]	; (80042f4 <_svfiprintf_r+0x1f8>)
 80042dc:	a904      	add	r1, sp, #16
 80042de:	4638      	mov	r0, r7
 80042e0:	f000 f87a 	bl	80043d8 <_printf_i>
 80042e4:	e7eb      	b.n	80042be <_svfiprintf_r+0x1c2>
 80042e6:	bf00      	nop
 80042e8:	0800495c 	.word	0x0800495c
 80042ec:	08004966 	.word	0x08004966
 80042f0:	00000000 	.word	0x00000000
 80042f4:	08004045 	.word	0x08004045
 80042f8:	08004962 	.word	0x08004962

080042fc <_printf_common>:
 80042fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004300:	4616      	mov	r6, r2
 8004302:	4699      	mov	r9, r3
 8004304:	688a      	ldr	r2, [r1, #8]
 8004306:	690b      	ldr	r3, [r1, #16]
 8004308:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800430c:	4293      	cmp	r3, r2
 800430e:	bfb8      	it	lt
 8004310:	4613      	movlt	r3, r2
 8004312:	6033      	str	r3, [r6, #0]
 8004314:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004318:	4607      	mov	r7, r0
 800431a:	460c      	mov	r4, r1
 800431c:	b10a      	cbz	r2, 8004322 <_printf_common+0x26>
 800431e:	3301      	adds	r3, #1
 8004320:	6033      	str	r3, [r6, #0]
 8004322:	6823      	ldr	r3, [r4, #0]
 8004324:	0699      	lsls	r1, r3, #26
 8004326:	bf42      	ittt	mi
 8004328:	6833      	ldrmi	r3, [r6, #0]
 800432a:	3302      	addmi	r3, #2
 800432c:	6033      	strmi	r3, [r6, #0]
 800432e:	6825      	ldr	r5, [r4, #0]
 8004330:	f015 0506 	ands.w	r5, r5, #6
 8004334:	d106      	bne.n	8004344 <_printf_common+0x48>
 8004336:	f104 0a19 	add.w	sl, r4, #25
 800433a:	68e3      	ldr	r3, [r4, #12]
 800433c:	6832      	ldr	r2, [r6, #0]
 800433e:	1a9b      	subs	r3, r3, r2
 8004340:	42ab      	cmp	r3, r5
 8004342:	dc26      	bgt.n	8004392 <_printf_common+0x96>
 8004344:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004348:	1e13      	subs	r3, r2, #0
 800434a:	6822      	ldr	r2, [r4, #0]
 800434c:	bf18      	it	ne
 800434e:	2301      	movne	r3, #1
 8004350:	0692      	lsls	r2, r2, #26
 8004352:	d42b      	bmi.n	80043ac <_printf_common+0xb0>
 8004354:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004358:	4649      	mov	r1, r9
 800435a:	4638      	mov	r0, r7
 800435c:	47c0      	blx	r8
 800435e:	3001      	adds	r0, #1
 8004360:	d01e      	beq.n	80043a0 <_printf_common+0xa4>
 8004362:	6823      	ldr	r3, [r4, #0]
 8004364:	68e5      	ldr	r5, [r4, #12]
 8004366:	6832      	ldr	r2, [r6, #0]
 8004368:	f003 0306 	and.w	r3, r3, #6
 800436c:	2b04      	cmp	r3, #4
 800436e:	bf08      	it	eq
 8004370:	1aad      	subeq	r5, r5, r2
 8004372:	68a3      	ldr	r3, [r4, #8]
 8004374:	6922      	ldr	r2, [r4, #16]
 8004376:	bf0c      	ite	eq
 8004378:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800437c:	2500      	movne	r5, #0
 800437e:	4293      	cmp	r3, r2
 8004380:	bfc4      	itt	gt
 8004382:	1a9b      	subgt	r3, r3, r2
 8004384:	18ed      	addgt	r5, r5, r3
 8004386:	2600      	movs	r6, #0
 8004388:	341a      	adds	r4, #26
 800438a:	42b5      	cmp	r5, r6
 800438c:	d11a      	bne.n	80043c4 <_printf_common+0xc8>
 800438e:	2000      	movs	r0, #0
 8004390:	e008      	b.n	80043a4 <_printf_common+0xa8>
 8004392:	2301      	movs	r3, #1
 8004394:	4652      	mov	r2, sl
 8004396:	4649      	mov	r1, r9
 8004398:	4638      	mov	r0, r7
 800439a:	47c0      	blx	r8
 800439c:	3001      	adds	r0, #1
 800439e:	d103      	bne.n	80043a8 <_printf_common+0xac>
 80043a0:	f04f 30ff 	mov.w	r0, #4294967295
 80043a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043a8:	3501      	adds	r5, #1
 80043aa:	e7c6      	b.n	800433a <_printf_common+0x3e>
 80043ac:	18e1      	adds	r1, r4, r3
 80043ae:	1c5a      	adds	r2, r3, #1
 80043b0:	2030      	movs	r0, #48	; 0x30
 80043b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043b6:	4422      	add	r2, r4
 80043b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043c0:	3302      	adds	r3, #2
 80043c2:	e7c7      	b.n	8004354 <_printf_common+0x58>
 80043c4:	2301      	movs	r3, #1
 80043c6:	4622      	mov	r2, r4
 80043c8:	4649      	mov	r1, r9
 80043ca:	4638      	mov	r0, r7
 80043cc:	47c0      	blx	r8
 80043ce:	3001      	adds	r0, #1
 80043d0:	d0e6      	beq.n	80043a0 <_printf_common+0xa4>
 80043d2:	3601      	adds	r6, #1
 80043d4:	e7d9      	b.n	800438a <_printf_common+0x8e>
	...

080043d8 <_printf_i>:
 80043d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043dc:	7e0f      	ldrb	r7, [r1, #24]
 80043de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80043e0:	2f78      	cmp	r7, #120	; 0x78
 80043e2:	4691      	mov	r9, r2
 80043e4:	4680      	mov	r8, r0
 80043e6:	460c      	mov	r4, r1
 80043e8:	469a      	mov	sl, r3
 80043ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80043ee:	d807      	bhi.n	8004400 <_printf_i+0x28>
 80043f0:	2f62      	cmp	r7, #98	; 0x62
 80043f2:	d80a      	bhi.n	800440a <_printf_i+0x32>
 80043f4:	2f00      	cmp	r7, #0
 80043f6:	f000 80d8 	beq.w	80045aa <_printf_i+0x1d2>
 80043fa:	2f58      	cmp	r7, #88	; 0x58
 80043fc:	f000 80a3 	beq.w	8004546 <_printf_i+0x16e>
 8004400:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004404:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004408:	e03a      	b.n	8004480 <_printf_i+0xa8>
 800440a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800440e:	2b15      	cmp	r3, #21
 8004410:	d8f6      	bhi.n	8004400 <_printf_i+0x28>
 8004412:	a101      	add	r1, pc, #4	; (adr r1, 8004418 <_printf_i+0x40>)
 8004414:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004418:	08004471 	.word	0x08004471
 800441c:	08004485 	.word	0x08004485
 8004420:	08004401 	.word	0x08004401
 8004424:	08004401 	.word	0x08004401
 8004428:	08004401 	.word	0x08004401
 800442c:	08004401 	.word	0x08004401
 8004430:	08004485 	.word	0x08004485
 8004434:	08004401 	.word	0x08004401
 8004438:	08004401 	.word	0x08004401
 800443c:	08004401 	.word	0x08004401
 8004440:	08004401 	.word	0x08004401
 8004444:	08004591 	.word	0x08004591
 8004448:	080044b5 	.word	0x080044b5
 800444c:	08004573 	.word	0x08004573
 8004450:	08004401 	.word	0x08004401
 8004454:	08004401 	.word	0x08004401
 8004458:	080045b3 	.word	0x080045b3
 800445c:	08004401 	.word	0x08004401
 8004460:	080044b5 	.word	0x080044b5
 8004464:	08004401 	.word	0x08004401
 8004468:	08004401 	.word	0x08004401
 800446c:	0800457b 	.word	0x0800457b
 8004470:	682b      	ldr	r3, [r5, #0]
 8004472:	1d1a      	adds	r2, r3, #4
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	602a      	str	r2, [r5, #0]
 8004478:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800447c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004480:	2301      	movs	r3, #1
 8004482:	e0a3      	b.n	80045cc <_printf_i+0x1f4>
 8004484:	6820      	ldr	r0, [r4, #0]
 8004486:	6829      	ldr	r1, [r5, #0]
 8004488:	0606      	lsls	r6, r0, #24
 800448a:	f101 0304 	add.w	r3, r1, #4
 800448e:	d50a      	bpl.n	80044a6 <_printf_i+0xce>
 8004490:	680e      	ldr	r6, [r1, #0]
 8004492:	602b      	str	r3, [r5, #0]
 8004494:	2e00      	cmp	r6, #0
 8004496:	da03      	bge.n	80044a0 <_printf_i+0xc8>
 8004498:	232d      	movs	r3, #45	; 0x2d
 800449a:	4276      	negs	r6, r6
 800449c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044a0:	485e      	ldr	r0, [pc, #376]	; (800461c <_printf_i+0x244>)
 80044a2:	230a      	movs	r3, #10
 80044a4:	e019      	b.n	80044da <_printf_i+0x102>
 80044a6:	680e      	ldr	r6, [r1, #0]
 80044a8:	602b      	str	r3, [r5, #0]
 80044aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80044ae:	bf18      	it	ne
 80044b0:	b236      	sxthne	r6, r6
 80044b2:	e7ef      	b.n	8004494 <_printf_i+0xbc>
 80044b4:	682b      	ldr	r3, [r5, #0]
 80044b6:	6820      	ldr	r0, [r4, #0]
 80044b8:	1d19      	adds	r1, r3, #4
 80044ba:	6029      	str	r1, [r5, #0]
 80044bc:	0601      	lsls	r1, r0, #24
 80044be:	d501      	bpl.n	80044c4 <_printf_i+0xec>
 80044c0:	681e      	ldr	r6, [r3, #0]
 80044c2:	e002      	b.n	80044ca <_printf_i+0xf2>
 80044c4:	0646      	lsls	r6, r0, #25
 80044c6:	d5fb      	bpl.n	80044c0 <_printf_i+0xe8>
 80044c8:	881e      	ldrh	r6, [r3, #0]
 80044ca:	4854      	ldr	r0, [pc, #336]	; (800461c <_printf_i+0x244>)
 80044cc:	2f6f      	cmp	r7, #111	; 0x6f
 80044ce:	bf0c      	ite	eq
 80044d0:	2308      	moveq	r3, #8
 80044d2:	230a      	movne	r3, #10
 80044d4:	2100      	movs	r1, #0
 80044d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044da:	6865      	ldr	r5, [r4, #4]
 80044dc:	60a5      	str	r5, [r4, #8]
 80044de:	2d00      	cmp	r5, #0
 80044e0:	bfa2      	ittt	ge
 80044e2:	6821      	ldrge	r1, [r4, #0]
 80044e4:	f021 0104 	bicge.w	r1, r1, #4
 80044e8:	6021      	strge	r1, [r4, #0]
 80044ea:	b90e      	cbnz	r6, 80044f0 <_printf_i+0x118>
 80044ec:	2d00      	cmp	r5, #0
 80044ee:	d04d      	beq.n	800458c <_printf_i+0x1b4>
 80044f0:	4615      	mov	r5, r2
 80044f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80044f6:	fb03 6711 	mls	r7, r3, r1, r6
 80044fa:	5dc7      	ldrb	r7, [r0, r7]
 80044fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004500:	4637      	mov	r7, r6
 8004502:	42bb      	cmp	r3, r7
 8004504:	460e      	mov	r6, r1
 8004506:	d9f4      	bls.n	80044f2 <_printf_i+0x11a>
 8004508:	2b08      	cmp	r3, #8
 800450a:	d10b      	bne.n	8004524 <_printf_i+0x14c>
 800450c:	6823      	ldr	r3, [r4, #0]
 800450e:	07de      	lsls	r6, r3, #31
 8004510:	d508      	bpl.n	8004524 <_printf_i+0x14c>
 8004512:	6923      	ldr	r3, [r4, #16]
 8004514:	6861      	ldr	r1, [r4, #4]
 8004516:	4299      	cmp	r1, r3
 8004518:	bfde      	ittt	le
 800451a:	2330      	movle	r3, #48	; 0x30
 800451c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004520:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004524:	1b52      	subs	r2, r2, r5
 8004526:	6122      	str	r2, [r4, #16]
 8004528:	f8cd a000 	str.w	sl, [sp]
 800452c:	464b      	mov	r3, r9
 800452e:	aa03      	add	r2, sp, #12
 8004530:	4621      	mov	r1, r4
 8004532:	4640      	mov	r0, r8
 8004534:	f7ff fee2 	bl	80042fc <_printf_common>
 8004538:	3001      	adds	r0, #1
 800453a:	d14c      	bne.n	80045d6 <_printf_i+0x1fe>
 800453c:	f04f 30ff 	mov.w	r0, #4294967295
 8004540:	b004      	add	sp, #16
 8004542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004546:	4835      	ldr	r0, [pc, #212]	; (800461c <_printf_i+0x244>)
 8004548:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800454c:	6829      	ldr	r1, [r5, #0]
 800454e:	6823      	ldr	r3, [r4, #0]
 8004550:	f851 6b04 	ldr.w	r6, [r1], #4
 8004554:	6029      	str	r1, [r5, #0]
 8004556:	061d      	lsls	r5, r3, #24
 8004558:	d514      	bpl.n	8004584 <_printf_i+0x1ac>
 800455a:	07df      	lsls	r7, r3, #31
 800455c:	bf44      	itt	mi
 800455e:	f043 0320 	orrmi.w	r3, r3, #32
 8004562:	6023      	strmi	r3, [r4, #0]
 8004564:	b91e      	cbnz	r6, 800456e <_printf_i+0x196>
 8004566:	6823      	ldr	r3, [r4, #0]
 8004568:	f023 0320 	bic.w	r3, r3, #32
 800456c:	6023      	str	r3, [r4, #0]
 800456e:	2310      	movs	r3, #16
 8004570:	e7b0      	b.n	80044d4 <_printf_i+0xfc>
 8004572:	6823      	ldr	r3, [r4, #0]
 8004574:	f043 0320 	orr.w	r3, r3, #32
 8004578:	6023      	str	r3, [r4, #0]
 800457a:	2378      	movs	r3, #120	; 0x78
 800457c:	4828      	ldr	r0, [pc, #160]	; (8004620 <_printf_i+0x248>)
 800457e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004582:	e7e3      	b.n	800454c <_printf_i+0x174>
 8004584:	0659      	lsls	r1, r3, #25
 8004586:	bf48      	it	mi
 8004588:	b2b6      	uxthmi	r6, r6
 800458a:	e7e6      	b.n	800455a <_printf_i+0x182>
 800458c:	4615      	mov	r5, r2
 800458e:	e7bb      	b.n	8004508 <_printf_i+0x130>
 8004590:	682b      	ldr	r3, [r5, #0]
 8004592:	6826      	ldr	r6, [r4, #0]
 8004594:	6961      	ldr	r1, [r4, #20]
 8004596:	1d18      	adds	r0, r3, #4
 8004598:	6028      	str	r0, [r5, #0]
 800459a:	0635      	lsls	r5, r6, #24
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	d501      	bpl.n	80045a4 <_printf_i+0x1cc>
 80045a0:	6019      	str	r1, [r3, #0]
 80045a2:	e002      	b.n	80045aa <_printf_i+0x1d2>
 80045a4:	0670      	lsls	r0, r6, #25
 80045a6:	d5fb      	bpl.n	80045a0 <_printf_i+0x1c8>
 80045a8:	8019      	strh	r1, [r3, #0]
 80045aa:	2300      	movs	r3, #0
 80045ac:	6123      	str	r3, [r4, #16]
 80045ae:	4615      	mov	r5, r2
 80045b0:	e7ba      	b.n	8004528 <_printf_i+0x150>
 80045b2:	682b      	ldr	r3, [r5, #0]
 80045b4:	1d1a      	adds	r2, r3, #4
 80045b6:	602a      	str	r2, [r5, #0]
 80045b8:	681d      	ldr	r5, [r3, #0]
 80045ba:	6862      	ldr	r2, [r4, #4]
 80045bc:	2100      	movs	r1, #0
 80045be:	4628      	mov	r0, r5
 80045c0:	f7fb fe0e 	bl	80001e0 <memchr>
 80045c4:	b108      	cbz	r0, 80045ca <_printf_i+0x1f2>
 80045c6:	1b40      	subs	r0, r0, r5
 80045c8:	6060      	str	r0, [r4, #4]
 80045ca:	6863      	ldr	r3, [r4, #4]
 80045cc:	6123      	str	r3, [r4, #16]
 80045ce:	2300      	movs	r3, #0
 80045d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045d4:	e7a8      	b.n	8004528 <_printf_i+0x150>
 80045d6:	6923      	ldr	r3, [r4, #16]
 80045d8:	462a      	mov	r2, r5
 80045da:	4649      	mov	r1, r9
 80045dc:	4640      	mov	r0, r8
 80045de:	47d0      	blx	sl
 80045e0:	3001      	adds	r0, #1
 80045e2:	d0ab      	beq.n	800453c <_printf_i+0x164>
 80045e4:	6823      	ldr	r3, [r4, #0]
 80045e6:	079b      	lsls	r3, r3, #30
 80045e8:	d413      	bmi.n	8004612 <_printf_i+0x23a>
 80045ea:	68e0      	ldr	r0, [r4, #12]
 80045ec:	9b03      	ldr	r3, [sp, #12]
 80045ee:	4298      	cmp	r0, r3
 80045f0:	bfb8      	it	lt
 80045f2:	4618      	movlt	r0, r3
 80045f4:	e7a4      	b.n	8004540 <_printf_i+0x168>
 80045f6:	2301      	movs	r3, #1
 80045f8:	4632      	mov	r2, r6
 80045fa:	4649      	mov	r1, r9
 80045fc:	4640      	mov	r0, r8
 80045fe:	47d0      	blx	sl
 8004600:	3001      	adds	r0, #1
 8004602:	d09b      	beq.n	800453c <_printf_i+0x164>
 8004604:	3501      	adds	r5, #1
 8004606:	68e3      	ldr	r3, [r4, #12]
 8004608:	9903      	ldr	r1, [sp, #12]
 800460a:	1a5b      	subs	r3, r3, r1
 800460c:	42ab      	cmp	r3, r5
 800460e:	dcf2      	bgt.n	80045f6 <_printf_i+0x21e>
 8004610:	e7eb      	b.n	80045ea <_printf_i+0x212>
 8004612:	2500      	movs	r5, #0
 8004614:	f104 0619 	add.w	r6, r4, #25
 8004618:	e7f5      	b.n	8004606 <_printf_i+0x22e>
 800461a:	bf00      	nop
 800461c:	0800496d 	.word	0x0800496d
 8004620:	0800497e 	.word	0x0800497e

08004624 <memcpy>:
 8004624:	440a      	add	r2, r1
 8004626:	4291      	cmp	r1, r2
 8004628:	f100 33ff 	add.w	r3, r0, #4294967295
 800462c:	d100      	bne.n	8004630 <memcpy+0xc>
 800462e:	4770      	bx	lr
 8004630:	b510      	push	{r4, lr}
 8004632:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004636:	f803 4f01 	strb.w	r4, [r3, #1]!
 800463a:	4291      	cmp	r1, r2
 800463c:	d1f9      	bne.n	8004632 <memcpy+0xe>
 800463e:	bd10      	pop	{r4, pc}

08004640 <memmove>:
 8004640:	4288      	cmp	r0, r1
 8004642:	b510      	push	{r4, lr}
 8004644:	eb01 0402 	add.w	r4, r1, r2
 8004648:	d902      	bls.n	8004650 <memmove+0x10>
 800464a:	4284      	cmp	r4, r0
 800464c:	4623      	mov	r3, r4
 800464e:	d807      	bhi.n	8004660 <memmove+0x20>
 8004650:	1e43      	subs	r3, r0, #1
 8004652:	42a1      	cmp	r1, r4
 8004654:	d008      	beq.n	8004668 <memmove+0x28>
 8004656:	f811 2b01 	ldrb.w	r2, [r1], #1
 800465a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800465e:	e7f8      	b.n	8004652 <memmove+0x12>
 8004660:	4402      	add	r2, r0
 8004662:	4601      	mov	r1, r0
 8004664:	428a      	cmp	r2, r1
 8004666:	d100      	bne.n	800466a <memmove+0x2a>
 8004668:	bd10      	pop	{r4, pc}
 800466a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800466e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004672:	e7f7      	b.n	8004664 <memmove+0x24>

08004674 <_free_r>:
 8004674:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004676:	2900      	cmp	r1, #0
 8004678:	d044      	beq.n	8004704 <_free_r+0x90>
 800467a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800467e:	9001      	str	r0, [sp, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	f1a1 0404 	sub.w	r4, r1, #4
 8004686:	bfb8      	it	lt
 8004688:	18e4      	addlt	r4, r4, r3
 800468a:	f000 f913 	bl	80048b4 <__malloc_lock>
 800468e:	4a1e      	ldr	r2, [pc, #120]	; (8004708 <_free_r+0x94>)
 8004690:	9801      	ldr	r0, [sp, #4]
 8004692:	6813      	ldr	r3, [r2, #0]
 8004694:	b933      	cbnz	r3, 80046a4 <_free_r+0x30>
 8004696:	6063      	str	r3, [r4, #4]
 8004698:	6014      	str	r4, [r2, #0]
 800469a:	b003      	add	sp, #12
 800469c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80046a0:	f000 b90e 	b.w	80048c0 <__malloc_unlock>
 80046a4:	42a3      	cmp	r3, r4
 80046a6:	d908      	bls.n	80046ba <_free_r+0x46>
 80046a8:	6825      	ldr	r5, [r4, #0]
 80046aa:	1961      	adds	r1, r4, r5
 80046ac:	428b      	cmp	r3, r1
 80046ae:	bf01      	itttt	eq
 80046b0:	6819      	ldreq	r1, [r3, #0]
 80046b2:	685b      	ldreq	r3, [r3, #4]
 80046b4:	1949      	addeq	r1, r1, r5
 80046b6:	6021      	streq	r1, [r4, #0]
 80046b8:	e7ed      	b.n	8004696 <_free_r+0x22>
 80046ba:	461a      	mov	r2, r3
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	b10b      	cbz	r3, 80046c4 <_free_r+0x50>
 80046c0:	42a3      	cmp	r3, r4
 80046c2:	d9fa      	bls.n	80046ba <_free_r+0x46>
 80046c4:	6811      	ldr	r1, [r2, #0]
 80046c6:	1855      	adds	r5, r2, r1
 80046c8:	42a5      	cmp	r5, r4
 80046ca:	d10b      	bne.n	80046e4 <_free_r+0x70>
 80046cc:	6824      	ldr	r4, [r4, #0]
 80046ce:	4421      	add	r1, r4
 80046d0:	1854      	adds	r4, r2, r1
 80046d2:	42a3      	cmp	r3, r4
 80046d4:	6011      	str	r1, [r2, #0]
 80046d6:	d1e0      	bne.n	800469a <_free_r+0x26>
 80046d8:	681c      	ldr	r4, [r3, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	6053      	str	r3, [r2, #4]
 80046de:	4421      	add	r1, r4
 80046e0:	6011      	str	r1, [r2, #0]
 80046e2:	e7da      	b.n	800469a <_free_r+0x26>
 80046e4:	d902      	bls.n	80046ec <_free_r+0x78>
 80046e6:	230c      	movs	r3, #12
 80046e8:	6003      	str	r3, [r0, #0]
 80046ea:	e7d6      	b.n	800469a <_free_r+0x26>
 80046ec:	6825      	ldr	r5, [r4, #0]
 80046ee:	1961      	adds	r1, r4, r5
 80046f0:	428b      	cmp	r3, r1
 80046f2:	bf04      	itt	eq
 80046f4:	6819      	ldreq	r1, [r3, #0]
 80046f6:	685b      	ldreq	r3, [r3, #4]
 80046f8:	6063      	str	r3, [r4, #4]
 80046fa:	bf04      	itt	eq
 80046fc:	1949      	addeq	r1, r1, r5
 80046fe:	6021      	streq	r1, [r4, #0]
 8004700:	6054      	str	r4, [r2, #4]
 8004702:	e7ca      	b.n	800469a <_free_r+0x26>
 8004704:	b003      	add	sp, #12
 8004706:	bd30      	pop	{r4, r5, pc}
 8004708:	2000016c 	.word	0x2000016c

0800470c <sbrk_aligned>:
 800470c:	b570      	push	{r4, r5, r6, lr}
 800470e:	4e0e      	ldr	r6, [pc, #56]	; (8004748 <sbrk_aligned+0x3c>)
 8004710:	460c      	mov	r4, r1
 8004712:	6831      	ldr	r1, [r6, #0]
 8004714:	4605      	mov	r5, r0
 8004716:	b911      	cbnz	r1, 800471e <sbrk_aligned+0x12>
 8004718:	f000 f8bc 	bl	8004894 <_sbrk_r>
 800471c:	6030      	str	r0, [r6, #0]
 800471e:	4621      	mov	r1, r4
 8004720:	4628      	mov	r0, r5
 8004722:	f000 f8b7 	bl	8004894 <_sbrk_r>
 8004726:	1c43      	adds	r3, r0, #1
 8004728:	d00a      	beq.n	8004740 <sbrk_aligned+0x34>
 800472a:	1cc4      	adds	r4, r0, #3
 800472c:	f024 0403 	bic.w	r4, r4, #3
 8004730:	42a0      	cmp	r0, r4
 8004732:	d007      	beq.n	8004744 <sbrk_aligned+0x38>
 8004734:	1a21      	subs	r1, r4, r0
 8004736:	4628      	mov	r0, r5
 8004738:	f000 f8ac 	bl	8004894 <_sbrk_r>
 800473c:	3001      	adds	r0, #1
 800473e:	d101      	bne.n	8004744 <sbrk_aligned+0x38>
 8004740:	f04f 34ff 	mov.w	r4, #4294967295
 8004744:	4620      	mov	r0, r4
 8004746:	bd70      	pop	{r4, r5, r6, pc}
 8004748:	20000170 	.word	0x20000170

0800474c <_malloc_r>:
 800474c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004750:	1ccd      	adds	r5, r1, #3
 8004752:	f025 0503 	bic.w	r5, r5, #3
 8004756:	3508      	adds	r5, #8
 8004758:	2d0c      	cmp	r5, #12
 800475a:	bf38      	it	cc
 800475c:	250c      	movcc	r5, #12
 800475e:	2d00      	cmp	r5, #0
 8004760:	4607      	mov	r7, r0
 8004762:	db01      	blt.n	8004768 <_malloc_r+0x1c>
 8004764:	42a9      	cmp	r1, r5
 8004766:	d905      	bls.n	8004774 <_malloc_r+0x28>
 8004768:	230c      	movs	r3, #12
 800476a:	603b      	str	r3, [r7, #0]
 800476c:	2600      	movs	r6, #0
 800476e:	4630      	mov	r0, r6
 8004770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004774:	4e2e      	ldr	r6, [pc, #184]	; (8004830 <_malloc_r+0xe4>)
 8004776:	f000 f89d 	bl	80048b4 <__malloc_lock>
 800477a:	6833      	ldr	r3, [r6, #0]
 800477c:	461c      	mov	r4, r3
 800477e:	bb34      	cbnz	r4, 80047ce <_malloc_r+0x82>
 8004780:	4629      	mov	r1, r5
 8004782:	4638      	mov	r0, r7
 8004784:	f7ff ffc2 	bl	800470c <sbrk_aligned>
 8004788:	1c43      	adds	r3, r0, #1
 800478a:	4604      	mov	r4, r0
 800478c:	d14d      	bne.n	800482a <_malloc_r+0xde>
 800478e:	6834      	ldr	r4, [r6, #0]
 8004790:	4626      	mov	r6, r4
 8004792:	2e00      	cmp	r6, #0
 8004794:	d140      	bne.n	8004818 <_malloc_r+0xcc>
 8004796:	6823      	ldr	r3, [r4, #0]
 8004798:	4631      	mov	r1, r6
 800479a:	4638      	mov	r0, r7
 800479c:	eb04 0803 	add.w	r8, r4, r3
 80047a0:	f000 f878 	bl	8004894 <_sbrk_r>
 80047a4:	4580      	cmp	r8, r0
 80047a6:	d13a      	bne.n	800481e <_malloc_r+0xd2>
 80047a8:	6821      	ldr	r1, [r4, #0]
 80047aa:	3503      	adds	r5, #3
 80047ac:	1a6d      	subs	r5, r5, r1
 80047ae:	f025 0503 	bic.w	r5, r5, #3
 80047b2:	3508      	adds	r5, #8
 80047b4:	2d0c      	cmp	r5, #12
 80047b6:	bf38      	it	cc
 80047b8:	250c      	movcc	r5, #12
 80047ba:	4629      	mov	r1, r5
 80047bc:	4638      	mov	r0, r7
 80047be:	f7ff ffa5 	bl	800470c <sbrk_aligned>
 80047c2:	3001      	adds	r0, #1
 80047c4:	d02b      	beq.n	800481e <_malloc_r+0xd2>
 80047c6:	6823      	ldr	r3, [r4, #0]
 80047c8:	442b      	add	r3, r5
 80047ca:	6023      	str	r3, [r4, #0]
 80047cc:	e00e      	b.n	80047ec <_malloc_r+0xa0>
 80047ce:	6822      	ldr	r2, [r4, #0]
 80047d0:	1b52      	subs	r2, r2, r5
 80047d2:	d41e      	bmi.n	8004812 <_malloc_r+0xc6>
 80047d4:	2a0b      	cmp	r2, #11
 80047d6:	d916      	bls.n	8004806 <_malloc_r+0xba>
 80047d8:	1961      	adds	r1, r4, r5
 80047da:	42a3      	cmp	r3, r4
 80047dc:	6025      	str	r5, [r4, #0]
 80047de:	bf18      	it	ne
 80047e0:	6059      	strne	r1, [r3, #4]
 80047e2:	6863      	ldr	r3, [r4, #4]
 80047e4:	bf08      	it	eq
 80047e6:	6031      	streq	r1, [r6, #0]
 80047e8:	5162      	str	r2, [r4, r5]
 80047ea:	604b      	str	r3, [r1, #4]
 80047ec:	4638      	mov	r0, r7
 80047ee:	f104 060b 	add.w	r6, r4, #11
 80047f2:	f000 f865 	bl	80048c0 <__malloc_unlock>
 80047f6:	f026 0607 	bic.w	r6, r6, #7
 80047fa:	1d23      	adds	r3, r4, #4
 80047fc:	1af2      	subs	r2, r6, r3
 80047fe:	d0b6      	beq.n	800476e <_malloc_r+0x22>
 8004800:	1b9b      	subs	r3, r3, r6
 8004802:	50a3      	str	r3, [r4, r2]
 8004804:	e7b3      	b.n	800476e <_malloc_r+0x22>
 8004806:	6862      	ldr	r2, [r4, #4]
 8004808:	42a3      	cmp	r3, r4
 800480a:	bf0c      	ite	eq
 800480c:	6032      	streq	r2, [r6, #0]
 800480e:	605a      	strne	r2, [r3, #4]
 8004810:	e7ec      	b.n	80047ec <_malloc_r+0xa0>
 8004812:	4623      	mov	r3, r4
 8004814:	6864      	ldr	r4, [r4, #4]
 8004816:	e7b2      	b.n	800477e <_malloc_r+0x32>
 8004818:	4634      	mov	r4, r6
 800481a:	6876      	ldr	r6, [r6, #4]
 800481c:	e7b9      	b.n	8004792 <_malloc_r+0x46>
 800481e:	230c      	movs	r3, #12
 8004820:	603b      	str	r3, [r7, #0]
 8004822:	4638      	mov	r0, r7
 8004824:	f000 f84c 	bl	80048c0 <__malloc_unlock>
 8004828:	e7a1      	b.n	800476e <_malloc_r+0x22>
 800482a:	6025      	str	r5, [r4, #0]
 800482c:	e7de      	b.n	80047ec <_malloc_r+0xa0>
 800482e:	bf00      	nop
 8004830:	2000016c 	.word	0x2000016c

08004834 <_realloc_r>:
 8004834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004838:	4680      	mov	r8, r0
 800483a:	4614      	mov	r4, r2
 800483c:	460e      	mov	r6, r1
 800483e:	b921      	cbnz	r1, 800484a <_realloc_r+0x16>
 8004840:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004844:	4611      	mov	r1, r2
 8004846:	f7ff bf81 	b.w	800474c <_malloc_r>
 800484a:	b92a      	cbnz	r2, 8004858 <_realloc_r+0x24>
 800484c:	f7ff ff12 	bl	8004674 <_free_r>
 8004850:	4625      	mov	r5, r4
 8004852:	4628      	mov	r0, r5
 8004854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004858:	f000 f838 	bl	80048cc <_malloc_usable_size_r>
 800485c:	4284      	cmp	r4, r0
 800485e:	4607      	mov	r7, r0
 8004860:	d802      	bhi.n	8004868 <_realloc_r+0x34>
 8004862:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004866:	d812      	bhi.n	800488e <_realloc_r+0x5a>
 8004868:	4621      	mov	r1, r4
 800486a:	4640      	mov	r0, r8
 800486c:	f7ff ff6e 	bl	800474c <_malloc_r>
 8004870:	4605      	mov	r5, r0
 8004872:	2800      	cmp	r0, #0
 8004874:	d0ed      	beq.n	8004852 <_realloc_r+0x1e>
 8004876:	42bc      	cmp	r4, r7
 8004878:	4622      	mov	r2, r4
 800487a:	4631      	mov	r1, r6
 800487c:	bf28      	it	cs
 800487e:	463a      	movcs	r2, r7
 8004880:	f7ff fed0 	bl	8004624 <memcpy>
 8004884:	4631      	mov	r1, r6
 8004886:	4640      	mov	r0, r8
 8004888:	f7ff fef4 	bl	8004674 <_free_r>
 800488c:	e7e1      	b.n	8004852 <_realloc_r+0x1e>
 800488e:	4635      	mov	r5, r6
 8004890:	e7df      	b.n	8004852 <_realloc_r+0x1e>
	...

08004894 <_sbrk_r>:
 8004894:	b538      	push	{r3, r4, r5, lr}
 8004896:	4d06      	ldr	r5, [pc, #24]	; (80048b0 <_sbrk_r+0x1c>)
 8004898:	2300      	movs	r3, #0
 800489a:	4604      	mov	r4, r0
 800489c:	4608      	mov	r0, r1
 800489e:	602b      	str	r3, [r5, #0]
 80048a0:	f7fc f87c 	bl	800099c <_sbrk>
 80048a4:	1c43      	adds	r3, r0, #1
 80048a6:	d102      	bne.n	80048ae <_sbrk_r+0x1a>
 80048a8:	682b      	ldr	r3, [r5, #0]
 80048aa:	b103      	cbz	r3, 80048ae <_sbrk_r+0x1a>
 80048ac:	6023      	str	r3, [r4, #0]
 80048ae:	bd38      	pop	{r3, r4, r5, pc}
 80048b0:	20000174 	.word	0x20000174

080048b4 <__malloc_lock>:
 80048b4:	4801      	ldr	r0, [pc, #4]	; (80048bc <__malloc_lock+0x8>)
 80048b6:	f000 b811 	b.w	80048dc <__retarget_lock_acquire_recursive>
 80048ba:	bf00      	nop
 80048bc:	20000178 	.word	0x20000178

080048c0 <__malloc_unlock>:
 80048c0:	4801      	ldr	r0, [pc, #4]	; (80048c8 <__malloc_unlock+0x8>)
 80048c2:	f000 b80c 	b.w	80048de <__retarget_lock_release_recursive>
 80048c6:	bf00      	nop
 80048c8:	20000178 	.word	0x20000178

080048cc <_malloc_usable_size_r>:
 80048cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048d0:	1f18      	subs	r0, r3, #4
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	bfbc      	itt	lt
 80048d6:	580b      	ldrlt	r3, [r1, r0]
 80048d8:	18c0      	addlt	r0, r0, r3
 80048da:	4770      	bx	lr

080048dc <__retarget_lock_acquire_recursive>:
 80048dc:	4770      	bx	lr

080048de <__retarget_lock_release_recursive>:
 80048de:	4770      	bx	lr

080048e0 <_init>:
 80048e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048e2:	bf00      	nop
 80048e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048e6:	bc08      	pop	{r3}
 80048e8:	469e      	mov	lr, r3
 80048ea:	4770      	bx	lr

080048ec <_fini>:
 80048ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ee:	bf00      	nop
 80048f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048f2:	bc08      	pop	{r3}
 80048f4:	469e      	mov	lr, r3
 80048f6:	4770      	bx	lr
