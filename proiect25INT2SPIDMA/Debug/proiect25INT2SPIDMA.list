
proiect25INT2SPIDMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000484  08008770  08008770  00018770  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bf4  08008bf4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008bf4  08008bf4  00018bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bfc  08008bfc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bfc  08008bfc  00018bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c00  08008c00  00018c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008c04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  200001dc  08008de0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  08008de0  0002039c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f99a  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026cd  00000000  00000000  0002fba6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  00032278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be0  00000000  00000000  00032f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028207  00000000  00000000  00033b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b39  00000000  00000000  0005bd57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed73d  00000000  00000000  0006c890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00159fcd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004524  00000000  00000000  0015a020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008758 	.word	0x08008758

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08008758 	.word	0x08008758

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <ADXL_WriteData>:

extern uint8_t TxBuffer[];
extern uint8_t RxBuffer[7];
extern DMA_HandleTypeDef hdma_spi1_rx;

bool ADXL_WriteData(uint8_t regAddress, uint8_t registerValue) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af02      	add	r7, sp, #8
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	460a      	mov	r2, r1
 8000eb6:	71fb      	strb	r3, [r7, #7]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	71bb      	strb	r3, [r7, #6]
	uint8_t TxBuffer[2];
	uint8_t RxBuffer[2];

	TxBuffer[0] = regAddress;
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	733b      	strb	r3, [r7, #12]
	TxBuffer[1] = registerValue;
 8000ec0:	79bb      	ldrb	r3, [r7, #6]
 8000ec2:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(SPI_CS_ACC_GPIO_Port, SPI_CS_ACC_Pin, GPIO_PIN_RESET);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2140      	movs	r1, #64	; 0x40
 8000ec8:	4810      	ldr	r0, [pc, #64]	; (8000f0c <ADXL_WriteData+0x60>)
 8000eca:	f001 fc67 	bl	800279c <HAL_GPIO_WritePin>
	if (HAL_SPI_TransmitReceive(&hspi1, TxBuffer, RxBuffer, 2, HAL_MAX_DELAY) != HAL_OK)
 8000ece:	f107 0208 	add.w	r2, r7, #8
 8000ed2:	f107 010c 	add.w	r1, r7, #12
 8000ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eda:	9300      	str	r3, [sp, #0]
 8000edc:	2302      	movs	r3, #2
 8000ede:	480c      	ldr	r0, [pc, #48]	; (8000f10 <ADXL_WriteData+0x64>)
 8000ee0:	f003 f869 	bl	8003fb6 <HAL_SPI_TransmitReceive>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d006      	beq.n	8000ef8 <ADXL_WriteData+0x4c>
	{
		HAL_GPIO_WritePin(SPI_CS_ACC_GPIO_Port, SPI_CS_ACC_Pin, GPIO_PIN_SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	2140      	movs	r1, #64	; 0x40
 8000eee:	4807      	ldr	r0, [pc, #28]	; (8000f0c <ADXL_WriteData+0x60>)
 8000ef0:	f001 fc54 	bl	800279c <HAL_GPIO_WritePin>

		return false;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	e005      	b.n	8000f04 <ADXL_WriteData+0x58>
	}
	HAL_GPIO_WritePin(SPI_CS_ACC_GPIO_Port, SPI_CS_ACC_Pin, GPIO_PIN_SET);
 8000ef8:	2201      	movs	r2, #1
 8000efa:	2140      	movs	r1, #64	; 0x40
 8000efc:	4803      	ldr	r0, [pc, #12]	; (8000f0c <ADXL_WriteData+0x60>)
 8000efe:	f001 fc4d 	bl	800279c <HAL_GPIO_WritePin>

	return true;
 8000f02:	2301      	movs	r3, #1
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	48000400 	.word	0x48000400
 8000f10:	2000020c 	.word	0x2000020c

08000f14 <ADXL_ReadData>:

bool ADXL_ReadData(uint8_t regAddress, uint8_t *registerValue) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af02      	add	r7, sp, #8
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	6039      	str	r1, [r7, #0]
 8000f1e:	71fb      	strb	r3, [r7, #7]
	uint8_t TxBuffer[2];
	uint8_t RxBuffer[2];

	TxBuffer[0] = ADXL_SPI_ReadOp | regAddress;
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	733b      	strb	r3, [r7, #12]
	TxBuffer[1] = 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(SPI_CS_ACC_GPIO_Port, SPI_CS_ACC_Pin, GPIO_PIN_RESET);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2140      	movs	r1, #64	; 0x40
 8000f32:	4812      	ldr	r0, [pc, #72]	; (8000f7c <ADXL_ReadData+0x68>)
 8000f34:	f001 fc32 	bl	800279c <HAL_GPIO_WritePin>
	if (HAL_SPI_TransmitReceive(&hspi1, TxBuffer, RxBuffer, 2, 200) != HAL_OK) {
 8000f38:	f107 0208 	add.w	r2, r7, #8
 8000f3c:	f107 010c 	add.w	r1, r7, #12
 8000f40:	23c8      	movs	r3, #200	; 0xc8
 8000f42:	9300      	str	r3, [sp, #0]
 8000f44:	2302      	movs	r3, #2
 8000f46:	480e      	ldr	r0, [pc, #56]	; (8000f80 <ADXL_ReadData+0x6c>)
 8000f48:	f003 f835 	bl	8003fb6 <HAL_SPI_TransmitReceive>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d006      	beq.n	8000f60 <ADXL_ReadData+0x4c>
		HAL_GPIO_WritePin(SPI_CS_ACC_GPIO_Port, SPI_CS_ACC_Pin, GPIO_PIN_SET);
 8000f52:	2201      	movs	r2, #1
 8000f54:	2140      	movs	r1, #64	; 0x40
 8000f56:	4809      	ldr	r0, [pc, #36]	; (8000f7c <ADXL_ReadData+0x68>)
 8000f58:	f001 fc20 	bl	800279c <HAL_GPIO_WritePin>
		return false;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	e008      	b.n	8000f72 <ADXL_ReadData+0x5e>

	}
	HAL_GPIO_WritePin(SPI_CS_ACC_GPIO_Port, SPI_CS_ACC_Pin, GPIO_PIN_SET);
 8000f60:	2201      	movs	r2, #1
 8000f62:	2140      	movs	r1, #64	; 0x40
 8000f64:	4805      	ldr	r0, [pc, #20]	; (8000f7c <ADXL_ReadData+0x68>)
 8000f66:	f001 fc19 	bl	800279c <HAL_GPIO_WritePin>
	*registerValue = RxBuffer[1];
 8000f6a:	7a7a      	ldrb	r2, [r7, #9]
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	701a      	strb	r2, [r3, #0]

	return true;
 8000f70:	2301      	movs	r3, #1
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	48000400 	.word	0x48000400
 8000f80:	2000020c 	.word	0x2000020c

08000f84 <ADXL_ReadValuesXYZ>:

	return true;

}

void ADXL_ReadValuesXYZ(int16_t *x, int16_t *y, int16_t *z) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	; 0x28
 8000f88:	af02      	add	r7, sp, #8
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
	uint8_t TxBuffer[] = { 0, 0, 0, 0, 0, 0, 0 };
 8000f90:	4a22      	ldr	r2, [pc, #136]	; (800101c <ADXL_ReadValuesXYZ+0x98>)
 8000f92:	f107 0318 	add.w	r3, r7, #24
 8000f96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f9a:	6018      	str	r0, [r3, #0]
 8000f9c:	3304      	adds	r3, #4
 8000f9e:	8019      	strh	r1, [r3, #0]
 8000fa0:	3302      	adds	r3, #2
 8000fa2:	0c0a      	lsrs	r2, r1, #16
 8000fa4:	701a      	strb	r2, [r3, #0]
	uint8_t RxBuffer[7];

	TxBuffer[0] = ADXL_DATAX0 | ADXL_SPI_MB | ADXL_SPI_ReadOp;
 8000fa6:	23f2      	movs	r3, #242	; 0xf2
 8000fa8:	763b      	strb	r3, [r7, #24]
	HAL_GPIO_WritePin(SPI_CS_ACC_GPIO_Port, SPI_CS_ACC_Pin, GPIO_PIN_RESET);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2140      	movs	r1, #64	; 0x40
 8000fae:	481c      	ldr	r0, [pc, #112]	; (8001020 <ADXL_ReadValuesXYZ+0x9c>)
 8000fb0:	f001 fbf4 	bl	800279c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, TxBuffer, RxBuffer, 7, 200);
 8000fb4:	f107 0210 	add.w	r2, r7, #16
 8000fb8:	f107 0118 	add.w	r1, r7, #24
 8000fbc:	23c8      	movs	r3, #200	; 0xc8
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	2307      	movs	r3, #7
 8000fc2:	4818      	ldr	r0, [pc, #96]	; (8001024 <ADXL_ReadValuesXYZ+0xa0>)
 8000fc4:	f002 fff7 	bl	8003fb6 <HAL_SPI_TransmitReceive>


	*x = ((int16_t) RxBuffer[2] << 8) + RxBuffer[1];
 8000fc8:	7cbb      	ldrb	r3, [r7, #18]
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	021b      	lsls	r3, r3, #8
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	7c7b      	ldrb	r3, [r7, #17]
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	4413      	add	r3, r2
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	b21a      	sxth	r2, r3
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	801a      	strh	r2, [r3, #0]
	*y = ((int16_t) RxBuffer[4] << 8) + RxBuffer[3];
 8000fde:	7d3b      	ldrb	r3, [r7, #20]
 8000fe0:	b29b      	uxth	r3, r3
 8000fe2:	021b      	lsls	r3, r3, #8
 8000fe4:	b29a      	uxth	r2, r3
 8000fe6:	7cfb      	ldrb	r3, [r7, #19]
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	4413      	add	r3, r2
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	b21a      	sxth	r2, r3
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	801a      	strh	r2, [r3, #0]
	*z = ((int16_t) RxBuffer[6] << 8) + RxBuffer[5];
 8000ff4:	7dbb      	ldrb	r3, [r7, #22]
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	021b      	lsls	r3, r3, #8
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	7d7b      	ldrb	r3, [r7, #21]
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	4413      	add	r3, r2
 8001002:	b29b      	uxth	r3, r3
 8001004:	b21a      	sxth	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(SPI_CS_ACC_GPIO_Port, SPI_CS_ACC_Pin, GPIO_PIN_SET);
 800100a:	2201      	movs	r2, #1
 800100c:	2140      	movs	r1, #64	; 0x40
 800100e:	4804      	ldr	r0, [pc, #16]	; (8001020 <ADXL_ReadValuesXYZ+0x9c>)
 8001010:	f001 fbc4 	bl	800279c <HAL_GPIO_WritePin>
}
 8001014:	bf00      	nop
 8001016:	3720      	adds	r7, #32
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	08008770 	.word	0x08008770
 8001020:	48000400 	.word	0x48000400
 8001024:	2000020c 	.word	0x2000020c

08001028 <ADXL_IT_GetValuesXYZ>:



void ADXL_IT_GetValuesXYZ(int16_t *x, int16_t *y, int16_t *z)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
	*x = ((int16_t) RxBuffer[2] << 8) + RxBuffer[1];
 8001034:	4b16      	ldr	r3, [pc, #88]	; (8001090 <ADXL_IT_GetValuesXYZ+0x68>)
 8001036:	789b      	ldrb	r3, [r3, #2]
 8001038:	b29b      	uxth	r3, r3
 800103a:	021b      	lsls	r3, r3, #8
 800103c:	b29a      	uxth	r2, r3
 800103e:	4b14      	ldr	r3, [pc, #80]	; (8001090 <ADXL_IT_GetValuesXYZ+0x68>)
 8001040:	785b      	ldrb	r3, [r3, #1]
 8001042:	b29b      	uxth	r3, r3
 8001044:	4413      	add	r3, r2
 8001046:	b29b      	uxth	r3, r3
 8001048:	b21a      	sxth	r2, r3
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	801a      	strh	r2, [r3, #0]
	*y = ((int16_t) RxBuffer[4] << 8) + RxBuffer[3];
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <ADXL_IT_GetValuesXYZ+0x68>)
 8001050:	791b      	ldrb	r3, [r3, #4]
 8001052:	b29b      	uxth	r3, r3
 8001054:	021b      	lsls	r3, r3, #8
 8001056:	b29a      	uxth	r2, r3
 8001058:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <ADXL_IT_GetValuesXYZ+0x68>)
 800105a:	78db      	ldrb	r3, [r3, #3]
 800105c:	b29b      	uxth	r3, r3
 800105e:	4413      	add	r3, r2
 8001060:	b29b      	uxth	r3, r3
 8001062:	b21a      	sxth	r2, r3
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	801a      	strh	r2, [r3, #0]
	*z = ((int16_t) RxBuffer[6] << 8) + RxBuffer[5];
 8001068:	4b09      	ldr	r3, [pc, #36]	; (8001090 <ADXL_IT_GetValuesXYZ+0x68>)
 800106a:	799b      	ldrb	r3, [r3, #6]
 800106c:	b29b      	uxth	r3, r3
 800106e:	021b      	lsls	r3, r3, #8
 8001070:	b29a      	uxth	r2, r3
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <ADXL_IT_GetValuesXYZ+0x68>)
 8001074:	795b      	ldrb	r3, [r3, #5]
 8001076:	b29b      	uxth	r3, r3
 8001078:	4413      	add	r3, r2
 800107a:	b29b      	uxth	r3, r3
 800107c:	b21a      	sxth	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	801a      	strh	r2, [r3, #0]
}
 8001082:	bf00      	nop
 8001084:	3714      	adds	r7, #20
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	20000204 	.word	0x20000204

08001094 <ADXL_IT_StartSPI>:

void ADXL_IT_StartSPI()
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
	for(int i = 1; i < 7; i++)
 800109a:	2301      	movs	r3, #1
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	e007      	b.n	80010b0 <ADXL_IT_StartSPI+0x1c>
	{
		TxBuffer[i] = 0;
 80010a0:	4a0e      	ldr	r2, [pc, #56]	; (80010dc <ADXL_IT_StartSPI+0x48>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	2200      	movs	r2, #0
 80010a8:	701a      	strb	r2, [r3, #0]
	for(int i = 1; i < 7; i++)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	3301      	adds	r3, #1
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b06      	cmp	r3, #6
 80010b4:	ddf4      	ble.n	80010a0 <ADXL_IT_StartSPI+0xc>
	}

	TxBuffer[0] = ADXL_DATAX0 | ADXL_SPI_MB | ADXL_SPI_ReadOp;
 80010b6:	4b09      	ldr	r3, [pc, #36]	; (80010dc <ADXL_IT_StartSPI+0x48>)
 80010b8:	22f2      	movs	r2, #242	; 0xf2
 80010ba:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(SPI_CS_ACC_GPIO_Port, SPI_CS_ACC_Pin, GPIO_PIN_RESET);
 80010bc:	2200      	movs	r2, #0
 80010be:	2140      	movs	r1, #64	; 0x40
 80010c0:	4807      	ldr	r0, [pc, #28]	; (80010e0 <ADXL_IT_StartSPI+0x4c>)
 80010c2:	f001 fb6b 	bl	800279c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(&hspi1, TxBuffer, RxBuffer, 7);
 80010c6:	2307      	movs	r3, #7
 80010c8:	4a06      	ldr	r2, [pc, #24]	; (80010e4 <ADXL_IT_StartSPI+0x50>)
 80010ca:	4904      	ldr	r1, [pc, #16]	; (80010dc <ADXL_IT_StartSPI+0x48>)
 80010cc:	4806      	ldr	r0, [pc, #24]	; (80010e8 <ADXL_IT_StartSPI+0x54>)
 80010ce:	f003 f985 	bl	80043dc <HAL_SPI_TransmitReceive_DMA>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	200001fc 	.word	0x200001fc
 80010e0:	48000400 	.word	0x48000400
 80010e4:	20000204 	.word	0x20000204
 80010e8:	2000020c 	.word	0x2000020c

080010ec <ADXL_Stop_Measurebit>:

}


void ADXL_Stop_Measurebit(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
	ADXL_WriteData(ADXL_POWER_CTL, 0x4);
 80010f0:	2104      	movs	r1, #4
 80010f2:	202d      	movs	r0, #45	; 0x2d
 80010f4:	f7ff feda 	bl	8000eac <ADXL_WriteData>

}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}

080010fc <ADXL_Set_Measurebit>:

void ADXL_Set_Measurebit(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
	ADXL_WriteData(ADXL_POWER_CTL, 0x0);
 8001100:	2100      	movs	r1, #0
 8001102:	202d      	movs	r0, #45	; 0x2d
 8001104:	f7ff fed2 	bl	8000eac <ADXL_WriteData>
	ADXL_WriteData(ADXL_POWER_CTL, 0x8);
 8001108:	2108      	movs	r1, #8
 800110a:	202d      	movs	r0, #45	; 0x2d
 800110c:	f7ff fece 	bl	8000eac <ADXL_WriteData>
}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}

08001114 <ADXL_ConvertXYZValuesG>:

void ADXL_ConvertXYZValuesG(int16_t *xg , int16_t *yg, int16_t *zg)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]

//	ADXL_Set_Measurebit();
//ADXL_IT_ReadValuesXYZ(&x, &y, &z);
	*xg = (*xg) * ADXL345_SCALE_FACTOR;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001126:	b29b      	uxth	r3, r3
 8001128:	461a      	mov	r2, r3
 800112a:	0092      	lsls	r2, r2, #2
 800112c:	441a      	add	r2, r3
 800112e:	00d2      	lsls	r2, r2, #3
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	b29b      	uxth	r3, r3
 8001134:	b21a      	sxth	r2, r3
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	801a      	strh	r2, [r3, #0]
	*yg = (*yg) * ADXL345_SCALE_FACTOR;
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001140:	b29b      	uxth	r3, r3
 8001142:	461a      	mov	r2, r3
 8001144:	0092      	lsls	r2, r2, #2
 8001146:	441a      	add	r2, r3
 8001148:	00d2      	lsls	r2, r2, #3
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	b29b      	uxth	r3, r3
 800114e:	b21a      	sxth	r2, r3
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	801a      	strh	r2, [r3, #0]
	*zg = (*zg) * ADXL345_SCALE_FACTOR;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f9b3 3000 	ldrsh.w	r3, [r3]
 800115a:	b29b      	uxth	r3, r3
 800115c:	461a      	mov	r2, r3
 800115e:	0092      	lsls	r2, r2, #2
 8001160:	441a      	add	r2, r3
 8001162:	00d2      	lsls	r2, r2, #3
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	b29b      	uxth	r3, r3
 8001168:	b21a      	sxth	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	801a      	strh	r2, [r3, #0]
}
 800116e:	bf00      	nop
 8001170:	3714      	adds	r7, #20
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <ADXL_INIT_IT>:

void ADXL_INIT_IT()
{
 800117a:	b580      	push	{r7, lr}
 800117c:	af00      	add	r7, sp, #0
	ADXL_WriteData(ADXL_INT_MAP_REG , 0x80);  //setam bit d7 ca sa activam intreruperea data ready pt int2
 800117e:	2180      	movs	r1, #128	; 0x80
 8001180:	202f      	movs	r0, #47	; 0x2f
 8001182:	f7ff fe93 	bl	8000eac <ADXL_WriteData>
	ADXL_WriteData(ADXL_INT_ENABLE_REG, 0x80);
 8001186:	2180      	movs	r1, #128	; 0x80
 8001188:	202e      	movs	r0, #46	; 0x2e
 800118a:	f7ff fe8f 	bl	8000eac <ADXL_WriteData>
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <ADXL_Init>:

int ADXL_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
	uint8_t devId;

	//reset ADXL
	HAL_GPIO_TogglePin(ADXL_RESET_GPIO_Port, ADXL_RESET_Pin);
 800119a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800119e:	4810      	ldr	r0, [pc, #64]	; (80011e0 <ADXL_Init+0x4c>)
 80011a0:	f001 fb14 	bl	80027cc <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 80011a4:	2064      	movs	r0, #100	; 0x64
 80011a6:	f000 fdaf 	bl	8001d08 <HAL_Delay>
	HAL_GPIO_TogglePin(ADXL_RESET_GPIO_Port, ADXL_RESET_Pin);
 80011aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011ae:	480c      	ldr	r0, [pc, #48]	; (80011e0 <ADXL_Init+0x4c>)
 80011b0:	f001 fb0c 	bl	80027cc <HAL_GPIO_TogglePin>

    // Enter low power mode
    ADXL_Stop_Measurebit();
 80011b4:	f7ff ff9a 	bl	80010ec <ADXL_Stop_Measurebit>

	// Check SPI Communication
    ADXL_ReadData(ADXL_DEVICEID, &devId);
 80011b8:	1dfb      	adds	r3, r7, #7
 80011ba:	4619      	mov	r1, r3
 80011bc:	2000      	movs	r0, #0
 80011be:	f7ff fea9 	bl	8000f14 <ADXL_ReadData>
    if (devId != 0xE5)
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	2be5      	cmp	r3, #229	; 0xe5
 80011c6:	d001      	beq.n	80011cc <ADXL_Init+0x38>
    {
    	Error_Handler();
 80011c8:	f000 f995 	bl	80014f6 <Error_Handler>
    }

    ADXL_INIT_IT();
 80011cc:	f7ff ffd5 	bl	800117a <ADXL_INIT_IT>

	// Start Measure
    ADXL_Set_Measurebit();
 80011d0:	f7ff ff94 	bl	80010fc <ADXL_Set_Measurebit>

	// Make 1 dummy read to x, y, z, return -EIO if HAL Read fails
  //

    return 0;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	48000800 	.word	0x48000800

080011e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011ea:	4b10      	ldr	r3, [pc, #64]	; (800122c <MX_DMA_Init+0x48>)
 80011ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ee:	4a0f      	ldr	r2, [pc, #60]	; (800122c <MX_DMA_Init+0x48>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6493      	str	r3, [r2, #72]	; 0x48
 80011f6:	4b0d      	ldr	r3, [pc, #52]	; (800122c <MX_DMA_Init+0x48>)
 80011f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2102      	movs	r1, #2
 8001206:	200c      	movs	r0, #12
 8001208:	f000 fea1 	bl	8001f4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800120c:	200c      	movs	r0, #12
 800120e:	f000 feba 	bl	8001f86 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 2, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	2102      	movs	r1, #2
 8001216:	200d      	movs	r0, #13
 8001218:	f000 fe99 	bl	8001f4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800121c:	200d      	movs	r0, #13
 800121e:	f000 feb2 	bl	8001f86 <HAL_NVIC_EnableIRQ>

}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40021000 	.word	0x40021000

08001230 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08a      	sub	sp, #40	; 0x28
 8001234:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	60da      	str	r2, [r3, #12]
 8001244:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001246:	4b55      	ldr	r3, [pc, #340]	; (800139c <MX_GPIO_Init+0x16c>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124a:	4a54      	ldr	r2, [pc, #336]	; (800139c <MX_GPIO_Init+0x16c>)
 800124c:	f043 0304 	orr.w	r3, r3, #4
 8001250:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001252:	4b52      	ldr	r3, [pc, #328]	; (800139c <MX_GPIO_Init+0x16c>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001256:	f003 0304 	and.w	r3, r3, #4
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800125e:	4b4f      	ldr	r3, [pc, #316]	; (800139c <MX_GPIO_Init+0x16c>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001262:	4a4e      	ldr	r2, [pc, #312]	; (800139c <MX_GPIO_Init+0x16c>)
 8001264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001268:	64d3      	str	r3, [r2, #76]	; 0x4c
 800126a:	4b4c      	ldr	r3, [pc, #304]	; (800139c <MX_GPIO_Init+0x16c>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001276:	4b49      	ldr	r3, [pc, #292]	; (800139c <MX_GPIO_Init+0x16c>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127a:	4a48      	ldr	r2, [pc, #288]	; (800139c <MX_GPIO_Init+0x16c>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001282:	4b46      	ldr	r3, [pc, #280]	; (800139c <MX_GPIO_Init+0x16c>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800128e:	4b43      	ldr	r3, [pc, #268]	; (800139c <MX_GPIO_Init+0x16c>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	4a42      	ldr	r2, [pc, #264]	; (800139c <MX_GPIO_Init+0x16c>)
 8001294:	f043 0302 	orr.w	r3, r3, #2
 8001298:	64d3      	str	r3, [r2, #76]	; 0x4c
 800129a:	4b40      	ldr	r3, [pc, #256]	; (800139c <MX_GPIO_Init+0x16c>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CS_GYRO_Pin|EXTI_INT_TEST_Pin, GPIO_PIN_RESET);
 80012a6:	2200      	movs	r2, #0
 80012a8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80012ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b0:	f001 fa74 	bl	800279c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADXL_RESET_GPIO_Port, ADXL_RESET_Pin, GPIO_PIN_RESET);
 80012b4:	2200      	movs	r2, #0
 80012b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012ba:	4839      	ldr	r0, [pc, #228]	; (80013a0 <MX_GPIO_Init+0x170>)
 80012bc:	f001 fa6e 	bl	800279c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_IT_TEST_GPIO_Port, SPI_IT_TEST_Pin, GPIO_PIN_RESET);
 80012c0:	2200      	movs	r2, #0
 80012c2:	2120      	movs	r1, #32
 80012c4:	4837      	ldr	r0, [pc, #220]	; (80013a4 <MX_GPIO_Init+0x174>)
 80012c6:	f001 fa69 	bl	800279c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_ACC_GPIO_Port, SPI_CS_ACC_Pin, GPIO_PIN_SET);
 80012ca:	2201      	movs	r2, #1
 80012cc:	2140      	movs	r1, #64	; 0x40
 80012ce:	4835      	ldr	r0, [pc, #212]	; (80013a4 <MX_GPIO_Init+0x174>)
 80012d0:	f001 fa64 	bl	800279c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012da:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	4619      	mov	r1, r3
 80012ea:	482d      	ldr	r0, [pc, #180]	; (80013a0 <MX_GPIO_Init+0x170>)
 80012ec:	f001 f8ac 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_EXTI8ACCINT_Pin;
 80012f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012fc:	2302      	movs	r3, #2
 80012fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_EXTI8ACCINT_GPIO_Port, &GPIO_InitStruct);
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	4619      	mov	r1, r3
 8001306:	4826      	ldr	r0, [pc, #152]	; (80013a0 <MX_GPIO_Init+0x170>)
 8001308:	f001 f89e 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SPI_CS_GYRO_Pin|EXTI_INT_TEST_Pin;
 800130c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001310:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001312:	2301      	movs	r3, #1
 8001314:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131a:	2300      	movs	r3, #0
 800131c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	4619      	mov	r1, r3
 8001324:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001328:	f001 f88e 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADXL_RESET_Pin;
 800132c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001330:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001332:	2301      	movs	r3, #1
 8001334:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133a:	2300      	movs	r3, #0
 800133c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ADXL_RESET_GPIO_Port, &GPIO_InitStruct);
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4619      	mov	r1, r3
 8001344:	4816      	ldr	r0, [pc, #88]	; (80013a0 <MX_GPIO_Init+0x170>)
 8001346:	f001 f87f 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_IT_TEST_Pin;
 800134a:	2320      	movs	r3, #32
 800134c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134e:	2301      	movs	r3, #1
 8001350:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001356:	2300      	movs	r3, #0
 8001358:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_IT_TEST_GPIO_Port, &GPIO_InitStruct);
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	4619      	mov	r1, r3
 8001360:	4810      	ldr	r0, [pc, #64]	; (80013a4 <MX_GPIO_Init+0x174>)
 8001362:	f001 f871 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_ACC_Pin;
 8001366:	2340      	movs	r3, #64	; 0x40
 8001368:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136a:	2301      	movs	r3, #1
 800136c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001372:	2302      	movs	r3, #2
 8001374:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_ACC_GPIO_Port, &GPIO_InitStruct);
 8001376:	f107 0314 	add.w	r3, r7, #20
 800137a:	4619      	mov	r1, r3
 800137c:	4809      	ldr	r0, [pc, #36]	; (80013a4 <MX_GPIO_Init+0x174>)
 800137e:	f001 f863 	bl	8002448 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	2102      	movs	r1, #2
 8001386:	2017      	movs	r0, #23
 8001388:	f000 fde1 	bl	8001f4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800138c:	2017      	movs	r0, #23
 800138e:	f000 fdfa 	bl	8001f86 <HAL_NVIC_EnableIRQ>

}
 8001392:	bf00      	nop
 8001394:	3728      	adds	r7, #40	; 0x28
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40021000 	.word	0x40021000
 80013a0:	48000800 	.word	0x48000800
 80013a4:	48000400 	.word	0x48000400

080013a8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_EXTI8ACCINT_Pin)
 80013b2:	88fb      	ldrh	r3, [r7, #6]
 80013b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013b8:	d10d      	bne.n	80013d6 <HAL_GPIO_EXTI_Callback+0x2e>
	{
		HAL_GPIO_TogglePin(EXTI_INT_TEST_GPIO_Port, EXTI_INT_TEST_Pin);
 80013ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c2:	f001 fa03 	bl	80027cc <HAL_GPIO_TogglePin>
		ADXL_IT_StartSPI();
 80013c6:	f7ff fe65 	bl	8001094 <ADXL_IT_StartSPI>
		HAL_GPIO_TogglePin(EXTI_INT_TEST_GPIO_Port, EXTI_INT_TEST_Pin);
 80013ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d2:	f001 f9fb 	bl	80027cc <HAL_GPIO_TogglePin>
	}
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
	...

080013e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013e6:	f000 fc13 	bl	8001c10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ea:	f000 f833 	bl	8001454 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ee:	f7ff ff1f 	bl	8001230 <MX_GPIO_Init>
  MX_DMA_Init();
 80013f2:	f7ff fef7 	bl	80011e4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80013f6:	f000 fad7 	bl	80019a8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80013fa:	f000 f881 	bl	8001500 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80013fe:	2017      	movs	r0, #23
 8001400:	f000 fdcf 	bl	8001fa2 <HAL_NVIC_DisableIRQ>
    ADXL_Init();
 8001404:	f7ff fec6 	bl	8001194 <ADXL_Init>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001408:	2017      	movs	r0, #23
 800140a:	f000 fdbc 	bl	8001f86 <HAL_NVIC_EnableIRQ>
    int16_t x,y,z;
    ADXL_ReadValuesXYZ(&x, &y, &z);
 800140e:	1cba      	adds	r2, r7, #2
 8001410:	1d39      	adds	r1, r7, #4
 8001412:	1dbb      	adds	r3, r7, #6
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff fdb5 	bl	8000f84 <ADXL_ReadValuesXYZ>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  if(is_new_ACC_datacomplete)
 800141a:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <main+0x70>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d0fb      	beq.n	800141a <main+0x3a>
	  {
		  is_new_ACC_datacomplete = false;
 8001422:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <main+0x70>)
 8001424:	2200      	movs	r2, #0
 8001426:	701a      	strb	r2, [r3, #0]
		  ADXL_IT_GetValuesXYZ(&x, &y, &z);
 8001428:	1cba      	adds	r2, r7, #2
 800142a:	1d39      	adds	r1, r7, #4
 800142c:	1dbb      	adds	r3, r7, #6
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff fdfa 	bl	8001028 <ADXL_IT_GetValuesXYZ>
		  ADXL_ConvertXYZValuesG(&x, &y, &z);
 8001434:	1cba      	adds	r2, r7, #2
 8001436:	1d39      	adds	r1, r7, #4
 8001438:	1dbb      	adds	r3, r7, #6
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fe6a 	bl	8001114 <ADXL_ConvertXYZValuesG>
		  USART_TransmitACCValues(&x, &y, &z);
 8001440:	1cba      	adds	r2, r7, #2
 8001442:	1d39      	adds	r1, r7, #4
 8001444:	1dbb      	adds	r3, r7, #6
 8001446:	4618      	mov	r0, r3
 8001448:	f000 fb3a 	bl	8001ac0 <USART_TransmitACCValues>
	  if(is_new_ACC_datacomplete)
 800144c:	e7e5      	b.n	800141a <main+0x3a>
 800144e:	bf00      	nop
 8001450:	200001f8 	.word	0x200001f8

08001454 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b096      	sub	sp, #88	; 0x58
 8001458:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	2244      	movs	r2, #68	; 0x44
 8001460:	2100      	movs	r1, #0
 8001462:	4618      	mov	r0, r3
 8001464:	f004 fa8c 	bl	8005980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001468:	463b      	mov	r3, r7
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]
 8001474:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001476:	f44f 7000 	mov.w	r0, #512	; 0x200
 800147a:	f001 f9e7 	bl	800284c <HAL_PWREx_ControlVoltageScaling>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001484:	f000 f837 	bl	80014f6 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001488:	2302      	movs	r3, #2
 800148a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800148c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001490:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001492:	2310      	movs	r3, #16
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001496:	2302      	movs	r3, #2
 8001498:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800149a:	2302      	movs	r3, #2
 800149c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800149e:	2301      	movs	r3, #1
 80014a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80014a2:	230a      	movs	r3, #10
 80014a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80014a6:	2307      	movs	r3, #7
 80014a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014aa:	2302      	movs	r3, #2
 80014ac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014ae:	2302      	movs	r3, #2
 80014b0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014b2:	f107 0314 	add.w	r3, r7, #20
 80014b6:	4618      	mov	r0, r3
 80014b8:	f001 fa1e 	bl	80028f8 <HAL_RCC_OscConfig>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80014c2:	f000 f818 	bl	80014f6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014c6:	230f      	movs	r3, #15
 80014c8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ca:	2303      	movs	r3, #3
 80014cc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ce:	2300      	movs	r3, #0
 80014d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014da:	463b      	mov	r3, r7
 80014dc:	2104      	movs	r1, #4
 80014de:	4618      	mov	r0, r3
 80014e0:	f001 fde6 	bl	80030b0 <HAL_RCC_ClockConfig>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80014ea:	f000 f804 	bl	80014f6 <Error_Handler>
  }
}
 80014ee:	bf00      	nop
 80014f0:	3758      	adds	r7, #88	; 0x58
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014fa:	b672      	cpsid	i
}
 80014fc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014fe:	e7fe      	b.n	80014fe <Error_Handler+0x8>

08001500 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001504:	4b1b      	ldr	r3, [pc, #108]	; (8001574 <MX_SPI1_Init+0x74>)
 8001506:	4a1c      	ldr	r2, [pc, #112]	; (8001578 <MX_SPI1_Init+0x78>)
 8001508:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800150a:	4b1a      	ldr	r3, [pc, #104]	; (8001574 <MX_SPI1_Init+0x74>)
 800150c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001510:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001512:	4b18      	ldr	r3, [pc, #96]	; (8001574 <MX_SPI1_Init+0x74>)
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001518:	4b16      	ldr	r3, [pc, #88]	; (8001574 <MX_SPI1_Init+0x74>)
 800151a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800151e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001520:	4b14      	ldr	r3, [pc, #80]	; (8001574 <MX_SPI1_Init+0x74>)
 8001522:	2202      	movs	r2, #2
 8001524:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001526:	4b13      	ldr	r3, [pc, #76]	; (8001574 <MX_SPI1_Init+0x74>)
 8001528:	2201      	movs	r2, #1
 800152a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <MX_SPI1_Init+0x74>)
 800152e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001532:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001534:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <MX_SPI1_Init+0x74>)
 8001536:	2238      	movs	r2, #56	; 0x38
 8001538:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800153a:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <MX_SPI1_Init+0x74>)
 800153c:	2200      	movs	r2, #0
 800153e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <MX_SPI1_Init+0x74>)
 8001542:	2200      	movs	r2, #0
 8001544:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001546:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <MX_SPI1_Init+0x74>)
 8001548:	2200      	movs	r2, #0
 800154a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800154c:	4b09      	ldr	r3, [pc, #36]	; (8001574 <MX_SPI1_Init+0x74>)
 800154e:	2207      	movs	r2, #7
 8001550:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001552:	4b08      	ldr	r3, [pc, #32]	; (8001574 <MX_SPI1_Init+0x74>)
 8001554:	2200      	movs	r2, #0
 8001556:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <MX_SPI1_Init+0x74>)
 800155a:	2200      	movs	r2, #0
 800155c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800155e:	4805      	ldr	r0, [pc, #20]	; (8001574 <MX_SPI1_Init+0x74>)
 8001560:	f002 fc86 	bl	8003e70 <HAL_SPI_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800156a:	f7ff ffc4 	bl	80014f6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	2000020c 	.word	0x2000020c
 8001578:	40013000 	.word	0x40013000

0800157c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08a      	sub	sp, #40	; 0x28
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a46      	ldr	r2, [pc, #280]	; (80016b4 <HAL_SPI_MspInit+0x138>)
 800159a:	4293      	cmp	r3, r2
 800159c:	f040 8085 	bne.w	80016aa <HAL_SPI_MspInit+0x12e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015a0:	4b45      	ldr	r3, [pc, #276]	; (80016b8 <HAL_SPI_MspInit+0x13c>)
 80015a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015a4:	4a44      	ldr	r2, [pc, #272]	; (80016b8 <HAL_SPI_MspInit+0x13c>)
 80015a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015aa:	6613      	str	r3, [r2, #96]	; 0x60
 80015ac:	4b42      	ldr	r3, [pc, #264]	; (80016b8 <HAL_SPI_MspInit+0x13c>)
 80015ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015b4:	613b      	str	r3, [r7, #16]
 80015b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b8:	4b3f      	ldr	r3, [pc, #252]	; (80016b8 <HAL_SPI_MspInit+0x13c>)
 80015ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015bc:	4a3e      	ldr	r2, [pc, #248]	; (80016b8 <HAL_SPI_MspInit+0x13c>)
 80015be:	f043 0301 	orr.w	r3, r3, #1
 80015c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015c4:	4b3c      	ldr	r3, [pc, #240]	; (80016b8 <HAL_SPI_MspInit+0x13c>)
 80015c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c8:	f003 0301 	and.w	r3, r3, #1
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80015d0:	23e0      	movs	r3, #224	; 0xe0
 80015d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d4:	2302      	movs	r3, #2
 80015d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015dc:	2303      	movs	r3, #3
 80015de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015e0:	2305      	movs	r3, #5
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	4619      	mov	r1, r3
 80015ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ee:	f000 ff2b 	bl	8002448 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 80015f2:	4b32      	ldr	r3, [pc, #200]	; (80016bc <HAL_SPI_MspInit+0x140>)
 80015f4:	4a32      	ldr	r2, [pc, #200]	; (80016c0 <HAL_SPI_MspInit+0x144>)
 80015f6:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 80015f8:	4b30      	ldr	r3, [pc, #192]	; (80016bc <HAL_SPI_MspInit+0x140>)
 80015fa:	2201      	movs	r2, #1
 80015fc:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015fe:	4b2f      	ldr	r3, [pc, #188]	; (80016bc <HAL_SPI_MspInit+0x140>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001604:	4b2d      	ldr	r3, [pc, #180]	; (80016bc <HAL_SPI_MspInit+0x140>)
 8001606:	2200      	movs	r2, #0
 8001608:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800160a:	4b2c      	ldr	r3, [pc, #176]	; (80016bc <HAL_SPI_MspInit+0x140>)
 800160c:	2280      	movs	r2, #128	; 0x80
 800160e:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001610:	4b2a      	ldr	r3, [pc, #168]	; (80016bc <HAL_SPI_MspInit+0x140>)
 8001612:	2200      	movs	r2, #0
 8001614:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001616:	4b29      	ldr	r3, [pc, #164]	; (80016bc <HAL_SPI_MspInit+0x140>)
 8001618:	2200      	movs	r2, #0
 800161a:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800161c:	4b27      	ldr	r3, [pc, #156]	; (80016bc <HAL_SPI_MspInit+0x140>)
 800161e:	2200      	movs	r2, #0
 8001620:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001622:	4b26      	ldr	r3, [pc, #152]	; (80016bc <HAL_SPI_MspInit+0x140>)
 8001624:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001628:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800162a:	4824      	ldr	r0, [pc, #144]	; (80016bc <HAL_SPI_MspInit+0x140>)
 800162c:	f000 fcd4 	bl	8001fd8 <HAL_DMA_Init>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <HAL_SPI_MspInit+0xbe>
    {
      Error_Handler();
 8001636:	f7ff ff5e 	bl	80014f6 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a1f      	ldr	r2, [pc, #124]	; (80016bc <HAL_SPI_MspInit+0x140>)
 800163e:	659a      	str	r2, [r3, #88]	; 0x58
 8001640:	4a1e      	ldr	r2, [pc, #120]	; (80016bc <HAL_SPI_MspInit+0x140>)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001646:	4b1f      	ldr	r3, [pc, #124]	; (80016c4 <HAL_SPI_MspInit+0x148>)
 8001648:	4a1f      	ldr	r2, [pc, #124]	; (80016c8 <HAL_SPI_MspInit+0x14c>)
 800164a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 800164c:	4b1d      	ldr	r3, [pc, #116]	; (80016c4 <HAL_SPI_MspInit+0x148>)
 800164e:	2201      	movs	r2, #1
 8001650:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001652:	4b1c      	ldr	r3, [pc, #112]	; (80016c4 <HAL_SPI_MspInit+0x148>)
 8001654:	2210      	movs	r2, #16
 8001656:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001658:	4b1a      	ldr	r3, [pc, #104]	; (80016c4 <HAL_SPI_MspInit+0x148>)
 800165a:	2200      	movs	r2, #0
 800165c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800165e:	4b19      	ldr	r3, [pc, #100]	; (80016c4 <HAL_SPI_MspInit+0x148>)
 8001660:	2280      	movs	r2, #128	; 0x80
 8001662:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001664:	4b17      	ldr	r3, [pc, #92]	; (80016c4 <HAL_SPI_MspInit+0x148>)
 8001666:	2200      	movs	r2, #0
 8001668:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800166a:	4b16      	ldr	r3, [pc, #88]	; (80016c4 <HAL_SPI_MspInit+0x148>)
 800166c:	2200      	movs	r2, #0
 800166e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001670:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <HAL_SPI_MspInit+0x148>)
 8001672:	2200      	movs	r2, #0
 8001674:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001676:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <HAL_SPI_MspInit+0x148>)
 8001678:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800167c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800167e:	4811      	ldr	r0, [pc, #68]	; (80016c4 <HAL_SPI_MspInit+0x148>)
 8001680:	f000 fcaa 	bl	8001fd8 <HAL_DMA_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 800168a:	f7ff ff34 	bl	80014f6 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a0c      	ldr	r2, [pc, #48]	; (80016c4 <HAL_SPI_MspInit+0x148>)
 8001692:	655a      	str	r2, [r3, #84]	; 0x54
 8001694:	4a0b      	ldr	r2, [pc, #44]	; (80016c4 <HAL_SPI_MspInit+0x148>)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 800169a:	2200      	movs	r2, #0
 800169c:	2102      	movs	r1, #2
 800169e:	2023      	movs	r0, #35	; 0x23
 80016a0:	f000 fc55 	bl	8001f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80016a4:	2023      	movs	r0, #35	; 0x23
 80016a6:	f000 fc6e 	bl	8001f86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80016aa:	bf00      	nop
 80016ac:	3728      	adds	r7, #40	; 0x28
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40013000 	.word	0x40013000
 80016b8:	40021000 	.word	0x40021000
 80016bc:	20000270 	.word	0x20000270
 80016c0:	4002001c 	.word	0x4002001c
 80016c4:	200002b8 	.word	0x200002b8
 80016c8:	40020030 	.word	0x40020030

080016cc <HAL_SPI_TxRxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
   if(hspi == &hspi1)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4a0b      	ldr	r2, [pc, #44]	; (8001704 <HAL_SPI_TxRxCpltCallback+0x38>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d10b      	bne.n	80016f4 <HAL_SPI_TxRxCpltCallback+0x28>
   {
      is_new_ACC_datacomplete = true;
 80016dc:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <HAL_SPI_TxRxCpltCallback+0x3c>)
 80016de:	2201      	movs	r2, #1
 80016e0:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(SPI_CS_ACC_GPIO_Port, SPI_CS_ACC_Pin, GPIO_PIN_SET);
 80016e2:	2201      	movs	r2, #1
 80016e4:	2140      	movs	r1, #64	; 0x40
 80016e6:	4809      	ldr	r0, [pc, #36]	; (800170c <HAL_SPI_TxRxCpltCallback+0x40>)
 80016e8:	f001 f858 	bl	800279c <HAL_GPIO_WritePin>
      HAL_GPIO_TogglePin(SPI_IT_TEST_GPIO_Port, SPI_IT_TEST_Pin);
 80016ec:	2120      	movs	r1, #32
 80016ee:	4807      	ldr	r0, [pc, #28]	; (800170c <HAL_SPI_TxRxCpltCallback+0x40>)
 80016f0:	f001 f86c 	bl	80027cc <HAL_GPIO_TogglePin>
   }

   //Release CS line
   HAL_GPIO_TogglePin(SPI_IT_TEST_GPIO_Port, SPI_IT_TEST_Pin);
 80016f4:	2120      	movs	r1, #32
 80016f6:	4805      	ldr	r0, [pc, #20]	; (800170c <HAL_SPI_TxRxCpltCallback+0x40>)
 80016f8:	f001 f868 	bl	80027cc <HAL_GPIO_TogglePin>
}
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	2000020c 	.word	0x2000020c
 8001708:	200001f8 	.word	0x200001f8
 800170c:	48000400 	.word	0x48000400

08001710 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001716:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <HAL_MspInit+0x44>)
 8001718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800171a:	4a0e      	ldr	r2, [pc, #56]	; (8001754 <HAL_MspInit+0x44>)
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	6613      	str	r3, [r2, #96]	; 0x60
 8001722:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <HAL_MspInit+0x44>)
 8001724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	607b      	str	r3, [r7, #4]
 800172c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800172e:	4b09      	ldr	r3, [pc, #36]	; (8001754 <HAL_MspInit+0x44>)
 8001730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001732:	4a08      	ldr	r2, [pc, #32]	; (8001754 <HAL_MspInit+0x44>)
 8001734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001738:	6593      	str	r3, [r2, #88]	; 0x58
 800173a:	4b06      	ldr	r3, [pc, #24]	; (8001754 <HAL_MspInit+0x44>)
 800173c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001742:	603b      	str	r3, [r7, #0]
 8001744:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	40021000 	.word	0x40021000

08001758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800175c:	e7fe      	b.n	800175c <NMI_Handler+0x4>

0800175e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001762:	e7fe      	b.n	8001762 <HardFault_Handler+0x4>

08001764 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001768:	e7fe      	b.n	8001768 <MemManage_Handler+0x4>

0800176a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800176e:	e7fe      	b.n	800176e <BusFault_Handler+0x4>

08001770 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001774:	e7fe      	b.n	8001774 <UsageFault_Handler+0x4>

08001776 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017a4:	f000 fa90 	bl	8001cc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}

080017ac <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80017b0:	4802      	ldr	r0, [pc, #8]	; (80017bc <DMA1_Channel2_IRQHandler+0x10>)
 80017b2:	f000 fd6a 	bl	800228a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000270 	.word	0x20000270

080017c0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80017c4:	4802      	ldr	r0, [pc, #8]	; (80017d0 <DMA1_Channel3_IRQHandler+0x10>)
 80017c6:	f000 fd60 	bl	800228a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	200002b8 	.word	0x200002b8

080017d4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_EXTI8ACCINT_Pin);
 80017d8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80017dc:	f001 f810 	bl	8002800 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80017e0:	bf00      	nop
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80017e8:	4802      	ldr	r0, [pc, #8]	; (80017f4 <SPI1_IRQHandler+0x10>)
 80017ea:	f002 ff83 	bl	80046f4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	2000020c 	.word	0x2000020c

080017f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
	return 1;
 80017fc:	2301      	movs	r3, #1
}
 80017fe:	4618      	mov	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <_kill>:

int _kill(int pid, int sig)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001812:	f004 f88b 	bl	800592c <__errno>
 8001816:	4603      	mov	r3, r0
 8001818:	2216      	movs	r2, #22
 800181a:	601a      	str	r2, [r3, #0]
	return -1;
 800181c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001820:	4618      	mov	r0, r3
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <_exit>:

void _exit (int status)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001830:	f04f 31ff 	mov.w	r1, #4294967295
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff ffe7 	bl	8001808 <_kill>
	while (1) {}		/* Make sure we hang here */
 800183a:	e7fe      	b.n	800183a <_exit+0x12>

0800183c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	e00a      	b.n	8001864 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800184e:	f3af 8000 	nop.w
 8001852:	4601      	mov	r1, r0
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	1c5a      	adds	r2, r3, #1
 8001858:	60ba      	str	r2, [r7, #8]
 800185a:	b2ca      	uxtb	r2, r1
 800185c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	3301      	adds	r3, #1
 8001862:	617b      	str	r3, [r7, #20]
 8001864:	697a      	ldr	r2, [r7, #20]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	429a      	cmp	r2, r3
 800186a:	dbf0      	blt.n	800184e <_read+0x12>
	}

return len;
 800186c:	687b      	ldr	r3, [r7, #4]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b086      	sub	sp, #24
 800187a:	af00      	add	r7, sp, #0
 800187c:	60f8      	str	r0, [r7, #12]
 800187e:	60b9      	str	r1, [r7, #8]
 8001880:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001882:	2300      	movs	r3, #0
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	e009      	b.n	800189c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	1c5a      	adds	r2, r3, #1
 800188c:	60ba      	str	r2, [r7, #8]
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	3301      	adds	r3, #1
 800189a:	617b      	str	r3, [r7, #20]
 800189c:	697a      	ldr	r2, [r7, #20]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	dbf1      	blt.n	8001888 <_write+0x12>
	}
	return len;
 80018a4:	687b      	ldr	r3, [r7, #4]
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <_close>:

int _close(int file)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
	return -1;
 80018b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
 80018ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018d6:	605a      	str	r2, [r3, #4]
	return 0;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <_isatty>:

int _isatty(int file)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
	return 1;
 80018ee:	2301      	movs	r3, #1
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
	return 0;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
	...

08001918 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001920:	4a14      	ldr	r2, [pc, #80]	; (8001974 <_sbrk+0x5c>)
 8001922:	4b15      	ldr	r3, [pc, #84]	; (8001978 <_sbrk+0x60>)
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800192c:	4b13      	ldr	r3, [pc, #76]	; (800197c <_sbrk+0x64>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d102      	bne.n	800193a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001934:	4b11      	ldr	r3, [pc, #68]	; (800197c <_sbrk+0x64>)
 8001936:	4a12      	ldr	r2, [pc, #72]	; (8001980 <_sbrk+0x68>)
 8001938:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800193a:	4b10      	ldr	r3, [pc, #64]	; (800197c <_sbrk+0x64>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4413      	add	r3, r2
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	429a      	cmp	r2, r3
 8001946:	d207      	bcs.n	8001958 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001948:	f003 fff0 	bl	800592c <__errno>
 800194c:	4603      	mov	r3, r0
 800194e:	220c      	movs	r2, #12
 8001950:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001952:	f04f 33ff 	mov.w	r3, #4294967295
 8001956:	e009      	b.n	800196c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <_sbrk+0x64>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800195e:	4b07      	ldr	r3, [pc, #28]	; (800197c <_sbrk+0x64>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4413      	add	r3, r2
 8001966:	4a05      	ldr	r2, [pc, #20]	; (800197c <_sbrk+0x64>)
 8001968:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800196a:	68fb      	ldr	r3, [r7, #12]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3718      	adds	r7, #24
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20018000 	.word	0x20018000
 8001978:	00000400 	.word	0x00000400
 800197c:	20000300 	.word	0x20000300
 8001980:	200003a0 	.word	0x200003a0

08001984 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <SystemInit+0x20>)
 800198a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800198e:	4a05      	ldr	r2, [pc, #20]	; (80019a4 <SystemInit+0x20>)
 8001990:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001994:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019ac:	4b14      	ldr	r3, [pc, #80]	; (8001a00 <MX_USART2_UART_Init+0x58>)
 80019ae:	4a15      	ldr	r2, [pc, #84]	; (8001a04 <MX_USART2_UART_Init+0x5c>)
 80019b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019b2:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <MX_USART2_UART_Init+0x58>)
 80019b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019ba:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <MX_USART2_UART_Init+0x58>)
 80019bc:	2200      	movs	r2, #0
 80019be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019c0:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <MX_USART2_UART_Init+0x58>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019c6:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <MX_USART2_UART_Init+0x58>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019cc:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <MX_USART2_UART_Init+0x58>)
 80019ce:	220c      	movs	r2, #12
 80019d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019d2:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <MX_USART2_UART_Init+0x58>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019d8:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <MX_USART2_UART_Init+0x58>)
 80019da:	2200      	movs	r2, #0
 80019dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019de:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <MX_USART2_UART_Init+0x58>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <MX_USART2_UART_Init+0x58>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019ea:	4805      	ldr	r0, [pc, #20]	; (8001a00 <MX_USART2_UART_Init+0x58>)
 80019ec:	f003 fa54 	bl	8004e98 <HAL_UART_Init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80019f6:	f7ff fd7e 	bl	80014f6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000304 	.word	0x20000304
 8001a04:	40004400 	.word	0x40004400

08001a08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b0ac      	sub	sp, #176	; 0xb0
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a10:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	2288      	movs	r2, #136	; 0x88
 8001a26:	2100      	movs	r1, #0
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f003 ffa9 	bl	8005980 <memset>
  if(uartHandle->Instance==USART2)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a21      	ldr	r2, [pc, #132]	; (8001ab8 <HAL_UART_MspInit+0xb0>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d13b      	bne.n	8001ab0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	4618      	mov	r0, r3
 8001a46:	f001 fd57 	bl	80034f8 <HAL_RCCEx_PeriphCLKConfig>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a50:	f7ff fd51 	bl	80014f6 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a54:	4b19      	ldr	r3, [pc, #100]	; (8001abc <HAL_UART_MspInit+0xb4>)
 8001a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a58:	4a18      	ldr	r2, [pc, #96]	; (8001abc <HAL_UART_MspInit+0xb4>)
 8001a5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a5e:	6593      	str	r3, [r2, #88]	; 0x58
 8001a60:	4b16      	ldr	r3, [pc, #88]	; (8001abc <HAL_UART_MspInit+0xb4>)
 8001a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6c:	4b13      	ldr	r3, [pc, #76]	; (8001abc <HAL_UART_MspInit+0xb4>)
 8001a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a70:	4a12      	ldr	r2, [pc, #72]	; (8001abc <HAL_UART_MspInit+0xb4>)
 8001a72:	f043 0301 	orr.w	r3, r3, #1
 8001a76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a78:	4b10      	ldr	r3, [pc, #64]	; (8001abc <HAL_UART_MspInit+0xb4>)
 8001a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a84:	230c      	movs	r3, #12
 8001a86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a96:	2303      	movs	r3, #3
 8001a98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a9c:	2307      	movs	r3, #7
 8001a9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aac:	f000 fccc 	bl	8002448 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001ab0:	bf00      	nop
 8001ab2:	37b0      	adds	r7, #176	; 0xb0
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40004400 	.word	0x40004400
 8001abc:	40021000 	.word	0x40021000

08001ac0 <USART_TransmitACCValues>:
  }
}

/* USER CODE BEGIN 1 */
void USART_TransmitACCValues(int16_t *x, int16_t *y, int16_t *z)
{
 8001ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ac2:	b0bb      	sub	sp, #236	; 0xec
 8001ac4:	af04      	add	r7, sp, #16
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]

    char buffer[200];
    sprintf(buffer, "ACC: xg = %d,%04d   yg = %d,%04d  zg = %.d,%04d \r\n", (*x) / 10000, (*x) % 10000, (*y) / 10000, (*y) % 10000 , (*z) / 10000, abs((*z) % 10000));
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ad2:	4a37      	ldr	r2, [pc, #220]	; (8001bb0 <USART_TransmitACCValues+0xf0>)
 8001ad4:	fb82 1203 	smull	r1, r2, r2, r3
 8001ad8:	1312      	asrs	r2, r2, #12
 8001ada:	17db      	asrs	r3, r3, #31
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	b21b      	sxth	r3, r3
 8001ae0:	469c      	mov	ip, r3
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ae8:	4a31      	ldr	r2, [pc, #196]	; (8001bb0 <USART_TransmitACCValues+0xf0>)
 8001aea:	fb82 1203 	smull	r1, r2, r2, r3
 8001aee:	1311      	asrs	r1, r2, #12
 8001af0:	17da      	asrs	r2, r3, #31
 8001af2:	1a8a      	subs	r2, r1, r2
 8001af4:	f242 7110 	movw	r1, #10000	; 0x2710
 8001af8:	fb01 f202 	mul.w	r2, r1, r2
 8001afc:	1a9b      	subs	r3, r3, r2
 8001afe:	b21b      	sxth	r3, r3
 8001b00:	469e      	mov	lr, r3
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b08:	4a29      	ldr	r2, [pc, #164]	; (8001bb0 <USART_TransmitACCValues+0xf0>)
 8001b0a:	fb82 1203 	smull	r1, r2, r2, r3
 8001b0e:	1312      	asrs	r2, r2, #12
 8001b10:	17db      	asrs	r3, r3, #31
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	b21b      	sxth	r3, r3
 8001b16:	461c      	mov	r4, r3
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b1e:	4a24      	ldr	r2, [pc, #144]	; (8001bb0 <USART_TransmitACCValues+0xf0>)
 8001b20:	fb82 1203 	smull	r1, r2, r2, r3
 8001b24:	1311      	asrs	r1, r2, #12
 8001b26:	17da      	asrs	r2, r3, #31
 8001b28:	1a8a      	subs	r2, r1, r2
 8001b2a:	f242 7110 	movw	r1, #10000	; 0x2710
 8001b2e:	fb01 f202 	mul.w	r2, r1, r2
 8001b32:	1a9b      	subs	r3, r3, r2
 8001b34:	b21b      	sxth	r3, r3
 8001b36:	461d      	mov	r5, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b3e:	4a1c      	ldr	r2, [pc, #112]	; (8001bb0 <USART_TransmitACCValues+0xf0>)
 8001b40:	fb82 1203 	smull	r1, r2, r2, r3
 8001b44:	1312      	asrs	r2, r2, #12
 8001b46:	17db      	asrs	r3, r3, #31
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	b21b      	sxth	r3, r3
 8001b4c:	461e      	mov	r6, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b54:	4a16      	ldr	r2, [pc, #88]	; (8001bb0 <USART_TransmitACCValues+0xf0>)
 8001b56:	fb82 1203 	smull	r1, r2, r2, r3
 8001b5a:	1311      	asrs	r1, r2, #12
 8001b5c:	17da      	asrs	r2, r3, #31
 8001b5e:	1a8a      	subs	r2, r1, r2
 8001b60:	f242 7110 	movw	r1, #10000	; 0x2710
 8001b64:	fb01 f202 	mul.w	r2, r1, r2
 8001b68:	1a9b      	subs	r3, r3, r2
 8001b6a:	b21b      	sxth	r3, r3
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	bfb8      	it	lt
 8001b70:	425b      	neglt	r3, r3
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	f107 0010 	add.w	r0, r7, #16
 8001b78:	9303      	str	r3, [sp, #12]
 8001b7a:	9602      	str	r6, [sp, #8]
 8001b7c:	9501      	str	r5, [sp, #4]
 8001b7e:	9400      	str	r4, [sp, #0]
 8001b80:	4673      	mov	r3, lr
 8001b82:	4662      	mov	r2, ip
 8001b84:	490b      	ldr	r1, [pc, #44]	; (8001bb4 <USART_TransmitACCValues+0xf4>)
 8001b86:	f004 fb6d 	bl	8006264 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001b8a:	f107 0310 	add.w	r3, r7, #16
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7fe fb1e 	bl	80001d0 <strlen>
 8001b94:	4603      	mov	r3, r0
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	f107 0110 	add.w	r1, r7, #16
 8001b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba0:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <USART_TransmitACCValues+0xf8>)
 8001ba2:	f003 f9c7 	bl	8004f34 <HAL_UART_Transmit>

}
 8001ba6:	bf00      	nop
 8001ba8:	37dc      	adds	r7, #220	; 0xdc
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	68db8bad 	.word	0x68db8bad
 8001bb4:	08008778 	.word	0x08008778
 8001bb8:	20000304 	.word	0x20000304

08001bbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001bbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bf4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bc0:	f7ff fee0 	bl	8001984 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bc4:	480c      	ldr	r0, [pc, #48]	; (8001bf8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bc6:	490d      	ldr	r1, [pc, #52]	; (8001bfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bc8:	4a0d      	ldr	r2, [pc, #52]	; (8001c00 <LoopForever+0xe>)
  movs r3, #0
 8001bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bcc:	e002      	b.n	8001bd4 <LoopCopyDataInit>

08001bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bd2:	3304      	adds	r3, #4

08001bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bd8:	d3f9      	bcc.n	8001bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bda:	4a0a      	ldr	r2, [pc, #40]	; (8001c04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bdc:	4c0a      	ldr	r4, [pc, #40]	; (8001c08 <LoopForever+0x16>)
  movs r3, #0
 8001bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be0:	e001      	b.n	8001be6 <LoopFillZerobss>

08001be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be4:	3204      	adds	r2, #4

08001be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001be8:	d3fb      	bcc.n	8001be2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bea:	f003 fea5 	bl	8005938 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bee:	f7ff fbf7 	bl	80013e0 <main>

08001bf2 <LoopForever>:

LoopForever:
    b LoopForever
 8001bf2:	e7fe      	b.n	8001bf2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001bf4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bfc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001c00:	08008c04 	.word	0x08008c04
  ldr r2, =_sbss
 8001c04:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001c08:	2000039c 	.word	0x2000039c

08001c0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c0c:	e7fe      	b.n	8001c0c <ADC1_2_IRQHandler>
	...

08001c10 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c16:	2300      	movs	r3, #0
 8001c18:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c1a:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <HAL_Init+0x3c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a0b      	ldr	r2, [pc, #44]	; (8001c4c <HAL_Init+0x3c>)
 8001c20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c24:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c26:	2003      	movs	r0, #3
 8001c28:	f000 f986 	bl	8001f38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	f000 f80f 	bl	8001c50 <HAL_InitTick>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d002      	beq.n	8001c3e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	71fb      	strb	r3, [r7, #7]
 8001c3c:	e001      	b.n	8001c42 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c3e:	f7ff fd67 	bl	8001710 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c42:	79fb      	ldrb	r3, [r7, #7]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40022000 	.word	0x40022000

08001c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c5c:	4b17      	ldr	r3, [pc, #92]	; (8001cbc <HAL_InitTick+0x6c>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d023      	beq.n	8001cac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c64:	4b16      	ldr	r3, [pc, #88]	; (8001cc0 <HAL_InitTick+0x70>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4b14      	ldr	r3, [pc, #80]	; (8001cbc <HAL_InitTick+0x6c>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f000 f99f 	bl	8001fbe <HAL_SYSTICK_Config>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10f      	bne.n	8001ca6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2b0f      	cmp	r3, #15
 8001c8a:	d809      	bhi.n	8001ca0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	f04f 30ff 	mov.w	r0, #4294967295
 8001c94:	f000 f95b 	bl	8001f4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c98:	4a0a      	ldr	r2, [pc, #40]	; (8001cc4 <HAL_InitTick+0x74>)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	e007      	b.n	8001cb0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	73fb      	strb	r3, [r7, #15]
 8001ca4:	e004      	b.n	8001cb0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	73fb      	strb	r3, [r7, #15]
 8001caa:	e001      	b.n	8001cb0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000008 	.word	0x20000008
 8001cc0:	20000000 	.word	0x20000000
 8001cc4:	20000004 	.word	0x20000004

08001cc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <HAL_IncTick+0x20>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4b06      	ldr	r3, [pc, #24]	; (8001cec <HAL_IncTick+0x24>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	4a04      	ldr	r2, [pc, #16]	; (8001cec <HAL_IncTick+0x24>)
 8001cda:	6013      	str	r3, [r2, #0]
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	20000008 	.word	0x20000008
 8001cec:	20000388 	.word	0x20000388

08001cf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf4:	4b03      	ldr	r3, [pc, #12]	; (8001d04 <HAL_GetTick+0x14>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	20000388 	.word	0x20000388

08001d08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d10:	f7ff ffee 	bl	8001cf0 <HAL_GetTick>
 8001d14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d20:	d005      	beq.n	8001d2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d22:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <HAL_Delay+0x44>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	461a      	mov	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d2e:	bf00      	nop
 8001d30:	f7ff ffde 	bl	8001cf0 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d8f7      	bhi.n	8001d30 <HAL_Delay+0x28>
  {
  }
}
 8001d40:	bf00      	nop
 8001d42:	bf00      	nop
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000008 	.word	0x20000008

08001d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d60:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <__NVIC_SetPriorityGrouping+0x44>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d82:	4a04      	ldr	r2, [pc, #16]	; (8001d94 <__NVIC_SetPriorityGrouping+0x44>)
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	60d3      	str	r3, [r2, #12]
}
 8001d88:	bf00      	nop
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d9c:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <__NVIC_GetPriorityGrouping+0x18>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	0a1b      	lsrs	r3, r3, #8
 8001da2:	f003 0307 	and.w	r3, r3, #7
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	db0b      	blt.n	8001dde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	f003 021f 	and.w	r2, r3, #31
 8001dcc:	4907      	ldr	r1, [pc, #28]	; (8001dec <__NVIC_EnableIRQ+0x38>)
 8001dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd2:	095b      	lsrs	r3, r3, #5
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	e000e100 	.word	0xe000e100

08001df0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	db12      	blt.n	8001e28 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e02:	79fb      	ldrb	r3, [r7, #7]
 8001e04:	f003 021f 	and.w	r2, r3, #31
 8001e08:	490a      	ldr	r1, [pc, #40]	; (8001e34 <__NVIC_DisableIRQ+0x44>)
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	095b      	lsrs	r3, r3, #5
 8001e10:	2001      	movs	r0, #1
 8001e12:	fa00 f202 	lsl.w	r2, r0, r2
 8001e16:	3320      	adds	r3, #32
 8001e18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001e1c:	f3bf 8f4f 	dsb	sy
}
 8001e20:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e22:	f3bf 8f6f 	isb	sy
}
 8001e26:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	e000e100 	.word	0xe000e100

08001e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	6039      	str	r1, [r7, #0]
 8001e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	db0a      	blt.n	8001e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	490c      	ldr	r1, [pc, #48]	; (8001e84 <__NVIC_SetPriority+0x4c>)
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	0112      	lsls	r2, r2, #4
 8001e58:	b2d2      	uxtb	r2, r2
 8001e5a:	440b      	add	r3, r1
 8001e5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e60:	e00a      	b.n	8001e78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	4908      	ldr	r1, [pc, #32]	; (8001e88 <__NVIC_SetPriority+0x50>)
 8001e68:	79fb      	ldrb	r3, [r7, #7]
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	3b04      	subs	r3, #4
 8001e70:	0112      	lsls	r2, r2, #4
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	440b      	add	r3, r1
 8001e76:	761a      	strb	r2, [r3, #24]
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	e000e100 	.word	0xe000e100
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b089      	sub	sp, #36	; 0x24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	f1c3 0307 	rsb	r3, r3, #7
 8001ea6:	2b04      	cmp	r3, #4
 8001ea8:	bf28      	it	cs
 8001eaa:	2304      	movcs	r3, #4
 8001eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	2b06      	cmp	r3, #6
 8001eb4:	d902      	bls.n	8001ebc <NVIC_EncodePriority+0x30>
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	3b03      	subs	r3, #3
 8001eba:	e000      	b.n	8001ebe <NVIC_EncodePriority+0x32>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43da      	mvns	r2, r3
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	401a      	ands	r2, r3
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	fa01 f303 	lsl.w	r3, r1, r3
 8001ede:	43d9      	mvns	r1, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee4:	4313      	orrs	r3, r2
         );
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3724      	adds	r7, #36	; 0x24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
	...

08001ef4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3b01      	subs	r3, #1
 8001f00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f04:	d301      	bcc.n	8001f0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f06:	2301      	movs	r3, #1
 8001f08:	e00f      	b.n	8001f2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f0a:	4a0a      	ldr	r2, [pc, #40]	; (8001f34 <SysTick_Config+0x40>)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f12:	210f      	movs	r1, #15
 8001f14:	f04f 30ff 	mov.w	r0, #4294967295
 8001f18:	f7ff ff8e 	bl	8001e38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f1c:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <SysTick_Config+0x40>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f22:	4b04      	ldr	r3, [pc, #16]	; (8001f34 <SysTick_Config+0x40>)
 8001f24:	2207      	movs	r2, #7
 8001f26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	e000e010 	.word	0xe000e010

08001f38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7ff ff05 	bl	8001d50 <__NVIC_SetPriorityGrouping>
}
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b086      	sub	sp, #24
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	4603      	mov	r3, r0
 8001f56:	60b9      	str	r1, [r7, #8]
 8001f58:	607a      	str	r2, [r7, #4]
 8001f5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f60:	f7ff ff1a 	bl	8001d98 <__NVIC_GetPriorityGrouping>
 8001f64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	68b9      	ldr	r1, [r7, #8]
 8001f6a:	6978      	ldr	r0, [r7, #20]
 8001f6c:	f7ff ff8e 	bl	8001e8c <NVIC_EncodePriority>
 8001f70:	4602      	mov	r2, r0
 8001f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f76:	4611      	mov	r1, r2
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff ff5d 	bl	8001e38 <__NVIC_SetPriority>
}
 8001f7e:	bf00      	nop
 8001f80:	3718      	adds	r7, #24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b082      	sub	sp, #8
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff ff0d 	bl	8001db4 <__NVIC_EnableIRQ>
}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b082      	sub	sp, #8
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	4603      	mov	r3, r0
 8001faa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff ff1d 	bl	8001df0 <__NVIC_DisableIRQ>
}
 8001fb6:	bf00      	nop
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b082      	sub	sp, #8
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7ff ff94 	bl	8001ef4 <SysTick_Config>
 8001fcc:	4603      	mov	r3, r0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
	...

08001fd8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e098      	b.n	800211c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	4b4d      	ldr	r3, [pc, #308]	; (8002128 <HAL_DMA_Init+0x150>)
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d80f      	bhi.n	8002016 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	4b4b      	ldr	r3, [pc, #300]	; (800212c <HAL_DMA_Init+0x154>)
 8001ffe:	4413      	add	r3, r2
 8002000:	4a4b      	ldr	r2, [pc, #300]	; (8002130 <HAL_DMA_Init+0x158>)
 8002002:	fba2 2303 	umull	r2, r3, r2, r3
 8002006:	091b      	lsrs	r3, r3, #4
 8002008:	009a      	lsls	r2, r3, #2
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a48      	ldr	r2, [pc, #288]	; (8002134 <HAL_DMA_Init+0x15c>)
 8002012:	641a      	str	r2, [r3, #64]	; 0x40
 8002014:	e00e      	b.n	8002034 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	461a      	mov	r2, r3
 800201c:	4b46      	ldr	r3, [pc, #280]	; (8002138 <HAL_DMA_Init+0x160>)
 800201e:	4413      	add	r3, r2
 8002020:	4a43      	ldr	r2, [pc, #268]	; (8002130 <HAL_DMA_Init+0x158>)
 8002022:	fba2 2303 	umull	r2, r3, r2, r3
 8002026:	091b      	lsrs	r3, r3, #4
 8002028:	009a      	lsls	r2, r3, #2
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a42      	ldr	r2, [pc, #264]	; (800213c <HAL_DMA_Init+0x164>)
 8002032:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2202      	movs	r2, #2
 8002038:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800204a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800204e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002058:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002064:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002070:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	4313      	orrs	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800208e:	d039      	beq.n	8002104 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002094:	4a27      	ldr	r2, [pc, #156]	; (8002134 <HAL_DMA_Init+0x15c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d11a      	bne.n	80020d0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800209a:	4b29      	ldr	r3, [pc, #164]	; (8002140 <HAL_DMA_Init+0x168>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a2:	f003 031c 	and.w	r3, r3, #28
 80020a6:	210f      	movs	r1, #15
 80020a8:	fa01 f303 	lsl.w	r3, r1, r3
 80020ac:	43db      	mvns	r3, r3
 80020ae:	4924      	ldr	r1, [pc, #144]	; (8002140 <HAL_DMA_Init+0x168>)
 80020b0:	4013      	ands	r3, r2
 80020b2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80020b4:	4b22      	ldr	r3, [pc, #136]	; (8002140 <HAL_DMA_Init+0x168>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6859      	ldr	r1, [r3, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c0:	f003 031c 	and.w	r3, r3, #28
 80020c4:	fa01 f303 	lsl.w	r3, r1, r3
 80020c8:	491d      	ldr	r1, [pc, #116]	; (8002140 <HAL_DMA_Init+0x168>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	600b      	str	r3, [r1, #0]
 80020ce:	e019      	b.n	8002104 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80020d0:	4b1c      	ldr	r3, [pc, #112]	; (8002144 <HAL_DMA_Init+0x16c>)
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d8:	f003 031c 	and.w	r3, r3, #28
 80020dc:	210f      	movs	r1, #15
 80020de:	fa01 f303 	lsl.w	r3, r1, r3
 80020e2:	43db      	mvns	r3, r3
 80020e4:	4917      	ldr	r1, [pc, #92]	; (8002144 <HAL_DMA_Init+0x16c>)
 80020e6:	4013      	ands	r3, r2
 80020e8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80020ea:	4b16      	ldr	r3, [pc, #88]	; (8002144 <HAL_DMA_Init+0x16c>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6859      	ldr	r1, [r3, #4]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f6:	f003 031c 	and.w	r3, r3, #28
 80020fa:	fa01 f303 	lsl.w	r3, r1, r3
 80020fe:	4911      	ldr	r1, [pc, #68]	; (8002144 <HAL_DMA_Init+0x16c>)
 8002100:	4313      	orrs	r3, r2
 8002102:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	3714      	adds	r7, #20
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	40020407 	.word	0x40020407
 800212c:	bffdfff8 	.word	0xbffdfff8
 8002130:	cccccccd 	.word	0xcccccccd
 8002134:	40020000 	.word	0x40020000
 8002138:	bffdfbf8 	.word	0xbffdfbf8
 800213c:	40020400 	.word	0x40020400
 8002140:	400200a8 	.word	0x400200a8
 8002144:	400204a8 	.word	0x400204a8

08002148 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
 8002154:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002156:	2300      	movs	r3, #0
 8002158:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002160:	2b01      	cmp	r3, #1
 8002162:	d101      	bne.n	8002168 <HAL_DMA_Start_IT+0x20>
 8002164:	2302      	movs	r3, #2
 8002166:	e04b      	b.n	8002200 <HAL_DMA_Start_IT+0xb8>
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b01      	cmp	r3, #1
 800217a:	d13a      	bne.n	80021f2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2202      	movs	r2, #2
 8002180:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 0201 	bic.w	r2, r2, #1
 8002198:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	68b9      	ldr	r1, [r7, #8]
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	f000 f921 	bl	80023e8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d008      	beq.n	80021c0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f042 020e 	orr.w	r2, r2, #14
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	e00f      	b.n	80021e0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f022 0204 	bic.w	r2, r2, #4
 80021ce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f042 020a 	orr.w	r2, r2, #10
 80021de:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f042 0201 	orr.w	r2, r2, #1
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	e005      	b.n	80021fe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80021fa:	2302      	movs	r3, #2
 80021fc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80021fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002200:	4618      	mov	r0, r3
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002210:	2300      	movs	r3, #0
 8002212:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d005      	beq.n	800222c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2204      	movs	r2, #4
 8002224:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	73fb      	strb	r3, [r7, #15]
 800222a:	e029      	b.n	8002280 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 020e 	bic.w	r2, r2, #14
 800223a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 0201 	bic.w	r2, r2, #1
 800224a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002250:	f003 021c 	and.w	r2, r3, #28
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002258:	2101      	movs	r1, #1
 800225a:	fa01 f202 	lsl.w	r2, r1, r2
 800225e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	4798      	blx	r3
    }
  }
  return status;
 8002280:	7bfb      	ldrb	r3, [r7, #15]
}
 8002282:	4618      	mov	r0, r3
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b084      	sub	sp, #16
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a6:	f003 031c 	and.w	r3, r3, #28
 80022aa:	2204      	movs	r2, #4
 80022ac:	409a      	lsls	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	4013      	ands	r3, r2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d026      	beq.n	8002304 <HAL_DMA_IRQHandler+0x7a>
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	f003 0304 	and.w	r3, r3, #4
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d021      	beq.n	8002304 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0320 	and.w	r3, r3, #32
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d107      	bne.n	80022de <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 0204 	bic.w	r2, r2, #4
 80022dc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e2:	f003 021c 	and.w	r2, r3, #28
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	2104      	movs	r1, #4
 80022ec:	fa01 f202 	lsl.w	r2, r1, r2
 80022f0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d071      	beq.n	80023de <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002302:	e06c      	b.n	80023de <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002308:	f003 031c 	and.w	r3, r3, #28
 800230c:	2202      	movs	r2, #2
 800230e:	409a      	lsls	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	4013      	ands	r3, r2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d02e      	beq.n	8002376 <HAL_DMA_IRQHandler+0xec>
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d029      	beq.n	8002376 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0320 	and.w	r3, r3, #32
 800232c:	2b00      	cmp	r3, #0
 800232e:	d10b      	bne.n	8002348 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 020a 	bic.w	r2, r2, #10
 800233e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234c:	f003 021c 	and.w	r2, r3, #28
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002354:	2102      	movs	r1, #2
 8002356:	fa01 f202 	lsl.w	r2, r1, r2
 800235a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002368:	2b00      	cmp	r3, #0
 800236a:	d038      	beq.n	80023de <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002374:	e033      	b.n	80023de <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237a:	f003 031c 	and.w	r3, r3, #28
 800237e:	2208      	movs	r2, #8
 8002380:	409a      	lsls	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	4013      	ands	r3, r2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d02a      	beq.n	80023e0 <HAL_DMA_IRQHandler+0x156>
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	f003 0308 	and.w	r3, r3, #8
 8002390:	2b00      	cmp	r3, #0
 8002392:	d025      	beq.n	80023e0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 020e 	bic.w	r2, r2, #14
 80023a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a8:	f003 021c 	and.w	r2, r3, #28
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b0:	2101      	movs	r1, #1
 80023b2:	fa01 f202 	lsl.w	r2, r1, r2
 80023b6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d004      	beq.n	80023e0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80023de:	bf00      	nop
 80023e0:	bf00      	nop
}
 80023e2:	3710      	adds	r7, #16
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
 80023f4:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fa:	f003 021c 	and.w	r2, r3, #28
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	2101      	movs	r1, #1
 8002404:	fa01 f202 	lsl.w	r2, r1, r2
 8002408:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	2b10      	cmp	r3, #16
 8002418:	d108      	bne.n	800242c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800242a:	e007      	b.n	800243c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68ba      	ldr	r2, [r7, #8]
 8002432:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	60da      	str	r2, [r3, #12]
}
 800243c:	bf00      	nop
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002448:	b480      	push	{r7}
 800244a:	b087      	sub	sp, #28
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002456:	e17f      	b.n	8002758 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	2101      	movs	r1, #1
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	fa01 f303 	lsl.w	r3, r1, r3
 8002464:	4013      	ands	r3, r2
 8002466:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 8171 	beq.w	8002752 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 0303 	and.w	r3, r3, #3
 8002478:	2b01      	cmp	r3, #1
 800247a:	d005      	beq.n	8002488 <HAL_GPIO_Init+0x40>
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f003 0303 	and.w	r3, r3, #3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d130      	bne.n	80024ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	2203      	movs	r2, #3
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	43db      	mvns	r3, r3
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	4013      	ands	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	68da      	ldr	r2, [r3, #12]
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024be:	2201      	movs	r2, #1
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	43db      	mvns	r3, r3
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	4013      	ands	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	091b      	lsrs	r3, r3, #4
 80024d4:	f003 0201 	and.w	r2, r3, #1
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f003 0303 	and.w	r3, r3, #3
 80024f2:	2b03      	cmp	r3, #3
 80024f4:	d118      	bne.n	8002528 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80024fc:	2201      	movs	r2, #1
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	4013      	ands	r3, r2
 800250a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	08db      	lsrs	r3, r3, #3
 8002512:	f003 0201 	and.w	r2, r3, #1
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	4313      	orrs	r3, r2
 8002520:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f003 0303 	and.w	r3, r3, #3
 8002530:	2b03      	cmp	r3, #3
 8002532:	d017      	beq.n	8002564 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	2203      	movs	r2, #3
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43db      	mvns	r3, r3
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	4013      	ands	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	4313      	orrs	r3, r2
 800255c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f003 0303 	and.w	r3, r3, #3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d123      	bne.n	80025b8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	08da      	lsrs	r2, r3, #3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3208      	adds	r2, #8
 8002578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800257c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	220f      	movs	r2, #15
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	43db      	mvns	r3, r3
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	4013      	ands	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	691a      	ldr	r2, [r3, #16]
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	08da      	lsrs	r2, r3, #3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	3208      	adds	r2, #8
 80025b2:	6939      	ldr	r1, [r7, #16]
 80025b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	2203      	movs	r2, #3
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	43db      	mvns	r3, r3
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	4013      	ands	r3, r2
 80025ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f003 0203 	and.w	r2, r3, #3
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f000 80ac 	beq.w	8002752 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025fa:	4b5f      	ldr	r3, [pc, #380]	; (8002778 <HAL_GPIO_Init+0x330>)
 80025fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025fe:	4a5e      	ldr	r2, [pc, #376]	; (8002778 <HAL_GPIO_Init+0x330>)
 8002600:	f043 0301 	orr.w	r3, r3, #1
 8002604:	6613      	str	r3, [r2, #96]	; 0x60
 8002606:	4b5c      	ldr	r3, [pc, #368]	; (8002778 <HAL_GPIO_Init+0x330>)
 8002608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	60bb      	str	r3, [r7, #8]
 8002610:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002612:	4a5a      	ldr	r2, [pc, #360]	; (800277c <HAL_GPIO_Init+0x334>)
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	089b      	lsrs	r3, r3, #2
 8002618:	3302      	adds	r3, #2
 800261a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800261e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	220f      	movs	r2, #15
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	43db      	mvns	r3, r3
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	4013      	ands	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800263c:	d025      	beq.n	800268a <HAL_GPIO_Init+0x242>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a4f      	ldr	r2, [pc, #316]	; (8002780 <HAL_GPIO_Init+0x338>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d01f      	beq.n	8002686 <HAL_GPIO_Init+0x23e>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a4e      	ldr	r2, [pc, #312]	; (8002784 <HAL_GPIO_Init+0x33c>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d019      	beq.n	8002682 <HAL_GPIO_Init+0x23a>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a4d      	ldr	r2, [pc, #308]	; (8002788 <HAL_GPIO_Init+0x340>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d013      	beq.n	800267e <HAL_GPIO_Init+0x236>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a4c      	ldr	r2, [pc, #304]	; (800278c <HAL_GPIO_Init+0x344>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d00d      	beq.n	800267a <HAL_GPIO_Init+0x232>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a4b      	ldr	r2, [pc, #300]	; (8002790 <HAL_GPIO_Init+0x348>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d007      	beq.n	8002676 <HAL_GPIO_Init+0x22e>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a4a      	ldr	r2, [pc, #296]	; (8002794 <HAL_GPIO_Init+0x34c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d101      	bne.n	8002672 <HAL_GPIO_Init+0x22a>
 800266e:	2306      	movs	r3, #6
 8002670:	e00c      	b.n	800268c <HAL_GPIO_Init+0x244>
 8002672:	2307      	movs	r3, #7
 8002674:	e00a      	b.n	800268c <HAL_GPIO_Init+0x244>
 8002676:	2305      	movs	r3, #5
 8002678:	e008      	b.n	800268c <HAL_GPIO_Init+0x244>
 800267a:	2304      	movs	r3, #4
 800267c:	e006      	b.n	800268c <HAL_GPIO_Init+0x244>
 800267e:	2303      	movs	r3, #3
 8002680:	e004      	b.n	800268c <HAL_GPIO_Init+0x244>
 8002682:	2302      	movs	r3, #2
 8002684:	e002      	b.n	800268c <HAL_GPIO_Init+0x244>
 8002686:	2301      	movs	r3, #1
 8002688:	e000      	b.n	800268c <HAL_GPIO_Init+0x244>
 800268a:	2300      	movs	r3, #0
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	f002 0203 	and.w	r2, r2, #3
 8002692:	0092      	lsls	r2, r2, #2
 8002694:	4093      	lsls	r3, r2
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	4313      	orrs	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800269c:	4937      	ldr	r1, [pc, #220]	; (800277c <HAL_GPIO_Init+0x334>)
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	089b      	lsrs	r3, r3, #2
 80026a2:	3302      	adds	r3, #2
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026aa:	4b3b      	ldr	r3, [pc, #236]	; (8002798 <HAL_GPIO_Init+0x350>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	43db      	mvns	r3, r3
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	4013      	ands	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026ce:	4a32      	ldr	r2, [pc, #200]	; (8002798 <HAL_GPIO_Init+0x350>)
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026d4:	4b30      	ldr	r3, [pc, #192]	; (8002798 <HAL_GPIO_Init+0x350>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	43db      	mvns	r3, r3
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	4013      	ands	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d003      	beq.n	80026f8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026f8:	4a27      	ldr	r2, [pc, #156]	; (8002798 <HAL_GPIO_Init+0x350>)
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80026fe:	4b26      	ldr	r3, [pc, #152]	; (8002798 <HAL_GPIO_Init+0x350>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	43db      	mvns	r3, r3
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	4013      	ands	r3, r2
 800270c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	4313      	orrs	r3, r2
 8002720:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002722:	4a1d      	ldr	r2, [pc, #116]	; (8002798 <HAL_GPIO_Init+0x350>)
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002728:	4b1b      	ldr	r3, [pc, #108]	; (8002798 <HAL_GPIO_Init+0x350>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	43db      	mvns	r3, r3
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	4013      	ands	r3, r2
 8002736:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d003      	beq.n	800274c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	4313      	orrs	r3, r2
 800274a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800274c:	4a12      	ldr	r2, [pc, #72]	; (8002798 <HAL_GPIO_Init+0x350>)
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	3301      	adds	r3, #1
 8002756:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	fa22 f303 	lsr.w	r3, r2, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	f47f ae78 	bne.w	8002458 <HAL_GPIO_Init+0x10>
  }
}
 8002768:	bf00      	nop
 800276a:	bf00      	nop
 800276c:	371c      	adds	r7, #28
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	40021000 	.word	0x40021000
 800277c:	40010000 	.word	0x40010000
 8002780:	48000400 	.word	0x48000400
 8002784:	48000800 	.word	0x48000800
 8002788:	48000c00 	.word	0x48000c00
 800278c:	48001000 	.word	0x48001000
 8002790:	48001400 	.word	0x48001400
 8002794:	48001800 	.word	0x48001800
 8002798:	40010400 	.word	0x40010400

0800279c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	460b      	mov	r3, r1
 80027a6:	807b      	strh	r3, [r7, #2]
 80027a8:	4613      	mov	r3, r2
 80027aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027ac:	787b      	ldrb	r3, [r7, #1]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027b2:	887a      	ldrh	r2, [r7, #2]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027b8:	e002      	b.n	80027c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027ba:	887a      	ldrh	r2, [r7, #2]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	460b      	mov	r3, r1
 80027d6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027de:	887a      	ldrh	r2, [r7, #2]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	4013      	ands	r3, r2
 80027e4:	041a      	lsls	r2, r3, #16
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	43d9      	mvns	r1, r3
 80027ea:	887b      	ldrh	r3, [r7, #2]
 80027ec:	400b      	ands	r3, r1
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	619a      	str	r2, [r3, #24]
}
 80027f4:	bf00      	nop
 80027f6:	3714      	adds	r7, #20
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800280a:	4b08      	ldr	r3, [pc, #32]	; (800282c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800280c:	695a      	ldr	r2, [r3, #20]
 800280e:	88fb      	ldrh	r3, [r7, #6]
 8002810:	4013      	ands	r3, r2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d006      	beq.n	8002824 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002816:	4a05      	ldr	r2, [pc, #20]	; (800282c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002818:	88fb      	ldrh	r3, [r7, #6]
 800281a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800281c:	88fb      	ldrh	r3, [r7, #6]
 800281e:	4618      	mov	r0, r3
 8002820:	f7fe fdc2 	bl	80013a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002824:	bf00      	nop
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40010400 	.word	0x40010400

08002830 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002834:	4b04      	ldr	r3, [pc, #16]	; (8002848 <HAL_PWREx_GetVoltageRange+0x18>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800283c:	4618      	mov	r0, r3
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	40007000 	.word	0x40007000

0800284c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800285a:	d130      	bne.n	80028be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800285c:	4b23      	ldr	r3, [pc, #140]	; (80028ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002868:	d038      	beq.n	80028dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800286a:	4b20      	ldr	r3, [pc, #128]	; (80028ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002872:	4a1e      	ldr	r2, [pc, #120]	; (80028ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002874:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002878:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800287a:	4b1d      	ldr	r3, [pc, #116]	; (80028f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2232      	movs	r2, #50	; 0x32
 8002880:	fb02 f303 	mul.w	r3, r2, r3
 8002884:	4a1b      	ldr	r2, [pc, #108]	; (80028f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002886:	fba2 2303 	umull	r2, r3, r2, r3
 800288a:	0c9b      	lsrs	r3, r3, #18
 800288c:	3301      	adds	r3, #1
 800288e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002890:	e002      	b.n	8002898 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	3b01      	subs	r3, #1
 8002896:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002898:	4b14      	ldr	r3, [pc, #80]	; (80028ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028a4:	d102      	bne.n	80028ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1f2      	bne.n	8002892 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028ac:	4b0f      	ldr	r3, [pc, #60]	; (80028ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028b8:	d110      	bne.n	80028dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e00f      	b.n	80028de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80028be:	4b0b      	ldr	r3, [pc, #44]	; (80028ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ca:	d007      	beq.n	80028dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80028cc:	4b07      	ldr	r3, [pc, #28]	; (80028ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028d4:	4a05      	ldr	r2, [pc, #20]	; (80028ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3714      	adds	r7, #20
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	40007000 	.word	0x40007000
 80028f0:	20000000 	.word	0x20000000
 80028f4:	431bde83 	.word	0x431bde83

080028f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b088      	sub	sp, #32
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e3ca      	b.n	80030a0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800290a:	4b97      	ldr	r3, [pc, #604]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 030c 	and.w	r3, r3, #12
 8002912:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002914:	4b94      	ldr	r3, [pc, #592]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	f003 0303 	and.w	r3, r3, #3
 800291c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0310 	and.w	r3, r3, #16
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 80e4 	beq.w	8002af4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d007      	beq.n	8002942 <HAL_RCC_OscConfig+0x4a>
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	2b0c      	cmp	r3, #12
 8002936:	f040 808b 	bne.w	8002a50 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	2b01      	cmp	r3, #1
 800293e:	f040 8087 	bne.w	8002a50 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002942:	4b89      	ldr	r3, [pc, #548]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d005      	beq.n	800295a <HAL_RCC_OscConfig+0x62>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e3a2      	b.n	80030a0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a1a      	ldr	r2, [r3, #32]
 800295e:	4b82      	ldr	r3, [pc, #520]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0308 	and.w	r3, r3, #8
 8002966:	2b00      	cmp	r3, #0
 8002968:	d004      	beq.n	8002974 <HAL_RCC_OscConfig+0x7c>
 800296a:	4b7f      	ldr	r3, [pc, #508]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002972:	e005      	b.n	8002980 <HAL_RCC_OscConfig+0x88>
 8002974:	4b7c      	ldr	r3, [pc, #496]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002976:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800297a:	091b      	lsrs	r3, r3, #4
 800297c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002980:	4293      	cmp	r3, r2
 8002982:	d223      	bcs.n	80029cc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	4618      	mov	r0, r3
 800298a:	f000 fd55 	bl	8003438 <RCC_SetFlashLatencyFromMSIRange>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e383      	b.n	80030a0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002998:	4b73      	ldr	r3, [pc, #460]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a72      	ldr	r2, [pc, #456]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 800299e:	f043 0308 	orr.w	r3, r3, #8
 80029a2:	6013      	str	r3, [r2, #0]
 80029a4:	4b70      	ldr	r3, [pc, #448]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	496d      	ldr	r1, [pc, #436]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029b6:	4b6c      	ldr	r3, [pc, #432]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	021b      	lsls	r3, r3, #8
 80029c4:	4968      	ldr	r1, [pc, #416]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	604b      	str	r3, [r1, #4]
 80029ca:	e025      	b.n	8002a18 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029cc:	4b66      	ldr	r3, [pc, #408]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a65      	ldr	r2, [pc, #404]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 80029d2:	f043 0308 	orr.w	r3, r3, #8
 80029d6:	6013      	str	r3, [r2, #0]
 80029d8:	4b63      	ldr	r3, [pc, #396]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	4960      	ldr	r1, [pc, #384]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029ea:	4b5f      	ldr	r3, [pc, #380]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	021b      	lsls	r3, r3, #8
 80029f8:	495b      	ldr	r1, [pc, #364]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d109      	bne.n	8002a18 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f000 fd15 	bl	8003438 <RCC_SetFlashLatencyFromMSIRange>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e343      	b.n	80030a0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a18:	f000 fc4a 	bl	80032b0 <HAL_RCC_GetSysClockFreq>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	4b52      	ldr	r3, [pc, #328]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	091b      	lsrs	r3, r3, #4
 8002a24:	f003 030f 	and.w	r3, r3, #15
 8002a28:	4950      	ldr	r1, [pc, #320]	; (8002b6c <HAL_RCC_OscConfig+0x274>)
 8002a2a:	5ccb      	ldrb	r3, [r1, r3]
 8002a2c:	f003 031f 	and.w	r3, r3, #31
 8002a30:	fa22 f303 	lsr.w	r3, r2, r3
 8002a34:	4a4e      	ldr	r2, [pc, #312]	; (8002b70 <HAL_RCC_OscConfig+0x278>)
 8002a36:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a38:	4b4e      	ldr	r3, [pc, #312]	; (8002b74 <HAL_RCC_OscConfig+0x27c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff f907 	bl	8001c50 <HAL_InitTick>
 8002a42:	4603      	mov	r3, r0
 8002a44:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002a46:	7bfb      	ldrb	r3, [r7, #15]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d052      	beq.n	8002af2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002a4c:	7bfb      	ldrb	r3, [r7, #15]
 8002a4e:	e327      	b.n	80030a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d032      	beq.n	8002abe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a58:	4b43      	ldr	r3, [pc, #268]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a42      	ldr	r2, [pc, #264]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002a5e:	f043 0301 	orr.w	r3, r3, #1
 8002a62:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a64:	f7ff f944 	bl	8001cf0 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a6c:	f7ff f940 	bl	8001cf0 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e310      	b.n	80030a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a7e:	4b3a      	ldr	r3, [pc, #232]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0f0      	beq.n	8002a6c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a8a:	4b37      	ldr	r3, [pc, #220]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a36      	ldr	r2, [pc, #216]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002a90:	f043 0308 	orr.w	r3, r3, #8
 8002a94:	6013      	str	r3, [r2, #0]
 8002a96:	4b34      	ldr	r3, [pc, #208]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	4931      	ldr	r1, [pc, #196]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002aa8:	4b2f      	ldr	r3, [pc, #188]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	69db      	ldr	r3, [r3, #28]
 8002ab4:	021b      	lsls	r3, r3, #8
 8002ab6:	492c      	ldr	r1, [pc, #176]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	604b      	str	r3, [r1, #4]
 8002abc:	e01a      	b.n	8002af4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002abe:	4b2a      	ldr	r3, [pc, #168]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a29      	ldr	r2, [pc, #164]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002ac4:	f023 0301 	bic.w	r3, r3, #1
 8002ac8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002aca:	f7ff f911 	bl	8001cf0 <HAL_GetTick>
 8002ace:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ad0:	e008      	b.n	8002ae4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ad2:	f7ff f90d 	bl	8001cf0 <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e2dd      	b.n	80030a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ae4:	4b20      	ldr	r3, [pc, #128]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1f0      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x1da>
 8002af0:	e000      	b.n	8002af4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002af2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d074      	beq.n	8002bea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	2b08      	cmp	r3, #8
 8002b04:	d005      	beq.n	8002b12 <HAL_RCC_OscConfig+0x21a>
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	2b0c      	cmp	r3, #12
 8002b0a:	d10e      	bne.n	8002b2a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	2b03      	cmp	r3, #3
 8002b10:	d10b      	bne.n	8002b2a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b12:	4b15      	ldr	r3, [pc, #84]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d064      	beq.n	8002be8 <HAL_RCC_OscConfig+0x2f0>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d160      	bne.n	8002be8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e2ba      	b.n	80030a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b32:	d106      	bne.n	8002b42 <HAL_RCC_OscConfig+0x24a>
 8002b34:	4b0c      	ldr	r3, [pc, #48]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a0b      	ldr	r2, [pc, #44]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002b3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b3e:	6013      	str	r3, [r2, #0]
 8002b40:	e026      	b.n	8002b90 <HAL_RCC_OscConfig+0x298>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b4a:	d115      	bne.n	8002b78 <HAL_RCC_OscConfig+0x280>
 8002b4c:	4b06      	ldr	r3, [pc, #24]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a05      	ldr	r2, [pc, #20]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002b52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b56:	6013      	str	r3, [r2, #0]
 8002b58:	4b03      	ldr	r3, [pc, #12]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a02      	ldr	r2, [pc, #8]	; (8002b68 <HAL_RCC_OscConfig+0x270>)
 8002b5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b62:	6013      	str	r3, [r2, #0]
 8002b64:	e014      	b.n	8002b90 <HAL_RCC_OscConfig+0x298>
 8002b66:	bf00      	nop
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	080087d4 	.word	0x080087d4
 8002b70:	20000000 	.word	0x20000000
 8002b74:	20000004 	.word	0x20000004
 8002b78:	4ba0      	ldr	r3, [pc, #640]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a9f      	ldr	r2, [pc, #636]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b82:	6013      	str	r3, [r2, #0]
 8002b84:	4b9d      	ldr	r3, [pc, #628]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a9c      	ldr	r2, [pc, #624]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002b8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d013      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b98:	f7ff f8aa 	bl	8001cf0 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ba0:	f7ff f8a6 	bl	8001cf0 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b64      	cmp	r3, #100	; 0x64
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e276      	b.n	80030a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bb2:	4b92      	ldr	r3, [pc, #584]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d0f0      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x2a8>
 8002bbe:	e014      	b.n	8002bea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc0:	f7ff f896 	bl	8001cf0 <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bc8:	f7ff f892 	bl	8001cf0 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b64      	cmp	r3, #100	; 0x64
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e262      	b.n	80030a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bda:	4b88      	ldr	r3, [pc, #544]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1f0      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x2d0>
 8002be6:	e000      	b.n	8002bea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d060      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	2b04      	cmp	r3, #4
 8002bfa:	d005      	beq.n	8002c08 <HAL_RCC_OscConfig+0x310>
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	2b0c      	cmp	r3, #12
 8002c00:	d119      	bne.n	8002c36 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d116      	bne.n	8002c36 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c08:	4b7c      	ldr	r3, [pc, #496]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d005      	beq.n	8002c20 <HAL_RCC_OscConfig+0x328>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d101      	bne.n	8002c20 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e23f      	b.n	80030a0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c20:	4b76      	ldr	r3, [pc, #472]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	061b      	lsls	r3, r3, #24
 8002c2e:	4973      	ldr	r1, [pc, #460]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c34:	e040      	b.n	8002cb8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d023      	beq.n	8002c86 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c3e:	4b6f      	ldr	r3, [pc, #444]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a6e      	ldr	r2, [pc, #440]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4a:	f7ff f851 	bl	8001cf0 <HAL_GetTick>
 8002c4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c52:	f7ff f84d 	bl	8001cf0 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e21d      	b.n	80030a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c64:	4b65      	ldr	r3, [pc, #404]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0f0      	beq.n	8002c52 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c70:	4b62      	ldr	r3, [pc, #392]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	061b      	lsls	r3, r3, #24
 8002c7e:	495f      	ldr	r1, [pc, #380]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	604b      	str	r3, [r1, #4]
 8002c84:	e018      	b.n	8002cb8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c86:	4b5d      	ldr	r3, [pc, #372]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a5c      	ldr	r2, [pc, #368]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002c8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c92:	f7ff f82d 	bl	8001cf0 <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c98:	e008      	b.n	8002cac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c9a:	f7ff f829 	bl	8001cf0 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e1f9      	b.n	80030a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cac:	4b53      	ldr	r3, [pc, #332]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1f0      	bne.n	8002c9a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0308 	and.w	r3, r3, #8
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d03c      	beq.n	8002d3e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d01c      	beq.n	8002d06 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ccc:	4b4b      	ldr	r3, [pc, #300]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cd2:	4a4a      	ldr	r2, [pc, #296]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002cd4:	f043 0301 	orr.w	r3, r3, #1
 8002cd8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cdc:	f7ff f808 	bl	8001cf0 <HAL_GetTick>
 8002ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ce4:	f7ff f804 	bl	8001cf0 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e1d4      	b.n	80030a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cf6:	4b41      	ldr	r3, [pc, #260]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002cf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0ef      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x3ec>
 8002d04:	e01b      	b.n	8002d3e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d06:	4b3d      	ldr	r3, [pc, #244]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002d08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d0c:	4a3b      	ldr	r2, [pc, #236]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002d0e:	f023 0301 	bic.w	r3, r3, #1
 8002d12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d16:	f7fe ffeb 	bl	8001cf0 <HAL_GetTick>
 8002d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d1c:	e008      	b.n	8002d30 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d1e:	f7fe ffe7 	bl	8001cf0 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e1b7      	b.n	80030a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d30:	4b32      	ldr	r3, [pc, #200]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1ef      	bne.n	8002d1e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0304 	and.w	r3, r3, #4
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f000 80a6 	beq.w	8002e98 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d50:	4b2a      	ldr	r3, [pc, #168]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10d      	bne.n	8002d78 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d5c:	4b27      	ldr	r3, [pc, #156]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d60:	4a26      	ldr	r2, [pc, #152]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002d62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d66:	6593      	str	r3, [r2, #88]	; 0x58
 8002d68:	4b24      	ldr	r3, [pc, #144]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d70:	60bb      	str	r3, [r7, #8]
 8002d72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d74:	2301      	movs	r3, #1
 8002d76:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d78:	4b21      	ldr	r3, [pc, #132]	; (8002e00 <HAL_RCC_OscConfig+0x508>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d118      	bne.n	8002db6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d84:	4b1e      	ldr	r3, [pc, #120]	; (8002e00 <HAL_RCC_OscConfig+0x508>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a1d      	ldr	r2, [pc, #116]	; (8002e00 <HAL_RCC_OscConfig+0x508>)
 8002d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d90:	f7fe ffae 	bl	8001cf0 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d98:	f7fe ffaa 	bl	8001cf0 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e17a      	b.n	80030a0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002daa:	4b15      	ldr	r3, [pc, #84]	; (8002e00 <HAL_RCC_OscConfig+0x508>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0f0      	beq.n	8002d98 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d108      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x4d8>
 8002dbe:	4b0f      	ldr	r3, [pc, #60]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc4:	4a0d      	ldr	r2, [pc, #52]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002dc6:	f043 0301 	orr.w	r3, r3, #1
 8002dca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dce:	e029      	b.n	8002e24 <HAL_RCC_OscConfig+0x52c>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	2b05      	cmp	r3, #5
 8002dd6:	d115      	bne.n	8002e04 <HAL_RCC_OscConfig+0x50c>
 8002dd8:	4b08      	ldr	r3, [pc, #32]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dde:	4a07      	ldr	r2, [pc, #28]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002de0:	f043 0304 	orr.w	r3, r3, #4
 8002de4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002de8:	4b04      	ldr	r3, [pc, #16]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dee:	4a03      	ldr	r2, [pc, #12]	; (8002dfc <HAL_RCC_OscConfig+0x504>)
 8002df0:	f043 0301 	orr.w	r3, r3, #1
 8002df4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002df8:	e014      	b.n	8002e24 <HAL_RCC_OscConfig+0x52c>
 8002dfa:	bf00      	nop
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	40007000 	.word	0x40007000
 8002e04:	4b9c      	ldr	r3, [pc, #624]	; (8003078 <HAL_RCC_OscConfig+0x780>)
 8002e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0a:	4a9b      	ldr	r2, [pc, #620]	; (8003078 <HAL_RCC_OscConfig+0x780>)
 8002e0c:	f023 0301 	bic.w	r3, r3, #1
 8002e10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e14:	4b98      	ldr	r3, [pc, #608]	; (8003078 <HAL_RCC_OscConfig+0x780>)
 8002e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e1a:	4a97      	ldr	r2, [pc, #604]	; (8003078 <HAL_RCC_OscConfig+0x780>)
 8002e1c:	f023 0304 	bic.w	r3, r3, #4
 8002e20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d016      	beq.n	8002e5a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e2c:	f7fe ff60 	bl	8001cf0 <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e32:	e00a      	b.n	8002e4a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e34:	f7fe ff5c 	bl	8001cf0 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e12a      	b.n	80030a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e4a:	4b8b      	ldr	r3, [pc, #556]	; (8003078 <HAL_RCC_OscConfig+0x780>)
 8002e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0ed      	beq.n	8002e34 <HAL_RCC_OscConfig+0x53c>
 8002e58:	e015      	b.n	8002e86 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e5a:	f7fe ff49 	bl	8001cf0 <HAL_GetTick>
 8002e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e60:	e00a      	b.n	8002e78 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e62:	f7fe ff45 	bl	8001cf0 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e113      	b.n	80030a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e78:	4b7f      	ldr	r3, [pc, #508]	; (8003078 <HAL_RCC_OscConfig+0x780>)
 8002e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1ed      	bne.n	8002e62 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e86:	7ffb      	ldrb	r3, [r7, #31]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d105      	bne.n	8002e98 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e8c:	4b7a      	ldr	r3, [pc, #488]	; (8003078 <HAL_RCC_OscConfig+0x780>)
 8002e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e90:	4a79      	ldr	r2, [pc, #484]	; (8003078 <HAL_RCC_OscConfig+0x780>)
 8002e92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e96:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 80fe 	beq.w	800309e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	f040 80d0 	bne.w	800304c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002eac:	4b72      	ldr	r3, [pc, #456]	; (8003078 <HAL_RCC_OscConfig+0x780>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	f003 0203 	and.w	r2, r3, #3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d130      	bne.n	8002f22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d127      	bne.n	8002f22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002edc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d11f      	bne.n	8002f22 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002eec:	2a07      	cmp	r2, #7
 8002eee:	bf14      	ite	ne
 8002ef0:	2201      	movne	r2, #1
 8002ef2:	2200      	moveq	r2, #0
 8002ef4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d113      	bne.n	8002f22 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f04:	085b      	lsrs	r3, r3, #1
 8002f06:	3b01      	subs	r3, #1
 8002f08:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d109      	bne.n	8002f22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f18:	085b      	lsrs	r3, r3, #1
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d06e      	beq.n	8003000 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	2b0c      	cmp	r3, #12
 8002f26:	d069      	beq.n	8002ffc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f28:	4b53      	ldr	r3, [pc, #332]	; (8003078 <HAL_RCC_OscConfig+0x780>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d105      	bne.n	8002f40 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002f34:	4b50      	ldr	r3, [pc, #320]	; (8003078 <HAL_RCC_OscConfig+0x780>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e0ad      	b.n	80030a0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f44:	4b4c      	ldr	r3, [pc, #304]	; (8003078 <HAL_RCC_OscConfig+0x780>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a4b      	ldr	r2, [pc, #300]	; (8003078 <HAL_RCC_OscConfig+0x780>)
 8002f4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f4e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f50:	f7fe fece 	bl	8001cf0 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f58:	f7fe feca 	bl	8001cf0 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e09a      	b.n	80030a0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f6a:	4b43      	ldr	r3, [pc, #268]	; (8003078 <HAL_RCC_OscConfig+0x780>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1f0      	bne.n	8002f58 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f76:	4b40      	ldr	r3, [pc, #256]	; (8003078 <HAL_RCC_OscConfig+0x780>)
 8002f78:	68da      	ldr	r2, [r3, #12]
 8002f7a:	4b40      	ldr	r3, [pc, #256]	; (800307c <HAL_RCC_OscConfig+0x784>)
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f86:	3a01      	subs	r2, #1
 8002f88:	0112      	lsls	r2, r2, #4
 8002f8a:	4311      	orrs	r1, r2
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f90:	0212      	lsls	r2, r2, #8
 8002f92:	4311      	orrs	r1, r2
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f98:	0852      	lsrs	r2, r2, #1
 8002f9a:	3a01      	subs	r2, #1
 8002f9c:	0552      	lsls	r2, r2, #21
 8002f9e:	4311      	orrs	r1, r2
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002fa4:	0852      	lsrs	r2, r2, #1
 8002fa6:	3a01      	subs	r2, #1
 8002fa8:	0652      	lsls	r2, r2, #25
 8002faa:	4311      	orrs	r1, r2
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fb0:	0912      	lsrs	r2, r2, #4
 8002fb2:	0452      	lsls	r2, r2, #17
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	4930      	ldr	r1, [pc, #192]	; (8003078 <HAL_RCC_OscConfig+0x780>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002fbc:	4b2e      	ldr	r3, [pc, #184]	; (8003078 <HAL_RCC_OscConfig+0x780>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a2d      	ldr	r2, [pc, #180]	; (8003078 <HAL_RCC_OscConfig+0x780>)
 8002fc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fc6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fc8:	4b2b      	ldr	r3, [pc, #172]	; (8003078 <HAL_RCC_OscConfig+0x780>)
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	4a2a      	ldr	r2, [pc, #168]	; (8003078 <HAL_RCC_OscConfig+0x780>)
 8002fce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fd2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fd4:	f7fe fe8c 	bl	8001cf0 <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fdc:	f7fe fe88 	bl	8001cf0 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e058      	b.n	80030a0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fee:	4b22      	ldr	r3, [pc, #136]	; (8003078 <HAL_RCC_OscConfig+0x780>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d0f0      	beq.n	8002fdc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ffa:	e050      	b.n	800309e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e04f      	b.n	80030a0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003000:	4b1d      	ldr	r3, [pc, #116]	; (8003078 <HAL_RCC_OscConfig+0x780>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d148      	bne.n	800309e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800300c:	4b1a      	ldr	r3, [pc, #104]	; (8003078 <HAL_RCC_OscConfig+0x780>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a19      	ldr	r2, [pc, #100]	; (8003078 <HAL_RCC_OscConfig+0x780>)
 8003012:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003016:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003018:	4b17      	ldr	r3, [pc, #92]	; (8003078 <HAL_RCC_OscConfig+0x780>)
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	4a16      	ldr	r2, [pc, #88]	; (8003078 <HAL_RCC_OscConfig+0x780>)
 800301e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003022:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003024:	f7fe fe64 	bl	8001cf0 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800302c:	f7fe fe60 	bl	8001cf0 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e030      	b.n	80030a0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800303e:	4b0e      	ldr	r3, [pc, #56]	; (8003078 <HAL_RCC_OscConfig+0x780>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0f0      	beq.n	800302c <HAL_RCC_OscConfig+0x734>
 800304a:	e028      	b.n	800309e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	2b0c      	cmp	r3, #12
 8003050:	d023      	beq.n	800309a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003052:	4b09      	ldr	r3, [pc, #36]	; (8003078 <HAL_RCC_OscConfig+0x780>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a08      	ldr	r2, [pc, #32]	; (8003078 <HAL_RCC_OscConfig+0x780>)
 8003058:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800305c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305e:	f7fe fe47 	bl	8001cf0 <HAL_GetTick>
 8003062:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003064:	e00c      	b.n	8003080 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003066:	f7fe fe43 	bl	8001cf0 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d905      	bls.n	8003080 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e013      	b.n	80030a0 <HAL_RCC_OscConfig+0x7a8>
 8003078:	40021000 	.word	0x40021000
 800307c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003080:	4b09      	ldr	r3, [pc, #36]	; (80030a8 <HAL_RCC_OscConfig+0x7b0>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1ec      	bne.n	8003066 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800308c:	4b06      	ldr	r3, [pc, #24]	; (80030a8 <HAL_RCC_OscConfig+0x7b0>)
 800308e:	68da      	ldr	r2, [r3, #12]
 8003090:	4905      	ldr	r1, [pc, #20]	; (80030a8 <HAL_RCC_OscConfig+0x7b0>)
 8003092:	4b06      	ldr	r3, [pc, #24]	; (80030ac <HAL_RCC_OscConfig+0x7b4>)
 8003094:	4013      	ands	r3, r2
 8003096:	60cb      	str	r3, [r1, #12]
 8003098:	e001      	b.n	800309e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e000      	b.n	80030a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3720      	adds	r7, #32
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	40021000 	.word	0x40021000
 80030ac:	feeefffc 	.word	0xfeeefffc

080030b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e0e7      	b.n	8003294 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030c4:	4b75      	ldr	r3, [pc, #468]	; (800329c <HAL_RCC_ClockConfig+0x1ec>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0307 	and.w	r3, r3, #7
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d910      	bls.n	80030f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030d2:	4b72      	ldr	r3, [pc, #456]	; (800329c <HAL_RCC_ClockConfig+0x1ec>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f023 0207 	bic.w	r2, r3, #7
 80030da:	4970      	ldr	r1, [pc, #448]	; (800329c <HAL_RCC_ClockConfig+0x1ec>)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	4313      	orrs	r3, r2
 80030e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030e2:	4b6e      	ldr	r3, [pc, #440]	; (800329c <HAL_RCC_ClockConfig+0x1ec>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0307 	and.w	r3, r3, #7
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d001      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e0cf      	b.n	8003294 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d010      	beq.n	8003122 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	4b66      	ldr	r3, [pc, #408]	; (80032a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800310c:	429a      	cmp	r2, r3
 800310e:	d908      	bls.n	8003122 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003110:	4b63      	ldr	r3, [pc, #396]	; (80032a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	4960      	ldr	r1, [pc, #384]	; (80032a0 <HAL_RCC_ClockConfig+0x1f0>)
 800311e:	4313      	orrs	r3, r2
 8003120:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	d04c      	beq.n	80031c8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	2b03      	cmp	r3, #3
 8003134:	d107      	bne.n	8003146 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003136:	4b5a      	ldr	r3, [pc, #360]	; (80032a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d121      	bne.n	8003186 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e0a6      	b.n	8003294 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	2b02      	cmp	r3, #2
 800314c:	d107      	bne.n	800315e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800314e:	4b54      	ldr	r3, [pc, #336]	; (80032a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d115      	bne.n	8003186 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e09a      	b.n	8003294 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d107      	bne.n	8003176 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003166:	4b4e      	ldr	r3, [pc, #312]	; (80032a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d109      	bne.n	8003186 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e08e      	b.n	8003294 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003176:	4b4a      	ldr	r3, [pc, #296]	; (80032a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e086      	b.n	8003294 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003186:	4b46      	ldr	r3, [pc, #280]	; (80032a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f023 0203 	bic.w	r2, r3, #3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	4943      	ldr	r1, [pc, #268]	; (80032a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003194:	4313      	orrs	r3, r2
 8003196:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003198:	f7fe fdaa 	bl	8001cf0 <HAL_GetTick>
 800319c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800319e:	e00a      	b.n	80031b6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031a0:	f7fe fda6 	bl	8001cf0 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e06e      	b.n	8003294 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031b6:	4b3a      	ldr	r3, [pc, #232]	; (80032a0 <HAL_RCC_ClockConfig+0x1f0>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 020c 	and.w	r2, r3, #12
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d1eb      	bne.n	80031a0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d010      	beq.n	80031f6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	4b31      	ldr	r3, [pc, #196]	; (80032a0 <HAL_RCC_ClockConfig+0x1f0>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d208      	bcs.n	80031f6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031e4:	4b2e      	ldr	r3, [pc, #184]	; (80032a0 <HAL_RCC_ClockConfig+0x1f0>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	492b      	ldr	r1, [pc, #172]	; (80032a0 <HAL_RCC_ClockConfig+0x1f0>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031f6:	4b29      	ldr	r3, [pc, #164]	; (800329c <HAL_RCC_ClockConfig+0x1ec>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	429a      	cmp	r2, r3
 8003202:	d210      	bcs.n	8003226 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003204:	4b25      	ldr	r3, [pc, #148]	; (800329c <HAL_RCC_ClockConfig+0x1ec>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f023 0207 	bic.w	r2, r3, #7
 800320c:	4923      	ldr	r1, [pc, #140]	; (800329c <HAL_RCC_ClockConfig+0x1ec>)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	4313      	orrs	r3, r2
 8003212:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003214:	4b21      	ldr	r3, [pc, #132]	; (800329c <HAL_RCC_ClockConfig+0x1ec>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	429a      	cmp	r2, r3
 8003220:	d001      	beq.n	8003226 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e036      	b.n	8003294 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0304 	and.w	r3, r3, #4
 800322e:	2b00      	cmp	r3, #0
 8003230:	d008      	beq.n	8003244 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003232:	4b1b      	ldr	r3, [pc, #108]	; (80032a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	4918      	ldr	r1, [pc, #96]	; (80032a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003240:	4313      	orrs	r3, r2
 8003242:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0308 	and.w	r3, r3, #8
 800324c:	2b00      	cmp	r3, #0
 800324e:	d009      	beq.n	8003264 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003250:	4b13      	ldr	r3, [pc, #76]	; (80032a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	4910      	ldr	r1, [pc, #64]	; (80032a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003260:	4313      	orrs	r3, r2
 8003262:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003264:	f000 f824 	bl	80032b0 <HAL_RCC_GetSysClockFreq>
 8003268:	4602      	mov	r2, r0
 800326a:	4b0d      	ldr	r3, [pc, #52]	; (80032a0 <HAL_RCC_ClockConfig+0x1f0>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	091b      	lsrs	r3, r3, #4
 8003270:	f003 030f 	and.w	r3, r3, #15
 8003274:	490b      	ldr	r1, [pc, #44]	; (80032a4 <HAL_RCC_ClockConfig+0x1f4>)
 8003276:	5ccb      	ldrb	r3, [r1, r3]
 8003278:	f003 031f 	and.w	r3, r3, #31
 800327c:	fa22 f303 	lsr.w	r3, r2, r3
 8003280:	4a09      	ldr	r2, [pc, #36]	; (80032a8 <HAL_RCC_ClockConfig+0x1f8>)
 8003282:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003284:	4b09      	ldr	r3, [pc, #36]	; (80032ac <HAL_RCC_ClockConfig+0x1fc>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4618      	mov	r0, r3
 800328a:	f7fe fce1 	bl	8001c50 <HAL_InitTick>
 800328e:	4603      	mov	r3, r0
 8003290:	72fb      	strb	r3, [r7, #11]

  return status;
 8003292:	7afb      	ldrb	r3, [r7, #11]
}
 8003294:	4618      	mov	r0, r3
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40022000 	.word	0x40022000
 80032a0:	40021000 	.word	0x40021000
 80032a4:	080087d4 	.word	0x080087d4
 80032a8:	20000000 	.word	0x20000000
 80032ac:	20000004 	.word	0x20000004

080032b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b089      	sub	sp, #36	; 0x24
 80032b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80032b6:	2300      	movs	r3, #0
 80032b8:	61fb      	str	r3, [r7, #28]
 80032ba:	2300      	movs	r3, #0
 80032bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032be:	4b3e      	ldr	r3, [pc, #248]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 030c 	and.w	r3, r3, #12
 80032c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032c8:	4b3b      	ldr	r3, [pc, #236]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	f003 0303 	and.w	r3, r3, #3
 80032d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d005      	beq.n	80032e4 <HAL_RCC_GetSysClockFreq+0x34>
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	2b0c      	cmp	r3, #12
 80032dc:	d121      	bne.n	8003322 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d11e      	bne.n	8003322 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80032e4:	4b34      	ldr	r3, [pc, #208]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0308 	and.w	r3, r3, #8
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d107      	bne.n	8003300 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80032f0:	4b31      	ldr	r3, [pc, #196]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80032f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032f6:	0a1b      	lsrs	r3, r3, #8
 80032f8:	f003 030f 	and.w	r3, r3, #15
 80032fc:	61fb      	str	r3, [r7, #28]
 80032fe:	e005      	b.n	800330c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003300:	4b2d      	ldr	r3, [pc, #180]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	091b      	lsrs	r3, r3, #4
 8003306:	f003 030f 	and.w	r3, r3, #15
 800330a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800330c:	4a2b      	ldr	r2, [pc, #172]	; (80033bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003314:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d10d      	bne.n	8003338 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003320:	e00a      	b.n	8003338 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	2b04      	cmp	r3, #4
 8003326:	d102      	bne.n	800332e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003328:	4b25      	ldr	r3, [pc, #148]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800332a:	61bb      	str	r3, [r7, #24]
 800332c:	e004      	b.n	8003338 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	2b08      	cmp	r3, #8
 8003332:	d101      	bne.n	8003338 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003334:	4b23      	ldr	r3, [pc, #140]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003336:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	2b0c      	cmp	r3, #12
 800333c:	d134      	bne.n	80033a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800333e:	4b1e      	ldr	r3, [pc, #120]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	f003 0303 	and.w	r3, r3, #3
 8003346:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	2b02      	cmp	r3, #2
 800334c:	d003      	beq.n	8003356 <HAL_RCC_GetSysClockFreq+0xa6>
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	2b03      	cmp	r3, #3
 8003352:	d003      	beq.n	800335c <HAL_RCC_GetSysClockFreq+0xac>
 8003354:	e005      	b.n	8003362 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003356:	4b1a      	ldr	r3, [pc, #104]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003358:	617b      	str	r3, [r7, #20]
      break;
 800335a:	e005      	b.n	8003368 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800335c:	4b19      	ldr	r3, [pc, #100]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800335e:	617b      	str	r3, [r7, #20]
      break;
 8003360:	e002      	b.n	8003368 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	617b      	str	r3, [r7, #20]
      break;
 8003366:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003368:	4b13      	ldr	r3, [pc, #76]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	091b      	lsrs	r3, r3, #4
 800336e:	f003 0307 	and.w	r3, r3, #7
 8003372:	3301      	adds	r3, #1
 8003374:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003376:	4b10      	ldr	r3, [pc, #64]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	0a1b      	lsrs	r3, r3, #8
 800337c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	fb03 f202 	mul.w	r2, r3, r2
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	fbb2 f3f3 	udiv	r3, r2, r3
 800338c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800338e:	4b0a      	ldr	r3, [pc, #40]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	0e5b      	lsrs	r3, r3, #25
 8003394:	f003 0303 	and.w	r3, r3, #3
 8003398:	3301      	adds	r3, #1
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80033a8:	69bb      	ldr	r3, [r7, #24]
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3724      	adds	r7, #36	; 0x24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	40021000 	.word	0x40021000
 80033bc:	080087ec 	.word	0x080087ec
 80033c0:	00f42400 	.word	0x00f42400
 80033c4:	007a1200 	.word	0x007a1200

080033c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033cc:	4b03      	ldr	r3, [pc, #12]	; (80033dc <HAL_RCC_GetHCLKFreq+0x14>)
 80033ce:	681b      	ldr	r3, [r3, #0]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	20000000 	.word	0x20000000

080033e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80033e4:	f7ff fff0 	bl	80033c8 <HAL_RCC_GetHCLKFreq>
 80033e8:	4602      	mov	r2, r0
 80033ea:	4b06      	ldr	r3, [pc, #24]	; (8003404 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	0a1b      	lsrs	r3, r3, #8
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	4904      	ldr	r1, [pc, #16]	; (8003408 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033f6:	5ccb      	ldrb	r3, [r1, r3]
 80033f8:	f003 031f 	and.w	r3, r3, #31
 80033fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003400:	4618      	mov	r0, r3
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40021000 	.word	0x40021000
 8003408:	080087e4 	.word	0x080087e4

0800340c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003410:	f7ff ffda 	bl	80033c8 <HAL_RCC_GetHCLKFreq>
 8003414:	4602      	mov	r2, r0
 8003416:	4b06      	ldr	r3, [pc, #24]	; (8003430 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	0adb      	lsrs	r3, r3, #11
 800341c:	f003 0307 	and.w	r3, r3, #7
 8003420:	4904      	ldr	r1, [pc, #16]	; (8003434 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003422:	5ccb      	ldrb	r3, [r1, r3]
 8003424:	f003 031f 	and.w	r3, r3, #31
 8003428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800342c:	4618      	mov	r0, r3
 800342e:	bd80      	pop	{r7, pc}
 8003430:	40021000 	.word	0x40021000
 8003434:	080087e4 	.word	0x080087e4

08003438 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003440:	2300      	movs	r3, #0
 8003442:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003444:	4b2a      	ldr	r3, [pc, #168]	; (80034f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d003      	beq.n	8003458 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003450:	f7ff f9ee 	bl	8002830 <HAL_PWREx_GetVoltageRange>
 8003454:	6178      	str	r0, [r7, #20]
 8003456:	e014      	b.n	8003482 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003458:	4b25      	ldr	r3, [pc, #148]	; (80034f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800345a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345c:	4a24      	ldr	r2, [pc, #144]	; (80034f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800345e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003462:	6593      	str	r3, [r2, #88]	; 0x58
 8003464:	4b22      	ldr	r3, [pc, #136]	; (80034f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346c:	60fb      	str	r3, [r7, #12]
 800346e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003470:	f7ff f9de 	bl	8002830 <HAL_PWREx_GetVoltageRange>
 8003474:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003476:	4b1e      	ldr	r3, [pc, #120]	; (80034f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347a:	4a1d      	ldr	r2, [pc, #116]	; (80034f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800347c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003480:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003488:	d10b      	bne.n	80034a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2b80      	cmp	r3, #128	; 0x80
 800348e:	d919      	bls.n	80034c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2ba0      	cmp	r3, #160	; 0xa0
 8003494:	d902      	bls.n	800349c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003496:	2302      	movs	r3, #2
 8003498:	613b      	str	r3, [r7, #16]
 800349a:	e013      	b.n	80034c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800349c:	2301      	movs	r3, #1
 800349e:	613b      	str	r3, [r7, #16]
 80034a0:	e010      	b.n	80034c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b80      	cmp	r3, #128	; 0x80
 80034a6:	d902      	bls.n	80034ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80034a8:	2303      	movs	r3, #3
 80034aa:	613b      	str	r3, [r7, #16]
 80034ac:	e00a      	b.n	80034c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b80      	cmp	r3, #128	; 0x80
 80034b2:	d102      	bne.n	80034ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034b4:	2302      	movs	r3, #2
 80034b6:	613b      	str	r3, [r7, #16]
 80034b8:	e004      	b.n	80034c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b70      	cmp	r3, #112	; 0x70
 80034be:	d101      	bne.n	80034c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034c0:	2301      	movs	r3, #1
 80034c2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80034c4:	4b0b      	ldr	r3, [pc, #44]	; (80034f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f023 0207 	bic.w	r2, r3, #7
 80034cc:	4909      	ldr	r1, [pc, #36]	; (80034f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80034d4:	4b07      	ldr	r3, [pc, #28]	; (80034f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0307 	and.w	r3, r3, #7
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d001      	beq.n	80034e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e000      	b.n	80034e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3718      	adds	r7, #24
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40021000 	.word	0x40021000
 80034f4:	40022000 	.word	0x40022000

080034f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003500:	2300      	movs	r3, #0
 8003502:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003504:	2300      	movs	r3, #0
 8003506:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003510:	2b00      	cmp	r3, #0
 8003512:	d041      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003518:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800351c:	d02a      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800351e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003522:	d824      	bhi.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003524:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003528:	d008      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800352a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800352e:	d81e      	bhi.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00a      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003534:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003538:	d010      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800353a:	e018      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800353c:	4b86      	ldr	r3, [pc, #536]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	4a85      	ldr	r2, [pc, #532]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003542:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003546:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003548:	e015      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	3304      	adds	r3, #4
 800354e:	2100      	movs	r1, #0
 8003550:	4618      	mov	r0, r3
 8003552:	f000 fabb 	bl	8003acc <RCCEx_PLLSAI1_Config>
 8003556:	4603      	mov	r3, r0
 8003558:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800355a:	e00c      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3320      	adds	r3, #32
 8003560:	2100      	movs	r1, #0
 8003562:	4618      	mov	r0, r3
 8003564:	f000 fba6 	bl	8003cb4 <RCCEx_PLLSAI2_Config>
 8003568:	4603      	mov	r3, r0
 800356a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800356c:	e003      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	74fb      	strb	r3, [r7, #19]
      break;
 8003572:	e000      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003574:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003576:	7cfb      	ldrb	r3, [r7, #19]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10b      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800357c:	4b76      	ldr	r3, [pc, #472]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800357e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003582:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800358a:	4973      	ldr	r1, [pc, #460]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800358c:	4313      	orrs	r3, r2
 800358e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003592:	e001      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003594:	7cfb      	ldrb	r3, [r7, #19]
 8003596:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d041      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035ac:	d02a      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80035ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035b2:	d824      	bhi.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80035b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035b8:	d008      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80035ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035be:	d81e      	bhi.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00a      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80035c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035c8:	d010      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80035ca:	e018      	b.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035cc:	4b62      	ldr	r3, [pc, #392]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	4a61      	ldr	r2, [pc, #388]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035d8:	e015      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	3304      	adds	r3, #4
 80035de:	2100      	movs	r1, #0
 80035e0:	4618      	mov	r0, r3
 80035e2:	f000 fa73 	bl	8003acc <RCCEx_PLLSAI1_Config>
 80035e6:	4603      	mov	r3, r0
 80035e8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035ea:	e00c      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3320      	adds	r3, #32
 80035f0:	2100      	movs	r1, #0
 80035f2:	4618      	mov	r0, r3
 80035f4:	f000 fb5e 	bl	8003cb4 <RCCEx_PLLSAI2_Config>
 80035f8:	4603      	mov	r3, r0
 80035fa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035fc:	e003      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	74fb      	strb	r3, [r7, #19]
      break;
 8003602:	e000      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003604:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003606:	7cfb      	ldrb	r3, [r7, #19]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10b      	bne.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800360c:	4b52      	ldr	r3, [pc, #328]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800360e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003612:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800361a:	494f      	ldr	r1, [pc, #316]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800361c:	4313      	orrs	r3, r2
 800361e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003622:	e001      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003624:	7cfb      	ldrb	r3, [r7, #19]
 8003626:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 80a0 	beq.w	8003776 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003636:	2300      	movs	r3, #0
 8003638:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800363a:	4b47      	ldr	r3, [pc, #284]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800363c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003646:	2301      	movs	r3, #1
 8003648:	e000      	b.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800364a:	2300      	movs	r3, #0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00d      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003650:	4b41      	ldr	r3, [pc, #260]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003654:	4a40      	ldr	r2, [pc, #256]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800365a:	6593      	str	r3, [r2, #88]	; 0x58
 800365c:	4b3e      	ldr	r3, [pc, #248]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800365e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003664:	60bb      	str	r3, [r7, #8]
 8003666:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003668:	2301      	movs	r3, #1
 800366a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800366c:	4b3b      	ldr	r3, [pc, #236]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a3a      	ldr	r2, [pc, #232]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003672:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003676:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003678:	f7fe fb3a 	bl	8001cf0 <HAL_GetTick>
 800367c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800367e:	e009      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003680:	f7fe fb36 	bl	8001cf0 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d902      	bls.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	74fb      	strb	r3, [r7, #19]
        break;
 8003692:	e005      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003694:	4b31      	ldr	r3, [pc, #196]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369c:	2b00      	cmp	r3, #0
 800369e:	d0ef      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80036a0:	7cfb      	ldrb	r3, [r7, #19]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d15c      	bne.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036a6:	4b2c      	ldr	r3, [pc, #176]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036b0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d01f      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d019      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80036c4:	4b24      	ldr	r3, [pc, #144]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036d0:	4b21      	ldr	r3, [pc, #132]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d6:	4a20      	ldr	r2, [pc, #128]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036e0:	4b1d      	ldr	r3, [pc, #116]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e6:	4a1c      	ldr	r2, [pc, #112]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036f0:	4a19      	ldr	r2, [pc, #100]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d016      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003702:	f7fe faf5 	bl	8001cf0 <HAL_GetTick>
 8003706:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003708:	e00b      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800370a:	f7fe faf1 	bl	8001cf0 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	f241 3288 	movw	r2, #5000	; 0x1388
 8003718:	4293      	cmp	r3, r2
 800371a:	d902      	bls.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	74fb      	strb	r3, [r7, #19]
            break;
 8003720:	e006      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003722:	4b0d      	ldr	r3, [pc, #52]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d0ec      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003730:	7cfb      	ldrb	r3, [r7, #19]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10c      	bne.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003736:	4b08      	ldr	r3, [pc, #32]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003746:	4904      	ldr	r1, [pc, #16]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003748:	4313      	orrs	r3, r2
 800374a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800374e:	e009      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003750:	7cfb      	ldrb	r3, [r7, #19]
 8003752:	74bb      	strb	r3, [r7, #18]
 8003754:	e006      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003756:	bf00      	nop
 8003758:	40021000 	.word	0x40021000
 800375c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003760:	7cfb      	ldrb	r3, [r7, #19]
 8003762:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003764:	7c7b      	ldrb	r3, [r7, #17]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d105      	bne.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800376a:	4b9e      	ldr	r3, [pc, #632]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800376c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376e:	4a9d      	ldr	r2, [pc, #628]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003770:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003774:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00a      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003782:	4b98      	ldr	r3, [pc, #608]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003788:	f023 0203 	bic.w	r2, r3, #3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003790:	4994      	ldr	r1, [pc, #592]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003792:	4313      	orrs	r3, r2
 8003794:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00a      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037a4:	4b8f      	ldr	r3, [pc, #572]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037aa:	f023 020c 	bic.w	r2, r3, #12
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b2:	498c      	ldr	r1, [pc, #560]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0304 	and.w	r3, r3, #4
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00a      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037c6:	4b87      	ldr	r3, [pc, #540]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d4:	4983      	ldr	r1, [pc, #524]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0308 	and.w	r3, r3, #8
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00a      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037e8:	4b7e      	ldr	r3, [pc, #504]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f6:	497b      	ldr	r1, [pc, #492]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0310 	and.w	r3, r3, #16
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00a      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800380a:	4b76      	ldr	r3, [pc, #472]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800380c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003810:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003818:	4972      	ldr	r1, [pc, #456]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800381a:	4313      	orrs	r3, r2
 800381c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0320 	and.w	r3, r3, #32
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00a      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800382c:	4b6d      	ldr	r3, [pc, #436]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800382e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003832:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800383a:	496a      	ldr	r1, [pc, #424]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800383c:	4313      	orrs	r3, r2
 800383e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00a      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800384e:	4b65      	ldr	r3, [pc, #404]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003854:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800385c:	4961      	ldr	r1, [pc, #388]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800385e:	4313      	orrs	r3, r2
 8003860:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00a      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003870:	4b5c      	ldr	r3, [pc, #368]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003876:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800387e:	4959      	ldr	r1, [pc, #356]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003880:	4313      	orrs	r3, r2
 8003882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00a      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003892:	4b54      	ldr	r3, [pc, #336]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003898:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038a0:	4950      	ldr	r1, [pc, #320]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00a      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038b4:	4b4b      	ldr	r3, [pc, #300]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c2:	4948      	ldr	r1, [pc, #288]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00a      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038d6:	4b43      	ldr	r3, [pc, #268]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e4:	493f      	ldr	r1, [pc, #252]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d028      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038f8:	4b3a      	ldr	r3, [pc, #232]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003906:	4937      	ldr	r1, [pc, #220]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003908:	4313      	orrs	r3, r2
 800390a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003912:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003916:	d106      	bne.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003918:	4b32      	ldr	r3, [pc, #200]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	4a31      	ldr	r2, [pc, #196]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800391e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003922:	60d3      	str	r3, [r2, #12]
 8003924:	e011      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800392a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800392e:	d10c      	bne.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3304      	adds	r3, #4
 8003934:	2101      	movs	r1, #1
 8003936:	4618      	mov	r0, r3
 8003938:	f000 f8c8 	bl	8003acc <RCCEx_PLLSAI1_Config>
 800393c:	4603      	mov	r3, r0
 800393e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003940:	7cfb      	ldrb	r3, [r7, #19]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003946:	7cfb      	ldrb	r3, [r7, #19]
 8003948:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d028      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003956:	4b23      	ldr	r3, [pc, #140]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003964:	491f      	ldr	r1, [pc, #124]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003966:	4313      	orrs	r3, r2
 8003968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003970:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003974:	d106      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003976:	4b1b      	ldr	r3, [pc, #108]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	4a1a      	ldr	r2, [pc, #104]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800397c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003980:	60d3      	str	r3, [r2, #12]
 8003982:	e011      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003988:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800398c:	d10c      	bne.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	3304      	adds	r3, #4
 8003992:	2101      	movs	r1, #1
 8003994:	4618      	mov	r0, r3
 8003996:	f000 f899 	bl	8003acc <RCCEx_PLLSAI1_Config>
 800399a:	4603      	mov	r3, r0
 800399c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800399e:	7cfb      	ldrb	r3, [r7, #19]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80039a4:	7cfb      	ldrb	r3, [r7, #19]
 80039a6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d02b      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039b4:	4b0b      	ldr	r3, [pc, #44]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039c2:	4908      	ldr	r1, [pc, #32]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039d2:	d109      	bne.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039d4:	4b03      	ldr	r3, [pc, #12]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	4a02      	ldr	r2, [pc, #8]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039de:	60d3      	str	r3, [r2, #12]
 80039e0:	e014      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80039e2:	bf00      	nop
 80039e4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039f0:	d10c      	bne.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	3304      	adds	r3, #4
 80039f6:	2101      	movs	r1, #1
 80039f8:	4618      	mov	r0, r3
 80039fa:	f000 f867 	bl	8003acc <RCCEx_PLLSAI1_Config>
 80039fe:	4603      	mov	r3, r0
 8003a00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a02:	7cfb      	ldrb	r3, [r7, #19]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003a08:	7cfb      	ldrb	r3, [r7, #19]
 8003a0a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d02f      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a18:	4b2b      	ldr	r3, [pc, #172]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a26:	4928      	ldr	r1, [pc, #160]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a36:	d10d      	bne.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	3304      	adds	r3, #4
 8003a3c:	2102      	movs	r1, #2
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 f844 	bl	8003acc <RCCEx_PLLSAI1_Config>
 8003a44:	4603      	mov	r3, r0
 8003a46:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a48:	7cfb      	ldrb	r3, [r7, #19]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d014      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003a4e:	7cfb      	ldrb	r3, [r7, #19]
 8003a50:	74bb      	strb	r3, [r7, #18]
 8003a52:	e011      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a5c:	d10c      	bne.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	3320      	adds	r3, #32
 8003a62:	2102      	movs	r1, #2
 8003a64:	4618      	mov	r0, r3
 8003a66:	f000 f925 	bl	8003cb4 <RCCEx_PLLSAI2_Config>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a6e:	7cfb      	ldrb	r3, [r7, #19]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003a74:	7cfb      	ldrb	r3, [r7, #19]
 8003a76:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00a      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a84:	4b10      	ldr	r3, [pc, #64]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a92:	490d      	ldr	r1, [pc, #52]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00b      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003aa6:	4b08      	ldr	r3, [pc, #32]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ab6:	4904      	ldr	r1, [pc, #16]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003abe:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3718      	adds	r7, #24
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40021000 	.word	0x40021000

08003acc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ada:	4b75      	ldr	r3, [pc, #468]	; (8003cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	f003 0303 	and.w	r3, r3, #3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d018      	beq.n	8003b18 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003ae6:	4b72      	ldr	r3, [pc, #456]	; (8003cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	f003 0203 	and.w	r2, r3, #3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d10d      	bne.n	8003b12 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
       ||
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d009      	beq.n	8003b12 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003afe:	4b6c      	ldr	r3, [pc, #432]	; (8003cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	091b      	lsrs	r3, r3, #4
 8003b04:	f003 0307 	and.w	r3, r3, #7
 8003b08:	1c5a      	adds	r2, r3, #1
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
       ||
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d047      	beq.n	8003ba2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	73fb      	strb	r3, [r7, #15]
 8003b16:	e044      	b.n	8003ba2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2b03      	cmp	r3, #3
 8003b1e:	d018      	beq.n	8003b52 <RCCEx_PLLSAI1_Config+0x86>
 8003b20:	2b03      	cmp	r3, #3
 8003b22:	d825      	bhi.n	8003b70 <RCCEx_PLLSAI1_Config+0xa4>
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d002      	beq.n	8003b2e <RCCEx_PLLSAI1_Config+0x62>
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d009      	beq.n	8003b40 <RCCEx_PLLSAI1_Config+0x74>
 8003b2c:	e020      	b.n	8003b70 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b2e:	4b60      	ldr	r3, [pc, #384]	; (8003cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d11d      	bne.n	8003b76 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b3e:	e01a      	b.n	8003b76 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b40:	4b5b      	ldr	r3, [pc, #364]	; (8003cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d116      	bne.n	8003b7a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b50:	e013      	b.n	8003b7a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b52:	4b57      	ldr	r3, [pc, #348]	; (8003cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10f      	bne.n	8003b7e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b5e:	4b54      	ldr	r3, [pc, #336]	; (8003cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d109      	bne.n	8003b7e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b6e:	e006      	b.n	8003b7e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	73fb      	strb	r3, [r7, #15]
      break;
 8003b74:	e004      	b.n	8003b80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b76:	bf00      	nop
 8003b78:	e002      	b.n	8003b80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b7a:	bf00      	nop
 8003b7c:	e000      	b.n	8003b80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b80:	7bfb      	ldrb	r3, [r7, #15]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10d      	bne.n	8003ba2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b86:	4b4a      	ldr	r3, [pc, #296]	; (8003cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6819      	ldr	r1, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	3b01      	subs	r3, #1
 8003b98:	011b      	lsls	r3, r3, #4
 8003b9a:	430b      	orrs	r3, r1
 8003b9c:	4944      	ldr	r1, [pc, #272]	; (8003cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ba2:	7bfb      	ldrb	r3, [r7, #15]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d17d      	bne.n	8003ca4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ba8:	4b41      	ldr	r3, [pc, #260]	; (8003cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a40      	ldr	r2, [pc, #256]	; (8003cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003bb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bb4:	f7fe f89c 	bl	8001cf0 <HAL_GetTick>
 8003bb8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003bba:	e009      	b.n	8003bd0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bbc:	f7fe f898 	bl	8001cf0 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d902      	bls.n	8003bd0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	73fb      	strb	r3, [r7, #15]
        break;
 8003bce:	e005      	b.n	8003bdc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003bd0:	4b37      	ldr	r3, [pc, #220]	; (8003cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1ef      	bne.n	8003bbc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003bdc:	7bfb      	ldrb	r3, [r7, #15]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d160      	bne.n	8003ca4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d111      	bne.n	8003c0c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003be8:	4b31      	ldr	r3, [pc, #196]	; (8003cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	6892      	ldr	r2, [r2, #8]
 8003bf8:	0211      	lsls	r1, r2, #8
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	68d2      	ldr	r2, [r2, #12]
 8003bfe:	0912      	lsrs	r2, r2, #4
 8003c00:	0452      	lsls	r2, r2, #17
 8003c02:	430a      	orrs	r2, r1
 8003c04:	492a      	ldr	r1, [pc, #168]	; (8003cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	610b      	str	r3, [r1, #16]
 8003c0a:	e027      	b.n	8003c5c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d112      	bne.n	8003c38 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c12:	4b27      	ldr	r3, [pc, #156]	; (8003cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003c1a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	6892      	ldr	r2, [r2, #8]
 8003c22:	0211      	lsls	r1, r2, #8
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6912      	ldr	r2, [r2, #16]
 8003c28:	0852      	lsrs	r2, r2, #1
 8003c2a:	3a01      	subs	r2, #1
 8003c2c:	0552      	lsls	r2, r2, #21
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	491f      	ldr	r1, [pc, #124]	; (8003cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	610b      	str	r3, [r1, #16]
 8003c36:	e011      	b.n	8003c5c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c38:	4b1d      	ldr	r3, [pc, #116]	; (8003cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003c40:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	6892      	ldr	r2, [r2, #8]
 8003c48:	0211      	lsls	r1, r2, #8
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6952      	ldr	r2, [r2, #20]
 8003c4e:	0852      	lsrs	r2, r2, #1
 8003c50:	3a01      	subs	r2, #1
 8003c52:	0652      	lsls	r2, r2, #25
 8003c54:	430a      	orrs	r2, r1
 8003c56:	4916      	ldr	r1, [pc, #88]	; (8003cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003c5c:	4b14      	ldr	r3, [pc, #80]	; (8003cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a13      	ldr	r2, [pc, #76]	; (8003cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c62:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c66:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c68:	f7fe f842 	bl	8001cf0 <HAL_GetTick>
 8003c6c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c6e:	e009      	b.n	8003c84 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c70:	f7fe f83e 	bl	8001cf0 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d902      	bls.n	8003c84 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	73fb      	strb	r3, [r7, #15]
          break;
 8003c82:	e005      	b.n	8003c90 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c84:	4b0a      	ldr	r3, [pc, #40]	; (8003cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d0ef      	beq.n	8003c70 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003c90:	7bfb      	ldrb	r3, [r7, #15]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d106      	bne.n	8003ca4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003c96:	4b06      	ldr	r3, [pc, #24]	; (8003cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c98:	691a      	ldr	r2, [r3, #16]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	4904      	ldr	r1, [pc, #16]	; (8003cb0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	40021000 	.word	0x40021000

08003cb4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003cc2:	4b6a      	ldr	r3, [pc, #424]	; (8003e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	f003 0303 	and.w	r3, r3, #3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d018      	beq.n	8003d00 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003cce:	4b67      	ldr	r3, [pc, #412]	; (8003e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	f003 0203 	and.w	r2, r3, #3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d10d      	bne.n	8003cfa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
       ||
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d009      	beq.n	8003cfa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003ce6:	4b61      	ldr	r3, [pc, #388]	; (8003e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	091b      	lsrs	r3, r3, #4
 8003cec:	f003 0307 	and.w	r3, r3, #7
 8003cf0:	1c5a      	adds	r2, r3, #1
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
       ||
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d047      	beq.n	8003d8a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	73fb      	strb	r3, [r7, #15]
 8003cfe:	e044      	b.n	8003d8a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2b03      	cmp	r3, #3
 8003d06:	d018      	beq.n	8003d3a <RCCEx_PLLSAI2_Config+0x86>
 8003d08:	2b03      	cmp	r3, #3
 8003d0a:	d825      	bhi.n	8003d58 <RCCEx_PLLSAI2_Config+0xa4>
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d002      	beq.n	8003d16 <RCCEx_PLLSAI2_Config+0x62>
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d009      	beq.n	8003d28 <RCCEx_PLLSAI2_Config+0x74>
 8003d14:	e020      	b.n	8003d58 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d16:	4b55      	ldr	r3, [pc, #340]	; (8003e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d11d      	bne.n	8003d5e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d26:	e01a      	b.n	8003d5e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d28:	4b50      	ldr	r3, [pc, #320]	; (8003e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d116      	bne.n	8003d62 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d38:	e013      	b.n	8003d62 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d3a:	4b4c      	ldr	r3, [pc, #304]	; (8003e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10f      	bne.n	8003d66 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d46:	4b49      	ldr	r3, [pc, #292]	; (8003e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d109      	bne.n	8003d66 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d56:	e006      	b.n	8003d66 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d5c:	e004      	b.n	8003d68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d5e:	bf00      	nop
 8003d60:	e002      	b.n	8003d68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d62:	bf00      	nop
 8003d64:	e000      	b.n	8003d68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d66:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d68:	7bfb      	ldrb	r3, [r7, #15]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10d      	bne.n	8003d8a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d6e:	4b3f      	ldr	r3, [pc, #252]	; (8003e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6819      	ldr	r1, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	011b      	lsls	r3, r3, #4
 8003d82:	430b      	orrs	r3, r1
 8003d84:	4939      	ldr	r1, [pc, #228]	; (8003e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d8a:	7bfb      	ldrb	r3, [r7, #15]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d167      	bne.n	8003e60 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003d90:	4b36      	ldr	r3, [pc, #216]	; (8003e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a35      	ldr	r2, [pc, #212]	; (8003e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d9c:	f7fd ffa8 	bl	8001cf0 <HAL_GetTick>
 8003da0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003da2:	e009      	b.n	8003db8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003da4:	f7fd ffa4 	bl	8001cf0 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d902      	bls.n	8003db8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	73fb      	strb	r3, [r7, #15]
        break;
 8003db6:	e005      	b.n	8003dc4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003db8:	4b2c      	ldr	r3, [pc, #176]	; (8003e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1ef      	bne.n	8003da4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003dc4:	7bfb      	ldrb	r3, [r7, #15]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d14a      	bne.n	8003e60 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d111      	bne.n	8003df4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003dd0:	4b26      	ldr	r3, [pc, #152]	; (8003e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003dd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	6892      	ldr	r2, [r2, #8]
 8003de0:	0211      	lsls	r1, r2, #8
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	68d2      	ldr	r2, [r2, #12]
 8003de6:	0912      	lsrs	r2, r2, #4
 8003de8:	0452      	lsls	r2, r2, #17
 8003dea:	430a      	orrs	r2, r1
 8003dec:	491f      	ldr	r1, [pc, #124]	; (8003e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	614b      	str	r3, [r1, #20]
 8003df2:	e011      	b.n	8003e18 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003df4:	4b1d      	ldr	r3, [pc, #116]	; (8003e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003dfc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	6892      	ldr	r2, [r2, #8]
 8003e04:	0211      	lsls	r1, r2, #8
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	6912      	ldr	r2, [r2, #16]
 8003e0a:	0852      	lsrs	r2, r2, #1
 8003e0c:	3a01      	subs	r2, #1
 8003e0e:	0652      	lsls	r2, r2, #25
 8003e10:	430a      	orrs	r2, r1
 8003e12:	4916      	ldr	r1, [pc, #88]	; (8003e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003e18:	4b14      	ldr	r3, [pc, #80]	; (8003e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a13      	ldr	r2, [pc, #76]	; (8003e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e22:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e24:	f7fd ff64 	bl	8001cf0 <HAL_GetTick>
 8003e28:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e2a:	e009      	b.n	8003e40 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e2c:	f7fd ff60 	bl	8001cf0 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d902      	bls.n	8003e40 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	73fb      	strb	r3, [r7, #15]
          break;
 8003e3e:	e005      	b.n	8003e4c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e40:	4b0a      	ldr	r3, [pc, #40]	; (8003e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d0ef      	beq.n	8003e2c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003e4c:	7bfb      	ldrb	r3, [r7, #15]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d106      	bne.n	8003e60 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003e52:	4b06      	ldr	r3, [pc, #24]	; (8003e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e54:	695a      	ldr	r2, [r3, #20]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	4904      	ldr	r1, [pc, #16]	; (8003e6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	40021000 	.word	0x40021000

08003e70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e095      	b.n	8003fae <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d108      	bne.n	8003e9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e92:	d009      	beq.n	8003ea8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	61da      	str	r2, [r3, #28]
 8003e9a:	e005      	b.n	8003ea8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d106      	bne.n	8003ec8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7fd fb5a 	bl	800157c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2202      	movs	r2, #2
 8003ecc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ede:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ee8:	d902      	bls.n	8003ef0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003eea:	2300      	movs	r3, #0
 8003eec:	60fb      	str	r3, [r7, #12]
 8003eee:	e002      	b.n	8003ef6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003ef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ef4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003efe:	d007      	beq.n	8003f10 <HAL_SPI_Init+0xa0>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f08:	d002      	beq.n	8003f10 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f20:	431a      	orrs	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	431a      	orrs	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	69db      	ldr	r3, [r3, #28]
 8003f44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f52:	ea42 0103 	orr.w	r1, r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	430a      	orrs	r2, r1
 8003f64:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	0c1b      	lsrs	r3, r3, #16
 8003f6c:	f003 0204 	and.w	r2, r3, #4
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f74:	f003 0310 	and.w	r3, r3, #16
 8003f78:	431a      	orrs	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f7e:	f003 0308 	and.w	r3, r3, #8
 8003f82:	431a      	orrs	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003f8c:	ea42 0103 	orr.w	r1, r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b08a      	sub	sp, #40	; 0x28
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	60f8      	str	r0, [r7, #12]
 8003fbe:	60b9      	str	r1, [r7, #8]
 8003fc0:	607a      	str	r2, [r7, #4]
 8003fc2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d101      	bne.n	8003fdc <HAL_SPI_TransmitReceive+0x26>
 8003fd8:	2302      	movs	r3, #2
 8003fda:	e1fb      	b.n	80043d4 <HAL_SPI_TransmitReceive+0x41e>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fe4:	f7fd fe84 	bl	8001cf0 <HAL_GetTick>
 8003fe8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ff0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003ff8:	887b      	ldrh	r3, [r7, #2]
 8003ffa:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003ffc:	887b      	ldrh	r3, [r7, #2]
 8003ffe:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004000:	7efb      	ldrb	r3, [r7, #27]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d00e      	beq.n	8004024 <HAL_SPI_TransmitReceive+0x6e>
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800400c:	d106      	bne.n	800401c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d102      	bne.n	800401c <HAL_SPI_TransmitReceive+0x66>
 8004016:	7efb      	ldrb	r3, [r7, #27]
 8004018:	2b04      	cmp	r3, #4
 800401a:	d003      	beq.n	8004024 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800401c:	2302      	movs	r3, #2
 800401e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004022:	e1cd      	b.n	80043c0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d005      	beq.n	8004036 <HAL_SPI_TransmitReceive+0x80>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d002      	beq.n	8004036 <HAL_SPI_TransmitReceive+0x80>
 8004030:	887b      	ldrh	r3, [r7, #2]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d103      	bne.n	800403e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800403c:	e1c0      	b.n	80043c0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b04      	cmp	r3, #4
 8004048:	d003      	beq.n	8004052 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2205      	movs	r2, #5
 800404e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	887a      	ldrh	r2, [r7, #2]
 8004062:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	887a      	ldrh	r2, [r7, #2]
 800406a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	68ba      	ldr	r2, [r7, #8]
 8004072:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	887a      	ldrh	r2, [r7, #2]
 8004078:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	887a      	ldrh	r2, [r7, #2]
 800407e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004094:	d802      	bhi.n	800409c <HAL_SPI_TransmitReceive+0xe6>
 8004096:	8a3b      	ldrh	r3, [r7, #16]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d908      	bls.n	80040ae <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040aa:	605a      	str	r2, [r3, #4]
 80040ac:	e007      	b.n	80040be <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040bc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c8:	2b40      	cmp	r3, #64	; 0x40
 80040ca:	d007      	beq.n	80040dc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040e4:	d97c      	bls.n	80041e0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d002      	beq.n	80040f4 <HAL_SPI_TransmitReceive+0x13e>
 80040ee:	8a7b      	ldrh	r3, [r7, #18]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d169      	bne.n	80041c8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f8:	881a      	ldrh	r2, [r3, #0]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004104:	1c9a      	adds	r2, r3, #2
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800410e:	b29b      	uxth	r3, r3
 8004110:	3b01      	subs	r3, #1
 8004112:	b29a      	uxth	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004118:	e056      	b.n	80041c8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	2b02      	cmp	r3, #2
 8004126:	d11b      	bne.n	8004160 <HAL_SPI_TransmitReceive+0x1aa>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800412c:	b29b      	uxth	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d016      	beq.n	8004160 <HAL_SPI_TransmitReceive+0x1aa>
 8004132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004134:	2b01      	cmp	r3, #1
 8004136:	d113      	bne.n	8004160 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413c:	881a      	ldrh	r2, [r3, #0]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004148:	1c9a      	adds	r2, r3, #2
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004152:	b29b      	uxth	r3, r3
 8004154:	3b01      	subs	r3, #1
 8004156:	b29a      	uxth	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800415c:	2300      	movs	r3, #0
 800415e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b01      	cmp	r3, #1
 800416c:	d11c      	bne.n	80041a8 <HAL_SPI_TransmitReceive+0x1f2>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004174:	b29b      	uxth	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d016      	beq.n	80041a8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68da      	ldr	r2, [r3, #12]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004184:	b292      	uxth	r2, r2
 8004186:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418c:	1c9a      	adds	r2, r3, #2
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004198:	b29b      	uxth	r3, r3
 800419a:	3b01      	subs	r3, #1
 800419c:	b29a      	uxth	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041a4:	2301      	movs	r3, #1
 80041a6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80041a8:	f7fd fda2 	bl	8001cf0 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d807      	bhi.n	80041c8 <HAL_SPI_TransmitReceive+0x212>
 80041b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041be:	d003      	beq.n	80041c8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80041c6:	e0fb      	b.n	80043c0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1a3      	bne.n	800411a <HAL_SPI_TransmitReceive+0x164>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041d8:	b29b      	uxth	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d19d      	bne.n	800411a <HAL_SPI_TransmitReceive+0x164>
 80041de:	e0df      	b.n	80043a0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d003      	beq.n	80041f0 <HAL_SPI_TransmitReceive+0x23a>
 80041e8:	8a7b      	ldrh	r3, [r7, #18]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	f040 80cb 	bne.w	8004386 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d912      	bls.n	8004220 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fe:	881a      	ldrh	r2, [r3, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420a:	1c9a      	adds	r2, r3, #2
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004214:	b29b      	uxth	r3, r3
 8004216:	3b02      	subs	r3, #2
 8004218:	b29a      	uxth	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800421e:	e0b2      	b.n	8004386 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	330c      	adds	r3, #12
 800422a:	7812      	ldrb	r2, [r2, #0]
 800422c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004232:	1c5a      	adds	r2, r3, #1
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800423c:	b29b      	uxth	r3, r3
 800423e:	3b01      	subs	r3, #1
 8004240:	b29a      	uxth	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004246:	e09e      	b.n	8004386 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	2b02      	cmp	r3, #2
 8004254:	d134      	bne.n	80042c0 <HAL_SPI_TransmitReceive+0x30a>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800425a:	b29b      	uxth	r3, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	d02f      	beq.n	80042c0 <HAL_SPI_TransmitReceive+0x30a>
 8004260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004262:	2b01      	cmp	r3, #1
 8004264:	d12c      	bne.n	80042c0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800426a:	b29b      	uxth	r3, r3
 800426c:	2b01      	cmp	r3, #1
 800426e:	d912      	bls.n	8004296 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004274:	881a      	ldrh	r2, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004280:	1c9a      	adds	r2, r3, #2
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800428a:	b29b      	uxth	r3, r3
 800428c:	3b02      	subs	r3, #2
 800428e:	b29a      	uxth	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004294:	e012      	b.n	80042bc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	330c      	adds	r3, #12
 80042a0:	7812      	ldrb	r2, [r2, #0]
 80042a2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a8:	1c5a      	adds	r2, r3, #1
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	3b01      	subs	r3, #1
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042bc:	2300      	movs	r3, #0
 80042be:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d148      	bne.n	8004360 <HAL_SPI_TransmitReceive+0x3aa>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d042      	beq.n	8004360 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d923      	bls.n	800432e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68da      	ldr	r2, [r3, #12]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f0:	b292      	uxth	r2, r2
 80042f2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f8:	1c9a      	adds	r2, r3, #2
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004304:	b29b      	uxth	r3, r3
 8004306:	3b02      	subs	r3, #2
 8004308:	b29a      	uxth	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004316:	b29b      	uxth	r3, r3
 8004318:	2b01      	cmp	r3, #1
 800431a:	d81f      	bhi.n	800435c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685a      	ldr	r2, [r3, #4]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800432a:	605a      	str	r2, [r3, #4]
 800432c:	e016      	b.n	800435c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f103 020c 	add.w	r2, r3, #12
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433a:	7812      	ldrb	r2, [r2, #0]
 800433c:	b2d2      	uxtb	r2, r2
 800433e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004344:	1c5a      	adds	r2, r3, #1
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004350:	b29b      	uxth	r3, r3
 8004352:	3b01      	subs	r3, #1
 8004354:	b29a      	uxth	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800435c:	2301      	movs	r3, #1
 800435e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004360:	f7fd fcc6 	bl	8001cf0 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800436c:	429a      	cmp	r2, r3
 800436e:	d803      	bhi.n	8004378 <HAL_SPI_TransmitReceive+0x3c2>
 8004370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004376:	d102      	bne.n	800437e <HAL_SPI_TransmitReceive+0x3c8>
 8004378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437a:	2b00      	cmp	r3, #0
 800437c:	d103      	bne.n	8004386 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004384:	e01c      	b.n	80043c0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800438a:	b29b      	uxth	r3, r3
 800438c:	2b00      	cmp	r3, #0
 800438e:	f47f af5b 	bne.w	8004248 <HAL_SPI_TransmitReceive+0x292>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004398:	b29b      	uxth	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	f47f af54 	bne.w	8004248 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043a0:	69fa      	ldr	r2, [r7, #28]
 80043a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	f000 fd31 	bl	8004e0c <SPI_EndRxTxTransaction>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d006      	beq.n	80043be <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2220      	movs	r2, #32
 80043ba:	661a      	str	r2, [r3, #96]	; 0x60
 80043bc:	e000      	b.n	80043c0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80043be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80043d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3728      	adds	r7, #40	; 0x28
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b086      	sub	sp, #24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
 80043e8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80043ea:	2300      	movs	r3, #0
 80043ec:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d101      	bne.n	80043fc <HAL_SPI_TransmitReceive_DMA+0x20>
 80043f8:	2302      	movs	r3, #2
 80043fa:	e16c      	b.n	80046d6 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800440a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8004412:	7dbb      	ldrb	r3, [r7, #22]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d00d      	beq.n	8004434 <HAL_SPI_TransmitReceive_DMA+0x58>
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800441e:	d106      	bne.n	800442e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d102      	bne.n	800442e <HAL_SPI_TransmitReceive_DMA+0x52>
 8004428:	7dbb      	ldrb	r3, [r7, #22]
 800442a:	2b04      	cmp	r3, #4
 800442c:	d002      	beq.n	8004434 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800442e:	2302      	movs	r3, #2
 8004430:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004432:	e14b      	b.n	80046cc <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d005      	beq.n	8004446 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d002      	beq.n	8004446 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004440:	887b      	ldrh	r3, [r7, #2]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d102      	bne.n	800444c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	75fb      	strb	r3, [r7, #23]
    goto error;
 800444a:	e13f      	b.n	80046cc <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004452:	b2db      	uxtb	r3, r3
 8004454:	2b04      	cmp	r3, #4
 8004456:	d003      	beq.n	8004460 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2205      	movs	r2, #5
 800445c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	68ba      	ldr	r2, [r7, #8]
 800446a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	887a      	ldrh	r2, [r7, #2]
 8004470:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	887a      	ldrh	r2, [r7, #2]
 8004476:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	887a      	ldrh	r2, [r7, #2]
 8004482:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	887a      	ldrh	r2, [r7, #2]
 800448a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 80044a8:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044b2:	d908      	bls.n	80044c6 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685a      	ldr	r2, [r3, #4]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80044c2:	605a      	str	r2, [r3, #4]
 80044c4:	e06f      	b.n	80045a6 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80044d4:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044e0:	d126      	bne.n	8004530 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10f      	bne.n	800450e <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	685a      	ldr	r2, [r3, #4]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80044fc:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004502:	b29b      	uxth	r3, r3
 8004504:	085b      	lsrs	r3, r3, #1
 8004506:	b29a      	uxth	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800450c:	e010      	b.n	8004530 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685a      	ldr	r2, [r3, #4]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800451c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004522:	b29b      	uxth	r3, r3
 8004524:	085b      	lsrs	r3, r3, #1
 8004526:	b29b      	uxth	r3, r3
 8004528:	3301      	adds	r3, #1
 800452a:	b29a      	uxth	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800453a:	d134      	bne.n	80045a6 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800454a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004552:	b29b      	uxth	r3, r3
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	2b00      	cmp	r3, #0
 800455a:	d111      	bne.n	8004580 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685a      	ldr	r2, [r3, #4]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800456a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004572:	b29b      	uxth	r3, r3
 8004574:	085b      	lsrs	r3, r3, #1
 8004576:	b29a      	uxth	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800457e:	e012      	b.n	80045a6 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	685a      	ldr	r2, [r3, #4]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800458e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004596:	b29b      	uxth	r3, r3
 8004598:	085b      	lsrs	r3, r3, #1
 800459a:	b29b      	uxth	r3, r3
 800459c:	3301      	adds	r3, #1
 800459e:	b29a      	uxth	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b04      	cmp	r3, #4
 80045b0:	d108      	bne.n	80045c4 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b6:	4a4a      	ldr	r2, [pc, #296]	; (80046e0 <HAL_SPI_TransmitReceive_DMA+0x304>)
 80045b8:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045be:	4a49      	ldr	r2, [pc, #292]	; (80046e4 <HAL_SPI_TransmitReceive_DMA+0x308>)
 80045c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80045c2:	e007      	b.n	80045d4 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c8:	4a47      	ldr	r2, [pc, #284]	; (80046e8 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 80045ca:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d0:	4a46      	ldr	r2, [pc, #280]	; (80046ec <HAL_SPI_TransmitReceive_DMA+0x310>)
 80045d2:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d8:	4a45      	ldr	r2, [pc, #276]	; (80046f0 <HAL_SPI_TransmitReceive_DMA+0x314>)
 80045da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e0:	2200      	movs	r2, #0
 80045e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	330c      	adds	r3, #12
 80045ee:	4619      	mov	r1, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045fc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80045fe:	f7fd fda3 	bl	8002148 <HAL_DMA_Start_IT>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00c      	beq.n	8004622 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800460c:	f043 0210 	orr.w	r2, r3, #16
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8004620:	e054      	b.n	80046cc <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f042 0201 	orr.w	r2, r2, #1
 8004630:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004636:	2200      	movs	r2, #0
 8004638:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800463e:	2200      	movs	r2, #0
 8004640:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004646:	2200      	movs	r2, #0
 8004648:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800464e:	2200      	movs	r2, #0
 8004650:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465a:	4619      	mov	r1, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	330c      	adds	r3, #12
 8004662:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004668:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800466a:	f7fd fd6d 	bl	8002148 <HAL_DMA_Start_IT>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00c      	beq.n	800468e <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004678:	f043 0210 	orr.w	r2, r3, #16
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800468c:	e01e      	b.n	80046cc <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004698:	2b40      	cmp	r3, #64	; 0x40
 800469a:	d007      	beq.n	80046ac <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046aa:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	685a      	ldr	r2, [r3, #4]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f042 0220 	orr.w	r2, r2, #32
 80046ba:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	685a      	ldr	r2, [r3, #4]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f042 0202 	orr.w	r2, r2, #2
 80046ca:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80046d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3718      	adds	r7, #24
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	08004a7d 	.word	0x08004a7d
 80046e4:	08004945 	.word	0x08004945
 80046e8:	08004a99 	.word	0x08004a99
 80046ec:	080049ed 	.word	0x080049ed
 80046f0:	08004ab5 	.word	0x08004ab5

080046f4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b088      	sub	sp, #32
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	099b      	lsrs	r3, r3, #6
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10f      	bne.n	8004738 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00a      	beq.n	8004738 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	099b      	lsrs	r3, r3, #6
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d004      	beq.n	8004738 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	4798      	blx	r3
    return;
 8004736:	e0d7      	b.n	80048e8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	085b      	lsrs	r3, r3, #1
 800473c:	f003 0301 	and.w	r3, r3, #1
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00a      	beq.n	800475a <HAL_SPI_IRQHandler+0x66>
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	09db      	lsrs	r3, r3, #7
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b00      	cmp	r3, #0
 800474e:	d004      	beq.n	800475a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	4798      	blx	r3
    return;
 8004758:	e0c6      	b.n	80048e8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	095b      	lsrs	r3, r3, #5
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10c      	bne.n	8004780 <HAL_SPI_IRQHandler+0x8c>
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	099b      	lsrs	r3, r3, #6
 800476a:	f003 0301 	and.w	r3, r3, #1
 800476e:	2b00      	cmp	r3, #0
 8004770:	d106      	bne.n	8004780 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	0a1b      	lsrs	r3, r3, #8
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	2b00      	cmp	r3, #0
 800477c:	f000 80b4 	beq.w	80048e8 <HAL_SPI_IRQHandler+0x1f4>
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	095b      	lsrs	r3, r3, #5
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	2b00      	cmp	r3, #0
 800478a:	f000 80ad 	beq.w	80048e8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	099b      	lsrs	r3, r3, #6
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b00      	cmp	r3, #0
 8004798:	d023      	beq.n	80047e2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b03      	cmp	r3, #3
 80047a4:	d011      	beq.n	80047ca <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047aa:	f043 0204 	orr.w	r2, r3, #4
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047b2:	2300      	movs	r3, #0
 80047b4:	617b      	str	r3, [r7, #20]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	617b      	str	r3, [r7, #20]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	617b      	str	r3, [r7, #20]
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	e00b      	b.n	80047e2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047ca:	2300      	movs	r3, #0
 80047cc:	613b      	str	r3, [r7, #16]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	613b      	str	r3, [r7, #16]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	613b      	str	r3, [r7, #16]
 80047de:	693b      	ldr	r3, [r7, #16]
        return;
 80047e0:	e082      	b.n	80048e8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	095b      	lsrs	r3, r3, #5
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d014      	beq.n	8004818 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047f2:	f043 0201 	orr.w	r2, r3, #1
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80047fa:	2300      	movs	r3, #0
 80047fc:	60fb      	str	r3, [r7, #12]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	60fb      	str	r3, [r7, #12]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004814:	601a      	str	r2, [r3, #0]
 8004816:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	0a1b      	lsrs	r3, r3, #8
 800481c:	f003 0301 	and.w	r3, r3, #1
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00c      	beq.n	800483e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004828:	f043 0208 	orr.w	r2, r3, #8
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004830:	2300      	movs	r3, #0
 8004832:	60bb      	str	r3, [r7, #8]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	60bb      	str	r3, [r7, #8]
 800483c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004842:	2b00      	cmp	r3, #0
 8004844:	d04f      	beq.n	80048e6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	685a      	ldr	r2, [r3, #4]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004854:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	2b00      	cmp	r3, #0
 8004866:	d104      	bne.n	8004872 <HAL_SPI_IRQHandler+0x17e>
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	d034      	beq.n	80048dc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	685a      	ldr	r2, [r3, #4]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 0203 	bic.w	r2, r2, #3
 8004880:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004886:	2b00      	cmp	r3, #0
 8004888:	d011      	beq.n	80048ae <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800488e:	4a18      	ldr	r2, [pc, #96]	; (80048f0 <HAL_SPI_IRQHandler+0x1fc>)
 8004890:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004896:	4618      	mov	r0, r3
 8004898:	f7fd fcb6 	bl	8002208 <HAL_DMA_Abort_IT>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d005      	beq.n	80048ae <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d016      	beq.n	80048e4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ba:	4a0d      	ldr	r2, [pc, #52]	; (80048f0 <HAL_SPI_IRQHandler+0x1fc>)
 80048bc:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7fd fca0 	bl	8002208 <HAL_DMA_Abort_IT>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00a      	beq.n	80048e4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80048da:	e003      	b.n	80048e4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 f827 	bl	8004930 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80048e2:	e000      	b.n	80048e6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80048e4:	bf00      	nop
    return;
 80048e6:	bf00      	nop
  }
}
 80048e8:	3720      	adds	r7, #32
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	08004af5 	.word	0x08004af5

080048f4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004950:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004952:	f7fd f9cd 	bl	8001cf0 <HAL_GetTick>
 8004956:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0320 	and.w	r3, r3, #32
 8004962:	2b20      	cmp	r3, #32
 8004964:	d03c      	beq.n	80049e0 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	685a      	ldr	r2, [r3, #4]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f022 0220 	bic.w	r2, r2, #32
 8004974:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10d      	bne.n	800499a <SPI_DMAReceiveCplt+0x56>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004986:	d108      	bne.n	800499a <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	685a      	ldr	r2, [r3, #4]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f022 0203 	bic.w	r2, r2, #3
 8004996:	605a      	str	r2, [r3, #4]
 8004998:	e007      	b.n	80049aa <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f022 0201 	bic.w	r2, r2, #1
 80049a8:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	2164      	movs	r1, #100	; 0x64
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f000 f9d4 	bl	8004d5c <SPI_EndRxTransaction>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d002      	beq.n	80049c0 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2220      	movs	r2, #32
 80049be:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d003      	beq.n	80049e0 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f7ff ffa9 	bl	8004930 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80049de:	e002      	b.n	80049e6 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f7ff ff87 	bl	80048f4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f8:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049fa:	f7fd f979 	bl	8001cf0 <HAL_GetTick>
 80049fe:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0320 	and.w	r3, r3, #32
 8004a0a:	2b20      	cmp	r3, #32
 8004a0c:	d030      	beq.n	8004a70 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	685a      	ldr	r2, [r3, #4]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 0220 	bic.w	r2, r2, #32
 8004a1c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004a1e:	68ba      	ldr	r2, [r7, #8]
 8004a20:	2164      	movs	r1, #100	; 0x64
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	f000 f9f2 	bl	8004e0c <SPI_EndRxTxTransaction>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d005      	beq.n	8004a3a <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a32:	f043 0220 	orr.w	r2, r3, #32
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	685a      	ldr	r2, [r3, #4]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f022 0203 	bic.w	r2, r2, #3
 8004a48:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d003      	beq.n	8004a70 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f7ff ff61 	bl	8004930 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004a6e:	e002      	b.n	8004a76 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f7fc fe2b 	bl	80016cc <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004a76:	3710      	adds	r7, #16
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a88:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f7ff ff3c 	bl	8004908 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004a90:	bf00      	nop
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f7ff ff38 	bl	800491c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004aac:	bf00      	nop
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	685a      	ldr	r2, [r3, #4]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f022 0203 	bic.w	r2, r2, #3
 8004ad0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ad6:	f043 0210 	orr.w	r2, r3, #16
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	f7ff ff22 	bl	8004930 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004aec:	bf00      	nop
 8004aee:	3710      	adds	r7, #16
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b00:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004b10:	68f8      	ldr	r0, [r7, #12]
 8004b12:	f7ff ff0d 	bl	8004930 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004b16:	bf00      	nop
 8004b18:	3710      	adds	r7, #16
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
	...

08004b20 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b088      	sub	sp, #32
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	603b      	str	r3, [r7, #0]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b30:	f7fd f8de 	bl	8001cf0 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b38:	1a9b      	subs	r3, r3, r2
 8004b3a:	683a      	ldr	r2, [r7, #0]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b40:	f7fd f8d6 	bl	8001cf0 <HAL_GetTick>
 8004b44:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b46:	4b39      	ldr	r3, [pc, #228]	; (8004c2c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	015b      	lsls	r3, r3, #5
 8004b4c:	0d1b      	lsrs	r3, r3, #20
 8004b4e:	69fa      	ldr	r2, [r7, #28]
 8004b50:	fb02 f303 	mul.w	r3, r2, r3
 8004b54:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b56:	e054      	b.n	8004c02 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b5e:	d050      	beq.n	8004c02 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b60:	f7fd f8c6 	bl	8001cf0 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	69fa      	ldr	r2, [r7, #28]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d902      	bls.n	8004b76 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d13d      	bne.n	8004bf2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	685a      	ldr	r2, [r3, #4]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b84:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b8e:	d111      	bne.n	8004bb4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b98:	d004      	beq.n	8004ba4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ba2:	d107      	bne.n	8004bb4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bb2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bbc:	d10f      	bne.n	8004bde <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bcc:	601a      	str	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bdc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e017      	b.n	8004c22 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	689a      	ldr	r2, [r3, #8]
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	bf0c      	ite	eq
 8004c12:	2301      	moveq	r3, #1
 8004c14:	2300      	movne	r3, #0
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	461a      	mov	r2, r3
 8004c1a:	79fb      	ldrb	r3, [r7, #7]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d19b      	bne.n	8004b58 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3720      	adds	r7, #32
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	20000000 	.word	0x20000000

08004c30 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b08a      	sub	sp, #40	; 0x28
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
 8004c3c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004c42:	f7fd f855 	bl	8001cf0 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4a:	1a9b      	subs	r3, r3, r2
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	4413      	add	r3, r2
 8004c50:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004c52:	f7fd f84d 	bl	8001cf0 <HAL_GetTick>
 8004c56:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	330c      	adds	r3, #12
 8004c5e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004c60:	4b3d      	ldr	r3, [pc, #244]	; (8004d58 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	4613      	mov	r3, r2
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	4413      	add	r3, r2
 8004c6a:	00da      	lsls	r2, r3, #3
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	0d1b      	lsrs	r3, r3, #20
 8004c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c72:	fb02 f303 	mul.w	r3, r2, r3
 8004c76:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004c78:	e060      	b.n	8004d3c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004c80:	d107      	bne.n	8004c92 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d104      	bne.n	8004c92 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004c90:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c98:	d050      	beq.n	8004d3c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c9a:	f7fd f829 	bl	8001cf0 <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	6a3b      	ldr	r3, [r7, #32]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d902      	bls.n	8004cb0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d13d      	bne.n	8004d2c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	685a      	ldr	r2, [r3, #4]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004cbe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cc8:	d111      	bne.n	8004cee <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cd2:	d004      	beq.n	8004cde <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cdc:	d107      	bne.n	8004cee <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cf6:	d10f      	bne.n	8004d18 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d06:	601a      	str	r2, [r3, #0]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d16:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e010      	b.n	8004d4e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004d32:	2300      	movs	r3, #0
 8004d34:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689a      	ldr	r2, [r3, #8]
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	4013      	ands	r3, r2
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d196      	bne.n	8004c7a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3728      	adds	r7, #40	; 0x28
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	20000000 	.word	0x20000000

08004d5c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b086      	sub	sp, #24
 8004d60:	af02      	add	r7, sp, #8
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d70:	d111      	bne.n	8004d96 <SPI_EndRxTransaction+0x3a>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d7a:	d004      	beq.n	8004d86 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d84:	d107      	bne.n	8004d96 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d94:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	9300      	str	r3, [sp, #0]
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	2180      	movs	r1, #128	; 0x80
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f7ff febd 	bl	8004b20 <SPI_WaitFlagStateUntilTimeout>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d007      	beq.n	8004dbc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004db0:	f043 0220 	orr.w	r2, r3, #32
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e023      	b.n	8004e04 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dc4:	d11d      	bne.n	8004e02 <SPI_EndRxTransaction+0xa6>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dce:	d004      	beq.n	8004dda <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dd8:	d113      	bne.n	8004e02 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f7ff ff22 	bl	8004c30 <SPI_WaitFifoStateUntilTimeout>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d007      	beq.n	8004e02 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004df6:	f043 0220 	orr.w	r2, r3, #32
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e000      	b.n	8004e04 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3710      	adds	r7, #16
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b086      	sub	sp, #24
 8004e10:	af02      	add	r7, sp, #8
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	9300      	str	r3, [sp, #0]
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f7ff ff03 	bl	8004c30 <SPI_WaitFifoStateUntilTimeout>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d007      	beq.n	8004e40 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e34:	f043 0220 	orr.w	r2, r3, #32
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e027      	b.n	8004e90 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	2200      	movs	r2, #0
 8004e48:	2180      	movs	r1, #128	; 0x80
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f7ff fe68 	bl	8004b20 <SPI_WaitFlagStateUntilTimeout>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d007      	beq.n	8004e66 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e5a:	f043 0220 	orr.w	r2, r3, #32
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e014      	b.n	8004e90 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f7ff fedc 	bl	8004c30 <SPI_WaitFifoStateUntilTimeout>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d007      	beq.n	8004e8e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e82:	f043 0220 	orr.w	r2, r3, #32
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e000      	b.n	8004e90 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e040      	b.n	8004f2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d106      	bne.n	8004ec0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7fc fda4 	bl	8001a08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2224      	movs	r2, #36	; 0x24
 8004ec4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f022 0201 	bic.w	r2, r2, #1
 8004ed4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 f8c0 	bl	800505c <UART_SetConfig>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d101      	bne.n	8004ee6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e022      	b.n	8004f2c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d002      	beq.n	8004ef4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 fb6c 	bl	80055cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685a      	ldr	r2, [r3, #4]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	689a      	ldr	r2, [r3, #8]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f042 0201 	orr.w	r2, r2, #1
 8004f22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 fbf3 	bl	8005710 <UART_CheckIdleState>
 8004f2a:	4603      	mov	r3, r0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3708      	adds	r7, #8
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b08a      	sub	sp, #40	; 0x28
 8004f38:	af02      	add	r7, sp, #8
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	603b      	str	r3, [r7, #0]
 8004f40:	4613      	mov	r3, r2
 8004f42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f48:	2b20      	cmp	r3, #32
 8004f4a:	f040 8082 	bne.w	8005052 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d002      	beq.n	8004f5a <HAL_UART_Transmit+0x26>
 8004f54:	88fb      	ldrh	r3, [r7, #6]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e07a      	b.n	8005054 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d101      	bne.n	8004f6c <HAL_UART_Transmit+0x38>
 8004f68:	2302      	movs	r3, #2
 8004f6a:	e073      	b.n	8005054 <HAL_UART_Transmit+0x120>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2221      	movs	r2, #33	; 0x21
 8004f80:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f82:	f7fc feb5 	bl	8001cf0 <HAL_GetTick>
 8004f86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	88fa      	ldrh	r2, [r7, #6]
 8004f8c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	88fa      	ldrh	r2, [r7, #6]
 8004f94:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fa0:	d108      	bne.n	8004fb4 <HAL_UART_Transmit+0x80>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d104      	bne.n	8004fb4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004faa:	2300      	movs	r3, #0
 8004fac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	61bb      	str	r3, [r7, #24]
 8004fb2:	e003      	b.n	8004fbc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004fc4:	e02d      	b.n	8005022 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	9300      	str	r3, [sp, #0]
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	2180      	movs	r1, #128	; 0x80
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f000 fbe6 	bl	80057a2 <UART_WaitOnFlagUntilTimeout>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d001      	beq.n	8004fe0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e039      	b.n	8005054 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10b      	bne.n	8004ffe <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	881a      	ldrh	r2, [r3, #0]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ff2:	b292      	uxth	r2, r2
 8004ff4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	3302      	adds	r3, #2
 8004ffa:	61bb      	str	r3, [r7, #24]
 8004ffc:	e008      	b.n	8005010 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	781a      	ldrb	r2, [r3, #0]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	b292      	uxth	r2, r2
 8005008:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	3301      	adds	r3, #1
 800500e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005016:	b29b      	uxth	r3, r3
 8005018:	3b01      	subs	r3, #1
 800501a:	b29a      	uxth	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005028:	b29b      	uxth	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1cb      	bne.n	8004fc6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	2200      	movs	r2, #0
 8005036:	2140      	movs	r1, #64	; 0x40
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f000 fbb2 	bl	80057a2 <UART_WaitOnFlagUntilTimeout>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d001      	beq.n	8005048 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e005      	b.n	8005054 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2220      	movs	r2, #32
 800504c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800504e:	2300      	movs	r3, #0
 8005050:	e000      	b.n	8005054 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005052:	2302      	movs	r3, #2
  }
}
 8005054:	4618      	mov	r0, r3
 8005056:	3720      	adds	r7, #32
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800505c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005060:	b08a      	sub	sp, #40	; 0x28
 8005062:	af00      	add	r7, sp, #0
 8005064:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005066:	2300      	movs	r3, #0
 8005068:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	689a      	ldr	r2, [r3, #8]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	431a      	orrs	r2, r3
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	431a      	orrs	r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	69db      	ldr	r3, [r3, #28]
 8005080:	4313      	orrs	r3, r2
 8005082:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	4ba4      	ldr	r3, [pc, #656]	; (800531c <UART_SetConfig+0x2c0>)
 800508c:	4013      	ands	r3, r2
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	6812      	ldr	r2, [r2, #0]
 8005092:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005094:	430b      	orrs	r3, r1
 8005096:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	68da      	ldr	r2, [r3, #12]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	430a      	orrs	r2, r1
 80050ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a99      	ldr	r2, [pc, #612]	; (8005320 <UART_SetConfig+0x2c4>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d004      	beq.n	80050c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050c4:	4313      	orrs	r3, r2
 80050c6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050d8:	430a      	orrs	r2, r1
 80050da:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a90      	ldr	r2, [pc, #576]	; (8005324 <UART_SetConfig+0x2c8>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d126      	bne.n	8005134 <UART_SetConfig+0xd8>
 80050e6:	4b90      	ldr	r3, [pc, #576]	; (8005328 <UART_SetConfig+0x2cc>)
 80050e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ec:	f003 0303 	and.w	r3, r3, #3
 80050f0:	2b03      	cmp	r3, #3
 80050f2:	d81b      	bhi.n	800512c <UART_SetConfig+0xd0>
 80050f4:	a201      	add	r2, pc, #4	; (adr r2, 80050fc <UART_SetConfig+0xa0>)
 80050f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050fa:	bf00      	nop
 80050fc:	0800510d 	.word	0x0800510d
 8005100:	0800511d 	.word	0x0800511d
 8005104:	08005115 	.word	0x08005115
 8005108:	08005125 	.word	0x08005125
 800510c:	2301      	movs	r3, #1
 800510e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005112:	e116      	b.n	8005342 <UART_SetConfig+0x2e6>
 8005114:	2302      	movs	r3, #2
 8005116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800511a:	e112      	b.n	8005342 <UART_SetConfig+0x2e6>
 800511c:	2304      	movs	r3, #4
 800511e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005122:	e10e      	b.n	8005342 <UART_SetConfig+0x2e6>
 8005124:	2308      	movs	r3, #8
 8005126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800512a:	e10a      	b.n	8005342 <UART_SetConfig+0x2e6>
 800512c:	2310      	movs	r3, #16
 800512e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005132:	e106      	b.n	8005342 <UART_SetConfig+0x2e6>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a7c      	ldr	r2, [pc, #496]	; (800532c <UART_SetConfig+0x2d0>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d138      	bne.n	80051b0 <UART_SetConfig+0x154>
 800513e:	4b7a      	ldr	r3, [pc, #488]	; (8005328 <UART_SetConfig+0x2cc>)
 8005140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005144:	f003 030c 	and.w	r3, r3, #12
 8005148:	2b0c      	cmp	r3, #12
 800514a:	d82d      	bhi.n	80051a8 <UART_SetConfig+0x14c>
 800514c:	a201      	add	r2, pc, #4	; (adr r2, 8005154 <UART_SetConfig+0xf8>)
 800514e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005152:	bf00      	nop
 8005154:	08005189 	.word	0x08005189
 8005158:	080051a9 	.word	0x080051a9
 800515c:	080051a9 	.word	0x080051a9
 8005160:	080051a9 	.word	0x080051a9
 8005164:	08005199 	.word	0x08005199
 8005168:	080051a9 	.word	0x080051a9
 800516c:	080051a9 	.word	0x080051a9
 8005170:	080051a9 	.word	0x080051a9
 8005174:	08005191 	.word	0x08005191
 8005178:	080051a9 	.word	0x080051a9
 800517c:	080051a9 	.word	0x080051a9
 8005180:	080051a9 	.word	0x080051a9
 8005184:	080051a1 	.word	0x080051a1
 8005188:	2300      	movs	r3, #0
 800518a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800518e:	e0d8      	b.n	8005342 <UART_SetConfig+0x2e6>
 8005190:	2302      	movs	r3, #2
 8005192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005196:	e0d4      	b.n	8005342 <UART_SetConfig+0x2e6>
 8005198:	2304      	movs	r3, #4
 800519a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800519e:	e0d0      	b.n	8005342 <UART_SetConfig+0x2e6>
 80051a0:	2308      	movs	r3, #8
 80051a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051a6:	e0cc      	b.n	8005342 <UART_SetConfig+0x2e6>
 80051a8:	2310      	movs	r3, #16
 80051aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ae:	e0c8      	b.n	8005342 <UART_SetConfig+0x2e6>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a5e      	ldr	r2, [pc, #376]	; (8005330 <UART_SetConfig+0x2d4>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d125      	bne.n	8005206 <UART_SetConfig+0x1aa>
 80051ba:	4b5b      	ldr	r3, [pc, #364]	; (8005328 <UART_SetConfig+0x2cc>)
 80051bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80051c4:	2b30      	cmp	r3, #48	; 0x30
 80051c6:	d016      	beq.n	80051f6 <UART_SetConfig+0x19a>
 80051c8:	2b30      	cmp	r3, #48	; 0x30
 80051ca:	d818      	bhi.n	80051fe <UART_SetConfig+0x1a2>
 80051cc:	2b20      	cmp	r3, #32
 80051ce:	d00a      	beq.n	80051e6 <UART_SetConfig+0x18a>
 80051d0:	2b20      	cmp	r3, #32
 80051d2:	d814      	bhi.n	80051fe <UART_SetConfig+0x1a2>
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d002      	beq.n	80051de <UART_SetConfig+0x182>
 80051d8:	2b10      	cmp	r3, #16
 80051da:	d008      	beq.n	80051ee <UART_SetConfig+0x192>
 80051dc:	e00f      	b.n	80051fe <UART_SetConfig+0x1a2>
 80051de:	2300      	movs	r3, #0
 80051e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051e4:	e0ad      	b.n	8005342 <UART_SetConfig+0x2e6>
 80051e6:	2302      	movs	r3, #2
 80051e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ec:	e0a9      	b.n	8005342 <UART_SetConfig+0x2e6>
 80051ee:	2304      	movs	r3, #4
 80051f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051f4:	e0a5      	b.n	8005342 <UART_SetConfig+0x2e6>
 80051f6:	2308      	movs	r3, #8
 80051f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051fc:	e0a1      	b.n	8005342 <UART_SetConfig+0x2e6>
 80051fe:	2310      	movs	r3, #16
 8005200:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005204:	e09d      	b.n	8005342 <UART_SetConfig+0x2e6>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a4a      	ldr	r2, [pc, #296]	; (8005334 <UART_SetConfig+0x2d8>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d125      	bne.n	800525c <UART_SetConfig+0x200>
 8005210:	4b45      	ldr	r3, [pc, #276]	; (8005328 <UART_SetConfig+0x2cc>)
 8005212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005216:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800521a:	2bc0      	cmp	r3, #192	; 0xc0
 800521c:	d016      	beq.n	800524c <UART_SetConfig+0x1f0>
 800521e:	2bc0      	cmp	r3, #192	; 0xc0
 8005220:	d818      	bhi.n	8005254 <UART_SetConfig+0x1f8>
 8005222:	2b80      	cmp	r3, #128	; 0x80
 8005224:	d00a      	beq.n	800523c <UART_SetConfig+0x1e0>
 8005226:	2b80      	cmp	r3, #128	; 0x80
 8005228:	d814      	bhi.n	8005254 <UART_SetConfig+0x1f8>
 800522a:	2b00      	cmp	r3, #0
 800522c:	d002      	beq.n	8005234 <UART_SetConfig+0x1d8>
 800522e:	2b40      	cmp	r3, #64	; 0x40
 8005230:	d008      	beq.n	8005244 <UART_SetConfig+0x1e8>
 8005232:	e00f      	b.n	8005254 <UART_SetConfig+0x1f8>
 8005234:	2300      	movs	r3, #0
 8005236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800523a:	e082      	b.n	8005342 <UART_SetConfig+0x2e6>
 800523c:	2302      	movs	r3, #2
 800523e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005242:	e07e      	b.n	8005342 <UART_SetConfig+0x2e6>
 8005244:	2304      	movs	r3, #4
 8005246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800524a:	e07a      	b.n	8005342 <UART_SetConfig+0x2e6>
 800524c:	2308      	movs	r3, #8
 800524e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005252:	e076      	b.n	8005342 <UART_SetConfig+0x2e6>
 8005254:	2310      	movs	r3, #16
 8005256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800525a:	e072      	b.n	8005342 <UART_SetConfig+0x2e6>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a35      	ldr	r2, [pc, #212]	; (8005338 <UART_SetConfig+0x2dc>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d12a      	bne.n	80052bc <UART_SetConfig+0x260>
 8005266:	4b30      	ldr	r3, [pc, #192]	; (8005328 <UART_SetConfig+0x2cc>)
 8005268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800526c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005270:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005274:	d01a      	beq.n	80052ac <UART_SetConfig+0x250>
 8005276:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800527a:	d81b      	bhi.n	80052b4 <UART_SetConfig+0x258>
 800527c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005280:	d00c      	beq.n	800529c <UART_SetConfig+0x240>
 8005282:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005286:	d815      	bhi.n	80052b4 <UART_SetConfig+0x258>
 8005288:	2b00      	cmp	r3, #0
 800528a:	d003      	beq.n	8005294 <UART_SetConfig+0x238>
 800528c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005290:	d008      	beq.n	80052a4 <UART_SetConfig+0x248>
 8005292:	e00f      	b.n	80052b4 <UART_SetConfig+0x258>
 8005294:	2300      	movs	r3, #0
 8005296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800529a:	e052      	b.n	8005342 <UART_SetConfig+0x2e6>
 800529c:	2302      	movs	r3, #2
 800529e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052a2:	e04e      	b.n	8005342 <UART_SetConfig+0x2e6>
 80052a4:	2304      	movs	r3, #4
 80052a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052aa:	e04a      	b.n	8005342 <UART_SetConfig+0x2e6>
 80052ac:	2308      	movs	r3, #8
 80052ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052b2:	e046      	b.n	8005342 <UART_SetConfig+0x2e6>
 80052b4:	2310      	movs	r3, #16
 80052b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ba:	e042      	b.n	8005342 <UART_SetConfig+0x2e6>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a17      	ldr	r2, [pc, #92]	; (8005320 <UART_SetConfig+0x2c4>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d13a      	bne.n	800533c <UART_SetConfig+0x2e0>
 80052c6:	4b18      	ldr	r3, [pc, #96]	; (8005328 <UART_SetConfig+0x2cc>)
 80052c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80052d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052d4:	d01a      	beq.n	800530c <UART_SetConfig+0x2b0>
 80052d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052da:	d81b      	bhi.n	8005314 <UART_SetConfig+0x2b8>
 80052dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052e0:	d00c      	beq.n	80052fc <UART_SetConfig+0x2a0>
 80052e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052e6:	d815      	bhi.n	8005314 <UART_SetConfig+0x2b8>
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d003      	beq.n	80052f4 <UART_SetConfig+0x298>
 80052ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052f0:	d008      	beq.n	8005304 <UART_SetConfig+0x2a8>
 80052f2:	e00f      	b.n	8005314 <UART_SetConfig+0x2b8>
 80052f4:	2300      	movs	r3, #0
 80052f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052fa:	e022      	b.n	8005342 <UART_SetConfig+0x2e6>
 80052fc:	2302      	movs	r3, #2
 80052fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005302:	e01e      	b.n	8005342 <UART_SetConfig+0x2e6>
 8005304:	2304      	movs	r3, #4
 8005306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800530a:	e01a      	b.n	8005342 <UART_SetConfig+0x2e6>
 800530c:	2308      	movs	r3, #8
 800530e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005312:	e016      	b.n	8005342 <UART_SetConfig+0x2e6>
 8005314:	2310      	movs	r3, #16
 8005316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800531a:	e012      	b.n	8005342 <UART_SetConfig+0x2e6>
 800531c:	efff69f3 	.word	0xefff69f3
 8005320:	40008000 	.word	0x40008000
 8005324:	40013800 	.word	0x40013800
 8005328:	40021000 	.word	0x40021000
 800532c:	40004400 	.word	0x40004400
 8005330:	40004800 	.word	0x40004800
 8005334:	40004c00 	.word	0x40004c00
 8005338:	40005000 	.word	0x40005000
 800533c:	2310      	movs	r3, #16
 800533e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a9f      	ldr	r2, [pc, #636]	; (80055c4 <UART_SetConfig+0x568>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d17a      	bne.n	8005442 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800534c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005350:	2b08      	cmp	r3, #8
 8005352:	d824      	bhi.n	800539e <UART_SetConfig+0x342>
 8005354:	a201      	add	r2, pc, #4	; (adr r2, 800535c <UART_SetConfig+0x300>)
 8005356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800535a:	bf00      	nop
 800535c:	08005381 	.word	0x08005381
 8005360:	0800539f 	.word	0x0800539f
 8005364:	08005389 	.word	0x08005389
 8005368:	0800539f 	.word	0x0800539f
 800536c:	0800538f 	.word	0x0800538f
 8005370:	0800539f 	.word	0x0800539f
 8005374:	0800539f 	.word	0x0800539f
 8005378:	0800539f 	.word	0x0800539f
 800537c:	08005397 	.word	0x08005397
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005380:	f7fe f82e 	bl	80033e0 <HAL_RCC_GetPCLK1Freq>
 8005384:	61f8      	str	r0, [r7, #28]
        break;
 8005386:	e010      	b.n	80053aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005388:	4b8f      	ldr	r3, [pc, #572]	; (80055c8 <UART_SetConfig+0x56c>)
 800538a:	61fb      	str	r3, [r7, #28]
        break;
 800538c:	e00d      	b.n	80053aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800538e:	f7fd ff8f 	bl	80032b0 <HAL_RCC_GetSysClockFreq>
 8005392:	61f8      	str	r0, [r7, #28]
        break;
 8005394:	e009      	b.n	80053aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005396:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800539a:	61fb      	str	r3, [r7, #28]
        break;
 800539c:	e005      	b.n	80053aa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800539e:	2300      	movs	r3, #0
 80053a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80053a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f000 80fb 	beq.w	80055a8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	685a      	ldr	r2, [r3, #4]
 80053b6:	4613      	mov	r3, r2
 80053b8:	005b      	lsls	r3, r3, #1
 80053ba:	4413      	add	r3, r2
 80053bc:	69fa      	ldr	r2, [r7, #28]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d305      	bcc.n	80053ce <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80053c8:	69fa      	ldr	r2, [r7, #28]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d903      	bls.n	80053d6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80053d4:	e0e8      	b.n	80055a8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	2200      	movs	r2, #0
 80053da:	461c      	mov	r4, r3
 80053dc:	4615      	mov	r5, r2
 80053de:	f04f 0200 	mov.w	r2, #0
 80053e2:	f04f 0300 	mov.w	r3, #0
 80053e6:	022b      	lsls	r3, r5, #8
 80053e8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80053ec:	0222      	lsls	r2, r4, #8
 80053ee:	68f9      	ldr	r1, [r7, #12]
 80053f0:	6849      	ldr	r1, [r1, #4]
 80053f2:	0849      	lsrs	r1, r1, #1
 80053f4:	2000      	movs	r0, #0
 80053f6:	4688      	mov	r8, r1
 80053f8:	4681      	mov	r9, r0
 80053fa:	eb12 0a08 	adds.w	sl, r2, r8
 80053fe:	eb43 0b09 	adc.w	fp, r3, r9
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	603b      	str	r3, [r7, #0]
 800540a:	607a      	str	r2, [r7, #4]
 800540c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005410:	4650      	mov	r0, sl
 8005412:	4659      	mov	r1, fp
 8005414:	f7fb fbc8 	bl	8000ba8 <__aeabi_uldivmod>
 8005418:	4602      	mov	r2, r0
 800541a:	460b      	mov	r3, r1
 800541c:	4613      	mov	r3, r2
 800541e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005426:	d308      	bcc.n	800543a <UART_SetConfig+0x3de>
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800542e:	d204      	bcs.n	800543a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	69ba      	ldr	r2, [r7, #24]
 8005436:	60da      	str	r2, [r3, #12]
 8005438:	e0b6      	b.n	80055a8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005440:	e0b2      	b.n	80055a8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	69db      	ldr	r3, [r3, #28]
 8005446:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800544a:	d15e      	bne.n	800550a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800544c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005450:	2b08      	cmp	r3, #8
 8005452:	d828      	bhi.n	80054a6 <UART_SetConfig+0x44a>
 8005454:	a201      	add	r2, pc, #4	; (adr r2, 800545c <UART_SetConfig+0x400>)
 8005456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545a:	bf00      	nop
 800545c:	08005481 	.word	0x08005481
 8005460:	08005489 	.word	0x08005489
 8005464:	08005491 	.word	0x08005491
 8005468:	080054a7 	.word	0x080054a7
 800546c:	08005497 	.word	0x08005497
 8005470:	080054a7 	.word	0x080054a7
 8005474:	080054a7 	.word	0x080054a7
 8005478:	080054a7 	.word	0x080054a7
 800547c:	0800549f 	.word	0x0800549f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005480:	f7fd ffae 	bl	80033e0 <HAL_RCC_GetPCLK1Freq>
 8005484:	61f8      	str	r0, [r7, #28]
        break;
 8005486:	e014      	b.n	80054b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005488:	f7fd ffc0 	bl	800340c <HAL_RCC_GetPCLK2Freq>
 800548c:	61f8      	str	r0, [r7, #28]
        break;
 800548e:	e010      	b.n	80054b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005490:	4b4d      	ldr	r3, [pc, #308]	; (80055c8 <UART_SetConfig+0x56c>)
 8005492:	61fb      	str	r3, [r7, #28]
        break;
 8005494:	e00d      	b.n	80054b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005496:	f7fd ff0b 	bl	80032b0 <HAL_RCC_GetSysClockFreq>
 800549a:	61f8      	str	r0, [r7, #28]
        break;
 800549c:	e009      	b.n	80054b2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800549e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054a2:	61fb      	str	r3, [r7, #28]
        break;
 80054a4:	e005      	b.n	80054b2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80054a6:	2300      	movs	r3, #0
 80054a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80054b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d077      	beq.n	80055a8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	005a      	lsls	r2, r3, #1
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	085b      	lsrs	r3, r3, #1
 80054c2:	441a      	add	r2, r3
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054cc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	2b0f      	cmp	r3, #15
 80054d2:	d916      	bls.n	8005502 <UART_SetConfig+0x4a6>
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054da:	d212      	bcs.n	8005502 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	b29b      	uxth	r3, r3
 80054e0:	f023 030f 	bic.w	r3, r3, #15
 80054e4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	085b      	lsrs	r3, r3, #1
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	f003 0307 	and.w	r3, r3, #7
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	8afb      	ldrh	r3, [r7, #22]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	8afa      	ldrh	r2, [r7, #22]
 80054fe:	60da      	str	r2, [r3, #12]
 8005500:	e052      	b.n	80055a8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005508:	e04e      	b.n	80055a8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800550a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800550e:	2b08      	cmp	r3, #8
 8005510:	d827      	bhi.n	8005562 <UART_SetConfig+0x506>
 8005512:	a201      	add	r2, pc, #4	; (adr r2, 8005518 <UART_SetConfig+0x4bc>)
 8005514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005518:	0800553d 	.word	0x0800553d
 800551c:	08005545 	.word	0x08005545
 8005520:	0800554d 	.word	0x0800554d
 8005524:	08005563 	.word	0x08005563
 8005528:	08005553 	.word	0x08005553
 800552c:	08005563 	.word	0x08005563
 8005530:	08005563 	.word	0x08005563
 8005534:	08005563 	.word	0x08005563
 8005538:	0800555b 	.word	0x0800555b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800553c:	f7fd ff50 	bl	80033e0 <HAL_RCC_GetPCLK1Freq>
 8005540:	61f8      	str	r0, [r7, #28]
        break;
 8005542:	e014      	b.n	800556e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005544:	f7fd ff62 	bl	800340c <HAL_RCC_GetPCLK2Freq>
 8005548:	61f8      	str	r0, [r7, #28]
        break;
 800554a:	e010      	b.n	800556e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800554c:	4b1e      	ldr	r3, [pc, #120]	; (80055c8 <UART_SetConfig+0x56c>)
 800554e:	61fb      	str	r3, [r7, #28]
        break;
 8005550:	e00d      	b.n	800556e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005552:	f7fd fead 	bl	80032b0 <HAL_RCC_GetSysClockFreq>
 8005556:	61f8      	str	r0, [r7, #28]
        break;
 8005558:	e009      	b.n	800556e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800555a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800555e:	61fb      	str	r3, [r7, #28]
        break;
 8005560:	e005      	b.n	800556e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005562:	2300      	movs	r3, #0
 8005564:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800556c:	bf00      	nop
    }

    if (pclk != 0U)
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d019      	beq.n	80055a8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	085a      	lsrs	r2, r3, #1
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	441a      	add	r2, r3
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	fbb2 f3f3 	udiv	r3, r2, r3
 8005586:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	2b0f      	cmp	r3, #15
 800558c:	d909      	bls.n	80055a2 <UART_SetConfig+0x546>
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005594:	d205      	bcs.n	80055a2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	b29a      	uxth	r2, r3
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	60da      	str	r2, [r3, #12]
 80055a0:	e002      	b.n	80055a8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80055b4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3728      	adds	r7, #40	; 0x28
 80055bc:	46bd      	mov	sp, r7
 80055be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055c2:	bf00      	nop
 80055c4:	40008000 	.word	0x40008000
 80055c8:	00f42400 	.word	0x00f42400

080055cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d8:	f003 0301 	and.w	r3, r3, #1
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00a      	beq.n	80055f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	430a      	orrs	r2, r1
 80055f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fa:	f003 0302 	and.w	r3, r3, #2
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00a      	beq.n	8005618 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	430a      	orrs	r2, r1
 8005616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561c:	f003 0304 	and.w	r3, r3, #4
 8005620:	2b00      	cmp	r3, #0
 8005622:	d00a      	beq.n	800563a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	430a      	orrs	r2, r1
 8005638:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563e:	f003 0308 	and.w	r3, r3, #8
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00a      	beq.n	800565c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	430a      	orrs	r2, r1
 800565a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005660:	f003 0310 	and.w	r3, r3, #16
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00a      	beq.n	800567e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	430a      	orrs	r2, r1
 800567c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005682:	f003 0320 	and.w	r3, r3, #32
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00a      	beq.n	80056a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	430a      	orrs	r2, r1
 800569e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d01a      	beq.n	80056e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	430a      	orrs	r2, r1
 80056c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056ca:	d10a      	bne.n	80056e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	430a      	orrs	r2, r1
 80056e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00a      	beq.n	8005704 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	430a      	orrs	r2, r1
 8005702:	605a      	str	r2, [r3, #4]
  }
}
 8005704:	bf00      	nop
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b086      	sub	sp, #24
 8005714:	af02      	add	r7, sp, #8
 8005716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005720:	f7fc fae6 	bl	8001cf0 <HAL_GetTick>
 8005724:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0308 	and.w	r3, r3, #8
 8005730:	2b08      	cmp	r3, #8
 8005732:	d10e      	bne.n	8005752 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005734:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005738:	9300      	str	r3, [sp, #0]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f82d 	bl	80057a2 <UART_WaitOnFlagUntilTimeout>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d001      	beq.n	8005752 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e023      	b.n	800579a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0304 	and.w	r3, r3, #4
 800575c:	2b04      	cmp	r3, #4
 800575e:	d10e      	bne.n	800577e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005760:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005764:	9300      	str	r3, [sp, #0]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2200      	movs	r2, #0
 800576a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f817 	bl	80057a2 <UART_WaitOnFlagUntilTimeout>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d001      	beq.n	800577e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e00d      	b.n	800579a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2220      	movs	r2, #32
 8005782:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2220      	movs	r2, #32
 8005788:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b09c      	sub	sp, #112	; 0x70
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	60f8      	str	r0, [r7, #12]
 80057aa:	60b9      	str	r1, [r7, #8]
 80057ac:	603b      	str	r3, [r7, #0]
 80057ae:	4613      	mov	r3, r2
 80057b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057b2:	e0a5      	b.n	8005900 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ba:	f000 80a1 	beq.w	8005900 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057be:	f7fc fa97 	bl	8001cf0 <HAL_GetTick>
 80057c2:	4602      	mov	r2, r0
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d302      	bcc.n	80057d4 <UART_WaitOnFlagUntilTimeout+0x32>
 80057ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d13e      	bne.n	8005852 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057dc:	e853 3f00 	ldrex	r3, [r3]
 80057e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80057e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057e8:	667b      	str	r3, [r7, #100]	; 0x64
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	461a      	mov	r2, r3
 80057f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057f4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80057f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80057fa:	e841 2300 	strex	r3, r2, [r1]
 80057fe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005800:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1e6      	bne.n	80057d4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	3308      	adds	r3, #8
 800580c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005810:	e853 3f00 	ldrex	r3, [r3]
 8005814:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005818:	f023 0301 	bic.w	r3, r3, #1
 800581c:	663b      	str	r3, [r7, #96]	; 0x60
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	3308      	adds	r3, #8
 8005824:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005826:	64ba      	str	r2, [r7, #72]	; 0x48
 8005828:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800582c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800582e:	e841 2300 	strex	r3, r2, [r1]
 8005832:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1e5      	bne.n	8005806 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2220      	movs	r2, #32
 800583e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2220      	movs	r2, #32
 8005844:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e067      	b.n	8005922 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0304 	and.w	r3, r3, #4
 800585c:	2b00      	cmp	r3, #0
 800585e:	d04f      	beq.n	8005900 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	69db      	ldr	r3, [r3, #28]
 8005866:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800586a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800586e:	d147      	bne.n	8005900 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005878:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005882:	e853 3f00 	ldrex	r3, [r3]
 8005886:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800588e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	461a      	mov	r2, r3
 8005896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005898:	637b      	str	r3, [r7, #52]	; 0x34
 800589a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800589e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058a0:	e841 2300 	strex	r3, r2, [r1]
 80058a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80058a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d1e6      	bne.n	800587a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	3308      	adds	r3, #8
 80058b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	e853 3f00 	ldrex	r3, [r3]
 80058ba:	613b      	str	r3, [r7, #16]
   return(result);
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	f023 0301 	bic.w	r3, r3, #1
 80058c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	3308      	adds	r3, #8
 80058ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80058cc:	623a      	str	r2, [r7, #32]
 80058ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d0:	69f9      	ldr	r1, [r7, #28]
 80058d2:	6a3a      	ldr	r2, [r7, #32]
 80058d4:	e841 2300 	strex	r3, r2, [r1]
 80058d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1e5      	bne.n	80058ac <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2220      	movs	r2, #32
 80058e4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2220      	movs	r2, #32
 80058ea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2220      	movs	r2, #32
 80058f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e010      	b.n	8005922 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	69da      	ldr	r2, [r3, #28]
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	4013      	ands	r3, r2
 800590a:	68ba      	ldr	r2, [r7, #8]
 800590c:	429a      	cmp	r2, r3
 800590e:	bf0c      	ite	eq
 8005910:	2301      	moveq	r3, #1
 8005912:	2300      	movne	r3, #0
 8005914:	b2db      	uxtb	r3, r3
 8005916:	461a      	mov	r2, r3
 8005918:	79fb      	ldrb	r3, [r7, #7]
 800591a:	429a      	cmp	r2, r3
 800591c:	f43f af4a 	beq.w	80057b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3770      	adds	r7, #112	; 0x70
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
	...

0800592c <__errno>:
 800592c:	4b01      	ldr	r3, [pc, #4]	; (8005934 <__errno+0x8>)
 800592e:	6818      	ldr	r0, [r3, #0]
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	2000000c 	.word	0x2000000c

08005938 <__libc_init_array>:
 8005938:	b570      	push	{r4, r5, r6, lr}
 800593a:	4d0d      	ldr	r5, [pc, #52]	; (8005970 <__libc_init_array+0x38>)
 800593c:	4c0d      	ldr	r4, [pc, #52]	; (8005974 <__libc_init_array+0x3c>)
 800593e:	1b64      	subs	r4, r4, r5
 8005940:	10a4      	asrs	r4, r4, #2
 8005942:	2600      	movs	r6, #0
 8005944:	42a6      	cmp	r6, r4
 8005946:	d109      	bne.n	800595c <__libc_init_array+0x24>
 8005948:	4d0b      	ldr	r5, [pc, #44]	; (8005978 <__libc_init_array+0x40>)
 800594a:	4c0c      	ldr	r4, [pc, #48]	; (800597c <__libc_init_array+0x44>)
 800594c:	f002 ff04 	bl	8008758 <_init>
 8005950:	1b64      	subs	r4, r4, r5
 8005952:	10a4      	asrs	r4, r4, #2
 8005954:	2600      	movs	r6, #0
 8005956:	42a6      	cmp	r6, r4
 8005958:	d105      	bne.n	8005966 <__libc_init_array+0x2e>
 800595a:	bd70      	pop	{r4, r5, r6, pc}
 800595c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005960:	4798      	blx	r3
 8005962:	3601      	adds	r6, #1
 8005964:	e7ee      	b.n	8005944 <__libc_init_array+0xc>
 8005966:	f855 3b04 	ldr.w	r3, [r5], #4
 800596a:	4798      	blx	r3
 800596c:	3601      	adds	r6, #1
 800596e:	e7f2      	b.n	8005956 <__libc_init_array+0x1e>
 8005970:	08008bfc 	.word	0x08008bfc
 8005974:	08008bfc 	.word	0x08008bfc
 8005978:	08008bfc 	.word	0x08008bfc
 800597c:	08008c00 	.word	0x08008c00

08005980 <memset>:
 8005980:	4402      	add	r2, r0
 8005982:	4603      	mov	r3, r0
 8005984:	4293      	cmp	r3, r2
 8005986:	d100      	bne.n	800598a <memset+0xa>
 8005988:	4770      	bx	lr
 800598a:	f803 1b01 	strb.w	r1, [r3], #1
 800598e:	e7f9      	b.n	8005984 <memset+0x4>

08005990 <__cvt>:
 8005990:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005994:	ec55 4b10 	vmov	r4, r5, d0
 8005998:	2d00      	cmp	r5, #0
 800599a:	460e      	mov	r6, r1
 800599c:	4619      	mov	r1, r3
 800599e:	462b      	mov	r3, r5
 80059a0:	bfbb      	ittet	lt
 80059a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80059a6:	461d      	movlt	r5, r3
 80059a8:	2300      	movge	r3, #0
 80059aa:	232d      	movlt	r3, #45	; 0x2d
 80059ac:	700b      	strb	r3, [r1, #0]
 80059ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059b0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80059b4:	4691      	mov	r9, r2
 80059b6:	f023 0820 	bic.w	r8, r3, #32
 80059ba:	bfbc      	itt	lt
 80059bc:	4622      	movlt	r2, r4
 80059be:	4614      	movlt	r4, r2
 80059c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80059c4:	d005      	beq.n	80059d2 <__cvt+0x42>
 80059c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80059ca:	d100      	bne.n	80059ce <__cvt+0x3e>
 80059cc:	3601      	adds	r6, #1
 80059ce:	2102      	movs	r1, #2
 80059d0:	e000      	b.n	80059d4 <__cvt+0x44>
 80059d2:	2103      	movs	r1, #3
 80059d4:	ab03      	add	r3, sp, #12
 80059d6:	9301      	str	r3, [sp, #4]
 80059d8:	ab02      	add	r3, sp, #8
 80059da:	9300      	str	r3, [sp, #0]
 80059dc:	ec45 4b10 	vmov	d0, r4, r5
 80059e0:	4653      	mov	r3, sl
 80059e2:	4632      	mov	r2, r6
 80059e4:	f000 fcec 	bl	80063c0 <_dtoa_r>
 80059e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80059ec:	4607      	mov	r7, r0
 80059ee:	d102      	bne.n	80059f6 <__cvt+0x66>
 80059f0:	f019 0f01 	tst.w	r9, #1
 80059f4:	d022      	beq.n	8005a3c <__cvt+0xac>
 80059f6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80059fa:	eb07 0906 	add.w	r9, r7, r6
 80059fe:	d110      	bne.n	8005a22 <__cvt+0x92>
 8005a00:	783b      	ldrb	r3, [r7, #0]
 8005a02:	2b30      	cmp	r3, #48	; 0x30
 8005a04:	d10a      	bne.n	8005a1c <__cvt+0x8c>
 8005a06:	2200      	movs	r2, #0
 8005a08:	2300      	movs	r3, #0
 8005a0a:	4620      	mov	r0, r4
 8005a0c:	4629      	mov	r1, r5
 8005a0e:	f7fb f85b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a12:	b918      	cbnz	r0, 8005a1c <__cvt+0x8c>
 8005a14:	f1c6 0601 	rsb	r6, r6, #1
 8005a18:	f8ca 6000 	str.w	r6, [sl]
 8005a1c:	f8da 3000 	ldr.w	r3, [sl]
 8005a20:	4499      	add	r9, r3
 8005a22:	2200      	movs	r2, #0
 8005a24:	2300      	movs	r3, #0
 8005a26:	4620      	mov	r0, r4
 8005a28:	4629      	mov	r1, r5
 8005a2a:	f7fb f84d 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a2e:	b108      	cbz	r0, 8005a34 <__cvt+0xa4>
 8005a30:	f8cd 900c 	str.w	r9, [sp, #12]
 8005a34:	2230      	movs	r2, #48	; 0x30
 8005a36:	9b03      	ldr	r3, [sp, #12]
 8005a38:	454b      	cmp	r3, r9
 8005a3a:	d307      	bcc.n	8005a4c <__cvt+0xbc>
 8005a3c:	9b03      	ldr	r3, [sp, #12]
 8005a3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a40:	1bdb      	subs	r3, r3, r7
 8005a42:	4638      	mov	r0, r7
 8005a44:	6013      	str	r3, [r2, #0]
 8005a46:	b004      	add	sp, #16
 8005a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a4c:	1c59      	adds	r1, r3, #1
 8005a4e:	9103      	str	r1, [sp, #12]
 8005a50:	701a      	strb	r2, [r3, #0]
 8005a52:	e7f0      	b.n	8005a36 <__cvt+0xa6>

08005a54 <__exponent>:
 8005a54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a56:	4603      	mov	r3, r0
 8005a58:	2900      	cmp	r1, #0
 8005a5a:	bfb8      	it	lt
 8005a5c:	4249      	neglt	r1, r1
 8005a5e:	f803 2b02 	strb.w	r2, [r3], #2
 8005a62:	bfb4      	ite	lt
 8005a64:	222d      	movlt	r2, #45	; 0x2d
 8005a66:	222b      	movge	r2, #43	; 0x2b
 8005a68:	2909      	cmp	r1, #9
 8005a6a:	7042      	strb	r2, [r0, #1]
 8005a6c:	dd2a      	ble.n	8005ac4 <__exponent+0x70>
 8005a6e:	f10d 0407 	add.w	r4, sp, #7
 8005a72:	46a4      	mov	ip, r4
 8005a74:	270a      	movs	r7, #10
 8005a76:	46a6      	mov	lr, r4
 8005a78:	460a      	mov	r2, r1
 8005a7a:	fb91 f6f7 	sdiv	r6, r1, r7
 8005a7e:	fb07 1516 	mls	r5, r7, r6, r1
 8005a82:	3530      	adds	r5, #48	; 0x30
 8005a84:	2a63      	cmp	r2, #99	; 0x63
 8005a86:	f104 34ff 	add.w	r4, r4, #4294967295
 8005a8a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005a8e:	4631      	mov	r1, r6
 8005a90:	dcf1      	bgt.n	8005a76 <__exponent+0x22>
 8005a92:	3130      	adds	r1, #48	; 0x30
 8005a94:	f1ae 0502 	sub.w	r5, lr, #2
 8005a98:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005a9c:	1c44      	adds	r4, r0, #1
 8005a9e:	4629      	mov	r1, r5
 8005aa0:	4561      	cmp	r1, ip
 8005aa2:	d30a      	bcc.n	8005aba <__exponent+0x66>
 8005aa4:	f10d 0209 	add.w	r2, sp, #9
 8005aa8:	eba2 020e 	sub.w	r2, r2, lr
 8005aac:	4565      	cmp	r5, ip
 8005aae:	bf88      	it	hi
 8005ab0:	2200      	movhi	r2, #0
 8005ab2:	4413      	add	r3, r2
 8005ab4:	1a18      	subs	r0, r3, r0
 8005ab6:	b003      	add	sp, #12
 8005ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005aba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005abe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005ac2:	e7ed      	b.n	8005aa0 <__exponent+0x4c>
 8005ac4:	2330      	movs	r3, #48	; 0x30
 8005ac6:	3130      	adds	r1, #48	; 0x30
 8005ac8:	7083      	strb	r3, [r0, #2]
 8005aca:	70c1      	strb	r1, [r0, #3]
 8005acc:	1d03      	adds	r3, r0, #4
 8005ace:	e7f1      	b.n	8005ab4 <__exponent+0x60>

08005ad0 <_printf_float>:
 8005ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ad4:	ed2d 8b02 	vpush	{d8}
 8005ad8:	b08d      	sub	sp, #52	; 0x34
 8005ada:	460c      	mov	r4, r1
 8005adc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005ae0:	4616      	mov	r6, r2
 8005ae2:	461f      	mov	r7, r3
 8005ae4:	4605      	mov	r5, r0
 8005ae6:	f001 fa59 	bl	8006f9c <_localeconv_r>
 8005aea:	f8d0 a000 	ldr.w	sl, [r0]
 8005aee:	4650      	mov	r0, sl
 8005af0:	f7fa fb6e 	bl	80001d0 <strlen>
 8005af4:	2300      	movs	r3, #0
 8005af6:	930a      	str	r3, [sp, #40]	; 0x28
 8005af8:	6823      	ldr	r3, [r4, #0]
 8005afa:	9305      	str	r3, [sp, #20]
 8005afc:	f8d8 3000 	ldr.w	r3, [r8]
 8005b00:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005b04:	3307      	adds	r3, #7
 8005b06:	f023 0307 	bic.w	r3, r3, #7
 8005b0a:	f103 0208 	add.w	r2, r3, #8
 8005b0e:	f8c8 2000 	str.w	r2, [r8]
 8005b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b16:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005b1a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005b1e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005b22:	9307      	str	r3, [sp, #28]
 8005b24:	f8cd 8018 	str.w	r8, [sp, #24]
 8005b28:	ee08 0a10 	vmov	s16, r0
 8005b2c:	4b9f      	ldr	r3, [pc, #636]	; (8005dac <_printf_float+0x2dc>)
 8005b2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b32:	f04f 32ff 	mov.w	r2, #4294967295
 8005b36:	f7fa fff9 	bl	8000b2c <__aeabi_dcmpun>
 8005b3a:	bb88      	cbnz	r0, 8005ba0 <_printf_float+0xd0>
 8005b3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b40:	4b9a      	ldr	r3, [pc, #616]	; (8005dac <_printf_float+0x2dc>)
 8005b42:	f04f 32ff 	mov.w	r2, #4294967295
 8005b46:	f7fa ffd3 	bl	8000af0 <__aeabi_dcmple>
 8005b4a:	bb48      	cbnz	r0, 8005ba0 <_printf_float+0xd0>
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	2300      	movs	r3, #0
 8005b50:	4640      	mov	r0, r8
 8005b52:	4649      	mov	r1, r9
 8005b54:	f7fa ffc2 	bl	8000adc <__aeabi_dcmplt>
 8005b58:	b110      	cbz	r0, 8005b60 <_printf_float+0x90>
 8005b5a:	232d      	movs	r3, #45	; 0x2d
 8005b5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b60:	4b93      	ldr	r3, [pc, #588]	; (8005db0 <_printf_float+0x2e0>)
 8005b62:	4894      	ldr	r0, [pc, #592]	; (8005db4 <_printf_float+0x2e4>)
 8005b64:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005b68:	bf94      	ite	ls
 8005b6a:	4698      	movls	r8, r3
 8005b6c:	4680      	movhi	r8, r0
 8005b6e:	2303      	movs	r3, #3
 8005b70:	6123      	str	r3, [r4, #16]
 8005b72:	9b05      	ldr	r3, [sp, #20]
 8005b74:	f023 0204 	bic.w	r2, r3, #4
 8005b78:	6022      	str	r2, [r4, #0]
 8005b7a:	f04f 0900 	mov.w	r9, #0
 8005b7e:	9700      	str	r7, [sp, #0]
 8005b80:	4633      	mov	r3, r6
 8005b82:	aa0b      	add	r2, sp, #44	; 0x2c
 8005b84:	4621      	mov	r1, r4
 8005b86:	4628      	mov	r0, r5
 8005b88:	f000 f9d8 	bl	8005f3c <_printf_common>
 8005b8c:	3001      	adds	r0, #1
 8005b8e:	f040 8090 	bne.w	8005cb2 <_printf_float+0x1e2>
 8005b92:	f04f 30ff 	mov.w	r0, #4294967295
 8005b96:	b00d      	add	sp, #52	; 0x34
 8005b98:	ecbd 8b02 	vpop	{d8}
 8005b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ba0:	4642      	mov	r2, r8
 8005ba2:	464b      	mov	r3, r9
 8005ba4:	4640      	mov	r0, r8
 8005ba6:	4649      	mov	r1, r9
 8005ba8:	f7fa ffc0 	bl	8000b2c <__aeabi_dcmpun>
 8005bac:	b140      	cbz	r0, 8005bc0 <_printf_float+0xf0>
 8005bae:	464b      	mov	r3, r9
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	bfbc      	itt	lt
 8005bb4:	232d      	movlt	r3, #45	; 0x2d
 8005bb6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005bba:	487f      	ldr	r0, [pc, #508]	; (8005db8 <_printf_float+0x2e8>)
 8005bbc:	4b7f      	ldr	r3, [pc, #508]	; (8005dbc <_printf_float+0x2ec>)
 8005bbe:	e7d1      	b.n	8005b64 <_printf_float+0x94>
 8005bc0:	6863      	ldr	r3, [r4, #4]
 8005bc2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005bc6:	9206      	str	r2, [sp, #24]
 8005bc8:	1c5a      	adds	r2, r3, #1
 8005bca:	d13f      	bne.n	8005c4c <_printf_float+0x17c>
 8005bcc:	2306      	movs	r3, #6
 8005bce:	6063      	str	r3, [r4, #4]
 8005bd0:	9b05      	ldr	r3, [sp, #20]
 8005bd2:	6861      	ldr	r1, [r4, #4]
 8005bd4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005bd8:	2300      	movs	r3, #0
 8005bda:	9303      	str	r3, [sp, #12]
 8005bdc:	ab0a      	add	r3, sp, #40	; 0x28
 8005bde:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005be2:	ab09      	add	r3, sp, #36	; 0x24
 8005be4:	ec49 8b10 	vmov	d0, r8, r9
 8005be8:	9300      	str	r3, [sp, #0]
 8005bea:	6022      	str	r2, [r4, #0]
 8005bec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005bf0:	4628      	mov	r0, r5
 8005bf2:	f7ff fecd 	bl	8005990 <__cvt>
 8005bf6:	9b06      	ldr	r3, [sp, #24]
 8005bf8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005bfa:	2b47      	cmp	r3, #71	; 0x47
 8005bfc:	4680      	mov	r8, r0
 8005bfe:	d108      	bne.n	8005c12 <_printf_float+0x142>
 8005c00:	1cc8      	adds	r0, r1, #3
 8005c02:	db02      	blt.n	8005c0a <_printf_float+0x13a>
 8005c04:	6863      	ldr	r3, [r4, #4]
 8005c06:	4299      	cmp	r1, r3
 8005c08:	dd41      	ble.n	8005c8e <_printf_float+0x1be>
 8005c0a:	f1ab 0b02 	sub.w	fp, fp, #2
 8005c0e:	fa5f fb8b 	uxtb.w	fp, fp
 8005c12:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005c16:	d820      	bhi.n	8005c5a <_printf_float+0x18a>
 8005c18:	3901      	subs	r1, #1
 8005c1a:	465a      	mov	r2, fp
 8005c1c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005c20:	9109      	str	r1, [sp, #36]	; 0x24
 8005c22:	f7ff ff17 	bl	8005a54 <__exponent>
 8005c26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c28:	1813      	adds	r3, r2, r0
 8005c2a:	2a01      	cmp	r2, #1
 8005c2c:	4681      	mov	r9, r0
 8005c2e:	6123      	str	r3, [r4, #16]
 8005c30:	dc02      	bgt.n	8005c38 <_printf_float+0x168>
 8005c32:	6822      	ldr	r2, [r4, #0]
 8005c34:	07d2      	lsls	r2, r2, #31
 8005c36:	d501      	bpl.n	8005c3c <_printf_float+0x16c>
 8005c38:	3301      	adds	r3, #1
 8005c3a:	6123      	str	r3, [r4, #16]
 8005c3c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d09c      	beq.n	8005b7e <_printf_float+0xae>
 8005c44:	232d      	movs	r3, #45	; 0x2d
 8005c46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c4a:	e798      	b.n	8005b7e <_printf_float+0xae>
 8005c4c:	9a06      	ldr	r2, [sp, #24]
 8005c4e:	2a47      	cmp	r2, #71	; 0x47
 8005c50:	d1be      	bne.n	8005bd0 <_printf_float+0x100>
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d1bc      	bne.n	8005bd0 <_printf_float+0x100>
 8005c56:	2301      	movs	r3, #1
 8005c58:	e7b9      	b.n	8005bce <_printf_float+0xfe>
 8005c5a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005c5e:	d118      	bne.n	8005c92 <_printf_float+0x1c2>
 8005c60:	2900      	cmp	r1, #0
 8005c62:	6863      	ldr	r3, [r4, #4]
 8005c64:	dd0b      	ble.n	8005c7e <_printf_float+0x1ae>
 8005c66:	6121      	str	r1, [r4, #16]
 8005c68:	b913      	cbnz	r3, 8005c70 <_printf_float+0x1a0>
 8005c6a:	6822      	ldr	r2, [r4, #0]
 8005c6c:	07d0      	lsls	r0, r2, #31
 8005c6e:	d502      	bpl.n	8005c76 <_printf_float+0x1a6>
 8005c70:	3301      	adds	r3, #1
 8005c72:	440b      	add	r3, r1
 8005c74:	6123      	str	r3, [r4, #16]
 8005c76:	65a1      	str	r1, [r4, #88]	; 0x58
 8005c78:	f04f 0900 	mov.w	r9, #0
 8005c7c:	e7de      	b.n	8005c3c <_printf_float+0x16c>
 8005c7e:	b913      	cbnz	r3, 8005c86 <_printf_float+0x1b6>
 8005c80:	6822      	ldr	r2, [r4, #0]
 8005c82:	07d2      	lsls	r2, r2, #31
 8005c84:	d501      	bpl.n	8005c8a <_printf_float+0x1ba>
 8005c86:	3302      	adds	r3, #2
 8005c88:	e7f4      	b.n	8005c74 <_printf_float+0x1a4>
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e7f2      	b.n	8005c74 <_printf_float+0x1a4>
 8005c8e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005c92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c94:	4299      	cmp	r1, r3
 8005c96:	db05      	blt.n	8005ca4 <_printf_float+0x1d4>
 8005c98:	6823      	ldr	r3, [r4, #0]
 8005c9a:	6121      	str	r1, [r4, #16]
 8005c9c:	07d8      	lsls	r0, r3, #31
 8005c9e:	d5ea      	bpl.n	8005c76 <_printf_float+0x1a6>
 8005ca0:	1c4b      	adds	r3, r1, #1
 8005ca2:	e7e7      	b.n	8005c74 <_printf_float+0x1a4>
 8005ca4:	2900      	cmp	r1, #0
 8005ca6:	bfd4      	ite	le
 8005ca8:	f1c1 0202 	rsble	r2, r1, #2
 8005cac:	2201      	movgt	r2, #1
 8005cae:	4413      	add	r3, r2
 8005cb0:	e7e0      	b.n	8005c74 <_printf_float+0x1a4>
 8005cb2:	6823      	ldr	r3, [r4, #0]
 8005cb4:	055a      	lsls	r2, r3, #21
 8005cb6:	d407      	bmi.n	8005cc8 <_printf_float+0x1f8>
 8005cb8:	6923      	ldr	r3, [r4, #16]
 8005cba:	4642      	mov	r2, r8
 8005cbc:	4631      	mov	r1, r6
 8005cbe:	4628      	mov	r0, r5
 8005cc0:	47b8      	blx	r7
 8005cc2:	3001      	adds	r0, #1
 8005cc4:	d12c      	bne.n	8005d20 <_printf_float+0x250>
 8005cc6:	e764      	b.n	8005b92 <_printf_float+0xc2>
 8005cc8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005ccc:	f240 80e0 	bls.w	8005e90 <_printf_float+0x3c0>
 8005cd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	f7fa fef6 	bl	8000ac8 <__aeabi_dcmpeq>
 8005cdc:	2800      	cmp	r0, #0
 8005cde:	d034      	beq.n	8005d4a <_printf_float+0x27a>
 8005ce0:	4a37      	ldr	r2, [pc, #220]	; (8005dc0 <_printf_float+0x2f0>)
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	4631      	mov	r1, r6
 8005ce6:	4628      	mov	r0, r5
 8005ce8:	47b8      	blx	r7
 8005cea:	3001      	adds	r0, #1
 8005cec:	f43f af51 	beq.w	8005b92 <_printf_float+0xc2>
 8005cf0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	db02      	blt.n	8005cfe <_printf_float+0x22e>
 8005cf8:	6823      	ldr	r3, [r4, #0]
 8005cfa:	07d8      	lsls	r0, r3, #31
 8005cfc:	d510      	bpl.n	8005d20 <_printf_float+0x250>
 8005cfe:	ee18 3a10 	vmov	r3, s16
 8005d02:	4652      	mov	r2, sl
 8005d04:	4631      	mov	r1, r6
 8005d06:	4628      	mov	r0, r5
 8005d08:	47b8      	blx	r7
 8005d0a:	3001      	adds	r0, #1
 8005d0c:	f43f af41 	beq.w	8005b92 <_printf_float+0xc2>
 8005d10:	f04f 0800 	mov.w	r8, #0
 8005d14:	f104 091a 	add.w	r9, r4, #26
 8005d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	4543      	cmp	r3, r8
 8005d1e:	dc09      	bgt.n	8005d34 <_printf_float+0x264>
 8005d20:	6823      	ldr	r3, [r4, #0]
 8005d22:	079b      	lsls	r3, r3, #30
 8005d24:	f100 8105 	bmi.w	8005f32 <_printf_float+0x462>
 8005d28:	68e0      	ldr	r0, [r4, #12]
 8005d2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d2c:	4298      	cmp	r0, r3
 8005d2e:	bfb8      	it	lt
 8005d30:	4618      	movlt	r0, r3
 8005d32:	e730      	b.n	8005b96 <_printf_float+0xc6>
 8005d34:	2301      	movs	r3, #1
 8005d36:	464a      	mov	r2, r9
 8005d38:	4631      	mov	r1, r6
 8005d3a:	4628      	mov	r0, r5
 8005d3c:	47b8      	blx	r7
 8005d3e:	3001      	adds	r0, #1
 8005d40:	f43f af27 	beq.w	8005b92 <_printf_float+0xc2>
 8005d44:	f108 0801 	add.w	r8, r8, #1
 8005d48:	e7e6      	b.n	8005d18 <_printf_float+0x248>
 8005d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	dc39      	bgt.n	8005dc4 <_printf_float+0x2f4>
 8005d50:	4a1b      	ldr	r2, [pc, #108]	; (8005dc0 <_printf_float+0x2f0>)
 8005d52:	2301      	movs	r3, #1
 8005d54:	4631      	mov	r1, r6
 8005d56:	4628      	mov	r0, r5
 8005d58:	47b8      	blx	r7
 8005d5a:	3001      	adds	r0, #1
 8005d5c:	f43f af19 	beq.w	8005b92 <_printf_float+0xc2>
 8005d60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d64:	4313      	orrs	r3, r2
 8005d66:	d102      	bne.n	8005d6e <_printf_float+0x29e>
 8005d68:	6823      	ldr	r3, [r4, #0]
 8005d6a:	07d9      	lsls	r1, r3, #31
 8005d6c:	d5d8      	bpl.n	8005d20 <_printf_float+0x250>
 8005d6e:	ee18 3a10 	vmov	r3, s16
 8005d72:	4652      	mov	r2, sl
 8005d74:	4631      	mov	r1, r6
 8005d76:	4628      	mov	r0, r5
 8005d78:	47b8      	blx	r7
 8005d7a:	3001      	adds	r0, #1
 8005d7c:	f43f af09 	beq.w	8005b92 <_printf_float+0xc2>
 8005d80:	f04f 0900 	mov.w	r9, #0
 8005d84:	f104 0a1a 	add.w	sl, r4, #26
 8005d88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d8a:	425b      	negs	r3, r3
 8005d8c:	454b      	cmp	r3, r9
 8005d8e:	dc01      	bgt.n	8005d94 <_printf_float+0x2c4>
 8005d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d92:	e792      	b.n	8005cba <_printf_float+0x1ea>
 8005d94:	2301      	movs	r3, #1
 8005d96:	4652      	mov	r2, sl
 8005d98:	4631      	mov	r1, r6
 8005d9a:	4628      	mov	r0, r5
 8005d9c:	47b8      	blx	r7
 8005d9e:	3001      	adds	r0, #1
 8005da0:	f43f aef7 	beq.w	8005b92 <_printf_float+0xc2>
 8005da4:	f109 0901 	add.w	r9, r9, #1
 8005da8:	e7ee      	b.n	8005d88 <_printf_float+0x2b8>
 8005daa:	bf00      	nop
 8005dac:	7fefffff 	.word	0x7fefffff
 8005db0:	08008820 	.word	0x08008820
 8005db4:	08008824 	.word	0x08008824
 8005db8:	0800882c 	.word	0x0800882c
 8005dbc:	08008828 	.word	0x08008828
 8005dc0:	08008830 	.word	0x08008830
 8005dc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005dc6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	bfa8      	it	ge
 8005dcc:	461a      	movge	r2, r3
 8005dce:	2a00      	cmp	r2, #0
 8005dd0:	4691      	mov	r9, r2
 8005dd2:	dc37      	bgt.n	8005e44 <_printf_float+0x374>
 8005dd4:	f04f 0b00 	mov.w	fp, #0
 8005dd8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ddc:	f104 021a 	add.w	r2, r4, #26
 8005de0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005de2:	9305      	str	r3, [sp, #20]
 8005de4:	eba3 0309 	sub.w	r3, r3, r9
 8005de8:	455b      	cmp	r3, fp
 8005dea:	dc33      	bgt.n	8005e54 <_printf_float+0x384>
 8005dec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005df0:	429a      	cmp	r2, r3
 8005df2:	db3b      	blt.n	8005e6c <_printf_float+0x39c>
 8005df4:	6823      	ldr	r3, [r4, #0]
 8005df6:	07da      	lsls	r2, r3, #31
 8005df8:	d438      	bmi.n	8005e6c <_printf_float+0x39c>
 8005dfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dfc:	9a05      	ldr	r2, [sp, #20]
 8005dfe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e00:	1a9a      	subs	r2, r3, r2
 8005e02:	eba3 0901 	sub.w	r9, r3, r1
 8005e06:	4591      	cmp	r9, r2
 8005e08:	bfa8      	it	ge
 8005e0a:	4691      	movge	r9, r2
 8005e0c:	f1b9 0f00 	cmp.w	r9, #0
 8005e10:	dc35      	bgt.n	8005e7e <_printf_float+0x3ae>
 8005e12:	f04f 0800 	mov.w	r8, #0
 8005e16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e1a:	f104 0a1a 	add.w	sl, r4, #26
 8005e1e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e22:	1a9b      	subs	r3, r3, r2
 8005e24:	eba3 0309 	sub.w	r3, r3, r9
 8005e28:	4543      	cmp	r3, r8
 8005e2a:	f77f af79 	ble.w	8005d20 <_printf_float+0x250>
 8005e2e:	2301      	movs	r3, #1
 8005e30:	4652      	mov	r2, sl
 8005e32:	4631      	mov	r1, r6
 8005e34:	4628      	mov	r0, r5
 8005e36:	47b8      	blx	r7
 8005e38:	3001      	adds	r0, #1
 8005e3a:	f43f aeaa 	beq.w	8005b92 <_printf_float+0xc2>
 8005e3e:	f108 0801 	add.w	r8, r8, #1
 8005e42:	e7ec      	b.n	8005e1e <_printf_float+0x34e>
 8005e44:	4613      	mov	r3, r2
 8005e46:	4631      	mov	r1, r6
 8005e48:	4642      	mov	r2, r8
 8005e4a:	4628      	mov	r0, r5
 8005e4c:	47b8      	blx	r7
 8005e4e:	3001      	adds	r0, #1
 8005e50:	d1c0      	bne.n	8005dd4 <_printf_float+0x304>
 8005e52:	e69e      	b.n	8005b92 <_printf_float+0xc2>
 8005e54:	2301      	movs	r3, #1
 8005e56:	4631      	mov	r1, r6
 8005e58:	4628      	mov	r0, r5
 8005e5a:	9205      	str	r2, [sp, #20]
 8005e5c:	47b8      	blx	r7
 8005e5e:	3001      	adds	r0, #1
 8005e60:	f43f ae97 	beq.w	8005b92 <_printf_float+0xc2>
 8005e64:	9a05      	ldr	r2, [sp, #20]
 8005e66:	f10b 0b01 	add.w	fp, fp, #1
 8005e6a:	e7b9      	b.n	8005de0 <_printf_float+0x310>
 8005e6c:	ee18 3a10 	vmov	r3, s16
 8005e70:	4652      	mov	r2, sl
 8005e72:	4631      	mov	r1, r6
 8005e74:	4628      	mov	r0, r5
 8005e76:	47b8      	blx	r7
 8005e78:	3001      	adds	r0, #1
 8005e7a:	d1be      	bne.n	8005dfa <_printf_float+0x32a>
 8005e7c:	e689      	b.n	8005b92 <_printf_float+0xc2>
 8005e7e:	9a05      	ldr	r2, [sp, #20]
 8005e80:	464b      	mov	r3, r9
 8005e82:	4442      	add	r2, r8
 8005e84:	4631      	mov	r1, r6
 8005e86:	4628      	mov	r0, r5
 8005e88:	47b8      	blx	r7
 8005e8a:	3001      	adds	r0, #1
 8005e8c:	d1c1      	bne.n	8005e12 <_printf_float+0x342>
 8005e8e:	e680      	b.n	8005b92 <_printf_float+0xc2>
 8005e90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e92:	2a01      	cmp	r2, #1
 8005e94:	dc01      	bgt.n	8005e9a <_printf_float+0x3ca>
 8005e96:	07db      	lsls	r3, r3, #31
 8005e98:	d538      	bpl.n	8005f0c <_printf_float+0x43c>
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	4642      	mov	r2, r8
 8005e9e:	4631      	mov	r1, r6
 8005ea0:	4628      	mov	r0, r5
 8005ea2:	47b8      	blx	r7
 8005ea4:	3001      	adds	r0, #1
 8005ea6:	f43f ae74 	beq.w	8005b92 <_printf_float+0xc2>
 8005eaa:	ee18 3a10 	vmov	r3, s16
 8005eae:	4652      	mov	r2, sl
 8005eb0:	4631      	mov	r1, r6
 8005eb2:	4628      	mov	r0, r5
 8005eb4:	47b8      	blx	r7
 8005eb6:	3001      	adds	r0, #1
 8005eb8:	f43f ae6b 	beq.w	8005b92 <_printf_float+0xc2>
 8005ebc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	f7fa fe00 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ec8:	b9d8      	cbnz	r0, 8005f02 <_printf_float+0x432>
 8005eca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ecc:	f108 0201 	add.w	r2, r8, #1
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	4631      	mov	r1, r6
 8005ed4:	4628      	mov	r0, r5
 8005ed6:	47b8      	blx	r7
 8005ed8:	3001      	adds	r0, #1
 8005eda:	d10e      	bne.n	8005efa <_printf_float+0x42a>
 8005edc:	e659      	b.n	8005b92 <_printf_float+0xc2>
 8005ede:	2301      	movs	r3, #1
 8005ee0:	4652      	mov	r2, sl
 8005ee2:	4631      	mov	r1, r6
 8005ee4:	4628      	mov	r0, r5
 8005ee6:	47b8      	blx	r7
 8005ee8:	3001      	adds	r0, #1
 8005eea:	f43f ae52 	beq.w	8005b92 <_printf_float+0xc2>
 8005eee:	f108 0801 	add.w	r8, r8, #1
 8005ef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	4543      	cmp	r3, r8
 8005ef8:	dcf1      	bgt.n	8005ede <_printf_float+0x40e>
 8005efa:	464b      	mov	r3, r9
 8005efc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005f00:	e6dc      	b.n	8005cbc <_printf_float+0x1ec>
 8005f02:	f04f 0800 	mov.w	r8, #0
 8005f06:	f104 0a1a 	add.w	sl, r4, #26
 8005f0a:	e7f2      	b.n	8005ef2 <_printf_float+0x422>
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	4642      	mov	r2, r8
 8005f10:	e7df      	b.n	8005ed2 <_printf_float+0x402>
 8005f12:	2301      	movs	r3, #1
 8005f14:	464a      	mov	r2, r9
 8005f16:	4631      	mov	r1, r6
 8005f18:	4628      	mov	r0, r5
 8005f1a:	47b8      	blx	r7
 8005f1c:	3001      	adds	r0, #1
 8005f1e:	f43f ae38 	beq.w	8005b92 <_printf_float+0xc2>
 8005f22:	f108 0801 	add.w	r8, r8, #1
 8005f26:	68e3      	ldr	r3, [r4, #12]
 8005f28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005f2a:	1a5b      	subs	r3, r3, r1
 8005f2c:	4543      	cmp	r3, r8
 8005f2e:	dcf0      	bgt.n	8005f12 <_printf_float+0x442>
 8005f30:	e6fa      	b.n	8005d28 <_printf_float+0x258>
 8005f32:	f04f 0800 	mov.w	r8, #0
 8005f36:	f104 0919 	add.w	r9, r4, #25
 8005f3a:	e7f4      	b.n	8005f26 <_printf_float+0x456>

08005f3c <_printf_common>:
 8005f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f40:	4616      	mov	r6, r2
 8005f42:	4699      	mov	r9, r3
 8005f44:	688a      	ldr	r2, [r1, #8]
 8005f46:	690b      	ldr	r3, [r1, #16]
 8005f48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	bfb8      	it	lt
 8005f50:	4613      	movlt	r3, r2
 8005f52:	6033      	str	r3, [r6, #0]
 8005f54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f58:	4607      	mov	r7, r0
 8005f5a:	460c      	mov	r4, r1
 8005f5c:	b10a      	cbz	r2, 8005f62 <_printf_common+0x26>
 8005f5e:	3301      	adds	r3, #1
 8005f60:	6033      	str	r3, [r6, #0]
 8005f62:	6823      	ldr	r3, [r4, #0]
 8005f64:	0699      	lsls	r1, r3, #26
 8005f66:	bf42      	ittt	mi
 8005f68:	6833      	ldrmi	r3, [r6, #0]
 8005f6a:	3302      	addmi	r3, #2
 8005f6c:	6033      	strmi	r3, [r6, #0]
 8005f6e:	6825      	ldr	r5, [r4, #0]
 8005f70:	f015 0506 	ands.w	r5, r5, #6
 8005f74:	d106      	bne.n	8005f84 <_printf_common+0x48>
 8005f76:	f104 0a19 	add.w	sl, r4, #25
 8005f7a:	68e3      	ldr	r3, [r4, #12]
 8005f7c:	6832      	ldr	r2, [r6, #0]
 8005f7e:	1a9b      	subs	r3, r3, r2
 8005f80:	42ab      	cmp	r3, r5
 8005f82:	dc26      	bgt.n	8005fd2 <_printf_common+0x96>
 8005f84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f88:	1e13      	subs	r3, r2, #0
 8005f8a:	6822      	ldr	r2, [r4, #0]
 8005f8c:	bf18      	it	ne
 8005f8e:	2301      	movne	r3, #1
 8005f90:	0692      	lsls	r2, r2, #26
 8005f92:	d42b      	bmi.n	8005fec <_printf_common+0xb0>
 8005f94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f98:	4649      	mov	r1, r9
 8005f9a:	4638      	mov	r0, r7
 8005f9c:	47c0      	blx	r8
 8005f9e:	3001      	adds	r0, #1
 8005fa0:	d01e      	beq.n	8005fe0 <_printf_common+0xa4>
 8005fa2:	6823      	ldr	r3, [r4, #0]
 8005fa4:	68e5      	ldr	r5, [r4, #12]
 8005fa6:	6832      	ldr	r2, [r6, #0]
 8005fa8:	f003 0306 	and.w	r3, r3, #6
 8005fac:	2b04      	cmp	r3, #4
 8005fae:	bf08      	it	eq
 8005fb0:	1aad      	subeq	r5, r5, r2
 8005fb2:	68a3      	ldr	r3, [r4, #8]
 8005fb4:	6922      	ldr	r2, [r4, #16]
 8005fb6:	bf0c      	ite	eq
 8005fb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fbc:	2500      	movne	r5, #0
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	bfc4      	itt	gt
 8005fc2:	1a9b      	subgt	r3, r3, r2
 8005fc4:	18ed      	addgt	r5, r5, r3
 8005fc6:	2600      	movs	r6, #0
 8005fc8:	341a      	adds	r4, #26
 8005fca:	42b5      	cmp	r5, r6
 8005fcc:	d11a      	bne.n	8006004 <_printf_common+0xc8>
 8005fce:	2000      	movs	r0, #0
 8005fd0:	e008      	b.n	8005fe4 <_printf_common+0xa8>
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	4652      	mov	r2, sl
 8005fd6:	4649      	mov	r1, r9
 8005fd8:	4638      	mov	r0, r7
 8005fda:	47c0      	blx	r8
 8005fdc:	3001      	adds	r0, #1
 8005fde:	d103      	bne.n	8005fe8 <_printf_common+0xac>
 8005fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fe8:	3501      	adds	r5, #1
 8005fea:	e7c6      	b.n	8005f7a <_printf_common+0x3e>
 8005fec:	18e1      	adds	r1, r4, r3
 8005fee:	1c5a      	adds	r2, r3, #1
 8005ff0:	2030      	movs	r0, #48	; 0x30
 8005ff2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ff6:	4422      	add	r2, r4
 8005ff8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ffc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006000:	3302      	adds	r3, #2
 8006002:	e7c7      	b.n	8005f94 <_printf_common+0x58>
 8006004:	2301      	movs	r3, #1
 8006006:	4622      	mov	r2, r4
 8006008:	4649      	mov	r1, r9
 800600a:	4638      	mov	r0, r7
 800600c:	47c0      	blx	r8
 800600e:	3001      	adds	r0, #1
 8006010:	d0e6      	beq.n	8005fe0 <_printf_common+0xa4>
 8006012:	3601      	adds	r6, #1
 8006014:	e7d9      	b.n	8005fca <_printf_common+0x8e>
	...

08006018 <_printf_i>:
 8006018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800601c:	7e0f      	ldrb	r7, [r1, #24]
 800601e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006020:	2f78      	cmp	r7, #120	; 0x78
 8006022:	4691      	mov	r9, r2
 8006024:	4680      	mov	r8, r0
 8006026:	460c      	mov	r4, r1
 8006028:	469a      	mov	sl, r3
 800602a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800602e:	d807      	bhi.n	8006040 <_printf_i+0x28>
 8006030:	2f62      	cmp	r7, #98	; 0x62
 8006032:	d80a      	bhi.n	800604a <_printf_i+0x32>
 8006034:	2f00      	cmp	r7, #0
 8006036:	f000 80d8 	beq.w	80061ea <_printf_i+0x1d2>
 800603a:	2f58      	cmp	r7, #88	; 0x58
 800603c:	f000 80a3 	beq.w	8006186 <_printf_i+0x16e>
 8006040:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006044:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006048:	e03a      	b.n	80060c0 <_printf_i+0xa8>
 800604a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800604e:	2b15      	cmp	r3, #21
 8006050:	d8f6      	bhi.n	8006040 <_printf_i+0x28>
 8006052:	a101      	add	r1, pc, #4	; (adr r1, 8006058 <_printf_i+0x40>)
 8006054:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006058:	080060b1 	.word	0x080060b1
 800605c:	080060c5 	.word	0x080060c5
 8006060:	08006041 	.word	0x08006041
 8006064:	08006041 	.word	0x08006041
 8006068:	08006041 	.word	0x08006041
 800606c:	08006041 	.word	0x08006041
 8006070:	080060c5 	.word	0x080060c5
 8006074:	08006041 	.word	0x08006041
 8006078:	08006041 	.word	0x08006041
 800607c:	08006041 	.word	0x08006041
 8006080:	08006041 	.word	0x08006041
 8006084:	080061d1 	.word	0x080061d1
 8006088:	080060f5 	.word	0x080060f5
 800608c:	080061b3 	.word	0x080061b3
 8006090:	08006041 	.word	0x08006041
 8006094:	08006041 	.word	0x08006041
 8006098:	080061f3 	.word	0x080061f3
 800609c:	08006041 	.word	0x08006041
 80060a0:	080060f5 	.word	0x080060f5
 80060a4:	08006041 	.word	0x08006041
 80060a8:	08006041 	.word	0x08006041
 80060ac:	080061bb 	.word	0x080061bb
 80060b0:	682b      	ldr	r3, [r5, #0]
 80060b2:	1d1a      	adds	r2, r3, #4
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	602a      	str	r2, [r5, #0]
 80060b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060c0:	2301      	movs	r3, #1
 80060c2:	e0a3      	b.n	800620c <_printf_i+0x1f4>
 80060c4:	6820      	ldr	r0, [r4, #0]
 80060c6:	6829      	ldr	r1, [r5, #0]
 80060c8:	0606      	lsls	r6, r0, #24
 80060ca:	f101 0304 	add.w	r3, r1, #4
 80060ce:	d50a      	bpl.n	80060e6 <_printf_i+0xce>
 80060d0:	680e      	ldr	r6, [r1, #0]
 80060d2:	602b      	str	r3, [r5, #0]
 80060d4:	2e00      	cmp	r6, #0
 80060d6:	da03      	bge.n	80060e0 <_printf_i+0xc8>
 80060d8:	232d      	movs	r3, #45	; 0x2d
 80060da:	4276      	negs	r6, r6
 80060dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060e0:	485e      	ldr	r0, [pc, #376]	; (800625c <_printf_i+0x244>)
 80060e2:	230a      	movs	r3, #10
 80060e4:	e019      	b.n	800611a <_printf_i+0x102>
 80060e6:	680e      	ldr	r6, [r1, #0]
 80060e8:	602b      	str	r3, [r5, #0]
 80060ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80060ee:	bf18      	it	ne
 80060f0:	b236      	sxthne	r6, r6
 80060f2:	e7ef      	b.n	80060d4 <_printf_i+0xbc>
 80060f4:	682b      	ldr	r3, [r5, #0]
 80060f6:	6820      	ldr	r0, [r4, #0]
 80060f8:	1d19      	adds	r1, r3, #4
 80060fa:	6029      	str	r1, [r5, #0]
 80060fc:	0601      	lsls	r1, r0, #24
 80060fe:	d501      	bpl.n	8006104 <_printf_i+0xec>
 8006100:	681e      	ldr	r6, [r3, #0]
 8006102:	e002      	b.n	800610a <_printf_i+0xf2>
 8006104:	0646      	lsls	r6, r0, #25
 8006106:	d5fb      	bpl.n	8006100 <_printf_i+0xe8>
 8006108:	881e      	ldrh	r6, [r3, #0]
 800610a:	4854      	ldr	r0, [pc, #336]	; (800625c <_printf_i+0x244>)
 800610c:	2f6f      	cmp	r7, #111	; 0x6f
 800610e:	bf0c      	ite	eq
 8006110:	2308      	moveq	r3, #8
 8006112:	230a      	movne	r3, #10
 8006114:	2100      	movs	r1, #0
 8006116:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800611a:	6865      	ldr	r5, [r4, #4]
 800611c:	60a5      	str	r5, [r4, #8]
 800611e:	2d00      	cmp	r5, #0
 8006120:	bfa2      	ittt	ge
 8006122:	6821      	ldrge	r1, [r4, #0]
 8006124:	f021 0104 	bicge.w	r1, r1, #4
 8006128:	6021      	strge	r1, [r4, #0]
 800612a:	b90e      	cbnz	r6, 8006130 <_printf_i+0x118>
 800612c:	2d00      	cmp	r5, #0
 800612e:	d04d      	beq.n	80061cc <_printf_i+0x1b4>
 8006130:	4615      	mov	r5, r2
 8006132:	fbb6 f1f3 	udiv	r1, r6, r3
 8006136:	fb03 6711 	mls	r7, r3, r1, r6
 800613a:	5dc7      	ldrb	r7, [r0, r7]
 800613c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006140:	4637      	mov	r7, r6
 8006142:	42bb      	cmp	r3, r7
 8006144:	460e      	mov	r6, r1
 8006146:	d9f4      	bls.n	8006132 <_printf_i+0x11a>
 8006148:	2b08      	cmp	r3, #8
 800614a:	d10b      	bne.n	8006164 <_printf_i+0x14c>
 800614c:	6823      	ldr	r3, [r4, #0]
 800614e:	07de      	lsls	r6, r3, #31
 8006150:	d508      	bpl.n	8006164 <_printf_i+0x14c>
 8006152:	6923      	ldr	r3, [r4, #16]
 8006154:	6861      	ldr	r1, [r4, #4]
 8006156:	4299      	cmp	r1, r3
 8006158:	bfde      	ittt	le
 800615a:	2330      	movle	r3, #48	; 0x30
 800615c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006160:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006164:	1b52      	subs	r2, r2, r5
 8006166:	6122      	str	r2, [r4, #16]
 8006168:	f8cd a000 	str.w	sl, [sp]
 800616c:	464b      	mov	r3, r9
 800616e:	aa03      	add	r2, sp, #12
 8006170:	4621      	mov	r1, r4
 8006172:	4640      	mov	r0, r8
 8006174:	f7ff fee2 	bl	8005f3c <_printf_common>
 8006178:	3001      	adds	r0, #1
 800617a:	d14c      	bne.n	8006216 <_printf_i+0x1fe>
 800617c:	f04f 30ff 	mov.w	r0, #4294967295
 8006180:	b004      	add	sp, #16
 8006182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006186:	4835      	ldr	r0, [pc, #212]	; (800625c <_printf_i+0x244>)
 8006188:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800618c:	6829      	ldr	r1, [r5, #0]
 800618e:	6823      	ldr	r3, [r4, #0]
 8006190:	f851 6b04 	ldr.w	r6, [r1], #4
 8006194:	6029      	str	r1, [r5, #0]
 8006196:	061d      	lsls	r5, r3, #24
 8006198:	d514      	bpl.n	80061c4 <_printf_i+0x1ac>
 800619a:	07df      	lsls	r7, r3, #31
 800619c:	bf44      	itt	mi
 800619e:	f043 0320 	orrmi.w	r3, r3, #32
 80061a2:	6023      	strmi	r3, [r4, #0]
 80061a4:	b91e      	cbnz	r6, 80061ae <_printf_i+0x196>
 80061a6:	6823      	ldr	r3, [r4, #0]
 80061a8:	f023 0320 	bic.w	r3, r3, #32
 80061ac:	6023      	str	r3, [r4, #0]
 80061ae:	2310      	movs	r3, #16
 80061b0:	e7b0      	b.n	8006114 <_printf_i+0xfc>
 80061b2:	6823      	ldr	r3, [r4, #0]
 80061b4:	f043 0320 	orr.w	r3, r3, #32
 80061b8:	6023      	str	r3, [r4, #0]
 80061ba:	2378      	movs	r3, #120	; 0x78
 80061bc:	4828      	ldr	r0, [pc, #160]	; (8006260 <_printf_i+0x248>)
 80061be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80061c2:	e7e3      	b.n	800618c <_printf_i+0x174>
 80061c4:	0659      	lsls	r1, r3, #25
 80061c6:	bf48      	it	mi
 80061c8:	b2b6      	uxthmi	r6, r6
 80061ca:	e7e6      	b.n	800619a <_printf_i+0x182>
 80061cc:	4615      	mov	r5, r2
 80061ce:	e7bb      	b.n	8006148 <_printf_i+0x130>
 80061d0:	682b      	ldr	r3, [r5, #0]
 80061d2:	6826      	ldr	r6, [r4, #0]
 80061d4:	6961      	ldr	r1, [r4, #20]
 80061d6:	1d18      	adds	r0, r3, #4
 80061d8:	6028      	str	r0, [r5, #0]
 80061da:	0635      	lsls	r5, r6, #24
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	d501      	bpl.n	80061e4 <_printf_i+0x1cc>
 80061e0:	6019      	str	r1, [r3, #0]
 80061e2:	e002      	b.n	80061ea <_printf_i+0x1d2>
 80061e4:	0670      	lsls	r0, r6, #25
 80061e6:	d5fb      	bpl.n	80061e0 <_printf_i+0x1c8>
 80061e8:	8019      	strh	r1, [r3, #0]
 80061ea:	2300      	movs	r3, #0
 80061ec:	6123      	str	r3, [r4, #16]
 80061ee:	4615      	mov	r5, r2
 80061f0:	e7ba      	b.n	8006168 <_printf_i+0x150>
 80061f2:	682b      	ldr	r3, [r5, #0]
 80061f4:	1d1a      	adds	r2, r3, #4
 80061f6:	602a      	str	r2, [r5, #0]
 80061f8:	681d      	ldr	r5, [r3, #0]
 80061fa:	6862      	ldr	r2, [r4, #4]
 80061fc:	2100      	movs	r1, #0
 80061fe:	4628      	mov	r0, r5
 8006200:	f7f9 ffee 	bl	80001e0 <memchr>
 8006204:	b108      	cbz	r0, 800620a <_printf_i+0x1f2>
 8006206:	1b40      	subs	r0, r0, r5
 8006208:	6060      	str	r0, [r4, #4]
 800620a:	6863      	ldr	r3, [r4, #4]
 800620c:	6123      	str	r3, [r4, #16]
 800620e:	2300      	movs	r3, #0
 8006210:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006214:	e7a8      	b.n	8006168 <_printf_i+0x150>
 8006216:	6923      	ldr	r3, [r4, #16]
 8006218:	462a      	mov	r2, r5
 800621a:	4649      	mov	r1, r9
 800621c:	4640      	mov	r0, r8
 800621e:	47d0      	blx	sl
 8006220:	3001      	adds	r0, #1
 8006222:	d0ab      	beq.n	800617c <_printf_i+0x164>
 8006224:	6823      	ldr	r3, [r4, #0]
 8006226:	079b      	lsls	r3, r3, #30
 8006228:	d413      	bmi.n	8006252 <_printf_i+0x23a>
 800622a:	68e0      	ldr	r0, [r4, #12]
 800622c:	9b03      	ldr	r3, [sp, #12]
 800622e:	4298      	cmp	r0, r3
 8006230:	bfb8      	it	lt
 8006232:	4618      	movlt	r0, r3
 8006234:	e7a4      	b.n	8006180 <_printf_i+0x168>
 8006236:	2301      	movs	r3, #1
 8006238:	4632      	mov	r2, r6
 800623a:	4649      	mov	r1, r9
 800623c:	4640      	mov	r0, r8
 800623e:	47d0      	blx	sl
 8006240:	3001      	adds	r0, #1
 8006242:	d09b      	beq.n	800617c <_printf_i+0x164>
 8006244:	3501      	adds	r5, #1
 8006246:	68e3      	ldr	r3, [r4, #12]
 8006248:	9903      	ldr	r1, [sp, #12]
 800624a:	1a5b      	subs	r3, r3, r1
 800624c:	42ab      	cmp	r3, r5
 800624e:	dcf2      	bgt.n	8006236 <_printf_i+0x21e>
 8006250:	e7eb      	b.n	800622a <_printf_i+0x212>
 8006252:	2500      	movs	r5, #0
 8006254:	f104 0619 	add.w	r6, r4, #25
 8006258:	e7f5      	b.n	8006246 <_printf_i+0x22e>
 800625a:	bf00      	nop
 800625c:	08008832 	.word	0x08008832
 8006260:	08008843 	.word	0x08008843

08006264 <siprintf>:
 8006264:	b40e      	push	{r1, r2, r3}
 8006266:	b500      	push	{lr}
 8006268:	b09c      	sub	sp, #112	; 0x70
 800626a:	ab1d      	add	r3, sp, #116	; 0x74
 800626c:	9002      	str	r0, [sp, #8]
 800626e:	9006      	str	r0, [sp, #24]
 8006270:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006274:	4809      	ldr	r0, [pc, #36]	; (800629c <siprintf+0x38>)
 8006276:	9107      	str	r1, [sp, #28]
 8006278:	9104      	str	r1, [sp, #16]
 800627a:	4909      	ldr	r1, [pc, #36]	; (80062a0 <siprintf+0x3c>)
 800627c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006280:	9105      	str	r1, [sp, #20]
 8006282:	6800      	ldr	r0, [r0, #0]
 8006284:	9301      	str	r3, [sp, #4]
 8006286:	a902      	add	r1, sp, #8
 8006288:	f001 fb78 	bl	800797c <_svfiprintf_r>
 800628c:	9b02      	ldr	r3, [sp, #8]
 800628e:	2200      	movs	r2, #0
 8006290:	701a      	strb	r2, [r3, #0]
 8006292:	b01c      	add	sp, #112	; 0x70
 8006294:	f85d eb04 	ldr.w	lr, [sp], #4
 8006298:	b003      	add	sp, #12
 800629a:	4770      	bx	lr
 800629c:	2000000c 	.word	0x2000000c
 80062a0:	ffff0208 	.word	0xffff0208

080062a4 <quorem>:
 80062a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062a8:	6903      	ldr	r3, [r0, #16]
 80062aa:	690c      	ldr	r4, [r1, #16]
 80062ac:	42a3      	cmp	r3, r4
 80062ae:	4607      	mov	r7, r0
 80062b0:	f2c0 8081 	blt.w	80063b6 <quorem+0x112>
 80062b4:	3c01      	subs	r4, #1
 80062b6:	f101 0814 	add.w	r8, r1, #20
 80062ba:	f100 0514 	add.w	r5, r0, #20
 80062be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80062c2:	9301      	str	r3, [sp, #4]
 80062c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80062c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80062cc:	3301      	adds	r3, #1
 80062ce:	429a      	cmp	r2, r3
 80062d0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80062d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80062d8:	fbb2 f6f3 	udiv	r6, r2, r3
 80062dc:	d331      	bcc.n	8006342 <quorem+0x9e>
 80062de:	f04f 0e00 	mov.w	lr, #0
 80062e2:	4640      	mov	r0, r8
 80062e4:	46ac      	mov	ip, r5
 80062e6:	46f2      	mov	sl, lr
 80062e8:	f850 2b04 	ldr.w	r2, [r0], #4
 80062ec:	b293      	uxth	r3, r2
 80062ee:	fb06 e303 	mla	r3, r6, r3, lr
 80062f2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	ebaa 0303 	sub.w	r3, sl, r3
 80062fc:	f8dc a000 	ldr.w	sl, [ip]
 8006300:	0c12      	lsrs	r2, r2, #16
 8006302:	fa13 f38a 	uxtah	r3, r3, sl
 8006306:	fb06 e202 	mla	r2, r6, r2, lr
 800630a:	9300      	str	r3, [sp, #0]
 800630c:	9b00      	ldr	r3, [sp, #0]
 800630e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006312:	b292      	uxth	r2, r2
 8006314:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006318:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800631c:	f8bd 3000 	ldrh.w	r3, [sp]
 8006320:	4581      	cmp	r9, r0
 8006322:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006326:	f84c 3b04 	str.w	r3, [ip], #4
 800632a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800632e:	d2db      	bcs.n	80062e8 <quorem+0x44>
 8006330:	f855 300b 	ldr.w	r3, [r5, fp]
 8006334:	b92b      	cbnz	r3, 8006342 <quorem+0x9e>
 8006336:	9b01      	ldr	r3, [sp, #4]
 8006338:	3b04      	subs	r3, #4
 800633a:	429d      	cmp	r5, r3
 800633c:	461a      	mov	r2, r3
 800633e:	d32e      	bcc.n	800639e <quorem+0xfa>
 8006340:	613c      	str	r4, [r7, #16]
 8006342:	4638      	mov	r0, r7
 8006344:	f001 f8c6 	bl	80074d4 <__mcmp>
 8006348:	2800      	cmp	r0, #0
 800634a:	db24      	blt.n	8006396 <quorem+0xf2>
 800634c:	3601      	adds	r6, #1
 800634e:	4628      	mov	r0, r5
 8006350:	f04f 0c00 	mov.w	ip, #0
 8006354:	f858 2b04 	ldr.w	r2, [r8], #4
 8006358:	f8d0 e000 	ldr.w	lr, [r0]
 800635c:	b293      	uxth	r3, r2
 800635e:	ebac 0303 	sub.w	r3, ip, r3
 8006362:	0c12      	lsrs	r2, r2, #16
 8006364:	fa13 f38e 	uxtah	r3, r3, lr
 8006368:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800636c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006370:	b29b      	uxth	r3, r3
 8006372:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006376:	45c1      	cmp	r9, r8
 8006378:	f840 3b04 	str.w	r3, [r0], #4
 800637c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006380:	d2e8      	bcs.n	8006354 <quorem+0xb0>
 8006382:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006386:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800638a:	b922      	cbnz	r2, 8006396 <quorem+0xf2>
 800638c:	3b04      	subs	r3, #4
 800638e:	429d      	cmp	r5, r3
 8006390:	461a      	mov	r2, r3
 8006392:	d30a      	bcc.n	80063aa <quorem+0x106>
 8006394:	613c      	str	r4, [r7, #16]
 8006396:	4630      	mov	r0, r6
 8006398:	b003      	add	sp, #12
 800639a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800639e:	6812      	ldr	r2, [r2, #0]
 80063a0:	3b04      	subs	r3, #4
 80063a2:	2a00      	cmp	r2, #0
 80063a4:	d1cc      	bne.n	8006340 <quorem+0x9c>
 80063a6:	3c01      	subs	r4, #1
 80063a8:	e7c7      	b.n	800633a <quorem+0x96>
 80063aa:	6812      	ldr	r2, [r2, #0]
 80063ac:	3b04      	subs	r3, #4
 80063ae:	2a00      	cmp	r2, #0
 80063b0:	d1f0      	bne.n	8006394 <quorem+0xf0>
 80063b2:	3c01      	subs	r4, #1
 80063b4:	e7eb      	b.n	800638e <quorem+0xea>
 80063b6:	2000      	movs	r0, #0
 80063b8:	e7ee      	b.n	8006398 <quorem+0xf4>
 80063ba:	0000      	movs	r0, r0
 80063bc:	0000      	movs	r0, r0
	...

080063c0 <_dtoa_r>:
 80063c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063c4:	ed2d 8b04 	vpush	{d8-d9}
 80063c8:	ec57 6b10 	vmov	r6, r7, d0
 80063cc:	b093      	sub	sp, #76	; 0x4c
 80063ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80063d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80063d4:	9106      	str	r1, [sp, #24]
 80063d6:	ee10 aa10 	vmov	sl, s0
 80063da:	4604      	mov	r4, r0
 80063dc:	9209      	str	r2, [sp, #36]	; 0x24
 80063de:	930c      	str	r3, [sp, #48]	; 0x30
 80063e0:	46bb      	mov	fp, r7
 80063e2:	b975      	cbnz	r5, 8006402 <_dtoa_r+0x42>
 80063e4:	2010      	movs	r0, #16
 80063e6:	f000 fddd 	bl	8006fa4 <malloc>
 80063ea:	4602      	mov	r2, r0
 80063ec:	6260      	str	r0, [r4, #36]	; 0x24
 80063ee:	b920      	cbnz	r0, 80063fa <_dtoa_r+0x3a>
 80063f0:	4ba7      	ldr	r3, [pc, #668]	; (8006690 <_dtoa_r+0x2d0>)
 80063f2:	21ea      	movs	r1, #234	; 0xea
 80063f4:	48a7      	ldr	r0, [pc, #668]	; (8006694 <_dtoa_r+0x2d4>)
 80063f6:	f001 fbd1 	bl	8007b9c <__assert_func>
 80063fa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80063fe:	6005      	str	r5, [r0, #0]
 8006400:	60c5      	str	r5, [r0, #12]
 8006402:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006404:	6819      	ldr	r1, [r3, #0]
 8006406:	b151      	cbz	r1, 800641e <_dtoa_r+0x5e>
 8006408:	685a      	ldr	r2, [r3, #4]
 800640a:	604a      	str	r2, [r1, #4]
 800640c:	2301      	movs	r3, #1
 800640e:	4093      	lsls	r3, r2
 8006410:	608b      	str	r3, [r1, #8]
 8006412:	4620      	mov	r0, r4
 8006414:	f000 fe1c 	bl	8007050 <_Bfree>
 8006418:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800641a:	2200      	movs	r2, #0
 800641c:	601a      	str	r2, [r3, #0]
 800641e:	1e3b      	subs	r3, r7, #0
 8006420:	bfaa      	itet	ge
 8006422:	2300      	movge	r3, #0
 8006424:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006428:	f8c8 3000 	strge.w	r3, [r8]
 800642c:	4b9a      	ldr	r3, [pc, #616]	; (8006698 <_dtoa_r+0x2d8>)
 800642e:	bfbc      	itt	lt
 8006430:	2201      	movlt	r2, #1
 8006432:	f8c8 2000 	strlt.w	r2, [r8]
 8006436:	ea33 030b 	bics.w	r3, r3, fp
 800643a:	d11b      	bne.n	8006474 <_dtoa_r+0xb4>
 800643c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800643e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006442:	6013      	str	r3, [r2, #0]
 8006444:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006448:	4333      	orrs	r3, r6
 800644a:	f000 8592 	beq.w	8006f72 <_dtoa_r+0xbb2>
 800644e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006450:	b963      	cbnz	r3, 800646c <_dtoa_r+0xac>
 8006452:	4b92      	ldr	r3, [pc, #584]	; (800669c <_dtoa_r+0x2dc>)
 8006454:	e022      	b.n	800649c <_dtoa_r+0xdc>
 8006456:	4b92      	ldr	r3, [pc, #584]	; (80066a0 <_dtoa_r+0x2e0>)
 8006458:	9301      	str	r3, [sp, #4]
 800645a:	3308      	adds	r3, #8
 800645c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800645e:	6013      	str	r3, [r2, #0]
 8006460:	9801      	ldr	r0, [sp, #4]
 8006462:	b013      	add	sp, #76	; 0x4c
 8006464:	ecbd 8b04 	vpop	{d8-d9}
 8006468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800646c:	4b8b      	ldr	r3, [pc, #556]	; (800669c <_dtoa_r+0x2dc>)
 800646e:	9301      	str	r3, [sp, #4]
 8006470:	3303      	adds	r3, #3
 8006472:	e7f3      	b.n	800645c <_dtoa_r+0x9c>
 8006474:	2200      	movs	r2, #0
 8006476:	2300      	movs	r3, #0
 8006478:	4650      	mov	r0, sl
 800647a:	4659      	mov	r1, fp
 800647c:	f7fa fb24 	bl	8000ac8 <__aeabi_dcmpeq>
 8006480:	ec4b ab19 	vmov	d9, sl, fp
 8006484:	4680      	mov	r8, r0
 8006486:	b158      	cbz	r0, 80064a0 <_dtoa_r+0xe0>
 8006488:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800648a:	2301      	movs	r3, #1
 800648c:	6013      	str	r3, [r2, #0]
 800648e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006490:	2b00      	cmp	r3, #0
 8006492:	f000 856b 	beq.w	8006f6c <_dtoa_r+0xbac>
 8006496:	4883      	ldr	r0, [pc, #524]	; (80066a4 <_dtoa_r+0x2e4>)
 8006498:	6018      	str	r0, [r3, #0]
 800649a:	1e43      	subs	r3, r0, #1
 800649c:	9301      	str	r3, [sp, #4]
 800649e:	e7df      	b.n	8006460 <_dtoa_r+0xa0>
 80064a0:	ec4b ab10 	vmov	d0, sl, fp
 80064a4:	aa10      	add	r2, sp, #64	; 0x40
 80064a6:	a911      	add	r1, sp, #68	; 0x44
 80064a8:	4620      	mov	r0, r4
 80064aa:	f001 f8b9 	bl	8007620 <__d2b>
 80064ae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80064b2:	ee08 0a10 	vmov	s16, r0
 80064b6:	2d00      	cmp	r5, #0
 80064b8:	f000 8084 	beq.w	80065c4 <_dtoa_r+0x204>
 80064bc:	ee19 3a90 	vmov	r3, s19
 80064c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064c4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80064c8:	4656      	mov	r6, sl
 80064ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80064ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80064d2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80064d6:	4b74      	ldr	r3, [pc, #464]	; (80066a8 <_dtoa_r+0x2e8>)
 80064d8:	2200      	movs	r2, #0
 80064da:	4630      	mov	r0, r6
 80064dc:	4639      	mov	r1, r7
 80064de:	f7f9 fed3 	bl	8000288 <__aeabi_dsub>
 80064e2:	a365      	add	r3, pc, #404	; (adr r3, 8006678 <_dtoa_r+0x2b8>)
 80064e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e8:	f7fa f886 	bl	80005f8 <__aeabi_dmul>
 80064ec:	a364      	add	r3, pc, #400	; (adr r3, 8006680 <_dtoa_r+0x2c0>)
 80064ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f2:	f7f9 fecb 	bl	800028c <__adddf3>
 80064f6:	4606      	mov	r6, r0
 80064f8:	4628      	mov	r0, r5
 80064fa:	460f      	mov	r7, r1
 80064fc:	f7fa f812 	bl	8000524 <__aeabi_i2d>
 8006500:	a361      	add	r3, pc, #388	; (adr r3, 8006688 <_dtoa_r+0x2c8>)
 8006502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006506:	f7fa f877 	bl	80005f8 <__aeabi_dmul>
 800650a:	4602      	mov	r2, r0
 800650c:	460b      	mov	r3, r1
 800650e:	4630      	mov	r0, r6
 8006510:	4639      	mov	r1, r7
 8006512:	f7f9 febb 	bl	800028c <__adddf3>
 8006516:	4606      	mov	r6, r0
 8006518:	460f      	mov	r7, r1
 800651a:	f7fa fb1d 	bl	8000b58 <__aeabi_d2iz>
 800651e:	2200      	movs	r2, #0
 8006520:	9000      	str	r0, [sp, #0]
 8006522:	2300      	movs	r3, #0
 8006524:	4630      	mov	r0, r6
 8006526:	4639      	mov	r1, r7
 8006528:	f7fa fad8 	bl	8000adc <__aeabi_dcmplt>
 800652c:	b150      	cbz	r0, 8006544 <_dtoa_r+0x184>
 800652e:	9800      	ldr	r0, [sp, #0]
 8006530:	f7f9 fff8 	bl	8000524 <__aeabi_i2d>
 8006534:	4632      	mov	r2, r6
 8006536:	463b      	mov	r3, r7
 8006538:	f7fa fac6 	bl	8000ac8 <__aeabi_dcmpeq>
 800653c:	b910      	cbnz	r0, 8006544 <_dtoa_r+0x184>
 800653e:	9b00      	ldr	r3, [sp, #0]
 8006540:	3b01      	subs	r3, #1
 8006542:	9300      	str	r3, [sp, #0]
 8006544:	9b00      	ldr	r3, [sp, #0]
 8006546:	2b16      	cmp	r3, #22
 8006548:	d85a      	bhi.n	8006600 <_dtoa_r+0x240>
 800654a:	9a00      	ldr	r2, [sp, #0]
 800654c:	4b57      	ldr	r3, [pc, #348]	; (80066ac <_dtoa_r+0x2ec>)
 800654e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006556:	ec51 0b19 	vmov	r0, r1, d9
 800655a:	f7fa fabf 	bl	8000adc <__aeabi_dcmplt>
 800655e:	2800      	cmp	r0, #0
 8006560:	d050      	beq.n	8006604 <_dtoa_r+0x244>
 8006562:	9b00      	ldr	r3, [sp, #0]
 8006564:	3b01      	subs	r3, #1
 8006566:	9300      	str	r3, [sp, #0]
 8006568:	2300      	movs	r3, #0
 800656a:	930b      	str	r3, [sp, #44]	; 0x2c
 800656c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800656e:	1b5d      	subs	r5, r3, r5
 8006570:	1e6b      	subs	r3, r5, #1
 8006572:	9305      	str	r3, [sp, #20]
 8006574:	bf45      	ittet	mi
 8006576:	f1c5 0301 	rsbmi	r3, r5, #1
 800657a:	9304      	strmi	r3, [sp, #16]
 800657c:	2300      	movpl	r3, #0
 800657e:	2300      	movmi	r3, #0
 8006580:	bf4c      	ite	mi
 8006582:	9305      	strmi	r3, [sp, #20]
 8006584:	9304      	strpl	r3, [sp, #16]
 8006586:	9b00      	ldr	r3, [sp, #0]
 8006588:	2b00      	cmp	r3, #0
 800658a:	db3d      	blt.n	8006608 <_dtoa_r+0x248>
 800658c:	9b05      	ldr	r3, [sp, #20]
 800658e:	9a00      	ldr	r2, [sp, #0]
 8006590:	920a      	str	r2, [sp, #40]	; 0x28
 8006592:	4413      	add	r3, r2
 8006594:	9305      	str	r3, [sp, #20]
 8006596:	2300      	movs	r3, #0
 8006598:	9307      	str	r3, [sp, #28]
 800659a:	9b06      	ldr	r3, [sp, #24]
 800659c:	2b09      	cmp	r3, #9
 800659e:	f200 8089 	bhi.w	80066b4 <_dtoa_r+0x2f4>
 80065a2:	2b05      	cmp	r3, #5
 80065a4:	bfc4      	itt	gt
 80065a6:	3b04      	subgt	r3, #4
 80065a8:	9306      	strgt	r3, [sp, #24]
 80065aa:	9b06      	ldr	r3, [sp, #24]
 80065ac:	f1a3 0302 	sub.w	r3, r3, #2
 80065b0:	bfcc      	ite	gt
 80065b2:	2500      	movgt	r5, #0
 80065b4:	2501      	movle	r5, #1
 80065b6:	2b03      	cmp	r3, #3
 80065b8:	f200 8087 	bhi.w	80066ca <_dtoa_r+0x30a>
 80065bc:	e8df f003 	tbb	[pc, r3]
 80065c0:	59383a2d 	.word	0x59383a2d
 80065c4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80065c8:	441d      	add	r5, r3
 80065ca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80065ce:	2b20      	cmp	r3, #32
 80065d0:	bfc1      	itttt	gt
 80065d2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80065d6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80065da:	fa0b f303 	lslgt.w	r3, fp, r3
 80065de:	fa26 f000 	lsrgt.w	r0, r6, r0
 80065e2:	bfda      	itte	le
 80065e4:	f1c3 0320 	rsble	r3, r3, #32
 80065e8:	fa06 f003 	lslle.w	r0, r6, r3
 80065ec:	4318      	orrgt	r0, r3
 80065ee:	f7f9 ff89 	bl	8000504 <__aeabi_ui2d>
 80065f2:	2301      	movs	r3, #1
 80065f4:	4606      	mov	r6, r0
 80065f6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80065fa:	3d01      	subs	r5, #1
 80065fc:	930e      	str	r3, [sp, #56]	; 0x38
 80065fe:	e76a      	b.n	80064d6 <_dtoa_r+0x116>
 8006600:	2301      	movs	r3, #1
 8006602:	e7b2      	b.n	800656a <_dtoa_r+0x1aa>
 8006604:	900b      	str	r0, [sp, #44]	; 0x2c
 8006606:	e7b1      	b.n	800656c <_dtoa_r+0x1ac>
 8006608:	9b04      	ldr	r3, [sp, #16]
 800660a:	9a00      	ldr	r2, [sp, #0]
 800660c:	1a9b      	subs	r3, r3, r2
 800660e:	9304      	str	r3, [sp, #16]
 8006610:	4253      	negs	r3, r2
 8006612:	9307      	str	r3, [sp, #28]
 8006614:	2300      	movs	r3, #0
 8006616:	930a      	str	r3, [sp, #40]	; 0x28
 8006618:	e7bf      	b.n	800659a <_dtoa_r+0x1da>
 800661a:	2300      	movs	r3, #0
 800661c:	9308      	str	r3, [sp, #32]
 800661e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006620:	2b00      	cmp	r3, #0
 8006622:	dc55      	bgt.n	80066d0 <_dtoa_r+0x310>
 8006624:	2301      	movs	r3, #1
 8006626:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800662a:	461a      	mov	r2, r3
 800662c:	9209      	str	r2, [sp, #36]	; 0x24
 800662e:	e00c      	b.n	800664a <_dtoa_r+0x28a>
 8006630:	2301      	movs	r3, #1
 8006632:	e7f3      	b.n	800661c <_dtoa_r+0x25c>
 8006634:	2300      	movs	r3, #0
 8006636:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006638:	9308      	str	r3, [sp, #32]
 800663a:	9b00      	ldr	r3, [sp, #0]
 800663c:	4413      	add	r3, r2
 800663e:	9302      	str	r3, [sp, #8]
 8006640:	3301      	adds	r3, #1
 8006642:	2b01      	cmp	r3, #1
 8006644:	9303      	str	r3, [sp, #12]
 8006646:	bfb8      	it	lt
 8006648:	2301      	movlt	r3, #1
 800664a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800664c:	2200      	movs	r2, #0
 800664e:	6042      	str	r2, [r0, #4]
 8006650:	2204      	movs	r2, #4
 8006652:	f102 0614 	add.w	r6, r2, #20
 8006656:	429e      	cmp	r6, r3
 8006658:	6841      	ldr	r1, [r0, #4]
 800665a:	d93d      	bls.n	80066d8 <_dtoa_r+0x318>
 800665c:	4620      	mov	r0, r4
 800665e:	f000 fcb7 	bl	8006fd0 <_Balloc>
 8006662:	9001      	str	r0, [sp, #4]
 8006664:	2800      	cmp	r0, #0
 8006666:	d13b      	bne.n	80066e0 <_dtoa_r+0x320>
 8006668:	4b11      	ldr	r3, [pc, #68]	; (80066b0 <_dtoa_r+0x2f0>)
 800666a:	4602      	mov	r2, r0
 800666c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006670:	e6c0      	b.n	80063f4 <_dtoa_r+0x34>
 8006672:	2301      	movs	r3, #1
 8006674:	e7df      	b.n	8006636 <_dtoa_r+0x276>
 8006676:	bf00      	nop
 8006678:	636f4361 	.word	0x636f4361
 800667c:	3fd287a7 	.word	0x3fd287a7
 8006680:	8b60c8b3 	.word	0x8b60c8b3
 8006684:	3fc68a28 	.word	0x3fc68a28
 8006688:	509f79fb 	.word	0x509f79fb
 800668c:	3fd34413 	.word	0x3fd34413
 8006690:	08008861 	.word	0x08008861
 8006694:	08008878 	.word	0x08008878
 8006698:	7ff00000 	.word	0x7ff00000
 800669c:	0800885d 	.word	0x0800885d
 80066a0:	08008854 	.word	0x08008854
 80066a4:	08008831 	.word	0x08008831
 80066a8:	3ff80000 	.word	0x3ff80000
 80066ac:	08008968 	.word	0x08008968
 80066b0:	080088d3 	.word	0x080088d3
 80066b4:	2501      	movs	r5, #1
 80066b6:	2300      	movs	r3, #0
 80066b8:	9306      	str	r3, [sp, #24]
 80066ba:	9508      	str	r5, [sp, #32]
 80066bc:	f04f 33ff 	mov.w	r3, #4294967295
 80066c0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80066c4:	2200      	movs	r2, #0
 80066c6:	2312      	movs	r3, #18
 80066c8:	e7b0      	b.n	800662c <_dtoa_r+0x26c>
 80066ca:	2301      	movs	r3, #1
 80066cc:	9308      	str	r3, [sp, #32]
 80066ce:	e7f5      	b.n	80066bc <_dtoa_r+0x2fc>
 80066d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066d2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80066d6:	e7b8      	b.n	800664a <_dtoa_r+0x28a>
 80066d8:	3101      	adds	r1, #1
 80066da:	6041      	str	r1, [r0, #4]
 80066dc:	0052      	lsls	r2, r2, #1
 80066de:	e7b8      	b.n	8006652 <_dtoa_r+0x292>
 80066e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066e2:	9a01      	ldr	r2, [sp, #4]
 80066e4:	601a      	str	r2, [r3, #0]
 80066e6:	9b03      	ldr	r3, [sp, #12]
 80066e8:	2b0e      	cmp	r3, #14
 80066ea:	f200 809d 	bhi.w	8006828 <_dtoa_r+0x468>
 80066ee:	2d00      	cmp	r5, #0
 80066f0:	f000 809a 	beq.w	8006828 <_dtoa_r+0x468>
 80066f4:	9b00      	ldr	r3, [sp, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	dd32      	ble.n	8006760 <_dtoa_r+0x3a0>
 80066fa:	4ab7      	ldr	r2, [pc, #732]	; (80069d8 <_dtoa_r+0x618>)
 80066fc:	f003 030f 	and.w	r3, r3, #15
 8006700:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006704:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006708:	9b00      	ldr	r3, [sp, #0]
 800670a:	05d8      	lsls	r0, r3, #23
 800670c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006710:	d516      	bpl.n	8006740 <_dtoa_r+0x380>
 8006712:	4bb2      	ldr	r3, [pc, #712]	; (80069dc <_dtoa_r+0x61c>)
 8006714:	ec51 0b19 	vmov	r0, r1, d9
 8006718:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800671c:	f7fa f896 	bl	800084c <__aeabi_ddiv>
 8006720:	f007 070f 	and.w	r7, r7, #15
 8006724:	4682      	mov	sl, r0
 8006726:	468b      	mov	fp, r1
 8006728:	2503      	movs	r5, #3
 800672a:	4eac      	ldr	r6, [pc, #688]	; (80069dc <_dtoa_r+0x61c>)
 800672c:	b957      	cbnz	r7, 8006744 <_dtoa_r+0x384>
 800672e:	4642      	mov	r2, r8
 8006730:	464b      	mov	r3, r9
 8006732:	4650      	mov	r0, sl
 8006734:	4659      	mov	r1, fp
 8006736:	f7fa f889 	bl	800084c <__aeabi_ddiv>
 800673a:	4682      	mov	sl, r0
 800673c:	468b      	mov	fp, r1
 800673e:	e028      	b.n	8006792 <_dtoa_r+0x3d2>
 8006740:	2502      	movs	r5, #2
 8006742:	e7f2      	b.n	800672a <_dtoa_r+0x36a>
 8006744:	07f9      	lsls	r1, r7, #31
 8006746:	d508      	bpl.n	800675a <_dtoa_r+0x39a>
 8006748:	4640      	mov	r0, r8
 800674a:	4649      	mov	r1, r9
 800674c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006750:	f7f9 ff52 	bl	80005f8 <__aeabi_dmul>
 8006754:	3501      	adds	r5, #1
 8006756:	4680      	mov	r8, r0
 8006758:	4689      	mov	r9, r1
 800675a:	107f      	asrs	r7, r7, #1
 800675c:	3608      	adds	r6, #8
 800675e:	e7e5      	b.n	800672c <_dtoa_r+0x36c>
 8006760:	f000 809b 	beq.w	800689a <_dtoa_r+0x4da>
 8006764:	9b00      	ldr	r3, [sp, #0]
 8006766:	4f9d      	ldr	r7, [pc, #628]	; (80069dc <_dtoa_r+0x61c>)
 8006768:	425e      	negs	r6, r3
 800676a:	4b9b      	ldr	r3, [pc, #620]	; (80069d8 <_dtoa_r+0x618>)
 800676c:	f006 020f 	and.w	r2, r6, #15
 8006770:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006778:	ec51 0b19 	vmov	r0, r1, d9
 800677c:	f7f9 ff3c 	bl	80005f8 <__aeabi_dmul>
 8006780:	1136      	asrs	r6, r6, #4
 8006782:	4682      	mov	sl, r0
 8006784:	468b      	mov	fp, r1
 8006786:	2300      	movs	r3, #0
 8006788:	2502      	movs	r5, #2
 800678a:	2e00      	cmp	r6, #0
 800678c:	d17a      	bne.n	8006884 <_dtoa_r+0x4c4>
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1d3      	bne.n	800673a <_dtoa_r+0x37a>
 8006792:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006794:	2b00      	cmp	r3, #0
 8006796:	f000 8082 	beq.w	800689e <_dtoa_r+0x4de>
 800679a:	4b91      	ldr	r3, [pc, #580]	; (80069e0 <_dtoa_r+0x620>)
 800679c:	2200      	movs	r2, #0
 800679e:	4650      	mov	r0, sl
 80067a0:	4659      	mov	r1, fp
 80067a2:	f7fa f99b 	bl	8000adc <__aeabi_dcmplt>
 80067a6:	2800      	cmp	r0, #0
 80067a8:	d079      	beq.n	800689e <_dtoa_r+0x4de>
 80067aa:	9b03      	ldr	r3, [sp, #12]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d076      	beq.n	800689e <_dtoa_r+0x4de>
 80067b0:	9b02      	ldr	r3, [sp, #8]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	dd36      	ble.n	8006824 <_dtoa_r+0x464>
 80067b6:	9b00      	ldr	r3, [sp, #0]
 80067b8:	4650      	mov	r0, sl
 80067ba:	4659      	mov	r1, fp
 80067bc:	1e5f      	subs	r7, r3, #1
 80067be:	2200      	movs	r2, #0
 80067c0:	4b88      	ldr	r3, [pc, #544]	; (80069e4 <_dtoa_r+0x624>)
 80067c2:	f7f9 ff19 	bl	80005f8 <__aeabi_dmul>
 80067c6:	9e02      	ldr	r6, [sp, #8]
 80067c8:	4682      	mov	sl, r0
 80067ca:	468b      	mov	fp, r1
 80067cc:	3501      	adds	r5, #1
 80067ce:	4628      	mov	r0, r5
 80067d0:	f7f9 fea8 	bl	8000524 <__aeabi_i2d>
 80067d4:	4652      	mov	r2, sl
 80067d6:	465b      	mov	r3, fp
 80067d8:	f7f9 ff0e 	bl	80005f8 <__aeabi_dmul>
 80067dc:	4b82      	ldr	r3, [pc, #520]	; (80069e8 <_dtoa_r+0x628>)
 80067de:	2200      	movs	r2, #0
 80067e0:	f7f9 fd54 	bl	800028c <__adddf3>
 80067e4:	46d0      	mov	r8, sl
 80067e6:	46d9      	mov	r9, fp
 80067e8:	4682      	mov	sl, r0
 80067ea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80067ee:	2e00      	cmp	r6, #0
 80067f0:	d158      	bne.n	80068a4 <_dtoa_r+0x4e4>
 80067f2:	4b7e      	ldr	r3, [pc, #504]	; (80069ec <_dtoa_r+0x62c>)
 80067f4:	2200      	movs	r2, #0
 80067f6:	4640      	mov	r0, r8
 80067f8:	4649      	mov	r1, r9
 80067fa:	f7f9 fd45 	bl	8000288 <__aeabi_dsub>
 80067fe:	4652      	mov	r2, sl
 8006800:	465b      	mov	r3, fp
 8006802:	4680      	mov	r8, r0
 8006804:	4689      	mov	r9, r1
 8006806:	f7fa f987 	bl	8000b18 <__aeabi_dcmpgt>
 800680a:	2800      	cmp	r0, #0
 800680c:	f040 8295 	bne.w	8006d3a <_dtoa_r+0x97a>
 8006810:	4652      	mov	r2, sl
 8006812:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006816:	4640      	mov	r0, r8
 8006818:	4649      	mov	r1, r9
 800681a:	f7fa f95f 	bl	8000adc <__aeabi_dcmplt>
 800681e:	2800      	cmp	r0, #0
 8006820:	f040 8289 	bne.w	8006d36 <_dtoa_r+0x976>
 8006824:	ec5b ab19 	vmov	sl, fp, d9
 8006828:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800682a:	2b00      	cmp	r3, #0
 800682c:	f2c0 8148 	blt.w	8006ac0 <_dtoa_r+0x700>
 8006830:	9a00      	ldr	r2, [sp, #0]
 8006832:	2a0e      	cmp	r2, #14
 8006834:	f300 8144 	bgt.w	8006ac0 <_dtoa_r+0x700>
 8006838:	4b67      	ldr	r3, [pc, #412]	; (80069d8 <_dtoa_r+0x618>)
 800683a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800683e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006844:	2b00      	cmp	r3, #0
 8006846:	f280 80d5 	bge.w	80069f4 <_dtoa_r+0x634>
 800684a:	9b03      	ldr	r3, [sp, #12]
 800684c:	2b00      	cmp	r3, #0
 800684e:	f300 80d1 	bgt.w	80069f4 <_dtoa_r+0x634>
 8006852:	f040 826f 	bne.w	8006d34 <_dtoa_r+0x974>
 8006856:	4b65      	ldr	r3, [pc, #404]	; (80069ec <_dtoa_r+0x62c>)
 8006858:	2200      	movs	r2, #0
 800685a:	4640      	mov	r0, r8
 800685c:	4649      	mov	r1, r9
 800685e:	f7f9 fecb 	bl	80005f8 <__aeabi_dmul>
 8006862:	4652      	mov	r2, sl
 8006864:	465b      	mov	r3, fp
 8006866:	f7fa f94d 	bl	8000b04 <__aeabi_dcmpge>
 800686a:	9e03      	ldr	r6, [sp, #12]
 800686c:	4637      	mov	r7, r6
 800686e:	2800      	cmp	r0, #0
 8006870:	f040 8245 	bne.w	8006cfe <_dtoa_r+0x93e>
 8006874:	9d01      	ldr	r5, [sp, #4]
 8006876:	2331      	movs	r3, #49	; 0x31
 8006878:	f805 3b01 	strb.w	r3, [r5], #1
 800687c:	9b00      	ldr	r3, [sp, #0]
 800687e:	3301      	adds	r3, #1
 8006880:	9300      	str	r3, [sp, #0]
 8006882:	e240      	b.n	8006d06 <_dtoa_r+0x946>
 8006884:	07f2      	lsls	r2, r6, #31
 8006886:	d505      	bpl.n	8006894 <_dtoa_r+0x4d4>
 8006888:	e9d7 2300 	ldrd	r2, r3, [r7]
 800688c:	f7f9 feb4 	bl	80005f8 <__aeabi_dmul>
 8006890:	3501      	adds	r5, #1
 8006892:	2301      	movs	r3, #1
 8006894:	1076      	asrs	r6, r6, #1
 8006896:	3708      	adds	r7, #8
 8006898:	e777      	b.n	800678a <_dtoa_r+0x3ca>
 800689a:	2502      	movs	r5, #2
 800689c:	e779      	b.n	8006792 <_dtoa_r+0x3d2>
 800689e:	9f00      	ldr	r7, [sp, #0]
 80068a0:	9e03      	ldr	r6, [sp, #12]
 80068a2:	e794      	b.n	80067ce <_dtoa_r+0x40e>
 80068a4:	9901      	ldr	r1, [sp, #4]
 80068a6:	4b4c      	ldr	r3, [pc, #304]	; (80069d8 <_dtoa_r+0x618>)
 80068a8:	4431      	add	r1, r6
 80068aa:	910d      	str	r1, [sp, #52]	; 0x34
 80068ac:	9908      	ldr	r1, [sp, #32]
 80068ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80068b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80068b6:	2900      	cmp	r1, #0
 80068b8:	d043      	beq.n	8006942 <_dtoa_r+0x582>
 80068ba:	494d      	ldr	r1, [pc, #308]	; (80069f0 <_dtoa_r+0x630>)
 80068bc:	2000      	movs	r0, #0
 80068be:	f7f9 ffc5 	bl	800084c <__aeabi_ddiv>
 80068c2:	4652      	mov	r2, sl
 80068c4:	465b      	mov	r3, fp
 80068c6:	f7f9 fcdf 	bl	8000288 <__aeabi_dsub>
 80068ca:	9d01      	ldr	r5, [sp, #4]
 80068cc:	4682      	mov	sl, r0
 80068ce:	468b      	mov	fp, r1
 80068d0:	4649      	mov	r1, r9
 80068d2:	4640      	mov	r0, r8
 80068d4:	f7fa f940 	bl	8000b58 <__aeabi_d2iz>
 80068d8:	4606      	mov	r6, r0
 80068da:	f7f9 fe23 	bl	8000524 <__aeabi_i2d>
 80068de:	4602      	mov	r2, r0
 80068e0:	460b      	mov	r3, r1
 80068e2:	4640      	mov	r0, r8
 80068e4:	4649      	mov	r1, r9
 80068e6:	f7f9 fccf 	bl	8000288 <__aeabi_dsub>
 80068ea:	3630      	adds	r6, #48	; 0x30
 80068ec:	f805 6b01 	strb.w	r6, [r5], #1
 80068f0:	4652      	mov	r2, sl
 80068f2:	465b      	mov	r3, fp
 80068f4:	4680      	mov	r8, r0
 80068f6:	4689      	mov	r9, r1
 80068f8:	f7fa f8f0 	bl	8000adc <__aeabi_dcmplt>
 80068fc:	2800      	cmp	r0, #0
 80068fe:	d163      	bne.n	80069c8 <_dtoa_r+0x608>
 8006900:	4642      	mov	r2, r8
 8006902:	464b      	mov	r3, r9
 8006904:	4936      	ldr	r1, [pc, #216]	; (80069e0 <_dtoa_r+0x620>)
 8006906:	2000      	movs	r0, #0
 8006908:	f7f9 fcbe 	bl	8000288 <__aeabi_dsub>
 800690c:	4652      	mov	r2, sl
 800690e:	465b      	mov	r3, fp
 8006910:	f7fa f8e4 	bl	8000adc <__aeabi_dcmplt>
 8006914:	2800      	cmp	r0, #0
 8006916:	f040 80b5 	bne.w	8006a84 <_dtoa_r+0x6c4>
 800691a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800691c:	429d      	cmp	r5, r3
 800691e:	d081      	beq.n	8006824 <_dtoa_r+0x464>
 8006920:	4b30      	ldr	r3, [pc, #192]	; (80069e4 <_dtoa_r+0x624>)
 8006922:	2200      	movs	r2, #0
 8006924:	4650      	mov	r0, sl
 8006926:	4659      	mov	r1, fp
 8006928:	f7f9 fe66 	bl	80005f8 <__aeabi_dmul>
 800692c:	4b2d      	ldr	r3, [pc, #180]	; (80069e4 <_dtoa_r+0x624>)
 800692e:	4682      	mov	sl, r0
 8006930:	468b      	mov	fp, r1
 8006932:	4640      	mov	r0, r8
 8006934:	4649      	mov	r1, r9
 8006936:	2200      	movs	r2, #0
 8006938:	f7f9 fe5e 	bl	80005f8 <__aeabi_dmul>
 800693c:	4680      	mov	r8, r0
 800693e:	4689      	mov	r9, r1
 8006940:	e7c6      	b.n	80068d0 <_dtoa_r+0x510>
 8006942:	4650      	mov	r0, sl
 8006944:	4659      	mov	r1, fp
 8006946:	f7f9 fe57 	bl	80005f8 <__aeabi_dmul>
 800694a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800694c:	9d01      	ldr	r5, [sp, #4]
 800694e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006950:	4682      	mov	sl, r0
 8006952:	468b      	mov	fp, r1
 8006954:	4649      	mov	r1, r9
 8006956:	4640      	mov	r0, r8
 8006958:	f7fa f8fe 	bl	8000b58 <__aeabi_d2iz>
 800695c:	4606      	mov	r6, r0
 800695e:	f7f9 fde1 	bl	8000524 <__aeabi_i2d>
 8006962:	3630      	adds	r6, #48	; 0x30
 8006964:	4602      	mov	r2, r0
 8006966:	460b      	mov	r3, r1
 8006968:	4640      	mov	r0, r8
 800696a:	4649      	mov	r1, r9
 800696c:	f7f9 fc8c 	bl	8000288 <__aeabi_dsub>
 8006970:	f805 6b01 	strb.w	r6, [r5], #1
 8006974:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006976:	429d      	cmp	r5, r3
 8006978:	4680      	mov	r8, r0
 800697a:	4689      	mov	r9, r1
 800697c:	f04f 0200 	mov.w	r2, #0
 8006980:	d124      	bne.n	80069cc <_dtoa_r+0x60c>
 8006982:	4b1b      	ldr	r3, [pc, #108]	; (80069f0 <_dtoa_r+0x630>)
 8006984:	4650      	mov	r0, sl
 8006986:	4659      	mov	r1, fp
 8006988:	f7f9 fc80 	bl	800028c <__adddf3>
 800698c:	4602      	mov	r2, r0
 800698e:	460b      	mov	r3, r1
 8006990:	4640      	mov	r0, r8
 8006992:	4649      	mov	r1, r9
 8006994:	f7fa f8c0 	bl	8000b18 <__aeabi_dcmpgt>
 8006998:	2800      	cmp	r0, #0
 800699a:	d173      	bne.n	8006a84 <_dtoa_r+0x6c4>
 800699c:	4652      	mov	r2, sl
 800699e:	465b      	mov	r3, fp
 80069a0:	4913      	ldr	r1, [pc, #76]	; (80069f0 <_dtoa_r+0x630>)
 80069a2:	2000      	movs	r0, #0
 80069a4:	f7f9 fc70 	bl	8000288 <__aeabi_dsub>
 80069a8:	4602      	mov	r2, r0
 80069aa:	460b      	mov	r3, r1
 80069ac:	4640      	mov	r0, r8
 80069ae:	4649      	mov	r1, r9
 80069b0:	f7fa f894 	bl	8000adc <__aeabi_dcmplt>
 80069b4:	2800      	cmp	r0, #0
 80069b6:	f43f af35 	beq.w	8006824 <_dtoa_r+0x464>
 80069ba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80069bc:	1e6b      	subs	r3, r5, #1
 80069be:	930f      	str	r3, [sp, #60]	; 0x3c
 80069c0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80069c4:	2b30      	cmp	r3, #48	; 0x30
 80069c6:	d0f8      	beq.n	80069ba <_dtoa_r+0x5fa>
 80069c8:	9700      	str	r7, [sp, #0]
 80069ca:	e049      	b.n	8006a60 <_dtoa_r+0x6a0>
 80069cc:	4b05      	ldr	r3, [pc, #20]	; (80069e4 <_dtoa_r+0x624>)
 80069ce:	f7f9 fe13 	bl	80005f8 <__aeabi_dmul>
 80069d2:	4680      	mov	r8, r0
 80069d4:	4689      	mov	r9, r1
 80069d6:	e7bd      	b.n	8006954 <_dtoa_r+0x594>
 80069d8:	08008968 	.word	0x08008968
 80069dc:	08008940 	.word	0x08008940
 80069e0:	3ff00000 	.word	0x3ff00000
 80069e4:	40240000 	.word	0x40240000
 80069e8:	401c0000 	.word	0x401c0000
 80069ec:	40140000 	.word	0x40140000
 80069f0:	3fe00000 	.word	0x3fe00000
 80069f4:	9d01      	ldr	r5, [sp, #4]
 80069f6:	4656      	mov	r6, sl
 80069f8:	465f      	mov	r7, fp
 80069fa:	4642      	mov	r2, r8
 80069fc:	464b      	mov	r3, r9
 80069fe:	4630      	mov	r0, r6
 8006a00:	4639      	mov	r1, r7
 8006a02:	f7f9 ff23 	bl	800084c <__aeabi_ddiv>
 8006a06:	f7fa f8a7 	bl	8000b58 <__aeabi_d2iz>
 8006a0a:	4682      	mov	sl, r0
 8006a0c:	f7f9 fd8a 	bl	8000524 <__aeabi_i2d>
 8006a10:	4642      	mov	r2, r8
 8006a12:	464b      	mov	r3, r9
 8006a14:	f7f9 fdf0 	bl	80005f8 <__aeabi_dmul>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	4630      	mov	r0, r6
 8006a1e:	4639      	mov	r1, r7
 8006a20:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006a24:	f7f9 fc30 	bl	8000288 <__aeabi_dsub>
 8006a28:	f805 6b01 	strb.w	r6, [r5], #1
 8006a2c:	9e01      	ldr	r6, [sp, #4]
 8006a2e:	9f03      	ldr	r7, [sp, #12]
 8006a30:	1bae      	subs	r6, r5, r6
 8006a32:	42b7      	cmp	r7, r6
 8006a34:	4602      	mov	r2, r0
 8006a36:	460b      	mov	r3, r1
 8006a38:	d135      	bne.n	8006aa6 <_dtoa_r+0x6e6>
 8006a3a:	f7f9 fc27 	bl	800028c <__adddf3>
 8006a3e:	4642      	mov	r2, r8
 8006a40:	464b      	mov	r3, r9
 8006a42:	4606      	mov	r6, r0
 8006a44:	460f      	mov	r7, r1
 8006a46:	f7fa f867 	bl	8000b18 <__aeabi_dcmpgt>
 8006a4a:	b9d0      	cbnz	r0, 8006a82 <_dtoa_r+0x6c2>
 8006a4c:	4642      	mov	r2, r8
 8006a4e:	464b      	mov	r3, r9
 8006a50:	4630      	mov	r0, r6
 8006a52:	4639      	mov	r1, r7
 8006a54:	f7fa f838 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a58:	b110      	cbz	r0, 8006a60 <_dtoa_r+0x6a0>
 8006a5a:	f01a 0f01 	tst.w	sl, #1
 8006a5e:	d110      	bne.n	8006a82 <_dtoa_r+0x6c2>
 8006a60:	4620      	mov	r0, r4
 8006a62:	ee18 1a10 	vmov	r1, s16
 8006a66:	f000 faf3 	bl	8007050 <_Bfree>
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	9800      	ldr	r0, [sp, #0]
 8006a6e:	702b      	strb	r3, [r5, #0]
 8006a70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a72:	3001      	adds	r0, #1
 8006a74:	6018      	str	r0, [r3, #0]
 8006a76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	f43f acf1 	beq.w	8006460 <_dtoa_r+0xa0>
 8006a7e:	601d      	str	r5, [r3, #0]
 8006a80:	e4ee      	b.n	8006460 <_dtoa_r+0xa0>
 8006a82:	9f00      	ldr	r7, [sp, #0]
 8006a84:	462b      	mov	r3, r5
 8006a86:	461d      	mov	r5, r3
 8006a88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a8c:	2a39      	cmp	r2, #57	; 0x39
 8006a8e:	d106      	bne.n	8006a9e <_dtoa_r+0x6de>
 8006a90:	9a01      	ldr	r2, [sp, #4]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d1f7      	bne.n	8006a86 <_dtoa_r+0x6c6>
 8006a96:	9901      	ldr	r1, [sp, #4]
 8006a98:	2230      	movs	r2, #48	; 0x30
 8006a9a:	3701      	adds	r7, #1
 8006a9c:	700a      	strb	r2, [r1, #0]
 8006a9e:	781a      	ldrb	r2, [r3, #0]
 8006aa0:	3201      	adds	r2, #1
 8006aa2:	701a      	strb	r2, [r3, #0]
 8006aa4:	e790      	b.n	80069c8 <_dtoa_r+0x608>
 8006aa6:	4ba6      	ldr	r3, [pc, #664]	; (8006d40 <_dtoa_r+0x980>)
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f7f9 fda5 	bl	80005f8 <__aeabi_dmul>
 8006aae:	2200      	movs	r2, #0
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	4606      	mov	r6, r0
 8006ab4:	460f      	mov	r7, r1
 8006ab6:	f7fa f807 	bl	8000ac8 <__aeabi_dcmpeq>
 8006aba:	2800      	cmp	r0, #0
 8006abc:	d09d      	beq.n	80069fa <_dtoa_r+0x63a>
 8006abe:	e7cf      	b.n	8006a60 <_dtoa_r+0x6a0>
 8006ac0:	9a08      	ldr	r2, [sp, #32]
 8006ac2:	2a00      	cmp	r2, #0
 8006ac4:	f000 80d7 	beq.w	8006c76 <_dtoa_r+0x8b6>
 8006ac8:	9a06      	ldr	r2, [sp, #24]
 8006aca:	2a01      	cmp	r2, #1
 8006acc:	f300 80ba 	bgt.w	8006c44 <_dtoa_r+0x884>
 8006ad0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ad2:	2a00      	cmp	r2, #0
 8006ad4:	f000 80b2 	beq.w	8006c3c <_dtoa_r+0x87c>
 8006ad8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006adc:	9e07      	ldr	r6, [sp, #28]
 8006ade:	9d04      	ldr	r5, [sp, #16]
 8006ae0:	9a04      	ldr	r2, [sp, #16]
 8006ae2:	441a      	add	r2, r3
 8006ae4:	9204      	str	r2, [sp, #16]
 8006ae6:	9a05      	ldr	r2, [sp, #20]
 8006ae8:	2101      	movs	r1, #1
 8006aea:	441a      	add	r2, r3
 8006aec:	4620      	mov	r0, r4
 8006aee:	9205      	str	r2, [sp, #20]
 8006af0:	f000 fb66 	bl	80071c0 <__i2b>
 8006af4:	4607      	mov	r7, r0
 8006af6:	2d00      	cmp	r5, #0
 8006af8:	dd0c      	ble.n	8006b14 <_dtoa_r+0x754>
 8006afa:	9b05      	ldr	r3, [sp, #20]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	dd09      	ble.n	8006b14 <_dtoa_r+0x754>
 8006b00:	42ab      	cmp	r3, r5
 8006b02:	9a04      	ldr	r2, [sp, #16]
 8006b04:	bfa8      	it	ge
 8006b06:	462b      	movge	r3, r5
 8006b08:	1ad2      	subs	r2, r2, r3
 8006b0a:	9204      	str	r2, [sp, #16]
 8006b0c:	9a05      	ldr	r2, [sp, #20]
 8006b0e:	1aed      	subs	r5, r5, r3
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	9305      	str	r3, [sp, #20]
 8006b14:	9b07      	ldr	r3, [sp, #28]
 8006b16:	b31b      	cbz	r3, 8006b60 <_dtoa_r+0x7a0>
 8006b18:	9b08      	ldr	r3, [sp, #32]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	f000 80af 	beq.w	8006c7e <_dtoa_r+0x8be>
 8006b20:	2e00      	cmp	r6, #0
 8006b22:	dd13      	ble.n	8006b4c <_dtoa_r+0x78c>
 8006b24:	4639      	mov	r1, r7
 8006b26:	4632      	mov	r2, r6
 8006b28:	4620      	mov	r0, r4
 8006b2a:	f000 fc09 	bl	8007340 <__pow5mult>
 8006b2e:	ee18 2a10 	vmov	r2, s16
 8006b32:	4601      	mov	r1, r0
 8006b34:	4607      	mov	r7, r0
 8006b36:	4620      	mov	r0, r4
 8006b38:	f000 fb58 	bl	80071ec <__multiply>
 8006b3c:	ee18 1a10 	vmov	r1, s16
 8006b40:	4680      	mov	r8, r0
 8006b42:	4620      	mov	r0, r4
 8006b44:	f000 fa84 	bl	8007050 <_Bfree>
 8006b48:	ee08 8a10 	vmov	s16, r8
 8006b4c:	9b07      	ldr	r3, [sp, #28]
 8006b4e:	1b9a      	subs	r2, r3, r6
 8006b50:	d006      	beq.n	8006b60 <_dtoa_r+0x7a0>
 8006b52:	ee18 1a10 	vmov	r1, s16
 8006b56:	4620      	mov	r0, r4
 8006b58:	f000 fbf2 	bl	8007340 <__pow5mult>
 8006b5c:	ee08 0a10 	vmov	s16, r0
 8006b60:	2101      	movs	r1, #1
 8006b62:	4620      	mov	r0, r4
 8006b64:	f000 fb2c 	bl	80071c0 <__i2b>
 8006b68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	4606      	mov	r6, r0
 8006b6e:	f340 8088 	ble.w	8006c82 <_dtoa_r+0x8c2>
 8006b72:	461a      	mov	r2, r3
 8006b74:	4601      	mov	r1, r0
 8006b76:	4620      	mov	r0, r4
 8006b78:	f000 fbe2 	bl	8007340 <__pow5mult>
 8006b7c:	9b06      	ldr	r3, [sp, #24]
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	4606      	mov	r6, r0
 8006b82:	f340 8081 	ble.w	8006c88 <_dtoa_r+0x8c8>
 8006b86:	f04f 0800 	mov.w	r8, #0
 8006b8a:	6933      	ldr	r3, [r6, #16]
 8006b8c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006b90:	6918      	ldr	r0, [r3, #16]
 8006b92:	f000 fac5 	bl	8007120 <__hi0bits>
 8006b96:	f1c0 0020 	rsb	r0, r0, #32
 8006b9a:	9b05      	ldr	r3, [sp, #20]
 8006b9c:	4418      	add	r0, r3
 8006b9e:	f010 001f 	ands.w	r0, r0, #31
 8006ba2:	f000 8092 	beq.w	8006cca <_dtoa_r+0x90a>
 8006ba6:	f1c0 0320 	rsb	r3, r0, #32
 8006baa:	2b04      	cmp	r3, #4
 8006bac:	f340 808a 	ble.w	8006cc4 <_dtoa_r+0x904>
 8006bb0:	f1c0 001c 	rsb	r0, r0, #28
 8006bb4:	9b04      	ldr	r3, [sp, #16]
 8006bb6:	4403      	add	r3, r0
 8006bb8:	9304      	str	r3, [sp, #16]
 8006bba:	9b05      	ldr	r3, [sp, #20]
 8006bbc:	4403      	add	r3, r0
 8006bbe:	4405      	add	r5, r0
 8006bc0:	9305      	str	r3, [sp, #20]
 8006bc2:	9b04      	ldr	r3, [sp, #16]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	dd07      	ble.n	8006bd8 <_dtoa_r+0x818>
 8006bc8:	ee18 1a10 	vmov	r1, s16
 8006bcc:	461a      	mov	r2, r3
 8006bce:	4620      	mov	r0, r4
 8006bd0:	f000 fc10 	bl	80073f4 <__lshift>
 8006bd4:	ee08 0a10 	vmov	s16, r0
 8006bd8:	9b05      	ldr	r3, [sp, #20]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	dd05      	ble.n	8006bea <_dtoa_r+0x82a>
 8006bde:	4631      	mov	r1, r6
 8006be0:	461a      	mov	r2, r3
 8006be2:	4620      	mov	r0, r4
 8006be4:	f000 fc06 	bl	80073f4 <__lshift>
 8006be8:	4606      	mov	r6, r0
 8006bea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d06e      	beq.n	8006cce <_dtoa_r+0x90e>
 8006bf0:	ee18 0a10 	vmov	r0, s16
 8006bf4:	4631      	mov	r1, r6
 8006bf6:	f000 fc6d 	bl	80074d4 <__mcmp>
 8006bfa:	2800      	cmp	r0, #0
 8006bfc:	da67      	bge.n	8006cce <_dtoa_r+0x90e>
 8006bfe:	9b00      	ldr	r3, [sp, #0]
 8006c00:	3b01      	subs	r3, #1
 8006c02:	ee18 1a10 	vmov	r1, s16
 8006c06:	9300      	str	r3, [sp, #0]
 8006c08:	220a      	movs	r2, #10
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	4620      	mov	r0, r4
 8006c0e:	f000 fa41 	bl	8007094 <__multadd>
 8006c12:	9b08      	ldr	r3, [sp, #32]
 8006c14:	ee08 0a10 	vmov	s16, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	f000 81b1 	beq.w	8006f80 <_dtoa_r+0xbc0>
 8006c1e:	2300      	movs	r3, #0
 8006c20:	4639      	mov	r1, r7
 8006c22:	220a      	movs	r2, #10
 8006c24:	4620      	mov	r0, r4
 8006c26:	f000 fa35 	bl	8007094 <__multadd>
 8006c2a:	9b02      	ldr	r3, [sp, #8]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	4607      	mov	r7, r0
 8006c30:	f300 808e 	bgt.w	8006d50 <_dtoa_r+0x990>
 8006c34:	9b06      	ldr	r3, [sp, #24]
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	dc51      	bgt.n	8006cde <_dtoa_r+0x91e>
 8006c3a:	e089      	b.n	8006d50 <_dtoa_r+0x990>
 8006c3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c3e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006c42:	e74b      	b.n	8006adc <_dtoa_r+0x71c>
 8006c44:	9b03      	ldr	r3, [sp, #12]
 8006c46:	1e5e      	subs	r6, r3, #1
 8006c48:	9b07      	ldr	r3, [sp, #28]
 8006c4a:	42b3      	cmp	r3, r6
 8006c4c:	bfbf      	itttt	lt
 8006c4e:	9b07      	ldrlt	r3, [sp, #28]
 8006c50:	9607      	strlt	r6, [sp, #28]
 8006c52:	1af2      	sublt	r2, r6, r3
 8006c54:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006c56:	bfb6      	itet	lt
 8006c58:	189b      	addlt	r3, r3, r2
 8006c5a:	1b9e      	subge	r6, r3, r6
 8006c5c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006c5e:	9b03      	ldr	r3, [sp, #12]
 8006c60:	bfb8      	it	lt
 8006c62:	2600      	movlt	r6, #0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	bfb7      	itett	lt
 8006c68:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006c6c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006c70:	1a9d      	sublt	r5, r3, r2
 8006c72:	2300      	movlt	r3, #0
 8006c74:	e734      	b.n	8006ae0 <_dtoa_r+0x720>
 8006c76:	9e07      	ldr	r6, [sp, #28]
 8006c78:	9d04      	ldr	r5, [sp, #16]
 8006c7a:	9f08      	ldr	r7, [sp, #32]
 8006c7c:	e73b      	b.n	8006af6 <_dtoa_r+0x736>
 8006c7e:	9a07      	ldr	r2, [sp, #28]
 8006c80:	e767      	b.n	8006b52 <_dtoa_r+0x792>
 8006c82:	9b06      	ldr	r3, [sp, #24]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	dc18      	bgt.n	8006cba <_dtoa_r+0x8fa>
 8006c88:	f1ba 0f00 	cmp.w	sl, #0
 8006c8c:	d115      	bne.n	8006cba <_dtoa_r+0x8fa>
 8006c8e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c92:	b993      	cbnz	r3, 8006cba <_dtoa_r+0x8fa>
 8006c94:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006c98:	0d1b      	lsrs	r3, r3, #20
 8006c9a:	051b      	lsls	r3, r3, #20
 8006c9c:	b183      	cbz	r3, 8006cc0 <_dtoa_r+0x900>
 8006c9e:	9b04      	ldr	r3, [sp, #16]
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	9304      	str	r3, [sp, #16]
 8006ca4:	9b05      	ldr	r3, [sp, #20]
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	9305      	str	r3, [sp, #20]
 8006caa:	f04f 0801 	mov.w	r8, #1
 8006cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f47f af6a 	bne.w	8006b8a <_dtoa_r+0x7ca>
 8006cb6:	2001      	movs	r0, #1
 8006cb8:	e76f      	b.n	8006b9a <_dtoa_r+0x7da>
 8006cba:	f04f 0800 	mov.w	r8, #0
 8006cbe:	e7f6      	b.n	8006cae <_dtoa_r+0x8ee>
 8006cc0:	4698      	mov	r8, r3
 8006cc2:	e7f4      	b.n	8006cae <_dtoa_r+0x8ee>
 8006cc4:	f43f af7d 	beq.w	8006bc2 <_dtoa_r+0x802>
 8006cc8:	4618      	mov	r0, r3
 8006cca:	301c      	adds	r0, #28
 8006ccc:	e772      	b.n	8006bb4 <_dtoa_r+0x7f4>
 8006cce:	9b03      	ldr	r3, [sp, #12]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	dc37      	bgt.n	8006d44 <_dtoa_r+0x984>
 8006cd4:	9b06      	ldr	r3, [sp, #24]
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	dd34      	ble.n	8006d44 <_dtoa_r+0x984>
 8006cda:	9b03      	ldr	r3, [sp, #12]
 8006cdc:	9302      	str	r3, [sp, #8]
 8006cde:	9b02      	ldr	r3, [sp, #8]
 8006ce0:	b96b      	cbnz	r3, 8006cfe <_dtoa_r+0x93e>
 8006ce2:	4631      	mov	r1, r6
 8006ce4:	2205      	movs	r2, #5
 8006ce6:	4620      	mov	r0, r4
 8006ce8:	f000 f9d4 	bl	8007094 <__multadd>
 8006cec:	4601      	mov	r1, r0
 8006cee:	4606      	mov	r6, r0
 8006cf0:	ee18 0a10 	vmov	r0, s16
 8006cf4:	f000 fbee 	bl	80074d4 <__mcmp>
 8006cf8:	2800      	cmp	r0, #0
 8006cfa:	f73f adbb 	bgt.w	8006874 <_dtoa_r+0x4b4>
 8006cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d00:	9d01      	ldr	r5, [sp, #4]
 8006d02:	43db      	mvns	r3, r3
 8006d04:	9300      	str	r3, [sp, #0]
 8006d06:	f04f 0800 	mov.w	r8, #0
 8006d0a:	4631      	mov	r1, r6
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	f000 f99f 	bl	8007050 <_Bfree>
 8006d12:	2f00      	cmp	r7, #0
 8006d14:	f43f aea4 	beq.w	8006a60 <_dtoa_r+0x6a0>
 8006d18:	f1b8 0f00 	cmp.w	r8, #0
 8006d1c:	d005      	beq.n	8006d2a <_dtoa_r+0x96a>
 8006d1e:	45b8      	cmp	r8, r7
 8006d20:	d003      	beq.n	8006d2a <_dtoa_r+0x96a>
 8006d22:	4641      	mov	r1, r8
 8006d24:	4620      	mov	r0, r4
 8006d26:	f000 f993 	bl	8007050 <_Bfree>
 8006d2a:	4639      	mov	r1, r7
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	f000 f98f 	bl	8007050 <_Bfree>
 8006d32:	e695      	b.n	8006a60 <_dtoa_r+0x6a0>
 8006d34:	2600      	movs	r6, #0
 8006d36:	4637      	mov	r7, r6
 8006d38:	e7e1      	b.n	8006cfe <_dtoa_r+0x93e>
 8006d3a:	9700      	str	r7, [sp, #0]
 8006d3c:	4637      	mov	r7, r6
 8006d3e:	e599      	b.n	8006874 <_dtoa_r+0x4b4>
 8006d40:	40240000 	.word	0x40240000
 8006d44:	9b08      	ldr	r3, [sp, #32]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	f000 80ca 	beq.w	8006ee0 <_dtoa_r+0xb20>
 8006d4c:	9b03      	ldr	r3, [sp, #12]
 8006d4e:	9302      	str	r3, [sp, #8]
 8006d50:	2d00      	cmp	r5, #0
 8006d52:	dd05      	ble.n	8006d60 <_dtoa_r+0x9a0>
 8006d54:	4639      	mov	r1, r7
 8006d56:	462a      	mov	r2, r5
 8006d58:	4620      	mov	r0, r4
 8006d5a:	f000 fb4b 	bl	80073f4 <__lshift>
 8006d5e:	4607      	mov	r7, r0
 8006d60:	f1b8 0f00 	cmp.w	r8, #0
 8006d64:	d05b      	beq.n	8006e1e <_dtoa_r+0xa5e>
 8006d66:	6879      	ldr	r1, [r7, #4]
 8006d68:	4620      	mov	r0, r4
 8006d6a:	f000 f931 	bl	8006fd0 <_Balloc>
 8006d6e:	4605      	mov	r5, r0
 8006d70:	b928      	cbnz	r0, 8006d7e <_dtoa_r+0x9be>
 8006d72:	4b87      	ldr	r3, [pc, #540]	; (8006f90 <_dtoa_r+0xbd0>)
 8006d74:	4602      	mov	r2, r0
 8006d76:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006d7a:	f7ff bb3b 	b.w	80063f4 <_dtoa_r+0x34>
 8006d7e:	693a      	ldr	r2, [r7, #16]
 8006d80:	3202      	adds	r2, #2
 8006d82:	0092      	lsls	r2, r2, #2
 8006d84:	f107 010c 	add.w	r1, r7, #12
 8006d88:	300c      	adds	r0, #12
 8006d8a:	f000 f913 	bl	8006fb4 <memcpy>
 8006d8e:	2201      	movs	r2, #1
 8006d90:	4629      	mov	r1, r5
 8006d92:	4620      	mov	r0, r4
 8006d94:	f000 fb2e 	bl	80073f4 <__lshift>
 8006d98:	9b01      	ldr	r3, [sp, #4]
 8006d9a:	f103 0901 	add.w	r9, r3, #1
 8006d9e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006da2:	4413      	add	r3, r2
 8006da4:	9305      	str	r3, [sp, #20]
 8006da6:	f00a 0301 	and.w	r3, sl, #1
 8006daa:	46b8      	mov	r8, r7
 8006dac:	9304      	str	r3, [sp, #16]
 8006dae:	4607      	mov	r7, r0
 8006db0:	4631      	mov	r1, r6
 8006db2:	ee18 0a10 	vmov	r0, s16
 8006db6:	f7ff fa75 	bl	80062a4 <quorem>
 8006dba:	4641      	mov	r1, r8
 8006dbc:	9002      	str	r0, [sp, #8]
 8006dbe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006dc2:	ee18 0a10 	vmov	r0, s16
 8006dc6:	f000 fb85 	bl	80074d4 <__mcmp>
 8006dca:	463a      	mov	r2, r7
 8006dcc:	9003      	str	r0, [sp, #12]
 8006dce:	4631      	mov	r1, r6
 8006dd0:	4620      	mov	r0, r4
 8006dd2:	f000 fb9b 	bl	800750c <__mdiff>
 8006dd6:	68c2      	ldr	r2, [r0, #12]
 8006dd8:	f109 3bff 	add.w	fp, r9, #4294967295
 8006ddc:	4605      	mov	r5, r0
 8006dde:	bb02      	cbnz	r2, 8006e22 <_dtoa_r+0xa62>
 8006de0:	4601      	mov	r1, r0
 8006de2:	ee18 0a10 	vmov	r0, s16
 8006de6:	f000 fb75 	bl	80074d4 <__mcmp>
 8006dea:	4602      	mov	r2, r0
 8006dec:	4629      	mov	r1, r5
 8006dee:	4620      	mov	r0, r4
 8006df0:	9207      	str	r2, [sp, #28]
 8006df2:	f000 f92d 	bl	8007050 <_Bfree>
 8006df6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006dfa:	ea43 0102 	orr.w	r1, r3, r2
 8006dfe:	9b04      	ldr	r3, [sp, #16]
 8006e00:	430b      	orrs	r3, r1
 8006e02:	464d      	mov	r5, r9
 8006e04:	d10f      	bne.n	8006e26 <_dtoa_r+0xa66>
 8006e06:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006e0a:	d02a      	beq.n	8006e62 <_dtoa_r+0xaa2>
 8006e0c:	9b03      	ldr	r3, [sp, #12]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	dd02      	ble.n	8006e18 <_dtoa_r+0xa58>
 8006e12:	9b02      	ldr	r3, [sp, #8]
 8006e14:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006e18:	f88b a000 	strb.w	sl, [fp]
 8006e1c:	e775      	b.n	8006d0a <_dtoa_r+0x94a>
 8006e1e:	4638      	mov	r0, r7
 8006e20:	e7ba      	b.n	8006d98 <_dtoa_r+0x9d8>
 8006e22:	2201      	movs	r2, #1
 8006e24:	e7e2      	b.n	8006dec <_dtoa_r+0xa2c>
 8006e26:	9b03      	ldr	r3, [sp, #12]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	db04      	blt.n	8006e36 <_dtoa_r+0xa76>
 8006e2c:	9906      	ldr	r1, [sp, #24]
 8006e2e:	430b      	orrs	r3, r1
 8006e30:	9904      	ldr	r1, [sp, #16]
 8006e32:	430b      	orrs	r3, r1
 8006e34:	d122      	bne.n	8006e7c <_dtoa_r+0xabc>
 8006e36:	2a00      	cmp	r2, #0
 8006e38:	ddee      	ble.n	8006e18 <_dtoa_r+0xa58>
 8006e3a:	ee18 1a10 	vmov	r1, s16
 8006e3e:	2201      	movs	r2, #1
 8006e40:	4620      	mov	r0, r4
 8006e42:	f000 fad7 	bl	80073f4 <__lshift>
 8006e46:	4631      	mov	r1, r6
 8006e48:	ee08 0a10 	vmov	s16, r0
 8006e4c:	f000 fb42 	bl	80074d4 <__mcmp>
 8006e50:	2800      	cmp	r0, #0
 8006e52:	dc03      	bgt.n	8006e5c <_dtoa_r+0xa9c>
 8006e54:	d1e0      	bne.n	8006e18 <_dtoa_r+0xa58>
 8006e56:	f01a 0f01 	tst.w	sl, #1
 8006e5a:	d0dd      	beq.n	8006e18 <_dtoa_r+0xa58>
 8006e5c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006e60:	d1d7      	bne.n	8006e12 <_dtoa_r+0xa52>
 8006e62:	2339      	movs	r3, #57	; 0x39
 8006e64:	f88b 3000 	strb.w	r3, [fp]
 8006e68:	462b      	mov	r3, r5
 8006e6a:	461d      	mov	r5, r3
 8006e6c:	3b01      	subs	r3, #1
 8006e6e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006e72:	2a39      	cmp	r2, #57	; 0x39
 8006e74:	d071      	beq.n	8006f5a <_dtoa_r+0xb9a>
 8006e76:	3201      	adds	r2, #1
 8006e78:	701a      	strb	r2, [r3, #0]
 8006e7a:	e746      	b.n	8006d0a <_dtoa_r+0x94a>
 8006e7c:	2a00      	cmp	r2, #0
 8006e7e:	dd07      	ble.n	8006e90 <_dtoa_r+0xad0>
 8006e80:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006e84:	d0ed      	beq.n	8006e62 <_dtoa_r+0xaa2>
 8006e86:	f10a 0301 	add.w	r3, sl, #1
 8006e8a:	f88b 3000 	strb.w	r3, [fp]
 8006e8e:	e73c      	b.n	8006d0a <_dtoa_r+0x94a>
 8006e90:	9b05      	ldr	r3, [sp, #20]
 8006e92:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006e96:	4599      	cmp	r9, r3
 8006e98:	d047      	beq.n	8006f2a <_dtoa_r+0xb6a>
 8006e9a:	ee18 1a10 	vmov	r1, s16
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	220a      	movs	r2, #10
 8006ea2:	4620      	mov	r0, r4
 8006ea4:	f000 f8f6 	bl	8007094 <__multadd>
 8006ea8:	45b8      	cmp	r8, r7
 8006eaa:	ee08 0a10 	vmov	s16, r0
 8006eae:	f04f 0300 	mov.w	r3, #0
 8006eb2:	f04f 020a 	mov.w	r2, #10
 8006eb6:	4641      	mov	r1, r8
 8006eb8:	4620      	mov	r0, r4
 8006eba:	d106      	bne.n	8006eca <_dtoa_r+0xb0a>
 8006ebc:	f000 f8ea 	bl	8007094 <__multadd>
 8006ec0:	4680      	mov	r8, r0
 8006ec2:	4607      	mov	r7, r0
 8006ec4:	f109 0901 	add.w	r9, r9, #1
 8006ec8:	e772      	b.n	8006db0 <_dtoa_r+0x9f0>
 8006eca:	f000 f8e3 	bl	8007094 <__multadd>
 8006ece:	4639      	mov	r1, r7
 8006ed0:	4680      	mov	r8, r0
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	220a      	movs	r2, #10
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	f000 f8dc 	bl	8007094 <__multadd>
 8006edc:	4607      	mov	r7, r0
 8006ede:	e7f1      	b.n	8006ec4 <_dtoa_r+0xb04>
 8006ee0:	9b03      	ldr	r3, [sp, #12]
 8006ee2:	9302      	str	r3, [sp, #8]
 8006ee4:	9d01      	ldr	r5, [sp, #4]
 8006ee6:	ee18 0a10 	vmov	r0, s16
 8006eea:	4631      	mov	r1, r6
 8006eec:	f7ff f9da 	bl	80062a4 <quorem>
 8006ef0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006ef4:	9b01      	ldr	r3, [sp, #4]
 8006ef6:	f805 ab01 	strb.w	sl, [r5], #1
 8006efa:	1aea      	subs	r2, r5, r3
 8006efc:	9b02      	ldr	r3, [sp, #8]
 8006efe:	4293      	cmp	r3, r2
 8006f00:	dd09      	ble.n	8006f16 <_dtoa_r+0xb56>
 8006f02:	ee18 1a10 	vmov	r1, s16
 8006f06:	2300      	movs	r3, #0
 8006f08:	220a      	movs	r2, #10
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	f000 f8c2 	bl	8007094 <__multadd>
 8006f10:	ee08 0a10 	vmov	s16, r0
 8006f14:	e7e7      	b.n	8006ee6 <_dtoa_r+0xb26>
 8006f16:	9b02      	ldr	r3, [sp, #8]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	bfc8      	it	gt
 8006f1c:	461d      	movgt	r5, r3
 8006f1e:	9b01      	ldr	r3, [sp, #4]
 8006f20:	bfd8      	it	le
 8006f22:	2501      	movle	r5, #1
 8006f24:	441d      	add	r5, r3
 8006f26:	f04f 0800 	mov.w	r8, #0
 8006f2a:	ee18 1a10 	vmov	r1, s16
 8006f2e:	2201      	movs	r2, #1
 8006f30:	4620      	mov	r0, r4
 8006f32:	f000 fa5f 	bl	80073f4 <__lshift>
 8006f36:	4631      	mov	r1, r6
 8006f38:	ee08 0a10 	vmov	s16, r0
 8006f3c:	f000 faca 	bl	80074d4 <__mcmp>
 8006f40:	2800      	cmp	r0, #0
 8006f42:	dc91      	bgt.n	8006e68 <_dtoa_r+0xaa8>
 8006f44:	d102      	bne.n	8006f4c <_dtoa_r+0xb8c>
 8006f46:	f01a 0f01 	tst.w	sl, #1
 8006f4a:	d18d      	bne.n	8006e68 <_dtoa_r+0xaa8>
 8006f4c:	462b      	mov	r3, r5
 8006f4e:	461d      	mov	r5, r3
 8006f50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f54:	2a30      	cmp	r2, #48	; 0x30
 8006f56:	d0fa      	beq.n	8006f4e <_dtoa_r+0xb8e>
 8006f58:	e6d7      	b.n	8006d0a <_dtoa_r+0x94a>
 8006f5a:	9a01      	ldr	r2, [sp, #4]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d184      	bne.n	8006e6a <_dtoa_r+0xaaa>
 8006f60:	9b00      	ldr	r3, [sp, #0]
 8006f62:	3301      	adds	r3, #1
 8006f64:	9300      	str	r3, [sp, #0]
 8006f66:	2331      	movs	r3, #49	; 0x31
 8006f68:	7013      	strb	r3, [r2, #0]
 8006f6a:	e6ce      	b.n	8006d0a <_dtoa_r+0x94a>
 8006f6c:	4b09      	ldr	r3, [pc, #36]	; (8006f94 <_dtoa_r+0xbd4>)
 8006f6e:	f7ff ba95 	b.w	800649c <_dtoa_r+0xdc>
 8006f72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	f47f aa6e 	bne.w	8006456 <_dtoa_r+0x96>
 8006f7a:	4b07      	ldr	r3, [pc, #28]	; (8006f98 <_dtoa_r+0xbd8>)
 8006f7c:	f7ff ba8e 	b.w	800649c <_dtoa_r+0xdc>
 8006f80:	9b02      	ldr	r3, [sp, #8]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	dcae      	bgt.n	8006ee4 <_dtoa_r+0xb24>
 8006f86:	9b06      	ldr	r3, [sp, #24]
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	f73f aea8 	bgt.w	8006cde <_dtoa_r+0x91e>
 8006f8e:	e7a9      	b.n	8006ee4 <_dtoa_r+0xb24>
 8006f90:	080088d3 	.word	0x080088d3
 8006f94:	08008830 	.word	0x08008830
 8006f98:	08008854 	.word	0x08008854

08006f9c <_localeconv_r>:
 8006f9c:	4800      	ldr	r0, [pc, #0]	; (8006fa0 <_localeconv_r+0x4>)
 8006f9e:	4770      	bx	lr
 8006fa0:	20000160 	.word	0x20000160

08006fa4 <malloc>:
 8006fa4:	4b02      	ldr	r3, [pc, #8]	; (8006fb0 <malloc+0xc>)
 8006fa6:	4601      	mov	r1, r0
 8006fa8:	6818      	ldr	r0, [r3, #0]
 8006faa:	f000 bc17 	b.w	80077dc <_malloc_r>
 8006fae:	bf00      	nop
 8006fb0:	2000000c 	.word	0x2000000c

08006fb4 <memcpy>:
 8006fb4:	440a      	add	r2, r1
 8006fb6:	4291      	cmp	r1, r2
 8006fb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006fbc:	d100      	bne.n	8006fc0 <memcpy+0xc>
 8006fbe:	4770      	bx	lr
 8006fc0:	b510      	push	{r4, lr}
 8006fc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fca:	4291      	cmp	r1, r2
 8006fcc:	d1f9      	bne.n	8006fc2 <memcpy+0xe>
 8006fce:	bd10      	pop	{r4, pc}

08006fd0 <_Balloc>:
 8006fd0:	b570      	push	{r4, r5, r6, lr}
 8006fd2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006fd4:	4604      	mov	r4, r0
 8006fd6:	460d      	mov	r5, r1
 8006fd8:	b976      	cbnz	r6, 8006ff8 <_Balloc+0x28>
 8006fda:	2010      	movs	r0, #16
 8006fdc:	f7ff ffe2 	bl	8006fa4 <malloc>
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	6260      	str	r0, [r4, #36]	; 0x24
 8006fe4:	b920      	cbnz	r0, 8006ff0 <_Balloc+0x20>
 8006fe6:	4b18      	ldr	r3, [pc, #96]	; (8007048 <_Balloc+0x78>)
 8006fe8:	4818      	ldr	r0, [pc, #96]	; (800704c <_Balloc+0x7c>)
 8006fea:	2166      	movs	r1, #102	; 0x66
 8006fec:	f000 fdd6 	bl	8007b9c <__assert_func>
 8006ff0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ff4:	6006      	str	r6, [r0, #0]
 8006ff6:	60c6      	str	r6, [r0, #12]
 8006ff8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006ffa:	68f3      	ldr	r3, [r6, #12]
 8006ffc:	b183      	cbz	r3, 8007020 <_Balloc+0x50>
 8006ffe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007006:	b9b8      	cbnz	r0, 8007038 <_Balloc+0x68>
 8007008:	2101      	movs	r1, #1
 800700a:	fa01 f605 	lsl.w	r6, r1, r5
 800700e:	1d72      	adds	r2, r6, #5
 8007010:	0092      	lsls	r2, r2, #2
 8007012:	4620      	mov	r0, r4
 8007014:	f000 fb60 	bl	80076d8 <_calloc_r>
 8007018:	b160      	cbz	r0, 8007034 <_Balloc+0x64>
 800701a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800701e:	e00e      	b.n	800703e <_Balloc+0x6e>
 8007020:	2221      	movs	r2, #33	; 0x21
 8007022:	2104      	movs	r1, #4
 8007024:	4620      	mov	r0, r4
 8007026:	f000 fb57 	bl	80076d8 <_calloc_r>
 800702a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800702c:	60f0      	str	r0, [r6, #12]
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d1e4      	bne.n	8006ffe <_Balloc+0x2e>
 8007034:	2000      	movs	r0, #0
 8007036:	bd70      	pop	{r4, r5, r6, pc}
 8007038:	6802      	ldr	r2, [r0, #0]
 800703a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800703e:	2300      	movs	r3, #0
 8007040:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007044:	e7f7      	b.n	8007036 <_Balloc+0x66>
 8007046:	bf00      	nop
 8007048:	08008861 	.word	0x08008861
 800704c:	080088e4 	.word	0x080088e4

08007050 <_Bfree>:
 8007050:	b570      	push	{r4, r5, r6, lr}
 8007052:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007054:	4605      	mov	r5, r0
 8007056:	460c      	mov	r4, r1
 8007058:	b976      	cbnz	r6, 8007078 <_Bfree+0x28>
 800705a:	2010      	movs	r0, #16
 800705c:	f7ff ffa2 	bl	8006fa4 <malloc>
 8007060:	4602      	mov	r2, r0
 8007062:	6268      	str	r0, [r5, #36]	; 0x24
 8007064:	b920      	cbnz	r0, 8007070 <_Bfree+0x20>
 8007066:	4b09      	ldr	r3, [pc, #36]	; (800708c <_Bfree+0x3c>)
 8007068:	4809      	ldr	r0, [pc, #36]	; (8007090 <_Bfree+0x40>)
 800706a:	218a      	movs	r1, #138	; 0x8a
 800706c:	f000 fd96 	bl	8007b9c <__assert_func>
 8007070:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007074:	6006      	str	r6, [r0, #0]
 8007076:	60c6      	str	r6, [r0, #12]
 8007078:	b13c      	cbz	r4, 800708a <_Bfree+0x3a>
 800707a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800707c:	6862      	ldr	r2, [r4, #4]
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007084:	6021      	str	r1, [r4, #0]
 8007086:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800708a:	bd70      	pop	{r4, r5, r6, pc}
 800708c:	08008861 	.word	0x08008861
 8007090:	080088e4 	.word	0x080088e4

08007094 <__multadd>:
 8007094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007098:	690d      	ldr	r5, [r1, #16]
 800709a:	4607      	mov	r7, r0
 800709c:	460c      	mov	r4, r1
 800709e:	461e      	mov	r6, r3
 80070a0:	f101 0c14 	add.w	ip, r1, #20
 80070a4:	2000      	movs	r0, #0
 80070a6:	f8dc 3000 	ldr.w	r3, [ip]
 80070aa:	b299      	uxth	r1, r3
 80070ac:	fb02 6101 	mla	r1, r2, r1, r6
 80070b0:	0c1e      	lsrs	r6, r3, #16
 80070b2:	0c0b      	lsrs	r3, r1, #16
 80070b4:	fb02 3306 	mla	r3, r2, r6, r3
 80070b8:	b289      	uxth	r1, r1
 80070ba:	3001      	adds	r0, #1
 80070bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80070c0:	4285      	cmp	r5, r0
 80070c2:	f84c 1b04 	str.w	r1, [ip], #4
 80070c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80070ca:	dcec      	bgt.n	80070a6 <__multadd+0x12>
 80070cc:	b30e      	cbz	r6, 8007112 <__multadd+0x7e>
 80070ce:	68a3      	ldr	r3, [r4, #8]
 80070d0:	42ab      	cmp	r3, r5
 80070d2:	dc19      	bgt.n	8007108 <__multadd+0x74>
 80070d4:	6861      	ldr	r1, [r4, #4]
 80070d6:	4638      	mov	r0, r7
 80070d8:	3101      	adds	r1, #1
 80070da:	f7ff ff79 	bl	8006fd0 <_Balloc>
 80070de:	4680      	mov	r8, r0
 80070e0:	b928      	cbnz	r0, 80070ee <__multadd+0x5a>
 80070e2:	4602      	mov	r2, r0
 80070e4:	4b0c      	ldr	r3, [pc, #48]	; (8007118 <__multadd+0x84>)
 80070e6:	480d      	ldr	r0, [pc, #52]	; (800711c <__multadd+0x88>)
 80070e8:	21b5      	movs	r1, #181	; 0xb5
 80070ea:	f000 fd57 	bl	8007b9c <__assert_func>
 80070ee:	6922      	ldr	r2, [r4, #16]
 80070f0:	3202      	adds	r2, #2
 80070f2:	f104 010c 	add.w	r1, r4, #12
 80070f6:	0092      	lsls	r2, r2, #2
 80070f8:	300c      	adds	r0, #12
 80070fa:	f7ff ff5b 	bl	8006fb4 <memcpy>
 80070fe:	4621      	mov	r1, r4
 8007100:	4638      	mov	r0, r7
 8007102:	f7ff ffa5 	bl	8007050 <_Bfree>
 8007106:	4644      	mov	r4, r8
 8007108:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800710c:	3501      	adds	r5, #1
 800710e:	615e      	str	r6, [r3, #20]
 8007110:	6125      	str	r5, [r4, #16]
 8007112:	4620      	mov	r0, r4
 8007114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007118:	080088d3 	.word	0x080088d3
 800711c:	080088e4 	.word	0x080088e4

08007120 <__hi0bits>:
 8007120:	0c03      	lsrs	r3, r0, #16
 8007122:	041b      	lsls	r3, r3, #16
 8007124:	b9d3      	cbnz	r3, 800715c <__hi0bits+0x3c>
 8007126:	0400      	lsls	r0, r0, #16
 8007128:	2310      	movs	r3, #16
 800712a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800712e:	bf04      	itt	eq
 8007130:	0200      	lsleq	r0, r0, #8
 8007132:	3308      	addeq	r3, #8
 8007134:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007138:	bf04      	itt	eq
 800713a:	0100      	lsleq	r0, r0, #4
 800713c:	3304      	addeq	r3, #4
 800713e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007142:	bf04      	itt	eq
 8007144:	0080      	lsleq	r0, r0, #2
 8007146:	3302      	addeq	r3, #2
 8007148:	2800      	cmp	r0, #0
 800714a:	db05      	blt.n	8007158 <__hi0bits+0x38>
 800714c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007150:	f103 0301 	add.w	r3, r3, #1
 8007154:	bf08      	it	eq
 8007156:	2320      	moveq	r3, #32
 8007158:	4618      	mov	r0, r3
 800715a:	4770      	bx	lr
 800715c:	2300      	movs	r3, #0
 800715e:	e7e4      	b.n	800712a <__hi0bits+0xa>

08007160 <__lo0bits>:
 8007160:	6803      	ldr	r3, [r0, #0]
 8007162:	f013 0207 	ands.w	r2, r3, #7
 8007166:	4601      	mov	r1, r0
 8007168:	d00b      	beq.n	8007182 <__lo0bits+0x22>
 800716a:	07da      	lsls	r2, r3, #31
 800716c:	d423      	bmi.n	80071b6 <__lo0bits+0x56>
 800716e:	0798      	lsls	r0, r3, #30
 8007170:	bf49      	itett	mi
 8007172:	085b      	lsrmi	r3, r3, #1
 8007174:	089b      	lsrpl	r3, r3, #2
 8007176:	2001      	movmi	r0, #1
 8007178:	600b      	strmi	r3, [r1, #0]
 800717a:	bf5c      	itt	pl
 800717c:	600b      	strpl	r3, [r1, #0]
 800717e:	2002      	movpl	r0, #2
 8007180:	4770      	bx	lr
 8007182:	b298      	uxth	r0, r3
 8007184:	b9a8      	cbnz	r0, 80071b2 <__lo0bits+0x52>
 8007186:	0c1b      	lsrs	r3, r3, #16
 8007188:	2010      	movs	r0, #16
 800718a:	b2da      	uxtb	r2, r3
 800718c:	b90a      	cbnz	r2, 8007192 <__lo0bits+0x32>
 800718e:	3008      	adds	r0, #8
 8007190:	0a1b      	lsrs	r3, r3, #8
 8007192:	071a      	lsls	r2, r3, #28
 8007194:	bf04      	itt	eq
 8007196:	091b      	lsreq	r3, r3, #4
 8007198:	3004      	addeq	r0, #4
 800719a:	079a      	lsls	r2, r3, #30
 800719c:	bf04      	itt	eq
 800719e:	089b      	lsreq	r3, r3, #2
 80071a0:	3002      	addeq	r0, #2
 80071a2:	07da      	lsls	r2, r3, #31
 80071a4:	d403      	bmi.n	80071ae <__lo0bits+0x4e>
 80071a6:	085b      	lsrs	r3, r3, #1
 80071a8:	f100 0001 	add.w	r0, r0, #1
 80071ac:	d005      	beq.n	80071ba <__lo0bits+0x5a>
 80071ae:	600b      	str	r3, [r1, #0]
 80071b0:	4770      	bx	lr
 80071b2:	4610      	mov	r0, r2
 80071b4:	e7e9      	b.n	800718a <__lo0bits+0x2a>
 80071b6:	2000      	movs	r0, #0
 80071b8:	4770      	bx	lr
 80071ba:	2020      	movs	r0, #32
 80071bc:	4770      	bx	lr
	...

080071c0 <__i2b>:
 80071c0:	b510      	push	{r4, lr}
 80071c2:	460c      	mov	r4, r1
 80071c4:	2101      	movs	r1, #1
 80071c6:	f7ff ff03 	bl	8006fd0 <_Balloc>
 80071ca:	4602      	mov	r2, r0
 80071cc:	b928      	cbnz	r0, 80071da <__i2b+0x1a>
 80071ce:	4b05      	ldr	r3, [pc, #20]	; (80071e4 <__i2b+0x24>)
 80071d0:	4805      	ldr	r0, [pc, #20]	; (80071e8 <__i2b+0x28>)
 80071d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80071d6:	f000 fce1 	bl	8007b9c <__assert_func>
 80071da:	2301      	movs	r3, #1
 80071dc:	6144      	str	r4, [r0, #20]
 80071de:	6103      	str	r3, [r0, #16]
 80071e0:	bd10      	pop	{r4, pc}
 80071e2:	bf00      	nop
 80071e4:	080088d3 	.word	0x080088d3
 80071e8:	080088e4 	.word	0x080088e4

080071ec <__multiply>:
 80071ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071f0:	4691      	mov	r9, r2
 80071f2:	690a      	ldr	r2, [r1, #16]
 80071f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	bfb8      	it	lt
 80071fc:	460b      	movlt	r3, r1
 80071fe:	460c      	mov	r4, r1
 8007200:	bfbc      	itt	lt
 8007202:	464c      	movlt	r4, r9
 8007204:	4699      	movlt	r9, r3
 8007206:	6927      	ldr	r7, [r4, #16]
 8007208:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800720c:	68a3      	ldr	r3, [r4, #8]
 800720e:	6861      	ldr	r1, [r4, #4]
 8007210:	eb07 060a 	add.w	r6, r7, sl
 8007214:	42b3      	cmp	r3, r6
 8007216:	b085      	sub	sp, #20
 8007218:	bfb8      	it	lt
 800721a:	3101      	addlt	r1, #1
 800721c:	f7ff fed8 	bl	8006fd0 <_Balloc>
 8007220:	b930      	cbnz	r0, 8007230 <__multiply+0x44>
 8007222:	4602      	mov	r2, r0
 8007224:	4b44      	ldr	r3, [pc, #272]	; (8007338 <__multiply+0x14c>)
 8007226:	4845      	ldr	r0, [pc, #276]	; (800733c <__multiply+0x150>)
 8007228:	f240 115d 	movw	r1, #349	; 0x15d
 800722c:	f000 fcb6 	bl	8007b9c <__assert_func>
 8007230:	f100 0514 	add.w	r5, r0, #20
 8007234:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007238:	462b      	mov	r3, r5
 800723a:	2200      	movs	r2, #0
 800723c:	4543      	cmp	r3, r8
 800723e:	d321      	bcc.n	8007284 <__multiply+0x98>
 8007240:	f104 0314 	add.w	r3, r4, #20
 8007244:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007248:	f109 0314 	add.w	r3, r9, #20
 800724c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007250:	9202      	str	r2, [sp, #8]
 8007252:	1b3a      	subs	r2, r7, r4
 8007254:	3a15      	subs	r2, #21
 8007256:	f022 0203 	bic.w	r2, r2, #3
 800725a:	3204      	adds	r2, #4
 800725c:	f104 0115 	add.w	r1, r4, #21
 8007260:	428f      	cmp	r7, r1
 8007262:	bf38      	it	cc
 8007264:	2204      	movcc	r2, #4
 8007266:	9201      	str	r2, [sp, #4]
 8007268:	9a02      	ldr	r2, [sp, #8]
 800726a:	9303      	str	r3, [sp, #12]
 800726c:	429a      	cmp	r2, r3
 800726e:	d80c      	bhi.n	800728a <__multiply+0x9e>
 8007270:	2e00      	cmp	r6, #0
 8007272:	dd03      	ble.n	800727c <__multiply+0x90>
 8007274:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007278:	2b00      	cmp	r3, #0
 800727a:	d05a      	beq.n	8007332 <__multiply+0x146>
 800727c:	6106      	str	r6, [r0, #16]
 800727e:	b005      	add	sp, #20
 8007280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007284:	f843 2b04 	str.w	r2, [r3], #4
 8007288:	e7d8      	b.n	800723c <__multiply+0x50>
 800728a:	f8b3 a000 	ldrh.w	sl, [r3]
 800728e:	f1ba 0f00 	cmp.w	sl, #0
 8007292:	d024      	beq.n	80072de <__multiply+0xf2>
 8007294:	f104 0e14 	add.w	lr, r4, #20
 8007298:	46a9      	mov	r9, r5
 800729a:	f04f 0c00 	mov.w	ip, #0
 800729e:	f85e 2b04 	ldr.w	r2, [lr], #4
 80072a2:	f8d9 1000 	ldr.w	r1, [r9]
 80072a6:	fa1f fb82 	uxth.w	fp, r2
 80072aa:	b289      	uxth	r1, r1
 80072ac:	fb0a 110b 	mla	r1, sl, fp, r1
 80072b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80072b4:	f8d9 2000 	ldr.w	r2, [r9]
 80072b8:	4461      	add	r1, ip
 80072ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80072be:	fb0a c20b 	mla	r2, sl, fp, ip
 80072c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80072c6:	b289      	uxth	r1, r1
 80072c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80072cc:	4577      	cmp	r7, lr
 80072ce:	f849 1b04 	str.w	r1, [r9], #4
 80072d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80072d6:	d8e2      	bhi.n	800729e <__multiply+0xb2>
 80072d8:	9a01      	ldr	r2, [sp, #4]
 80072da:	f845 c002 	str.w	ip, [r5, r2]
 80072de:	9a03      	ldr	r2, [sp, #12]
 80072e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80072e4:	3304      	adds	r3, #4
 80072e6:	f1b9 0f00 	cmp.w	r9, #0
 80072ea:	d020      	beq.n	800732e <__multiply+0x142>
 80072ec:	6829      	ldr	r1, [r5, #0]
 80072ee:	f104 0c14 	add.w	ip, r4, #20
 80072f2:	46ae      	mov	lr, r5
 80072f4:	f04f 0a00 	mov.w	sl, #0
 80072f8:	f8bc b000 	ldrh.w	fp, [ip]
 80072fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007300:	fb09 220b 	mla	r2, r9, fp, r2
 8007304:	4492      	add	sl, r2
 8007306:	b289      	uxth	r1, r1
 8007308:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800730c:	f84e 1b04 	str.w	r1, [lr], #4
 8007310:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007314:	f8be 1000 	ldrh.w	r1, [lr]
 8007318:	0c12      	lsrs	r2, r2, #16
 800731a:	fb09 1102 	mla	r1, r9, r2, r1
 800731e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007322:	4567      	cmp	r7, ip
 8007324:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007328:	d8e6      	bhi.n	80072f8 <__multiply+0x10c>
 800732a:	9a01      	ldr	r2, [sp, #4]
 800732c:	50a9      	str	r1, [r5, r2]
 800732e:	3504      	adds	r5, #4
 8007330:	e79a      	b.n	8007268 <__multiply+0x7c>
 8007332:	3e01      	subs	r6, #1
 8007334:	e79c      	b.n	8007270 <__multiply+0x84>
 8007336:	bf00      	nop
 8007338:	080088d3 	.word	0x080088d3
 800733c:	080088e4 	.word	0x080088e4

08007340 <__pow5mult>:
 8007340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007344:	4615      	mov	r5, r2
 8007346:	f012 0203 	ands.w	r2, r2, #3
 800734a:	4606      	mov	r6, r0
 800734c:	460f      	mov	r7, r1
 800734e:	d007      	beq.n	8007360 <__pow5mult+0x20>
 8007350:	4c25      	ldr	r4, [pc, #148]	; (80073e8 <__pow5mult+0xa8>)
 8007352:	3a01      	subs	r2, #1
 8007354:	2300      	movs	r3, #0
 8007356:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800735a:	f7ff fe9b 	bl	8007094 <__multadd>
 800735e:	4607      	mov	r7, r0
 8007360:	10ad      	asrs	r5, r5, #2
 8007362:	d03d      	beq.n	80073e0 <__pow5mult+0xa0>
 8007364:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007366:	b97c      	cbnz	r4, 8007388 <__pow5mult+0x48>
 8007368:	2010      	movs	r0, #16
 800736a:	f7ff fe1b 	bl	8006fa4 <malloc>
 800736e:	4602      	mov	r2, r0
 8007370:	6270      	str	r0, [r6, #36]	; 0x24
 8007372:	b928      	cbnz	r0, 8007380 <__pow5mult+0x40>
 8007374:	4b1d      	ldr	r3, [pc, #116]	; (80073ec <__pow5mult+0xac>)
 8007376:	481e      	ldr	r0, [pc, #120]	; (80073f0 <__pow5mult+0xb0>)
 8007378:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800737c:	f000 fc0e 	bl	8007b9c <__assert_func>
 8007380:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007384:	6004      	str	r4, [r0, #0]
 8007386:	60c4      	str	r4, [r0, #12]
 8007388:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800738c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007390:	b94c      	cbnz	r4, 80073a6 <__pow5mult+0x66>
 8007392:	f240 2171 	movw	r1, #625	; 0x271
 8007396:	4630      	mov	r0, r6
 8007398:	f7ff ff12 	bl	80071c0 <__i2b>
 800739c:	2300      	movs	r3, #0
 800739e:	f8c8 0008 	str.w	r0, [r8, #8]
 80073a2:	4604      	mov	r4, r0
 80073a4:	6003      	str	r3, [r0, #0]
 80073a6:	f04f 0900 	mov.w	r9, #0
 80073aa:	07eb      	lsls	r3, r5, #31
 80073ac:	d50a      	bpl.n	80073c4 <__pow5mult+0x84>
 80073ae:	4639      	mov	r1, r7
 80073b0:	4622      	mov	r2, r4
 80073b2:	4630      	mov	r0, r6
 80073b4:	f7ff ff1a 	bl	80071ec <__multiply>
 80073b8:	4639      	mov	r1, r7
 80073ba:	4680      	mov	r8, r0
 80073bc:	4630      	mov	r0, r6
 80073be:	f7ff fe47 	bl	8007050 <_Bfree>
 80073c2:	4647      	mov	r7, r8
 80073c4:	106d      	asrs	r5, r5, #1
 80073c6:	d00b      	beq.n	80073e0 <__pow5mult+0xa0>
 80073c8:	6820      	ldr	r0, [r4, #0]
 80073ca:	b938      	cbnz	r0, 80073dc <__pow5mult+0x9c>
 80073cc:	4622      	mov	r2, r4
 80073ce:	4621      	mov	r1, r4
 80073d0:	4630      	mov	r0, r6
 80073d2:	f7ff ff0b 	bl	80071ec <__multiply>
 80073d6:	6020      	str	r0, [r4, #0]
 80073d8:	f8c0 9000 	str.w	r9, [r0]
 80073dc:	4604      	mov	r4, r0
 80073de:	e7e4      	b.n	80073aa <__pow5mult+0x6a>
 80073e0:	4638      	mov	r0, r7
 80073e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073e6:	bf00      	nop
 80073e8:	08008a30 	.word	0x08008a30
 80073ec:	08008861 	.word	0x08008861
 80073f0:	080088e4 	.word	0x080088e4

080073f4 <__lshift>:
 80073f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073f8:	460c      	mov	r4, r1
 80073fa:	6849      	ldr	r1, [r1, #4]
 80073fc:	6923      	ldr	r3, [r4, #16]
 80073fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007402:	68a3      	ldr	r3, [r4, #8]
 8007404:	4607      	mov	r7, r0
 8007406:	4691      	mov	r9, r2
 8007408:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800740c:	f108 0601 	add.w	r6, r8, #1
 8007410:	42b3      	cmp	r3, r6
 8007412:	db0b      	blt.n	800742c <__lshift+0x38>
 8007414:	4638      	mov	r0, r7
 8007416:	f7ff fddb 	bl	8006fd0 <_Balloc>
 800741a:	4605      	mov	r5, r0
 800741c:	b948      	cbnz	r0, 8007432 <__lshift+0x3e>
 800741e:	4602      	mov	r2, r0
 8007420:	4b2a      	ldr	r3, [pc, #168]	; (80074cc <__lshift+0xd8>)
 8007422:	482b      	ldr	r0, [pc, #172]	; (80074d0 <__lshift+0xdc>)
 8007424:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007428:	f000 fbb8 	bl	8007b9c <__assert_func>
 800742c:	3101      	adds	r1, #1
 800742e:	005b      	lsls	r3, r3, #1
 8007430:	e7ee      	b.n	8007410 <__lshift+0x1c>
 8007432:	2300      	movs	r3, #0
 8007434:	f100 0114 	add.w	r1, r0, #20
 8007438:	f100 0210 	add.w	r2, r0, #16
 800743c:	4618      	mov	r0, r3
 800743e:	4553      	cmp	r3, sl
 8007440:	db37      	blt.n	80074b2 <__lshift+0xbe>
 8007442:	6920      	ldr	r0, [r4, #16]
 8007444:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007448:	f104 0314 	add.w	r3, r4, #20
 800744c:	f019 091f 	ands.w	r9, r9, #31
 8007450:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007454:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007458:	d02f      	beq.n	80074ba <__lshift+0xc6>
 800745a:	f1c9 0e20 	rsb	lr, r9, #32
 800745e:	468a      	mov	sl, r1
 8007460:	f04f 0c00 	mov.w	ip, #0
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	fa02 f209 	lsl.w	r2, r2, r9
 800746a:	ea42 020c 	orr.w	r2, r2, ip
 800746e:	f84a 2b04 	str.w	r2, [sl], #4
 8007472:	f853 2b04 	ldr.w	r2, [r3], #4
 8007476:	4298      	cmp	r0, r3
 8007478:	fa22 fc0e 	lsr.w	ip, r2, lr
 800747c:	d8f2      	bhi.n	8007464 <__lshift+0x70>
 800747e:	1b03      	subs	r3, r0, r4
 8007480:	3b15      	subs	r3, #21
 8007482:	f023 0303 	bic.w	r3, r3, #3
 8007486:	3304      	adds	r3, #4
 8007488:	f104 0215 	add.w	r2, r4, #21
 800748c:	4290      	cmp	r0, r2
 800748e:	bf38      	it	cc
 8007490:	2304      	movcc	r3, #4
 8007492:	f841 c003 	str.w	ip, [r1, r3]
 8007496:	f1bc 0f00 	cmp.w	ip, #0
 800749a:	d001      	beq.n	80074a0 <__lshift+0xac>
 800749c:	f108 0602 	add.w	r6, r8, #2
 80074a0:	3e01      	subs	r6, #1
 80074a2:	4638      	mov	r0, r7
 80074a4:	612e      	str	r6, [r5, #16]
 80074a6:	4621      	mov	r1, r4
 80074a8:	f7ff fdd2 	bl	8007050 <_Bfree>
 80074ac:	4628      	mov	r0, r5
 80074ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80074b6:	3301      	adds	r3, #1
 80074b8:	e7c1      	b.n	800743e <__lshift+0x4a>
 80074ba:	3904      	subs	r1, #4
 80074bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80074c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80074c4:	4298      	cmp	r0, r3
 80074c6:	d8f9      	bhi.n	80074bc <__lshift+0xc8>
 80074c8:	e7ea      	b.n	80074a0 <__lshift+0xac>
 80074ca:	bf00      	nop
 80074cc:	080088d3 	.word	0x080088d3
 80074d0:	080088e4 	.word	0x080088e4

080074d4 <__mcmp>:
 80074d4:	b530      	push	{r4, r5, lr}
 80074d6:	6902      	ldr	r2, [r0, #16]
 80074d8:	690c      	ldr	r4, [r1, #16]
 80074da:	1b12      	subs	r2, r2, r4
 80074dc:	d10e      	bne.n	80074fc <__mcmp+0x28>
 80074de:	f100 0314 	add.w	r3, r0, #20
 80074e2:	3114      	adds	r1, #20
 80074e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80074e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80074ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80074f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80074f4:	42a5      	cmp	r5, r4
 80074f6:	d003      	beq.n	8007500 <__mcmp+0x2c>
 80074f8:	d305      	bcc.n	8007506 <__mcmp+0x32>
 80074fa:	2201      	movs	r2, #1
 80074fc:	4610      	mov	r0, r2
 80074fe:	bd30      	pop	{r4, r5, pc}
 8007500:	4283      	cmp	r3, r0
 8007502:	d3f3      	bcc.n	80074ec <__mcmp+0x18>
 8007504:	e7fa      	b.n	80074fc <__mcmp+0x28>
 8007506:	f04f 32ff 	mov.w	r2, #4294967295
 800750a:	e7f7      	b.n	80074fc <__mcmp+0x28>

0800750c <__mdiff>:
 800750c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007510:	460c      	mov	r4, r1
 8007512:	4606      	mov	r6, r0
 8007514:	4611      	mov	r1, r2
 8007516:	4620      	mov	r0, r4
 8007518:	4690      	mov	r8, r2
 800751a:	f7ff ffdb 	bl	80074d4 <__mcmp>
 800751e:	1e05      	subs	r5, r0, #0
 8007520:	d110      	bne.n	8007544 <__mdiff+0x38>
 8007522:	4629      	mov	r1, r5
 8007524:	4630      	mov	r0, r6
 8007526:	f7ff fd53 	bl	8006fd0 <_Balloc>
 800752a:	b930      	cbnz	r0, 800753a <__mdiff+0x2e>
 800752c:	4b3a      	ldr	r3, [pc, #232]	; (8007618 <__mdiff+0x10c>)
 800752e:	4602      	mov	r2, r0
 8007530:	f240 2132 	movw	r1, #562	; 0x232
 8007534:	4839      	ldr	r0, [pc, #228]	; (800761c <__mdiff+0x110>)
 8007536:	f000 fb31 	bl	8007b9c <__assert_func>
 800753a:	2301      	movs	r3, #1
 800753c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007540:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007544:	bfa4      	itt	ge
 8007546:	4643      	movge	r3, r8
 8007548:	46a0      	movge	r8, r4
 800754a:	4630      	mov	r0, r6
 800754c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007550:	bfa6      	itte	ge
 8007552:	461c      	movge	r4, r3
 8007554:	2500      	movge	r5, #0
 8007556:	2501      	movlt	r5, #1
 8007558:	f7ff fd3a 	bl	8006fd0 <_Balloc>
 800755c:	b920      	cbnz	r0, 8007568 <__mdiff+0x5c>
 800755e:	4b2e      	ldr	r3, [pc, #184]	; (8007618 <__mdiff+0x10c>)
 8007560:	4602      	mov	r2, r0
 8007562:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007566:	e7e5      	b.n	8007534 <__mdiff+0x28>
 8007568:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800756c:	6926      	ldr	r6, [r4, #16]
 800756e:	60c5      	str	r5, [r0, #12]
 8007570:	f104 0914 	add.w	r9, r4, #20
 8007574:	f108 0514 	add.w	r5, r8, #20
 8007578:	f100 0e14 	add.w	lr, r0, #20
 800757c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007580:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007584:	f108 0210 	add.w	r2, r8, #16
 8007588:	46f2      	mov	sl, lr
 800758a:	2100      	movs	r1, #0
 800758c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007590:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007594:	fa1f f883 	uxth.w	r8, r3
 8007598:	fa11 f18b 	uxtah	r1, r1, fp
 800759c:	0c1b      	lsrs	r3, r3, #16
 800759e:	eba1 0808 	sub.w	r8, r1, r8
 80075a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80075a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80075aa:	fa1f f888 	uxth.w	r8, r8
 80075ae:	1419      	asrs	r1, r3, #16
 80075b0:	454e      	cmp	r6, r9
 80075b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80075b6:	f84a 3b04 	str.w	r3, [sl], #4
 80075ba:	d8e7      	bhi.n	800758c <__mdiff+0x80>
 80075bc:	1b33      	subs	r3, r6, r4
 80075be:	3b15      	subs	r3, #21
 80075c0:	f023 0303 	bic.w	r3, r3, #3
 80075c4:	3304      	adds	r3, #4
 80075c6:	3415      	adds	r4, #21
 80075c8:	42a6      	cmp	r6, r4
 80075ca:	bf38      	it	cc
 80075cc:	2304      	movcc	r3, #4
 80075ce:	441d      	add	r5, r3
 80075d0:	4473      	add	r3, lr
 80075d2:	469e      	mov	lr, r3
 80075d4:	462e      	mov	r6, r5
 80075d6:	4566      	cmp	r6, ip
 80075d8:	d30e      	bcc.n	80075f8 <__mdiff+0xec>
 80075da:	f10c 0203 	add.w	r2, ip, #3
 80075de:	1b52      	subs	r2, r2, r5
 80075e0:	f022 0203 	bic.w	r2, r2, #3
 80075e4:	3d03      	subs	r5, #3
 80075e6:	45ac      	cmp	ip, r5
 80075e8:	bf38      	it	cc
 80075ea:	2200      	movcc	r2, #0
 80075ec:	441a      	add	r2, r3
 80075ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80075f2:	b17b      	cbz	r3, 8007614 <__mdiff+0x108>
 80075f4:	6107      	str	r7, [r0, #16]
 80075f6:	e7a3      	b.n	8007540 <__mdiff+0x34>
 80075f8:	f856 8b04 	ldr.w	r8, [r6], #4
 80075fc:	fa11 f288 	uxtah	r2, r1, r8
 8007600:	1414      	asrs	r4, r2, #16
 8007602:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007606:	b292      	uxth	r2, r2
 8007608:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800760c:	f84e 2b04 	str.w	r2, [lr], #4
 8007610:	1421      	asrs	r1, r4, #16
 8007612:	e7e0      	b.n	80075d6 <__mdiff+0xca>
 8007614:	3f01      	subs	r7, #1
 8007616:	e7ea      	b.n	80075ee <__mdiff+0xe2>
 8007618:	080088d3 	.word	0x080088d3
 800761c:	080088e4 	.word	0x080088e4

08007620 <__d2b>:
 8007620:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007624:	4689      	mov	r9, r1
 8007626:	2101      	movs	r1, #1
 8007628:	ec57 6b10 	vmov	r6, r7, d0
 800762c:	4690      	mov	r8, r2
 800762e:	f7ff fccf 	bl	8006fd0 <_Balloc>
 8007632:	4604      	mov	r4, r0
 8007634:	b930      	cbnz	r0, 8007644 <__d2b+0x24>
 8007636:	4602      	mov	r2, r0
 8007638:	4b25      	ldr	r3, [pc, #148]	; (80076d0 <__d2b+0xb0>)
 800763a:	4826      	ldr	r0, [pc, #152]	; (80076d4 <__d2b+0xb4>)
 800763c:	f240 310a 	movw	r1, #778	; 0x30a
 8007640:	f000 faac 	bl	8007b9c <__assert_func>
 8007644:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007648:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800764c:	bb35      	cbnz	r5, 800769c <__d2b+0x7c>
 800764e:	2e00      	cmp	r6, #0
 8007650:	9301      	str	r3, [sp, #4]
 8007652:	d028      	beq.n	80076a6 <__d2b+0x86>
 8007654:	4668      	mov	r0, sp
 8007656:	9600      	str	r6, [sp, #0]
 8007658:	f7ff fd82 	bl	8007160 <__lo0bits>
 800765c:	9900      	ldr	r1, [sp, #0]
 800765e:	b300      	cbz	r0, 80076a2 <__d2b+0x82>
 8007660:	9a01      	ldr	r2, [sp, #4]
 8007662:	f1c0 0320 	rsb	r3, r0, #32
 8007666:	fa02 f303 	lsl.w	r3, r2, r3
 800766a:	430b      	orrs	r3, r1
 800766c:	40c2      	lsrs	r2, r0
 800766e:	6163      	str	r3, [r4, #20]
 8007670:	9201      	str	r2, [sp, #4]
 8007672:	9b01      	ldr	r3, [sp, #4]
 8007674:	61a3      	str	r3, [r4, #24]
 8007676:	2b00      	cmp	r3, #0
 8007678:	bf14      	ite	ne
 800767a:	2202      	movne	r2, #2
 800767c:	2201      	moveq	r2, #1
 800767e:	6122      	str	r2, [r4, #16]
 8007680:	b1d5      	cbz	r5, 80076b8 <__d2b+0x98>
 8007682:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007686:	4405      	add	r5, r0
 8007688:	f8c9 5000 	str.w	r5, [r9]
 800768c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007690:	f8c8 0000 	str.w	r0, [r8]
 8007694:	4620      	mov	r0, r4
 8007696:	b003      	add	sp, #12
 8007698:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800769c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076a0:	e7d5      	b.n	800764e <__d2b+0x2e>
 80076a2:	6161      	str	r1, [r4, #20]
 80076a4:	e7e5      	b.n	8007672 <__d2b+0x52>
 80076a6:	a801      	add	r0, sp, #4
 80076a8:	f7ff fd5a 	bl	8007160 <__lo0bits>
 80076ac:	9b01      	ldr	r3, [sp, #4]
 80076ae:	6163      	str	r3, [r4, #20]
 80076b0:	2201      	movs	r2, #1
 80076b2:	6122      	str	r2, [r4, #16]
 80076b4:	3020      	adds	r0, #32
 80076b6:	e7e3      	b.n	8007680 <__d2b+0x60>
 80076b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80076bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80076c0:	f8c9 0000 	str.w	r0, [r9]
 80076c4:	6918      	ldr	r0, [r3, #16]
 80076c6:	f7ff fd2b 	bl	8007120 <__hi0bits>
 80076ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80076ce:	e7df      	b.n	8007690 <__d2b+0x70>
 80076d0:	080088d3 	.word	0x080088d3
 80076d4:	080088e4 	.word	0x080088e4

080076d8 <_calloc_r>:
 80076d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076da:	fba1 2402 	umull	r2, r4, r1, r2
 80076de:	b94c      	cbnz	r4, 80076f4 <_calloc_r+0x1c>
 80076e0:	4611      	mov	r1, r2
 80076e2:	9201      	str	r2, [sp, #4]
 80076e4:	f000 f87a 	bl	80077dc <_malloc_r>
 80076e8:	9a01      	ldr	r2, [sp, #4]
 80076ea:	4605      	mov	r5, r0
 80076ec:	b930      	cbnz	r0, 80076fc <_calloc_r+0x24>
 80076ee:	4628      	mov	r0, r5
 80076f0:	b003      	add	sp, #12
 80076f2:	bd30      	pop	{r4, r5, pc}
 80076f4:	220c      	movs	r2, #12
 80076f6:	6002      	str	r2, [r0, #0]
 80076f8:	2500      	movs	r5, #0
 80076fa:	e7f8      	b.n	80076ee <_calloc_r+0x16>
 80076fc:	4621      	mov	r1, r4
 80076fe:	f7fe f93f 	bl	8005980 <memset>
 8007702:	e7f4      	b.n	80076ee <_calloc_r+0x16>

08007704 <_free_r>:
 8007704:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007706:	2900      	cmp	r1, #0
 8007708:	d044      	beq.n	8007794 <_free_r+0x90>
 800770a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800770e:	9001      	str	r0, [sp, #4]
 8007710:	2b00      	cmp	r3, #0
 8007712:	f1a1 0404 	sub.w	r4, r1, #4
 8007716:	bfb8      	it	lt
 8007718:	18e4      	addlt	r4, r4, r3
 800771a:	f000 fa9b 	bl	8007c54 <__malloc_lock>
 800771e:	4a1e      	ldr	r2, [pc, #120]	; (8007798 <_free_r+0x94>)
 8007720:	9801      	ldr	r0, [sp, #4]
 8007722:	6813      	ldr	r3, [r2, #0]
 8007724:	b933      	cbnz	r3, 8007734 <_free_r+0x30>
 8007726:	6063      	str	r3, [r4, #4]
 8007728:	6014      	str	r4, [r2, #0]
 800772a:	b003      	add	sp, #12
 800772c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007730:	f000 ba96 	b.w	8007c60 <__malloc_unlock>
 8007734:	42a3      	cmp	r3, r4
 8007736:	d908      	bls.n	800774a <_free_r+0x46>
 8007738:	6825      	ldr	r5, [r4, #0]
 800773a:	1961      	adds	r1, r4, r5
 800773c:	428b      	cmp	r3, r1
 800773e:	bf01      	itttt	eq
 8007740:	6819      	ldreq	r1, [r3, #0]
 8007742:	685b      	ldreq	r3, [r3, #4]
 8007744:	1949      	addeq	r1, r1, r5
 8007746:	6021      	streq	r1, [r4, #0]
 8007748:	e7ed      	b.n	8007726 <_free_r+0x22>
 800774a:	461a      	mov	r2, r3
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	b10b      	cbz	r3, 8007754 <_free_r+0x50>
 8007750:	42a3      	cmp	r3, r4
 8007752:	d9fa      	bls.n	800774a <_free_r+0x46>
 8007754:	6811      	ldr	r1, [r2, #0]
 8007756:	1855      	adds	r5, r2, r1
 8007758:	42a5      	cmp	r5, r4
 800775a:	d10b      	bne.n	8007774 <_free_r+0x70>
 800775c:	6824      	ldr	r4, [r4, #0]
 800775e:	4421      	add	r1, r4
 8007760:	1854      	adds	r4, r2, r1
 8007762:	42a3      	cmp	r3, r4
 8007764:	6011      	str	r1, [r2, #0]
 8007766:	d1e0      	bne.n	800772a <_free_r+0x26>
 8007768:	681c      	ldr	r4, [r3, #0]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	6053      	str	r3, [r2, #4]
 800776e:	4421      	add	r1, r4
 8007770:	6011      	str	r1, [r2, #0]
 8007772:	e7da      	b.n	800772a <_free_r+0x26>
 8007774:	d902      	bls.n	800777c <_free_r+0x78>
 8007776:	230c      	movs	r3, #12
 8007778:	6003      	str	r3, [r0, #0]
 800777a:	e7d6      	b.n	800772a <_free_r+0x26>
 800777c:	6825      	ldr	r5, [r4, #0]
 800777e:	1961      	adds	r1, r4, r5
 8007780:	428b      	cmp	r3, r1
 8007782:	bf04      	itt	eq
 8007784:	6819      	ldreq	r1, [r3, #0]
 8007786:	685b      	ldreq	r3, [r3, #4]
 8007788:	6063      	str	r3, [r4, #4]
 800778a:	bf04      	itt	eq
 800778c:	1949      	addeq	r1, r1, r5
 800778e:	6021      	streq	r1, [r4, #0]
 8007790:	6054      	str	r4, [r2, #4]
 8007792:	e7ca      	b.n	800772a <_free_r+0x26>
 8007794:	b003      	add	sp, #12
 8007796:	bd30      	pop	{r4, r5, pc}
 8007798:	2000038c 	.word	0x2000038c

0800779c <sbrk_aligned>:
 800779c:	b570      	push	{r4, r5, r6, lr}
 800779e:	4e0e      	ldr	r6, [pc, #56]	; (80077d8 <sbrk_aligned+0x3c>)
 80077a0:	460c      	mov	r4, r1
 80077a2:	6831      	ldr	r1, [r6, #0]
 80077a4:	4605      	mov	r5, r0
 80077a6:	b911      	cbnz	r1, 80077ae <sbrk_aligned+0x12>
 80077a8:	f000 f9e8 	bl	8007b7c <_sbrk_r>
 80077ac:	6030      	str	r0, [r6, #0]
 80077ae:	4621      	mov	r1, r4
 80077b0:	4628      	mov	r0, r5
 80077b2:	f000 f9e3 	bl	8007b7c <_sbrk_r>
 80077b6:	1c43      	adds	r3, r0, #1
 80077b8:	d00a      	beq.n	80077d0 <sbrk_aligned+0x34>
 80077ba:	1cc4      	adds	r4, r0, #3
 80077bc:	f024 0403 	bic.w	r4, r4, #3
 80077c0:	42a0      	cmp	r0, r4
 80077c2:	d007      	beq.n	80077d4 <sbrk_aligned+0x38>
 80077c4:	1a21      	subs	r1, r4, r0
 80077c6:	4628      	mov	r0, r5
 80077c8:	f000 f9d8 	bl	8007b7c <_sbrk_r>
 80077cc:	3001      	adds	r0, #1
 80077ce:	d101      	bne.n	80077d4 <sbrk_aligned+0x38>
 80077d0:	f04f 34ff 	mov.w	r4, #4294967295
 80077d4:	4620      	mov	r0, r4
 80077d6:	bd70      	pop	{r4, r5, r6, pc}
 80077d8:	20000390 	.word	0x20000390

080077dc <_malloc_r>:
 80077dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077e0:	1ccd      	adds	r5, r1, #3
 80077e2:	f025 0503 	bic.w	r5, r5, #3
 80077e6:	3508      	adds	r5, #8
 80077e8:	2d0c      	cmp	r5, #12
 80077ea:	bf38      	it	cc
 80077ec:	250c      	movcc	r5, #12
 80077ee:	2d00      	cmp	r5, #0
 80077f0:	4607      	mov	r7, r0
 80077f2:	db01      	blt.n	80077f8 <_malloc_r+0x1c>
 80077f4:	42a9      	cmp	r1, r5
 80077f6:	d905      	bls.n	8007804 <_malloc_r+0x28>
 80077f8:	230c      	movs	r3, #12
 80077fa:	603b      	str	r3, [r7, #0]
 80077fc:	2600      	movs	r6, #0
 80077fe:	4630      	mov	r0, r6
 8007800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007804:	4e2e      	ldr	r6, [pc, #184]	; (80078c0 <_malloc_r+0xe4>)
 8007806:	f000 fa25 	bl	8007c54 <__malloc_lock>
 800780a:	6833      	ldr	r3, [r6, #0]
 800780c:	461c      	mov	r4, r3
 800780e:	bb34      	cbnz	r4, 800785e <_malloc_r+0x82>
 8007810:	4629      	mov	r1, r5
 8007812:	4638      	mov	r0, r7
 8007814:	f7ff ffc2 	bl	800779c <sbrk_aligned>
 8007818:	1c43      	adds	r3, r0, #1
 800781a:	4604      	mov	r4, r0
 800781c:	d14d      	bne.n	80078ba <_malloc_r+0xde>
 800781e:	6834      	ldr	r4, [r6, #0]
 8007820:	4626      	mov	r6, r4
 8007822:	2e00      	cmp	r6, #0
 8007824:	d140      	bne.n	80078a8 <_malloc_r+0xcc>
 8007826:	6823      	ldr	r3, [r4, #0]
 8007828:	4631      	mov	r1, r6
 800782a:	4638      	mov	r0, r7
 800782c:	eb04 0803 	add.w	r8, r4, r3
 8007830:	f000 f9a4 	bl	8007b7c <_sbrk_r>
 8007834:	4580      	cmp	r8, r0
 8007836:	d13a      	bne.n	80078ae <_malloc_r+0xd2>
 8007838:	6821      	ldr	r1, [r4, #0]
 800783a:	3503      	adds	r5, #3
 800783c:	1a6d      	subs	r5, r5, r1
 800783e:	f025 0503 	bic.w	r5, r5, #3
 8007842:	3508      	adds	r5, #8
 8007844:	2d0c      	cmp	r5, #12
 8007846:	bf38      	it	cc
 8007848:	250c      	movcc	r5, #12
 800784a:	4629      	mov	r1, r5
 800784c:	4638      	mov	r0, r7
 800784e:	f7ff ffa5 	bl	800779c <sbrk_aligned>
 8007852:	3001      	adds	r0, #1
 8007854:	d02b      	beq.n	80078ae <_malloc_r+0xd2>
 8007856:	6823      	ldr	r3, [r4, #0]
 8007858:	442b      	add	r3, r5
 800785a:	6023      	str	r3, [r4, #0]
 800785c:	e00e      	b.n	800787c <_malloc_r+0xa0>
 800785e:	6822      	ldr	r2, [r4, #0]
 8007860:	1b52      	subs	r2, r2, r5
 8007862:	d41e      	bmi.n	80078a2 <_malloc_r+0xc6>
 8007864:	2a0b      	cmp	r2, #11
 8007866:	d916      	bls.n	8007896 <_malloc_r+0xba>
 8007868:	1961      	adds	r1, r4, r5
 800786a:	42a3      	cmp	r3, r4
 800786c:	6025      	str	r5, [r4, #0]
 800786e:	bf18      	it	ne
 8007870:	6059      	strne	r1, [r3, #4]
 8007872:	6863      	ldr	r3, [r4, #4]
 8007874:	bf08      	it	eq
 8007876:	6031      	streq	r1, [r6, #0]
 8007878:	5162      	str	r2, [r4, r5]
 800787a:	604b      	str	r3, [r1, #4]
 800787c:	4638      	mov	r0, r7
 800787e:	f104 060b 	add.w	r6, r4, #11
 8007882:	f000 f9ed 	bl	8007c60 <__malloc_unlock>
 8007886:	f026 0607 	bic.w	r6, r6, #7
 800788a:	1d23      	adds	r3, r4, #4
 800788c:	1af2      	subs	r2, r6, r3
 800788e:	d0b6      	beq.n	80077fe <_malloc_r+0x22>
 8007890:	1b9b      	subs	r3, r3, r6
 8007892:	50a3      	str	r3, [r4, r2]
 8007894:	e7b3      	b.n	80077fe <_malloc_r+0x22>
 8007896:	6862      	ldr	r2, [r4, #4]
 8007898:	42a3      	cmp	r3, r4
 800789a:	bf0c      	ite	eq
 800789c:	6032      	streq	r2, [r6, #0]
 800789e:	605a      	strne	r2, [r3, #4]
 80078a0:	e7ec      	b.n	800787c <_malloc_r+0xa0>
 80078a2:	4623      	mov	r3, r4
 80078a4:	6864      	ldr	r4, [r4, #4]
 80078a6:	e7b2      	b.n	800780e <_malloc_r+0x32>
 80078a8:	4634      	mov	r4, r6
 80078aa:	6876      	ldr	r6, [r6, #4]
 80078ac:	e7b9      	b.n	8007822 <_malloc_r+0x46>
 80078ae:	230c      	movs	r3, #12
 80078b0:	603b      	str	r3, [r7, #0]
 80078b2:	4638      	mov	r0, r7
 80078b4:	f000 f9d4 	bl	8007c60 <__malloc_unlock>
 80078b8:	e7a1      	b.n	80077fe <_malloc_r+0x22>
 80078ba:	6025      	str	r5, [r4, #0]
 80078bc:	e7de      	b.n	800787c <_malloc_r+0xa0>
 80078be:	bf00      	nop
 80078c0:	2000038c 	.word	0x2000038c

080078c4 <__ssputs_r>:
 80078c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078c8:	688e      	ldr	r6, [r1, #8]
 80078ca:	429e      	cmp	r6, r3
 80078cc:	4682      	mov	sl, r0
 80078ce:	460c      	mov	r4, r1
 80078d0:	4690      	mov	r8, r2
 80078d2:	461f      	mov	r7, r3
 80078d4:	d838      	bhi.n	8007948 <__ssputs_r+0x84>
 80078d6:	898a      	ldrh	r2, [r1, #12]
 80078d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80078dc:	d032      	beq.n	8007944 <__ssputs_r+0x80>
 80078de:	6825      	ldr	r5, [r4, #0]
 80078e0:	6909      	ldr	r1, [r1, #16]
 80078e2:	eba5 0901 	sub.w	r9, r5, r1
 80078e6:	6965      	ldr	r5, [r4, #20]
 80078e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80078f0:	3301      	adds	r3, #1
 80078f2:	444b      	add	r3, r9
 80078f4:	106d      	asrs	r5, r5, #1
 80078f6:	429d      	cmp	r5, r3
 80078f8:	bf38      	it	cc
 80078fa:	461d      	movcc	r5, r3
 80078fc:	0553      	lsls	r3, r2, #21
 80078fe:	d531      	bpl.n	8007964 <__ssputs_r+0xa0>
 8007900:	4629      	mov	r1, r5
 8007902:	f7ff ff6b 	bl	80077dc <_malloc_r>
 8007906:	4606      	mov	r6, r0
 8007908:	b950      	cbnz	r0, 8007920 <__ssputs_r+0x5c>
 800790a:	230c      	movs	r3, #12
 800790c:	f8ca 3000 	str.w	r3, [sl]
 8007910:	89a3      	ldrh	r3, [r4, #12]
 8007912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007916:	81a3      	strh	r3, [r4, #12]
 8007918:	f04f 30ff 	mov.w	r0, #4294967295
 800791c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007920:	6921      	ldr	r1, [r4, #16]
 8007922:	464a      	mov	r2, r9
 8007924:	f7ff fb46 	bl	8006fb4 <memcpy>
 8007928:	89a3      	ldrh	r3, [r4, #12]
 800792a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800792e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007932:	81a3      	strh	r3, [r4, #12]
 8007934:	6126      	str	r6, [r4, #16]
 8007936:	6165      	str	r5, [r4, #20]
 8007938:	444e      	add	r6, r9
 800793a:	eba5 0509 	sub.w	r5, r5, r9
 800793e:	6026      	str	r6, [r4, #0]
 8007940:	60a5      	str	r5, [r4, #8]
 8007942:	463e      	mov	r6, r7
 8007944:	42be      	cmp	r6, r7
 8007946:	d900      	bls.n	800794a <__ssputs_r+0x86>
 8007948:	463e      	mov	r6, r7
 800794a:	6820      	ldr	r0, [r4, #0]
 800794c:	4632      	mov	r2, r6
 800794e:	4641      	mov	r1, r8
 8007950:	f000 f966 	bl	8007c20 <memmove>
 8007954:	68a3      	ldr	r3, [r4, #8]
 8007956:	1b9b      	subs	r3, r3, r6
 8007958:	60a3      	str	r3, [r4, #8]
 800795a:	6823      	ldr	r3, [r4, #0]
 800795c:	4433      	add	r3, r6
 800795e:	6023      	str	r3, [r4, #0]
 8007960:	2000      	movs	r0, #0
 8007962:	e7db      	b.n	800791c <__ssputs_r+0x58>
 8007964:	462a      	mov	r2, r5
 8007966:	f000 f981 	bl	8007c6c <_realloc_r>
 800796a:	4606      	mov	r6, r0
 800796c:	2800      	cmp	r0, #0
 800796e:	d1e1      	bne.n	8007934 <__ssputs_r+0x70>
 8007970:	6921      	ldr	r1, [r4, #16]
 8007972:	4650      	mov	r0, sl
 8007974:	f7ff fec6 	bl	8007704 <_free_r>
 8007978:	e7c7      	b.n	800790a <__ssputs_r+0x46>
	...

0800797c <_svfiprintf_r>:
 800797c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007980:	4698      	mov	r8, r3
 8007982:	898b      	ldrh	r3, [r1, #12]
 8007984:	061b      	lsls	r3, r3, #24
 8007986:	b09d      	sub	sp, #116	; 0x74
 8007988:	4607      	mov	r7, r0
 800798a:	460d      	mov	r5, r1
 800798c:	4614      	mov	r4, r2
 800798e:	d50e      	bpl.n	80079ae <_svfiprintf_r+0x32>
 8007990:	690b      	ldr	r3, [r1, #16]
 8007992:	b963      	cbnz	r3, 80079ae <_svfiprintf_r+0x32>
 8007994:	2140      	movs	r1, #64	; 0x40
 8007996:	f7ff ff21 	bl	80077dc <_malloc_r>
 800799a:	6028      	str	r0, [r5, #0]
 800799c:	6128      	str	r0, [r5, #16]
 800799e:	b920      	cbnz	r0, 80079aa <_svfiprintf_r+0x2e>
 80079a0:	230c      	movs	r3, #12
 80079a2:	603b      	str	r3, [r7, #0]
 80079a4:	f04f 30ff 	mov.w	r0, #4294967295
 80079a8:	e0d1      	b.n	8007b4e <_svfiprintf_r+0x1d2>
 80079aa:	2340      	movs	r3, #64	; 0x40
 80079ac:	616b      	str	r3, [r5, #20]
 80079ae:	2300      	movs	r3, #0
 80079b0:	9309      	str	r3, [sp, #36]	; 0x24
 80079b2:	2320      	movs	r3, #32
 80079b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80079b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80079bc:	2330      	movs	r3, #48	; 0x30
 80079be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007b68 <_svfiprintf_r+0x1ec>
 80079c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079c6:	f04f 0901 	mov.w	r9, #1
 80079ca:	4623      	mov	r3, r4
 80079cc:	469a      	mov	sl, r3
 80079ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079d2:	b10a      	cbz	r2, 80079d8 <_svfiprintf_r+0x5c>
 80079d4:	2a25      	cmp	r2, #37	; 0x25
 80079d6:	d1f9      	bne.n	80079cc <_svfiprintf_r+0x50>
 80079d8:	ebba 0b04 	subs.w	fp, sl, r4
 80079dc:	d00b      	beq.n	80079f6 <_svfiprintf_r+0x7a>
 80079de:	465b      	mov	r3, fp
 80079e0:	4622      	mov	r2, r4
 80079e2:	4629      	mov	r1, r5
 80079e4:	4638      	mov	r0, r7
 80079e6:	f7ff ff6d 	bl	80078c4 <__ssputs_r>
 80079ea:	3001      	adds	r0, #1
 80079ec:	f000 80aa 	beq.w	8007b44 <_svfiprintf_r+0x1c8>
 80079f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079f2:	445a      	add	r2, fp
 80079f4:	9209      	str	r2, [sp, #36]	; 0x24
 80079f6:	f89a 3000 	ldrb.w	r3, [sl]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	f000 80a2 	beq.w	8007b44 <_svfiprintf_r+0x1c8>
 8007a00:	2300      	movs	r3, #0
 8007a02:	f04f 32ff 	mov.w	r2, #4294967295
 8007a06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a0a:	f10a 0a01 	add.w	sl, sl, #1
 8007a0e:	9304      	str	r3, [sp, #16]
 8007a10:	9307      	str	r3, [sp, #28]
 8007a12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a16:	931a      	str	r3, [sp, #104]	; 0x68
 8007a18:	4654      	mov	r4, sl
 8007a1a:	2205      	movs	r2, #5
 8007a1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a20:	4851      	ldr	r0, [pc, #324]	; (8007b68 <_svfiprintf_r+0x1ec>)
 8007a22:	f7f8 fbdd 	bl	80001e0 <memchr>
 8007a26:	9a04      	ldr	r2, [sp, #16]
 8007a28:	b9d8      	cbnz	r0, 8007a62 <_svfiprintf_r+0xe6>
 8007a2a:	06d0      	lsls	r0, r2, #27
 8007a2c:	bf44      	itt	mi
 8007a2e:	2320      	movmi	r3, #32
 8007a30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a34:	0711      	lsls	r1, r2, #28
 8007a36:	bf44      	itt	mi
 8007a38:	232b      	movmi	r3, #43	; 0x2b
 8007a3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a3e:	f89a 3000 	ldrb.w	r3, [sl]
 8007a42:	2b2a      	cmp	r3, #42	; 0x2a
 8007a44:	d015      	beq.n	8007a72 <_svfiprintf_r+0xf6>
 8007a46:	9a07      	ldr	r2, [sp, #28]
 8007a48:	4654      	mov	r4, sl
 8007a4a:	2000      	movs	r0, #0
 8007a4c:	f04f 0c0a 	mov.w	ip, #10
 8007a50:	4621      	mov	r1, r4
 8007a52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a56:	3b30      	subs	r3, #48	; 0x30
 8007a58:	2b09      	cmp	r3, #9
 8007a5a:	d94e      	bls.n	8007afa <_svfiprintf_r+0x17e>
 8007a5c:	b1b0      	cbz	r0, 8007a8c <_svfiprintf_r+0x110>
 8007a5e:	9207      	str	r2, [sp, #28]
 8007a60:	e014      	b.n	8007a8c <_svfiprintf_r+0x110>
 8007a62:	eba0 0308 	sub.w	r3, r0, r8
 8007a66:	fa09 f303 	lsl.w	r3, r9, r3
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	9304      	str	r3, [sp, #16]
 8007a6e:	46a2      	mov	sl, r4
 8007a70:	e7d2      	b.n	8007a18 <_svfiprintf_r+0x9c>
 8007a72:	9b03      	ldr	r3, [sp, #12]
 8007a74:	1d19      	adds	r1, r3, #4
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	9103      	str	r1, [sp, #12]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	bfbb      	ittet	lt
 8007a7e:	425b      	neglt	r3, r3
 8007a80:	f042 0202 	orrlt.w	r2, r2, #2
 8007a84:	9307      	strge	r3, [sp, #28]
 8007a86:	9307      	strlt	r3, [sp, #28]
 8007a88:	bfb8      	it	lt
 8007a8a:	9204      	strlt	r2, [sp, #16]
 8007a8c:	7823      	ldrb	r3, [r4, #0]
 8007a8e:	2b2e      	cmp	r3, #46	; 0x2e
 8007a90:	d10c      	bne.n	8007aac <_svfiprintf_r+0x130>
 8007a92:	7863      	ldrb	r3, [r4, #1]
 8007a94:	2b2a      	cmp	r3, #42	; 0x2a
 8007a96:	d135      	bne.n	8007b04 <_svfiprintf_r+0x188>
 8007a98:	9b03      	ldr	r3, [sp, #12]
 8007a9a:	1d1a      	adds	r2, r3, #4
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	9203      	str	r2, [sp, #12]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	bfb8      	it	lt
 8007aa4:	f04f 33ff 	movlt.w	r3, #4294967295
 8007aa8:	3402      	adds	r4, #2
 8007aaa:	9305      	str	r3, [sp, #20]
 8007aac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007b78 <_svfiprintf_r+0x1fc>
 8007ab0:	7821      	ldrb	r1, [r4, #0]
 8007ab2:	2203      	movs	r2, #3
 8007ab4:	4650      	mov	r0, sl
 8007ab6:	f7f8 fb93 	bl	80001e0 <memchr>
 8007aba:	b140      	cbz	r0, 8007ace <_svfiprintf_r+0x152>
 8007abc:	2340      	movs	r3, #64	; 0x40
 8007abe:	eba0 000a 	sub.w	r0, r0, sl
 8007ac2:	fa03 f000 	lsl.w	r0, r3, r0
 8007ac6:	9b04      	ldr	r3, [sp, #16]
 8007ac8:	4303      	orrs	r3, r0
 8007aca:	3401      	adds	r4, #1
 8007acc:	9304      	str	r3, [sp, #16]
 8007ace:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ad2:	4826      	ldr	r0, [pc, #152]	; (8007b6c <_svfiprintf_r+0x1f0>)
 8007ad4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ad8:	2206      	movs	r2, #6
 8007ada:	f7f8 fb81 	bl	80001e0 <memchr>
 8007ade:	2800      	cmp	r0, #0
 8007ae0:	d038      	beq.n	8007b54 <_svfiprintf_r+0x1d8>
 8007ae2:	4b23      	ldr	r3, [pc, #140]	; (8007b70 <_svfiprintf_r+0x1f4>)
 8007ae4:	bb1b      	cbnz	r3, 8007b2e <_svfiprintf_r+0x1b2>
 8007ae6:	9b03      	ldr	r3, [sp, #12]
 8007ae8:	3307      	adds	r3, #7
 8007aea:	f023 0307 	bic.w	r3, r3, #7
 8007aee:	3308      	adds	r3, #8
 8007af0:	9303      	str	r3, [sp, #12]
 8007af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007af4:	4433      	add	r3, r6
 8007af6:	9309      	str	r3, [sp, #36]	; 0x24
 8007af8:	e767      	b.n	80079ca <_svfiprintf_r+0x4e>
 8007afa:	fb0c 3202 	mla	r2, ip, r2, r3
 8007afe:	460c      	mov	r4, r1
 8007b00:	2001      	movs	r0, #1
 8007b02:	e7a5      	b.n	8007a50 <_svfiprintf_r+0xd4>
 8007b04:	2300      	movs	r3, #0
 8007b06:	3401      	adds	r4, #1
 8007b08:	9305      	str	r3, [sp, #20]
 8007b0a:	4619      	mov	r1, r3
 8007b0c:	f04f 0c0a 	mov.w	ip, #10
 8007b10:	4620      	mov	r0, r4
 8007b12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b16:	3a30      	subs	r2, #48	; 0x30
 8007b18:	2a09      	cmp	r2, #9
 8007b1a:	d903      	bls.n	8007b24 <_svfiprintf_r+0x1a8>
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d0c5      	beq.n	8007aac <_svfiprintf_r+0x130>
 8007b20:	9105      	str	r1, [sp, #20]
 8007b22:	e7c3      	b.n	8007aac <_svfiprintf_r+0x130>
 8007b24:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b28:	4604      	mov	r4, r0
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e7f0      	b.n	8007b10 <_svfiprintf_r+0x194>
 8007b2e:	ab03      	add	r3, sp, #12
 8007b30:	9300      	str	r3, [sp, #0]
 8007b32:	462a      	mov	r2, r5
 8007b34:	4b0f      	ldr	r3, [pc, #60]	; (8007b74 <_svfiprintf_r+0x1f8>)
 8007b36:	a904      	add	r1, sp, #16
 8007b38:	4638      	mov	r0, r7
 8007b3a:	f7fd ffc9 	bl	8005ad0 <_printf_float>
 8007b3e:	1c42      	adds	r2, r0, #1
 8007b40:	4606      	mov	r6, r0
 8007b42:	d1d6      	bne.n	8007af2 <_svfiprintf_r+0x176>
 8007b44:	89ab      	ldrh	r3, [r5, #12]
 8007b46:	065b      	lsls	r3, r3, #25
 8007b48:	f53f af2c 	bmi.w	80079a4 <_svfiprintf_r+0x28>
 8007b4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b4e:	b01d      	add	sp, #116	; 0x74
 8007b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b54:	ab03      	add	r3, sp, #12
 8007b56:	9300      	str	r3, [sp, #0]
 8007b58:	462a      	mov	r2, r5
 8007b5a:	4b06      	ldr	r3, [pc, #24]	; (8007b74 <_svfiprintf_r+0x1f8>)
 8007b5c:	a904      	add	r1, sp, #16
 8007b5e:	4638      	mov	r0, r7
 8007b60:	f7fe fa5a 	bl	8006018 <_printf_i>
 8007b64:	e7eb      	b.n	8007b3e <_svfiprintf_r+0x1c2>
 8007b66:	bf00      	nop
 8007b68:	08008a3c 	.word	0x08008a3c
 8007b6c:	08008a46 	.word	0x08008a46
 8007b70:	08005ad1 	.word	0x08005ad1
 8007b74:	080078c5 	.word	0x080078c5
 8007b78:	08008a42 	.word	0x08008a42

08007b7c <_sbrk_r>:
 8007b7c:	b538      	push	{r3, r4, r5, lr}
 8007b7e:	4d06      	ldr	r5, [pc, #24]	; (8007b98 <_sbrk_r+0x1c>)
 8007b80:	2300      	movs	r3, #0
 8007b82:	4604      	mov	r4, r0
 8007b84:	4608      	mov	r0, r1
 8007b86:	602b      	str	r3, [r5, #0]
 8007b88:	f7f9 fec6 	bl	8001918 <_sbrk>
 8007b8c:	1c43      	adds	r3, r0, #1
 8007b8e:	d102      	bne.n	8007b96 <_sbrk_r+0x1a>
 8007b90:	682b      	ldr	r3, [r5, #0]
 8007b92:	b103      	cbz	r3, 8007b96 <_sbrk_r+0x1a>
 8007b94:	6023      	str	r3, [r4, #0]
 8007b96:	bd38      	pop	{r3, r4, r5, pc}
 8007b98:	20000394 	.word	0x20000394

08007b9c <__assert_func>:
 8007b9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b9e:	4614      	mov	r4, r2
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	4b09      	ldr	r3, [pc, #36]	; (8007bc8 <__assert_func+0x2c>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4605      	mov	r5, r0
 8007ba8:	68d8      	ldr	r0, [r3, #12]
 8007baa:	b14c      	cbz	r4, 8007bc0 <__assert_func+0x24>
 8007bac:	4b07      	ldr	r3, [pc, #28]	; (8007bcc <__assert_func+0x30>)
 8007bae:	9100      	str	r1, [sp, #0]
 8007bb0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007bb4:	4906      	ldr	r1, [pc, #24]	; (8007bd0 <__assert_func+0x34>)
 8007bb6:	462b      	mov	r3, r5
 8007bb8:	f000 f80e 	bl	8007bd8 <fiprintf>
 8007bbc:	f000 faac 	bl	8008118 <abort>
 8007bc0:	4b04      	ldr	r3, [pc, #16]	; (8007bd4 <__assert_func+0x38>)
 8007bc2:	461c      	mov	r4, r3
 8007bc4:	e7f3      	b.n	8007bae <__assert_func+0x12>
 8007bc6:	bf00      	nop
 8007bc8:	2000000c 	.word	0x2000000c
 8007bcc:	08008a4d 	.word	0x08008a4d
 8007bd0:	08008a5a 	.word	0x08008a5a
 8007bd4:	08008a88 	.word	0x08008a88

08007bd8 <fiprintf>:
 8007bd8:	b40e      	push	{r1, r2, r3}
 8007bda:	b503      	push	{r0, r1, lr}
 8007bdc:	4601      	mov	r1, r0
 8007bde:	ab03      	add	r3, sp, #12
 8007be0:	4805      	ldr	r0, [pc, #20]	; (8007bf8 <fiprintf+0x20>)
 8007be2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007be6:	6800      	ldr	r0, [r0, #0]
 8007be8:	9301      	str	r3, [sp, #4]
 8007bea:	f000 f897 	bl	8007d1c <_vfiprintf_r>
 8007bee:	b002      	add	sp, #8
 8007bf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007bf4:	b003      	add	sp, #12
 8007bf6:	4770      	bx	lr
 8007bf8:	2000000c 	.word	0x2000000c

08007bfc <__ascii_mbtowc>:
 8007bfc:	b082      	sub	sp, #8
 8007bfe:	b901      	cbnz	r1, 8007c02 <__ascii_mbtowc+0x6>
 8007c00:	a901      	add	r1, sp, #4
 8007c02:	b142      	cbz	r2, 8007c16 <__ascii_mbtowc+0x1a>
 8007c04:	b14b      	cbz	r3, 8007c1a <__ascii_mbtowc+0x1e>
 8007c06:	7813      	ldrb	r3, [r2, #0]
 8007c08:	600b      	str	r3, [r1, #0]
 8007c0a:	7812      	ldrb	r2, [r2, #0]
 8007c0c:	1e10      	subs	r0, r2, #0
 8007c0e:	bf18      	it	ne
 8007c10:	2001      	movne	r0, #1
 8007c12:	b002      	add	sp, #8
 8007c14:	4770      	bx	lr
 8007c16:	4610      	mov	r0, r2
 8007c18:	e7fb      	b.n	8007c12 <__ascii_mbtowc+0x16>
 8007c1a:	f06f 0001 	mvn.w	r0, #1
 8007c1e:	e7f8      	b.n	8007c12 <__ascii_mbtowc+0x16>

08007c20 <memmove>:
 8007c20:	4288      	cmp	r0, r1
 8007c22:	b510      	push	{r4, lr}
 8007c24:	eb01 0402 	add.w	r4, r1, r2
 8007c28:	d902      	bls.n	8007c30 <memmove+0x10>
 8007c2a:	4284      	cmp	r4, r0
 8007c2c:	4623      	mov	r3, r4
 8007c2e:	d807      	bhi.n	8007c40 <memmove+0x20>
 8007c30:	1e43      	subs	r3, r0, #1
 8007c32:	42a1      	cmp	r1, r4
 8007c34:	d008      	beq.n	8007c48 <memmove+0x28>
 8007c36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c3e:	e7f8      	b.n	8007c32 <memmove+0x12>
 8007c40:	4402      	add	r2, r0
 8007c42:	4601      	mov	r1, r0
 8007c44:	428a      	cmp	r2, r1
 8007c46:	d100      	bne.n	8007c4a <memmove+0x2a>
 8007c48:	bd10      	pop	{r4, pc}
 8007c4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c52:	e7f7      	b.n	8007c44 <memmove+0x24>

08007c54 <__malloc_lock>:
 8007c54:	4801      	ldr	r0, [pc, #4]	; (8007c5c <__malloc_lock+0x8>)
 8007c56:	f000 bc1f 	b.w	8008498 <__retarget_lock_acquire_recursive>
 8007c5a:	bf00      	nop
 8007c5c:	20000398 	.word	0x20000398

08007c60 <__malloc_unlock>:
 8007c60:	4801      	ldr	r0, [pc, #4]	; (8007c68 <__malloc_unlock+0x8>)
 8007c62:	f000 bc1a 	b.w	800849a <__retarget_lock_release_recursive>
 8007c66:	bf00      	nop
 8007c68:	20000398 	.word	0x20000398

08007c6c <_realloc_r>:
 8007c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c70:	4680      	mov	r8, r0
 8007c72:	4614      	mov	r4, r2
 8007c74:	460e      	mov	r6, r1
 8007c76:	b921      	cbnz	r1, 8007c82 <_realloc_r+0x16>
 8007c78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c7c:	4611      	mov	r1, r2
 8007c7e:	f7ff bdad 	b.w	80077dc <_malloc_r>
 8007c82:	b92a      	cbnz	r2, 8007c90 <_realloc_r+0x24>
 8007c84:	f7ff fd3e 	bl	8007704 <_free_r>
 8007c88:	4625      	mov	r5, r4
 8007c8a:	4628      	mov	r0, r5
 8007c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c90:	f000 fc6a 	bl	8008568 <_malloc_usable_size_r>
 8007c94:	4284      	cmp	r4, r0
 8007c96:	4607      	mov	r7, r0
 8007c98:	d802      	bhi.n	8007ca0 <_realloc_r+0x34>
 8007c9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007c9e:	d812      	bhi.n	8007cc6 <_realloc_r+0x5a>
 8007ca0:	4621      	mov	r1, r4
 8007ca2:	4640      	mov	r0, r8
 8007ca4:	f7ff fd9a 	bl	80077dc <_malloc_r>
 8007ca8:	4605      	mov	r5, r0
 8007caa:	2800      	cmp	r0, #0
 8007cac:	d0ed      	beq.n	8007c8a <_realloc_r+0x1e>
 8007cae:	42bc      	cmp	r4, r7
 8007cb0:	4622      	mov	r2, r4
 8007cb2:	4631      	mov	r1, r6
 8007cb4:	bf28      	it	cs
 8007cb6:	463a      	movcs	r2, r7
 8007cb8:	f7ff f97c 	bl	8006fb4 <memcpy>
 8007cbc:	4631      	mov	r1, r6
 8007cbe:	4640      	mov	r0, r8
 8007cc0:	f7ff fd20 	bl	8007704 <_free_r>
 8007cc4:	e7e1      	b.n	8007c8a <_realloc_r+0x1e>
 8007cc6:	4635      	mov	r5, r6
 8007cc8:	e7df      	b.n	8007c8a <_realloc_r+0x1e>

08007cca <__sfputc_r>:
 8007cca:	6893      	ldr	r3, [r2, #8]
 8007ccc:	3b01      	subs	r3, #1
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	b410      	push	{r4}
 8007cd2:	6093      	str	r3, [r2, #8]
 8007cd4:	da08      	bge.n	8007ce8 <__sfputc_r+0x1e>
 8007cd6:	6994      	ldr	r4, [r2, #24]
 8007cd8:	42a3      	cmp	r3, r4
 8007cda:	db01      	blt.n	8007ce0 <__sfputc_r+0x16>
 8007cdc:	290a      	cmp	r1, #10
 8007cde:	d103      	bne.n	8007ce8 <__sfputc_r+0x1e>
 8007ce0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ce4:	f000 b94a 	b.w	8007f7c <__swbuf_r>
 8007ce8:	6813      	ldr	r3, [r2, #0]
 8007cea:	1c58      	adds	r0, r3, #1
 8007cec:	6010      	str	r0, [r2, #0]
 8007cee:	7019      	strb	r1, [r3, #0]
 8007cf0:	4608      	mov	r0, r1
 8007cf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <__sfputs_r>:
 8007cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cfa:	4606      	mov	r6, r0
 8007cfc:	460f      	mov	r7, r1
 8007cfe:	4614      	mov	r4, r2
 8007d00:	18d5      	adds	r5, r2, r3
 8007d02:	42ac      	cmp	r4, r5
 8007d04:	d101      	bne.n	8007d0a <__sfputs_r+0x12>
 8007d06:	2000      	movs	r0, #0
 8007d08:	e007      	b.n	8007d1a <__sfputs_r+0x22>
 8007d0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d0e:	463a      	mov	r2, r7
 8007d10:	4630      	mov	r0, r6
 8007d12:	f7ff ffda 	bl	8007cca <__sfputc_r>
 8007d16:	1c43      	adds	r3, r0, #1
 8007d18:	d1f3      	bne.n	8007d02 <__sfputs_r+0xa>
 8007d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007d1c <_vfiprintf_r>:
 8007d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d20:	460d      	mov	r5, r1
 8007d22:	b09d      	sub	sp, #116	; 0x74
 8007d24:	4614      	mov	r4, r2
 8007d26:	4698      	mov	r8, r3
 8007d28:	4606      	mov	r6, r0
 8007d2a:	b118      	cbz	r0, 8007d34 <_vfiprintf_r+0x18>
 8007d2c:	6983      	ldr	r3, [r0, #24]
 8007d2e:	b90b      	cbnz	r3, 8007d34 <_vfiprintf_r+0x18>
 8007d30:	f000 fb14 	bl	800835c <__sinit>
 8007d34:	4b89      	ldr	r3, [pc, #548]	; (8007f5c <_vfiprintf_r+0x240>)
 8007d36:	429d      	cmp	r5, r3
 8007d38:	d11b      	bne.n	8007d72 <_vfiprintf_r+0x56>
 8007d3a:	6875      	ldr	r5, [r6, #4]
 8007d3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d3e:	07d9      	lsls	r1, r3, #31
 8007d40:	d405      	bmi.n	8007d4e <_vfiprintf_r+0x32>
 8007d42:	89ab      	ldrh	r3, [r5, #12]
 8007d44:	059a      	lsls	r2, r3, #22
 8007d46:	d402      	bmi.n	8007d4e <_vfiprintf_r+0x32>
 8007d48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d4a:	f000 fba5 	bl	8008498 <__retarget_lock_acquire_recursive>
 8007d4e:	89ab      	ldrh	r3, [r5, #12]
 8007d50:	071b      	lsls	r3, r3, #28
 8007d52:	d501      	bpl.n	8007d58 <_vfiprintf_r+0x3c>
 8007d54:	692b      	ldr	r3, [r5, #16]
 8007d56:	b9eb      	cbnz	r3, 8007d94 <_vfiprintf_r+0x78>
 8007d58:	4629      	mov	r1, r5
 8007d5a:	4630      	mov	r0, r6
 8007d5c:	f000 f96e 	bl	800803c <__swsetup_r>
 8007d60:	b1c0      	cbz	r0, 8007d94 <_vfiprintf_r+0x78>
 8007d62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d64:	07dc      	lsls	r4, r3, #31
 8007d66:	d50e      	bpl.n	8007d86 <_vfiprintf_r+0x6a>
 8007d68:	f04f 30ff 	mov.w	r0, #4294967295
 8007d6c:	b01d      	add	sp, #116	; 0x74
 8007d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d72:	4b7b      	ldr	r3, [pc, #492]	; (8007f60 <_vfiprintf_r+0x244>)
 8007d74:	429d      	cmp	r5, r3
 8007d76:	d101      	bne.n	8007d7c <_vfiprintf_r+0x60>
 8007d78:	68b5      	ldr	r5, [r6, #8]
 8007d7a:	e7df      	b.n	8007d3c <_vfiprintf_r+0x20>
 8007d7c:	4b79      	ldr	r3, [pc, #484]	; (8007f64 <_vfiprintf_r+0x248>)
 8007d7e:	429d      	cmp	r5, r3
 8007d80:	bf08      	it	eq
 8007d82:	68f5      	ldreq	r5, [r6, #12]
 8007d84:	e7da      	b.n	8007d3c <_vfiprintf_r+0x20>
 8007d86:	89ab      	ldrh	r3, [r5, #12]
 8007d88:	0598      	lsls	r0, r3, #22
 8007d8a:	d4ed      	bmi.n	8007d68 <_vfiprintf_r+0x4c>
 8007d8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d8e:	f000 fb84 	bl	800849a <__retarget_lock_release_recursive>
 8007d92:	e7e9      	b.n	8007d68 <_vfiprintf_r+0x4c>
 8007d94:	2300      	movs	r3, #0
 8007d96:	9309      	str	r3, [sp, #36]	; 0x24
 8007d98:	2320      	movs	r3, #32
 8007d9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007da2:	2330      	movs	r3, #48	; 0x30
 8007da4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007f68 <_vfiprintf_r+0x24c>
 8007da8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007dac:	f04f 0901 	mov.w	r9, #1
 8007db0:	4623      	mov	r3, r4
 8007db2:	469a      	mov	sl, r3
 8007db4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007db8:	b10a      	cbz	r2, 8007dbe <_vfiprintf_r+0xa2>
 8007dba:	2a25      	cmp	r2, #37	; 0x25
 8007dbc:	d1f9      	bne.n	8007db2 <_vfiprintf_r+0x96>
 8007dbe:	ebba 0b04 	subs.w	fp, sl, r4
 8007dc2:	d00b      	beq.n	8007ddc <_vfiprintf_r+0xc0>
 8007dc4:	465b      	mov	r3, fp
 8007dc6:	4622      	mov	r2, r4
 8007dc8:	4629      	mov	r1, r5
 8007dca:	4630      	mov	r0, r6
 8007dcc:	f7ff ff94 	bl	8007cf8 <__sfputs_r>
 8007dd0:	3001      	adds	r0, #1
 8007dd2:	f000 80aa 	beq.w	8007f2a <_vfiprintf_r+0x20e>
 8007dd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007dd8:	445a      	add	r2, fp
 8007dda:	9209      	str	r2, [sp, #36]	; 0x24
 8007ddc:	f89a 3000 	ldrb.w	r3, [sl]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	f000 80a2 	beq.w	8007f2a <_vfiprintf_r+0x20e>
 8007de6:	2300      	movs	r3, #0
 8007de8:	f04f 32ff 	mov.w	r2, #4294967295
 8007dec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007df0:	f10a 0a01 	add.w	sl, sl, #1
 8007df4:	9304      	str	r3, [sp, #16]
 8007df6:	9307      	str	r3, [sp, #28]
 8007df8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007dfc:	931a      	str	r3, [sp, #104]	; 0x68
 8007dfe:	4654      	mov	r4, sl
 8007e00:	2205      	movs	r2, #5
 8007e02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e06:	4858      	ldr	r0, [pc, #352]	; (8007f68 <_vfiprintf_r+0x24c>)
 8007e08:	f7f8 f9ea 	bl	80001e0 <memchr>
 8007e0c:	9a04      	ldr	r2, [sp, #16]
 8007e0e:	b9d8      	cbnz	r0, 8007e48 <_vfiprintf_r+0x12c>
 8007e10:	06d1      	lsls	r1, r2, #27
 8007e12:	bf44      	itt	mi
 8007e14:	2320      	movmi	r3, #32
 8007e16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e1a:	0713      	lsls	r3, r2, #28
 8007e1c:	bf44      	itt	mi
 8007e1e:	232b      	movmi	r3, #43	; 0x2b
 8007e20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e24:	f89a 3000 	ldrb.w	r3, [sl]
 8007e28:	2b2a      	cmp	r3, #42	; 0x2a
 8007e2a:	d015      	beq.n	8007e58 <_vfiprintf_r+0x13c>
 8007e2c:	9a07      	ldr	r2, [sp, #28]
 8007e2e:	4654      	mov	r4, sl
 8007e30:	2000      	movs	r0, #0
 8007e32:	f04f 0c0a 	mov.w	ip, #10
 8007e36:	4621      	mov	r1, r4
 8007e38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e3c:	3b30      	subs	r3, #48	; 0x30
 8007e3e:	2b09      	cmp	r3, #9
 8007e40:	d94e      	bls.n	8007ee0 <_vfiprintf_r+0x1c4>
 8007e42:	b1b0      	cbz	r0, 8007e72 <_vfiprintf_r+0x156>
 8007e44:	9207      	str	r2, [sp, #28]
 8007e46:	e014      	b.n	8007e72 <_vfiprintf_r+0x156>
 8007e48:	eba0 0308 	sub.w	r3, r0, r8
 8007e4c:	fa09 f303 	lsl.w	r3, r9, r3
 8007e50:	4313      	orrs	r3, r2
 8007e52:	9304      	str	r3, [sp, #16]
 8007e54:	46a2      	mov	sl, r4
 8007e56:	e7d2      	b.n	8007dfe <_vfiprintf_r+0xe2>
 8007e58:	9b03      	ldr	r3, [sp, #12]
 8007e5a:	1d19      	adds	r1, r3, #4
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	9103      	str	r1, [sp, #12]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	bfbb      	ittet	lt
 8007e64:	425b      	neglt	r3, r3
 8007e66:	f042 0202 	orrlt.w	r2, r2, #2
 8007e6a:	9307      	strge	r3, [sp, #28]
 8007e6c:	9307      	strlt	r3, [sp, #28]
 8007e6e:	bfb8      	it	lt
 8007e70:	9204      	strlt	r2, [sp, #16]
 8007e72:	7823      	ldrb	r3, [r4, #0]
 8007e74:	2b2e      	cmp	r3, #46	; 0x2e
 8007e76:	d10c      	bne.n	8007e92 <_vfiprintf_r+0x176>
 8007e78:	7863      	ldrb	r3, [r4, #1]
 8007e7a:	2b2a      	cmp	r3, #42	; 0x2a
 8007e7c:	d135      	bne.n	8007eea <_vfiprintf_r+0x1ce>
 8007e7e:	9b03      	ldr	r3, [sp, #12]
 8007e80:	1d1a      	adds	r2, r3, #4
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	9203      	str	r2, [sp, #12]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	bfb8      	it	lt
 8007e8a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e8e:	3402      	adds	r4, #2
 8007e90:	9305      	str	r3, [sp, #20]
 8007e92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007f78 <_vfiprintf_r+0x25c>
 8007e96:	7821      	ldrb	r1, [r4, #0]
 8007e98:	2203      	movs	r2, #3
 8007e9a:	4650      	mov	r0, sl
 8007e9c:	f7f8 f9a0 	bl	80001e0 <memchr>
 8007ea0:	b140      	cbz	r0, 8007eb4 <_vfiprintf_r+0x198>
 8007ea2:	2340      	movs	r3, #64	; 0x40
 8007ea4:	eba0 000a 	sub.w	r0, r0, sl
 8007ea8:	fa03 f000 	lsl.w	r0, r3, r0
 8007eac:	9b04      	ldr	r3, [sp, #16]
 8007eae:	4303      	orrs	r3, r0
 8007eb0:	3401      	adds	r4, #1
 8007eb2:	9304      	str	r3, [sp, #16]
 8007eb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007eb8:	482c      	ldr	r0, [pc, #176]	; (8007f6c <_vfiprintf_r+0x250>)
 8007eba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ebe:	2206      	movs	r2, #6
 8007ec0:	f7f8 f98e 	bl	80001e0 <memchr>
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	d03f      	beq.n	8007f48 <_vfiprintf_r+0x22c>
 8007ec8:	4b29      	ldr	r3, [pc, #164]	; (8007f70 <_vfiprintf_r+0x254>)
 8007eca:	bb1b      	cbnz	r3, 8007f14 <_vfiprintf_r+0x1f8>
 8007ecc:	9b03      	ldr	r3, [sp, #12]
 8007ece:	3307      	adds	r3, #7
 8007ed0:	f023 0307 	bic.w	r3, r3, #7
 8007ed4:	3308      	adds	r3, #8
 8007ed6:	9303      	str	r3, [sp, #12]
 8007ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eda:	443b      	add	r3, r7
 8007edc:	9309      	str	r3, [sp, #36]	; 0x24
 8007ede:	e767      	b.n	8007db0 <_vfiprintf_r+0x94>
 8007ee0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ee4:	460c      	mov	r4, r1
 8007ee6:	2001      	movs	r0, #1
 8007ee8:	e7a5      	b.n	8007e36 <_vfiprintf_r+0x11a>
 8007eea:	2300      	movs	r3, #0
 8007eec:	3401      	adds	r4, #1
 8007eee:	9305      	str	r3, [sp, #20]
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	f04f 0c0a 	mov.w	ip, #10
 8007ef6:	4620      	mov	r0, r4
 8007ef8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007efc:	3a30      	subs	r2, #48	; 0x30
 8007efe:	2a09      	cmp	r2, #9
 8007f00:	d903      	bls.n	8007f0a <_vfiprintf_r+0x1ee>
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d0c5      	beq.n	8007e92 <_vfiprintf_r+0x176>
 8007f06:	9105      	str	r1, [sp, #20]
 8007f08:	e7c3      	b.n	8007e92 <_vfiprintf_r+0x176>
 8007f0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f0e:	4604      	mov	r4, r0
 8007f10:	2301      	movs	r3, #1
 8007f12:	e7f0      	b.n	8007ef6 <_vfiprintf_r+0x1da>
 8007f14:	ab03      	add	r3, sp, #12
 8007f16:	9300      	str	r3, [sp, #0]
 8007f18:	462a      	mov	r2, r5
 8007f1a:	4b16      	ldr	r3, [pc, #88]	; (8007f74 <_vfiprintf_r+0x258>)
 8007f1c:	a904      	add	r1, sp, #16
 8007f1e:	4630      	mov	r0, r6
 8007f20:	f7fd fdd6 	bl	8005ad0 <_printf_float>
 8007f24:	4607      	mov	r7, r0
 8007f26:	1c78      	adds	r0, r7, #1
 8007f28:	d1d6      	bne.n	8007ed8 <_vfiprintf_r+0x1bc>
 8007f2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f2c:	07d9      	lsls	r1, r3, #31
 8007f2e:	d405      	bmi.n	8007f3c <_vfiprintf_r+0x220>
 8007f30:	89ab      	ldrh	r3, [r5, #12]
 8007f32:	059a      	lsls	r2, r3, #22
 8007f34:	d402      	bmi.n	8007f3c <_vfiprintf_r+0x220>
 8007f36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f38:	f000 faaf 	bl	800849a <__retarget_lock_release_recursive>
 8007f3c:	89ab      	ldrh	r3, [r5, #12]
 8007f3e:	065b      	lsls	r3, r3, #25
 8007f40:	f53f af12 	bmi.w	8007d68 <_vfiprintf_r+0x4c>
 8007f44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f46:	e711      	b.n	8007d6c <_vfiprintf_r+0x50>
 8007f48:	ab03      	add	r3, sp, #12
 8007f4a:	9300      	str	r3, [sp, #0]
 8007f4c:	462a      	mov	r2, r5
 8007f4e:	4b09      	ldr	r3, [pc, #36]	; (8007f74 <_vfiprintf_r+0x258>)
 8007f50:	a904      	add	r1, sp, #16
 8007f52:	4630      	mov	r0, r6
 8007f54:	f7fe f860 	bl	8006018 <_printf_i>
 8007f58:	e7e4      	b.n	8007f24 <_vfiprintf_r+0x208>
 8007f5a:	bf00      	nop
 8007f5c:	08008bb4 	.word	0x08008bb4
 8007f60:	08008bd4 	.word	0x08008bd4
 8007f64:	08008b94 	.word	0x08008b94
 8007f68:	08008a3c 	.word	0x08008a3c
 8007f6c:	08008a46 	.word	0x08008a46
 8007f70:	08005ad1 	.word	0x08005ad1
 8007f74:	08007cf9 	.word	0x08007cf9
 8007f78:	08008a42 	.word	0x08008a42

08007f7c <__swbuf_r>:
 8007f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f7e:	460e      	mov	r6, r1
 8007f80:	4614      	mov	r4, r2
 8007f82:	4605      	mov	r5, r0
 8007f84:	b118      	cbz	r0, 8007f8e <__swbuf_r+0x12>
 8007f86:	6983      	ldr	r3, [r0, #24]
 8007f88:	b90b      	cbnz	r3, 8007f8e <__swbuf_r+0x12>
 8007f8a:	f000 f9e7 	bl	800835c <__sinit>
 8007f8e:	4b21      	ldr	r3, [pc, #132]	; (8008014 <__swbuf_r+0x98>)
 8007f90:	429c      	cmp	r4, r3
 8007f92:	d12b      	bne.n	8007fec <__swbuf_r+0x70>
 8007f94:	686c      	ldr	r4, [r5, #4]
 8007f96:	69a3      	ldr	r3, [r4, #24]
 8007f98:	60a3      	str	r3, [r4, #8]
 8007f9a:	89a3      	ldrh	r3, [r4, #12]
 8007f9c:	071a      	lsls	r2, r3, #28
 8007f9e:	d52f      	bpl.n	8008000 <__swbuf_r+0x84>
 8007fa0:	6923      	ldr	r3, [r4, #16]
 8007fa2:	b36b      	cbz	r3, 8008000 <__swbuf_r+0x84>
 8007fa4:	6923      	ldr	r3, [r4, #16]
 8007fa6:	6820      	ldr	r0, [r4, #0]
 8007fa8:	1ac0      	subs	r0, r0, r3
 8007faa:	6963      	ldr	r3, [r4, #20]
 8007fac:	b2f6      	uxtb	r6, r6
 8007fae:	4283      	cmp	r3, r0
 8007fb0:	4637      	mov	r7, r6
 8007fb2:	dc04      	bgt.n	8007fbe <__swbuf_r+0x42>
 8007fb4:	4621      	mov	r1, r4
 8007fb6:	4628      	mov	r0, r5
 8007fb8:	f000 f93c 	bl	8008234 <_fflush_r>
 8007fbc:	bb30      	cbnz	r0, 800800c <__swbuf_r+0x90>
 8007fbe:	68a3      	ldr	r3, [r4, #8]
 8007fc0:	3b01      	subs	r3, #1
 8007fc2:	60a3      	str	r3, [r4, #8]
 8007fc4:	6823      	ldr	r3, [r4, #0]
 8007fc6:	1c5a      	adds	r2, r3, #1
 8007fc8:	6022      	str	r2, [r4, #0]
 8007fca:	701e      	strb	r6, [r3, #0]
 8007fcc:	6963      	ldr	r3, [r4, #20]
 8007fce:	3001      	adds	r0, #1
 8007fd0:	4283      	cmp	r3, r0
 8007fd2:	d004      	beq.n	8007fde <__swbuf_r+0x62>
 8007fd4:	89a3      	ldrh	r3, [r4, #12]
 8007fd6:	07db      	lsls	r3, r3, #31
 8007fd8:	d506      	bpl.n	8007fe8 <__swbuf_r+0x6c>
 8007fda:	2e0a      	cmp	r6, #10
 8007fdc:	d104      	bne.n	8007fe8 <__swbuf_r+0x6c>
 8007fde:	4621      	mov	r1, r4
 8007fe0:	4628      	mov	r0, r5
 8007fe2:	f000 f927 	bl	8008234 <_fflush_r>
 8007fe6:	b988      	cbnz	r0, 800800c <__swbuf_r+0x90>
 8007fe8:	4638      	mov	r0, r7
 8007fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fec:	4b0a      	ldr	r3, [pc, #40]	; (8008018 <__swbuf_r+0x9c>)
 8007fee:	429c      	cmp	r4, r3
 8007ff0:	d101      	bne.n	8007ff6 <__swbuf_r+0x7a>
 8007ff2:	68ac      	ldr	r4, [r5, #8]
 8007ff4:	e7cf      	b.n	8007f96 <__swbuf_r+0x1a>
 8007ff6:	4b09      	ldr	r3, [pc, #36]	; (800801c <__swbuf_r+0xa0>)
 8007ff8:	429c      	cmp	r4, r3
 8007ffa:	bf08      	it	eq
 8007ffc:	68ec      	ldreq	r4, [r5, #12]
 8007ffe:	e7ca      	b.n	8007f96 <__swbuf_r+0x1a>
 8008000:	4621      	mov	r1, r4
 8008002:	4628      	mov	r0, r5
 8008004:	f000 f81a 	bl	800803c <__swsetup_r>
 8008008:	2800      	cmp	r0, #0
 800800a:	d0cb      	beq.n	8007fa4 <__swbuf_r+0x28>
 800800c:	f04f 37ff 	mov.w	r7, #4294967295
 8008010:	e7ea      	b.n	8007fe8 <__swbuf_r+0x6c>
 8008012:	bf00      	nop
 8008014:	08008bb4 	.word	0x08008bb4
 8008018:	08008bd4 	.word	0x08008bd4
 800801c:	08008b94 	.word	0x08008b94

08008020 <__ascii_wctomb>:
 8008020:	b149      	cbz	r1, 8008036 <__ascii_wctomb+0x16>
 8008022:	2aff      	cmp	r2, #255	; 0xff
 8008024:	bf85      	ittet	hi
 8008026:	238a      	movhi	r3, #138	; 0x8a
 8008028:	6003      	strhi	r3, [r0, #0]
 800802a:	700a      	strbls	r2, [r1, #0]
 800802c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008030:	bf98      	it	ls
 8008032:	2001      	movls	r0, #1
 8008034:	4770      	bx	lr
 8008036:	4608      	mov	r0, r1
 8008038:	4770      	bx	lr
	...

0800803c <__swsetup_r>:
 800803c:	4b32      	ldr	r3, [pc, #200]	; (8008108 <__swsetup_r+0xcc>)
 800803e:	b570      	push	{r4, r5, r6, lr}
 8008040:	681d      	ldr	r5, [r3, #0]
 8008042:	4606      	mov	r6, r0
 8008044:	460c      	mov	r4, r1
 8008046:	b125      	cbz	r5, 8008052 <__swsetup_r+0x16>
 8008048:	69ab      	ldr	r3, [r5, #24]
 800804a:	b913      	cbnz	r3, 8008052 <__swsetup_r+0x16>
 800804c:	4628      	mov	r0, r5
 800804e:	f000 f985 	bl	800835c <__sinit>
 8008052:	4b2e      	ldr	r3, [pc, #184]	; (800810c <__swsetup_r+0xd0>)
 8008054:	429c      	cmp	r4, r3
 8008056:	d10f      	bne.n	8008078 <__swsetup_r+0x3c>
 8008058:	686c      	ldr	r4, [r5, #4]
 800805a:	89a3      	ldrh	r3, [r4, #12]
 800805c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008060:	0719      	lsls	r1, r3, #28
 8008062:	d42c      	bmi.n	80080be <__swsetup_r+0x82>
 8008064:	06dd      	lsls	r5, r3, #27
 8008066:	d411      	bmi.n	800808c <__swsetup_r+0x50>
 8008068:	2309      	movs	r3, #9
 800806a:	6033      	str	r3, [r6, #0]
 800806c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008070:	81a3      	strh	r3, [r4, #12]
 8008072:	f04f 30ff 	mov.w	r0, #4294967295
 8008076:	e03e      	b.n	80080f6 <__swsetup_r+0xba>
 8008078:	4b25      	ldr	r3, [pc, #148]	; (8008110 <__swsetup_r+0xd4>)
 800807a:	429c      	cmp	r4, r3
 800807c:	d101      	bne.n	8008082 <__swsetup_r+0x46>
 800807e:	68ac      	ldr	r4, [r5, #8]
 8008080:	e7eb      	b.n	800805a <__swsetup_r+0x1e>
 8008082:	4b24      	ldr	r3, [pc, #144]	; (8008114 <__swsetup_r+0xd8>)
 8008084:	429c      	cmp	r4, r3
 8008086:	bf08      	it	eq
 8008088:	68ec      	ldreq	r4, [r5, #12]
 800808a:	e7e6      	b.n	800805a <__swsetup_r+0x1e>
 800808c:	0758      	lsls	r0, r3, #29
 800808e:	d512      	bpl.n	80080b6 <__swsetup_r+0x7a>
 8008090:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008092:	b141      	cbz	r1, 80080a6 <__swsetup_r+0x6a>
 8008094:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008098:	4299      	cmp	r1, r3
 800809a:	d002      	beq.n	80080a2 <__swsetup_r+0x66>
 800809c:	4630      	mov	r0, r6
 800809e:	f7ff fb31 	bl	8007704 <_free_r>
 80080a2:	2300      	movs	r3, #0
 80080a4:	6363      	str	r3, [r4, #52]	; 0x34
 80080a6:	89a3      	ldrh	r3, [r4, #12]
 80080a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80080ac:	81a3      	strh	r3, [r4, #12]
 80080ae:	2300      	movs	r3, #0
 80080b0:	6063      	str	r3, [r4, #4]
 80080b2:	6923      	ldr	r3, [r4, #16]
 80080b4:	6023      	str	r3, [r4, #0]
 80080b6:	89a3      	ldrh	r3, [r4, #12]
 80080b8:	f043 0308 	orr.w	r3, r3, #8
 80080bc:	81a3      	strh	r3, [r4, #12]
 80080be:	6923      	ldr	r3, [r4, #16]
 80080c0:	b94b      	cbnz	r3, 80080d6 <__swsetup_r+0x9a>
 80080c2:	89a3      	ldrh	r3, [r4, #12]
 80080c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80080c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080cc:	d003      	beq.n	80080d6 <__swsetup_r+0x9a>
 80080ce:	4621      	mov	r1, r4
 80080d0:	4630      	mov	r0, r6
 80080d2:	f000 fa09 	bl	80084e8 <__smakebuf_r>
 80080d6:	89a0      	ldrh	r0, [r4, #12]
 80080d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080dc:	f010 0301 	ands.w	r3, r0, #1
 80080e0:	d00a      	beq.n	80080f8 <__swsetup_r+0xbc>
 80080e2:	2300      	movs	r3, #0
 80080e4:	60a3      	str	r3, [r4, #8]
 80080e6:	6963      	ldr	r3, [r4, #20]
 80080e8:	425b      	negs	r3, r3
 80080ea:	61a3      	str	r3, [r4, #24]
 80080ec:	6923      	ldr	r3, [r4, #16]
 80080ee:	b943      	cbnz	r3, 8008102 <__swsetup_r+0xc6>
 80080f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80080f4:	d1ba      	bne.n	800806c <__swsetup_r+0x30>
 80080f6:	bd70      	pop	{r4, r5, r6, pc}
 80080f8:	0781      	lsls	r1, r0, #30
 80080fa:	bf58      	it	pl
 80080fc:	6963      	ldrpl	r3, [r4, #20]
 80080fe:	60a3      	str	r3, [r4, #8]
 8008100:	e7f4      	b.n	80080ec <__swsetup_r+0xb0>
 8008102:	2000      	movs	r0, #0
 8008104:	e7f7      	b.n	80080f6 <__swsetup_r+0xba>
 8008106:	bf00      	nop
 8008108:	2000000c 	.word	0x2000000c
 800810c:	08008bb4 	.word	0x08008bb4
 8008110:	08008bd4 	.word	0x08008bd4
 8008114:	08008b94 	.word	0x08008b94

08008118 <abort>:
 8008118:	b508      	push	{r3, lr}
 800811a:	2006      	movs	r0, #6
 800811c:	f000 fa54 	bl	80085c8 <raise>
 8008120:	2001      	movs	r0, #1
 8008122:	f7f9 fb81 	bl	8001828 <_exit>
	...

08008128 <__sflush_r>:
 8008128:	898a      	ldrh	r2, [r1, #12]
 800812a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800812e:	4605      	mov	r5, r0
 8008130:	0710      	lsls	r0, r2, #28
 8008132:	460c      	mov	r4, r1
 8008134:	d458      	bmi.n	80081e8 <__sflush_r+0xc0>
 8008136:	684b      	ldr	r3, [r1, #4]
 8008138:	2b00      	cmp	r3, #0
 800813a:	dc05      	bgt.n	8008148 <__sflush_r+0x20>
 800813c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800813e:	2b00      	cmp	r3, #0
 8008140:	dc02      	bgt.n	8008148 <__sflush_r+0x20>
 8008142:	2000      	movs	r0, #0
 8008144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008148:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800814a:	2e00      	cmp	r6, #0
 800814c:	d0f9      	beq.n	8008142 <__sflush_r+0x1a>
 800814e:	2300      	movs	r3, #0
 8008150:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008154:	682f      	ldr	r7, [r5, #0]
 8008156:	602b      	str	r3, [r5, #0]
 8008158:	d032      	beq.n	80081c0 <__sflush_r+0x98>
 800815a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800815c:	89a3      	ldrh	r3, [r4, #12]
 800815e:	075a      	lsls	r2, r3, #29
 8008160:	d505      	bpl.n	800816e <__sflush_r+0x46>
 8008162:	6863      	ldr	r3, [r4, #4]
 8008164:	1ac0      	subs	r0, r0, r3
 8008166:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008168:	b10b      	cbz	r3, 800816e <__sflush_r+0x46>
 800816a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800816c:	1ac0      	subs	r0, r0, r3
 800816e:	2300      	movs	r3, #0
 8008170:	4602      	mov	r2, r0
 8008172:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008174:	6a21      	ldr	r1, [r4, #32]
 8008176:	4628      	mov	r0, r5
 8008178:	47b0      	blx	r6
 800817a:	1c43      	adds	r3, r0, #1
 800817c:	89a3      	ldrh	r3, [r4, #12]
 800817e:	d106      	bne.n	800818e <__sflush_r+0x66>
 8008180:	6829      	ldr	r1, [r5, #0]
 8008182:	291d      	cmp	r1, #29
 8008184:	d82c      	bhi.n	80081e0 <__sflush_r+0xb8>
 8008186:	4a2a      	ldr	r2, [pc, #168]	; (8008230 <__sflush_r+0x108>)
 8008188:	40ca      	lsrs	r2, r1
 800818a:	07d6      	lsls	r6, r2, #31
 800818c:	d528      	bpl.n	80081e0 <__sflush_r+0xb8>
 800818e:	2200      	movs	r2, #0
 8008190:	6062      	str	r2, [r4, #4]
 8008192:	04d9      	lsls	r1, r3, #19
 8008194:	6922      	ldr	r2, [r4, #16]
 8008196:	6022      	str	r2, [r4, #0]
 8008198:	d504      	bpl.n	80081a4 <__sflush_r+0x7c>
 800819a:	1c42      	adds	r2, r0, #1
 800819c:	d101      	bne.n	80081a2 <__sflush_r+0x7a>
 800819e:	682b      	ldr	r3, [r5, #0]
 80081a0:	b903      	cbnz	r3, 80081a4 <__sflush_r+0x7c>
 80081a2:	6560      	str	r0, [r4, #84]	; 0x54
 80081a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081a6:	602f      	str	r7, [r5, #0]
 80081a8:	2900      	cmp	r1, #0
 80081aa:	d0ca      	beq.n	8008142 <__sflush_r+0x1a>
 80081ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081b0:	4299      	cmp	r1, r3
 80081b2:	d002      	beq.n	80081ba <__sflush_r+0x92>
 80081b4:	4628      	mov	r0, r5
 80081b6:	f7ff faa5 	bl	8007704 <_free_r>
 80081ba:	2000      	movs	r0, #0
 80081bc:	6360      	str	r0, [r4, #52]	; 0x34
 80081be:	e7c1      	b.n	8008144 <__sflush_r+0x1c>
 80081c0:	6a21      	ldr	r1, [r4, #32]
 80081c2:	2301      	movs	r3, #1
 80081c4:	4628      	mov	r0, r5
 80081c6:	47b0      	blx	r6
 80081c8:	1c41      	adds	r1, r0, #1
 80081ca:	d1c7      	bne.n	800815c <__sflush_r+0x34>
 80081cc:	682b      	ldr	r3, [r5, #0]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d0c4      	beq.n	800815c <__sflush_r+0x34>
 80081d2:	2b1d      	cmp	r3, #29
 80081d4:	d001      	beq.n	80081da <__sflush_r+0xb2>
 80081d6:	2b16      	cmp	r3, #22
 80081d8:	d101      	bne.n	80081de <__sflush_r+0xb6>
 80081da:	602f      	str	r7, [r5, #0]
 80081dc:	e7b1      	b.n	8008142 <__sflush_r+0x1a>
 80081de:	89a3      	ldrh	r3, [r4, #12]
 80081e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081e4:	81a3      	strh	r3, [r4, #12]
 80081e6:	e7ad      	b.n	8008144 <__sflush_r+0x1c>
 80081e8:	690f      	ldr	r7, [r1, #16]
 80081ea:	2f00      	cmp	r7, #0
 80081ec:	d0a9      	beq.n	8008142 <__sflush_r+0x1a>
 80081ee:	0793      	lsls	r3, r2, #30
 80081f0:	680e      	ldr	r6, [r1, #0]
 80081f2:	bf08      	it	eq
 80081f4:	694b      	ldreq	r3, [r1, #20]
 80081f6:	600f      	str	r7, [r1, #0]
 80081f8:	bf18      	it	ne
 80081fa:	2300      	movne	r3, #0
 80081fc:	eba6 0807 	sub.w	r8, r6, r7
 8008200:	608b      	str	r3, [r1, #8]
 8008202:	f1b8 0f00 	cmp.w	r8, #0
 8008206:	dd9c      	ble.n	8008142 <__sflush_r+0x1a>
 8008208:	6a21      	ldr	r1, [r4, #32]
 800820a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800820c:	4643      	mov	r3, r8
 800820e:	463a      	mov	r2, r7
 8008210:	4628      	mov	r0, r5
 8008212:	47b0      	blx	r6
 8008214:	2800      	cmp	r0, #0
 8008216:	dc06      	bgt.n	8008226 <__sflush_r+0xfe>
 8008218:	89a3      	ldrh	r3, [r4, #12]
 800821a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800821e:	81a3      	strh	r3, [r4, #12]
 8008220:	f04f 30ff 	mov.w	r0, #4294967295
 8008224:	e78e      	b.n	8008144 <__sflush_r+0x1c>
 8008226:	4407      	add	r7, r0
 8008228:	eba8 0800 	sub.w	r8, r8, r0
 800822c:	e7e9      	b.n	8008202 <__sflush_r+0xda>
 800822e:	bf00      	nop
 8008230:	20400001 	.word	0x20400001

08008234 <_fflush_r>:
 8008234:	b538      	push	{r3, r4, r5, lr}
 8008236:	690b      	ldr	r3, [r1, #16]
 8008238:	4605      	mov	r5, r0
 800823a:	460c      	mov	r4, r1
 800823c:	b913      	cbnz	r3, 8008244 <_fflush_r+0x10>
 800823e:	2500      	movs	r5, #0
 8008240:	4628      	mov	r0, r5
 8008242:	bd38      	pop	{r3, r4, r5, pc}
 8008244:	b118      	cbz	r0, 800824e <_fflush_r+0x1a>
 8008246:	6983      	ldr	r3, [r0, #24]
 8008248:	b90b      	cbnz	r3, 800824e <_fflush_r+0x1a>
 800824a:	f000 f887 	bl	800835c <__sinit>
 800824e:	4b14      	ldr	r3, [pc, #80]	; (80082a0 <_fflush_r+0x6c>)
 8008250:	429c      	cmp	r4, r3
 8008252:	d11b      	bne.n	800828c <_fflush_r+0x58>
 8008254:	686c      	ldr	r4, [r5, #4]
 8008256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d0ef      	beq.n	800823e <_fflush_r+0xa>
 800825e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008260:	07d0      	lsls	r0, r2, #31
 8008262:	d404      	bmi.n	800826e <_fflush_r+0x3a>
 8008264:	0599      	lsls	r1, r3, #22
 8008266:	d402      	bmi.n	800826e <_fflush_r+0x3a>
 8008268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800826a:	f000 f915 	bl	8008498 <__retarget_lock_acquire_recursive>
 800826e:	4628      	mov	r0, r5
 8008270:	4621      	mov	r1, r4
 8008272:	f7ff ff59 	bl	8008128 <__sflush_r>
 8008276:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008278:	07da      	lsls	r2, r3, #31
 800827a:	4605      	mov	r5, r0
 800827c:	d4e0      	bmi.n	8008240 <_fflush_r+0xc>
 800827e:	89a3      	ldrh	r3, [r4, #12]
 8008280:	059b      	lsls	r3, r3, #22
 8008282:	d4dd      	bmi.n	8008240 <_fflush_r+0xc>
 8008284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008286:	f000 f908 	bl	800849a <__retarget_lock_release_recursive>
 800828a:	e7d9      	b.n	8008240 <_fflush_r+0xc>
 800828c:	4b05      	ldr	r3, [pc, #20]	; (80082a4 <_fflush_r+0x70>)
 800828e:	429c      	cmp	r4, r3
 8008290:	d101      	bne.n	8008296 <_fflush_r+0x62>
 8008292:	68ac      	ldr	r4, [r5, #8]
 8008294:	e7df      	b.n	8008256 <_fflush_r+0x22>
 8008296:	4b04      	ldr	r3, [pc, #16]	; (80082a8 <_fflush_r+0x74>)
 8008298:	429c      	cmp	r4, r3
 800829a:	bf08      	it	eq
 800829c:	68ec      	ldreq	r4, [r5, #12]
 800829e:	e7da      	b.n	8008256 <_fflush_r+0x22>
 80082a0:	08008bb4 	.word	0x08008bb4
 80082a4:	08008bd4 	.word	0x08008bd4
 80082a8:	08008b94 	.word	0x08008b94

080082ac <std>:
 80082ac:	2300      	movs	r3, #0
 80082ae:	b510      	push	{r4, lr}
 80082b0:	4604      	mov	r4, r0
 80082b2:	e9c0 3300 	strd	r3, r3, [r0]
 80082b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80082ba:	6083      	str	r3, [r0, #8]
 80082bc:	8181      	strh	r1, [r0, #12]
 80082be:	6643      	str	r3, [r0, #100]	; 0x64
 80082c0:	81c2      	strh	r2, [r0, #14]
 80082c2:	6183      	str	r3, [r0, #24]
 80082c4:	4619      	mov	r1, r3
 80082c6:	2208      	movs	r2, #8
 80082c8:	305c      	adds	r0, #92	; 0x5c
 80082ca:	f7fd fb59 	bl	8005980 <memset>
 80082ce:	4b05      	ldr	r3, [pc, #20]	; (80082e4 <std+0x38>)
 80082d0:	6263      	str	r3, [r4, #36]	; 0x24
 80082d2:	4b05      	ldr	r3, [pc, #20]	; (80082e8 <std+0x3c>)
 80082d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80082d6:	4b05      	ldr	r3, [pc, #20]	; (80082ec <std+0x40>)
 80082d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80082da:	4b05      	ldr	r3, [pc, #20]	; (80082f0 <std+0x44>)
 80082dc:	6224      	str	r4, [r4, #32]
 80082de:	6323      	str	r3, [r4, #48]	; 0x30
 80082e0:	bd10      	pop	{r4, pc}
 80082e2:	bf00      	nop
 80082e4:	08008601 	.word	0x08008601
 80082e8:	08008623 	.word	0x08008623
 80082ec:	0800865b 	.word	0x0800865b
 80082f0:	0800867f 	.word	0x0800867f

080082f4 <_cleanup_r>:
 80082f4:	4901      	ldr	r1, [pc, #4]	; (80082fc <_cleanup_r+0x8>)
 80082f6:	f000 b8af 	b.w	8008458 <_fwalk_reent>
 80082fa:	bf00      	nop
 80082fc:	08008235 	.word	0x08008235

08008300 <__sfmoreglue>:
 8008300:	b570      	push	{r4, r5, r6, lr}
 8008302:	2268      	movs	r2, #104	; 0x68
 8008304:	1e4d      	subs	r5, r1, #1
 8008306:	4355      	muls	r5, r2
 8008308:	460e      	mov	r6, r1
 800830a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800830e:	f7ff fa65 	bl	80077dc <_malloc_r>
 8008312:	4604      	mov	r4, r0
 8008314:	b140      	cbz	r0, 8008328 <__sfmoreglue+0x28>
 8008316:	2100      	movs	r1, #0
 8008318:	e9c0 1600 	strd	r1, r6, [r0]
 800831c:	300c      	adds	r0, #12
 800831e:	60a0      	str	r0, [r4, #8]
 8008320:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008324:	f7fd fb2c 	bl	8005980 <memset>
 8008328:	4620      	mov	r0, r4
 800832a:	bd70      	pop	{r4, r5, r6, pc}

0800832c <__sfp_lock_acquire>:
 800832c:	4801      	ldr	r0, [pc, #4]	; (8008334 <__sfp_lock_acquire+0x8>)
 800832e:	f000 b8b3 	b.w	8008498 <__retarget_lock_acquire_recursive>
 8008332:	bf00      	nop
 8008334:	20000399 	.word	0x20000399

08008338 <__sfp_lock_release>:
 8008338:	4801      	ldr	r0, [pc, #4]	; (8008340 <__sfp_lock_release+0x8>)
 800833a:	f000 b8ae 	b.w	800849a <__retarget_lock_release_recursive>
 800833e:	bf00      	nop
 8008340:	20000399 	.word	0x20000399

08008344 <__sinit_lock_acquire>:
 8008344:	4801      	ldr	r0, [pc, #4]	; (800834c <__sinit_lock_acquire+0x8>)
 8008346:	f000 b8a7 	b.w	8008498 <__retarget_lock_acquire_recursive>
 800834a:	bf00      	nop
 800834c:	2000039a 	.word	0x2000039a

08008350 <__sinit_lock_release>:
 8008350:	4801      	ldr	r0, [pc, #4]	; (8008358 <__sinit_lock_release+0x8>)
 8008352:	f000 b8a2 	b.w	800849a <__retarget_lock_release_recursive>
 8008356:	bf00      	nop
 8008358:	2000039a 	.word	0x2000039a

0800835c <__sinit>:
 800835c:	b510      	push	{r4, lr}
 800835e:	4604      	mov	r4, r0
 8008360:	f7ff fff0 	bl	8008344 <__sinit_lock_acquire>
 8008364:	69a3      	ldr	r3, [r4, #24]
 8008366:	b11b      	cbz	r3, 8008370 <__sinit+0x14>
 8008368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800836c:	f7ff bff0 	b.w	8008350 <__sinit_lock_release>
 8008370:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008374:	6523      	str	r3, [r4, #80]	; 0x50
 8008376:	4b13      	ldr	r3, [pc, #76]	; (80083c4 <__sinit+0x68>)
 8008378:	4a13      	ldr	r2, [pc, #76]	; (80083c8 <__sinit+0x6c>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	62a2      	str	r2, [r4, #40]	; 0x28
 800837e:	42a3      	cmp	r3, r4
 8008380:	bf04      	itt	eq
 8008382:	2301      	moveq	r3, #1
 8008384:	61a3      	streq	r3, [r4, #24]
 8008386:	4620      	mov	r0, r4
 8008388:	f000 f820 	bl	80083cc <__sfp>
 800838c:	6060      	str	r0, [r4, #4]
 800838e:	4620      	mov	r0, r4
 8008390:	f000 f81c 	bl	80083cc <__sfp>
 8008394:	60a0      	str	r0, [r4, #8]
 8008396:	4620      	mov	r0, r4
 8008398:	f000 f818 	bl	80083cc <__sfp>
 800839c:	2200      	movs	r2, #0
 800839e:	60e0      	str	r0, [r4, #12]
 80083a0:	2104      	movs	r1, #4
 80083a2:	6860      	ldr	r0, [r4, #4]
 80083a4:	f7ff ff82 	bl	80082ac <std>
 80083a8:	68a0      	ldr	r0, [r4, #8]
 80083aa:	2201      	movs	r2, #1
 80083ac:	2109      	movs	r1, #9
 80083ae:	f7ff ff7d 	bl	80082ac <std>
 80083b2:	68e0      	ldr	r0, [r4, #12]
 80083b4:	2202      	movs	r2, #2
 80083b6:	2112      	movs	r1, #18
 80083b8:	f7ff ff78 	bl	80082ac <std>
 80083bc:	2301      	movs	r3, #1
 80083be:	61a3      	str	r3, [r4, #24]
 80083c0:	e7d2      	b.n	8008368 <__sinit+0xc>
 80083c2:	bf00      	nop
 80083c4:	0800881c 	.word	0x0800881c
 80083c8:	080082f5 	.word	0x080082f5

080083cc <__sfp>:
 80083cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ce:	4607      	mov	r7, r0
 80083d0:	f7ff ffac 	bl	800832c <__sfp_lock_acquire>
 80083d4:	4b1e      	ldr	r3, [pc, #120]	; (8008450 <__sfp+0x84>)
 80083d6:	681e      	ldr	r6, [r3, #0]
 80083d8:	69b3      	ldr	r3, [r6, #24]
 80083da:	b913      	cbnz	r3, 80083e2 <__sfp+0x16>
 80083dc:	4630      	mov	r0, r6
 80083de:	f7ff ffbd 	bl	800835c <__sinit>
 80083e2:	3648      	adds	r6, #72	; 0x48
 80083e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80083e8:	3b01      	subs	r3, #1
 80083ea:	d503      	bpl.n	80083f4 <__sfp+0x28>
 80083ec:	6833      	ldr	r3, [r6, #0]
 80083ee:	b30b      	cbz	r3, 8008434 <__sfp+0x68>
 80083f0:	6836      	ldr	r6, [r6, #0]
 80083f2:	e7f7      	b.n	80083e4 <__sfp+0x18>
 80083f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80083f8:	b9d5      	cbnz	r5, 8008430 <__sfp+0x64>
 80083fa:	4b16      	ldr	r3, [pc, #88]	; (8008454 <__sfp+0x88>)
 80083fc:	60e3      	str	r3, [r4, #12]
 80083fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008402:	6665      	str	r5, [r4, #100]	; 0x64
 8008404:	f000 f847 	bl	8008496 <__retarget_lock_init_recursive>
 8008408:	f7ff ff96 	bl	8008338 <__sfp_lock_release>
 800840c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008410:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008414:	6025      	str	r5, [r4, #0]
 8008416:	61a5      	str	r5, [r4, #24]
 8008418:	2208      	movs	r2, #8
 800841a:	4629      	mov	r1, r5
 800841c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008420:	f7fd faae 	bl	8005980 <memset>
 8008424:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008428:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800842c:	4620      	mov	r0, r4
 800842e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008430:	3468      	adds	r4, #104	; 0x68
 8008432:	e7d9      	b.n	80083e8 <__sfp+0x1c>
 8008434:	2104      	movs	r1, #4
 8008436:	4638      	mov	r0, r7
 8008438:	f7ff ff62 	bl	8008300 <__sfmoreglue>
 800843c:	4604      	mov	r4, r0
 800843e:	6030      	str	r0, [r6, #0]
 8008440:	2800      	cmp	r0, #0
 8008442:	d1d5      	bne.n	80083f0 <__sfp+0x24>
 8008444:	f7ff ff78 	bl	8008338 <__sfp_lock_release>
 8008448:	230c      	movs	r3, #12
 800844a:	603b      	str	r3, [r7, #0]
 800844c:	e7ee      	b.n	800842c <__sfp+0x60>
 800844e:	bf00      	nop
 8008450:	0800881c 	.word	0x0800881c
 8008454:	ffff0001 	.word	0xffff0001

08008458 <_fwalk_reent>:
 8008458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800845c:	4606      	mov	r6, r0
 800845e:	4688      	mov	r8, r1
 8008460:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008464:	2700      	movs	r7, #0
 8008466:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800846a:	f1b9 0901 	subs.w	r9, r9, #1
 800846e:	d505      	bpl.n	800847c <_fwalk_reent+0x24>
 8008470:	6824      	ldr	r4, [r4, #0]
 8008472:	2c00      	cmp	r4, #0
 8008474:	d1f7      	bne.n	8008466 <_fwalk_reent+0xe>
 8008476:	4638      	mov	r0, r7
 8008478:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800847c:	89ab      	ldrh	r3, [r5, #12]
 800847e:	2b01      	cmp	r3, #1
 8008480:	d907      	bls.n	8008492 <_fwalk_reent+0x3a>
 8008482:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008486:	3301      	adds	r3, #1
 8008488:	d003      	beq.n	8008492 <_fwalk_reent+0x3a>
 800848a:	4629      	mov	r1, r5
 800848c:	4630      	mov	r0, r6
 800848e:	47c0      	blx	r8
 8008490:	4307      	orrs	r7, r0
 8008492:	3568      	adds	r5, #104	; 0x68
 8008494:	e7e9      	b.n	800846a <_fwalk_reent+0x12>

08008496 <__retarget_lock_init_recursive>:
 8008496:	4770      	bx	lr

08008498 <__retarget_lock_acquire_recursive>:
 8008498:	4770      	bx	lr

0800849a <__retarget_lock_release_recursive>:
 800849a:	4770      	bx	lr

0800849c <__swhatbuf_r>:
 800849c:	b570      	push	{r4, r5, r6, lr}
 800849e:	460e      	mov	r6, r1
 80084a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084a4:	2900      	cmp	r1, #0
 80084a6:	b096      	sub	sp, #88	; 0x58
 80084a8:	4614      	mov	r4, r2
 80084aa:	461d      	mov	r5, r3
 80084ac:	da08      	bge.n	80084c0 <__swhatbuf_r+0x24>
 80084ae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80084b2:	2200      	movs	r2, #0
 80084b4:	602a      	str	r2, [r5, #0]
 80084b6:	061a      	lsls	r2, r3, #24
 80084b8:	d410      	bmi.n	80084dc <__swhatbuf_r+0x40>
 80084ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084be:	e00e      	b.n	80084de <__swhatbuf_r+0x42>
 80084c0:	466a      	mov	r2, sp
 80084c2:	f000 f903 	bl	80086cc <_fstat_r>
 80084c6:	2800      	cmp	r0, #0
 80084c8:	dbf1      	blt.n	80084ae <__swhatbuf_r+0x12>
 80084ca:	9a01      	ldr	r2, [sp, #4]
 80084cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80084d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80084d4:	425a      	negs	r2, r3
 80084d6:	415a      	adcs	r2, r3
 80084d8:	602a      	str	r2, [r5, #0]
 80084da:	e7ee      	b.n	80084ba <__swhatbuf_r+0x1e>
 80084dc:	2340      	movs	r3, #64	; 0x40
 80084de:	2000      	movs	r0, #0
 80084e0:	6023      	str	r3, [r4, #0]
 80084e2:	b016      	add	sp, #88	; 0x58
 80084e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080084e8 <__smakebuf_r>:
 80084e8:	898b      	ldrh	r3, [r1, #12]
 80084ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80084ec:	079d      	lsls	r5, r3, #30
 80084ee:	4606      	mov	r6, r0
 80084f0:	460c      	mov	r4, r1
 80084f2:	d507      	bpl.n	8008504 <__smakebuf_r+0x1c>
 80084f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80084f8:	6023      	str	r3, [r4, #0]
 80084fa:	6123      	str	r3, [r4, #16]
 80084fc:	2301      	movs	r3, #1
 80084fe:	6163      	str	r3, [r4, #20]
 8008500:	b002      	add	sp, #8
 8008502:	bd70      	pop	{r4, r5, r6, pc}
 8008504:	ab01      	add	r3, sp, #4
 8008506:	466a      	mov	r2, sp
 8008508:	f7ff ffc8 	bl	800849c <__swhatbuf_r>
 800850c:	9900      	ldr	r1, [sp, #0]
 800850e:	4605      	mov	r5, r0
 8008510:	4630      	mov	r0, r6
 8008512:	f7ff f963 	bl	80077dc <_malloc_r>
 8008516:	b948      	cbnz	r0, 800852c <__smakebuf_r+0x44>
 8008518:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800851c:	059a      	lsls	r2, r3, #22
 800851e:	d4ef      	bmi.n	8008500 <__smakebuf_r+0x18>
 8008520:	f023 0303 	bic.w	r3, r3, #3
 8008524:	f043 0302 	orr.w	r3, r3, #2
 8008528:	81a3      	strh	r3, [r4, #12]
 800852a:	e7e3      	b.n	80084f4 <__smakebuf_r+0xc>
 800852c:	4b0d      	ldr	r3, [pc, #52]	; (8008564 <__smakebuf_r+0x7c>)
 800852e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008530:	89a3      	ldrh	r3, [r4, #12]
 8008532:	6020      	str	r0, [r4, #0]
 8008534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008538:	81a3      	strh	r3, [r4, #12]
 800853a:	9b00      	ldr	r3, [sp, #0]
 800853c:	6163      	str	r3, [r4, #20]
 800853e:	9b01      	ldr	r3, [sp, #4]
 8008540:	6120      	str	r0, [r4, #16]
 8008542:	b15b      	cbz	r3, 800855c <__smakebuf_r+0x74>
 8008544:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008548:	4630      	mov	r0, r6
 800854a:	f000 f8d1 	bl	80086f0 <_isatty_r>
 800854e:	b128      	cbz	r0, 800855c <__smakebuf_r+0x74>
 8008550:	89a3      	ldrh	r3, [r4, #12]
 8008552:	f023 0303 	bic.w	r3, r3, #3
 8008556:	f043 0301 	orr.w	r3, r3, #1
 800855a:	81a3      	strh	r3, [r4, #12]
 800855c:	89a0      	ldrh	r0, [r4, #12]
 800855e:	4305      	orrs	r5, r0
 8008560:	81a5      	strh	r5, [r4, #12]
 8008562:	e7cd      	b.n	8008500 <__smakebuf_r+0x18>
 8008564:	080082f5 	.word	0x080082f5

08008568 <_malloc_usable_size_r>:
 8008568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800856c:	1f18      	subs	r0, r3, #4
 800856e:	2b00      	cmp	r3, #0
 8008570:	bfbc      	itt	lt
 8008572:	580b      	ldrlt	r3, [r1, r0]
 8008574:	18c0      	addlt	r0, r0, r3
 8008576:	4770      	bx	lr

08008578 <_raise_r>:
 8008578:	291f      	cmp	r1, #31
 800857a:	b538      	push	{r3, r4, r5, lr}
 800857c:	4604      	mov	r4, r0
 800857e:	460d      	mov	r5, r1
 8008580:	d904      	bls.n	800858c <_raise_r+0x14>
 8008582:	2316      	movs	r3, #22
 8008584:	6003      	str	r3, [r0, #0]
 8008586:	f04f 30ff 	mov.w	r0, #4294967295
 800858a:	bd38      	pop	{r3, r4, r5, pc}
 800858c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800858e:	b112      	cbz	r2, 8008596 <_raise_r+0x1e>
 8008590:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008594:	b94b      	cbnz	r3, 80085aa <_raise_r+0x32>
 8008596:	4620      	mov	r0, r4
 8008598:	f000 f830 	bl	80085fc <_getpid_r>
 800859c:	462a      	mov	r2, r5
 800859e:	4601      	mov	r1, r0
 80085a0:	4620      	mov	r0, r4
 80085a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085a6:	f000 b817 	b.w	80085d8 <_kill_r>
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d00a      	beq.n	80085c4 <_raise_r+0x4c>
 80085ae:	1c59      	adds	r1, r3, #1
 80085b0:	d103      	bne.n	80085ba <_raise_r+0x42>
 80085b2:	2316      	movs	r3, #22
 80085b4:	6003      	str	r3, [r0, #0]
 80085b6:	2001      	movs	r0, #1
 80085b8:	e7e7      	b.n	800858a <_raise_r+0x12>
 80085ba:	2400      	movs	r4, #0
 80085bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80085c0:	4628      	mov	r0, r5
 80085c2:	4798      	blx	r3
 80085c4:	2000      	movs	r0, #0
 80085c6:	e7e0      	b.n	800858a <_raise_r+0x12>

080085c8 <raise>:
 80085c8:	4b02      	ldr	r3, [pc, #8]	; (80085d4 <raise+0xc>)
 80085ca:	4601      	mov	r1, r0
 80085cc:	6818      	ldr	r0, [r3, #0]
 80085ce:	f7ff bfd3 	b.w	8008578 <_raise_r>
 80085d2:	bf00      	nop
 80085d4:	2000000c 	.word	0x2000000c

080085d8 <_kill_r>:
 80085d8:	b538      	push	{r3, r4, r5, lr}
 80085da:	4d07      	ldr	r5, [pc, #28]	; (80085f8 <_kill_r+0x20>)
 80085dc:	2300      	movs	r3, #0
 80085de:	4604      	mov	r4, r0
 80085e0:	4608      	mov	r0, r1
 80085e2:	4611      	mov	r1, r2
 80085e4:	602b      	str	r3, [r5, #0]
 80085e6:	f7f9 f90f 	bl	8001808 <_kill>
 80085ea:	1c43      	adds	r3, r0, #1
 80085ec:	d102      	bne.n	80085f4 <_kill_r+0x1c>
 80085ee:	682b      	ldr	r3, [r5, #0]
 80085f0:	b103      	cbz	r3, 80085f4 <_kill_r+0x1c>
 80085f2:	6023      	str	r3, [r4, #0]
 80085f4:	bd38      	pop	{r3, r4, r5, pc}
 80085f6:	bf00      	nop
 80085f8:	20000394 	.word	0x20000394

080085fc <_getpid_r>:
 80085fc:	f7f9 b8fc 	b.w	80017f8 <_getpid>

08008600 <__sread>:
 8008600:	b510      	push	{r4, lr}
 8008602:	460c      	mov	r4, r1
 8008604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008608:	f000 f894 	bl	8008734 <_read_r>
 800860c:	2800      	cmp	r0, #0
 800860e:	bfab      	itete	ge
 8008610:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008612:	89a3      	ldrhlt	r3, [r4, #12]
 8008614:	181b      	addge	r3, r3, r0
 8008616:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800861a:	bfac      	ite	ge
 800861c:	6563      	strge	r3, [r4, #84]	; 0x54
 800861e:	81a3      	strhlt	r3, [r4, #12]
 8008620:	bd10      	pop	{r4, pc}

08008622 <__swrite>:
 8008622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008626:	461f      	mov	r7, r3
 8008628:	898b      	ldrh	r3, [r1, #12]
 800862a:	05db      	lsls	r3, r3, #23
 800862c:	4605      	mov	r5, r0
 800862e:	460c      	mov	r4, r1
 8008630:	4616      	mov	r6, r2
 8008632:	d505      	bpl.n	8008640 <__swrite+0x1e>
 8008634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008638:	2302      	movs	r3, #2
 800863a:	2200      	movs	r2, #0
 800863c:	f000 f868 	bl	8008710 <_lseek_r>
 8008640:	89a3      	ldrh	r3, [r4, #12]
 8008642:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008646:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800864a:	81a3      	strh	r3, [r4, #12]
 800864c:	4632      	mov	r2, r6
 800864e:	463b      	mov	r3, r7
 8008650:	4628      	mov	r0, r5
 8008652:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008656:	f000 b817 	b.w	8008688 <_write_r>

0800865a <__sseek>:
 800865a:	b510      	push	{r4, lr}
 800865c:	460c      	mov	r4, r1
 800865e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008662:	f000 f855 	bl	8008710 <_lseek_r>
 8008666:	1c43      	adds	r3, r0, #1
 8008668:	89a3      	ldrh	r3, [r4, #12]
 800866a:	bf15      	itete	ne
 800866c:	6560      	strne	r0, [r4, #84]	; 0x54
 800866e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008672:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008676:	81a3      	strheq	r3, [r4, #12]
 8008678:	bf18      	it	ne
 800867a:	81a3      	strhne	r3, [r4, #12]
 800867c:	bd10      	pop	{r4, pc}

0800867e <__sclose>:
 800867e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008682:	f000 b813 	b.w	80086ac <_close_r>
	...

08008688 <_write_r>:
 8008688:	b538      	push	{r3, r4, r5, lr}
 800868a:	4d07      	ldr	r5, [pc, #28]	; (80086a8 <_write_r+0x20>)
 800868c:	4604      	mov	r4, r0
 800868e:	4608      	mov	r0, r1
 8008690:	4611      	mov	r1, r2
 8008692:	2200      	movs	r2, #0
 8008694:	602a      	str	r2, [r5, #0]
 8008696:	461a      	mov	r2, r3
 8008698:	f7f9 f8ed 	bl	8001876 <_write>
 800869c:	1c43      	adds	r3, r0, #1
 800869e:	d102      	bne.n	80086a6 <_write_r+0x1e>
 80086a0:	682b      	ldr	r3, [r5, #0]
 80086a2:	b103      	cbz	r3, 80086a6 <_write_r+0x1e>
 80086a4:	6023      	str	r3, [r4, #0]
 80086a6:	bd38      	pop	{r3, r4, r5, pc}
 80086a8:	20000394 	.word	0x20000394

080086ac <_close_r>:
 80086ac:	b538      	push	{r3, r4, r5, lr}
 80086ae:	4d06      	ldr	r5, [pc, #24]	; (80086c8 <_close_r+0x1c>)
 80086b0:	2300      	movs	r3, #0
 80086b2:	4604      	mov	r4, r0
 80086b4:	4608      	mov	r0, r1
 80086b6:	602b      	str	r3, [r5, #0]
 80086b8:	f7f9 f8f9 	bl	80018ae <_close>
 80086bc:	1c43      	adds	r3, r0, #1
 80086be:	d102      	bne.n	80086c6 <_close_r+0x1a>
 80086c0:	682b      	ldr	r3, [r5, #0]
 80086c2:	b103      	cbz	r3, 80086c6 <_close_r+0x1a>
 80086c4:	6023      	str	r3, [r4, #0]
 80086c6:	bd38      	pop	{r3, r4, r5, pc}
 80086c8:	20000394 	.word	0x20000394

080086cc <_fstat_r>:
 80086cc:	b538      	push	{r3, r4, r5, lr}
 80086ce:	4d07      	ldr	r5, [pc, #28]	; (80086ec <_fstat_r+0x20>)
 80086d0:	2300      	movs	r3, #0
 80086d2:	4604      	mov	r4, r0
 80086d4:	4608      	mov	r0, r1
 80086d6:	4611      	mov	r1, r2
 80086d8:	602b      	str	r3, [r5, #0]
 80086da:	f7f9 f8f4 	bl	80018c6 <_fstat>
 80086de:	1c43      	adds	r3, r0, #1
 80086e0:	d102      	bne.n	80086e8 <_fstat_r+0x1c>
 80086e2:	682b      	ldr	r3, [r5, #0]
 80086e4:	b103      	cbz	r3, 80086e8 <_fstat_r+0x1c>
 80086e6:	6023      	str	r3, [r4, #0]
 80086e8:	bd38      	pop	{r3, r4, r5, pc}
 80086ea:	bf00      	nop
 80086ec:	20000394 	.word	0x20000394

080086f0 <_isatty_r>:
 80086f0:	b538      	push	{r3, r4, r5, lr}
 80086f2:	4d06      	ldr	r5, [pc, #24]	; (800870c <_isatty_r+0x1c>)
 80086f4:	2300      	movs	r3, #0
 80086f6:	4604      	mov	r4, r0
 80086f8:	4608      	mov	r0, r1
 80086fa:	602b      	str	r3, [r5, #0]
 80086fc:	f7f9 f8f3 	bl	80018e6 <_isatty>
 8008700:	1c43      	adds	r3, r0, #1
 8008702:	d102      	bne.n	800870a <_isatty_r+0x1a>
 8008704:	682b      	ldr	r3, [r5, #0]
 8008706:	b103      	cbz	r3, 800870a <_isatty_r+0x1a>
 8008708:	6023      	str	r3, [r4, #0]
 800870a:	bd38      	pop	{r3, r4, r5, pc}
 800870c:	20000394 	.word	0x20000394

08008710 <_lseek_r>:
 8008710:	b538      	push	{r3, r4, r5, lr}
 8008712:	4d07      	ldr	r5, [pc, #28]	; (8008730 <_lseek_r+0x20>)
 8008714:	4604      	mov	r4, r0
 8008716:	4608      	mov	r0, r1
 8008718:	4611      	mov	r1, r2
 800871a:	2200      	movs	r2, #0
 800871c:	602a      	str	r2, [r5, #0]
 800871e:	461a      	mov	r2, r3
 8008720:	f7f9 f8ec 	bl	80018fc <_lseek>
 8008724:	1c43      	adds	r3, r0, #1
 8008726:	d102      	bne.n	800872e <_lseek_r+0x1e>
 8008728:	682b      	ldr	r3, [r5, #0]
 800872a:	b103      	cbz	r3, 800872e <_lseek_r+0x1e>
 800872c:	6023      	str	r3, [r4, #0]
 800872e:	bd38      	pop	{r3, r4, r5, pc}
 8008730:	20000394 	.word	0x20000394

08008734 <_read_r>:
 8008734:	b538      	push	{r3, r4, r5, lr}
 8008736:	4d07      	ldr	r5, [pc, #28]	; (8008754 <_read_r+0x20>)
 8008738:	4604      	mov	r4, r0
 800873a:	4608      	mov	r0, r1
 800873c:	4611      	mov	r1, r2
 800873e:	2200      	movs	r2, #0
 8008740:	602a      	str	r2, [r5, #0]
 8008742:	461a      	mov	r2, r3
 8008744:	f7f9 f87a 	bl	800183c <_read>
 8008748:	1c43      	adds	r3, r0, #1
 800874a:	d102      	bne.n	8008752 <_read_r+0x1e>
 800874c:	682b      	ldr	r3, [r5, #0]
 800874e:	b103      	cbz	r3, 8008752 <_read_r+0x1e>
 8008750:	6023      	str	r3, [r4, #0]
 8008752:	bd38      	pop	{r3, r4, r5, pc}
 8008754:	20000394 	.word	0x20000394

08008758 <_init>:
 8008758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800875a:	bf00      	nop
 800875c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800875e:	bc08      	pop	{r3}
 8008760:	469e      	mov	lr, r3
 8008762:	4770      	bx	lr

08008764 <_fini>:
 8008764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008766:	bf00      	nop
 8008768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800876a:	bc08      	pop	{r3}
 800876c:	469e      	mov	lr, r3
 800876e:	4770      	bx	lr
