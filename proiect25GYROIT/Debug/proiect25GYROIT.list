
proiect25GYROIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  08008740  08008740  00018740  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bcc  08008bcc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008bcc  08008bcc  00018bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bd4  08008bd4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bd4  08008bd4  00018bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bd8  08008bd8  00018bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008bdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  200001dc  08008db8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  08008db8  0002039c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fff9  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000284e  00000000  00000000  00030205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  00032a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c08  00000000  00000000  00033788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028594  00000000  00000000  00034390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011546  00000000  00000000  0005c924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed88d  00000000  00000000  0006de6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015b6f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045cc  00000000  00000000  0015b748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008728 	.word	0x08008728

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08008728 	.word	0x08008728

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <ADXL_IT_StartSPI>:
	*y = ((int16_t) RxBuffer[4] << 8) + RxBuffer[3];
	*z = ((int16_t) RxBuffer[6] << 8) + RxBuffer[5];
}

void ADXL_IT_StartSPI()
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
	for(int i = 1; i < 7; i++)
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	607b      	str	r3, [r7, #4]
 8000eb6:	e007      	b.n	8000ec8 <ADXL_IT_StartSPI+0x1c>
	{
		TxBuffer[i] = 0;
 8000eb8:	4a0e      	ldr	r2, [pc, #56]	; (8000ef4 <ADXL_IT_StartSPI+0x48>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	701a      	strb	r2, [r3, #0]
	for(int i = 1; i < 7; i++)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2b06      	cmp	r3, #6
 8000ecc:	ddf4      	ble.n	8000eb8 <ADXL_IT_StartSPI+0xc>
	}

	TxBuffer[0] = ADXL_DATAX0 | ADXL_SPI_MB | ADXL_SPI_ReadOp;
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <ADXL_IT_StartSPI+0x48>)
 8000ed0:	22f2      	movs	r2, #242	; 0xf2
 8000ed2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(SPI_CS_ACC_GPIO_Port, SPI_CS_ACC_Pin, GPIO_PIN_RESET);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2140      	movs	r1, #64	; 0x40
 8000ed8:	4807      	ldr	r0, [pc, #28]	; (8000ef8 <ADXL_IT_StartSPI+0x4c>)
 8000eda:	f001 fc49 	bl	8002770 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(&hspi1, TxBuffer, RxBuffer, 7);
 8000ede:	2307      	movs	r3, #7
 8000ee0:	4a06      	ldr	r2, [pc, #24]	; (8000efc <ADXL_IT_StartSPI+0x50>)
 8000ee2:	4904      	ldr	r1, [pc, #16]	; (8000ef4 <ADXL_IT_StartSPI+0x48>)
 8000ee4:	4806      	ldr	r0, [pc, #24]	; (8000f00 <ADXL_IT_StartSPI+0x54>)
 8000ee6:	f003 fa63 	bl	80043b0 <HAL_SPI_TransmitReceive_DMA>
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	200001fc 	.word	0x200001fc
 8000ef8:	48000400 	.word	0x48000400
 8000efc:	20000204 	.word	0x20000204
 8000f00:	2000020c 	.word	0x2000020c

08000f04 <GYRO_WriteData>:
#define GYRO_CTRL_REG1       0x20
#define GYRO_POWERMODENORMAL 0xF
#define GYRO345_SCALE_FACTOR 9   //0,009 inmultim cu 1000 sa avem integer
#define GYRO_CTRLREG3   0x22

bool GYRO_WriteData(uint8_t regAddress, uint8_t registerValue) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af02      	add	r7, sp, #8
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	460a      	mov	r2, r1
 8000f0e:	71fb      	strb	r3, [r7, #7]
 8000f10:	4613      	mov	r3, r2
 8000f12:	71bb      	strb	r3, [r7, #6]
	uint8_t TxBuffer[2];
	uint8_t RxBuffer[2];

	TxBuffer[0] = regAddress;
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	733b      	strb	r3, [r7, #12]
	TxBuffer[1] = registerValue;
 8000f18:	79bb      	ldrb	r3, [r7, #6]
 8000f1a:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(SPI_CS_GYRO_GPIO_Port, SPI_CS_GYRO_Pin, GPIO_PIN_RESET);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f26:	f001 fc23 	bl	8002770 <HAL_GPIO_WritePin>
	if (HAL_SPI_TransmitReceive(&hspi1, TxBuffer, RxBuffer, 2, HAL_MAX_DELAY) != HAL_OK)
 8000f2a:	f107 0208 	add.w	r2, r7, #8
 8000f2e:	f107 010c 	add.w	r1, r7, #12
 8000f32:	f04f 33ff 	mov.w	r3, #4294967295
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	2302      	movs	r3, #2
 8000f3a:	480d      	ldr	r0, [pc, #52]	; (8000f70 <GYRO_WriteData+0x6c>)
 8000f3c:	f003 f825 	bl	8003f8a <HAL_SPI_TransmitReceive>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d008      	beq.n	8000f58 <GYRO_WriteData+0x54>
	{
		HAL_GPIO_WritePin(SPI_CS_GYRO_GPIO_Port, SPI_CS_GYRO_Pin, GPIO_PIN_SET);
 8000f46:	2201      	movs	r2, #1
 8000f48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f50:	f001 fc0e 	bl	8002770 <HAL_GPIO_WritePin>

		return false;
 8000f54:	2300      	movs	r3, #0
 8000f56:	e007      	b.n	8000f68 <GYRO_WriteData+0x64>
	}
	HAL_GPIO_WritePin(SPI_CS_GYRO_GPIO_Port, SPI_CS_GYRO_Pin, GPIO_PIN_SET);
 8000f58:	2201      	movs	r2, #1
 8000f5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f62:	f001 fc05 	bl	8002770 <HAL_GPIO_WritePin>

	return true;
 8000f66:	2301      	movs	r3, #1
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	2000020c 	.word	0x2000020c

08000f74 <GYRO_ReadData>:

bool GYRO_ReadData(uint8_t regAddress, uint8_t *registerValue) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af02      	add	r7, sp, #8
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	6039      	str	r1, [r7, #0]
 8000f7e:	71fb      	strb	r3, [r7, #7]
	uint8_t TxBuffer[2];
	uint8_t RxBuffer[2];

	TxBuffer[0] = GYRO_SPI_ReadOp | regAddress;
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	733b      	strb	r3, [r7, #12]
	TxBuffer[1] = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(SPI_CS_GYRO_GPIO_Port, SPI_CS_GYRO_Pin, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f98:	f001 fbea 	bl	8002770 <HAL_GPIO_WritePin>
	if (HAL_SPI_TransmitReceive(&hspi1, TxBuffer, RxBuffer, 2, 200) != HAL_OK) {
 8000f9c:	f107 0208 	add.w	r2, r7, #8
 8000fa0:	f107 010c 	add.w	r1, r7, #12
 8000fa4:	23c8      	movs	r3, #200	; 0xc8
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	2302      	movs	r3, #2
 8000faa:	480f      	ldr	r0, [pc, #60]	; (8000fe8 <GYRO_ReadData+0x74>)
 8000fac:	f002 ffed 	bl	8003f8a <HAL_SPI_TransmitReceive>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d008      	beq.n	8000fc8 <GYRO_ReadData+0x54>
		HAL_GPIO_WritePin(SPI_CS_GYRO_GPIO_Port, SPI_CS_GYRO_Pin, GPIO_PIN_SET);
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc0:	f001 fbd6 	bl	8002770 <HAL_GPIO_WritePin>
		return false;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	e00a      	b.n	8000fde <GYRO_ReadData+0x6a>

	}
	HAL_GPIO_WritePin(SPI_CS_GYRO_GPIO_Port, SPI_CS_GYRO_Pin, GPIO_PIN_SET);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd2:	f001 fbcd 	bl	8002770 <HAL_GPIO_WritePin>
	*registerValue = RxBuffer[1];
 8000fd6:	7a7a      	ldrb	r2, [r7, #9]
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	701a      	strb	r2, [r3, #0]

	return true;
 8000fdc:	2301      	movs	r3, #1
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	2000020c 	.word	0x2000020c

08000fec <GYRO_ReadValuesXYZ>:

void GYRO_ReadValuesXYZ(int16_t *x, int16_t *y, int16_t *z)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08a      	sub	sp, #40	; 0x28
 8000ff0:	af02      	add	r7, sp, #8
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
	uint8_t TxBuffer[7] = { 0 };
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61bb      	str	r3, [r7, #24]
 8000ffc:	f107 031c 	add.w	r3, r7, #28
 8001000:	2100      	movs	r1, #0
 8001002:	460a      	mov	r2, r1
 8001004:	801a      	strh	r2, [r3, #0]
 8001006:	460a      	mov	r2, r1
 8001008:	709a      	strb	r2, [r3, #2]
	uint8_t RxBuffer[7];

	TxBuffer[0] = GYRO_DATAX0 | GYRO_SPI_MB | GYRO_SPI_ReadOp;
 800100a:	23e8      	movs	r3, #232	; 0xe8
 800100c:	763b      	strb	r3, [r7, #24]
	HAL_GPIO_WritePin(SPI_CS_GYRO_GPIO_Port, SPI_CS_GYRO_Pin, GPIO_PIN_RESET);
 800100e:	2200      	movs	r2, #0
 8001010:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001014:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001018:	f001 fbaa 	bl	8002770 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, TxBuffer, RxBuffer, 7, HAL_MAX_DELAY);
 800101c:	f107 0210 	add.w	r2, r7, #16
 8001020:	f107 0118 	add.w	r1, r7, #24
 8001024:	f04f 33ff 	mov.w	r3, #4294967295
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	2307      	movs	r3, #7
 800102c:	4814      	ldr	r0, [pc, #80]	; (8001080 <GYRO_ReadValuesXYZ+0x94>)
 800102e:	f002 ffac 	bl	8003f8a <HAL_SPI_TransmitReceive>

	*x = (int16_t)(RxBuffer[2] << 8) | RxBuffer[1];
 8001032:	7cbb      	ldrb	r3, [r7, #18]
 8001034:	021b      	lsls	r3, r3, #8
 8001036:	b21a      	sxth	r2, r3
 8001038:	7c7b      	ldrb	r3, [r7, #17]
 800103a:	b21b      	sxth	r3, r3
 800103c:	4313      	orrs	r3, r2
 800103e:	b21a      	sxth	r2, r3
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	801a      	strh	r2, [r3, #0]
	*y = (int16_t)(RxBuffer[4] << 8) | RxBuffer[3];
 8001044:	7d3b      	ldrb	r3, [r7, #20]
 8001046:	021b      	lsls	r3, r3, #8
 8001048:	b21a      	sxth	r2, r3
 800104a:	7cfb      	ldrb	r3, [r7, #19]
 800104c:	b21b      	sxth	r3, r3
 800104e:	4313      	orrs	r3, r2
 8001050:	b21a      	sxth	r2, r3
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	801a      	strh	r2, [r3, #0]
	*z = (int16_t)(RxBuffer[6] << 8) | RxBuffer[5];
 8001056:	7dbb      	ldrb	r3, [r7, #22]
 8001058:	021b      	lsls	r3, r3, #8
 800105a:	b21a      	sxth	r2, r3
 800105c:	7d7b      	ldrb	r3, [r7, #21]
 800105e:	b21b      	sxth	r3, r3
 8001060:	4313      	orrs	r3, r2
 8001062:	b21a      	sxth	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(SPI_CS_GYRO_GPIO_Port, SPI_CS_GYRO_Pin, GPIO_PIN_SET);
 8001068:	2201      	movs	r2, #1
 800106a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800106e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001072:	f001 fb7d 	bl	8002770 <HAL_GPIO_WritePin>
}
 8001076:	bf00      	nop
 8001078:	3720      	adds	r7, #32
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	2000020c 	.word	0x2000020c

08001084 <GYRO_PowerMode>:


void GYRO_PowerMode()
{   uint8_t devId;
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
	//reset GYRO
	HAL_GPIO_TogglePin(ADXL_RESET_GPIO_Port, ADXL_RESET_Pin);
 800108a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800108e:	4812      	ldr	r0, [pc, #72]	; (80010d8 <GYRO_PowerMode+0x54>)
 8001090:	f001 fb86 	bl	80027a0 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8001094:	2064      	movs	r0, #100	; 0x64
 8001096:	f000 fe21 	bl	8001cdc <HAL_Delay>
    HAL_GPIO_TogglePin(ADXL_RESET_GPIO_Port, ADXL_RESET_Pin);
 800109a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800109e:	480e      	ldr	r0, [pc, #56]	; (80010d8 <GYRO_PowerMode+0x54>)
 80010a0:	f001 fb7e 	bl	80027a0 <HAL_GPIO_TogglePin>

   //stop GYRO power mode
    GYRO_WriteData(GYRO_CTRL_REG1,0);
 80010a4:	2100      	movs	r1, #0
 80010a6:	2020      	movs	r0, #32
 80010a8:	f7ff ff2c 	bl	8000f04 <GYRO_WriteData>

   //Check SPI communication
    GYRO_ReadData(GYRO_DEVID, &devId);
 80010ac:	1dfb      	adds	r3, r7, #7
 80010ae:	4619      	mov	r1, r3
 80010b0:	200f      	movs	r0, #15
 80010b2:	f7ff ff5f 	bl	8000f74 <GYRO_ReadData>
    if(devId != 0xD3)
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	2bd3      	cmp	r3, #211	; 0xd3
 80010ba:	d001      	beq.n	80010c0 <GYRO_PowerMode+0x3c>
    {
    	Error_Handler();
 80010bc:	f000 f9f9 	bl	80014b2 <Error_Handler>
    }
   //enable pin2 DRDY interrupt
    GYRO_WriteData(GYRO_CTRLREG3, 0x8);   //setam bit D3 I2_DRDY pentru a activa intreruprea Data Ready;
 80010c0:	2108      	movs	r1, #8
 80010c2:	2022      	movs	r0, #34	; 0x22
 80010c4:	f7ff ff1e 	bl	8000f04 <GYRO_WriteData>

   //start GYRO power mode-normal
	GYRO_WriteData(GYRO_CTRL_REG1,GYRO_POWERMODENORMAL);
 80010c8:	210f      	movs	r1, #15
 80010ca:	2020      	movs	r0, #32
 80010cc:	f7ff ff1a 	bl	8000f04 <GYRO_WriteData>

}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	48000800 	.word	0x48000800

080010dc <GYRO_XYZConv>:

void GYRO_XYZConv(int16_t *xg, int16_t *yg, int16_t *zg)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]



	*xg = (*xg) * GYRO345_SCALE_FACTOR;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	461a      	mov	r2, r3
 80010f2:	00d2      	lsls	r2, r2, #3
 80010f4:	4413      	add	r3, r2
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	b21a      	sxth	r2, r3
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	801a      	strh	r2, [r3, #0]
	*yg = (*yg) * GYRO345_SCALE_FACTOR;
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001104:	b29b      	uxth	r3, r3
 8001106:	461a      	mov	r2, r3
 8001108:	00d2      	lsls	r2, r2, #3
 800110a:	4413      	add	r3, r2
 800110c:	b29b      	uxth	r3, r3
 800110e:	b21a      	sxth	r2, r3
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	801a      	strh	r2, [r3, #0]
	*zg = (*zg) * GYRO345_SCALE_FACTOR;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f9b3 3000 	ldrsh.w	r3, [r3]
 800111a:	b29b      	uxth	r3, r3
 800111c:	461a      	mov	r2, r3
 800111e:	00d2      	lsls	r2, r2, #3
 8001120:	4413      	add	r3, r2
 8001122:	b29b      	uxth	r3, r3
 8001124:	b21a      	sxth	r2, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	801a      	strh	r2, [r3, #0]
}
 800112a:	bf00      	nop
 800112c:	3714      	adds	r7, #20
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
	...

08001138 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800113e:	4b10      	ldr	r3, [pc, #64]	; (8001180 <MX_DMA_Init+0x48>)
 8001140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001142:	4a0f      	ldr	r2, [pc, #60]	; (8001180 <MX_DMA_Init+0x48>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6493      	str	r3, [r2, #72]	; 0x48
 800114a:	4b0d      	ldr	r3, [pc, #52]	; (8001180 <MX_DMA_Init+0x48>)
 800114c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 8001156:	2200      	movs	r2, #0
 8001158:	2102      	movs	r1, #2
 800115a:	200c      	movs	r0, #12
 800115c:	f000 fee1 	bl	8001f22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001160:	200c      	movs	r0, #12
 8001162:	f000 fefa 	bl	8001f5a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 2, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2102      	movs	r1, #2
 800116a:	200d      	movs	r0, #13
 800116c:	f000 fed9 	bl	8001f22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001170:	200d      	movs	r0, #13
 8001172:	f000 fef2 	bl	8001f5a <HAL_NVIC_EnableIRQ>

}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40021000 	.word	0x40021000

08001184 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08a      	sub	sp, #40	; 0x28
 8001188:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]
 8001198:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800119a:	4b67      	ldr	r3, [pc, #412]	; (8001338 <MX_GPIO_Init+0x1b4>)
 800119c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119e:	4a66      	ldr	r2, [pc, #408]	; (8001338 <MX_GPIO_Init+0x1b4>)
 80011a0:	f043 0304 	orr.w	r3, r3, #4
 80011a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a6:	4b64      	ldr	r3, [pc, #400]	; (8001338 <MX_GPIO_Init+0x1b4>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011aa:	f003 0304 	and.w	r3, r3, #4
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011b2:	4b61      	ldr	r3, [pc, #388]	; (8001338 <MX_GPIO_Init+0x1b4>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b6:	4a60      	ldr	r2, [pc, #384]	; (8001338 <MX_GPIO_Init+0x1b4>)
 80011b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011be:	4b5e      	ldr	r3, [pc, #376]	; (8001338 <MX_GPIO_Init+0x1b4>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ca:	4b5b      	ldr	r3, [pc, #364]	; (8001338 <MX_GPIO_Init+0x1b4>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ce:	4a5a      	ldr	r2, [pc, #360]	; (8001338 <MX_GPIO_Init+0x1b4>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d6:	4b58      	ldr	r3, [pc, #352]	; (8001338 <MX_GPIO_Init+0x1b4>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e2:	4b55      	ldr	r3, [pc, #340]	; (8001338 <MX_GPIO_Init+0x1b4>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e6:	4a54      	ldr	r2, [pc, #336]	; (8001338 <MX_GPIO_Init+0x1b4>)
 80011e8:	f043 0302 	orr.w	r3, r3, #2
 80011ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ee:	4b52      	ldr	r3, [pc, #328]	; (8001338 <MX_GPIO_Init+0x1b4>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GYRO_GPIO_Port, SPI_CS_GYRO_Pin, GPIO_PIN_SET);
 80011fa:	2201      	movs	r2, #1
 80011fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001200:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001204:	f001 fab4 	bl	8002770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXTI_INT_TEST_GPIO_Port, EXTI_INT_TEST_Pin, GPIO_PIN_RESET);
 8001208:	2200      	movs	r2, #0
 800120a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800120e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001212:	f001 faad 	bl	8002770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADXL_RESET_GPIO_Port, ADXL_RESET_Pin, GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800121c:	4847      	ldr	r0, [pc, #284]	; (800133c <MX_GPIO_Init+0x1b8>)
 800121e:	f001 faa7 	bl	8002770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_IT_TEST_GPIO_Port, SPI_IT_TEST_Pin, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	2120      	movs	r1, #32
 8001226:	4846      	ldr	r0, [pc, #280]	; (8001340 <MX_GPIO_Init+0x1bc>)
 8001228:	f001 faa2 	bl	8002770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_ACC_GPIO_Port, SPI_CS_ACC_Pin, GPIO_PIN_SET);
 800122c:	2201      	movs	r2, #1
 800122e:	2140      	movs	r1, #64	; 0x40
 8001230:	4843      	ldr	r0, [pc, #268]	; (8001340 <MX_GPIO_Init+0x1bc>)
 8001232:	f001 fa9d 	bl	8002770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001236:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800123a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800123c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001240:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	4619      	mov	r1, r3
 800124c:	483b      	ldr	r0, [pc, #236]	; (800133c <MX_GPIO_Init+0x1b8>)
 800124e:	f001 f8e5 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_EXTI8ACCINT_Pin;
 8001252:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001256:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001258:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800125c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800125e:	2302      	movs	r3, #2
 8001260:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_EXTI8ACCINT_GPIO_Port, &GPIO_InitStruct);
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	4619      	mov	r1, r3
 8001268:	4834      	ldr	r0, [pc, #208]	; (800133c <MX_GPIO_Init+0x1b8>)
 800126a:	f001 f8d7 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_GYRO_Pin;
 800126e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001272:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001274:	2301      	movs	r3, #1
 8001276:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800127c:	2302      	movs	r3, #2
 800127e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GYRO_GPIO_Port, &GPIO_InitStruct);
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	4619      	mov	r1, r3
 8001286:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800128a:	f001 f8c7 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXTI_INT_TEST_Pin;
 800128e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001292:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001294:	2301      	movs	r3, #1
 8001296:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129c:	2300      	movs	r3, #0
 800129e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EXTI_INT_TEST_GPIO_Port, &GPIO_InitStruct);
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	4619      	mov	r1, r3
 80012a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012aa:	f001 f8b7 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADXL_RESET_Pin;
 80012ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b4:	2301      	movs	r3, #1
 80012b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012bc:	2300      	movs	r3, #0
 80012be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ADXL_RESET_GPIO_Port, &GPIO_InitStruct);
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4619      	mov	r1, r3
 80012c6:	481d      	ldr	r0, [pc, #116]	; (800133c <MX_GPIO_Init+0x1b8>)
 80012c8:	f001 f8a8 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_IT_TEST_Pin;
 80012cc:	2320      	movs	r3, #32
 80012ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d0:	2301      	movs	r3, #1
 80012d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2300      	movs	r3, #0
 80012da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_IT_TEST_GPIO_Port, &GPIO_InitStruct);
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	4619      	mov	r1, r3
 80012e2:	4817      	ldr	r0, [pc, #92]	; (8001340 <MX_GPIO_Init+0x1bc>)
 80012e4:	f001 f89a 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_ACC_Pin;
 80012e8:	2340      	movs	r3, #64	; 0x40
 80012ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ec:	2301      	movs	r3, #1
 80012ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012f4:	2302      	movs	r3, #2
 80012f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_ACC_GPIO_Port, &GPIO_InitStruct);
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	4619      	mov	r1, r3
 80012fe:	4810      	ldr	r0, [pc, #64]	; (8001340 <MX_GPIO_Init+0x1bc>)
 8001300:	f001 f88c 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_EXTI9GYRO_Pin;
 8001304:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001308:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800130a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800130e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_EXTI9GYRO_GPIO_Port, &GPIO_InitStruct);
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	4619      	mov	r1, r3
 800131a:	4809      	ldr	r0, [pc, #36]	; (8001340 <MX_GPIO_Init+0x1bc>)
 800131c:	f001 f87e 	bl	800241c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8001320:	2200      	movs	r2, #0
 8001322:	2102      	movs	r1, #2
 8001324:	2017      	movs	r0, #23
 8001326:	f000 fdfc 	bl	8001f22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800132a:	2017      	movs	r0, #23
 800132c:	f000 fe15 	bl	8001f5a <HAL_NVIC_EnableIRQ>

}
 8001330:	bf00      	nop
 8001332:	3728      	adds	r7, #40	; 0x28
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40021000 	.word	0x40021000
 800133c:	48000800 	.word	0x48000800
 8001340:	48000400 	.word	0x48000400

08001344 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_EXTI8ACCINT_Pin)
 800134e:	88fb      	ldrh	r3, [r7, #6]
 8001350:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001354:	d10d      	bne.n	8001372 <HAL_GPIO_EXTI_Callback+0x2e>
	{
		HAL_GPIO_TogglePin(EXTI_INT_TEST_GPIO_Port, EXTI_INT_TEST_Pin);
 8001356:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800135a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800135e:	f001 fa1f 	bl	80027a0 <HAL_GPIO_TogglePin>
		ADXL_IT_StartSPI();
 8001362:	f7ff fda3 	bl	8000eac <ADXL_IT_StartSPI>
		HAL_GPIO_TogglePin(EXTI_INT_TEST_GPIO_Port, EXTI_INT_TEST_Pin);
 8001366:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800136a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800136e:	f001 fa17 	bl	80027a0 <HAL_GPIO_TogglePin>
	}

	if(GPIO_Pin == GPIO_EXTI9GYRO_Pin && GYRO_EXTI_Interrupt == false)
 8001372:	88fb      	ldrh	r3, [r7, #6]
 8001374:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001378:	d109      	bne.n	800138e <HAL_GPIO_EXTI_Callback+0x4a>
 800137a:	4b07      	ldr	r3, [pc, #28]	; (8001398 <HAL_GPIO_EXTI_Callback+0x54>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	f083 0301 	eor.w	r3, r3, #1
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2b00      	cmp	r3, #0
 8001386:	d002      	beq.n	800138e <HAL_GPIO_EXTI_Callback+0x4a>
	{
          GYRO_EXTI_Interrupt = true;
 8001388:	4b03      	ldr	r3, [pc, #12]	; (8001398 <HAL_GPIO_EXTI_Callback+0x54>)
 800138a:	2201      	movs	r2, #1
 800138c:	701a      	strb	r2, [r3, #0]
	}
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	200001f9 	.word	0x200001f9

0800139c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013a2:	f000 fc1f 	bl	8001be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013a6:	f000 f833 	bl	8001410 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013aa:	f7ff feeb 	bl	8001184 <MX_GPIO_Init>
  MX_DMA_Init();
 80013ae:	f7ff fec3 	bl	8001138 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80013b2:	f000 fadb 	bl	800196c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80013b6:	f000 f881 	bl	80014bc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80013ba:	2017      	movs	r0, #23
 80013bc:	f000 fddb 	bl	8001f76 <HAL_NVIC_DisableIRQ>
  //  ADXL_Init();
  	GYRO_PowerMode();
 80013c0:	f7ff fe60 	bl	8001084 <GYRO_PowerMode>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80013c4:	2017      	movs	r0, #23
 80013c6:	f000 fdc8 	bl	8001f5a <HAL_NVIC_EnableIRQ>
    int16_t x,y,z;
  //  ADXL_ReadValuesXYZ(&x, &y, &z);

	GYRO_ReadValuesXYZ(&x, &y, &z);
 80013ca:	1cba      	adds	r2, r7, #2
 80013cc:	1d39      	adds	r1, r7, #4
 80013ce:	1dbb      	adds	r3, r7, #6
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fe0b 	bl	8000fec <GYRO_ReadValuesXYZ>
//		  ADXL_IT_GetValuesXYZ(&x, &y, &z);
//		  ADXL_ConvertXYZValuesG(&x, &y, &z);
//		  USART_TransmitACCValues(&x, &y, &z);
//	  }

   if(GYRO_EXTI_Interrupt)
 80013d6:	4b0d      	ldr	r3, [pc, #52]	; (800140c <main+0x70>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d0fb      	beq.n	80013d6 <main+0x3a>
   {
	  //  GYRO_EXTI_Interrupt = false;
	    GYRO_ReadValuesXYZ(&x, &y, &z);
 80013de:	1cba      	adds	r2, r7, #2
 80013e0:	1d39      	adds	r1, r7, #4
 80013e2:	1dbb      	adds	r3, r7, #6
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff fe01 	bl	8000fec <GYRO_ReadValuesXYZ>
	    GYRO_XYZConv(&x, &y, &z);
 80013ea:	1cba      	adds	r2, r7, #2
 80013ec:	1d39      	adds	r1, r7, #4
 80013ee:	1dbb      	adds	r3, r7, #6
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fe73 	bl	80010dc <GYRO_XYZConv>
   	    USART_TransmitGYROValues(&x, &y, &z);
 80013f6:	1cba      	adds	r2, r7, #2
 80013f8:	1d39      	adds	r1, r7, #4
 80013fa:	1dbb      	adds	r3, r7, #6
 80013fc:	4618      	mov	r0, r3
 80013fe:	f000 fb41 	bl	8001a84 <USART_TransmitGYROValues>
   	    GYRO_EXTI_Interrupt = false;
 8001402:	4b02      	ldr	r3, [pc, #8]	; (800140c <main+0x70>)
 8001404:	2200      	movs	r2, #0
 8001406:	701a      	strb	r2, [r3, #0]
   if(GYRO_EXTI_Interrupt)
 8001408:	e7e5      	b.n	80013d6 <main+0x3a>
 800140a:	bf00      	nop
 800140c:	200001f9 	.word	0x200001f9

08001410 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b096      	sub	sp, #88	; 0x58
 8001414:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001416:	f107 0314 	add.w	r3, r7, #20
 800141a:	2244      	movs	r2, #68	; 0x44
 800141c:	2100      	movs	r1, #0
 800141e:	4618      	mov	r0, r3
 8001420:	f004 fa98 	bl	8005954 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001424:	463b      	mov	r3, r7
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
 8001430:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001432:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001436:	f001 f9f3 	bl	8002820 <HAL_PWREx_ControlVoltageScaling>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001440:	f000 f837 	bl	80014b2 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001444:	2302      	movs	r3, #2
 8001446:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001448:	f44f 7380 	mov.w	r3, #256	; 0x100
 800144c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800144e:	2310      	movs	r3, #16
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001452:	2302      	movs	r3, #2
 8001454:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001456:	2302      	movs	r3, #2
 8001458:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800145a:	2301      	movs	r3, #1
 800145c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800145e:	230a      	movs	r3, #10
 8001460:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001462:	2307      	movs	r3, #7
 8001464:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001466:	2302      	movs	r3, #2
 8001468:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800146a:	2302      	movs	r3, #2
 800146c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	4618      	mov	r0, r3
 8001474:	f001 fa2a 	bl	80028cc <HAL_RCC_OscConfig>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800147e:	f000 f818 	bl	80014b2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001482:	230f      	movs	r3, #15
 8001484:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001486:	2303      	movs	r3, #3
 8001488:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800148a:	2300      	movs	r3, #0
 800148c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001496:	463b      	mov	r3, r7
 8001498:	2104      	movs	r1, #4
 800149a:	4618      	mov	r0, r3
 800149c:	f001 fdf2 	bl	8003084 <HAL_RCC_ClockConfig>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80014a6:	f000 f804 	bl	80014b2 <Error_Handler>
  }
}
 80014aa:	bf00      	nop
 80014ac:	3758      	adds	r7, #88	; 0x58
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b6:	b672      	cpsid	i
}
 80014b8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014ba:	e7fe      	b.n	80014ba <Error_Handler+0x8>

080014bc <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80014c0:	4b1b      	ldr	r3, [pc, #108]	; (8001530 <MX_SPI1_Init+0x74>)
 80014c2:	4a1c      	ldr	r2, [pc, #112]	; (8001534 <MX_SPI1_Init+0x78>)
 80014c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014c6:	4b1a      	ldr	r3, [pc, #104]	; (8001530 <MX_SPI1_Init+0x74>)
 80014c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014ce:	4b18      	ldr	r3, [pc, #96]	; (8001530 <MX_SPI1_Init+0x74>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014d4:	4b16      	ldr	r3, [pc, #88]	; (8001530 <MX_SPI1_Init+0x74>)
 80014d6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80014da:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80014dc:	4b14      	ldr	r3, [pc, #80]	; (8001530 <MX_SPI1_Init+0x74>)
 80014de:	2202      	movs	r2, #2
 80014e0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80014e2:	4b13      	ldr	r3, [pc, #76]	; (8001530 <MX_SPI1_Init+0x74>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014e8:	4b11      	ldr	r3, [pc, #68]	; (8001530 <MX_SPI1_Init+0x74>)
 80014ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014ee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80014f0:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <MX_SPI1_Init+0x74>)
 80014f2:	2238      	movs	r2, #56	; 0x38
 80014f4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014f6:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <MX_SPI1_Init+0x74>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014fc:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <MX_SPI1_Init+0x74>)
 80014fe:	2200      	movs	r2, #0
 8001500:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <MX_SPI1_Init+0x74>)
 8001504:	2200      	movs	r2, #0
 8001506:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <MX_SPI1_Init+0x74>)
 800150a:	2207      	movs	r2, #7
 800150c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800150e:	4b08      	ldr	r3, [pc, #32]	; (8001530 <MX_SPI1_Init+0x74>)
 8001510:	2200      	movs	r2, #0
 8001512:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001514:	4b06      	ldr	r3, [pc, #24]	; (8001530 <MX_SPI1_Init+0x74>)
 8001516:	2200      	movs	r2, #0
 8001518:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800151a:	4805      	ldr	r0, [pc, #20]	; (8001530 <MX_SPI1_Init+0x74>)
 800151c:	f002 fc92 	bl	8003e44 <HAL_SPI_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001526:	f7ff ffc4 	bl	80014b2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	2000020c 	.word	0x2000020c
 8001534:	40013000 	.word	0x40013000

08001538 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08a      	sub	sp, #40	; 0x28
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a46      	ldr	r2, [pc, #280]	; (8001670 <HAL_SPI_MspInit+0x138>)
 8001556:	4293      	cmp	r3, r2
 8001558:	f040 8085 	bne.w	8001666 <HAL_SPI_MspInit+0x12e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800155c:	4b45      	ldr	r3, [pc, #276]	; (8001674 <HAL_SPI_MspInit+0x13c>)
 800155e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001560:	4a44      	ldr	r2, [pc, #272]	; (8001674 <HAL_SPI_MspInit+0x13c>)
 8001562:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001566:	6613      	str	r3, [r2, #96]	; 0x60
 8001568:	4b42      	ldr	r3, [pc, #264]	; (8001674 <HAL_SPI_MspInit+0x13c>)
 800156a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800156c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001574:	4b3f      	ldr	r3, [pc, #252]	; (8001674 <HAL_SPI_MspInit+0x13c>)
 8001576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001578:	4a3e      	ldr	r2, [pc, #248]	; (8001674 <HAL_SPI_MspInit+0x13c>)
 800157a:	f043 0301 	orr.w	r3, r3, #1
 800157e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001580:	4b3c      	ldr	r3, [pc, #240]	; (8001674 <HAL_SPI_MspInit+0x13c>)
 8001582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001584:	f003 0301 	and.w	r3, r3, #1
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800158c:	23e0      	movs	r3, #224	; 0xe0
 800158e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001598:	2303      	movs	r3, #3
 800159a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800159c:	2305      	movs	r3, #5
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4619      	mov	r1, r3
 80015a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015aa:	f000 ff37 	bl	800241c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 80015ae:	4b32      	ldr	r3, [pc, #200]	; (8001678 <HAL_SPI_MspInit+0x140>)
 80015b0:	4a32      	ldr	r2, [pc, #200]	; (800167c <HAL_SPI_MspInit+0x144>)
 80015b2:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 80015b4:	4b30      	ldr	r3, [pc, #192]	; (8001678 <HAL_SPI_MspInit+0x140>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015ba:	4b2f      	ldr	r3, [pc, #188]	; (8001678 <HAL_SPI_MspInit+0x140>)
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015c0:	4b2d      	ldr	r3, [pc, #180]	; (8001678 <HAL_SPI_MspInit+0x140>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015c6:	4b2c      	ldr	r3, [pc, #176]	; (8001678 <HAL_SPI_MspInit+0x140>)
 80015c8:	2280      	movs	r2, #128	; 0x80
 80015ca:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015cc:	4b2a      	ldr	r3, [pc, #168]	; (8001678 <HAL_SPI_MspInit+0x140>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015d2:	4b29      	ldr	r3, [pc, #164]	; (8001678 <HAL_SPI_MspInit+0x140>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80015d8:	4b27      	ldr	r3, [pc, #156]	; (8001678 <HAL_SPI_MspInit+0x140>)
 80015da:	2200      	movs	r2, #0
 80015dc:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80015de:	4b26      	ldr	r3, [pc, #152]	; (8001678 <HAL_SPI_MspInit+0x140>)
 80015e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80015e6:	4824      	ldr	r0, [pc, #144]	; (8001678 <HAL_SPI_MspInit+0x140>)
 80015e8:	f000 fce0 	bl	8001fac <HAL_DMA_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_SPI_MspInit+0xbe>
    {
      Error_Handler();
 80015f2:	f7ff ff5e 	bl	80014b2 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a1f      	ldr	r2, [pc, #124]	; (8001678 <HAL_SPI_MspInit+0x140>)
 80015fa:	659a      	str	r2, [r3, #88]	; 0x58
 80015fc:	4a1e      	ldr	r2, [pc, #120]	; (8001678 <HAL_SPI_MspInit+0x140>)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001602:	4b1f      	ldr	r3, [pc, #124]	; (8001680 <HAL_SPI_MspInit+0x148>)
 8001604:	4a1f      	ldr	r2, [pc, #124]	; (8001684 <HAL_SPI_MspInit+0x14c>)
 8001606:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8001608:	4b1d      	ldr	r3, [pc, #116]	; (8001680 <HAL_SPI_MspInit+0x148>)
 800160a:	2201      	movs	r2, #1
 800160c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800160e:	4b1c      	ldr	r3, [pc, #112]	; (8001680 <HAL_SPI_MspInit+0x148>)
 8001610:	2210      	movs	r2, #16
 8001612:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001614:	4b1a      	ldr	r3, [pc, #104]	; (8001680 <HAL_SPI_MspInit+0x148>)
 8001616:	2200      	movs	r2, #0
 8001618:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800161a:	4b19      	ldr	r3, [pc, #100]	; (8001680 <HAL_SPI_MspInit+0x148>)
 800161c:	2280      	movs	r2, #128	; 0x80
 800161e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001620:	4b17      	ldr	r3, [pc, #92]	; (8001680 <HAL_SPI_MspInit+0x148>)
 8001622:	2200      	movs	r2, #0
 8001624:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001626:	4b16      	ldr	r3, [pc, #88]	; (8001680 <HAL_SPI_MspInit+0x148>)
 8001628:	2200      	movs	r2, #0
 800162a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800162c:	4b14      	ldr	r3, [pc, #80]	; (8001680 <HAL_SPI_MspInit+0x148>)
 800162e:	2200      	movs	r2, #0
 8001630:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001632:	4b13      	ldr	r3, [pc, #76]	; (8001680 <HAL_SPI_MspInit+0x148>)
 8001634:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001638:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800163a:	4811      	ldr	r0, [pc, #68]	; (8001680 <HAL_SPI_MspInit+0x148>)
 800163c:	f000 fcb6 	bl	8001fac <HAL_DMA_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 8001646:	f7ff ff34 	bl	80014b2 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a0c      	ldr	r2, [pc, #48]	; (8001680 <HAL_SPI_MspInit+0x148>)
 800164e:	655a      	str	r2, [r3, #84]	; 0x54
 8001650:	4a0b      	ldr	r2, [pc, #44]	; (8001680 <HAL_SPI_MspInit+0x148>)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8001656:	2200      	movs	r2, #0
 8001658:	2102      	movs	r1, #2
 800165a:	2023      	movs	r0, #35	; 0x23
 800165c:	f000 fc61 	bl	8001f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001660:	2023      	movs	r0, #35	; 0x23
 8001662:	f000 fc7a 	bl	8001f5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001666:	bf00      	nop
 8001668:	3728      	adds	r7, #40	; 0x28
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40013000 	.word	0x40013000
 8001674:	40021000 	.word	0x40021000
 8001678:	20000270 	.word	0x20000270
 800167c:	4002001c 	.word	0x4002001c
 8001680:	200002b8 	.word	0x200002b8
 8001684:	40020030 	.word	0x40020030

08001688 <HAL_SPI_TxRxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
   if(hspi == &hspi1)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4a0b      	ldr	r2, [pc, #44]	; (80016c0 <HAL_SPI_TxRxCpltCallback+0x38>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d10b      	bne.n	80016b0 <HAL_SPI_TxRxCpltCallback+0x28>
   {
      is_new_ACC_datacomplete = true;
 8001698:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <HAL_SPI_TxRxCpltCallback+0x3c>)
 800169a:	2201      	movs	r2, #1
 800169c:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(SPI_CS_ACC_GPIO_Port, SPI_CS_ACC_Pin, GPIO_PIN_SET);
 800169e:	2201      	movs	r2, #1
 80016a0:	2140      	movs	r1, #64	; 0x40
 80016a2:	4809      	ldr	r0, [pc, #36]	; (80016c8 <HAL_SPI_TxRxCpltCallback+0x40>)
 80016a4:	f001 f864 	bl	8002770 <HAL_GPIO_WritePin>
      HAL_GPIO_TogglePin(SPI_IT_TEST_GPIO_Port, SPI_IT_TEST_Pin);
 80016a8:	2120      	movs	r1, #32
 80016aa:	4807      	ldr	r0, [pc, #28]	; (80016c8 <HAL_SPI_TxRxCpltCallback+0x40>)
 80016ac:	f001 f878 	bl	80027a0 <HAL_GPIO_TogglePin>
   }

   //Release CS line
   HAL_GPIO_TogglePin(SPI_IT_TEST_GPIO_Port, SPI_IT_TEST_Pin);
 80016b0:	2120      	movs	r1, #32
 80016b2:	4805      	ldr	r0, [pc, #20]	; (80016c8 <HAL_SPI_TxRxCpltCallback+0x40>)
 80016b4:	f001 f874 	bl	80027a0 <HAL_GPIO_TogglePin>
}
 80016b8:	bf00      	nop
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	2000020c 	.word	0x2000020c
 80016c4:	200001f8 	.word	0x200001f8
 80016c8:	48000400 	.word	0x48000400

080016cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d2:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <HAL_MspInit+0x44>)
 80016d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016d6:	4a0e      	ldr	r2, [pc, #56]	; (8001710 <HAL_MspInit+0x44>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	6613      	str	r3, [r2, #96]	; 0x60
 80016de:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <HAL_MspInit+0x44>)
 80016e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ea:	4b09      	ldr	r3, [pc, #36]	; (8001710 <HAL_MspInit+0x44>)
 80016ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ee:	4a08      	ldr	r2, [pc, #32]	; (8001710 <HAL_MspInit+0x44>)
 80016f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f4:	6593      	str	r3, [r2, #88]	; 0x58
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <HAL_MspInit+0x44>)
 80016f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	40021000 	.word	0x40021000

08001714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001718:	e7fe      	b.n	8001718 <NMI_Handler+0x4>

0800171a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800171e:	e7fe      	b.n	800171e <HardFault_Handler+0x4>

08001720 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001724:	e7fe      	b.n	8001724 <MemManage_Handler+0x4>

08001726 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800172a:	e7fe      	b.n	800172a <BusFault_Handler+0x4>

0800172c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001730:	e7fe      	b.n	8001730 <UsageFault_Handler+0x4>

08001732 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001760:	f000 fa9c 	bl	8001c9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}

08001768 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800176c:	4802      	ldr	r0, [pc, #8]	; (8001778 <DMA1_Channel2_IRQHandler+0x10>)
 800176e:	f000 fd76 	bl	800225e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000270 	.word	0x20000270

0800177c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001780:	4802      	ldr	r0, [pc, #8]	; (800178c <DMA1_Channel3_IRQHandler+0x10>)
 8001782:	f000 fd6c 	bl	800225e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	200002b8 	.word	0x200002b8

08001790 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_EXTI8ACCINT_Pin);
 8001794:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001798:	f001 f81c 	bl	80027d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_EXTI9GYRO_Pin);
 800179c:	f44f 7000 	mov.w	r0, #512	; 0x200
 80017a0:	f001 f818 	bl	80027d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80017ac:	4802      	ldr	r0, [pc, #8]	; (80017b8 <SPI1_IRQHandler+0x10>)
 80017ae:	f002 ff8b 	bl	80046c8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	2000020c 	.word	0x2000020c

080017bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
	return 1;
 80017c0:	2301      	movs	r3, #1
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <_kill>:

int _kill(int pid, int sig)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017d6:	f004 f893 	bl	8005900 <__errno>
 80017da:	4603      	mov	r3, r0
 80017dc:	2216      	movs	r2, #22
 80017de:	601a      	str	r2, [r3, #0]
	return -1;
 80017e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <_exit>:

void _exit (int status)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017f4:	f04f 31ff 	mov.w	r1, #4294967295
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff ffe7 	bl	80017cc <_kill>
	while (1) {}		/* Make sure we hang here */
 80017fe:	e7fe      	b.n	80017fe <_exit+0x12>

08001800 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]
 8001810:	e00a      	b.n	8001828 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001812:	f3af 8000 	nop.w
 8001816:	4601      	mov	r1, r0
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	1c5a      	adds	r2, r3, #1
 800181c:	60ba      	str	r2, [r7, #8]
 800181e:	b2ca      	uxtb	r2, r1
 8001820:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	3301      	adds	r3, #1
 8001826:	617b      	str	r3, [r7, #20]
 8001828:	697a      	ldr	r2, [r7, #20]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	429a      	cmp	r2, r3
 800182e:	dbf0      	blt.n	8001812 <_read+0x12>
	}

return len;
 8001830:	687b      	ldr	r3, [r7, #4]
}
 8001832:	4618      	mov	r0, r3
 8001834:	3718      	adds	r7, #24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b086      	sub	sp, #24
 800183e:	af00      	add	r7, sp, #0
 8001840:	60f8      	str	r0, [r7, #12]
 8001842:	60b9      	str	r1, [r7, #8]
 8001844:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001846:	2300      	movs	r3, #0
 8001848:	617b      	str	r3, [r7, #20]
 800184a:	e009      	b.n	8001860 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	1c5a      	adds	r2, r3, #1
 8001850:	60ba      	str	r2, [r7, #8]
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	3301      	adds	r3, #1
 800185e:	617b      	str	r3, [r7, #20]
 8001860:	697a      	ldr	r2, [r7, #20]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	429a      	cmp	r2, r3
 8001866:	dbf1      	blt.n	800184c <_write+0x12>
	}
	return len;
 8001868:	687b      	ldr	r3, [r7, #4]
}
 800186a:	4618      	mov	r0, r3
 800186c:	3718      	adds	r7, #24
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <_close>:

int _close(int file)
{
 8001872:	b480      	push	{r7}
 8001874:	b083      	sub	sp, #12
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
	return -1;
 800187a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800187e:	4618      	mov	r0, r3
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800188a:	b480      	push	{r7}
 800188c:	b083      	sub	sp, #12
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
 8001892:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800189a:	605a      	str	r2, [r3, #4]
	return 0;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <_isatty>:

int _isatty(int file)
{
 80018aa:	b480      	push	{r7}
 80018ac:	b083      	sub	sp, #12
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
	return 1;
 80018b2:	2301      	movs	r3, #1
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
	return 0;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
	...

080018dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018e4:	4a14      	ldr	r2, [pc, #80]	; (8001938 <_sbrk+0x5c>)
 80018e6:	4b15      	ldr	r3, [pc, #84]	; (800193c <_sbrk+0x60>)
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018f0:	4b13      	ldr	r3, [pc, #76]	; (8001940 <_sbrk+0x64>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d102      	bne.n	80018fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018f8:	4b11      	ldr	r3, [pc, #68]	; (8001940 <_sbrk+0x64>)
 80018fa:	4a12      	ldr	r2, [pc, #72]	; (8001944 <_sbrk+0x68>)
 80018fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018fe:	4b10      	ldr	r3, [pc, #64]	; (8001940 <_sbrk+0x64>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4413      	add	r3, r2
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	429a      	cmp	r2, r3
 800190a:	d207      	bcs.n	800191c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800190c:	f003 fff8 	bl	8005900 <__errno>
 8001910:	4603      	mov	r3, r0
 8001912:	220c      	movs	r2, #12
 8001914:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001916:	f04f 33ff 	mov.w	r3, #4294967295
 800191a:	e009      	b.n	8001930 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800191c:	4b08      	ldr	r3, [pc, #32]	; (8001940 <_sbrk+0x64>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001922:	4b07      	ldr	r3, [pc, #28]	; (8001940 <_sbrk+0x64>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4413      	add	r3, r2
 800192a:	4a05      	ldr	r2, [pc, #20]	; (8001940 <_sbrk+0x64>)
 800192c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800192e:	68fb      	ldr	r3, [r7, #12]
}
 8001930:	4618      	mov	r0, r3
 8001932:	3718      	adds	r7, #24
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	20018000 	.word	0x20018000
 800193c:	00000400 	.word	0x00000400
 8001940:	20000300 	.word	0x20000300
 8001944:	200003a0 	.word	0x200003a0

08001948 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800194c:	4b06      	ldr	r3, [pc, #24]	; (8001968 <SystemInit+0x20>)
 800194e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001952:	4a05      	ldr	r2, [pc, #20]	; (8001968 <SystemInit+0x20>)
 8001954:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001958:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001970:	4b14      	ldr	r3, [pc, #80]	; (80019c4 <MX_USART2_UART_Init+0x58>)
 8001972:	4a15      	ldr	r2, [pc, #84]	; (80019c8 <MX_USART2_UART_Init+0x5c>)
 8001974:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001976:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <MX_USART2_UART_Init+0x58>)
 8001978:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800197c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800197e:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <MX_USART2_UART_Init+0x58>)
 8001980:	2200      	movs	r2, #0
 8001982:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001984:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <MX_USART2_UART_Init+0x58>)
 8001986:	2200      	movs	r2, #0
 8001988:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800198a:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <MX_USART2_UART_Init+0x58>)
 800198c:	2200      	movs	r2, #0
 800198e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001990:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <MX_USART2_UART_Init+0x58>)
 8001992:	220c      	movs	r2, #12
 8001994:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001996:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <MX_USART2_UART_Init+0x58>)
 8001998:	2200      	movs	r2, #0
 800199a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800199c:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <MX_USART2_UART_Init+0x58>)
 800199e:	2200      	movs	r2, #0
 80019a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019a2:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <MX_USART2_UART_Init+0x58>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019a8:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <MX_USART2_UART_Init+0x58>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019ae:	4805      	ldr	r0, [pc, #20]	; (80019c4 <MX_USART2_UART_Init+0x58>)
 80019b0:	f003 fa5c 	bl	8004e6c <HAL_UART_Init>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80019ba:	f7ff fd7a 	bl	80014b2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000304 	.word	0x20000304
 80019c8:	40004400 	.word	0x40004400

080019cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b0ac      	sub	sp, #176	; 0xb0
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	2288      	movs	r2, #136	; 0x88
 80019ea:	2100      	movs	r1, #0
 80019ec:	4618      	mov	r0, r3
 80019ee:	f003 ffb1 	bl	8005954 <memset>
  if(uartHandle->Instance==USART2)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a21      	ldr	r2, [pc, #132]	; (8001a7c <HAL_UART_MspInit+0xb0>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d13b      	bne.n	8001a74 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80019fc:	2302      	movs	r3, #2
 80019fe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a00:	2300      	movs	r3, #0
 8001a02:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a04:	f107 0314 	add.w	r3, r7, #20
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f001 fd5f 	bl	80034cc <HAL_RCCEx_PeriphCLKConfig>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a14:	f7ff fd4d 	bl	80014b2 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a18:	4b19      	ldr	r3, [pc, #100]	; (8001a80 <HAL_UART_MspInit+0xb4>)
 8001a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1c:	4a18      	ldr	r2, [pc, #96]	; (8001a80 <HAL_UART_MspInit+0xb4>)
 8001a1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a22:	6593      	str	r3, [r2, #88]	; 0x58
 8001a24:	4b16      	ldr	r3, [pc, #88]	; (8001a80 <HAL_UART_MspInit+0xb4>)
 8001a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2c:	613b      	str	r3, [r7, #16]
 8001a2e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a30:	4b13      	ldr	r3, [pc, #76]	; (8001a80 <HAL_UART_MspInit+0xb4>)
 8001a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a34:	4a12      	ldr	r2, [pc, #72]	; (8001a80 <HAL_UART_MspInit+0xb4>)
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a3c:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <HAL_UART_MspInit+0xb4>)
 8001a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a48:	230c      	movs	r3, #12
 8001a4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a60:	2307      	movs	r3, #7
 8001a62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a66:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a70:	f000 fcd4 	bl	800241c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001a74:	bf00      	nop
 8001a76:	37b0      	adds	r7, #176	; 0xb0
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40004400 	.word	0x40004400
 8001a80:	40021000 	.word	0x40021000

08001a84 <USART_TransmitGYROValues>:
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);

}

void USART_TransmitGYROValues(int16_t *x, int16_t *y, int16_t *z)
{
 8001a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a86:	b0bb      	sub	sp, #236	; 0xec
 8001a88:	af04      	add	r7, sp, #16
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]


    char buffer[200];

    sprintf(buffer, "GYRO: xg = %d,%03d   yg = %d,%03d  zg = %.d,%03d \r\n", (*x) / 1000, abs((*x) % 1000), (*y) / 1000, abs((*y) % 1000) , (*z) / 1000, abs((*z) % 1000));
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a96:	4a3b      	ldr	r2, [pc, #236]	; (8001b84 <USART_TransmitGYROValues+0x100>)
 8001a98:	fb82 1203 	smull	r1, r2, r2, r3
 8001a9c:	1192      	asrs	r2, r2, #6
 8001a9e:	17db      	asrs	r3, r3, #31
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	b21b      	sxth	r3, r3
 8001aa4:	469c      	mov	ip, r3
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aac:	4a35      	ldr	r2, [pc, #212]	; (8001b84 <USART_TransmitGYROValues+0x100>)
 8001aae:	fb82 1203 	smull	r1, r2, r2, r3
 8001ab2:	1191      	asrs	r1, r2, #6
 8001ab4:	17da      	asrs	r2, r3, #31
 8001ab6:	1a8a      	subs	r2, r1, r2
 8001ab8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001abc:	fb01 f202 	mul.w	r2, r1, r2
 8001ac0:	1a9b      	subs	r3, r3, r2
 8001ac2:	b21b      	sxth	r3, r3
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	bfb8      	it	lt
 8001ac8:	425b      	neglt	r3, r3
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	469e      	mov	lr, r3
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ad4:	4a2b      	ldr	r2, [pc, #172]	; (8001b84 <USART_TransmitGYROValues+0x100>)
 8001ad6:	fb82 1203 	smull	r1, r2, r2, r3
 8001ada:	1192      	asrs	r2, r2, #6
 8001adc:	17db      	asrs	r3, r3, #31
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	b21b      	sxth	r3, r3
 8001ae2:	461c      	mov	r4, r3
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aea:	4a26      	ldr	r2, [pc, #152]	; (8001b84 <USART_TransmitGYROValues+0x100>)
 8001aec:	fb82 1203 	smull	r1, r2, r2, r3
 8001af0:	1191      	asrs	r1, r2, #6
 8001af2:	17da      	asrs	r2, r3, #31
 8001af4:	1a8a      	subs	r2, r1, r2
 8001af6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001afa:	fb01 f202 	mul.w	r2, r1, r2
 8001afe:	1a9b      	subs	r3, r3, r2
 8001b00:	b21b      	sxth	r3, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	bfb8      	it	lt
 8001b06:	425b      	neglt	r3, r3
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	461d      	mov	r5, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b12:	4a1c      	ldr	r2, [pc, #112]	; (8001b84 <USART_TransmitGYROValues+0x100>)
 8001b14:	fb82 1203 	smull	r1, r2, r2, r3
 8001b18:	1192      	asrs	r2, r2, #6
 8001b1a:	17db      	asrs	r3, r3, #31
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	b21b      	sxth	r3, r3
 8001b20:	461e      	mov	r6, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b28:	4a16      	ldr	r2, [pc, #88]	; (8001b84 <USART_TransmitGYROValues+0x100>)
 8001b2a:	fb82 1203 	smull	r1, r2, r2, r3
 8001b2e:	1191      	asrs	r1, r2, #6
 8001b30:	17da      	asrs	r2, r3, #31
 8001b32:	1a8a      	subs	r2, r1, r2
 8001b34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b38:	fb01 f202 	mul.w	r2, r1, r2
 8001b3c:	1a9b      	subs	r3, r3, r2
 8001b3e:	b21b      	sxth	r3, r3
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	bfb8      	it	lt
 8001b44:	425b      	neglt	r3, r3
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	f107 0010 	add.w	r0, r7, #16
 8001b4c:	9303      	str	r3, [sp, #12]
 8001b4e:	9602      	str	r6, [sp, #8]
 8001b50:	9501      	str	r5, [sp, #4]
 8001b52:	9400      	str	r4, [sp, #0]
 8001b54:	4673      	mov	r3, lr
 8001b56:	4662      	mov	r2, ip
 8001b58:	490b      	ldr	r1, [pc, #44]	; (8001b88 <USART_TransmitGYROValues+0x104>)
 8001b5a:	f004 fb6d 	bl	8006238 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001b5e:	f107 0310 	add.w	r3, r7, #16
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7fe fb34 	bl	80001d0 <strlen>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	f107 0110 	add.w	r1, r7, #16
 8001b70:	f04f 33ff 	mov.w	r3, #4294967295
 8001b74:	4805      	ldr	r0, [pc, #20]	; (8001b8c <USART_TransmitGYROValues+0x108>)
 8001b76:	f003 f9c7 	bl	8004f08 <HAL_UART_Transmit>

}
 8001b7a:	bf00      	nop
 8001b7c:	37dc      	adds	r7, #220	; 0xdc
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b82:	bf00      	nop
 8001b84:	10624dd3 	.word	0x10624dd3
 8001b88:	08008774 	.word	0x08008774
 8001b8c:	20000304 	.word	0x20000304

08001b90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bc8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b94:	f7ff fed8 	bl	8001948 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b98:	480c      	ldr	r0, [pc, #48]	; (8001bcc <LoopForever+0x6>)
  ldr r1, =_edata
 8001b9a:	490d      	ldr	r1, [pc, #52]	; (8001bd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b9c:	4a0d      	ldr	r2, [pc, #52]	; (8001bd4 <LoopForever+0xe>)
  movs r3, #0
 8001b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba0:	e002      	b.n	8001ba8 <LoopCopyDataInit>

08001ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ba6:	3304      	adds	r3, #4

08001ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bac:	d3f9      	bcc.n	8001ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bae:	4a0a      	ldr	r2, [pc, #40]	; (8001bd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bb0:	4c0a      	ldr	r4, [pc, #40]	; (8001bdc <LoopForever+0x16>)
  movs r3, #0
 8001bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb4:	e001      	b.n	8001bba <LoopFillZerobss>

08001bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bb8:	3204      	adds	r2, #4

08001bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bbc:	d3fb      	bcc.n	8001bb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bbe:	f003 fea5 	bl	800590c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bc2:	f7ff fbeb 	bl	800139c <main>

08001bc6 <LoopForever>:

LoopForever:
    b LoopForever
 8001bc6:	e7fe      	b.n	8001bc6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001bc8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001bd4:	08008bdc 	.word	0x08008bdc
  ldr r2, =_sbss
 8001bd8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001bdc:	2000039c 	.word	0x2000039c

08001be0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001be0:	e7fe      	b.n	8001be0 <ADC1_2_IRQHandler>
	...

08001be4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bea:	2300      	movs	r3, #0
 8001bec:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bee:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <HAL_Init+0x3c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a0b      	ldr	r2, [pc, #44]	; (8001c20 <HAL_Init+0x3c>)
 8001bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bfa:	2003      	movs	r0, #3
 8001bfc:	f000 f986 	bl	8001f0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c00:	2000      	movs	r0, #0
 8001c02:	f000 f80f 	bl	8001c24 <HAL_InitTick>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d002      	beq.n	8001c12 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	71fb      	strb	r3, [r7, #7]
 8001c10:	e001      	b.n	8001c16 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c12:	f7ff fd5b 	bl	80016cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c16:	79fb      	ldrb	r3, [r7, #7]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40022000 	.word	0x40022000

08001c24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c30:	4b17      	ldr	r3, [pc, #92]	; (8001c90 <HAL_InitTick+0x6c>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d023      	beq.n	8001c80 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c38:	4b16      	ldr	r3, [pc, #88]	; (8001c94 <HAL_InitTick+0x70>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4b14      	ldr	r3, [pc, #80]	; (8001c90 <HAL_InitTick+0x6c>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	4619      	mov	r1, r3
 8001c42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f000 f99f 	bl	8001f92 <HAL_SYSTICK_Config>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d10f      	bne.n	8001c7a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b0f      	cmp	r3, #15
 8001c5e:	d809      	bhi.n	8001c74 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c60:	2200      	movs	r2, #0
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	f04f 30ff 	mov.w	r0, #4294967295
 8001c68:	f000 f95b 	bl	8001f22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c6c:	4a0a      	ldr	r2, [pc, #40]	; (8001c98 <HAL_InitTick+0x74>)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	e007      	b.n	8001c84 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	73fb      	strb	r3, [r7, #15]
 8001c78:	e004      	b.n	8001c84 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	73fb      	strb	r3, [r7, #15]
 8001c7e:	e001      	b.n	8001c84 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000008 	.word	0x20000008
 8001c94:	20000000 	.word	0x20000000
 8001c98:	20000004 	.word	0x20000004

08001c9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <HAL_IncTick+0x20>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <HAL_IncTick+0x24>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4413      	add	r3, r2
 8001cac:	4a04      	ldr	r2, [pc, #16]	; (8001cc0 <HAL_IncTick+0x24>)
 8001cae:	6013      	str	r3, [r2, #0]
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	20000008 	.word	0x20000008
 8001cc0:	20000388 	.word	0x20000388

08001cc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc8:	4b03      	ldr	r3, [pc, #12]	; (8001cd8 <HAL_GetTick+0x14>)
 8001cca:	681b      	ldr	r3, [r3, #0]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	20000388 	.word	0x20000388

08001cdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ce4:	f7ff ffee 	bl	8001cc4 <HAL_GetTick>
 8001ce8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf4:	d005      	beq.n	8001d02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001cf6:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <HAL_Delay+0x44>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4413      	add	r3, r2
 8001d00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d02:	bf00      	nop
 8001d04:	f7ff ffde 	bl	8001cc4 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d8f7      	bhi.n	8001d04 <HAL_Delay+0x28>
  {
  }
}
 8001d14:	bf00      	nop
 8001d16:	bf00      	nop
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000008 	.word	0x20000008

08001d24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d34:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <__NVIC_SetPriorityGrouping+0x44>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d3a:	68ba      	ldr	r2, [r7, #8]
 8001d3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d40:	4013      	ands	r3, r2
 8001d42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d56:	4a04      	ldr	r2, [pc, #16]	; (8001d68 <__NVIC_SetPriorityGrouping+0x44>)
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	60d3      	str	r3, [r2, #12]
}
 8001d5c:	bf00      	nop
 8001d5e:	3714      	adds	r7, #20
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d70:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <__NVIC_GetPriorityGrouping+0x18>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	0a1b      	lsrs	r3, r3, #8
 8001d76:	f003 0307 	and.w	r3, r3, #7
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	db0b      	blt.n	8001db2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	f003 021f 	and.w	r2, r3, #31
 8001da0:	4907      	ldr	r1, [pc, #28]	; (8001dc0 <__NVIC_EnableIRQ+0x38>)
 8001da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da6:	095b      	lsrs	r3, r3, #5
 8001da8:	2001      	movs	r0, #1
 8001daa:	fa00 f202 	lsl.w	r2, r0, r2
 8001dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	e000e100 	.word	0xe000e100

08001dc4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	db12      	blt.n	8001dfc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dd6:	79fb      	ldrb	r3, [r7, #7]
 8001dd8:	f003 021f 	and.w	r2, r3, #31
 8001ddc:	490a      	ldr	r1, [pc, #40]	; (8001e08 <__NVIC_DisableIRQ+0x44>)
 8001dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de2:	095b      	lsrs	r3, r3, #5
 8001de4:	2001      	movs	r0, #1
 8001de6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dea:	3320      	adds	r3, #32
 8001dec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001df0:	f3bf 8f4f 	dsb	sy
}
 8001df4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001df6:	f3bf 8f6f 	isb	sy
}
 8001dfa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	e000e100 	.word	0xe000e100

08001e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	6039      	str	r1, [r7, #0]
 8001e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	db0a      	blt.n	8001e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	490c      	ldr	r1, [pc, #48]	; (8001e58 <__NVIC_SetPriority+0x4c>)
 8001e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2a:	0112      	lsls	r2, r2, #4
 8001e2c:	b2d2      	uxtb	r2, r2
 8001e2e:	440b      	add	r3, r1
 8001e30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e34:	e00a      	b.n	8001e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	4908      	ldr	r1, [pc, #32]	; (8001e5c <__NVIC_SetPriority+0x50>)
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	3b04      	subs	r3, #4
 8001e44:	0112      	lsls	r2, r2, #4
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	440b      	add	r3, r1
 8001e4a:	761a      	strb	r2, [r3, #24]
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	e000e100 	.word	0xe000e100
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b089      	sub	sp, #36	; 0x24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	f1c3 0307 	rsb	r3, r3, #7
 8001e7a:	2b04      	cmp	r3, #4
 8001e7c:	bf28      	it	cs
 8001e7e:	2304      	movcs	r3, #4
 8001e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	3304      	adds	r3, #4
 8001e86:	2b06      	cmp	r3, #6
 8001e88:	d902      	bls.n	8001e90 <NVIC_EncodePriority+0x30>
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	3b03      	subs	r3, #3
 8001e8e:	e000      	b.n	8001e92 <NVIC_EncodePriority+0x32>
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e94:	f04f 32ff 	mov.w	r2, #4294967295
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43da      	mvns	r2, r3
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	401a      	ands	r2, r3
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb2:	43d9      	mvns	r1, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb8:	4313      	orrs	r3, r2
         );
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3724      	adds	r7, #36	; 0x24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
	...

08001ec8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ed8:	d301      	bcc.n	8001ede <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eda:	2301      	movs	r3, #1
 8001edc:	e00f      	b.n	8001efe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ede:	4a0a      	ldr	r2, [pc, #40]	; (8001f08 <SysTick_Config+0x40>)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ee6:	210f      	movs	r1, #15
 8001ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8001eec:	f7ff ff8e 	bl	8001e0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ef0:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <SysTick_Config+0x40>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ef6:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <SysTick_Config+0x40>)
 8001ef8:	2207      	movs	r2, #7
 8001efa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	e000e010 	.word	0xe000e010

08001f0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7ff ff05 	bl	8001d24 <__NVIC_SetPriorityGrouping>
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b086      	sub	sp, #24
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	4603      	mov	r3, r0
 8001f2a:	60b9      	str	r1, [r7, #8]
 8001f2c:	607a      	str	r2, [r7, #4]
 8001f2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f30:	2300      	movs	r3, #0
 8001f32:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f34:	f7ff ff1a 	bl	8001d6c <__NVIC_GetPriorityGrouping>
 8001f38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	68b9      	ldr	r1, [r7, #8]
 8001f3e:	6978      	ldr	r0, [r7, #20]
 8001f40:	f7ff ff8e 	bl	8001e60 <NVIC_EncodePriority>
 8001f44:	4602      	mov	r2, r0
 8001f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff ff5d 	bl	8001e0c <__NVIC_SetPriority>
}
 8001f52:	bf00      	nop
 8001f54:	3718      	adds	r7, #24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b082      	sub	sp, #8
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	4603      	mov	r3, r0
 8001f62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff ff0d 	bl	8001d88 <__NVIC_EnableIRQ>
}
 8001f6e:	bf00      	nop
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b082      	sub	sp, #8
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff ff1d 	bl	8001dc4 <__NVIC_DisableIRQ>
}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b082      	sub	sp, #8
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7ff ff94 	bl	8001ec8 <SysTick_Config>
 8001fa0:	4603      	mov	r3, r0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
	...

08001fac <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e098      	b.n	80020f0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	4b4d      	ldr	r3, [pc, #308]	; (80020fc <HAL_DMA_Init+0x150>)
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d80f      	bhi.n	8001fea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	4b4b      	ldr	r3, [pc, #300]	; (8002100 <HAL_DMA_Init+0x154>)
 8001fd2:	4413      	add	r3, r2
 8001fd4:	4a4b      	ldr	r2, [pc, #300]	; (8002104 <HAL_DMA_Init+0x158>)
 8001fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fda:	091b      	lsrs	r3, r3, #4
 8001fdc:	009a      	lsls	r2, r3, #2
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a48      	ldr	r2, [pc, #288]	; (8002108 <HAL_DMA_Init+0x15c>)
 8001fe6:	641a      	str	r2, [r3, #64]	; 0x40
 8001fe8:	e00e      	b.n	8002008 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	4b46      	ldr	r3, [pc, #280]	; (800210c <HAL_DMA_Init+0x160>)
 8001ff2:	4413      	add	r3, r2
 8001ff4:	4a43      	ldr	r2, [pc, #268]	; (8002104 <HAL_DMA_Init+0x158>)
 8001ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffa:	091b      	lsrs	r3, r3, #4
 8001ffc:	009a      	lsls	r2, r3, #2
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a42      	ldr	r2, [pc, #264]	; (8002110 <HAL_DMA_Init+0x164>)
 8002006:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2202      	movs	r2, #2
 800200c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800201e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002022:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800202c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002038:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002044:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a1b      	ldr	r3, [r3, #32]
 800204a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	4313      	orrs	r3, r2
 8002050:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002062:	d039      	beq.n	80020d8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002068:	4a27      	ldr	r2, [pc, #156]	; (8002108 <HAL_DMA_Init+0x15c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d11a      	bne.n	80020a4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800206e:	4b29      	ldr	r3, [pc, #164]	; (8002114 <HAL_DMA_Init+0x168>)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002076:	f003 031c 	and.w	r3, r3, #28
 800207a:	210f      	movs	r1, #15
 800207c:	fa01 f303 	lsl.w	r3, r1, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	4924      	ldr	r1, [pc, #144]	; (8002114 <HAL_DMA_Init+0x168>)
 8002084:	4013      	ands	r3, r2
 8002086:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002088:	4b22      	ldr	r3, [pc, #136]	; (8002114 <HAL_DMA_Init+0x168>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6859      	ldr	r1, [r3, #4]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002094:	f003 031c 	and.w	r3, r3, #28
 8002098:	fa01 f303 	lsl.w	r3, r1, r3
 800209c:	491d      	ldr	r1, [pc, #116]	; (8002114 <HAL_DMA_Init+0x168>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	600b      	str	r3, [r1, #0]
 80020a2:	e019      	b.n	80020d8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80020a4:	4b1c      	ldr	r3, [pc, #112]	; (8002118 <HAL_DMA_Init+0x16c>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ac:	f003 031c 	and.w	r3, r3, #28
 80020b0:	210f      	movs	r1, #15
 80020b2:	fa01 f303 	lsl.w	r3, r1, r3
 80020b6:	43db      	mvns	r3, r3
 80020b8:	4917      	ldr	r1, [pc, #92]	; (8002118 <HAL_DMA_Init+0x16c>)
 80020ba:	4013      	ands	r3, r2
 80020bc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80020be:	4b16      	ldr	r3, [pc, #88]	; (8002118 <HAL_DMA_Init+0x16c>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6859      	ldr	r1, [r3, #4]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ca:	f003 031c 	and.w	r3, r3, #28
 80020ce:	fa01 f303 	lsl.w	r3, r1, r3
 80020d2:	4911      	ldr	r1, [pc, #68]	; (8002118 <HAL_DMA_Init+0x16c>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2201      	movs	r2, #1
 80020e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	40020407 	.word	0x40020407
 8002100:	bffdfff8 	.word	0xbffdfff8
 8002104:	cccccccd 	.word	0xcccccccd
 8002108:	40020000 	.word	0x40020000
 800210c:	bffdfbf8 	.word	0xbffdfbf8
 8002110:	40020400 	.word	0x40020400
 8002114:	400200a8 	.word	0x400200a8
 8002118:	400204a8 	.word	0x400204a8

0800211c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
 8002128:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800212a:	2300      	movs	r3, #0
 800212c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002134:	2b01      	cmp	r3, #1
 8002136:	d101      	bne.n	800213c <HAL_DMA_Start_IT+0x20>
 8002138:	2302      	movs	r3, #2
 800213a:	e04b      	b.n	80021d4 <HAL_DMA_Start_IT+0xb8>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800214a:	b2db      	uxtb	r3, r3
 800214c:	2b01      	cmp	r3, #1
 800214e:	d13a      	bne.n	80021c6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2202      	movs	r2, #2
 8002154:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2200      	movs	r2, #0
 800215c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f022 0201 	bic.w	r2, r2, #1
 800216c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	68b9      	ldr	r1, [r7, #8]
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f000 f921 	bl	80023bc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	2b00      	cmp	r3, #0
 8002180:	d008      	beq.n	8002194 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f042 020e 	orr.w	r2, r2, #14
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	e00f      	b.n	80021b4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0204 	bic.w	r2, r2, #4
 80021a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f042 020a 	orr.w	r2, r2, #10
 80021b2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0201 	orr.w	r2, r2, #1
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	e005      	b.n	80021d2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80021ce:	2302      	movs	r3, #2
 80021d0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80021d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021e4:	2300      	movs	r3, #0
 80021e6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d005      	beq.n	8002200 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2204      	movs	r2, #4
 80021f8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	73fb      	strb	r3, [r7, #15]
 80021fe:	e029      	b.n	8002254 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 020e 	bic.w	r2, r2, #14
 800220e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 0201 	bic.w	r2, r2, #1
 800221e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002224:	f003 021c 	and.w	r2, r3, #28
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	2101      	movs	r1, #1
 800222e:	fa01 f202 	lsl.w	r2, r1, r2
 8002232:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002248:	2b00      	cmp	r3, #0
 800224a:	d003      	beq.n	8002254 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	4798      	blx	r3
    }
  }
  return status;
 8002254:	7bfb      	ldrb	r3, [r7, #15]
}
 8002256:	4618      	mov	r0, r3
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b084      	sub	sp, #16
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	f003 031c 	and.w	r3, r3, #28
 800227e:	2204      	movs	r2, #4
 8002280:	409a      	lsls	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	4013      	ands	r3, r2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d026      	beq.n	80022d8 <HAL_DMA_IRQHandler+0x7a>
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	f003 0304 	and.w	r3, r3, #4
 8002290:	2b00      	cmp	r3, #0
 8002292:	d021      	beq.n	80022d8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0320 	and.w	r3, r3, #32
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d107      	bne.n	80022b2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 0204 	bic.w	r2, r2, #4
 80022b0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b6:	f003 021c 	and.w	r2, r3, #28
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	2104      	movs	r1, #4
 80022c0:	fa01 f202 	lsl.w	r2, r1, r2
 80022c4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d071      	beq.n	80023b2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80022d6:	e06c      	b.n	80023b2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022dc:	f003 031c 	and.w	r3, r3, #28
 80022e0:	2202      	movs	r2, #2
 80022e2:	409a      	lsls	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4013      	ands	r3, r2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d02e      	beq.n	800234a <HAL_DMA_IRQHandler+0xec>
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d029      	beq.n	800234a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0320 	and.w	r3, r3, #32
 8002300:	2b00      	cmp	r3, #0
 8002302:	d10b      	bne.n	800231c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f022 020a 	bic.w	r2, r2, #10
 8002312:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002320:	f003 021c 	and.w	r2, r3, #28
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002328:	2102      	movs	r1, #2
 800232a:	fa01 f202 	lsl.w	r2, r1, r2
 800232e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233c:	2b00      	cmp	r3, #0
 800233e:	d038      	beq.n	80023b2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002348:	e033      	b.n	80023b2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234e:	f003 031c 	and.w	r3, r3, #28
 8002352:	2208      	movs	r2, #8
 8002354:	409a      	lsls	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	4013      	ands	r3, r2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d02a      	beq.n	80023b4 <HAL_DMA_IRQHandler+0x156>
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	f003 0308 	and.w	r3, r3, #8
 8002364:	2b00      	cmp	r3, #0
 8002366:	d025      	beq.n	80023b4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 020e 	bic.w	r2, r2, #14
 8002376:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237c:	f003 021c 	and.w	r2, r3, #28
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002384:	2101      	movs	r1, #1
 8002386:	fa01 f202 	lsl.w	r2, r1, r2
 800238a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d004      	beq.n	80023b4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80023b2:	bf00      	nop
 80023b4:	bf00      	nop
}
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
 80023c8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ce:	f003 021c 	and.w	r2, r3, #28
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	2101      	movs	r1, #1
 80023d8:	fa01 f202 	lsl.w	r2, r1, r2
 80023dc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	2b10      	cmp	r3, #16
 80023ec:	d108      	bne.n	8002400 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68ba      	ldr	r2, [r7, #8]
 80023fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80023fe:	e007      	b.n	8002410 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68ba      	ldr	r2, [r7, #8]
 8002406:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	60da      	str	r2, [r3, #12]
}
 8002410:	bf00      	nop
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800241c:	b480      	push	{r7}
 800241e:	b087      	sub	sp, #28
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002426:	2300      	movs	r3, #0
 8002428:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800242a:	e17f      	b.n	800272c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	2101      	movs	r1, #1
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	fa01 f303 	lsl.w	r3, r1, r3
 8002438:	4013      	ands	r3, r2
 800243a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 8171 	beq.w	8002726 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	2b01      	cmp	r3, #1
 800244e:	d005      	beq.n	800245c <HAL_GPIO_Init+0x40>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 0303 	and.w	r3, r3, #3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d130      	bne.n	80024be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	2203      	movs	r2, #3
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	43db      	mvns	r3, r3
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	4013      	ands	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	68da      	ldr	r2, [r3, #12]
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	4313      	orrs	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002492:	2201      	movs	r2, #1
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43db      	mvns	r3, r3
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	4013      	ands	r3, r2
 80024a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	091b      	lsrs	r3, r3, #4
 80024a8:	f003 0201 	and.w	r2, r3, #1
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	2b03      	cmp	r3, #3
 80024c8:	d118      	bne.n	80024fc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80024d0:	2201      	movs	r2, #1
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	4013      	ands	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	08db      	lsrs	r3, r3, #3
 80024e6:	f003 0201 	and.w	r2, r3, #1
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 0303 	and.w	r3, r3, #3
 8002504:	2b03      	cmp	r3, #3
 8002506:	d017      	beq.n	8002538 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	2203      	movs	r2, #3
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	4013      	ands	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	4313      	orrs	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f003 0303 	and.w	r3, r3, #3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d123      	bne.n	800258c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	08da      	lsrs	r2, r3, #3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3208      	adds	r2, #8
 800254c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002550:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f003 0307 	and.w	r3, r3, #7
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	220f      	movs	r2, #15
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	43db      	mvns	r3, r3
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	4013      	ands	r3, r2
 8002566:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	691a      	ldr	r2, [r3, #16]
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	4313      	orrs	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	08da      	lsrs	r2, r3, #3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3208      	adds	r2, #8
 8002586:	6939      	ldr	r1, [r7, #16]
 8002588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	2203      	movs	r2, #3
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	43db      	mvns	r3, r3
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	4013      	ands	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 0203 	and.w	r2, r3, #3
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 80ac 	beq.w	8002726 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ce:	4b5f      	ldr	r3, [pc, #380]	; (800274c <HAL_GPIO_Init+0x330>)
 80025d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025d2:	4a5e      	ldr	r2, [pc, #376]	; (800274c <HAL_GPIO_Init+0x330>)
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	6613      	str	r3, [r2, #96]	; 0x60
 80025da:	4b5c      	ldr	r3, [pc, #368]	; (800274c <HAL_GPIO_Init+0x330>)
 80025dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	60bb      	str	r3, [r7, #8]
 80025e4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025e6:	4a5a      	ldr	r2, [pc, #360]	; (8002750 <HAL_GPIO_Init+0x334>)
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	089b      	lsrs	r3, r3, #2
 80025ec:	3302      	adds	r3, #2
 80025ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	220f      	movs	r2, #15
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	43db      	mvns	r3, r3
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	4013      	ands	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002610:	d025      	beq.n	800265e <HAL_GPIO_Init+0x242>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a4f      	ldr	r2, [pc, #316]	; (8002754 <HAL_GPIO_Init+0x338>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d01f      	beq.n	800265a <HAL_GPIO_Init+0x23e>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a4e      	ldr	r2, [pc, #312]	; (8002758 <HAL_GPIO_Init+0x33c>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d019      	beq.n	8002656 <HAL_GPIO_Init+0x23a>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a4d      	ldr	r2, [pc, #308]	; (800275c <HAL_GPIO_Init+0x340>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d013      	beq.n	8002652 <HAL_GPIO_Init+0x236>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a4c      	ldr	r2, [pc, #304]	; (8002760 <HAL_GPIO_Init+0x344>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d00d      	beq.n	800264e <HAL_GPIO_Init+0x232>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a4b      	ldr	r2, [pc, #300]	; (8002764 <HAL_GPIO_Init+0x348>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d007      	beq.n	800264a <HAL_GPIO_Init+0x22e>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a4a      	ldr	r2, [pc, #296]	; (8002768 <HAL_GPIO_Init+0x34c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d101      	bne.n	8002646 <HAL_GPIO_Init+0x22a>
 8002642:	2306      	movs	r3, #6
 8002644:	e00c      	b.n	8002660 <HAL_GPIO_Init+0x244>
 8002646:	2307      	movs	r3, #7
 8002648:	e00a      	b.n	8002660 <HAL_GPIO_Init+0x244>
 800264a:	2305      	movs	r3, #5
 800264c:	e008      	b.n	8002660 <HAL_GPIO_Init+0x244>
 800264e:	2304      	movs	r3, #4
 8002650:	e006      	b.n	8002660 <HAL_GPIO_Init+0x244>
 8002652:	2303      	movs	r3, #3
 8002654:	e004      	b.n	8002660 <HAL_GPIO_Init+0x244>
 8002656:	2302      	movs	r3, #2
 8002658:	e002      	b.n	8002660 <HAL_GPIO_Init+0x244>
 800265a:	2301      	movs	r3, #1
 800265c:	e000      	b.n	8002660 <HAL_GPIO_Init+0x244>
 800265e:	2300      	movs	r3, #0
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	f002 0203 	and.w	r2, r2, #3
 8002666:	0092      	lsls	r2, r2, #2
 8002668:	4093      	lsls	r3, r2
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	4313      	orrs	r3, r2
 800266e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002670:	4937      	ldr	r1, [pc, #220]	; (8002750 <HAL_GPIO_Init+0x334>)
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	089b      	lsrs	r3, r3, #2
 8002676:	3302      	adds	r3, #2
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800267e:	4b3b      	ldr	r3, [pc, #236]	; (800276c <HAL_GPIO_Init+0x350>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	43db      	mvns	r3, r3
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	4013      	ands	r3, r2
 800268c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4313      	orrs	r3, r2
 80026a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026a2:	4a32      	ldr	r2, [pc, #200]	; (800276c <HAL_GPIO_Init+0x350>)
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026a8:	4b30      	ldr	r3, [pc, #192]	; (800276c <HAL_GPIO_Init+0x350>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	43db      	mvns	r3, r3
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	4013      	ands	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026cc:	4a27      	ldr	r2, [pc, #156]	; (800276c <HAL_GPIO_Init+0x350>)
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80026d2:	4b26      	ldr	r3, [pc, #152]	; (800276c <HAL_GPIO_Init+0x350>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	43db      	mvns	r3, r3
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	4013      	ands	r3, r2
 80026e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026f6:	4a1d      	ldr	r2, [pc, #116]	; (800276c <HAL_GPIO_Init+0x350>)
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80026fc:	4b1b      	ldr	r3, [pc, #108]	; (800276c <HAL_GPIO_Init+0x350>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	43db      	mvns	r3, r3
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	4013      	ands	r3, r2
 800270a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d003      	beq.n	8002720 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	4313      	orrs	r3, r2
 800271e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002720:	4a12      	ldr	r2, [pc, #72]	; (800276c <HAL_GPIO_Init+0x350>)
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	3301      	adds	r3, #1
 800272a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	fa22 f303 	lsr.w	r3, r2, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	f47f ae78 	bne.w	800242c <HAL_GPIO_Init+0x10>
  }
}
 800273c:	bf00      	nop
 800273e:	bf00      	nop
 8002740:	371c      	adds	r7, #28
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	40021000 	.word	0x40021000
 8002750:	40010000 	.word	0x40010000
 8002754:	48000400 	.word	0x48000400
 8002758:	48000800 	.word	0x48000800
 800275c:	48000c00 	.word	0x48000c00
 8002760:	48001000 	.word	0x48001000
 8002764:	48001400 	.word	0x48001400
 8002768:	48001800 	.word	0x48001800
 800276c:	40010400 	.word	0x40010400

08002770 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	460b      	mov	r3, r1
 800277a:	807b      	strh	r3, [r7, #2]
 800277c:	4613      	mov	r3, r2
 800277e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002780:	787b      	ldrb	r3, [r7, #1]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002786:	887a      	ldrh	r2, [r7, #2]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800278c:	e002      	b.n	8002794 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800278e:	887a      	ldrh	r2, [r7, #2]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	460b      	mov	r3, r1
 80027aa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027b2:	887a      	ldrh	r2, [r7, #2]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4013      	ands	r3, r2
 80027b8:	041a      	lsls	r2, r3, #16
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	43d9      	mvns	r1, r3
 80027be:	887b      	ldrh	r3, [r7, #2]
 80027c0:	400b      	ands	r3, r1
 80027c2:	431a      	orrs	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	619a      	str	r2, [r3, #24]
}
 80027c8:	bf00      	nop
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4603      	mov	r3, r0
 80027dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80027de:	4b08      	ldr	r3, [pc, #32]	; (8002800 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027e0:	695a      	ldr	r2, [r3, #20]
 80027e2:	88fb      	ldrh	r3, [r7, #6]
 80027e4:	4013      	ands	r3, r2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d006      	beq.n	80027f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027ea:	4a05      	ldr	r2, [pc, #20]	; (8002800 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027ec:	88fb      	ldrh	r3, [r7, #6]
 80027ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027f0:	88fb      	ldrh	r3, [r7, #6]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7fe fda6 	bl	8001344 <HAL_GPIO_EXTI_Callback>
  }
}
 80027f8:	bf00      	nop
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40010400 	.word	0x40010400

08002804 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002808:	4b04      	ldr	r3, [pc, #16]	; (800281c <HAL_PWREx_GetVoltageRange+0x18>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002810:	4618      	mov	r0, r3
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	40007000 	.word	0x40007000

08002820 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800282e:	d130      	bne.n	8002892 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002830:	4b23      	ldr	r3, [pc, #140]	; (80028c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002838:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800283c:	d038      	beq.n	80028b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800283e:	4b20      	ldr	r3, [pc, #128]	; (80028c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002846:	4a1e      	ldr	r2, [pc, #120]	; (80028c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002848:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800284c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800284e:	4b1d      	ldr	r3, [pc, #116]	; (80028c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2232      	movs	r2, #50	; 0x32
 8002854:	fb02 f303 	mul.w	r3, r2, r3
 8002858:	4a1b      	ldr	r2, [pc, #108]	; (80028c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800285a:	fba2 2303 	umull	r2, r3, r2, r3
 800285e:	0c9b      	lsrs	r3, r3, #18
 8002860:	3301      	adds	r3, #1
 8002862:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002864:	e002      	b.n	800286c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	3b01      	subs	r3, #1
 800286a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800286c:	4b14      	ldr	r3, [pc, #80]	; (80028c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002878:	d102      	bne.n	8002880 <HAL_PWREx_ControlVoltageScaling+0x60>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1f2      	bne.n	8002866 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002880:	4b0f      	ldr	r3, [pc, #60]	; (80028c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002882:	695b      	ldr	r3, [r3, #20]
 8002884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002888:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800288c:	d110      	bne.n	80028b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e00f      	b.n	80028b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002892:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800289a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800289e:	d007      	beq.n	80028b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80028a0:	4b07      	ldr	r3, [pc, #28]	; (80028c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028a8:	4a05      	ldr	r2, [pc, #20]	; (80028c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3714      	adds	r7, #20
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	40007000 	.word	0x40007000
 80028c4:	20000000 	.word	0x20000000
 80028c8:	431bde83 	.word	0x431bde83

080028cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b088      	sub	sp, #32
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e3ca      	b.n	8003074 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028de:	4b97      	ldr	r3, [pc, #604]	; (8002b3c <HAL_RCC_OscConfig+0x270>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 030c 	and.w	r3, r3, #12
 80028e6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028e8:	4b94      	ldr	r3, [pc, #592]	; (8002b3c <HAL_RCC_OscConfig+0x270>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	f003 0303 	and.w	r3, r3, #3
 80028f0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0310 	and.w	r3, r3, #16
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f000 80e4 	beq.w	8002ac8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d007      	beq.n	8002916 <HAL_RCC_OscConfig+0x4a>
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	2b0c      	cmp	r3, #12
 800290a:	f040 808b 	bne.w	8002a24 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	2b01      	cmp	r3, #1
 8002912:	f040 8087 	bne.w	8002a24 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002916:	4b89      	ldr	r3, [pc, #548]	; (8002b3c <HAL_RCC_OscConfig+0x270>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d005      	beq.n	800292e <HAL_RCC_OscConfig+0x62>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e3a2      	b.n	8003074 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a1a      	ldr	r2, [r3, #32]
 8002932:	4b82      	ldr	r3, [pc, #520]	; (8002b3c <HAL_RCC_OscConfig+0x270>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0308 	and.w	r3, r3, #8
 800293a:	2b00      	cmp	r3, #0
 800293c:	d004      	beq.n	8002948 <HAL_RCC_OscConfig+0x7c>
 800293e:	4b7f      	ldr	r3, [pc, #508]	; (8002b3c <HAL_RCC_OscConfig+0x270>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002946:	e005      	b.n	8002954 <HAL_RCC_OscConfig+0x88>
 8002948:	4b7c      	ldr	r3, [pc, #496]	; (8002b3c <HAL_RCC_OscConfig+0x270>)
 800294a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800294e:	091b      	lsrs	r3, r3, #4
 8002950:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002954:	4293      	cmp	r3, r2
 8002956:	d223      	bcs.n	80029a0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	4618      	mov	r0, r3
 800295e:	f000 fd55 	bl	800340c <RCC_SetFlashLatencyFromMSIRange>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e383      	b.n	8003074 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800296c:	4b73      	ldr	r3, [pc, #460]	; (8002b3c <HAL_RCC_OscConfig+0x270>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a72      	ldr	r2, [pc, #456]	; (8002b3c <HAL_RCC_OscConfig+0x270>)
 8002972:	f043 0308 	orr.w	r3, r3, #8
 8002976:	6013      	str	r3, [r2, #0]
 8002978:	4b70      	ldr	r3, [pc, #448]	; (8002b3c <HAL_RCC_OscConfig+0x270>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	496d      	ldr	r1, [pc, #436]	; (8002b3c <HAL_RCC_OscConfig+0x270>)
 8002986:	4313      	orrs	r3, r2
 8002988:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800298a:	4b6c      	ldr	r3, [pc, #432]	; (8002b3c <HAL_RCC_OscConfig+0x270>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	021b      	lsls	r3, r3, #8
 8002998:	4968      	ldr	r1, [pc, #416]	; (8002b3c <HAL_RCC_OscConfig+0x270>)
 800299a:	4313      	orrs	r3, r2
 800299c:	604b      	str	r3, [r1, #4]
 800299e:	e025      	b.n	80029ec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029a0:	4b66      	ldr	r3, [pc, #408]	; (8002b3c <HAL_RCC_OscConfig+0x270>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a65      	ldr	r2, [pc, #404]	; (8002b3c <HAL_RCC_OscConfig+0x270>)
 80029a6:	f043 0308 	orr.w	r3, r3, #8
 80029aa:	6013      	str	r3, [r2, #0]
 80029ac:	4b63      	ldr	r3, [pc, #396]	; (8002b3c <HAL_RCC_OscConfig+0x270>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	4960      	ldr	r1, [pc, #384]	; (8002b3c <HAL_RCC_OscConfig+0x270>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029be:	4b5f      	ldr	r3, [pc, #380]	; (8002b3c <HAL_RCC_OscConfig+0x270>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	021b      	lsls	r3, r3, #8
 80029cc:	495b      	ldr	r1, [pc, #364]	; (8002b3c <HAL_RCC_OscConfig+0x270>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d109      	bne.n	80029ec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	4618      	mov	r0, r3
 80029de:	f000 fd15 	bl	800340c <RCC_SetFlashLatencyFromMSIRange>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e343      	b.n	8003074 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029ec:	f000 fc4a 	bl	8003284 <HAL_RCC_GetSysClockFreq>
 80029f0:	4602      	mov	r2, r0
 80029f2:	4b52      	ldr	r3, [pc, #328]	; (8002b3c <HAL_RCC_OscConfig+0x270>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	091b      	lsrs	r3, r3, #4
 80029f8:	f003 030f 	and.w	r3, r3, #15
 80029fc:	4950      	ldr	r1, [pc, #320]	; (8002b40 <HAL_RCC_OscConfig+0x274>)
 80029fe:	5ccb      	ldrb	r3, [r1, r3]
 8002a00:	f003 031f 	and.w	r3, r3, #31
 8002a04:	fa22 f303 	lsr.w	r3, r2, r3
 8002a08:	4a4e      	ldr	r2, [pc, #312]	; (8002b44 <HAL_RCC_OscConfig+0x278>)
 8002a0a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a0c:	4b4e      	ldr	r3, [pc, #312]	; (8002b48 <HAL_RCC_OscConfig+0x27c>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff f907 	bl	8001c24 <HAL_InitTick>
 8002a16:	4603      	mov	r3, r0
 8002a18:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002a1a:	7bfb      	ldrb	r3, [r7, #15]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d052      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002a20:	7bfb      	ldrb	r3, [r7, #15]
 8002a22:	e327      	b.n	8003074 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d032      	beq.n	8002a92 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a2c:	4b43      	ldr	r3, [pc, #268]	; (8002b3c <HAL_RCC_OscConfig+0x270>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a42      	ldr	r2, [pc, #264]	; (8002b3c <HAL_RCC_OscConfig+0x270>)
 8002a32:	f043 0301 	orr.w	r3, r3, #1
 8002a36:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a38:	f7ff f944 	bl	8001cc4 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a40:	f7ff f940 	bl	8001cc4 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e310      	b.n	8003074 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a52:	4b3a      	ldr	r3, [pc, #232]	; (8002b3c <HAL_RCC_OscConfig+0x270>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d0f0      	beq.n	8002a40 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a5e:	4b37      	ldr	r3, [pc, #220]	; (8002b3c <HAL_RCC_OscConfig+0x270>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a36      	ldr	r2, [pc, #216]	; (8002b3c <HAL_RCC_OscConfig+0x270>)
 8002a64:	f043 0308 	orr.w	r3, r3, #8
 8002a68:	6013      	str	r3, [r2, #0]
 8002a6a:	4b34      	ldr	r3, [pc, #208]	; (8002b3c <HAL_RCC_OscConfig+0x270>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	4931      	ldr	r1, [pc, #196]	; (8002b3c <HAL_RCC_OscConfig+0x270>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a7c:	4b2f      	ldr	r3, [pc, #188]	; (8002b3c <HAL_RCC_OscConfig+0x270>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	021b      	lsls	r3, r3, #8
 8002a8a:	492c      	ldr	r1, [pc, #176]	; (8002b3c <HAL_RCC_OscConfig+0x270>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	604b      	str	r3, [r1, #4]
 8002a90:	e01a      	b.n	8002ac8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a92:	4b2a      	ldr	r3, [pc, #168]	; (8002b3c <HAL_RCC_OscConfig+0x270>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a29      	ldr	r2, [pc, #164]	; (8002b3c <HAL_RCC_OscConfig+0x270>)
 8002a98:	f023 0301 	bic.w	r3, r3, #1
 8002a9c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a9e:	f7ff f911 	bl	8001cc4 <HAL_GetTick>
 8002aa2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002aa4:	e008      	b.n	8002ab8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002aa6:	f7ff f90d 	bl	8001cc4 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e2dd      	b.n	8003074 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ab8:	4b20      	ldr	r3, [pc, #128]	; (8002b3c <HAL_RCC_OscConfig+0x270>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1f0      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x1da>
 8002ac4:	e000      	b.n	8002ac8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ac6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d074      	beq.n	8002bbe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	2b08      	cmp	r3, #8
 8002ad8:	d005      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x21a>
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	2b0c      	cmp	r3, #12
 8002ade:	d10e      	bne.n	8002afe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	2b03      	cmp	r3, #3
 8002ae4:	d10b      	bne.n	8002afe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ae6:	4b15      	ldr	r3, [pc, #84]	; (8002b3c <HAL_RCC_OscConfig+0x270>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d064      	beq.n	8002bbc <HAL_RCC_OscConfig+0x2f0>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d160      	bne.n	8002bbc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e2ba      	b.n	8003074 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b06:	d106      	bne.n	8002b16 <HAL_RCC_OscConfig+0x24a>
 8002b08:	4b0c      	ldr	r3, [pc, #48]	; (8002b3c <HAL_RCC_OscConfig+0x270>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a0b      	ldr	r2, [pc, #44]	; (8002b3c <HAL_RCC_OscConfig+0x270>)
 8002b0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b12:	6013      	str	r3, [r2, #0]
 8002b14:	e026      	b.n	8002b64 <HAL_RCC_OscConfig+0x298>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b1e:	d115      	bne.n	8002b4c <HAL_RCC_OscConfig+0x280>
 8002b20:	4b06      	ldr	r3, [pc, #24]	; (8002b3c <HAL_RCC_OscConfig+0x270>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a05      	ldr	r2, [pc, #20]	; (8002b3c <HAL_RCC_OscConfig+0x270>)
 8002b26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b2a:	6013      	str	r3, [r2, #0]
 8002b2c:	4b03      	ldr	r3, [pc, #12]	; (8002b3c <HAL_RCC_OscConfig+0x270>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a02      	ldr	r2, [pc, #8]	; (8002b3c <HAL_RCC_OscConfig+0x270>)
 8002b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b36:	6013      	str	r3, [r2, #0]
 8002b38:	e014      	b.n	8002b64 <HAL_RCC_OscConfig+0x298>
 8002b3a:	bf00      	nop
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	080087a8 	.word	0x080087a8
 8002b44:	20000000 	.word	0x20000000
 8002b48:	20000004 	.word	0x20000004
 8002b4c:	4ba0      	ldr	r3, [pc, #640]	; (8002dd0 <HAL_RCC_OscConfig+0x504>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a9f      	ldr	r2, [pc, #636]	; (8002dd0 <HAL_RCC_OscConfig+0x504>)
 8002b52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b56:	6013      	str	r3, [r2, #0]
 8002b58:	4b9d      	ldr	r3, [pc, #628]	; (8002dd0 <HAL_RCC_OscConfig+0x504>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a9c      	ldr	r2, [pc, #624]	; (8002dd0 <HAL_RCC_OscConfig+0x504>)
 8002b5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d013      	beq.n	8002b94 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6c:	f7ff f8aa 	bl	8001cc4 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b74:	f7ff f8a6 	bl	8001cc4 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b64      	cmp	r3, #100	; 0x64
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e276      	b.n	8003074 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b86:	4b92      	ldr	r3, [pc, #584]	; (8002dd0 <HAL_RCC_OscConfig+0x504>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0f0      	beq.n	8002b74 <HAL_RCC_OscConfig+0x2a8>
 8002b92:	e014      	b.n	8002bbe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b94:	f7ff f896 	bl	8001cc4 <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b9c:	f7ff f892 	bl	8001cc4 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b64      	cmp	r3, #100	; 0x64
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e262      	b.n	8003074 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bae:	4b88      	ldr	r3, [pc, #544]	; (8002dd0 <HAL_RCC_OscConfig+0x504>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1f0      	bne.n	8002b9c <HAL_RCC_OscConfig+0x2d0>
 8002bba:	e000      	b.n	8002bbe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d060      	beq.n	8002c8c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	2b04      	cmp	r3, #4
 8002bce:	d005      	beq.n	8002bdc <HAL_RCC_OscConfig+0x310>
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	2b0c      	cmp	r3, #12
 8002bd4:	d119      	bne.n	8002c0a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d116      	bne.n	8002c0a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bdc:	4b7c      	ldr	r3, [pc, #496]	; (8002dd0 <HAL_RCC_OscConfig+0x504>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d005      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x328>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e23f      	b.n	8003074 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf4:	4b76      	ldr	r3, [pc, #472]	; (8002dd0 <HAL_RCC_OscConfig+0x504>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	061b      	lsls	r3, r3, #24
 8002c02:	4973      	ldr	r1, [pc, #460]	; (8002dd0 <HAL_RCC_OscConfig+0x504>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c08:	e040      	b.n	8002c8c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d023      	beq.n	8002c5a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c12:	4b6f      	ldr	r3, [pc, #444]	; (8002dd0 <HAL_RCC_OscConfig+0x504>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a6e      	ldr	r2, [pc, #440]	; (8002dd0 <HAL_RCC_OscConfig+0x504>)
 8002c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1e:	f7ff f851 	bl	8001cc4 <HAL_GetTick>
 8002c22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c24:	e008      	b.n	8002c38 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c26:	f7ff f84d 	bl	8001cc4 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e21d      	b.n	8003074 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c38:	4b65      	ldr	r3, [pc, #404]	; (8002dd0 <HAL_RCC_OscConfig+0x504>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d0f0      	beq.n	8002c26 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c44:	4b62      	ldr	r3, [pc, #392]	; (8002dd0 <HAL_RCC_OscConfig+0x504>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	061b      	lsls	r3, r3, #24
 8002c52:	495f      	ldr	r1, [pc, #380]	; (8002dd0 <HAL_RCC_OscConfig+0x504>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	604b      	str	r3, [r1, #4]
 8002c58:	e018      	b.n	8002c8c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c5a:	4b5d      	ldr	r3, [pc, #372]	; (8002dd0 <HAL_RCC_OscConfig+0x504>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a5c      	ldr	r2, [pc, #368]	; (8002dd0 <HAL_RCC_OscConfig+0x504>)
 8002c60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c66:	f7ff f82d 	bl	8001cc4 <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c6c:	e008      	b.n	8002c80 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c6e:	f7ff f829 	bl	8001cc4 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e1f9      	b.n	8003074 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c80:	4b53      	ldr	r3, [pc, #332]	; (8002dd0 <HAL_RCC_OscConfig+0x504>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1f0      	bne.n	8002c6e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0308 	and.w	r3, r3, #8
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d03c      	beq.n	8002d12 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d01c      	beq.n	8002cda <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ca0:	4b4b      	ldr	r3, [pc, #300]	; (8002dd0 <HAL_RCC_OscConfig+0x504>)
 8002ca2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ca6:	4a4a      	ldr	r2, [pc, #296]	; (8002dd0 <HAL_RCC_OscConfig+0x504>)
 8002ca8:	f043 0301 	orr.w	r3, r3, #1
 8002cac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb0:	f7ff f808 	bl	8001cc4 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cb8:	f7ff f804 	bl	8001cc4 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e1d4      	b.n	8003074 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cca:	4b41      	ldr	r3, [pc, #260]	; (8002dd0 <HAL_RCC_OscConfig+0x504>)
 8002ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0ef      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x3ec>
 8002cd8:	e01b      	b.n	8002d12 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cda:	4b3d      	ldr	r3, [pc, #244]	; (8002dd0 <HAL_RCC_OscConfig+0x504>)
 8002cdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ce0:	4a3b      	ldr	r2, [pc, #236]	; (8002dd0 <HAL_RCC_OscConfig+0x504>)
 8002ce2:	f023 0301 	bic.w	r3, r3, #1
 8002ce6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cea:	f7fe ffeb 	bl	8001cc4 <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cf0:	e008      	b.n	8002d04 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cf2:	f7fe ffe7 	bl	8001cc4 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e1b7      	b.n	8003074 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d04:	4b32      	ldr	r3, [pc, #200]	; (8002dd0 <HAL_RCC_OscConfig+0x504>)
 8002d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1ef      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0304 	and.w	r3, r3, #4
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 80a6 	beq.w	8002e6c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d20:	2300      	movs	r3, #0
 8002d22:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d24:	4b2a      	ldr	r3, [pc, #168]	; (8002dd0 <HAL_RCC_OscConfig+0x504>)
 8002d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10d      	bne.n	8002d4c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d30:	4b27      	ldr	r3, [pc, #156]	; (8002dd0 <HAL_RCC_OscConfig+0x504>)
 8002d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d34:	4a26      	ldr	r2, [pc, #152]	; (8002dd0 <HAL_RCC_OscConfig+0x504>)
 8002d36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d3a:	6593      	str	r3, [r2, #88]	; 0x58
 8002d3c:	4b24      	ldr	r3, [pc, #144]	; (8002dd0 <HAL_RCC_OscConfig+0x504>)
 8002d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d44:	60bb      	str	r3, [r7, #8]
 8002d46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d4c:	4b21      	ldr	r3, [pc, #132]	; (8002dd4 <HAL_RCC_OscConfig+0x508>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d118      	bne.n	8002d8a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d58:	4b1e      	ldr	r3, [pc, #120]	; (8002dd4 <HAL_RCC_OscConfig+0x508>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a1d      	ldr	r2, [pc, #116]	; (8002dd4 <HAL_RCC_OscConfig+0x508>)
 8002d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d64:	f7fe ffae 	bl	8001cc4 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d6c:	f7fe ffaa 	bl	8001cc4 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e17a      	b.n	8003074 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d7e:	4b15      	ldr	r3, [pc, #84]	; (8002dd4 <HAL_RCC_OscConfig+0x508>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0f0      	beq.n	8002d6c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d108      	bne.n	8002da4 <HAL_RCC_OscConfig+0x4d8>
 8002d92:	4b0f      	ldr	r3, [pc, #60]	; (8002dd0 <HAL_RCC_OscConfig+0x504>)
 8002d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d98:	4a0d      	ldr	r2, [pc, #52]	; (8002dd0 <HAL_RCC_OscConfig+0x504>)
 8002d9a:	f043 0301 	orr.w	r3, r3, #1
 8002d9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002da2:	e029      	b.n	8002df8 <HAL_RCC_OscConfig+0x52c>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	2b05      	cmp	r3, #5
 8002daa:	d115      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x50c>
 8002dac:	4b08      	ldr	r3, [pc, #32]	; (8002dd0 <HAL_RCC_OscConfig+0x504>)
 8002dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db2:	4a07      	ldr	r2, [pc, #28]	; (8002dd0 <HAL_RCC_OscConfig+0x504>)
 8002db4:	f043 0304 	orr.w	r3, r3, #4
 8002db8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dbc:	4b04      	ldr	r3, [pc, #16]	; (8002dd0 <HAL_RCC_OscConfig+0x504>)
 8002dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc2:	4a03      	ldr	r2, [pc, #12]	; (8002dd0 <HAL_RCC_OscConfig+0x504>)
 8002dc4:	f043 0301 	orr.w	r3, r3, #1
 8002dc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dcc:	e014      	b.n	8002df8 <HAL_RCC_OscConfig+0x52c>
 8002dce:	bf00      	nop
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	40007000 	.word	0x40007000
 8002dd8:	4b9c      	ldr	r3, [pc, #624]	; (800304c <HAL_RCC_OscConfig+0x780>)
 8002dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dde:	4a9b      	ldr	r2, [pc, #620]	; (800304c <HAL_RCC_OscConfig+0x780>)
 8002de0:	f023 0301 	bic.w	r3, r3, #1
 8002de4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002de8:	4b98      	ldr	r3, [pc, #608]	; (800304c <HAL_RCC_OscConfig+0x780>)
 8002dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dee:	4a97      	ldr	r2, [pc, #604]	; (800304c <HAL_RCC_OscConfig+0x780>)
 8002df0:	f023 0304 	bic.w	r3, r3, #4
 8002df4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d016      	beq.n	8002e2e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e00:	f7fe ff60 	bl	8001cc4 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e06:	e00a      	b.n	8002e1e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e08:	f7fe ff5c 	bl	8001cc4 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e12a      	b.n	8003074 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e1e:	4b8b      	ldr	r3, [pc, #556]	; (800304c <HAL_RCC_OscConfig+0x780>)
 8002e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d0ed      	beq.n	8002e08 <HAL_RCC_OscConfig+0x53c>
 8002e2c:	e015      	b.n	8002e5a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e2e:	f7fe ff49 	bl	8001cc4 <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e34:	e00a      	b.n	8002e4c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e36:	f7fe ff45 	bl	8001cc4 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e113      	b.n	8003074 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e4c:	4b7f      	ldr	r3, [pc, #508]	; (800304c <HAL_RCC_OscConfig+0x780>)
 8002e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1ed      	bne.n	8002e36 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e5a:	7ffb      	ldrb	r3, [r7, #31]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d105      	bne.n	8002e6c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e60:	4b7a      	ldr	r3, [pc, #488]	; (800304c <HAL_RCC_OscConfig+0x780>)
 8002e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e64:	4a79      	ldr	r2, [pc, #484]	; (800304c <HAL_RCC_OscConfig+0x780>)
 8002e66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e6a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f000 80fe 	beq.w	8003072 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	f040 80d0 	bne.w	8003020 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002e80:	4b72      	ldr	r3, [pc, #456]	; (800304c <HAL_RCC_OscConfig+0x780>)
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f003 0203 	and.w	r2, r3, #3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d130      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d127      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d11f      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ec0:	2a07      	cmp	r2, #7
 8002ec2:	bf14      	ite	ne
 8002ec4:	2201      	movne	r2, #1
 8002ec6:	2200      	moveq	r2, #0
 8002ec8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d113      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed8:	085b      	lsrs	r3, r3, #1
 8002eda:	3b01      	subs	r3, #1
 8002edc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d109      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eec:	085b      	lsrs	r3, r3, #1
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d06e      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	2b0c      	cmp	r3, #12
 8002efa:	d069      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002efc:	4b53      	ldr	r3, [pc, #332]	; (800304c <HAL_RCC_OscConfig+0x780>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d105      	bne.n	8002f14 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002f08:	4b50      	ldr	r3, [pc, #320]	; (800304c <HAL_RCC_OscConfig+0x780>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e0ad      	b.n	8003074 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f18:	4b4c      	ldr	r3, [pc, #304]	; (800304c <HAL_RCC_OscConfig+0x780>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a4b      	ldr	r2, [pc, #300]	; (800304c <HAL_RCC_OscConfig+0x780>)
 8002f1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f22:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f24:	f7fe fece 	bl	8001cc4 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f2c:	f7fe feca 	bl	8001cc4 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e09a      	b.n	8003074 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f3e:	4b43      	ldr	r3, [pc, #268]	; (800304c <HAL_RCC_OscConfig+0x780>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1f0      	bne.n	8002f2c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f4a:	4b40      	ldr	r3, [pc, #256]	; (800304c <HAL_RCC_OscConfig+0x780>)
 8002f4c:	68da      	ldr	r2, [r3, #12]
 8002f4e:	4b40      	ldr	r3, [pc, #256]	; (8003050 <HAL_RCC_OscConfig+0x784>)
 8002f50:	4013      	ands	r3, r2
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f5a:	3a01      	subs	r2, #1
 8002f5c:	0112      	lsls	r2, r2, #4
 8002f5e:	4311      	orrs	r1, r2
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f64:	0212      	lsls	r2, r2, #8
 8002f66:	4311      	orrs	r1, r2
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f6c:	0852      	lsrs	r2, r2, #1
 8002f6e:	3a01      	subs	r2, #1
 8002f70:	0552      	lsls	r2, r2, #21
 8002f72:	4311      	orrs	r1, r2
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f78:	0852      	lsrs	r2, r2, #1
 8002f7a:	3a01      	subs	r2, #1
 8002f7c:	0652      	lsls	r2, r2, #25
 8002f7e:	4311      	orrs	r1, r2
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f84:	0912      	lsrs	r2, r2, #4
 8002f86:	0452      	lsls	r2, r2, #17
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	4930      	ldr	r1, [pc, #192]	; (800304c <HAL_RCC_OscConfig+0x780>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f90:	4b2e      	ldr	r3, [pc, #184]	; (800304c <HAL_RCC_OscConfig+0x780>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a2d      	ldr	r2, [pc, #180]	; (800304c <HAL_RCC_OscConfig+0x780>)
 8002f96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f9a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f9c:	4b2b      	ldr	r3, [pc, #172]	; (800304c <HAL_RCC_OscConfig+0x780>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	4a2a      	ldr	r2, [pc, #168]	; (800304c <HAL_RCC_OscConfig+0x780>)
 8002fa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fa6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fa8:	f7fe fe8c 	bl	8001cc4 <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb0:	f7fe fe88 	bl	8001cc4 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e058      	b.n	8003074 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fc2:	4b22      	ldr	r3, [pc, #136]	; (800304c <HAL_RCC_OscConfig+0x780>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0f0      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fce:	e050      	b.n	8003072 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e04f      	b.n	8003074 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fd4:	4b1d      	ldr	r3, [pc, #116]	; (800304c <HAL_RCC_OscConfig+0x780>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d148      	bne.n	8003072 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002fe0:	4b1a      	ldr	r3, [pc, #104]	; (800304c <HAL_RCC_OscConfig+0x780>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a19      	ldr	r2, [pc, #100]	; (800304c <HAL_RCC_OscConfig+0x780>)
 8002fe6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fec:	4b17      	ldr	r3, [pc, #92]	; (800304c <HAL_RCC_OscConfig+0x780>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	4a16      	ldr	r2, [pc, #88]	; (800304c <HAL_RCC_OscConfig+0x780>)
 8002ff2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ff6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ff8:	f7fe fe64 	bl	8001cc4 <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003000:	f7fe fe60 	bl	8001cc4 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e030      	b.n	8003074 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003012:	4b0e      	ldr	r3, [pc, #56]	; (800304c <HAL_RCC_OscConfig+0x780>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d0f0      	beq.n	8003000 <HAL_RCC_OscConfig+0x734>
 800301e:	e028      	b.n	8003072 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	2b0c      	cmp	r3, #12
 8003024:	d023      	beq.n	800306e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003026:	4b09      	ldr	r3, [pc, #36]	; (800304c <HAL_RCC_OscConfig+0x780>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a08      	ldr	r2, [pc, #32]	; (800304c <HAL_RCC_OscConfig+0x780>)
 800302c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003032:	f7fe fe47 	bl	8001cc4 <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003038:	e00c      	b.n	8003054 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800303a:	f7fe fe43 	bl	8001cc4 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d905      	bls.n	8003054 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e013      	b.n	8003074 <HAL_RCC_OscConfig+0x7a8>
 800304c:	40021000 	.word	0x40021000
 8003050:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003054:	4b09      	ldr	r3, [pc, #36]	; (800307c <HAL_RCC_OscConfig+0x7b0>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1ec      	bne.n	800303a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003060:	4b06      	ldr	r3, [pc, #24]	; (800307c <HAL_RCC_OscConfig+0x7b0>)
 8003062:	68da      	ldr	r2, [r3, #12]
 8003064:	4905      	ldr	r1, [pc, #20]	; (800307c <HAL_RCC_OscConfig+0x7b0>)
 8003066:	4b06      	ldr	r3, [pc, #24]	; (8003080 <HAL_RCC_OscConfig+0x7b4>)
 8003068:	4013      	ands	r3, r2
 800306a:	60cb      	str	r3, [r1, #12]
 800306c:	e001      	b.n	8003072 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e000      	b.n	8003074 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3720      	adds	r7, #32
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40021000 	.word	0x40021000
 8003080:	feeefffc 	.word	0xfeeefffc

08003084 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e0e7      	b.n	8003268 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003098:	4b75      	ldr	r3, [pc, #468]	; (8003270 <HAL_RCC_ClockConfig+0x1ec>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d910      	bls.n	80030c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a6:	4b72      	ldr	r3, [pc, #456]	; (8003270 <HAL_RCC_ClockConfig+0x1ec>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f023 0207 	bic.w	r2, r3, #7
 80030ae:	4970      	ldr	r1, [pc, #448]	; (8003270 <HAL_RCC_ClockConfig+0x1ec>)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b6:	4b6e      	ldr	r3, [pc, #440]	; (8003270 <HAL_RCC_ClockConfig+0x1ec>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0307 	and.w	r3, r3, #7
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d001      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e0cf      	b.n	8003268 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d010      	beq.n	80030f6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	4b66      	ldr	r3, [pc, #408]	; (8003274 <HAL_RCC_ClockConfig+0x1f0>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d908      	bls.n	80030f6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030e4:	4b63      	ldr	r3, [pc, #396]	; (8003274 <HAL_RCC_ClockConfig+0x1f0>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	4960      	ldr	r1, [pc, #384]	; (8003274 <HAL_RCC_ClockConfig+0x1f0>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d04c      	beq.n	800319c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2b03      	cmp	r3, #3
 8003108:	d107      	bne.n	800311a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800310a:	4b5a      	ldr	r3, [pc, #360]	; (8003274 <HAL_RCC_ClockConfig+0x1f0>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d121      	bne.n	800315a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e0a6      	b.n	8003268 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b02      	cmp	r3, #2
 8003120:	d107      	bne.n	8003132 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003122:	4b54      	ldr	r3, [pc, #336]	; (8003274 <HAL_RCC_ClockConfig+0x1f0>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d115      	bne.n	800315a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e09a      	b.n	8003268 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d107      	bne.n	800314a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800313a:	4b4e      	ldr	r3, [pc, #312]	; (8003274 <HAL_RCC_ClockConfig+0x1f0>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d109      	bne.n	800315a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e08e      	b.n	8003268 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800314a:	4b4a      	ldr	r3, [pc, #296]	; (8003274 <HAL_RCC_ClockConfig+0x1f0>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e086      	b.n	8003268 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800315a:	4b46      	ldr	r3, [pc, #280]	; (8003274 <HAL_RCC_ClockConfig+0x1f0>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f023 0203 	bic.w	r2, r3, #3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	4943      	ldr	r1, [pc, #268]	; (8003274 <HAL_RCC_ClockConfig+0x1f0>)
 8003168:	4313      	orrs	r3, r2
 800316a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800316c:	f7fe fdaa 	bl	8001cc4 <HAL_GetTick>
 8003170:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003172:	e00a      	b.n	800318a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003174:	f7fe fda6 	bl	8001cc4 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003182:	4293      	cmp	r3, r2
 8003184:	d901      	bls.n	800318a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e06e      	b.n	8003268 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800318a:	4b3a      	ldr	r3, [pc, #232]	; (8003274 <HAL_RCC_ClockConfig+0x1f0>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 020c 	and.w	r2, r3, #12
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	429a      	cmp	r2, r3
 800319a:	d1eb      	bne.n	8003174 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d010      	beq.n	80031ca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	4b31      	ldr	r3, [pc, #196]	; (8003274 <HAL_RCC_ClockConfig+0x1f0>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d208      	bcs.n	80031ca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031b8:	4b2e      	ldr	r3, [pc, #184]	; (8003274 <HAL_RCC_ClockConfig+0x1f0>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	492b      	ldr	r1, [pc, #172]	; (8003274 <HAL_RCC_ClockConfig+0x1f0>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031ca:	4b29      	ldr	r3, [pc, #164]	; (8003270 <HAL_RCC_ClockConfig+0x1ec>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0307 	and.w	r3, r3, #7
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d210      	bcs.n	80031fa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031d8:	4b25      	ldr	r3, [pc, #148]	; (8003270 <HAL_RCC_ClockConfig+0x1ec>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f023 0207 	bic.w	r2, r3, #7
 80031e0:	4923      	ldr	r1, [pc, #140]	; (8003270 <HAL_RCC_ClockConfig+0x1ec>)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031e8:	4b21      	ldr	r3, [pc, #132]	; (8003270 <HAL_RCC_ClockConfig+0x1ec>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d001      	beq.n	80031fa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e036      	b.n	8003268 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0304 	and.w	r3, r3, #4
 8003202:	2b00      	cmp	r3, #0
 8003204:	d008      	beq.n	8003218 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003206:	4b1b      	ldr	r3, [pc, #108]	; (8003274 <HAL_RCC_ClockConfig+0x1f0>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	4918      	ldr	r1, [pc, #96]	; (8003274 <HAL_RCC_ClockConfig+0x1f0>)
 8003214:	4313      	orrs	r3, r2
 8003216:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0308 	and.w	r3, r3, #8
 8003220:	2b00      	cmp	r3, #0
 8003222:	d009      	beq.n	8003238 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003224:	4b13      	ldr	r3, [pc, #76]	; (8003274 <HAL_RCC_ClockConfig+0x1f0>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	4910      	ldr	r1, [pc, #64]	; (8003274 <HAL_RCC_ClockConfig+0x1f0>)
 8003234:	4313      	orrs	r3, r2
 8003236:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003238:	f000 f824 	bl	8003284 <HAL_RCC_GetSysClockFreq>
 800323c:	4602      	mov	r2, r0
 800323e:	4b0d      	ldr	r3, [pc, #52]	; (8003274 <HAL_RCC_ClockConfig+0x1f0>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	091b      	lsrs	r3, r3, #4
 8003244:	f003 030f 	and.w	r3, r3, #15
 8003248:	490b      	ldr	r1, [pc, #44]	; (8003278 <HAL_RCC_ClockConfig+0x1f4>)
 800324a:	5ccb      	ldrb	r3, [r1, r3]
 800324c:	f003 031f 	and.w	r3, r3, #31
 8003250:	fa22 f303 	lsr.w	r3, r2, r3
 8003254:	4a09      	ldr	r2, [pc, #36]	; (800327c <HAL_RCC_ClockConfig+0x1f8>)
 8003256:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003258:	4b09      	ldr	r3, [pc, #36]	; (8003280 <HAL_RCC_ClockConfig+0x1fc>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4618      	mov	r0, r3
 800325e:	f7fe fce1 	bl	8001c24 <HAL_InitTick>
 8003262:	4603      	mov	r3, r0
 8003264:	72fb      	strb	r3, [r7, #11]

  return status;
 8003266:	7afb      	ldrb	r3, [r7, #11]
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40022000 	.word	0x40022000
 8003274:	40021000 	.word	0x40021000
 8003278:	080087a8 	.word	0x080087a8
 800327c:	20000000 	.word	0x20000000
 8003280:	20000004 	.word	0x20000004

08003284 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003284:	b480      	push	{r7}
 8003286:	b089      	sub	sp, #36	; 0x24
 8003288:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800328a:	2300      	movs	r3, #0
 800328c:	61fb      	str	r3, [r7, #28]
 800328e:	2300      	movs	r3, #0
 8003290:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003292:	4b3e      	ldr	r3, [pc, #248]	; (800338c <HAL_RCC_GetSysClockFreq+0x108>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f003 030c 	and.w	r3, r3, #12
 800329a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800329c:	4b3b      	ldr	r3, [pc, #236]	; (800338c <HAL_RCC_GetSysClockFreq+0x108>)
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	f003 0303 	and.w	r3, r3, #3
 80032a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d005      	beq.n	80032b8 <HAL_RCC_GetSysClockFreq+0x34>
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	2b0c      	cmp	r3, #12
 80032b0:	d121      	bne.n	80032f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d11e      	bne.n	80032f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80032b8:	4b34      	ldr	r3, [pc, #208]	; (800338c <HAL_RCC_GetSysClockFreq+0x108>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0308 	and.w	r3, r3, #8
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d107      	bne.n	80032d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80032c4:	4b31      	ldr	r3, [pc, #196]	; (800338c <HAL_RCC_GetSysClockFreq+0x108>)
 80032c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032ca:	0a1b      	lsrs	r3, r3, #8
 80032cc:	f003 030f 	and.w	r3, r3, #15
 80032d0:	61fb      	str	r3, [r7, #28]
 80032d2:	e005      	b.n	80032e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80032d4:	4b2d      	ldr	r3, [pc, #180]	; (800338c <HAL_RCC_GetSysClockFreq+0x108>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	091b      	lsrs	r3, r3, #4
 80032da:	f003 030f 	and.w	r3, r3, #15
 80032de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80032e0:	4a2b      	ldr	r2, [pc, #172]	; (8003390 <HAL_RCC_GetSysClockFreq+0x10c>)
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d10d      	bne.n	800330c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032f4:	e00a      	b.n	800330c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	2b04      	cmp	r3, #4
 80032fa:	d102      	bne.n	8003302 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80032fc:	4b25      	ldr	r3, [pc, #148]	; (8003394 <HAL_RCC_GetSysClockFreq+0x110>)
 80032fe:	61bb      	str	r3, [r7, #24]
 8003300:	e004      	b.n	800330c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	2b08      	cmp	r3, #8
 8003306:	d101      	bne.n	800330c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003308:	4b23      	ldr	r3, [pc, #140]	; (8003398 <HAL_RCC_GetSysClockFreq+0x114>)
 800330a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	2b0c      	cmp	r3, #12
 8003310:	d134      	bne.n	800337c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003312:	4b1e      	ldr	r3, [pc, #120]	; (800338c <HAL_RCC_GetSysClockFreq+0x108>)
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	f003 0303 	and.w	r3, r3, #3
 800331a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	2b02      	cmp	r3, #2
 8003320:	d003      	beq.n	800332a <HAL_RCC_GetSysClockFreq+0xa6>
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	2b03      	cmp	r3, #3
 8003326:	d003      	beq.n	8003330 <HAL_RCC_GetSysClockFreq+0xac>
 8003328:	e005      	b.n	8003336 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800332a:	4b1a      	ldr	r3, [pc, #104]	; (8003394 <HAL_RCC_GetSysClockFreq+0x110>)
 800332c:	617b      	str	r3, [r7, #20]
      break;
 800332e:	e005      	b.n	800333c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003330:	4b19      	ldr	r3, [pc, #100]	; (8003398 <HAL_RCC_GetSysClockFreq+0x114>)
 8003332:	617b      	str	r3, [r7, #20]
      break;
 8003334:	e002      	b.n	800333c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	617b      	str	r3, [r7, #20]
      break;
 800333a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800333c:	4b13      	ldr	r3, [pc, #76]	; (800338c <HAL_RCC_GetSysClockFreq+0x108>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	091b      	lsrs	r3, r3, #4
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	3301      	adds	r3, #1
 8003348:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800334a:	4b10      	ldr	r3, [pc, #64]	; (800338c <HAL_RCC_GetSysClockFreq+0x108>)
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	0a1b      	lsrs	r3, r3, #8
 8003350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	fb03 f202 	mul.w	r2, r3, r2
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003360:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003362:	4b0a      	ldr	r3, [pc, #40]	; (800338c <HAL_RCC_GetSysClockFreq+0x108>)
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	0e5b      	lsrs	r3, r3, #25
 8003368:	f003 0303 	and.w	r3, r3, #3
 800336c:	3301      	adds	r3, #1
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	fbb2 f3f3 	udiv	r3, r2, r3
 800337a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800337c:	69bb      	ldr	r3, [r7, #24]
}
 800337e:	4618      	mov	r0, r3
 8003380:	3724      	adds	r7, #36	; 0x24
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	40021000 	.word	0x40021000
 8003390:	080087c0 	.word	0x080087c0
 8003394:	00f42400 	.word	0x00f42400
 8003398:	007a1200 	.word	0x007a1200

0800339c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033a0:	4b03      	ldr	r3, [pc, #12]	; (80033b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80033a2:	681b      	ldr	r3, [r3, #0]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	20000000 	.word	0x20000000

080033b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80033b8:	f7ff fff0 	bl	800339c <HAL_RCC_GetHCLKFreq>
 80033bc:	4602      	mov	r2, r0
 80033be:	4b06      	ldr	r3, [pc, #24]	; (80033d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	0a1b      	lsrs	r3, r3, #8
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	4904      	ldr	r1, [pc, #16]	; (80033dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80033ca:	5ccb      	ldrb	r3, [r1, r3]
 80033cc:	f003 031f 	and.w	r3, r3, #31
 80033d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40021000 	.word	0x40021000
 80033dc:	080087b8 	.word	0x080087b8

080033e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80033e4:	f7ff ffda 	bl	800339c <HAL_RCC_GetHCLKFreq>
 80033e8:	4602      	mov	r2, r0
 80033ea:	4b06      	ldr	r3, [pc, #24]	; (8003404 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	0adb      	lsrs	r3, r3, #11
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	4904      	ldr	r1, [pc, #16]	; (8003408 <HAL_RCC_GetPCLK2Freq+0x28>)
 80033f6:	5ccb      	ldrb	r3, [r1, r3]
 80033f8:	f003 031f 	and.w	r3, r3, #31
 80033fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003400:	4618      	mov	r0, r3
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40021000 	.word	0x40021000
 8003408:	080087b8 	.word	0x080087b8

0800340c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003414:	2300      	movs	r3, #0
 8003416:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003418:	4b2a      	ldr	r3, [pc, #168]	; (80034c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800341a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800341c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d003      	beq.n	800342c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003424:	f7ff f9ee 	bl	8002804 <HAL_PWREx_GetVoltageRange>
 8003428:	6178      	str	r0, [r7, #20]
 800342a:	e014      	b.n	8003456 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800342c:	4b25      	ldr	r3, [pc, #148]	; (80034c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800342e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003430:	4a24      	ldr	r2, [pc, #144]	; (80034c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003436:	6593      	str	r3, [r2, #88]	; 0x58
 8003438:	4b22      	ldr	r3, [pc, #136]	; (80034c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800343a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800343c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003440:	60fb      	str	r3, [r7, #12]
 8003442:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003444:	f7ff f9de 	bl	8002804 <HAL_PWREx_GetVoltageRange>
 8003448:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800344a:	4b1e      	ldr	r3, [pc, #120]	; (80034c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800344c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344e:	4a1d      	ldr	r2, [pc, #116]	; (80034c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003450:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003454:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800345c:	d10b      	bne.n	8003476 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2b80      	cmp	r3, #128	; 0x80
 8003462:	d919      	bls.n	8003498 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2ba0      	cmp	r3, #160	; 0xa0
 8003468:	d902      	bls.n	8003470 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800346a:	2302      	movs	r3, #2
 800346c:	613b      	str	r3, [r7, #16]
 800346e:	e013      	b.n	8003498 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003470:	2301      	movs	r3, #1
 8003472:	613b      	str	r3, [r7, #16]
 8003474:	e010      	b.n	8003498 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2b80      	cmp	r3, #128	; 0x80
 800347a:	d902      	bls.n	8003482 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800347c:	2303      	movs	r3, #3
 800347e:	613b      	str	r3, [r7, #16]
 8003480:	e00a      	b.n	8003498 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2b80      	cmp	r3, #128	; 0x80
 8003486:	d102      	bne.n	800348e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003488:	2302      	movs	r3, #2
 800348a:	613b      	str	r3, [r7, #16]
 800348c:	e004      	b.n	8003498 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b70      	cmp	r3, #112	; 0x70
 8003492:	d101      	bne.n	8003498 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003494:	2301      	movs	r3, #1
 8003496:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003498:	4b0b      	ldr	r3, [pc, #44]	; (80034c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f023 0207 	bic.w	r2, r3, #7
 80034a0:	4909      	ldr	r1, [pc, #36]	; (80034c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80034a8:	4b07      	ldr	r3, [pc, #28]	; (80034c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d001      	beq.n	80034ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e000      	b.n	80034bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3718      	adds	r7, #24
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40021000 	.word	0x40021000
 80034c8:	40022000 	.word	0x40022000

080034cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034d4:	2300      	movs	r3, #0
 80034d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034d8:	2300      	movs	r3, #0
 80034da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d041      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034f0:	d02a      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80034f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034f6:	d824      	bhi.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034fc:	d008      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80034fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003502:	d81e      	bhi.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00a      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003508:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800350c:	d010      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800350e:	e018      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003510:	4b86      	ldr	r3, [pc, #536]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	4a85      	ldr	r2, [pc, #532]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003516:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800351a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800351c:	e015      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	3304      	adds	r3, #4
 8003522:	2100      	movs	r1, #0
 8003524:	4618      	mov	r0, r3
 8003526:	f000 fabb 	bl	8003aa0 <RCCEx_PLLSAI1_Config>
 800352a:	4603      	mov	r3, r0
 800352c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800352e:	e00c      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3320      	adds	r3, #32
 8003534:	2100      	movs	r1, #0
 8003536:	4618      	mov	r0, r3
 8003538:	f000 fba6 	bl	8003c88 <RCCEx_PLLSAI2_Config>
 800353c:	4603      	mov	r3, r0
 800353e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003540:	e003      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	74fb      	strb	r3, [r7, #19]
      break;
 8003546:	e000      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003548:	bf00      	nop
    }

    if(ret == HAL_OK)
 800354a:	7cfb      	ldrb	r3, [r7, #19]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10b      	bne.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003550:	4b76      	ldr	r3, [pc, #472]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003556:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800355e:	4973      	ldr	r1, [pc, #460]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003560:	4313      	orrs	r3, r2
 8003562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003566:	e001      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003568:	7cfb      	ldrb	r3, [r7, #19]
 800356a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d041      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800357c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003580:	d02a      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003582:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003586:	d824      	bhi.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003588:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800358c:	d008      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800358e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003592:	d81e      	bhi.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00a      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003598:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800359c:	d010      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800359e:	e018      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035a0:	4b62      	ldr	r3, [pc, #392]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	4a61      	ldr	r2, [pc, #388]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035aa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035ac:	e015      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	3304      	adds	r3, #4
 80035b2:	2100      	movs	r1, #0
 80035b4:	4618      	mov	r0, r3
 80035b6:	f000 fa73 	bl	8003aa0 <RCCEx_PLLSAI1_Config>
 80035ba:	4603      	mov	r3, r0
 80035bc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035be:	e00c      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	3320      	adds	r3, #32
 80035c4:	2100      	movs	r1, #0
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 fb5e 	bl	8003c88 <RCCEx_PLLSAI2_Config>
 80035cc:	4603      	mov	r3, r0
 80035ce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035d0:	e003      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	74fb      	strb	r3, [r7, #19]
      break;
 80035d6:	e000      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80035d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035da:	7cfb      	ldrb	r3, [r7, #19]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10b      	bne.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035e0:	4b52      	ldr	r3, [pc, #328]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035ee:	494f      	ldr	r1, [pc, #316]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80035f6:	e001      	b.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f8:	7cfb      	ldrb	r3, [r7, #19]
 80035fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 80a0 	beq.w	800374a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800360a:	2300      	movs	r3, #0
 800360c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800360e:	4b47      	ldr	r3, [pc, #284]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800361a:	2301      	movs	r3, #1
 800361c:	e000      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800361e:	2300      	movs	r3, #0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00d      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003624:	4b41      	ldr	r3, [pc, #260]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003628:	4a40      	ldr	r2, [pc, #256]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800362a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800362e:	6593      	str	r3, [r2, #88]	; 0x58
 8003630:	4b3e      	ldr	r3, [pc, #248]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003638:	60bb      	str	r3, [r7, #8]
 800363a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800363c:	2301      	movs	r3, #1
 800363e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003640:	4b3b      	ldr	r3, [pc, #236]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a3a      	ldr	r2, [pc, #232]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800364a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800364c:	f7fe fb3a 	bl	8001cc4 <HAL_GetTick>
 8003650:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003652:	e009      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003654:	f7fe fb36 	bl	8001cc4 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d902      	bls.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	74fb      	strb	r3, [r7, #19]
        break;
 8003666:	e005      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003668:	4b31      	ldr	r3, [pc, #196]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0ef      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003674:	7cfb      	ldrb	r3, [r7, #19]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d15c      	bne.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800367a:	4b2c      	ldr	r3, [pc, #176]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800367c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003680:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003684:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d01f      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	429a      	cmp	r2, r3
 8003696:	d019      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003698:	4b24      	ldr	r3, [pc, #144]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800369a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036a4:	4b21      	ldr	r3, [pc, #132]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036aa:	4a20      	ldr	r2, [pc, #128]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036b4:	4b1d      	ldr	r3, [pc, #116]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ba:	4a1c      	ldr	r2, [pc, #112]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036c4:	4a19      	ldr	r2, [pc, #100]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d016      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d6:	f7fe faf5 	bl	8001cc4 <HAL_GetTick>
 80036da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036dc:	e00b      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036de:	f7fe faf1 	bl	8001cc4 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d902      	bls.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	74fb      	strb	r3, [r7, #19]
            break;
 80036f4:	e006      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036f6:	4b0d      	ldr	r3, [pc, #52]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0ec      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003704:	7cfb      	ldrb	r3, [r7, #19]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10c      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800370a:	4b08      	ldr	r3, [pc, #32]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800370c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003710:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800371a:	4904      	ldr	r1, [pc, #16]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800371c:	4313      	orrs	r3, r2
 800371e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003722:	e009      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003724:	7cfb      	ldrb	r3, [r7, #19]
 8003726:	74bb      	strb	r3, [r7, #18]
 8003728:	e006      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800372a:	bf00      	nop
 800372c:	40021000 	.word	0x40021000
 8003730:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003734:	7cfb      	ldrb	r3, [r7, #19]
 8003736:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003738:	7c7b      	ldrb	r3, [r7, #17]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d105      	bne.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800373e:	4b9e      	ldr	r3, [pc, #632]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003742:	4a9d      	ldr	r2, [pc, #628]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003744:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003748:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00a      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003756:	4b98      	ldr	r3, [pc, #608]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375c:	f023 0203 	bic.w	r2, r3, #3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003764:	4994      	ldr	r1, [pc, #592]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003766:	4313      	orrs	r3, r2
 8003768:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00a      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003778:	4b8f      	ldr	r3, [pc, #572]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800377a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377e:	f023 020c 	bic.w	r2, r3, #12
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003786:	498c      	ldr	r1, [pc, #560]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003788:	4313      	orrs	r3, r2
 800378a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0304 	and.w	r3, r3, #4
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00a      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800379a:	4b87      	ldr	r3, [pc, #540]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800379c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a8:	4983      	ldr	r1, [pc, #524]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0308 	and.w	r3, r3, #8
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00a      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037bc:	4b7e      	ldr	r3, [pc, #504]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ca:	497b      	ldr	r1, [pc, #492]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0310 	and.w	r3, r3, #16
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00a      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037de:	4b76      	ldr	r3, [pc, #472]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ec:	4972      	ldr	r1, [pc, #456]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0320 	and.w	r3, r3, #32
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00a      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003800:	4b6d      	ldr	r3, [pc, #436]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003806:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800380e:	496a      	ldr	r1, [pc, #424]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003810:	4313      	orrs	r3, r2
 8003812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00a      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003822:	4b65      	ldr	r3, [pc, #404]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003828:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003830:	4961      	ldr	r1, [pc, #388]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003832:	4313      	orrs	r3, r2
 8003834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00a      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003844:	4b5c      	ldr	r3, [pc, #368]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003852:	4959      	ldr	r1, [pc, #356]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003854:	4313      	orrs	r3, r2
 8003856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00a      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003866:	4b54      	ldr	r3, [pc, #336]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003874:	4950      	ldr	r1, [pc, #320]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003876:	4313      	orrs	r3, r2
 8003878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00a      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003888:	4b4b      	ldr	r3, [pc, #300]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800388a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003896:	4948      	ldr	r1, [pc, #288]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003898:	4313      	orrs	r3, r2
 800389a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00a      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038aa:	4b43      	ldr	r3, [pc, #268]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b8:	493f      	ldr	r1, [pc, #252]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d028      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038cc:	4b3a      	ldr	r3, [pc, #232]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038da:	4937      	ldr	r1, [pc, #220]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038ea:	d106      	bne.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038ec:	4b32      	ldr	r3, [pc, #200]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	4a31      	ldr	r2, [pc, #196]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038f6:	60d3      	str	r3, [r2, #12]
 80038f8:	e011      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003902:	d10c      	bne.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	3304      	adds	r3, #4
 8003908:	2101      	movs	r1, #1
 800390a:	4618      	mov	r0, r3
 800390c:	f000 f8c8 	bl	8003aa0 <RCCEx_PLLSAI1_Config>
 8003910:	4603      	mov	r3, r0
 8003912:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003914:	7cfb      	ldrb	r3, [r7, #19]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800391a:	7cfb      	ldrb	r3, [r7, #19]
 800391c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d028      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800392a:	4b23      	ldr	r3, [pc, #140]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800392c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003930:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003938:	491f      	ldr	r1, [pc, #124]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800393a:	4313      	orrs	r3, r2
 800393c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003944:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003948:	d106      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800394a:	4b1b      	ldr	r3, [pc, #108]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	4a1a      	ldr	r2, [pc, #104]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003950:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003954:	60d3      	str	r3, [r2, #12]
 8003956:	e011      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003960:	d10c      	bne.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	3304      	adds	r3, #4
 8003966:	2101      	movs	r1, #1
 8003968:	4618      	mov	r0, r3
 800396a:	f000 f899 	bl	8003aa0 <RCCEx_PLLSAI1_Config>
 800396e:	4603      	mov	r3, r0
 8003970:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003972:	7cfb      	ldrb	r3, [r7, #19]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003978:	7cfb      	ldrb	r3, [r7, #19]
 800397a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d02b      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003988:	4b0b      	ldr	r3, [pc, #44]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800398a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003996:	4908      	ldr	r1, [pc, #32]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003998:	4313      	orrs	r3, r2
 800399a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039a6:	d109      	bne.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039a8:	4b03      	ldr	r3, [pc, #12]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	4a02      	ldr	r2, [pc, #8]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039b2:	60d3      	str	r3, [r2, #12]
 80039b4:	e014      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80039b6:	bf00      	nop
 80039b8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039c4:	d10c      	bne.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	3304      	adds	r3, #4
 80039ca:	2101      	movs	r1, #1
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 f867 	bl	8003aa0 <RCCEx_PLLSAI1_Config>
 80039d2:	4603      	mov	r3, r0
 80039d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039d6:	7cfb      	ldrb	r3, [r7, #19]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80039dc:	7cfb      	ldrb	r3, [r7, #19]
 80039de:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d02f      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039ec:	4b2b      	ldr	r3, [pc, #172]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039fa:	4928      	ldr	r1, [pc, #160]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a0a:	d10d      	bne.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	3304      	adds	r3, #4
 8003a10:	2102      	movs	r1, #2
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 f844 	bl	8003aa0 <RCCEx_PLLSAI1_Config>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a1c:	7cfb      	ldrb	r3, [r7, #19]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d014      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003a22:	7cfb      	ldrb	r3, [r7, #19]
 8003a24:	74bb      	strb	r3, [r7, #18]
 8003a26:	e011      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a30:	d10c      	bne.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	3320      	adds	r3, #32
 8003a36:	2102      	movs	r1, #2
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f000 f925 	bl	8003c88 <RCCEx_PLLSAI2_Config>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a42:	7cfb      	ldrb	r3, [r7, #19]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003a48:	7cfb      	ldrb	r3, [r7, #19]
 8003a4a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00a      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a58:	4b10      	ldr	r3, [pc, #64]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a66:	490d      	ldr	r1, [pc, #52]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00b      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a7a:	4b08      	ldr	r3, [pc, #32]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a80:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a8a:	4904      	ldr	r1, [pc, #16]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a92:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3718      	adds	r7, #24
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	40021000 	.word	0x40021000

08003aa0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003aae:	4b75      	ldr	r3, [pc, #468]	; (8003c84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	f003 0303 	and.w	r3, r3, #3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d018      	beq.n	8003aec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003aba:	4b72      	ldr	r3, [pc, #456]	; (8003c84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	f003 0203 	and.w	r2, r3, #3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d10d      	bne.n	8003ae6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
       ||
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d009      	beq.n	8003ae6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003ad2:	4b6c      	ldr	r3, [pc, #432]	; (8003c84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	091b      	lsrs	r3, r3, #4
 8003ad8:	f003 0307 	and.w	r3, r3, #7
 8003adc:	1c5a      	adds	r2, r3, #1
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
       ||
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d047      	beq.n	8003b76 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	73fb      	strb	r3, [r7, #15]
 8003aea:	e044      	b.n	8003b76 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2b03      	cmp	r3, #3
 8003af2:	d018      	beq.n	8003b26 <RCCEx_PLLSAI1_Config+0x86>
 8003af4:	2b03      	cmp	r3, #3
 8003af6:	d825      	bhi.n	8003b44 <RCCEx_PLLSAI1_Config+0xa4>
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d002      	beq.n	8003b02 <RCCEx_PLLSAI1_Config+0x62>
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d009      	beq.n	8003b14 <RCCEx_PLLSAI1_Config+0x74>
 8003b00:	e020      	b.n	8003b44 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b02:	4b60      	ldr	r3, [pc, #384]	; (8003c84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d11d      	bne.n	8003b4a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b12:	e01a      	b.n	8003b4a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b14:	4b5b      	ldr	r3, [pc, #364]	; (8003c84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d116      	bne.n	8003b4e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b24:	e013      	b.n	8003b4e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b26:	4b57      	ldr	r3, [pc, #348]	; (8003c84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10f      	bne.n	8003b52 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b32:	4b54      	ldr	r3, [pc, #336]	; (8003c84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d109      	bne.n	8003b52 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b42:	e006      	b.n	8003b52 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	73fb      	strb	r3, [r7, #15]
      break;
 8003b48:	e004      	b.n	8003b54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b4a:	bf00      	nop
 8003b4c:	e002      	b.n	8003b54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b4e:	bf00      	nop
 8003b50:	e000      	b.n	8003b54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b52:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b54:	7bfb      	ldrb	r3, [r7, #15]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10d      	bne.n	8003b76 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b5a:	4b4a      	ldr	r3, [pc, #296]	; (8003c84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6819      	ldr	r1, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	011b      	lsls	r3, r3, #4
 8003b6e:	430b      	orrs	r3, r1
 8003b70:	4944      	ldr	r1, [pc, #272]	; (8003c84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b76:	7bfb      	ldrb	r3, [r7, #15]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d17d      	bne.n	8003c78 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003b7c:	4b41      	ldr	r3, [pc, #260]	; (8003c84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a40      	ldr	r2, [pc, #256]	; (8003c84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b88:	f7fe f89c 	bl	8001cc4 <HAL_GetTick>
 8003b8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b8e:	e009      	b.n	8003ba4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b90:	f7fe f898 	bl	8001cc4 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d902      	bls.n	8003ba4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	73fb      	strb	r3, [r7, #15]
        break;
 8003ba2:	e005      	b.n	8003bb0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ba4:	4b37      	ldr	r3, [pc, #220]	; (8003c84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1ef      	bne.n	8003b90 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003bb0:	7bfb      	ldrb	r3, [r7, #15]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d160      	bne.n	8003c78 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d111      	bne.n	8003be0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bbc:	4b31      	ldr	r3, [pc, #196]	; (8003c84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003bc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	6892      	ldr	r2, [r2, #8]
 8003bcc:	0211      	lsls	r1, r2, #8
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	68d2      	ldr	r2, [r2, #12]
 8003bd2:	0912      	lsrs	r2, r2, #4
 8003bd4:	0452      	lsls	r2, r2, #17
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	492a      	ldr	r1, [pc, #168]	; (8003c84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	610b      	str	r3, [r1, #16]
 8003bde:	e027      	b.n	8003c30 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d112      	bne.n	8003c0c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003be6:	4b27      	ldr	r3, [pc, #156]	; (8003c84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003bee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	6892      	ldr	r2, [r2, #8]
 8003bf6:	0211      	lsls	r1, r2, #8
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	6912      	ldr	r2, [r2, #16]
 8003bfc:	0852      	lsrs	r2, r2, #1
 8003bfe:	3a01      	subs	r2, #1
 8003c00:	0552      	lsls	r2, r2, #21
 8003c02:	430a      	orrs	r2, r1
 8003c04:	491f      	ldr	r1, [pc, #124]	; (8003c84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	610b      	str	r3, [r1, #16]
 8003c0a:	e011      	b.n	8003c30 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c0c:	4b1d      	ldr	r3, [pc, #116]	; (8003c84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003c14:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	6892      	ldr	r2, [r2, #8]
 8003c1c:	0211      	lsls	r1, r2, #8
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	6952      	ldr	r2, [r2, #20]
 8003c22:	0852      	lsrs	r2, r2, #1
 8003c24:	3a01      	subs	r2, #1
 8003c26:	0652      	lsls	r2, r2, #25
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	4916      	ldr	r1, [pc, #88]	; (8003c84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003c30:	4b14      	ldr	r3, [pc, #80]	; (8003c84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a13      	ldr	r2, [pc, #76]	; (8003c84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c3c:	f7fe f842 	bl	8001cc4 <HAL_GetTick>
 8003c40:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c42:	e009      	b.n	8003c58 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c44:	f7fe f83e 	bl	8001cc4 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d902      	bls.n	8003c58 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	73fb      	strb	r3, [r7, #15]
          break;
 8003c56:	e005      	b.n	8003c64 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c58:	4b0a      	ldr	r3, [pc, #40]	; (8003c84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d0ef      	beq.n	8003c44 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003c64:	7bfb      	ldrb	r3, [r7, #15]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d106      	bne.n	8003c78 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003c6a:	4b06      	ldr	r3, [pc, #24]	; (8003c84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c6c:	691a      	ldr	r2, [r3, #16]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	4904      	ldr	r1, [pc, #16]	; (8003c84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	40021000 	.word	0x40021000

08003c88 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c92:	2300      	movs	r3, #0
 8003c94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c96:	4b6a      	ldr	r3, [pc, #424]	; (8003e40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	f003 0303 	and.w	r3, r3, #3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d018      	beq.n	8003cd4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003ca2:	4b67      	ldr	r3, [pc, #412]	; (8003e40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	f003 0203 	and.w	r2, r3, #3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d10d      	bne.n	8003cce <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
       ||
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d009      	beq.n	8003cce <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003cba:	4b61      	ldr	r3, [pc, #388]	; (8003e40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	091b      	lsrs	r3, r3, #4
 8003cc0:	f003 0307 	and.w	r3, r3, #7
 8003cc4:	1c5a      	adds	r2, r3, #1
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
       ||
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d047      	beq.n	8003d5e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	73fb      	strb	r3, [r7, #15]
 8003cd2:	e044      	b.n	8003d5e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2b03      	cmp	r3, #3
 8003cda:	d018      	beq.n	8003d0e <RCCEx_PLLSAI2_Config+0x86>
 8003cdc:	2b03      	cmp	r3, #3
 8003cde:	d825      	bhi.n	8003d2c <RCCEx_PLLSAI2_Config+0xa4>
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d002      	beq.n	8003cea <RCCEx_PLLSAI2_Config+0x62>
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d009      	beq.n	8003cfc <RCCEx_PLLSAI2_Config+0x74>
 8003ce8:	e020      	b.n	8003d2c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003cea:	4b55      	ldr	r3, [pc, #340]	; (8003e40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d11d      	bne.n	8003d32 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cfa:	e01a      	b.n	8003d32 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003cfc:	4b50      	ldr	r3, [pc, #320]	; (8003e40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d116      	bne.n	8003d36 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d0c:	e013      	b.n	8003d36 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d0e:	4b4c      	ldr	r3, [pc, #304]	; (8003e40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10f      	bne.n	8003d3a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d1a:	4b49      	ldr	r3, [pc, #292]	; (8003e40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d109      	bne.n	8003d3a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d2a:	e006      	b.n	8003d3a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d30:	e004      	b.n	8003d3c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d32:	bf00      	nop
 8003d34:	e002      	b.n	8003d3c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d36:	bf00      	nop
 8003d38:	e000      	b.n	8003d3c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d3a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d3c:	7bfb      	ldrb	r3, [r7, #15]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10d      	bne.n	8003d5e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d42:	4b3f      	ldr	r3, [pc, #252]	; (8003e40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6819      	ldr	r1, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	3b01      	subs	r3, #1
 8003d54:	011b      	lsls	r3, r3, #4
 8003d56:	430b      	orrs	r3, r1
 8003d58:	4939      	ldr	r1, [pc, #228]	; (8003e40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d5e:	7bfb      	ldrb	r3, [r7, #15]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d167      	bne.n	8003e34 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003d64:	4b36      	ldr	r3, [pc, #216]	; (8003e40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a35      	ldr	r2, [pc, #212]	; (8003e40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d70:	f7fd ffa8 	bl	8001cc4 <HAL_GetTick>
 8003d74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d76:	e009      	b.n	8003d8c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d78:	f7fd ffa4 	bl	8001cc4 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d902      	bls.n	8003d8c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	73fb      	strb	r3, [r7, #15]
        break;
 8003d8a:	e005      	b.n	8003d98 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d8c:	4b2c      	ldr	r3, [pc, #176]	; (8003e40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1ef      	bne.n	8003d78 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d98:	7bfb      	ldrb	r3, [r7, #15]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d14a      	bne.n	8003e34 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d111      	bne.n	8003dc8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003da4:	4b26      	ldr	r3, [pc, #152]	; (8003e40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003dac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	6892      	ldr	r2, [r2, #8]
 8003db4:	0211      	lsls	r1, r2, #8
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	68d2      	ldr	r2, [r2, #12]
 8003dba:	0912      	lsrs	r2, r2, #4
 8003dbc:	0452      	lsls	r2, r2, #17
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	491f      	ldr	r1, [pc, #124]	; (8003e40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	614b      	str	r3, [r1, #20]
 8003dc6:	e011      	b.n	8003dec <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003dc8:	4b1d      	ldr	r3, [pc, #116]	; (8003e40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003dd0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	6892      	ldr	r2, [r2, #8]
 8003dd8:	0211      	lsls	r1, r2, #8
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	6912      	ldr	r2, [r2, #16]
 8003dde:	0852      	lsrs	r2, r2, #1
 8003de0:	3a01      	subs	r2, #1
 8003de2:	0652      	lsls	r2, r2, #25
 8003de4:	430a      	orrs	r2, r1
 8003de6:	4916      	ldr	r1, [pc, #88]	; (8003e40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003dec:	4b14      	ldr	r3, [pc, #80]	; (8003e40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a13      	ldr	r2, [pc, #76]	; (8003e40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003df2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003df6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df8:	f7fd ff64 	bl	8001cc4 <HAL_GetTick>
 8003dfc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003dfe:	e009      	b.n	8003e14 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e00:	f7fd ff60 	bl	8001cc4 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d902      	bls.n	8003e14 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	73fb      	strb	r3, [r7, #15]
          break;
 8003e12:	e005      	b.n	8003e20 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e14:	4b0a      	ldr	r3, [pc, #40]	; (8003e40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d0ef      	beq.n	8003e00 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003e20:	7bfb      	ldrb	r3, [r7, #15]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d106      	bne.n	8003e34 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003e26:	4b06      	ldr	r3, [pc, #24]	; (8003e40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e28:	695a      	ldr	r2, [r3, #20]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	4904      	ldr	r1, [pc, #16]	; (8003e40 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	40021000 	.word	0x40021000

08003e44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e095      	b.n	8003f82 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d108      	bne.n	8003e70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e66:	d009      	beq.n	8003e7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	61da      	str	r2, [r3, #28]
 8003e6e:	e005      	b.n	8003e7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d106      	bne.n	8003e9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7fd fb4e 	bl	8001538 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eb2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ebc:	d902      	bls.n	8003ec4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	60fb      	str	r3, [r7, #12]
 8003ec2:	e002      	b.n	8003eca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003ec4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ec8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003ed2:	d007      	beq.n	8003ee4 <HAL_SPI_Init+0xa0>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003edc:	d002      	beq.n	8003ee4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ef4:	431a      	orrs	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	431a      	orrs	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f12:	431a      	orrs	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	69db      	ldr	r3, [r3, #28]
 8003f18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f26:	ea42 0103 	orr.w	r1, r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	0c1b      	lsrs	r3, r3, #16
 8003f40:	f003 0204 	and.w	r2, r3, #4
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f48:	f003 0310 	and.w	r3, r3, #16
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f52:	f003 0308 	and.w	r3, r3, #8
 8003f56:	431a      	orrs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003f60:	ea42 0103 	orr.w	r1, r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b08a      	sub	sp, #40	; 0x28
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	60f8      	str	r0, [r7, #12]
 8003f92:	60b9      	str	r1, [r7, #8]
 8003f94:	607a      	str	r2, [r7, #4]
 8003f96:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d101      	bne.n	8003fb0 <HAL_SPI_TransmitReceive+0x26>
 8003fac:	2302      	movs	r3, #2
 8003fae:	e1fb      	b.n	80043a8 <HAL_SPI_TransmitReceive+0x41e>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fb8:	f7fd fe84 	bl	8001cc4 <HAL_GetTick>
 8003fbc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003fc4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003fcc:	887b      	ldrh	r3, [r7, #2]
 8003fce:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003fd0:	887b      	ldrh	r3, [r7, #2]
 8003fd2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003fd4:	7efb      	ldrb	r3, [r7, #27]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d00e      	beq.n	8003ff8 <HAL_SPI_TransmitReceive+0x6e>
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fe0:	d106      	bne.n	8003ff0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d102      	bne.n	8003ff0 <HAL_SPI_TransmitReceive+0x66>
 8003fea:	7efb      	ldrb	r3, [r7, #27]
 8003fec:	2b04      	cmp	r3, #4
 8003fee:	d003      	beq.n	8003ff8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003ff6:	e1cd      	b.n	8004394 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d005      	beq.n	800400a <HAL_SPI_TransmitReceive+0x80>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d002      	beq.n	800400a <HAL_SPI_TransmitReceive+0x80>
 8004004:	887b      	ldrh	r3, [r7, #2]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d103      	bne.n	8004012 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004010:	e1c0      	b.n	8004394 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b04      	cmp	r3, #4
 800401c:	d003      	beq.n	8004026 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2205      	movs	r2, #5
 8004022:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	887a      	ldrh	r2, [r7, #2]
 8004036:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	887a      	ldrh	r2, [r7, #2]
 800403e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	887a      	ldrh	r2, [r7, #2]
 800404c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	887a      	ldrh	r2, [r7, #2]
 8004052:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004068:	d802      	bhi.n	8004070 <HAL_SPI_TransmitReceive+0xe6>
 800406a:	8a3b      	ldrh	r3, [r7, #16]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d908      	bls.n	8004082 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800407e:	605a      	str	r2, [r3, #4]
 8004080:	e007      	b.n	8004092 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004090:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800409c:	2b40      	cmp	r3, #64	; 0x40
 800409e:	d007      	beq.n	80040b0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040b8:	d97c      	bls.n	80041b4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d002      	beq.n	80040c8 <HAL_SPI_TransmitReceive+0x13e>
 80040c2:	8a7b      	ldrh	r3, [r7, #18]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d169      	bne.n	800419c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040cc:	881a      	ldrh	r2, [r3, #0]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d8:	1c9a      	adds	r2, r3, #2
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	3b01      	subs	r3, #1
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040ec:	e056      	b.n	800419c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d11b      	bne.n	8004134 <HAL_SPI_TransmitReceive+0x1aa>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004100:	b29b      	uxth	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d016      	beq.n	8004134 <HAL_SPI_TransmitReceive+0x1aa>
 8004106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004108:	2b01      	cmp	r3, #1
 800410a:	d113      	bne.n	8004134 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004110:	881a      	ldrh	r2, [r3, #0]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411c:	1c9a      	adds	r2, r3, #2
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004126:	b29b      	uxth	r3, r3
 8004128:	3b01      	subs	r3, #1
 800412a:	b29a      	uxth	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004130:	2300      	movs	r3, #0
 8004132:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b01      	cmp	r3, #1
 8004140:	d11c      	bne.n	800417c <HAL_SPI_TransmitReceive+0x1f2>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004148:	b29b      	uxth	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d016      	beq.n	800417c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68da      	ldr	r2, [r3, #12]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004158:	b292      	uxth	r2, r2
 800415a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004160:	1c9a      	adds	r2, r3, #2
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800416c:	b29b      	uxth	r3, r3
 800416e:	3b01      	subs	r3, #1
 8004170:	b29a      	uxth	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004178:	2301      	movs	r3, #1
 800417a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800417c:	f7fd fda2 	bl	8001cc4 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004188:	429a      	cmp	r2, r3
 800418a:	d807      	bhi.n	800419c <HAL_SPI_TransmitReceive+0x212>
 800418c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004192:	d003      	beq.n	800419c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800419a:	e0fb      	b.n	8004394 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1a3      	bne.n	80040ee <HAL_SPI_TransmitReceive+0x164>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d19d      	bne.n	80040ee <HAL_SPI_TransmitReceive+0x164>
 80041b2:	e0df      	b.n	8004374 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d003      	beq.n	80041c4 <HAL_SPI_TransmitReceive+0x23a>
 80041bc:	8a7b      	ldrh	r3, [r7, #18]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	f040 80cb 	bne.w	800435a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d912      	bls.n	80041f4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d2:	881a      	ldrh	r2, [r3, #0]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041de:	1c9a      	adds	r2, r3, #2
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	3b02      	subs	r3, #2
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041f2:	e0b2      	b.n	800435a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	330c      	adds	r3, #12
 80041fe:	7812      	ldrb	r2, [r2, #0]
 8004200:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004210:	b29b      	uxth	r3, r3
 8004212:	3b01      	subs	r3, #1
 8004214:	b29a      	uxth	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800421a:	e09e      	b.n	800435a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b02      	cmp	r3, #2
 8004228:	d134      	bne.n	8004294 <HAL_SPI_TransmitReceive+0x30a>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800422e:	b29b      	uxth	r3, r3
 8004230:	2b00      	cmp	r3, #0
 8004232:	d02f      	beq.n	8004294 <HAL_SPI_TransmitReceive+0x30a>
 8004234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004236:	2b01      	cmp	r3, #1
 8004238:	d12c      	bne.n	8004294 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800423e:	b29b      	uxth	r3, r3
 8004240:	2b01      	cmp	r3, #1
 8004242:	d912      	bls.n	800426a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004248:	881a      	ldrh	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004254:	1c9a      	adds	r2, r3, #2
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800425e:	b29b      	uxth	r3, r3
 8004260:	3b02      	subs	r3, #2
 8004262:	b29a      	uxth	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004268:	e012      	b.n	8004290 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	330c      	adds	r3, #12
 8004274:	7812      	ldrb	r2, [r2, #0]
 8004276:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427c:	1c5a      	adds	r2, r3, #1
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004286:	b29b      	uxth	r3, r3
 8004288:	3b01      	subs	r3, #1
 800428a:	b29a      	uxth	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004290:	2300      	movs	r3, #0
 8004292:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d148      	bne.n	8004334 <HAL_SPI_TransmitReceive+0x3aa>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d042      	beq.n	8004334 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d923      	bls.n	8004302 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68da      	ldr	r2, [r3, #12]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c4:	b292      	uxth	r2, r2
 80042c6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042cc:	1c9a      	adds	r2, r3, #2
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042d8:	b29b      	uxth	r3, r3
 80042da:	3b02      	subs	r3, #2
 80042dc:	b29a      	uxth	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d81f      	bhi.n	8004330 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	685a      	ldr	r2, [r3, #4]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80042fe:	605a      	str	r2, [r3, #4]
 8004300:	e016      	b.n	8004330 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f103 020c 	add.w	r2, r3, #12
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430e:	7812      	ldrb	r2, [r2, #0]
 8004310:	b2d2      	uxtb	r2, r2
 8004312:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004318:	1c5a      	adds	r2, r3, #1
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004324:	b29b      	uxth	r3, r3
 8004326:	3b01      	subs	r3, #1
 8004328:	b29a      	uxth	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004330:	2301      	movs	r3, #1
 8004332:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004334:	f7fd fcc6 	bl	8001cc4 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004340:	429a      	cmp	r2, r3
 8004342:	d803      	bhi.n	800434c <HAL_SPI_TransmitReceive+0x3c2>
 8004344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800434a:	d102      	bne.n	8004352 <HAL_SPI_TransmitReceive+0x3c8>
 800434c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434e:	2b00      	cmp	r3, #0
 8004350:	d103      	bne.n	800435a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004358:	e01c      	b.n	8004394 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800435e:	b29b      	uxth	r3, r3
 8004360:	2b00      	cmp	r3, #0
 8004362:	f47f af5b 	bne.w	800421c <HAL_SPI_TransmitReceive+0x292>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800436c:	b29b      	uxth	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	f47f af54 	bne.w	800421c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004374:	69fa      	ldr	r2, [r7, #28]
 8004376:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f000 fd31 	bl	8004de0 <SPI_EndRxTxTransaction>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d006      	beq.n	8004392 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2220      	movs	r2, #32
 800438e:	661a      	str	r2, [r3, #96]	; 0x60
 8004390:	e000      	b.n	8004394 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004392:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80043a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3728      	adds	r7, #40	; 0x28
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
 80043bc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80043be:	2300      	movs	r3, #0
 80043c0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d101      	bne.n	80043d0 <HAL_SPI_TransmitReceive_DMA+0x20>
 80043cc:	2302      	movs	r3, #2
 80043ce:	e16c      	b.n	80046aa <HAL_SPI_TransmitReceive_DMA+0x2fa>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80043de:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80043e6:	7dbb      	ldrb	r3, [r7, #22]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d00d      	beq.n	8004408 <HAL_SPI_TransmitReceive_DMA+0x58>
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043f2:	d106      	bne.n	8004402 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d102      	bne.n	8004402 <HAL_SPI_TransmitReceive_DMA+0x52>
 80043fc:	7dbb      	ldrb	r3, [r7, #22]
 80043fe:	2b04      	cmp	r3, #4
 8004400:	d002      	beq.n	8004408 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8004402:	2302      	movs	r3, #2
 8004404:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004406:	e14b      	b.n	80046a0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d005      	beq.n	800441a <HAL_SPI_TransmitReceive_DMA+0x6a>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d002      	beq.n	800441a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004414:	887b      	ldrh	r3, [r7, #2]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d102      	bne.n	8004420 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800441e:	e13f      	b.n	80046a0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b04      	cmp	r3, #4
 800442a:	d003      	beq.n	8004434 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2205      	movs	r2, #5
 8004430:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	887a      	ldrh	r2, [r7, #2]
 8004444:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	887a      	ldrh	r2, [r7, #2]
 800444a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	887a      	ldrh	r2, [r7, #2]
 8004456:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	887a      	ldrh	r2, [r7, #2]
 800445e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800447c:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004486:	d908      	bls.n	800449a <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685a      	ldr	r2, [r3, #4]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004496:	605a      	str	r2, [r3, #4]
 8004498:	e06f      	b.n	800457a <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80044a8:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044b4:	d126      	bne.n	8004504 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10f      	bne.n	80044e2 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80044d0:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	085b      	lsrs	r3, r3, #1
 80044da:	b29a      	uxth	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044e0:	e010      	b.n	8004504 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044f0:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	085b      	lsrs	r3, r3, #1
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	3301      	adds	r3, #1
 80044fe:	b29a      	uxth	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800450e:	d134      	bne.n	800457a <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	685a      	ldr	r2, [r3, #4]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800451e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004526:	b29b      	uxth	r3, r3
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	2b00      	cmp	r3, #0
 800452e:	d111      	bne.n	8004554 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685a      	ldr	r2, [r3, #4]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800453e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004546:	b29b      	uxth	r3, r3
 8004548:	085b      	lsrs	r3, r3, #1
 800454a:	b29a      	uxth	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004552:	e012      	b.n	800457a <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685a      	ldr	r2, [r3, #4]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004562:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800456a:	b29b      	uxth	r3, r3
 800456c:	085b      	lsrs	r3, r3, #1
 800456e:	b29b      	uxth	r3, r3
 8004570:	3301      	adds	r3, #1
 8004572:	b29a      	uxth	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b04      	cmp	r3, #4
 8004584:	d108      	bne.n	8004598 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800458a:	4a4a      	ldr	r2, [pc, #296]	; (80046b4 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800458c:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004592:	4a49      	ldr	r2, [pc, #292]	; (80046b8 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8004594:	62da      	str	r2, [r3, #44]	; 0x2c
 8004596:	e007      	b.n	80045a8 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800459c:	4a47      	ldr	r2, [pc, #284]	; (80046bc <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800459e:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a4:	4a46      	ldr	r2, [pc, #280]	; (80046c0 <HAL_SPI_TransmitReceive_DMA+0x310>)
 80045a6:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ac:	4a45      	ldr	r2, [pc, #276]	; (80046c4 <HAL_SPI_TransmitReceive_DMA+0x314>)
 80045ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b4:	2200      	movs	r2, #0
 80045b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	330c      	adds	r3, #12
 80045c2:	4619      	mov	r1, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045d0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80045d2:	f7fd fda3 	bl	800211c <HAL_DMA_Start_IT>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00c      	beq.n	80045f6 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045e0:	f043 0210 	orr.w	r2, r3, #16
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80045f4:	e054      	b.n	80046a0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	685a      	ldr	r2, [r3, #4]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f042 0201 	orr.w	r2, r2, #1
 8004604:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800460a:	2200      	movs	r2, #0
 800460c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004612:	2200      	movs	r2, #0
 8004614:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800461a:	2200      	movs	r2, #0
 800461c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004622:	2200      	movs	r2, #0
 8004624:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462e:	4619      	mov	r1, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	330c      	adds	r3, #12
 8004636:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800463c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800463e:	f7fd fd6d 	bl	800211c <HAL_DMA_Start_IT>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00c      	beq.n	8004662 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800464c:	f043 0210 	orr.w	r2, r3, #16
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8004660:	e01e      	b.n	80046a0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800466c:	2b40      	cmp	r3, #64	; 0x40
 800466e:	d007      	beq.n	8004680 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800467e:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f042 0220 	orr.w	r2, r2, #32
 800468e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	685a      	ldr	r2, [r3, #4]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f042 0202 	orr.w	r2, r2, #2
 800469e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80046a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3718      	adds	r7, #24
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	08004a51 	.word	0x08004a51
 80046b8:	08004919 	.word	0x08004919
 80046bc:	08004a6d 	.word	0x08004a6d
 80046c0:	080049c1 	.word	0x080049c1
 80046c4:	08004a89 	.word	0x08004a89

080046c8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b088      	sub	sp, #32
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	099b      	lsrs	r3, r3, #6
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d10f      	bne.n	800470c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00a      	beq.n	800470c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	099b      	lsrs	r3, r3, #6
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d004      	beq.n	800470c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	4798      	blx	r3
    return;
 800470a:	e0d7      	b.n	80048bc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	085b      	lsrs	r3, r3, #1
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00a      	beq.n	800472e <HAL_SPI_IRQHandler+0x66>
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	09db      	lsrs	r3, r3, #7
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	2b00      	cmp	r3, #0
 8004722:	d004      	beq.n	800472e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	4798      	blx	r3
    return;
 800472c:	e0c6      	b.n	80048bc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	095b      	lsrs	r3, r3, #5
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	d10c      	bne.n	8004754 <HAL_SPI_IRQHandler+0x8c>
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	099b      	lsrs	r3, r3, #6
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b00      	cmp	r3, #0
 8004744:	d106      	bne.n	8004754 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	0a1b      	lsrs	r3, r3, #8
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	f000 80b4 	beq.w	80048bc <HAL_SPI_IRQHandler+0x1f4>
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	095b      	lsrs	r3, r3, #5
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	2b00      	cmp	r3, #0
 800475e:	f000 80ad 	beq.w	80048bc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	099b      	lsrs	r3, r3, #6
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b00      	cmp	r3, #0
 800476c:	d023      	beq.n	80047b6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b03      	cmp	r3, #3
 8004778:	d011      	beq.n	800479e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800477e:	f043 0204 	orr.w	r2, r3, #4
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004786:	2300      	movs	r3, #0
 8004788:	617b      	str	r3, [r7, #20]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	617b      	str	r3, [r7, #20]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	617b      	str	r3, [r7, #20]
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	e00b      	b.n	80047b6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800479e:	2300      	movs	r3, #0
 80047a0:	613b      	str	r3, [r7, #16]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	613b      	str	r3, [r7, #16]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	613b      	str	r3, [r7, #16]
 80047b2:	693b      	ldr	r3, [r7, #16]
        return;
 80047b4:	e082      	b.n	80048bc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	095b      	lsrs	r3, r3, #5
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d014      	beq.n	80047ec <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047c6:	f043 0201 	orr.w	r2, r3, #1
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80047ce:	2300      	movs	r3, #0
 80047d0:	60fb      	str	r3, [r7, #12]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	60fb      	str	r3, [r7, #12]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047e8:	601a      	str	r2, [r3, #0]
 80047ea:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	0a1b      	lsrs	r3, r3, #8
 80047f0:	f003 0301 	and.w	r3, r3, #1
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00c      	beq.n	8004812 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047fc:	f043 0208 	orr.w	r2, r3, #8
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004804:	2300      	movs	r3, #0
 8004806:	60bb      	str	r3, [r7, #8]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	60bb      	str	r3, [r7, #8]
 8004810:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004816:	2b00      	cmp	r3, #0
 8004818:	d04f      	beq.n	80048ba <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004828:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d104      	bne.n	8004846 <HAL_SPI_IRQHandler+0x17e>
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	2b00      	cmp	r3, #0
 8004844:	d034      	beq.n	80048b0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	685a      	ldr	r2, [r3, #4]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 0203 	bic.w	r2, r2, #3
 8004854:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800485a:	2b00      	cmp	r3, #0
 800485c:	d011      	beq.n	8004882 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004862:	4a18      	ldr	r2, [pc, #96]	; (80048c4 <HAL_SPI_IRQHandler+0x1fc>)
 8004864:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800486a:	4618      	mov	r0, r3
 800486c:	f7fd fcb6 	bl	80021dc <HAL_DMA_Abort_IT>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d005      	beq.n	8004882 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800487a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004886:	2b00      	cmp	r3, #0
 8004888:	d016      	beq.n	80048b8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800488e:	4a0d      	ldr	r2, [pc, #52]	; (80048c4 <HAL_SPI_IRQHandler+0x1fc>)
 8004890:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004896:	4618      	mov	r0, r3
 8004898:	f7fd fca0 	bl	80021dc <HAL_DMA_Abort_IT>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00a      	beq.n	80048b8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80048ae:	e003      	b.n	80048b8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 f827 	bl	8004904 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80048b6:	e000      	b.n	80048ba <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80048b8:	bf00      	nop
    return;
 80048ba:	bf00      	nop
  }
}
 80048bc:	3720      	adds	r7, #32
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	08004ac9 	.word	0x08004ac9

080048c8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004924:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004926:	f7fd f9cd 	bl	8001cc4 <HAL_GetTick>
 800492a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0320 	and.w	r3, r3, #32
 8004936:	2b20      	cmp	r3, #32
 8004938:	d03c      	beq.n	80049b4 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f022 0220 	bic.w	r2, r2, #32
 8004948:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10d      	bne.n	800496e <SPI_DMAReceiveCplt+0x56>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800495a:	d108      	bne.n	800496e <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	685a      	ldr	r2, [r3, #4]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f022 0203 	bic.w	r2, r2, #3
 800496a:	605a      	str	r2, [r3, #4]
 800496c:	e007      	b.n	800497e <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	685a      	ldr	r2, [r3, #4]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f022 0201 	bic.w	r2, r2, #1
 800497c:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	2164      	movs	r1, #100	; 0x64
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f000 f9d4 	bl	8004d30 <SPI_EndRxTransaction>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d002      	beq.n	8004994 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2220      	movs	r2, #32
 8004992:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2200      	movs	r2, #0
 8004998:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d003      	beq.n	80049b4 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	f7ff ffa9 	bl	8004904 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80049b2:	e002      	b.n	80049ba <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f7ff ff87 	bl	80048c8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049cc:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049ce:	f7fd f979 	bl	8001cc4 <HAL_GetTick>
 80049d2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0320 	and.w	r3, r3, #32
 80049de:	2b20      	cmp	r3, #32
 80049e0:	d030      	beq.n	8004a44 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	685a      	ldr	r2, [r3, #4]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f022 0220 	bic.w	r2, r2, #32
 80049f0:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	2164      	movs	r1, #100	; 0x64
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f000 f9f2 	bl	8004de0 <SPI_EndRxTxTransaction>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d005      	beq.n	8004a0e <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a06:	f043 0220 	orr.w	r2, r3, #32
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	685a      	ldr	r2, [r3, #4]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 0203 	bic.w	r2, r2, #3
 8004a1c:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d003      	beq.n	8004a44 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f7ff ff61 	bl	8004904 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004a42:	e002      	b.n	8004a4a <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f7fc fe1f 	bl	8001688 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a5c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f7ff ff3c 	bl	80048dc <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004a64:	bf00      	nop
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a78:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f7ff ff38 	bl	80048f0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004a80:	bf00      	nop
 8004a82:	3710      	adds	r7, #16
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a94:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	685a      	ldr	r2, [r3, #4]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f022 0203 	bic.w	r2, r2, #3
 8004aa4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aaa:	f043 0210 	orr.w	r2, r3, #16
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f7ff ff22 	bl	8004904 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004ac0:	bf00      	nop
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f7ff ff0d 	bl	8004904 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004aea:	bf00      	nop
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
	...

08004af4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b088      	sub	sp, #32
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	603b      	str	r3, [r7, #0]
 8004b00:	4613      	mov	r3, r2
 8004b02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b04:	f7fd f8de 	bl	8001cc4 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0c:	1a9b      	subs	r3, r3, r2
 8004b0e:	683a      	ldr	r2, [r7, #0]
 8004b10:	4413      	add	r3, r2
 8004b12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b14:	f7fd f8d6 	bl	8001cc4 <HAL_GetTick>
 8004b18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b1a:	4b39      	ldr	r3, [pc, #228]	; (8004c00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	015b      	lsls	r3, r3, #5
 8004b20:	0d1b      	lsrs	r3, r3, #20
 8004b22:	69fa      	ldr	r2, [r7, #28]
 8004b24:	fb02 f303 	mul.w	r3, r2, r3
 8004b28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b2a:	e054      	b.n	8004bd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b32:	d050      	beq.n	8004bd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b34:	f7fd f8c6 	bl	8001cc4 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	69fa      	ldr	r2, [r7, #28]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d902      	bls.n	8004b4a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d13d      	bne.n	8004bc6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b62:	d111      	bne.n	8004b88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b6c:	d004      	beq.n	8004b78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b76:	d107      	bne.n	8004b88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b90:	d10f      	bne.n	8004bb2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ba0:	601a      	str	r2, [r3, #0]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bb0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e017      	b.n	8004bf6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d101      	bne.n	8004bd0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	689a      	ldr	r2, [r3, #8]
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	4013      	ands	r3, r2
 8004be0:	68ba      	ldr	r2, [r7, #8]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	bf0c      	ite	eq
 8004be6:	2301      	moveq	r3, #1
 8004be8:	2300      	movne	r3, #0
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	461a      	mov	r2, r3
 8004bee:	79fb      	ldrb	r3, [r7, #7]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d19b      	bne.n	8004b2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3720      	adds	r7, #32
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	20000000 	.word	0x20000000

08004c04 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b08a      	sub	sp, #40	; 0x28
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
 8004c10:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004c12:	2300      	movs	r3, #0
 8004c14:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004c16:	f7fd f855 	bl	8001cc4 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1e:	1a9b      	subs	r3, r3, r2
 8004c20:	683a      	ldr	r2, [r7, #0]
 8004c22:	4413      	add	r3, r2
 8004c24:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004c26:	f7fd f84d 	bl	8001cc4 <HAL_GetTick>
 8004c2a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	330c      	adds	r3, #12
 8004c32:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004c34:	4b3d      	ldr	r3, [pc, #244]	; (8004d2c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4413      	add	r3, r2
 8004c3e:	00da      	lsls	r2, r3, #3
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	0d1b      	lsrs	r3, r3, #20
 8004c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c46:	fb02 f303 	mul.w	r3, r2, r3
 8004c4a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004c4c:	e060      	b.n	8004d10 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004c54:	d107      	bne.n	8004c66 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d104      	bne.n	8004c66 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004c64:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c6c:	d050      	beq.n	8004d10 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c6e:	f7fd f829 	bl	8001cc4 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	6a3b      	ldr	r3, [r7, #32]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d902      	bls.n	8004c84 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d13d      	bne.n	8004d00 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c92:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c9c:	d111      	bne.n	8004cc2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ca6:	d004      	beq.n	8004cb2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cb0:	d107      	bne.n	8004cc2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cc0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cca:	d10f      	bne.n	8004cec <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cda:	601a      	str	r2, [r3, #0]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e010      	b.n	8004d22 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d101      	bne.n	8004d0a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004d06:	2300      	movs	r3, #0
 8004d08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	3b01      	subs	r3, #1
 8004d0e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	689a      	ldr	r2, [r3, #8]
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	4013      	ands	r3, r2
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d196      	bne.n	8004c4e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3728      	adds	r7, #40	; 0x28
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	20000000 	.word	0x20000000

08004d30 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b086      	sub	sp, #24
 8004d34:	af02      	add	r7, sp, #8
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d44:	d111      	bne.n	8004d6a <SPI_EndRxTransaction+0x3a>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d4e:	d004      	beq.n	8004d5a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d58:	d107      	bne.n	8004d6a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d68:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	2200      	movs	r2, #0
 8004d72:	2180      	movs	r1, #128	; 0x80
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f7ff febd 	bl	8004af4 <SPI_WaitFlagStateUntilTimeout>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d007      	beq.n	8004d90 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d84:	f043 0220 	orr.w	r2, r3, #32
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e023      	b.n	8004dd8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d98:	d11d      	bne.n	8004dd6 <SPI_EndRxTransaction+0xa6>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004da2:	d004      	beq.n	8004dae <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dac:	d113      	bne.n	8004dd6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	f7ff ff22 	bl	8004c04 <SPI_WaitFifoStateUntilTimeout>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d007      	beq.n	8004dd6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dca:	f043 0220 	orr.w	r2, r3, #32
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e000      	b.n	8004dd8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3710      	adds	r7, #16
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af02      	add	r7, sp, #8
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	9300      	str	r3, [sp, #0]
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f7ff ff03 	bl	8004c04 <SPI_WaitFifoStateUntilTimeout>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d007      	beq.n	8004e14 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e08:	f043 0220 	orr.w	r2, r3, #32
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e027      	b.n	8004e64 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	9300      	str	r3, [sp, #0]
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	2180      	movs	r1, #128	; 0x80
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f7ff fe68 	bl	8004af4 <SPI_WaitFlagStateUntilTimeout>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d007      	beq.n	8004e3a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e2e:	f043 0220 	orr.w	r2, r3, #32
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e014      	b.n	8004e64 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	9300      	str	r3, [sp, #0]
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f7ff fedc 	bl	8004c04 <SPI_WaitFifoStateUntilTimeout>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d007      	beq.n	8004e62 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e56:	f043 0220 	orr.w	r2, r3, #32
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e000      	b.n	8004e64 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e040      	b.n	8004f00 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d106      	bne.n	8004e94 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7fc fd9c 	bl	80019cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2224      	movs	r2, #36	; 0x24
 8004e98:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f022 0201 	bic.w	r2, r2, #1
 8004ea8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f8c0 	bl	8005030 <UART_SetConfig>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d101      	bne.n	8004eba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e022      	b.n	8004f00 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d002      	beq.n	8004ec8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 fb6c 	bl	80055a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	685a      	ldr	r2, [r3, #4]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ed6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	689a      	ldr	r2, [r3, #8]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ee6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f042 0201 	orr.w	r2, r2, #1
 8004ef6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 fbf3 	bl	80056e4 <UART_CheckIdleState>
 8004efe:	4603      	mov	r3, r0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3708      	adds	r7, #8
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b08a      	sub	sp, #40	; 0x28
 8004f0c:	af02      	add	r7, sp, #8
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	603b      	str	r3, [r7, #0]
 8004f14:	4613      	mov	r3, r2
 8004f16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f1c:	2b20      	cmp	r3, #32
 8004f1e:	f040 8082 	bne.w	8005026 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d002      	beq.n	8004f2e <HAL_UART_Transmit+0x26>
 8004f28:	88fb      	ldrh	r3, [r7, #6]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e07a      	b.n	8005028 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d101      	bne.n	8004f40 <HAL_UART_Transmit+0x38>
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	e073      	b.n	8005028 <HAL_UART_Transmit+0x120>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2221      	movs	r2, #33	; 0x21
 8004f54:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f56:	f7fc feb5 	bl	8001cc4 <HAL_GetTick>
 8004f5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	88fa      	ldrh	r2, [r7, #6]
 8004f60:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	88fa      	ldrh	r2, [r7, #6]
 8004f68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f74:	d108      	bne.n	8004f88 <HAL_UART_Transmit+0x80>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d104      	bne.n	8004f88 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	61bb      	str	r3, [r7, #24]
 8004f86:	e003      	b.n	8004f90 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004f98:	e02d      	b.n	8004ff6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	9300      	str	r3, [sp, #0]
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	2180      	movs	r1, #128	; 0x80
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f000 fbe6 	bl	8005776 <UART_WaitOnFlagUntilTimeout>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d001      	beq.n	8004fb4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e039      	b.n	8005028 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10b      	bne.n	8004fd2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	881a      	ldrh	r2, [r3, #0]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fc6:	b292      	uxth	r2, r2
 8004fc8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	3302      	adds	r3, #2
 8004fce:	61bb      	str	r3, [r7, #24]
 8004fd0:	e008      	b.n	8004fe4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	781a      	ldrb	r2, [r3, #0]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	b292      	uxth	r2, r2
 8004fdc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	3b01      	subs	r3, #1
 8004fee:	b29a      	uxth	r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1cb      	bne.n	8004f9a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	9300      	str	r3, [sp, #0]
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	2200      	movs	r2, #0
 800500a:	2140      	movs	r1, #64	; 0x40
 800500c:	68f8      	ldr	r0, [r7, #12]
 800500e:	f000 fbb2 	bl	8005776 <UART_WaitOnFlagUntilTimeout>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d001      	beq.n	800501c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e005      	b.n	8005028 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2220      	movs	r2, #32
 8005020:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005022:	2300      	movs	r3, #0
 8005024:	e000      	b.n	8005028 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005026:	2302      	movs	r3, #2
  }
}
 8005028:	4618      	mov	r0, r3
 800502a:	3720      	adds	r7, #32
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005034:	b08a      	sub	sp, #40	; 0x28
 8005036:	af00      	add	r7, sp, #0
 8005038:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800503a:	2300      	movs	r3, #0
 800503c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	689a      	ldr	r2, [r3, #8]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	431a      	orrs	r2, r3
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	431a      	orrs	r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	69db      	ldr	r3, [r3, #28]
 8005054:	4313      	orrs	r3, r2
 8005056:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	4ba4      	ldr	r3, [pc, #656]	; (80052f0 <UART_SetConfig+0x2c0>)
 8005060:	4013      	ands	r3, r2
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	6812      	ldr	r2, [r2, #0]
 8005066:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005068:	430b      	orrs	r3, r1
 800506a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	68da      	ldr	r2, [r3, #12]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	430a      	orrs	r2, r1
 8005080:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a99      	ldr	r2, [pc, #612]	; (80052f4 <UART_SetConfig+0x2c4>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d004      	beq.n	800509c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005098:	4313      	orrs	r3, r2
 800509a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ac:	430a      	orrs	r2, r1
 80050ae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a90      	ldr	r2, [pc, #576]	; (80052f8 <UART_SetConfig+0x2c8>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d126      	bne.n	8005108 <UART_SetConfig+0xd8>
 80050ba:	4b90      	ldr	r3, [pc, #576]	; (80052fc <UART_SetConfig+0x2cc>)
 80050bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c0:	f003 0303 	and.w	r3, r3, #3
 80050c4:	2b03      	cmp	r3, #3
 80050c6:	d81b      	bhi.n	8005100 <UART_SetConfig+0xd0>
 80050c8:	a201      	add	r2, pc, #4	; (adr r2, 80050d0 <UART_SetConfig+0xa0>)
 80050ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ce:	bf00      	nop
 80050d0:	080050e1 	.word	0x080050e1
 80050d4:	080050f1 	.word	0x080050f1
 80050d8:	080050e9 	.word	0x080050e9
 80050dc:	080050f9 	.word	0x080050f9
 80050e0:	2301      	movs	r3, #1
 80050e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050e6:	e116      	b.n	8005316 <UART_SetConfig+0x2e6>
 80050e8:	2302      	movs	r3, #2
 80050ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ee:	e112      	b.n	8005316 <UART_SetConfig+0x2e6>
 80050f0:	2304      	movs	r3, #4
 80050f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050f6:	e10e      	b.n	8005316 <UART_SetConfig+0x2e6>
 80050f8:	2308      	movs	r3, #8
 80050fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050fe:	e10a      	b.n	8005316 <UART_SetConfig+0x2e6>
 8005100:	2310      	movs	r3, #16
 8005102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005106:	e106      	b.n	8005316 <UART_SetConfig+0x2e6>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a7c      	ldr	r2, [pc, #496]	; (8005300 <UART_SetConfig+0x2d0>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d138      	bne.n	8005184 <UART_SetConfig+0x154>
 8005112:	4b7a      	ldr	r3, [pc, #488]	; (80052fc <UART_SetConfig+0x2cc>)
 8005114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005118:	f003 030c 	and.w	r3, r3, #12
 800511c:	2b0c      	cmp	r3, #12
 800511e:	d82d      	bhi.n	800517c <UART_SetConfig+0x14c>
 8005120:	a201      	add	r2, pc, #4	; (adr r2, 8005128 <UART_SetConfig+0xf8>)
 8005122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005126:	bf00      	nop
 8005128:	0800515d 	.word	0x0800515d
 800512c:	0800517d 	.word	0x0800517d
 8005130:	0800517d 	.word	0x0800517d
 8005134:	0800517d 	.word	0x0800517d
 8005138:	0800516d 	.word	0x0800516d
 800513c:	0800517d 	.word	0x0800517d
 8005140:	0800517d 	.word	0x0800517d
 8005144:	0800517d 	.word	0x0800517d
 8005148:	08005165 	.word	0x08005165
 800514c:	0800517d 	.word	0x0800517d
 8005150:	0800517d 	.word	0x0800517d
 8005154:	0800517d 	.word	0x0800517d
 8005158:	08005175 	.word	0x08005175
 800515c:	2300      	movs	r3, #0
 800515e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005162:	e0d8      	b.n	8005316 <UART_SetConfig+0x2e6>
 8005164:	2302      	movs	r3, #2
 8005166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800516a:	e0d4      	b.n	8005316 <UART_SetConfig+0x2e6>
 800516c:	2304      	movs	r3, #4
 800516e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005172:	e0d0      	b.n	8005316 <UART_SetConfig+0x2e6>
 8005174:	2308      	movs	r3, #8
 8005176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800517a:	e0cc      	b.n	8005316 <UART_SetConfig+0x2e6>
 800517c:	2310      	movs	r3, #16
 800517e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005182:	e0c8      	b.n	8005316 <UART_SetConfig+0x2e6>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a5e      	ldr	r2, [pc, #376]	; (8005304 <UART_SetConfig+0x2d4>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d125      	bne.n	80051da <UART_SetConfig+0x1aa>
 800518e:	4b5b      	ldr	r3, [pc, #364]	; (80052fc <UART_SetConfig+0x2cc>)
 8005190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005194:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005198:	2b30      	cmp	r3, #48	; 0x30
 800519a:	d016      	beq.n	80051ca <UART_SetConfig+0x19a>
 800519c:	2b30      	cmp	r3, #48	; 0x30
 800519e:	d818      	bhi.n	80051d2 <UART_SetConfig+0x1a2>
 80051a0:	2b20      	cmp	r3, #32
 80051a2:	d00a      	beq.n	80051ba <UART_SetConfig+0x18a>
 80051a4:	2b20      	cmp	r3, #32
 80051a6:	d814      	bhi.n	80051d2 <UART_SetConfig+0x1a2>
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d002      	beq.n	80051b2 <UART_SetConfig+0x182>
 80051ac:	2b10      	cmp	r3, #16
 80051ae:	d008      	beq.n	80051c2 <UART_SetConfig+0x192>
 80051b0:	e00f      	b.n	80051d2 <UART_SetConfig+0x1a2>
 80051b2:	2300      	movs	r3, #0
 80051b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051b8:	e0ad      	b.n	8005316 <UART_SetConfig+0x2e6>
 80051ba:	2302      	movs	r3, #2
 80051bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051c0:	e0a9      	b.n	8005316 <UART_SetConfig+0x2e6>
 80051c2:	2304      	movs	r3, #4
 80051c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051c8:	e0a5      	b.n	8005316 <UART_SetConfig+0x2e6>
 80051ca:	2308      	movs	r3, #8
 80051cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051d0:	e0a1      	b.n	8005316 <UART_SetConfig+0x2e6>
 80051d2:	2310      	movs	r3, #16
 80051d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051d8:	e09d      	b.n	8005316 <UART_SetConfig+0x2e6>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a4a      	ldr	r2, [pc, #296]	; (8005308 <UART_SetConfig+0x2d8>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d125      	bne.n	8005230 <UART_SetConfig+0x200>
 80051e4:	4b45      	ldr	r3, [pc, #276]	; (80052fc <UART_SetConfig+0x2cc>)
 80051e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80051ee:	2bc0      	cmp	r3, #192	; 0xc0
 80051f0:	d016      	beq.n	8005220 <UART_SetConfig+0x1f0>
 80051f2:	2bc0      	cmp	r3, #192	; 0xc0
 80051f4:	d818      	bhi.n	8005228 <UART_SetConfig+0x1f8>
 80051f6:	2b80      	cmp	r3, #128	; 0x80
 80051f8:	d00a      	beq.n	8005210 <UART_SetConfig+0x1e0>
 80051fa:	2b80      	cmp	r3, #128	; 0x80
 80051fc:	d814      	bhi.n	8005228 <UART_SetConfig+0x1f8>
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d002      	beq.n	8005208 <UART_SetConfig+0x1d8>
 8005202:	2b40      	cmp	r3, #64	; 0x40
 8005204:	d008      	beq.n	8005218 <UART_SetConfig+0x1e8>
 8005206:	e00f      	b.n	8005228 <UART_SetConfig+0x1f8>
 8005208:	2300      	movs	r3, #0
 800520a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800520e:	e082      	b.n	8005316 <UART_SetConfig+0x2e6>
 8005210:	2302      	movs	r3, #2
 8005212:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005216:	e07e      	b.n	8005316 <UART_SetConfig+0x2e6>
 8005218:	2304      	movs	r3, #4
 800521a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800521e:	e07a      	b.n	8005316 <UART_SetConfig+0x2e6>
 8005220:	2308      	movs	r3, #8
 8005222:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005226:	e076      	b.n	8005316 <UART_SetConfig+0x2e6>
 8005228:	2310      	movs	r3, #16
 800522a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800522e:	e072      	b.n	8005316 <UART_SetConfig+0x2e6>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a35      	ldr	r2, [pc, #212]	; (800530c <UART_SetConfig+0x2dc>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d12a      	bne.n	8005290 <UART_SetConfig+0x260>
 800523a:	4b30      	ldr	r3, [pc, #192]	; (80052fc <UART_SetConfig+0x2cc>)
 800523c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005240:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005244:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005248:	d01a      	beq.n	8005280 <UART_SetConfig+0x250>
 800524a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800524e:	d81b      	bhi.n	8005288 <UART_SetConfig+0x258>
 8005250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005254:	d00c      	beq.n	8005270 <UART_SetConfig+0x240>
 8005256:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800525a:	d815      	bhi.n	8005288 <UART_SetConfig+0x258>
 800525c:	2b00      	cmp	r3, #0
 800525e:	d003      	beq.n	8005268 <UART_SetConfig+0x238>
 8005260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005264:	d008      	beq.n	8005278 <UART_SetConfig+0x248>
 8005266:	e00f      	b.n	8005288 <UART_SetConfig+0x258>
 8005268:	2300      	movs	r3, #0
 800526a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800526e:	e052      	b.n	8005316 <UART_SetConfig+0x2e6>
 8005270:	2302      	movs	r3, #2
 8005272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005276:	e04e      	b.n	8005316 <UART_SetConfig+0x2e6>
 8005278:	2304      	movs	r3, #4
 800527a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800527e:	e04a      	b.n	8005316 <UART_SetConfig+0x2e6>
 8005280:	2308      	movs	r3, #8
 8005282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005286:	e046      	b.n	8005316 <UART_SetConfig+0x2e6>
 8005288:	2310      	movs	r3, #16
 800528a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800528e:	e042      	b.n	8005316 <UART_SetConfig+0x2e6>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a17      	ldr	r2, [pc, #92]	; (80052f4 <UART_SetConfig+0x2c4>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d13a      	bne.n	8005310 <UART_SetConfig+0x2e0>
 800529a:	4b18      	ldr	r3, [pc, #96]	; (80052fc <UART_SetConfig+0x2cc>)
 800529c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80052a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052a8:	d01a      	beq.n	80052e0 <UART_SetConfig+0x2b0>
 80052aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052ae:	d81b      	bhi.n	80052e8 <UART_SetConfig+0x2b8>
 80052b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052b4:	d00c      	beq.n	80052d0 <UART_SetConfig+0x2a0>
 80052b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052ba:	d815      	bhi.n	80052e8 <UART_SetConfig+0x2b8>
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d003      	beq.n	80052c8 <UART_SetConfig+0x298>
 80052c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052c4:	d008      	beq.n	80052d8 <UART_SetConfig+0x2a8>
 80052c6:	e00f      	b.n	80052e8 <UART_SetConfig+0x2b8>
 80052c8:	2300      	movs	r3, #0
 80052ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ce:	e022      	b.n	8005316 <UART_SetConfig+0x2e6>
 80052d0:	2302      	movs	r3, #2
 80052d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052d6:	e01e      	b.n	8005316 <UART_SetConfig+0x2e6>
 80052d8:	2304      	movs	r3, #4
 80052da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052de:	e01a      	b.n	8005316 <UART_SetConfig+0x2e6>
 80052e0:	2308      	movs	r3, #8
 80052e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052e6:	e016      	b.n	8005316 <UART_SetConfig+0x2e6>
 80052e8:	2310      	movs	r3, #16
 80052ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ee:	e012      	b.n	8005316 <UART_SetConfig+0x2e6>
 80052f0:	efff69f3 	.word	0xefff69f3
 80052f4:	40008000 	.word	0x40008000
 80052f8:	40013800 	.word	0x40013800
 80052fc:	40021000 	.word	0x40021000
 8005300:	40004400 	.word	0x40004400
 8005304:	40004800 	.word	0x40004800
 8005308:	40004c00 	.word	0x40004c00
 800530c:	40005000 	.word	0x40005000
 8005310:	2310      	movs	r3, #16
 8005312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a9f      	ldr	r2, [pc, #636]	; (8005598 <UART_SetConfig+0x568>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d17a      	bne.n	8005416 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005320:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005324:	2b08      	cmp	r3, #8
 8005326:	d824      	bhi.n	8005372 <UART_SetConfig+0x342>
 8005328:	a201      	add	r2, pc, #4	; (adr r2, 8005330 <UART_SetConfig+0x300>)
 800532a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800532e:	bf00      	nop
 8005330:	08005355 	.word	0x08005355
 8005334:	08005373 	.word	0x08005373
 8005338:	0800535d 	.word	0x0800535d
 800533c:	08005373 	.word	0x08005373
 8005340:	08005363 	.word	0x08005363
 8005344:	08005373 	.word	0x08005373
 8005348:	08005373 	.word	0x08005373
 800534c:	08005373 	.word	0x08005373
 8005350:	0800536b 	.word	0x0800536b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005354:	f7fe f82e 	bl	80033b4 <HAL_RCC_GetPCLK1Freq>
 8005358:	61f8      	str	r0, [r7, #28]
        break;
 800535a:	e010      	b.n	800537e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800535c:	4b8f      	ldr	r3, [pc, #572]	; (800559c <UART_SetConfig+0x56c>)
 800535e:	61fb      	str	r3, [r7, #28]
        break;
 8005360:	e00d      	b.n	800537e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005362:	f7fd ff8f 	bl	8003284 <HAL_RCC_GetSysClockFreq>
 8005366:	61f8      	str	r0, [r7, #28]
        break;
 8005368:	e009      	b.n	800537e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800536a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800536e:	61fb      	str	r3, [r7, #28]
        break;
 8005370:	e005      	b.n	800537e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005372:	2300      	movs	r3, #0
 8005374:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800537c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	2b00      	cmp	r3, #0
 8005382:	f000 80fb 	beq.w	800557c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	685a      	ldr	r2, [r3, #4]
 800538a:	4613      	mov	r3, r2
 800538c:	005b      	lsls	r3, r3, #1
 800538e:	4413      	add	r3, r2
 8005390:	69fa      	ldr	r2, [r7, #28]
 8005392:	429a      	cmp	r2, r3
 8005394:	d305      	bcc.n	80053a2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800539c:	69fa      	ldr	r2, [r7, #28]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d903      	bls.n	80053aa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80053a8:	e0e8      	b.n	800557c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	2200      	movs	r2, #0
 80053ae:	461c      	mov	r4, r3
 80053b0:	4615      	mov	r5, r2
 80053b2:	f04f 0200 	mov.w	r2, #0
 80053b6:	f04f 0300 	mov.w	r3, #0
 80053ba:	022b      	lsls	r3, r5, #8
 80053bc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80053c0:	0222      	lsls	r2, r4, #8
 80053c2:	68f9      	ldr	r1, [r7, #12]
 80053c4:	6849      	ldr	r1, [r1, #4]
 80053c6:	0849      	lsrs	r1, r1, #1
 80053c8:	2000      	movs	r0, #0
 80053ca:	4688      	mov	r8, r1
 80053cc:	4681      	mov	r9, r0
 80053ce:	eb12 0a08 	adds.w	sl, r2, r8
 80053d2:	eb43 0b09 	adc.w	fp, r3, r9
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	603b      	str	r3, [r7, #0]
 80053de:	607a      	str	r2, [r7, #4]
 80053e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053e4:	4650      	mov	r0, sl
 80053e6:	4659      	mov	r1, fp
 80053e8:	f7fb fbde 	bl	8000ba8 <__aeabi_uldivmod>
 80053ec:	4602      	mov	r2, r0
 80053ee:	460b      	mov	r3, r1
 80053f0:	4613      	mov	r3, r2
 80053f2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053fa:	d308      	bcc.n	800540e <UART_SetConfig+0x3de>
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005402:	d204      	bcs.n	800540e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	69ba      	ldr	r2, [r7, #24]
 800540a:	60da      	str	r2, [r3, #12]
 800540c:	e0b6      	b.n	800557c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005414:	e0b2      	b.n	800557c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	69db      	ldr	r3, [r3, #28]
 800541a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800541e:	d15e      	bne.n	80054de <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005420:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005424:	2b08      	cmp	r3, #8
 8005426:	d828      	bhi.n	800547a <UART_SetConfig+0x44a>
 8005428:	a201      	add	r2, pc, #4	; (adr r2, 8005430 <UART_SetConfig+0x400>)
 800542a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800542e:	bf00      	nop
 8005430:	08005455 	.word	0x08005455
 8005434:	0800545d 	.word	0x0800545d
 8005438:	08005465 	.word	0x08005465
 800543c:	0800547b 	.word	0x0800547b
 8005440:	0800546b 	.word	0x0800546b
 8005444:	0800547b 	.word	0x0800547b
 8005448:	0800547b 	.word	0x0800547b
 800544c:	0800547b 	.word	0x0800547b
 8005450:	08005473 	.word	0x08005473
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005454:	f7fd ffae 	bl	80033b4 <HAL_RCC_GetPCLK1Freq>
 8005458:	61f8      	str	r0, [r7, #28]
        break;
 800545a:	e014      	b.n	8005486 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800545c:	f7fd ffc0 	bl	80033e0 <HAL_RCC_GetPCLK2Freq>
 8005460:	61f8      	str	r0, [r7, #28]
        break;
 8005462:	e010      	b.n	8005486 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005464:	4b4d      	ldr	r3, [pc, #308]	; (800559c <UART_SetConfig+0x56c>)
 8005466:	61fb      	str	r3, [r7, #28]
        break;
 8005468:	e00d      	b.n	8005486 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800546a:	f7fd ff0b 	bl	8003284 <HAL_RCC_GetSysClockFreq>
 800546e:	61f8      	str	r0, [r7, #28]
        break;
 8005470:	e009      	b.n	8005486 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005472:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005476:	61fb      	str	r3, [r7, #28]
        break;
 8005478:	e005      	b.n	8005486 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800547a:	2300      	movs	r3, #0
 800547c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005484:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d077      	beq.n	800557c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	005a      	lsls	r2, r3, #1
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	085b      	lsrs	r3, r3, #1
 8005496:	441a      	add	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	fbb2 f3f3 	udiv	r3, r2, r3
 80054a0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	2b0f      	cmp	r3, #15
 80054a6:	d916      	bls.n	80054d6 <UART_SetConfig+0x4a6>
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054ae:	d212      	bcs.n	80054d6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	f023 030f 	bic.w	r3, r3, #15
 80054b8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	085b      	lsrs	r3, r3, #1
 80054be:	b29b      	uxth	r3, r3
 80054c0:	f003 0307 	and.w	r3, r3, #7
 80054c4:	b29a      	uxth	r2, r3
 80054c6:	8afb      	ldrh	r3, [r7, #22]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	8afa      	ldrh	r2, [r7, #22]
 80054d2:	60da      	str	r2, [r3, #12]
 80054d4:	e052      	b.n	800557c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80054dc:	e04e      	b.n	800557c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054e2:	2b08      	cmp	r3, #8
 80054e4:	d827      	bhi.n	8005536 <UART_SetConfig+0x506>
 80054e6:	a201      	add	r2, pc, #4	; (adr r2, 80054ec <UART_SetConfig+0x4bc>)
 80054e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ec:	08005511 	.word	0x08005511
 80054f0:	08005519 	.word	0x08005519
 80054f4:	08005521 	.word	0x08005521
 80054f8:	08005537 	.word	0x08005537
 80054fc:	08005527 	.word	0x08005527
 8005500:	08005537 	.word	0x08005537
 8005504:	08005537 	.word	0x08005537
 8005508:	08005537 	.word	0x08005537
 800550c:	0800552f 	.word	0x0800552f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005510:	f7fd ff50 	bl	80033b4 <HAL_RCC_GetPCLK1Freq>
 8005514:	61f8      	str	r0, [r7, #28]
        break;
 8005516:	e014      	b.n	8005542 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005518:	f7fd ff62 	bl	80033e0 <HAL_RCC_GetPCLK2Freq>
 800551c:	61f8      	str	r0, [r7, #28]
        break;
 800551e:	e010      	b.n	8005542 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005520:	4b1e      	ldr	r3, [pc, #120]	; (800559c <UART_SetConfig+0x56c>)
 8005522:	61fb      	str	r3, [r7, #28]
        break;
 8005524:	e00d      	b.n	8005542 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005526:	f7fd fead 	bl	8003284 <HAL_RCC_GetSysClockFreq>
 800552a:	61f8      	str	r0, [r7, #28]
        break;
 800552c:	e009      	b.n	8005542 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800552e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005532:	61fb      	str	r3, [r7, #28]
        break;
 8005534:	e005      	b.n	8005542 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005536:	2300      	movs	r3, #0
 8005538:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005540:	bf00      	nop
    }

    if (pclk != 0U)
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d019      	beq.n	800557c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	085a      	lsrs	r2, r3, #1
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	441a      	add	r2, r3
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	fbb2 f3f3 	udiv	r3, r2, r3
 800555a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	2b0f      	cmp	r3, #15
 8005560:	d909      	bls.n	8005576 <UART_SetConfig+0x546>
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005568:	d205      	bcs.n	8005576 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	b29a      	uxth	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	60da      	str	r2, [r3, #12]
 8005574:	e002      	b.n	800557c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005588:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800558c:	4618      	mov	r0, r3
 800558e:	3728      	adds	r7, #40	; 0x28
 8005590:	46bd      	mov	sp, r7
 8005592:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005596:	bf00      	nop
 8005598:	40008000 	.word	0x40008000
 800559c:	00f42400 	.word	0x00f42400

080055a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00a      	beq.n	80055ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	430a      	orrs	r2, r1
 80055c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ce:	f003 0302 	and.w	r3, r3, #2
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d00a      	beq.n	80055ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	430a      	orrs	r2, r1
 80055ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f0:	f003 0304 	and.w	r3, r3, #4
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00a      	beq.n	800560e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	430a      	orrs	r2, r1
 800560c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005612:	f003 0308 	and.w	r3, r3, #8
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00a      	beq.n	8005630 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	430a      	orrs	r2, r1
 800562e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005634:	f003 0310 	and.w	r3, r3, #16
 8005638:	2b00      	cmp	r3, #0
 800563a:	d00a      	beq.n	8005652 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	430a      	orrs	r2, r1
 8005650:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005656:	f003 0320 	and.w	r3, r3, #32
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00a      	beq.n	8005674 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	430a      	orrs	r2, r1
 8005672:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800567c:	2b00      	cmp	r3, #0
 800567e:	d01a      	beq.n	80056b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	430a      	orrs	r2, r1
 8005694:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800569e:	d10a      	bne.n	80056b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	430a      	orrs	r2, r1
 80056b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00a      	beq.n	80056d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	430a      	orrs	r2, r1
 80056d6:	605a      	str	r2, [r3, #4]
  }
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b086      	sub	sp, #24
 80056e8:	af02      	add	r7, sp, #8
 80056ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056f4:	f7fc fae6 	bl	8001cc4 <HAL_GetTick>
 80056f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0308 	and.w	r3, r3, #8
 8005704:	2b08      	cmp	r3, #8
 8005706:	d10e      	bne.n	8005726 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005708:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800570c:	9300      	str	r3, [sp, #0]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 f82d 	bl	8005776 <UART_WaitOnFlagUntilTimeout>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e023      	b.n	800576e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0304 	and.w	r3, r3, #4
 8005730:	2b04      	cmp	r3, #4
 8005732:	d10e      	bne.n	8005752 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005734:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005738:	9300      	str	r3, [sp, #0]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f817 	bl	8005776 <UART_WaitOnFlagUntilTimeout>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d001      	beq.n	8005752 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e00d      	b.n	800576e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2220      	movs	r2, #32
 8005756:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2220      	movs	r2, #32
 800575c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3710      	adds	r7, #16
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}

08005776 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005776:	b580      	push	{r7, lr}
 8005778:	b09c      	sub	sp, #112	; 0x70
 800577a:	af00      	add	r7, sp, #0
 800577c:	60f8      	str	r0, [r7, #12]
 800577e:	60b9      	str	r1, [r7, #8]
 8005780:	603b      	str	r3, [r7, #0]
 8005782:	4613      	mov	r3, r2
 8005784:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005786:	e0a5      	b.n	80058d4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005788:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800578a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800578e:	f000 80a1 	beq.w	80058d4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005792:	f7fc fa97 	bl	8001cc4 <HAL_GetTick>
 8005796:	4602      	mov	r2, r0
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800579e:	429a      	cmp	r2, r3
 80057a0:	d302      	bcc.n	80057a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80057a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d13e      	bne.n	8005826 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057b0:	e853 3f00 	ldrex	r3, [r3]
 80057b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80057b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057bc:	667b      	str	r3, [r7, #100]	; 0x64
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	461a      	mov	r2, r3
 80057c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057c8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80057cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80057ce:	e841 2300 	strex	r3, r2, [r1]
 80057d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80057d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1e6      	bne.n	80057a8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	3308      	adds	r3, #8
 80057e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057e4:	e853 3f00 	ldrex	r3, [r3]
 80057e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ec:	f023 0301 	bic.w	r3, r3, #1
 80057f0:	663b      	str	r3, [r7, #96]	; 0x60
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	3308      	adds	r3, #8
 80057f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80057fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80057fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005800:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005802:	e841 2300 	strex	r3, r2, [r1]
 8005806:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1e5      	bne.n	80057da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2220      	movs	r2, #32
 8005812:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2220      	movs	r2, #32
 8005818:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e067      	b.n	80058f6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 0304 	and.w	r3, r3, #4
 8005830:	2b00      	cmp	r3, #0
 8005832:	d04f      	beq.n	80058d4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	69db      	ldr	r3, [r3, #28]
 800583a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800583e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005842:	d147      	bne.n	80058d4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800584c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005856:	e853 3f00 	ldrex	r3, [r3]
 800585a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800585c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005862:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	461a      	mov	r2, r3
 800586a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800586c:	637b      	str	r3, [r7, #52]	; 0x34
 800586e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005870:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005872:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005874:	e841 2300 	strex	r3, r2, [r1]
 8005878:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800587a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1e6      	bne.n	800584e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	3308      	adds	r3, #8
 8005886:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	e853 3f00 	ldrex	r3, [r3]
 800588e:	613b      	str	r3, [r7, #16]
   return(result);
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	f023 0301 	bic.w	r3, r3, #1
 8005896:	66bb      	str	r3, [r7, #104]	; 0x68
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	3308      	adds	r3, #8
 800589e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80058a0:	623a      	str	r2, [r7, #32]
 80058a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a4:	69f9      	ldr	r1, [r7, #28]
 80058a6:	6a3a      	ldr	r2, [r7, #32]
 80058a8:	e841 2300 	strex	r3, r2, [r1]
 80058ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1e5      	bne.n	8005880 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2220      	movs	r2, #32
 80058b8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2220      	movs	r2, #32
 80058be:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2220      	movs	r2, #32
 80058c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e010      	b.n	80058f6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	69da      	ldr	r2, [r3, #28]
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	4013      	ands	r3, r2
 80058de:	68ba      	ldr	r2, [r7, #8]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	bf0c      	ite	eq
 80058e4:	2301      	moveq	r3, #1
 80058e6:	2300      	movne	r3, #0
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	461a      	mov	r2, r3
 80058ec:	79fb      	ldrb	r3, [r7, #7]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	f43f af4a 	beq.w	8005788 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3770      	adds	r7, #112	; 0x70
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
	...

08005900 <__errno>:
 8005900:	4b01      	ldr	r3, [pc, #4]	; (8005908 <__errno+0x8>)
 8005902:	6818      	ldr	r0, [r3, #0]
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	2000000c 	.word	0x2000000c

0800590c <__libc_init_array>:
 800590c:	b570      	push	{r4, r5, r6, lr}
 800590e:	4d0d      	ldr	r5, [pc, #52]	; (8005944 <__libc_init_array+0x38>)
 8005910:	4c0d      	ldr	r4, [pc, #52]	; (8005948 <__libc_init_array+0x3c>)
 8005912:	1b64      	subs	r4, r4, r5
 8005914:	10a4      	asrs	r4, r4, #2
 8005916:	2600      	movs	r6, #0
 8005918:	42a6      	cmp	r6, r4
 800591a:	d109      	bne.n	8005930 <__libc_init_array+0x24>
 800591c:	4d0b      	ldr	r5, [pc, #44]	; (800594c <__libc_init_array+0x40>)
 800591e:	4c0c      	ldr	r4, [pc, #48]	; (8005950 <__libc_init_array+0x44>)
 8005920:	f002 ff02 	bl	8008728 <_init>
 8005924:	1b64      	subs	r4, r4, r5
 8005926:	10a4      	asrs	r4, r4, #2
 8005928:	2600      	movs	r6, #0
 800592a:	42a6      	cmp	r6, r4
 800592c:	d105      	bne.n	800593a <__libc_init_array+0x2e>
 800592e:	bd70      	pop	{r4, r5, r6, pc}
 8005930:	f855 3b04 	ldr.w	r3, [r5], #4
 8005934:	4798      	blx	r3
 8005936:	3601      	adds	r6, #1
 8005938:	e7ee      	b.n	8005918 <__libc_init_array+0xc>
 800593a:	f855 3b04 	ldr.w	r3, [r5], #4
 800593e:	4798      	blx	r3
 8005940:	3601      	adds	r6, #1
 8005942:	e7f2      	b.n	800592a <__libc_init_array+0x1e>
 8005944:	08008bd4 	.word	0x08008bd4
 8005948:	08008bd4 	.word	0x08008bd4
 800594c:	08008bd4 	.word	0x08008bd4
 8005950:	08008bd8 	.word	0x08008bd8

08005954 <memset>:
 8005954:	4402      	add	r2, r0
 8005956:	4603      	mov	r3, r0
 8005958:	4293      	cmp	r3, r2
 800595a:	d100      	bne.n	800595e <memset+0xa>
 800595c:	4770      	bx	lr
 800595e:	f803 1b01 	strb.w	r1, [r3], #1
 8005962:	e7f9      	b.n	8005958 <memset+0x4>

08005964 <__cvt>:
 8005964:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005968:	ec55 4b10 	vmov	r4, r5, d0
 800596c:	2d00      	cmp	r5, #0
 800596e:	460e      	mov	r6, r1
 8005970:	4619      	mov	r1, r3
 8005972:	462b      	mov	r3, r5
 8005974:	bfbb      	ittet	lt
 8005976:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800597a:	461d      	movlt	r5, r3
 800597c:	2300      	movge	r3, #0
 800597e:	232d      	movlt	r3, #45	; 0x2d
 8005980:	700b      	strb	r3, [r1, #0]
 8005982:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005984:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005988:	4691      	mov	r9, r2
 800598a:	f023 0820 	bic.w	r8, r3, #32
 800598e:	bfbc      	itt	lt
 8005990:	4622      	movlt	r2, r4
 8005992:	4614      	movlt	r4, r2
 8005994:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005998:	d005      	beq.n	80059a6 <__cvt+0x42>
 800599a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800599e:	d100      	bne.n	80059a2 <__cvt+0x3e>
 80059a0:	3601      	adds	r6, #1
 80059a2:	2102      	movs	r1, #2
 80059a4:	e000      	b.n	80059a8 <__cvt+0x44>
 80059a6:	2103      	movs	r1, #3
 80059a8:	ab03      	add	r3, sp, #12
 80059aa:	9301      	str	r3, [sp, #4]
 80059ac:	ab02      	add	r3, sp, #8
 80059ae:	9300      	str	r3, [sp, #0]
 80059b0:	ec45 4b10 	vmov	d0, r4, r5
 80059b4:	4653      	mov	r3, sl
 80059b6:	4632      	mov	r2, r6
 80059b8:	f000 fcea 	bl	8006390 <_dtoa_r>
 80059bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80059c0:	4607      	mov	r7, r0
 80059c2:	d102      	bne.n	80059ca <__cvt+0x66>
 80059c4:	f019 0f01 	tst.w	r9, #1
 80059c8:	d022      	beq.n	8005a10 <__cvt+0xac>
 80059ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80059ce:	eb07 0906 	add.w	r9, r7, r6
 80059d2:	d110      	bne.n	80059f6 <__cvt+0x92>
 80059d4:	783b      	ldrb	r3, [r7, #0]
 80059d6:	2b30      	cmp	r3, #48	; 0x30
 80059d8:	d10a      	bne.n	80059f0 <__cvt+0x8c>
 80059da:	2200      	movs	r2, #0
 80059dc:	2300      	movs	r3, #0
 80059de:	4620      	mov	r0, r4
 80059e0:	4629      	mov	r1, r5
 80059e2:	f7fb f871 	bl	8000ac8 <__aeabi_dcmpeq>
 80059e6:	b918      	cbnz	r0, 80059f0 <__cvt+0x8c>
 80059e8:	f1c6 0601 	rsb	r6, r6, #1
 80059ec:	f8ca 6000 	str.w	r6, [sl]
 80059f0:	f8da 3000 	ldr.w	r3, [sl]
 80059f4:	4499      	add	r9, r3
 80059f6:	2200      	movs	r2, #0
 80059f8:	2300      	movs	r3, #0
 80059fa:	4620      	mov	r0, r4
 80059fc:	4629      	mov	r1, r5
 80059fe:	f7fb f863 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a02:	b108      	cbz	r0, 8005a08 <__cvt+0xa4>
 8005a04:	f8cd 900c 	str.w	r9, [sp, #12]
 8005a08:	2230      	movs	r2, #48	; 0x30
 8005a0a:	9b03      	ldr	r3, [sp, #12]
 8005a0c:	454b      	cmp	r3, r9
 8005a0e:	d307      	bcc.n	8005a20 <__cvt+0xbc>
 8005a10:	9b03      	ldr	r3, [sp, #12]
 8005a12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a14:	1bdb      	subs	r3, r3, r7
 8005a16:	4638      	mov	r0, r7
 8005a18:	6013      	str	r3, [r2, #0]
 8005a1a:	b004      	add	sp, #16
 8005a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a20:	1c59      	adds	r1, r3, #1
 8005a22:	9103      	str	r1, [sp, #12]
 8005a24:	701a      	strb	r2, [r3, #0]
 8005a26:	e7f0      	b.n	8005a0a <__cvt+0xa6>

08005a28 <__exponent>:
 8005a28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2900      	cmp	r1, #0
 8005a2e:	bfb8      	it	lt
 8005a30:	4249      	neglt	r1, r1
 8005a32:	f803 2b02 	strb.w	r2, [r3], #2
 8005a36:	bfb4      	ite	lt
 8005a38:	222d      	movlt	r2, #45	; 0x2d
 8005a3a:	222b      	movge	r2, #43	; 0x2b
 8005a3c:	2909      	cmp	r1, #9
 8005a3e:	7042      	strb	r2, [r0, #1]
 8005a40:	dd2a      	ble.n	8005a98 <__exponent+0x70>
 8005a42:	f10d 0407 	add.w	r4, sp, #7
 8005a46:	46a4      	mov	ip, r4
 8005a48:	270a      	movs	r7, #10
 8005a4a:	46a6      	mov	lr, r4
 8005a4c:	460a      	mov	r2, r1
 8005a4e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005a52:	fb07 1516 	mls	r5, r7, r6, r1
 8005a56:	3530      	adds	r5, #48	; 0x30
 8005a58:	2a63      	cmp	r2, #99	; 0x63
 8005a5a:	f104 34ff 	add.w	r4, r4, #4294967295
 8005a5e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005a62:	4631      	mov	r1, r6
 8005a64:	dcf1      	bgt.n	8005a4a <__exponent+0x22>
 8005a66:	3130      	adds	r1, #48	; 0x30
 8005a68:	f1ae 0502 	sub.w	r5, lr, #2
 8005a6c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005a70:	1c44      	adds	r4, r0, #1
 8005a72:	4629      	mov	r1, r5
 8005a74:	4561      	cmp	r1, ip
 8005a76:	d30a      	bcc.n	8005a8e <__exponent+0x66>
 8005a78:	f10d 0209 	add.w	r2, sp, #9
 8005a7c:	eba2 020e 	sub.w	r2, r2, lr
 8005a80:	4565      	cmp	r5, ip
 8005a82:	bf88      	it	hi
 8005a84:	2200      	movhi	r2, #0
 8005a86:	4413      	add	r3, r2
 8005a88:	1a18      	subs	r0, r3, r0
 8005a8a:	b003      	add	sp, #12
 8005a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a92:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005a96:	e7ed      	b.n	8005a74 <__exponent+0x4c>
 8005a98:	2330      	movs	r3, #48	; 0x30
 8005a9a:	3130      	adds	r1, #48	; 0x30
 8005a9c:	7083      	strb	r3, [r0, #2]
 8005a9e:	70c1      	strb	r1, [r0, #3]
 8005aa0:	1d03      	adds	r3, r0, #4
 8005aa2:	e7f1      	b.n	8005a88 <__exponent+0x60>

08005aa4 <_printf_float>:
 8005aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aa8:	ed2d 8b02 	vpush	{d8}
 8005aac:	b08d      	sub	sp, #52	; 0x34
 8005aae:	460c      	mov	r4, r1
 8005ab0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005ab4:	4616      	mov	r6, r2
 8005ab6:	461f      	mov	r7, r3
 8005ab8:	4605      	mov	r5, r0
 8005aba:	f001 fa57 	bl	8006f6c <_localeconv_r>
 8005abe:	f8d0 a000 	ldr.w	sl, [r0]
 8005ac2:	4650      	mov	r0, sl
 8005ac4:	f7fa fb84 	bl	80001d0 <strlen>
 8005ac8:	2300      	movs	r3, #0
 8005aca:	930a      	str	r3, [sp, #40]	; 0x28
 8005acc:	6823      	ldr	r3, [r4, #0]
 8005ace:	9305      	str	r3, [sp, #20]
 8005ad0:	f8d8 3000 	ldr.w	r3, [r8]
 8005ad4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005ad8:	3307      	adds	r3, #7
 8005ada:	f023 0307 	bic.w	r3, r3, #7
 8005ade:	f103 0208 	add.w	r2, r3, #8
 8005ae2:	f8c8 2000 	str.w	r2, [r8]
 8005ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005aee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005af2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005af6:	9307      	str	r3, [sp, #28]
 8005af8:	f8cd 8018 	str.w	r8, [sp, #24]
 8005afc:	ee08 0a10 	vmov	s16, r0
 8005b00:	4b9f      	ldr	r3, [pc, #636]	; (8005d80 <_printf_float+0x2dc>)
 8005b02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b06:	f04f 32ff 	mov.w	r2, #4294967295
 8005b0a:	f7fb f80f 	bl	8000b2c <__aeabi_dcmpun>
 8005b0e:	bb88      	cbnz	r0, 8005b74 <_printf_float+0xd0>
 8005b10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b14:	4b9a      	ldr	r3, [pc, #616]	; (8005d80 <_printf_float+0x2dc>)
 8005b16:	f04f 32ff 	mov.w	r2, #4294967295
 8005b1a:	f7fa ffe9 	bl	8000af0 <__aeabi_dcmple>
 8005b1e:	bb48      	cbnz	r0, 8005b74 <_printf_float+0xd0>
 8005b20:	2200      	movs	r2, #0
 8005b22:	2300      	movs	r3, #0
 8005b24:	4640      	mov	r0, r8
 8005b26:	4649      	mov	r1, r9
 8005b28:	f7fa ffd8 	bl	8000adc <__aeabi_dcmplt>
 8005b2c:	b110      	cbz	r0, 8005b34 <_printf_float+0x90>
 8005b2e:	232d      	movs	r3, #45	; 0x2d
 8005b30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b34:	4b93      	ldr	r3, [pc, #588]	; (8005d84 <_printf_float+0x2e0>)
 8005b36:	4894      	ldr	r0, [pc, #592]	; (8005d88 <_printf_float+0x2e4>)
 8005b38:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005b3c:	bf94      	ite	ls
 8005b3e:	4698      	movls	r8, r3
 8005b40:	4680      	movhi	r8, r0
 8005b42:	2303      	movs	r3, #3
 8005b44:	6123      	str	r3, [r4, #16]
 8005b46:	9b05      	ldr	r3, [sp, #20]
 8005b48:	f023 0204 	bic.w	r2, r3, #4
 8005b4c:	6022      	str	r2, [r4, #0]
 8005b4e:	f04f 0900 	mov.w	r9, #0
 8005b52:	9700      	str	r7, [sp, #0]
 8005b54:	4633      	mov	r3, r6
 8005b56:	aa0b      	add	r2, sp, #44	; 0x2c
 8005b58:	4621      	mov	r1, r4
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	f000 f9d8 	bl	8005f10 <_printf_common>
 8005b60:	3001      	adds	r0, #1
 8005b62:	f040 8090 	bne.w	8005c86 <_printf_float+0x1e2>
 8005b66:	f04f 30ff 	mov.w	r0, #4294967295
 8005b6a:	b00d      	add	sp, #52	; 0x34
 8005b6c:	ecbd 8b02 	vpop	{d8}
 8005b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b74:	4642      	mov	r2, r8
 8005b76:	464b      	mov	r3, r9
 8005b78:	4640      	mov	r0, r8
 8005b7a:	4649      	mov	r1, r9
 8005b7c:	f7fa ffd6 	bl	8000b2c <__aeabi_dcmpun>
 8005b80:	b140      	cbz	r0, 8005b94 <_printf_float+0xf0>
 8005b82:	464b      	mov	r3, r9
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	bfbc      	itt	lt
 8005b88:	232d      	movlt	r3, #45	; 0x2d
 8005b8a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005b8e:	487f      	ldr	r0, [pc, #508]	; (8005d8c <_printf_float+0x2e8>)
 8005b90:	4b7f      	ldr	r3, [pc, #508]	; (8005d90 <_printf_float+0x2ec>)
 8005b92:	e7d1      	b.n	8005b38 <_printf_float+0x94>
 8005b94:	6863      	ldr	r3, [r4, #4]
 8005b96:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005b9a:	9206      	str	r2, [sp, #24]
 8005b9c:	1c5a      	adds	r2, r3, #1
 8005b9e:	d13f      	bne.n	8005c20 <_printf_float+0x17c>
 8005ba0:	2306      	movs	r3, #6
 8005ba2:	6063      	str	r3, [r4, #4]
 8005ba4:	9b05      	ldr	r3, [sp, #20]
 8005ba6:	6861      	ldr	r1, [r4, #4]
 8005ba8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005bac:	2300      	movs	r3, #0
 8005bae:	9303      	str	r3, [sp, #12]
 8005bb0:	ab0a      	add	r3, sp, #40	; 0x28
 8005bb2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005bb6:	ab09      	add	r3, sp, #36	; 0x24
 8005bb8:	ec49 8b10 	vmov	d0, r8, r9
 8005bbc:	9300      	str	r3, [sp, #0]
 8005bbe:	6022      	str	r2, [r4, #0]
 8005bc0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005bc4:	4628      	mov	r0, r5
 8005bc6:	f7ff fecd 	bl	8005964 <__cvt>
 8005bca:	9b06      	ldr	r3, [sp, #24]
 8005bcc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005bce:	2b47      	cmp	r3, #71	; 0x47
 8005bd0:	4680      	mov	r8, r0
 8005bd2:	d108      	bne.n	8005be6 <_printf_float+0x142>
 8005bd4:	1cc8      	adds	r0, r1, #3
 8005bd6:	db02      	blt.n	8005bde <_printf_float+0x13a>
 8005bd8:	6863      	ldr	r3, [r4, #4]
 8005bda:	4299      	cmp	r1, r3
 8005bdc:	dd41      	ble.n	8005c62 <_printf_float+0x1be>
 8005bde:	f1ab 0b02 	sub.w	fp, fp, #2
 8005be2:	fa5f fb8b 	uxtb.w	fp, fp
 8005be6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005bea:	d820      	bhi.n	8005c2e <_printf_float+0x18a>
 8005bec:	3901      	subs	r1, #1
 8005bee:	465a      	mov	r2, fp
 8005bf0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005bf4:	9109      	str	r1, [sp, #36]	; 0x24
 8005bf6:	f7ff ff17 	bl	8005a28 <__exponent>
 8005bfa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bfc:	1813      	adds	r3, r2, r0
 8005bfe:	2a01      	cmp	r2, #1
 8005c00:	4681      	mov	r9, r0
 8005c02:	6123      	str	r3, [r4, #16]
 8005c04:	dc02      	bgt.n	8005c0c <_printf_float+0x168>
 8005c06:	6822      	ldr	r2, [r4, #0]
 8005c08:	07d2      	lsls	r2, r2, #31
 8005c0a:	d501      	bpl.n	8005c10 <_printf_float+0x16c>
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	6123      	str	r3, [r4, #16]
 8005c10:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d09c      	beq.n	8005b52 <_printf_float+0xae>
 8005c18:	232d      	movs	r3, #45	; 0x2d
 8005c1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c1e:	e798      	b.n	8005b52 <_printf_float+0xae>
 8005c20:	9a06      	ldr	r2, [sp, #24]
 8005c22:	2a47      	cmp	r2, #71	; 0x47
 8005c24:	d1be      	bne.n	8005ba4 <_printf_float+0x100>
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1bc      	bne.n	8005ba4 <_printf_float+0x100>
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e7b9      	b.n	8005ba2 <_printf_float+0xfe>
 8005c2e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005c32:	d118      	bne.n	8005c66 <_printf_float+0x1c2>
 8005c34:	2900      	cmp	r1, #0
 8005c36:	6863      	ldr	r3, [r4, #4]
 8005c38:	dd0b      	ble.n	8005c52 <_printf_float+0x1ae>
 8005c3a:	6121      	str	r1, [r4, #16]
 8005c3c:	b913      	cbnz	r3, 8005c44 <_printf_float+0x1a0>
 8005c3e:	6822      	ldr	r2, [r4, #0]
 8005c40:	07d0      	lsls	r0, r2, #31
 8005c42:	d502      	bpl.n	8005c4a <_printf_float+0x1a6>
 8005c44:	3301      	adds	r3, #1
 8005c46:	440b      	add	r3, r1
 8005c48:	6123      	str	r3, [r4, #16]
 8005c4a:	65a1      	str	r1, [r4, #88]	; 0x58
 8005c4c:	f04f 0900 	mov.w	r9, #0
 8005c50:	e7de      	b.n	8005c10 <_printf_float+0x16c>
 8005c52:	b913      	cbnz	r3, 8005c5a <_printf_float+0x1b6>
 8005c54:	6822      	ldr	r2, [r4, #0]
 8005c56:	07d2      	lsls	r2, r2, #31
 8005c58:	d501      	bpl.n	8005c5e <_printf_float+0x1ba>
 8005c5a:	3302      	adds	r3, #2
 8005c5c:	e7f4      	b.n	8005c48 <_printf_float+0x1a4>
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e7f2      	b.n	8005c48 <_printf_float+0x1a4>
 8005c62:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005c66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c68:	4299      	cmp	r1, r3
 8005c6a:	db05      	blt.n	8005c78 <_printf_float+0x1d4>
 8005c6c:	6823      	ldr	r3, [r4, #0]
 8005c6e:	6121      	str	r1, [r4, #16]
 8005c70:	07d8      	lsls	r0, r3, #31
 8005c72:	d5ea      	bpl.n	8005c4a <_printf_float+0x1a6>
 8005c74:	1c4b      	adds	r3, r1, #1
 8005c76:	e7e7      	b.n	8005c48 <_printf_float+0x1a4>
 8005c78:	2900      	cmp	r1, #0
 8005c7a:	bfd4      	ite	le
 8005c7c:	f1c1 0202 	rsble	r2, r1, #2
 8005c80:	2201      	movgt	r2, #1
 8005c82:	4413      	add	r3, r2
 8005c84:	e7e0      	b.n	8005c48 <_printf_float+0x1a4>
 8005c86:	6823      	ldr	r3, [r4, #0]
 8005c88:	055a      	lsls	r2, r3, #21
 8005c8a:	d407      	bmi.n	8005c9c <_printf_float+0x1f8>
 8005c8c:	6923      	ldr	r3, [r4, #16]
 8005c8e:	4642      	mov	r2, r8
 8005c90:	4631      	mov	r1, r6
 8005c92:	4628      	mov	r0, r5
 8005c94:	47b8      	blx	r7
 8005c96:	3001      	adds	r0, #1
 8005c98:	d12c      	bne.n	8005cf4 <_printf_float+0x250>
 8005c9a:	e764      	b.n	8005b66 <_printf_float+0xc2>
 8005c9c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005ca0:	f240 80e0 	bls.w	8005e64 <_printf_float+0x3c0>
 8005ca4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ca8:	2200      	movs	r2, #0
 8005caa:	2300      	movs	r3, #0
 8005cac:	f7fa ff0c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005cb0:	2800      	cmp	r0, #0
 8005cb2:	d034      	beq.n	8005d1e <_printf_float+0x27a>
 8005cb4:	4a37      	ldr	r2, [pc, #220]	; (8005d94 <_printf_float+0x2f0>)
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	4631      	mov	r1, r6
 8005cba:	4628      	mov	r0, r5
 8005cbc:	47b8      	blx	r7
 8005cbe:	3001      	adds	r0, #1
 8005cc0:	f43f af51 	beq.w	8005b66 <_printf_float+0xc2>
 8005cc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	db02      	blt.n	8005cd2 <_printf_float+0x22e>
 8005ccc:	6823      	ldr	r3, [r4, #0]
 8005cce:	07d8      	lsls	r0, r3, #31
 8005cd0:	d510      	bpl.n	8005cf4 <_printf_float+0x250>
 8005cd2:	ee18 3a10 	vmov	r3, s16
 8005cd6:	4652      	mov	r2, sl
 8005cd8:	4631      	mov	r1, r6
 8005cda:	4628      	mov	r0, r5
 8005cdc:	47b8      	blx	r7
 8005cde:	3001      	adds	r0, #1
 8005ce0:	f43f af41 	beq.w	8005b66 <_printf_float+0xc2>
 8005ce4:	f04f 0800 	mov.w	r8, #0
 8005ce8:	f104 091a 	add.w	r9, r4, #26
 8005cec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	4543      	cmp	r3, r8
 8005cf2:	dc09      	bgt.n	8005d08 <_printf_float+0x264>
 8005cf4:	6823      	ldr	r3, [r4, #0]
 8005cf6:	079b      	lsls	r3, r3, #30
 8005cf8:	f100 8105 	bmi.w	8005f06 <_printf_float+0x462>
 8005cfc:	68e0      	ldr	r0, [r4, #12]
 8005cfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d00:	4298      	cmp	r0, r3
 8005d02:	bfb8      	it	lt
 8005d04:	4618      	movlt	r0, r3
 8005d06:	e730      	b.n	8005b6a <_printf_float+0xc6>
 8005d08:	2301      	movs	r3, #1
 8005d0a:	464a      	mov	r2, r9
 8005d0c:	4631      	mov	r1, r6
 8005d0e:	4628      	mov	r0, r5
 8005d10:	47b8      	blx	r7
 8005d12:	3001      	adds	r0, #1
 8005d14:	f43f af27 	beq.w	8005b66 <_printf_float+0xc2>
 8005d18:	f108 0801 	add.w	r8, r8, #1
 8005d1c:	e7e6      	b.n	8005cec <_printf_float+0x248>
 8005d1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	dc39      	bgt.n	8005d98 <_printf_float+0x2f4>
 8005d24:	4a1b      	ldr	r2, [pc, #108]	; (8005d94 <_printf_float+0x2f0>)
 8005d26:	2301      	movs	r3, #1
 8005d28:	4631      	mov	r1, r6
 8005d2a:	4628      	mov	r0, r5
 8005d2c:	47b8      	blx	r7
 8005d2e:	3001      	adds	r0, #1
 8005d30:	f43f af19 	beq.w	8005b66 <_printf_float+0xc2>
 8005d34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	d102      	bne.n	8005d42 <_printf_float+0x29e>
 8005d3c:	6823      	ldr	r3, [r4, #0]
 8005d3e:	07d9      	lsls	r1, r3, #31
 8005d40:	d5d8      	bpl.n	8005cf4 <_printf_float+0x250>
 8005d42:	ee18 3a10 	vmov	r3, s16
 8005d46:	4652      	mov	r2, sl
 8005d48:	4631      	mov	r1, r6
 8005d4a:	4628      	mov	r0, r5
 8005d4c:	47b8      	blx	r7
 8005d4e:	3001      	adds	r0, #1
 8005d50:	f43f af09 	beq.w	8005b66 <_printf_float+0xc2>
 8005d54:	f04f 0900 	mov.w	r9, #0
 8005d58:	f104 0a1a 	add.w	sl, r4, #26
 8005d5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d5e:	425b      	negs	r3, r3
 8005d60:	454b      	cmp	r3, r9
 8005d62:	dc01      	bgt.n	8005d68 <_printf_float+0x2c4>
 8005d64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d66:	e792      	b.n	8005c8e <_printf_float+0x1ea>
 8005d68:	2301      	movs	r3, #1
 8005d6a:	4652      	mov	r2, sl
 8005d6c:	4631      	mov	r1, r6
 8005d6e:	4628      	mov	r0, r5
 8005d70:	47b8      	blx	r7
 8005d72:	3001      	adds	r0, #1
 8005d74:	f43f aef7 	beq.w	8005b66 <_printf_float+0xc2>
 8005d78:	f109 0901 	add.w	r9, r9, #1
 8005d7c:	e7ee      	b.n	8005d5c <_printf_float+0x2b8>
 8005d7e:	bf00      	nop
 8005d80:	7fefffff 	.word	0x7fefffff
 8005d84:	080087f4 	.word	0x080087f4
 8005d88:	080087f8 	.word	0x080087f8
 8005d8c:	08008800 	.word	0x08008800
 8005d90:	080087fc 	.word	0x080087fc
 8005d94:	08008804 	.word	0x08008804
 8005d98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	bfa8      	it	ge
 8005da0:	461a      	movge	r2, r3
 8005da2:	2a00      	cmp	r2, #0
 8005da4:	4691      	mov	r9, r2
 8005da6:	dc37      	bgt.n	8005e18 <_printf_float+0x374>
 8005da8:	f04f 0b00 	mov.w	fp, #0
 8005dac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005db0:	f104 021a 	add.w	r2, r4, #26
 8005db4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005db6:	9305      	str	r3, [sp, #20]
 8005db8:	eba3 0309 	sub.w	r3, r3, r9
 8005dbc:	455b      	cmp	r3, fp
 8005dbe:	dc33      	bgt.n	8005e28 <_printf_float+0x384>
 8005dc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	db3b      	blt.n	8005e40 <_printf_float+0x39c>
 8005dc8:	6823      	ldr	r3, [r4, #0]
 8005dca:	07da      	lsls	r2, r3, #31
 8005dcc:	d438      	bmi.n	8005e40 <_printf_float+0x39c>
 8005dce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dd0:	9a05      	ldr	r2, [sp, #20]
 8005dd2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005dd4:	1a9a      	subs	r2, r3, r2
 8005dd6:	eba3 0901 	sub.w	r9, r3, r1
 8005dda:	4591      	cmp	r9, r2
 8005ddc:	bfa8      	it	ge
 8005dde:	4691      	movge	r9, r2
 8005de0:	f1b9 0f00 	cmp.w	r9, #0
 8005de4:	dc35      	bgt.n	8005e52 <_printf_float+0x3ae>
 8005de6:	f04f 0800 	mov.w	r8, #0
 8005dea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005dee:	f104 0a1a 	add.w	sl, r4, #26
 8005df2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005df6:	1a9b      	subs	r3, r3, r2
 8005df8:	eba3 0309 	sub.w	r3, r3, r9
 8005dfc:	4543      	cmp	r3, r8
 8005dfe:	f77f af79 	ble.w	8005cf4 <_printf_float+0x250>
 8005e02:	2301      	movs	r3, #1
 8005e04:	4652      	mov	r2, sl
 8005e06:	4631      	mov	r1, r6
 8005e08:	4628      	mov	r0, r5
 8005e0a:	47b8      	blx	r7
 8005e0c:	3001      	adds	r0, #1
 8005e0e:	f43f aeaa 	beq.w	8005b66 <_printf_float+0xc2>
 8005e12:	f108 0801 	add.w	r8, r8, #1
 8005e16:	e7ec      	b.n	8005df2 <_printf_float+0x34e>
 8005e18:	4613      	mov	r3, r2
 8005e1a:	4631      	mov	r1, r6
 8005e1c:	4642      	mov	r2, r8
 8005e1e:	4628      	mov	r0, r5
 8005e20:	47b8      	blx	r7
 8005e22:	3001      	adds	r0, #1
 8005e24:	d1c0      	bne.n	8005da8 <_printf_float+0x304>
 8005e26:	e69e      	b.n	8005b66 <_printf_float+0xc2>
 8005e28:	2301      	movs	r3, #1
 8005e2a:	4631      	mov	r1, r6
 8005e2c:	4628      	mov	r0, r5
 8005e2e:	9205      	str	r2, [sp, #20]
 8005e30:	47b8      	blx	r7
 8005e32:	3001      	adds	r0, #1
 8005e34:	f43f ae97 	beq.w	8005b66 <_printf_float+0xc2>
 8005e38:	9a05      	ldr	r2, [sp, #20]
 8005e3a:	f10b 0b01 	add.w	fp, fp, #1
 8005e3e:	e7b9      	b.n	8005db4 <_printf_float+0x310>
 8005e40:	ee18 3a10 	vmov	r3, s16
 8005e44:	4652      	mov	r2, sl
 8005e46:	4631      	mov	r1, r6
 8005e48:	4628      	mov	r0, r5
 8005e4a:	47b8      	blx	r7
 8005e4c:	3001      	adds	r0, #1
 8005e4e:	d1be      	bne.n	8005dce <_printf_float+0x32a>
 8005e50:	e689      	b.n	8005b66 <_printf_float+0xc2>
 8005e52:	9a05      	ldr	r2, [sp, #20]
 8005e54:	464b      	mov	r3, r9
 8005e56:	4442      	add	r2, r8
 8005e58:	4631      	mov	r1, r6
 8005e5a:	4628      	mov	r0, r5
 8005e5c:	47b8      	blx	r7
 8005e5e:	3001      	adds	r0, #1
 8005e60:	d1c1      	bne.n	8005de6 <_printf_float+0x342>
 8005e62:	e680      	b.n	8005b66 <_printf_float+0xc2>
 8005e64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e66:	2a01      	cmp	r2, #1
 8005e68:	dc01      	bgt.n	8005e6e <_printf_float+0x3ca>
 8005e6a:	07db      	lsls	r3, r3, #31
 8005e6c:	d538      	bpl.n	8005ee0 <_printf_float+0x43c>
 8005e6e:	2301      	movs	r3, #1
 8005e70:	4642      	mov	r2, r8
 8005e72:	4631      	mov	r1, r6
 8005e74:	4628      	mov	r0, r5
 8005e76:	47b8      	blx	r7
 8005e78:	3001      	adds	r0, #1
 8005e7a:	f43f ae74 	beq.w	8005b66 <_printf_float+0xc2>
 8005e7e:	ee18 3a10 	vmov	r3, s16
 8005e82:	4652      	mov	r2, sl
 8005e84:	4631      	mov	r1, r6
 8005e86:	4628      	mov	r0, r5
 8005e88:	47b8      	blx	r7
 8005e8a:	3001      	adds	r0, #1
 8005e8c:	f43f ae6b 	beq.w	8005b66 <_printf_float+0xc2>
 8005e90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e94:	2200      	movs	r2, #0
 8005e96:	2300      	movs	r3, #0
 8005e98:	f7fa fe16 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e9c:	b9d8      	cbnz	r0, 8005ed6 <_printf_float+0x432>
 8005e9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ea0:	f108 0201 	add.w	r2, r8, #1
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	4631      	mov	r1, r6
 8005ea8:	4628      	mov	r0, r5
 8005eaa:	47b8      	blx	r7
 8005eac:	3001      	adds	r0, #1
 8005eae:	d10e      	bne.n	8005ece <_printf_float+0x42a>
 8005eb0:	e659      	b.n	8005b66 <_printf_float+0xc2>
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	4652      	mov	r2, sl
 8005eb6:	4631      	mov	r1, r6
 8005eb8:	4628      	mov	r0, r5
 8005eba:	47b8      	blx	r7
 8005ebc:	3001      	adds	r0, #1
 8005ebe:	f43f ae52 	beq.w	8005b66 <_printf_float+0xc2>
 8005ec2:	f108 0801 	add.w	r8, r8, #1
 8005ec6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	4543      	cmp	r3, r8
 8005ecc:	dcf1      	bgt.n	8005eb2 <_printf_float+0x40e>
 8005ece:	464b      	mov	r3, r9
 8005ed0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005ed4:	e6dc      	b.n	8005c90 <_printf_float+0x1ec>
 8005ed6:	f04f 0800 	mov.w	r8, #0
 8005eda:	f104 0a1a 	add.w	sl, r4, #26
 8005ede:	e7f2      	b.n	8005ec6 <_printf_float+0x422>
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	4642      	mov	r2, r8
 8005ee4:	e7df      	b.n	8005ea6 <_printf_float+0x402>
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	464a      	mov	r2, r9
 8005eea:	4631      	mov	r1, r6
 8005eec:	4628      	mov	r0, r5
 8005eee:	47b8      	blx	r7
 8005ef0:	3001      	adds	r0, #1
 8005ef2:	f43f ae38 	beq.w	8005b66 <_printf_float+0xc2>
 8005ef6:	f108 0801 	add.w	r8, r8, #1
 8005efa:	68e3      	ldr	r3, [r4, #12]
 8005efc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005efe:	1a5b      	subs	r3, r3, r1
 8005f00:	4543      	cmp	r3, r8
 8005f02:	dcf0      	bgt.n	8005ee6 <_printf_float+0x442>
 8005f04:	e6fa      	b.n	8005cfc <_printf_float+0x258>
 8005f06:	f04f 0800 	mov.w	r8, #0
 8005f0a:	f104 0919 	add.w	r9, r4, #25
 8005f0e:	e7f4      	b.n	8005efa <_printf_float+0x456>

08005f10 <_printf_common>:
 8005f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f14:	4616      	mov	r6, r2
 8005f16:	4699      	mov	r9, r3
 8005f18:	688a      	ldr	r2, [r1, #8]
 8005f1a:	690b      	ldr	r3, [r1, #16]
 8005f1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f20:	4293      	cmp	r3, r2
 8005f22:	bfb8      	it	lt
 8005f24:	4613      	movlt	r3, r2
 8005f26:	6033      	str	r3, [r6, #0]
 8005f28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f2c:	4607      	mov	r7, r0
 8005f2e:	460c      	mov	r4, r1
 8005f30:	b10a      	cbz	r2, 8005f36 <_printf_common+0x26>
 8005f32:	3301      	adds	r3, #1
 8005f34:	6033      	str	r3, [r6, #0]
 8005f36:	6823      	ldr	r3, [r4, #0]
 8005f38:	0699      	lsls	r1, r3, #26
 8005f3a:	bf42      	ittt	mi
 8005f3c:	6833      	ldrmi	r3, [r6, #0]
 8005f3e:	3302      	addmi	r3, #2
 8005f40:	6033      	strmi	r3, [r6, #0]
 8005f42:	6825      	ldr	r5, [r4, #0]
 8005f44:	f015 0506 	ands.w	r5, r5, #6
 8005f48:	d106      	bne.n	8005f58 <_printf_common+0x48>
 8005f4a:	f104 0a19 	add.w	sl, r4, #25
 8005f4e:	68e3      	ldr	r3, [r4, #12]
 8005f50:	6832      	ldr	r2, [r6, #0]
 8005f52:	1a9b      	subs	r3, r3, r2
 8005f54:	42ab      	cmp	r3, r5
 8005f56:	dc26      	bgt.n	8005fa6 <_printf_common+0x96>
 8005f58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f5c:	1e13      	subs	r3, r2, #0
 8005f5e:	6822      	ldr	r2, [r4, #0]
 8005f60:	bf18      	it	ne
 8005f62:	2301      	movne	r3, #1
 8005f64:	0692      	lsls	r2, r2, #26
 8005f66:	d42b      	bmi.n	8005fc0 <_printf_common+0xb0>
 8005f68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f6c:	4649      	mov	r1, r9
 8005f6e:	4638      	mov	r0, r7
 8005f70:	47c0      	blx	r8
 8005f72:	3001      	adds	r0, #1
 8005f74:	d01e      	beq.n	8005fb4 <_printf_common+0xa4>
 8005f76:	6823      	ldr	r3, [r4, #0]
 8005f78:	68e5      	ldr	r5, [r4, #12]
 8005f7a:	6832      	ldr	r2, [r6, #0]
 8005f7c:	f003 0306 	and.w	r3, r3, #6
 8005f80:	2b04      	cmp	r3, #4
 8005f82:	bf08      	it	eq
 8005f84:	1aad      	subeq	r5, r5, r2
 8005f86:	68a3      	ldr	r3, [r4, #8]
 8005f88:	6922      	ldr	r2, [r4, #16]
 8005f8a:	bf0c      	ite	eq
 8005f8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f90:	2500      	movne	r5, #0
 8005f92:	4293      	cmp	r3, r2
 8005f94:	bfc4      	itt	gt
 8005f96:	1a9b      	subgt	r3, r3, r2
 8005f98:	18ed      	addgt	r5, r5, r3
 8005f9a:	2600      	movs	r6, #0
 8005f9c:	341a      	adds	r4, #26
 8005f9e:	42b5      	cmp	r5, r6
 8005fa0:	d11a      	bne.n	8005fd8 <_printf_common+0xc8>
 8005fa2:	2000      	movs	r0, #0
 8005fa4:	e008      	b.n	8005fb8 <_printf_common+0xa8>
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	4652      	mov	r2, sl
 8005faa:	4649      	mov	r1, r9
 8005fac:	4638      	mov	r0, r7
 8005fae:	47c0      	blx	r8
 8005fb0:	3001      	adds	r0, #1
 8005fb2:	d103      	bne.n	8005fbc <_printf_common+0xac>
 8005fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fbc:	3501      	adds	r5, #1
 8005fbe:	e7c6      	b.n	8005f4e <_printf_common+0x3e>
 8005fc0:	18e1      	adds	r1, r4, r3
 8005fc2:	1c5a      	adds	r2, r3, #1
 8005fc4:	2030      	movs	r0, #48	; 0x30
 8005fc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005fca:	4422      	add	r2, r4
 8005fcc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005fd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005fd4:	3302      	adds	r3, #2
 8005fd6:	e7c7      	b.n	8005f68 <_printf_common+0x58>
 8005fd8:	2301      	movs	r3, #1
 8005fda:	4622      	mov	r2, r4
 8005fdc:	4649      	mov	r1, r9
 8005fde:	4638      	mov	r0, r7
 8005fe0:	47c0      	blx	r8
 8005fe2:	3001      	adds	r0, #1
 8005fe4:	d0e6      	beq.n	8005fb4 <_printf_common+0xa4>
 8005fe6:	3601      	adds	r6, #1
 8005fe8:	e7d9      	b.n	8005f9e <_printf_common+0x8e>
	...

08005fec <_printf_i>:
 8005fec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ff0:	7e0f      	ldrb	r7, [r1, #24]
 8005ff2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ff4:	2f78      	cmp	r7, #120	; 0x78
 8005ff6:	4691      	mov	r9, r2
 8005ff8:	4680      	mov	r8, r0
 8005ffa:	460c      	mov	r4, r1
 8005ffc:	469a      	mov	sl, r3
 8005ffe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006002:	d807      	bhi.n	8006014 <_printf_i+0x28>
 8006004:	2f62      	cmp	r7, #98	; 0x62
 8006006:	d80a      	bhi.n	800601e <_printf_i+0x32>
 8006008:	2f00      	cmp	r7, #0
 800600a:	f000 80d8 	beq.w	80061be <_printf_i+0x1d2>
 800600e:	2f58      	cmp	r7, #88	; 0x58
 8006010:	f000 80a3 	beq.w	800615a <_printf_i+0x16e>
 8006014:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006018:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800601c:	e03a      	b.n	8006094 <_printf_i+0xa8>
 800601e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006022:	2b15      	cmp	r3, #21
 8006024:	d8f6      	bhi.n	8006014 <_printf_i+0x28>
 8006026:	a101      	add	r1, pc, #4	; (adr r1, 800602c <_printf_i+0x40>)
 8006028:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800602c:	08006085 	.word	0x08006085
 8006030:	08006099 	.word	0x08006099
 8006034:	08006015 	.word	0x08006015
 8006038:	08006015 	.word	0x08006015
 800603c:	08006015 	.word	0x08006015
 8006040:	08006015 	.word	0x08006015
 8006044:	08006099 	.word	0x08006099
 8006048:	08006015 	.word	0x08006015
 800604c:	08006015 	.word	0x08006015
 8006050:	08006015 	.word	0x08006015
 8006054:	08006015 	.word	0x08006015
 8006058:	080061a5 	.word	0x080061a5
 800605c:	080060c9 	.word	0x080060c9
 8006060:	08006187 	.word	0x08006187
 8006064:	08006015 	.word	0x08006015
 8006068:	08006015 	.word	0x08006015
 800606c:	080061c7 	.word	0x080061c7
 8006070:	08006015 	.word	0x08006015
 8006074:	080060c9 	.word	0x080060c9
 8006078:	08006015 	.word	0x08006015
 800607c:	08006015 	.word	0x08006015
 8006080:	0800618f 	.word	0x0800618f
 8006084:	682b      	ldr	r3, [r5, #0]
 8006086:	1d1a      	adds	r2, r3, #4
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	602a      	str	r2, [r5, #0]
 800608c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006090:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006094:	2301      	movs	r3, #1
 8006096:	e0a3      	b.n	80061e0 <_printf_i+0x1f4>
 8006098:	6820      	ldr	r0, [r4, #0]
 800609a:	6829      	ldr	r1, [r5, #0]
 800609c:	0606      	lsls	r6, r0, #24
 800609e:	f101 0304 	add.w	r3, r1, #4
 80060a2:	d50a      	bpl.n	80060ba <_printf_i+0xce>
 80060a4:	680e      	ldr	r6, [r1, #0]
 80060a6:	602b      	str	r3, [r5, #0]
 80060a8:	2e00      	cmp	r6, #0
 80060aa:	da03      	bge.n	80060b4 <_printf_i+0xc8>
 80060ac:	232d      	movs	r3, #45	; 0x2d
 80060ae:	4276      	negs	r6, r6
 80060b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060b4:	485e      	ldr	r0, [pc, #376]	; (8006230 <_printf_i+0x244>)
 80060b6:	230a      	movs	r3, #10
 80060b8:	e019      	b.n	80060ee <_printf_i+0x102>
 80060ba:	680e      	ldr	r6, [r1, #0]
 80060bc:	602b      	str	r3, [r5, #0]
 80060be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80060c2:	bf18      	it	ne
 80060c4:	b236      	sxthne	r6, r6
 80060c6:	e7ef      	b.n	80060a8 <_printf_i+0xbc>
 80060c8:	682b      	ldr	r3, [r5, #0]
 80060ca:	6820      	ldr	r0, [r4, #0]
 80060cc:	1d19      	adds	r1, r3, #4
 80060ce:	6029      	str	r1, [r5, #0]
 80060d0:	0601      	lsls	r1, r0, #24
 80060d2:	d501      	bpl.n	80060d8 <_printf_i+0xec>
 80060d4:	681e      	ldr	r6, [r3, #0]
 80060d6:	e002      	b.n	80060de <_printf_i+0xf2>
 80060d8:	0646      	lsls	r6, r0, #25
 80060da:	d5fb      	bpl.n	80060d4 <_printf_i+0xe8>
 80060dc:	881e      	ldrh	r6, [r3, #0]
 80060de:	4854      	ldr	r0, [pc, #336]	; (8006230 <_printf_i+0x244>)
 80060e0:	2f6f      	cmp	r7, #111	; 0x6f
 80060e2:	bf0c      	ite	eq
 80060e4:	2308      	moveq	r3, #8
 80060e6:	230a      	movne	r3, #10
 80060e8:	2100      	movs	r1, #0
 80060ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80060ee:	6865      	ldr	r5, [r4, #4]
 80060f0:	60a5      	str	r5, [r4, #8]
 80060f2:	2d00      	cmp	r5, #0
 80060f4:	bfa2      	ittt	ge
 80060f6:	6821      	ldrge	r1, [r4, #0]
 80060f8:	f021 0104 	bicge.w	r1, r1, #4
 80060fc:	6021      	strge	r1, [r4, #0]
 80060fe:	b90e      	cbnz	r6, 8006104 <_printf_i+0x118>
 8006100:	2d00      	cmp	r5, #0
 8006102:	d04d      	beq.n	80061a0 <_printf_i+0x1b4>
 8006104:	4615      	mov	r5, r2
 8006106:	fbb6 f1f3 	udiv	r1, r6, r3
 800610a:	fb03 6711 	mls	r7, r3, r1, r6
 800610e:	5dc7      	ldrb	r7, [r0, r7]
 8006110:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006114:	4637      	mov	r7, r6
 8006116:	42bb      	cmp	r3, r7
 8006118:	460e      	mov	r6, r1
 800611a:	d9f4      	bls.n	8006106 <_printf_i+0x11a>
 800611c:	2b08      	cmp	r3, #8
 800611e:	d10b      	bne.n	8006138 <_printf_i+0x14c>
 8006120:	6823      	ldr	r3, [r4, #0]
 8006122:	07de      	lsls	r6, r3, #31
 8006124:	d508      	bpl.n	8006138 <_printf_i+0x14c>
 8006126:	6923      	ldr	r3, [r4, #16]
 8006128:	6861      	ldr	r1, [r4, #4]
 800612a:	4299      	cmp	r1, r3
 800612c:	bfde      	ittt	le
 800612e:	2330      	movle	r3, #48	; 0x30
 8006130:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006134:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006138:	1b52      	subs	r2, r2, r5
 800613a:	6122      	str	r2, [r4, #16]
 800613c:	f8cd a000 	str.w	sl, [sp]
 8006140:	464b      	mov	r3, r9
 8006142:	aa03      	add	r2, sp, #12
 8006144:	4621      	mov	r1, r4
 8006146:	4640      	mov	r0, r8
 8006148:	f7ff fee2 	bl	8005f10 <_printf_common>
 800614c:	3001      	adds	r0, #1
 800614e:	d14c      	bne.n	80061ea <_printf_i+0x1fe>
 8006150:	f04f 30ff 	mov.w	r0, #4294967295
 8006154:	b004      	add	sp, #16
 8006156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800615a:	4835      	ldr	r0, [pc, #212]	; (8006230 <_printf_i+0x244>)
 800615c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006160:	6829      	ldr	r1, [r5, #0]
 8006162:	6823      	ldr	r3, [r4, #0]
 8006164:	f851 6b04 	ldr.w	r6, [r1], #4
 8006168:	6029      	str	r1, [r5, #0]
 800616a:	061d      	lsls	r5, r3, #24
 800616c:	d514      	bpl.n	8006198 <_printf_i+0x1ac>
 800616e:	07df      	lsls	r7, r3, #31
 8006170:	bf44      	itt	mi
 8006172:	f043 0320 	orrmi.w	r3, r3, #32
 8006176:	6023      	strmi	r3, [r4, #0]
 8006178:	b91e      	cbnz	r6, 8006182 <_printf_i+0x196>
 800617a:	6823      	ldr	r3, [r4, #0]
 800617c:	f023 0320 	bic.w	r3, r3, #32
 8006180:	6023      	str	r3, [r4, #0]
 8006182:	2310      	movs	r3, #16
 8006184:	e7b0      	b.n	80060e8 <_printf_i+0xfc>
 8006186:	6823      	ldr	r3, [r4, #0]
 8006188:	f043 0320 	orr.w	r3, r3, #32
 800618c:	6023      	str	r3, [r4, #0]
 800618e:	2378      	movs	r3, #120	; 0x78
 8006190:	4828      	ldr	r0, [pc, #160]	; (8006234 <_printf_i+0x248>)
 8006192:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006196:	e7e3      	b.n	8006160 <_printf_i+0x174>
 8006198:	0659      	lsls	r1, r3, #25
 800619a:	bf48      	it	mi
 800619c:	b2b6      	uxthmi	r6, r6
 800619e:	e7e6      	b.n	800616e <_printf_i+0x182>
 80061a0:	4615      	mov	r5, r2
 80061a2:	e7bb      	b.n	800611c <_printf_i+0x130>
 80061a4:	682b      	ldr	r3, [r5, #0]
 80061a6:	6826      	ldr	r6, [r4, #0]
 80061a8:	6961      	ldr	r1, [r4, #20]
 80061aa:	1d18      	adds	r0, r3, #4
 80061ac:	6028      	str	r0, [r5, #0]
 80061ae:	0635      	lsls	r5, r6, #24
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	d501      	bpl.n	80061b8 <_printf_i+0x1cc>
 80061b4:	6019      	str	r1, [r3, #0]
 80061b6:	e002      	b.n	80061be <_printf_i+0x1d2>
 80061b8:	0670      	lsls	r0, r6, #25
 80061ba:	d5fb      	bpl.n	80061b4 <_printf_i+0x1c8>
 80061bc:	8019      	strh	r1, [r3, #0]
 80061be:	2300      	movs	r3, #0
 80061c0:	6123      	str	r3, [r4, #16]
 80061c2:	4615      	mov	r5, r2
 80061c4:	e7ba      	b.n	800613c <_printf_i+0x150>
 80061c6:	682b      	ldr	r3, [r5, #0]
 80061c8:	1d1a      	adds	r2, r3, #4
 80061ca:	602a      	str	r2, [r5, #0]
 80061cc:	681d      	ldr	r5, [r3, #0]
 80061ce:	6862      	ldr	r2, [r4, #4]
 80061d0:	2100      	movs	r1, #0
 80061d2:	4628      	mov	r0, r5
 80061d4:	f7fa f804 	bl	80001e0 <memchr>
 80061d8:	b108      	cbz	r0, 80061de <_printf_i+0x1f2>
 80061da:	1b40      	subs	r0, r0, r5
 80061dc:	6060      	str	r0, [r4, #4]
 80061de:	6863      	ldr	r3, [r4, #4]
 80061e0:	6123      	str	r3, [r4, #16]
 80061e2:	2300      	movs	r3, #0
 80061e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061e8:	e7a8      	b.n	800613c <_printf_i+0x150>
 80061ea:	6923      	ldr	r3, [r4, #16]
 80061ec:	462a      	mov	r2, r5
 80061ee:	4649      	mov	r1, r9
 80061f0:	4640      	mov	r0, r8
 80061f2:	47d0      	blx	sl
 80061f4:	3001      	adds	r0, #1
 80061f6:	d0ab      	beq.n	8006150 <_printf_i+0x164>
 80061f8:	6823      	ldr	r3, [r4, #0]
 80061fa:	079b      	lsls	r3, r3, #30
 80061fc:	d413      	bmi.n	8006226 <_printf_i+0x23a>
 80061fe:	68e0      	ldr	r0, [r4, #12]
 8006200:	9b03      	ldr	r3, [sp, #12]
 8006202:	4298      	cmp	r0, r3
 8006204:	bfb8      	it	lt
 8006206:	4618      	movlt	r0, r3
 8006208:	e7a4      	b.n	8006154 <_printf_i+0x168>
 800620a:	2301      	movs	r3, #1
 800620c:	4632      	mov	r2, r6
 800620e:	4649      	mov	r1, r9
 8006210:	4640      	mov	r0, r8
 8006212:	47d0      	blx	sl
 8006214:	3001      	adds	r0, #1
 8006216:	d09b      	beq.n	8006150 <_printf_i+0x164>
 8006218:	3501      	adds	r5, #1
 800621a:	68e3      	ldr	r3, [r4, #12]
 800621c:	9903      	ldr	r1, [sp, #12]
 800621e:	1a5b      	subs	r3, r3, r1
 8006220:	42ab      	cmp	r3, r5
 8006222:	dcf2      	bgt.n	800620a <_printf_i+0x21e>
 8006224:	e7eb      	b.n	80061fe <_printf_i+0x212>
 8006226:	2500      	movs	r5, #0
 8006228:	f104 0619 	add.w	r6, r4, #25
 800622c:	e7f5      	b.n	800621a <_printf_i+0x22e>
 800622e:	bf00      	nop
 8006230:	08008806 	.word	0x08008806
 8006234:	08008817 	.word	0x08008817

08006238 <siprintf>:
 8006238:	b40e      	push	{r1, r2, r3}
 800623a:	b500      	push	{lr}
 800623c:	b09c      	sub	sp, #112	; 0x70
 800623e:	ab1d      	add	r3, sp, #116	; 0x74
 8006240:	9002      	str	r0, [sp, #8]
 8006242:	9006      	str	r0, [sp, #24]
 8006244:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006248:	4809      	ldr	r0, [pc, #36]	; (8006270 <siprintf+0x38>)
 800624a:	9107      	str	r1, [sp, #28]
 800624c:	9104      	str	r1, [sp, #16]
 800624e:	4909      	ldr	r1, [pc, #36]	; (8006274 <siprintf+0x3c>)
 8006250:	f853 2b04 	ldr.w	r2, [r3], #4
 8006254:	9105      	str	r1, [sp, #20]
 8006256:	6800      	ldr	r0, [r0, #0]
 8006258:	9301      	str	r3, [sp, #4]
 800625a:	a902      	add	r1, sp, #8
 800625c:	f001 fb76 	bl	800794c <_svfiprintf_r>
 8006260:	9b02      	ldr	r3, [sp, #8]
 8006262:	2200      	movs	r2, #0
 8006264:	701a      	strb	r2, [r3, #0]
 8006266:	b01c      	add	sp, #112	; 0x70
 8006268:	f85d eb04 	ldr.w	lr, [sp], #4
 800626c:	b003      	add	sp, #12
 800626e:	4770      	bx	lr
 8006270:	2000000c 	.word	0x2000000c
 8006274:	ffff0208 	.word	0xffff0208

08006278 <quorem>:
 8006278:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800627c:	6903      	ldr	r3, [r0, #16]
 800627e:	690c      	ldr	r4, [r1, #16]
 8006280:	42a3      	cmp	r3, r4
 8006282:	4607      	mov	r7, r0
 8006284:	f2c0 8081 	blt.w	800638a <quorem+0x112>
 8006288:	3c01      	subs	r4, #1
 800628a:	f101 0814 	add.w	r8, r1, #20
 800628e:	f100 0514 	add.w	r5, r0, #20
 8006292:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006296:	9301      	str	r3, [sp, #4]
 8006298:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800629c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80062a0:	3301      	adds	r3, #1
 80062a2:	429a      	cmp	r2, r3
 80062a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80062a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80062ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80062b0:	d331      	bcc.n	8006316 <quorem+0x9e>
 80062b2:	f04f 0e00 	mov.w	lr, #0
 80062b6:	4640      	mov	r0, r8
 80062b8:	46ac      	mov	ip, r5
 80062ba:	46f2      	mov	sl, lr
 80062bc:	f850 2b04 	ldr.w	r2, [r0], #4
 80062c0:	b293      	uxth	r3, r2
 80062c2:	fb06 e303 	mla	r3, r6, r3, lr
 80062c6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	ebaa 0303 	sub.w	r3, sl, r3
 80062d0:	f8dc a000 	ldr.w	sl, [ip]
 80062d4:	0c12      	lsrs	r2, r2, #16
 80062d6:	fa13 f38a 	uxtah	r3, r3, sl
 80062da:	fb06 e202 	mla	r2, r6, r2, lr
 80062de:	9300      	str	r3, [sp, #0]
 80062e0:	9b00      	ldr	r3, [sp, #0]
 80062e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80062e6:	b292      	uxth	r2, r2
 80062e8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80062ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80062f0:	f8bd 3000 	ldrh.w	r3, [sp]
 80062f4:	4581      	cmp	r9, r0
 80062f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80062fa:	f84c 3b04 	str.w	r3, [ip], #4
 80062fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006302:	d2db      	bcs.n	80062bc <quorem+0x44>
 8006304:	f855 300b 	ldr.w	r3, [r5, fp]
 8006308:	b92b      	cbnz	r3, 8006316 <quorem+0x9e>
 800630a:	9b01      	ldr	r3, [sp, #4]
 800630c:	3b04      	subs	r3, #4
 800630e:	429d      	cmp	r5, r3
 8006310:	461a      	mov	r2, r3
 8006312:	d32e      	bcc.n	8006372 <quorem+0xfa>
 8006314:	613c      	str	r4, [r7, #16]
 8006316:	4638      	mov	r0, r7
 8006318:	f001 f8c4 	bl	80074a4 <__mcmp>
 800631c:	2800      	cmp	r0, #0
 800631e:	db24      	blt.n	800636a <quorem+0xf2>
 8006320:	3601      	adds	r6, #1
 8006322:	4628      	mov	r0, r5
 8006324:	f04f 0c00 	mov.w	ip, #0
 8006328:	f858 2b04 	ldr.w	r2, [r8], #4
 800632c:	f8d0 e000 	ldr.w	lr, [r0]
 8006330:	b293      	uxth	r3, r2
 8006332:	ebac 0303 	sub.w	r3, ip, r3
 8006336:	0c12      	lsrs	r2, r2, #16
 8006338:	fa13 f38e 	uxtah	r3, r3, lr
 800633c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006340:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006344:	b29b      	uxth	r3, r3
 8006346:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800634a:	45c1      	cmp	r9, r8
 800634c:	f840 3b04 	str.w	r3, [r0], #4
 8006350:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006354:	d2e8      	bcs.n	8006328 <quorem+0xb0>
 8006356:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800635a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800635e:	b922      	cbnz	r2, 800636a <quorem+0xf2>
 8006360:	3b04      	subs	r3, #4
 8006362:	429d      	cmp	r5, r3
 8006364:	461a      	mov	r2, r3
 8006366:	d30a      	bcc.n	800637e <quorem+0x106>
 8006368:	613c      	str	r4, [r7, #16]
 800636a:	4630      	mov	r0, r6
 800636c:	b003      	add	sp, #12
 800636e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006372:	6812      	ldr	r2, [r2, #0]
 8006374:	3b04      	subs	r3, #4
 8006376:	2a00      	cmp	r2, #0
 8006378:	d1cc      	bne.n	8006314 <quorem+0x9c>
 800637a:	3c01      	subs	r4, #1
 800637c:	e7c7      	b.n	800630e <quorem+0x96>
 800637e:	6812      	ldr	r2, [r2, #0]
 8006380:	3b04      	subs	r3, #4
 8006382:	2a00      	cmp	r2, #0
 8006384:	d1f0      	bne.n	8006368 <quorem+0xf0>
 8006386:	3c01      	subs	r4, #1
 8006388:	e7eb      	b.n	8006362 <quorem+0xea>
 800638a:	2000      	movs	r0, #0
 800638c:	e7ee      	b.n	800636c <quorem+0xf4>
	...

08006390 <_dtoa_r>:
 8006390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006394:	ed2d 8b04 	vpush	{d8-d9}
 8006398:	ec57 6b10 	vmov	r6, r7, d0
 800639c:	b093      	sub	sp, #76	; 0x4c
 800639e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80063a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80063a4:	9106      	str	r1, [sp, #24]
 80063a6:	ee10 aa10 	vmov	sl, s0
 80063aa:	4604      	mov	r4, r0
 80063ac:	9209      	str	r2, [sp, #36]	; 0x24
 80063ae:	930c      	str	r3, [sp, #48]	; 0x30
 80063b0:	46bb      	mov	fp, r7
 80063b2:	b975      	cbnz	r5, 80063d2 <_dtoa_r+0x42>
 80063b4:	2010      	movs	r0, #16
 80063b6:	f000 fddd 	bl	8006f74 <malloc>
 80063ba:	4602      	mov	r2, r0
 80063bc:	6260      	str	r0, [r4, #36]	; 0x24
 80063be:	b920      	cbnz	r0, 80063ca <_dtoa_r+0x3a>
 80063c0:	4ba7      	ldr	r3, [pc, #668]	; (8006660 <_dtoa_r+0x2d0>)
 80063c2:	21ea      	movs	r1, #234	; 0xea
 80063c4:	48a7      	ldr	r0, [pc, #668]	; (8006664 <_dtoa_r+0x2d4>)
 80063c6:	f001 fbd1 	bl	8007b6c <__assert_func>
 80063ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80063ce:	6005      	str	r5, [r0, #0]
 80063d0:	60c5      	str	r5, [r0, #12]
 80063d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063d4:	6819      	ldr	r1, [r3, #0]
 80063d6:	b151      	cbz	r1, 80063ee <_dtoa_r+0x5e>
 80063d8:	685a      	ldr	r2, [r3, #4]
 80063da:	604a      	str	r2, [r1, #4]
 80063dc:	2301      	movs	r3, #1
 80063de:	4093      	lsls	r3, r2
 80063e0:	608b      	str	r3, [r1, #8]
 80063e2:	4620      	mov	r0, r4
 80063e4:	f000 fe1c 	bl	8007020 <_Bfree>
 80063e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063ea:	2200      	movs	r2, #0
 80063ec:	601a      	str	r2, [r3, #0]
 80063ee:	1e3b      	subs	r3, r7, #0
 80063f0:	bfaa      	itet	ge
 80063f2:	2300      	movge	r3, #0
 80063f4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80063f8:	f8c8 3000 	strge.w	r3, [r8]
 80063fc:	4b9a      	ldr	r3, [pc, #616]	; (8006668 <_dtoa_r+0x2d8>)
 80063fe:	bfbc      	itt	lt
 8006400:	2201      	movlt	r2, #1
 8006402:	f8c8 2000 	strlt.w	r2, [r8]
 8006406:	ea33 030b 	bics.w	r3, r3, fp
 800640a:	d11b      	bne.n	8006444 <_dtoa_r+0xb4>
 800640c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800640e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006412:	6013      	str	r3, [r2, #0]
 8006414:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006418:	4333      	orrs	r3, r6
 800641a:	f000 8592 	beq.w	8006f42 <_dtoa_r+0xbb2>
 800641e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006420:	b963      	cbnz	r3, 800643c <_dtoa_r+0xac>
 8006422:	4b92      	ldr	r3, [pc, #584]	; (800666c <_dtoa_r+0x2dc>)
 8006424:	e022      	b.n	800646c <_dtoa_r+0xdc>
 8006426:	4b92      	ldr	r3, [pc, #584]	; (8006670 <_dtoa_r+0x2e0>)
 8006428:	9301      	str	r3, [sp, #4]
 800642a:	3308      	adds	r3, #8
 800642c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800642e:	6013      	str	r3, [r2, #0]
 8006430:	9801      	ldr	r0, [sp, #4]
 8006432:	b013      	add	sp, #76	; 0x4c
 8006434:	ecbd 8b04 	vpop	{d8-d9}
 8006438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800643c:	4b8b      	ldr	r3, [pc, #556]	; (800666c <_dtoa_r+0x2dc>)
 800643e:	9301      	str	r3, [sp, #4]
 8006440:	3303      	adds	r3, #3
 8006442:	e7f3      	b.n	800642c <_dtoa_r+0x9c>
 8006444:	2200      	movs	r2, #0
 8006446:	2300      	movs	r3, #0
 8006448:	4650      	mov	r0, sl
 800644a:	4659      	mov	r1, fp
 800644c:	f7fa fb3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006450:	ec4b ab19 	vmov	d9, sl, fp
 8006454:	4680      	mov	r8, r0
 8006456:	b158      	cbz	r0, 8006470 <_dtoa_r+0xe0>
 8006458:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800645a:	2301      	movs	r3, #1
 800645c:	6013      	str	r3, [r2, #0]
 800645e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006460:	2b00      	cmp	r3, #0
 8006462:	f000 856b 	beq.w	8006f3c <_dtoa_r+0xbac>
 8006466:	4883      	ldr	r0, [pc, #524]	; (8006674 <_dtoa_r+0x2e4>)
 8006468:	6018      	str	r0, [r3, #0]
 800646a:	1e43      	subs	r3, r0, #1
 800646c:	9301      	str	r3, [sp, #4]
 800646e:	e7df      	b.n	8006430 <_dtoa_r+0xa0>
 8006470:	ec4b ab10 	vmov	d0, sl, fp
 8006474:	aa10      	add	r2, sp, #64	; 0x40
 8006476:	a911      	add	r1, sp, #68	; 0x44
 8006478:	4620      	mov	r0, r4
 800647a:	f001 f8b9 	bl	80075f0 <__d2b>
 800647e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006482:	ee08 0a10 	vmov	s16, r0
 8006486:	2d00      	cmp	r5, #0
 8006488:	f000 8084 	beq.w	8006594 <_dtoa_r+0x204>
 800648c:	ee19 3a90 	vmov	r3, s19
 8006490:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006494:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006498:	4656      	mov	r6, sl
 800649a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800649e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80064a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80064a6:	4b74      	ldr	r3, [pc, #464]	; (8006678 <_dtoa_r+0x2e8>)
 80064a8:	2200      	movs	r2, #0
 80064aa:	4630      	mov	r0, r6
 80064ac:	4639      	mov	r1, r7
 80064ae:	f7f9 feeb 	bl	8000288 <__aeabi_dsub>
 80064b2:	a365      	add	r3, pc, #404	; (adr r3, 8006648 <_dtoa_r+0x2b8>)
 80064b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b8:	f7fa f89e 	bl	80005f8 <__aeabi_dmul>
 80064bc:	a364      	add	r3, pc, #400	; (adr r3, 8006650 <_dtoa_r+0x2c0>)
 80064be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c2:	f7f9 fee3 	bl	800028c <__adddf3>
 80064c6:	4606      	mov	r6, r0
 80064c8:	4628      	mov	r0, r5
 80064ca:	460f      	mov	r7, r1
 80064cc:	f7fa f82a 	bl	8000524 <__aeabi_i2d>
 80064d0:	a361      	add	r3, pc, #388	; (adr r3, 8006658 <_dtoa_r+0x2c8>)
 80064d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d6:	f7fa f88f 	bl	80005f8 <__aeabi_dmul>
 80064da:	4602      	mov	r2, r0
 80064dc:	460b      	mov	r3, r1
 80064de:	4630      	mov	r0, r6
 80064e0:	4639      	mov	r1, r7
 80064e2:	f7f9 fed3 	bl	800028c <__adddf3>
 80064e6:	4606      	mov	r6, r0
 80064e8:	460f      	mov	r7, r1
 80064ea:	f7fa fb35 	bl	8000b58 <__aeabi_d2iz>
 80064ee:	2200      	movs	r2, #0
 80064f0:	9000      	str	r0, [sp, #0]
 80064f2:	2300      	movs	r3, #0
 80064f4:	4630      	mov	r0, r6
 80064f6:	4639      	mov	r1, r7
 80064f8:	f7fa faf0 	bl	8000adc <__aeabi_dcmplt>
 80064fc:	b150      	cbz	r0, 8006514 <_dtoa_r+0x184>
 80064fe:	9800      	ldr	r0, [sp, #0]
 8006500:	f7fa f810 	bl	8000524 <__aeabi_i2d>
 8006504:	4632      	mov	r2, r6
 8006506:	463b      	mov	r3, r7
 8006508:	f7fa fade 	bl	8000ac8 <__aeabi_dcmpeq>
 800650c:	b910      	cbnz	r0, 8006514 <_dtoa_r+0x184>
 800650e:	9b00      	ldr	r3, [sp, #0]
 8006510:	3b01      	subs	r3, #1
 8006512:	9300      	str	r3, [sp, #0]
 8006514:	9b00      	ldr	r3, [sp, #0]
 8006516:	2b16      	cmp	r3, #22
 8006518:	d85a      	bhi.n	80065d0 <_dtoa_r+0x240>
 800651a:	9a00      	ldr	r2, [sp, #0]
 800651c:	4b57      	ldr	r3, [pc, #348]	; (800667c <_dtoa_r+0x2ec>)
 800651e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006526:	ec51 0b19 	vmov	r0, r1, d9
 800652a:	f7fa fad7 	bl	8000adc <__aeabi_dcmplt>
 800652e:	2800      	cmp	r0, #0
 8006530:	d050      	beq.n	80065d4 <_dtoa_r+0x244>
 8006532:	9b00      	ldr	r3, [sp, #0]
 8006534:	3b01      	subs	r3, #1
 8006536:	9300      	str	r3, [sp, #0]
 8006538:	2300      	movs	r3, #0
 800653a:	930b      	str	r3, [sp, #44]	; 0x2c
 800653c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800653e:	1b5d      	subs	r5, r3, r5
 8006540:	1e6b      	subs	r3, r5, #1
 8006542:	9305      	str	r3, [sp, #20]
 8006544:	bf45      	ittet	mi
 8006546:	f1c5 0301 	rsbmi	r3, r5, #1
 800654a:	9304      	strmi	r3, [sp, #16]
 800654c:	2300      	movpl	r3, #0
 800654e:	2300      	movmi	r3, #0
 8006550:	bf4c      	ite	mi
 8006552:	9305      	strmi	r3, [sp, #20]
 8006554:	9304      	strpl	r3, [sp, #16]
 8006556:	9b00      	ldr	r3, [sp, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	db3d      	blt.n	80065d8 <_dtoa_r+0x248>
 800655c:	9b05      	ldr	r3, [sp, #20]
 800655e:	9a00      	ldr	r2, [sp, #0]
 8006560:	920a      	str	r2, [sp, #40]	; 0x28
 8006562:	4413      	add	r3, r2
 8006564:	9305      	str	r3, [sp, #20]
 8006566:	2300      	movs	r3, #0
 8006568:	9307      	str	r3, [sp, #28]
 800656a:	9b06      	ldr	r3, [sp, #24]
 800656c:	2b09      	cmp	r3, #9
 800656e:	f200 8089 	bhi.w	8006684 <_dtoa_r+0x2f4>
 8006572:	2b05      	cmp	r3, #5
 8006574:	bfc4      	itt	gt
 8006576:	3b04      	subgt	r3, #4
 8006578:	9306      	strgt	r3, [sp, #24]
 800657a:	9b06      	ldr	r3, [sp, #24]
 800657c:	f1a3 0302 	sub.w	r3, r3, #2
 8006580:	bfcc      	ite	gt
 8006582:	2500      	movgt	r5, #0
 8006584:	2501      	movle	r5, #1
 8006586:	2b03      	cmp	r3, #3
 8006588:	f200 8087 	bhi.w	800669a <_dtoa_r+0x30a>
 800658c:	e8df f003 	tbb	[pc, r3]
 8006590:	59383a2d 	.word	0x59383a2d
 8006594:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006598:	441d      	add	r5, r3
 800659a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800659e:	2b20      	cmp	r3, #32
 80065a0:	bfc1      	itttt	gt
 80065a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80065a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80065aa:	fa0b f303 	lslgt.w	r3, fp, r3
 80065ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 80065b2:	bfda      	itte	le
 80065b4:	f1c3 0320 	rsble	r3, r3, #32
 80065b8:	fa06 f003 	lslle.w	r0, r6, r3
 80065bc:	4318      	orrgt	r0, r3
 80065be:	f7f9 ffa1 	bl	8000504 <__aeabi_ui2d>
 80065c2:	2301      	movs	r3, #1
 80065c4:	4606      	mov	r6, r0
 80065c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80065ca:	3d01      	subs	r5, #1
 80065cc:	930e      	str	r3, [sp, #56]	; 0x38
 80065ce:	e76a      	b.n	80064a6 <_dtoa_r+0x116>
 80065d0:	2301      	movs	r3, #1
 80065d2:	e7b2      	b.n	800653a <_dtoa_r+0x1aa>
 80065d4:	900b      	str	r0, [sp, #44]	; 0x2c
 80065d6:	e7b1      	b.n	800653c <_dtoa_r+0x1ac>
 80065d8:	9b04      	ldr	r3, [sp, #16]
 80065da:	9a00      	ldr	r2, [sp, #0]
 80065dc:	1a9b      	subs	r3, r3, r2
 80065de:	9304      	str	r3, [sp, #16]
 80065e0:	4253      	negs	r3, r2
 80065e2:	9307      	str	r3, [sp, #28]
 80065e4:	2300      	movs	r3, #0
 80065e6:	930a      	str	r3, [sp, #40]	; 0x28
 80065e8:	e7bf      	b.n	800656a <_dtoa_r+0x1da>
 80065ea:	2300      	movs	r3, #0
 80065ec:	9308      	str	r3, [sp, #32]
 80065ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	dc55      	bgt.n	80066a0 <_dtoa_r+0x310>
 80065f4:	2301      	movs	r3, #1
 80065f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80065fa:	461a      	mov	r2, r3
 80065fc:	9209      	str	r2, [sp, #36]	; 0x24
 80065fe:	e00c      	b.n	800661a <_dtoa_r+0x28a>
 8006600:	2301      	movs	r3, #1
 8006602:	e7f3      	b.n	80065ec <_dtoa_r+0x25c>
 8006604:	2300      	movs	r3, #0
 8006606:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006608:	9308      	str	r3, [sp, #32]
 800660a:	9b00      	ldr	r3, [sp, #0]
 800660c:	4413      	add	r3, r2
 800660e:	9302      	str	r3, [sp, #8]
 8006610:	3301      	adds	r3, #1
 8006612:	2b01      	cmp	r3, #1
 8006614:	9303      	str	r3, [sp, #12]
 8006616:	bfb8      	it	lt
 8006618:	2301      	movlt	r3, #1
 800661a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800661c:	2200      	movs	r2, #0
 800661e:	6042      	str	r2, [r0, #4]
 8006620:	2204      	movs	r2, #4
 8006622:	f102 0614 	add.w	r6, r2, #20
 8006626:	429e      	cmp	r6, r3
 8006628:	6841      	ldr	r1, [r0, #4]
 800662a:	d93d      	bls.n	80066a8 <_dtoa_r+0x318>
 800662c:	4620      	mov	r0, r4
 800662e:	f000 fcb7 	bl	8006fa0 <_Balloc>
 8006632:	9001      	str	r0, [sp, #4]
 8006634:	2800      	cmp	r0, #0
 8006636:	d13b      	bne.n	80066b0 <_dtoa_r+0x320>
 8006638:	4b11      	ldr	r3, [pc, #68]	; (8006680 <_dtoa_r+0x2f0>)
 800663a:	4602      	mov	r2, r0
 800663c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006640:	e6c0      	b.n	80063c4 <_dtoa_r+0x34>
 8006642:	2301      	movs	r3, #1
 8006644:	e7df      	b.n	8006606 <_dtoa_r+0x276>
 8006646:	bf00      	nop
 8006648:	636f4361 	.word	0x636f4361
 800664c:	3fd287a7 	.word	0x3fd287a7
 8006650:	8b60c8b3 	.word	0x8b60c8b3
 8006654:	3fc68a28 	.word	0x3fc68a28
 8006658:	509f79fb 	.word	0x509f79fb
 800665c:	3fd34413 	.word	0x3fd34413
 8006660:	08008835 	.word	0x08008835
 8006664:	0800884c 	.word	0x0800884c
 8006668:	7ff00000 	.word	0x7ff00000
 800666c:	08008831 	.word	0x08008831
 8006670:	08008828 	.word	0x08008828
 8006674:	08008805 	.word	0x08008805
 8006678:	3ff80000 	.word	0x3ff80000
 800667c:	08008940 	.word	0x08008940
 8006680:	080088a7 	.word	0x080088a7
 8006684:	2501      	movs	r5, #1
 8006686:	2300      	movs	r3, #0
 8006688:	9306      	str	r3, [sp, #24]
 800668a:	9508      	str	r5, [sp, #32]
 800668c:	f04f 33ff 	mov.w	r3, #4294967295
 8006690:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006694:	2200      	movs	r2, #0
 8006696:	2312      	movs	r3, #18
 8006698:	e7b0      	b.n	80065fc <_dtoa_r+0x26c>
 800669a:	2301      	movs	r3, #1
 800669c:	9308      	str	r3, [sp, #32]
 800669e:	e7f5      	b.n	800668c <_dtoa_r+0x2fc>
 80066a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80066a6:	e7b8      	b.n	800661a <_dtoa_r+0x28a>
 80066a8:	3101      	adds	r1, #1
 80066aa:	6041      	str	r1, [r0, #4]
 80066ac:	0052      	lsls	r2, r2, #1
 80066ae:	e7b8      	b.n	8006622 <_dtoa_r+0x292>
 80066b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066b2:	9a01      	ldr	r2, [sp, #4]
 80066b4:	601a      	str	r2, [r3, #0]
 80066b6:	9b03      	ldr	r3, [sp, #12]
 80066b8:	2b0e      	cmp	r3, #14
 80066ba:	f200 809d 	bhi.w	80067f8 <_dtoa_r+0x468>
 80066be:	2d00      	cmp	r5, #0
 80066c0:	f000 809a 	beq.w	80067f8 <_dtoa_r+0x468>
 80066c4:	9b00      	ldr	r3, [sp, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	dd32      	ble.n	8006730 <_dtoa_r+0x3a0>
 80066ca:	4ab7      	ldr	r2, [pc, #732]	; (80069a8 <_dtoa_r+0x618>)
 80066cc:	f003 030f 	and.w	r3, r3, #15
 80066d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80066d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80066d8:	9b00      	ldr	r3, [sp, #0]
 80066da:	05d8      	lsls	r0, r3, #23
 80066dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80066e0:	d516      	bpl.n	8006710 <_dtoa_r+0x380>
 80066e2:	4bb2      	ldr	r3, [pc, #712]	; (80069ac <_dtoa_r+0x61c>)
 80066e4:	ec51 0b19 	vmov	r0, r1, d9
 80066e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80066ec:	f7fa f8ae 	bl	800084c <__aeabi_ddiv>
 80066f0:	f007 070f 	and.w	r7, r7, #15
 80066f4:	4682      	mov	sl, r0
 80066f6:	468b      	mov	fp, r1
 80066f8:	2503      	movs	r5, #3
 80066fa:	4eac      	ldr	r6, [pc, #688]	; (80069ac <_dtoa_r+0x61c>)
 80066fc:	b957      	cbnz	r7, 8006714 <_dtoa_r+0x384>
 80066fe:	4642      	mov	r2, r8
 8006700:	464b      	mov	r3, r9
 8006702:	4650      	mov	r0, sl
 8006704:	4659      	mov	r1, fp
 8006706:	f7fa f8a1 	bl	800084c <__aeabi_ddiv>
 800670a:	4682      	mov	sl, r0
 800670c:	468b      	mov	fp, r1
 800670e:	e028      	b.n	8006762 <_dtoa_r+0x3d2>
 8006710:	2502      	movs	r5, #2
 8006712:	e7f2      	b.n	80066fa <_dtoa_r+0x36a>
 8006714:	07f9      	lsls	r1, r7, #31
 8006716:	d508      	bpl.n	800672a <_dtoa_r+0x39a>
 8006718:	4640      	mov	r0, r8
 800671a:	4649      	mov	r1, r9
 800671c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006720:	f7f9 ff6a 	bl	80005f8 <__aeabi_dmul>
 8006724:	3501      	adds	r5, #1
 8006726:	4680      	mov	r8, r0
 8006728:	4689      	mov	r9, r1
 800672a:	107f      	asrs	r7, r7, #1
 800672c:	3608      	adds	r6, #8
 800672e:	e7e5      	b.n	80066fc <_dtoa_r+0x36c>
 8006730:	f000 809b 	beq.w	800686a <_dtoa_r+0x4da>
 8006734:	9b00      	ldr	r3, [sp, #0]
 8006736:	4f9d      	ldr	r7, [pc, #628]	; (80069ac <_dtoa_r+0x61c>)
 8006738:	425e      	negs	r6, r3
 800673a:	4b9b      	ldr	r3, [pc, #620]	; (80069a8 <_dtoa_r+0x618>)
 800673c:	f006 020f 	and.w	r2, r6, #15
 8006740:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006748:	ec51 0b19 	vmov	r0, r1, d9
 800674c:	f7f9 ff54 	bl	80005f8 <__aeabi_dmul>
 8006750:	1136      	asrs	r6, r6, #4
 8006752:	4682      	mov	sl, r0
 8006754:	468b      	mov	fp, r1
 8006756:	2300      	movs	r3, #0
 8006758:	2502      	movs	r5, #2
 800675a:	2e00      	cmp	r6, #0
 800675c:	d17a      	bne.n	8006854 <_dtoa_r+0x4c4>
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1d3      	bne.n	800670a <_dtoa_r+0x37a>
 8006762:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006764:	2b00      	cmp	r3, #0
 8006766:	f000 8082 	beq.w	800686e <_dtoa_r+0x4de>
 800676a:	4b91      	ldr	r3, [pc, #580]	; (80069b0 <_dtoa_r+0x620>)
 800676c:	2200      	movs	r2, #0
 800676e:	4650      	mov	r0, sl
 8006770:	4659      	mov	r1, fp
 8006772:	f7fa f9b3 	bl	8000adc <__aeabi_dcmplt>
 8006776:	2800      	cmp	r0, #0
 8006778:	d079      	beq.n	800686e <_dtoa_r+0x4de>
 800677a:	9b03      	ldr	r3, [sp, #12]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d076      	beq.n	800686e <_dtoa_r+0x4de>
 8006780:	9b02      	ldr	r3, [sp, #8]
 8006782:	2b00      	cmp	r3, #0
 8006784:	dd36      	ble.n	80067f4 <_dtoa_r+0x464>
 8006786:	9b00      	ldr	r3, [sp, #0]
 8006788:	4650      	mov	r0, sl
 800678a:	4659      	mov	r1, fp
 800678c:	1e5f      	subs	r7, r3, #1
 800678e:	2200      	movs	r2, #0
 8006790:	4b88      	ldr	r3, [pc, #544]	; (80069b4 <_dtoa_r+0x624>)
 8006792:	f7f9 ff31 	bl	80005f8 <__aeabi_dmul>
 8006796:	9e02      	ldr	r6, [sp, #8]
 8006798:	4682      	mov	sl, r0
 800679a:	468b      	mov	fp, r1
 800679c:	3501      	adds	r5, #1
 800679e:	4628      	mov	r0, r5
 80067a0:	f7f9 fec0 	bl	8000524 <__aeabi_i2d>
 80067a4:	4652      	mov	r2, sl
 80067a6:	465b      	mov	r3, fp
 80067a8:	f7f9 ff26 	bl	80005f8 <__aeabi_dmul>
 80067ac:	4b82      	ldr	r3, [pc, #520]	; (80069b8 <_dtoa_r+0x628>)
 80067ae:	2200      	movs	r2, #0
 80067b0:	f7f9 fd6c 	bl	800028c <__adddf3>
 80067b4:	46d0      	mov	r8, sl
 80067b6:	46d9      	mov	r9, fp
 80067b8:	4682      	mov	sl, r0
 80067ba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80067be:	2e00      	cmp	r6, #0
 80067c0:	d158      	bne.n	8006874 <_dtoa_r+0x4e4>
 80067c2:	4b7e      	ldr	r3, [pc, #504]	; (80069bc <_dtoa_r+0x62c>)
 80067c4:	2200      	movs	r2, #0
 80067c6:	4640      	mov	r0, r8
 80067c8:	4649      	mov	r1, r9
 80067ca:	f7f9 fd5d 	bl	8000288 <__aeabi_dsub>
 80067ce:	4652      	mov	r2, sl
 80067d0:	465b      	mov	r3, fp
 80067d2:	4680      	mov	r8, r0
 80067d4:	4689      	mov	r9, r1
 80067d6:	f7fa f99f 	bl	8000b18 <__aeabi_dcmpgt>
 80067da:	2800      	cmp	r0, #0
 80067dc:	f040 8295 	bne.w	8006d0a <_dtoa_r+0x97a>
 80067e0:	4652      	mov	r2, sl
 80067e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80067e6:	4640      	mov	r0, r8
 80067e8:	4649      	mov	r1, r9
 80067ea:	f7fa f977 	bl	8000adc <__aeabi_dcmplt>
 80067ee:	2800      	cmp	r0, #0
 80067f0:	f040 8289 	bne.w	8006d06 <_dtoa_r+0x976>
 80067f4:	ec5b ab19 	vmov	sl, fp, d9
 80067f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	f2c0 8148 	blt.w	8006a90 <_dtoa_r+0x700>
 8006800:	9a00      	ldr	r2, [sp, #0]
 8006802:	2a0e      	cmp	r2, #14
 8006804:	f300 8144 	bgt.w	8006a90 <_dtoa_r+0x700>
 8006808:	4b67      	ldr	r3, [pc, #412]	; (80069a8 <_dtoa_r+0x618>)
 800680a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800680e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006814:	2b00      	cmp	r3, #0
 8006816:	f280 80d5 	bge.w	80069c4 <_dtoa_r+0x634>
 800681a:	9b03      	ldr	r3, [sp, #12]
 800681c:	2b00      	cmp	r3, #0
 800681e:	f300 80d1 	bgt.w	80069c4 <_dtoa_r+0x634>
 8006822:	f040 826f 	bne.w	8006d04 <_dtoa_r+0x974>
 8006826:	4b65      	ldr	r3, [pc, #404]	; (80069bc <_dtoa_r+0x62c>)
 8006828:	2200      	movs	r2, #0
 800682a:	4640      	mov	r0, r8
 800682c:	4649      	mov	r1, r9
 800682e:	f7f9 fee3 	bl	80005f8 <__aeabi_dmul>
 8006832:	4652      	mov	r2, sl
 8006834:	465b      	mov	r3, fp
 8006836:	f7fa f965 	bl	8000b04 <__aeabi_dcmpge>
 800683a:	9e03      	ldr	r6, [sp, #12]
 800683c:	4637      	mov	r7, r6
 800683e:	2800      	cmp	r0, #0
 8006840:	f040 8245 	bne.w	8006cce <_dtoa_r+0x93e>
 8006844:	9d01      	ldr	r5, [sp, #4]
 8006846:	2331      	movs	r3, #49	; 0x31
 8006848:	f805 3b01 	strb.w	r3, [r5], #1
 800684c:	9b00      	ldr	r3, [sp, #0]
 800684e:	3301      	adds	r3, #1
 8006850:	9300      	str	r3, [sp, #0]
 8006852:	e240      	b.n	8006cd6 <_dtoa_r+0x946>
 8006854:	07f2      	lsls	r2, r6, #31
 8006856:	d505      	bpl.n	8006864 <_dtoa_r+0x4d4>
 8006858:	e9d7 2300 	ldrd	r2, r3, [r7]
 800685c:	f7f9 fecc 	bl	80005f8 <__aeabi_dmul>
 8006860:	3501      	adds	r5, #1
 8006862:	2301      	movs	r3, #1
 8006864:	1076      	asrs	r6, r6, #1
 8006866:	3708      	adds	r7, #8
 8006868:	e777      	b.n	800675a <_dtoa_r+0x3ca>
 800686a:	2502      	movs	r5, #2
 800686c:	e779      	b.n	8006762 <_dtoa_r+0x3d2>
 800686e:	9f00      	ldr	r7, [sp, #0]
 8006870:	9e03      	ldr	r6, [sp, #12]
 8006872:	e794      	b.n	800679e <_dtoa_r+0x40e>
 8006874:	9901      	ldr	r1, [sp, #4]
 8006876:	4b4c      	ldr	r3, [pc, #304]	; (80069a8 <_dtoa_r+0x618>)
 8006878:	4431      	add	r1, r6
 800687a:	910d      	str	r1, [sp, #52]	; 0x34
 800687c:	9908      	ldr	r1, [sp, #32]
 800687e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006882:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006886:	2900      	cmp	r1, #0
 8006888:	d043      	beq.n	8006912 <_dtoa_r+0x582>
 800688a:	494d      	ldr	r1, [pc, #308]	; (80069c0 <_dtoa_r+0x630>)
 800688c:	2000      	movs	r0, #0
 800688e:	f7f9 ffdd 	bl	800084c <__aeabi_ddiv>
 8006892:	4652      	mov	r2, sl
 8006894:	465b      	mov	r3, fp
 8006896:	f7f9 fcf7 	bl	8000288 <__aeabi_dsub>
 800689a:	9d01      	ldr	r5, [sp, #4]
 800689c:	4682      	mov	sl, r0
 800689e:	468b      	mov	fp, r1
 80068a0:	4649      	mov	r1, r9
 80068a2:	4640      	mov	r0, r8
 80068a4:	f7fa f958 	bl	8000b58 <__aeabi_d2iz>
 80068a8:	4606      	mov	r6, r0
 80068aa:	f7f9 fe3b 	bl	8000524 <__aeabi_i2d>
 80068ae:	4602      	mov	r2, r0
 80068b0:	460b      	mov	r3, r1
 80068b2:	4640      	mov	r0, r8
 80068b4:	4649      	mov	r1, r9
 80068b6:	f7f9 fce7 	bl	8000288 <__aeabi_dsub>
 80068ba:	3630      	adds	r6, #48	; 0x30
 80068bc:	f805 6b01 	strb.w	r6, [r5], #1
 80068c0:	4652      	mov	r2, sl
 80068c2:	465b      	mov	r3, fp
 80068c4:	4680      	mov	r8, r0
 80068c6:	4689      	mov	r9, r1
 80068c8:	f7fa f908 	bl	8000adc <__aeabi_dcmplt>
 80068cc:	2800      	cmp	r0, #0
 80068ce:	d163      	bne.n	8006998 <_dtoa_r+0x608>
 80068d0:	4642      	mov	r2, r8
 80068d2:	464b      	mov	r3, r9
 80068d4:	4936      	ldr	r1, [pc, #216]	; (80069b0 <_dtoa_r+0x620>)
 80068d6:	2000      	movs	r0, #0
 80068d8:	f7f9 fcd6 	bl	8000288 <__aeabi_dsub>
 80068dc:	4652      	mov	r2, sl
 80068de:	465b      	mov	r3, fp
 80068e0:	f7fa f8fc 	bl	8000adc <__aeabi_dcmplt>
 80068e4:	2800      	cmp	r0, #0
 80068e6:	f040 80b5 	bne.w	8006a54 <_dtoa_r+0x6c4>
 80068ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068ec:	429d      	cmp	r5, r3
 80068ee:	d081      	beq.n	80067f4 <_dtoa_r+0x464>
 80068f0:	4b30      	ldr	r3, [pc, #192]	; (80069b4 <_dtoa_r+0x624>)
 80068f2:	2200      	movs	r2, #0
 80068f4:	4650      	mov	r0, sl
 80068f6:	4659      	mov	r1, fp
 80068f8:	f7f9 fe7e 	bl	80005f8 <__aeabi_dmul>
 80068fc:	4b2d      	ldr	r3, [pc, #180]	; (80069b4 <_dtoa_r+0x624>)
 80068fe:	4682      	mov	sl, r0
 8006900:	468b      	mov	fp, r1
 8006902:	4640      	mov	r0, r8
 8006904:	4649      	mov	r1, r9
 8006906:	2200      	movs	r2, #0
 8006908:	f7f9 fe76 	bl	80005f8 <__aeabi_dmul>
 800690c:	4680      	mov	r8, r0
 800690e:	4689      	mov	r9, r1
 8006910:	e7c6      	b.n	80068a0 <_dtoa_r+0x510>
 8006912:	4650      	mov	r0, sl
 8006914:	4659      	mov	r1, fp
 8006916:	f7f9 fe6f 	bl	80005f8 <__aeabi_dmul>
 800691a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800691c:	9d01      	ldr	r5, [sp, #4]
 800691e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006920:	4682      	mov	sl, r0
 8006922:	468b      	mov	fp, r1
 8006924:	4649      	mov	r1, r9
 8006926:	4640      	mov	r0, r8
 8006928:	f7fa f916 	bl	8000b58 <__aeabi_d2iz>
 800692c:	4606      	mov	r6, r0
 800692e:	f7f9 fdf9 	bl	8000524 <__aeabi_i2d>
 8006932:	3630      	adds	r6, #48	; 0x30
 8006934:	4602      	mov	r2, r0
 8006936:	460b      	mov	r3, r1
 8006938:	4640      	mov	r0, r8
 800693a:	4649      	mov	r1, r9
 800693c:	f7f9 fca4 	bl	8000288 <__aeabi_dsub>
 8006940:	f805 6b01 	strb.w	r6, [r5], #1
 8006944:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006946:	429d      	cmp	r5, r3
 8006948:	4680      	mov	r8, r0
 800694a:	4689      	mov	r9, r1
 800694c:	f04f 0200 	mov.w	r2, #0
 8006950:	d124      	bne.n	800699c <_dtoa_r+0x60c>
 8006952:	4b1b      	ldr	r3, [pc, #108]	; (80069c0 <_dtoa_r+0x630>)
 8006954:	4650      	mov	r0, sl
 8006956:	4659      	mov	r1, fp
 8006958:	f7f9 fc98 	bl	800028c <__adddf3>
 800695c:	4602      	mov	r2, r0
 800695e:	460b      	mov	r3, r1
 8006960:	4640      	mov	r0, r8
 8006962:	4649      	mov	r1, r9
 8006964:	f7fa f8d8 	bl	8000b18 <__aeabi_dcmpgt>
 8006968:	2800      	cmp	r0, #0
 800696a:	d173      	bne.n	8006a54 <_dtoa_r+0x6c4>
 800696c:	4652      	mov	r2, sl
 800696e:	465b      	mov	r3, fp
 8006970:	4913      	ldr	r1, [pc, #76]	; (80069c0 <_dtoa_r+0x630>)
 8006972:	2000      	movs	r0, #0
 8006974:	f7f9 fc88 	bl	8000288 <__aeabi_dsub>
 8006978:	4602      	mov	r2, r0
 800697a:	460b      	mov	r3, r1
 800697c:	4640      	mov	r0, r8
 800697e:	4649      	mov	r1, r9
 8006980:	f7fa f8ac 	bl	8000adc <__aeabi_dcmplt>
 8006984:	2800      	cmp	r0, #0
 8006986:	f43f af35 	beq.w	80067f4 <_dtoa_r+0x464>
 800698a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800698c:	1e6b      	subs	r3, r5, #1
 800698e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006990:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006994:	2b30      	cmp	r3, #48	; 0x30
 8006996:	d0f8      	beq.n	800698a <_dtoa_r+0x5fa>
 8006998:	9700      	str	r7, [sp, #0]
 800699a:	e049      	b.n	8006a30 <_dtoa_r+0x6a0>
 800699c:	4b05      	ldr	r3, [pc, #20]	; (80069b4 <_dtoa_r+0x624>)
 800699e:	f7f9 fe2b 	bl	80005f8 <__aeabi_dmul>
 80069a2:	4680      	mov	r8, r0
 80069a4:	4689      	mov	r9, r1
 80069a6:	e7bd      	b.n	8006924 <_dtoa_r+0x594>
 80069a8:	08008940 	.word	0x08008940
 80069ac:	08008918 	.word	0x08008918
 80069b0:	3ff00000 	.word	0x3ff00000
 80069b4:	40240000 	.word	0x40240000
 80069b8:	401c0000 	.word	0x401c0000
 80069bc:	40140000 	.word	0x40140000
 80069c0:	3fe00000 	.word	0x3fe00000
 80069c4:	9d01      	ldr	r5, [sp, #4]
 80069c6:	4656      	mov	r6, sl
 80069c8:	465f      	mov	r7, fp
 80069ca:	4642      	mov	r2, r8
 80069cc:	464b      	mov	r3, r9
 80069ce:	4630      	mov	r0, r6
 80069d0:	4639      	mov	r1, r7
 80069d2:	f7f9 ff3b 	bl	800084c <__aeabi_ddiv>
 80069d6:	f7fa f8bf 	bl	8000b58 <__aeabi_d2iz>
 80069da:	4682      	mov	sl, r0
 80069dc:	f7f9 fda2 	bl	8000524 <__aeabi_i2d>
 80069e0:	4642      	mov	r2, r8
 80069e2:	464b      	mov	r3, r9
 80069e4:	f7f9 fe08 	bl	80005f8 <__aeabi_dmul>
 80069e8:	4602      	mov	r2, r0
 80069ea:	460b      	mov	r3, r1
 80069ec:	4630      	mov	r0, r6
 80069ee:	4639      	mov	r1, r7
 80069f0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80069f4:	f7f9 fc48 	bl	8000288 <__aeabi_dsub>
 80069f8:	f805 6b01 	strb.w	r6, [r5], #1
 80069fc:	9e01      	ldr	r6, [sp, #4]
 80069fe:	9f03      	ldr	r7, [sp, #12]
 8006a00:	1bae      	subs	r6, r5, r6
 8006a02:	42b7      	cmp	r7, r6
 8006a04:	4602      	mov	r2, r0
 8006a06:	460b      	mov	r3, r1
 8006a08:	d135      	bne.n	8006a76 <_dtoa_r+0x6e6>
 8006a0a:	f7f9 fc3f 	bl	800028c <__adddf3>
 8006a0e:	4642      	mov	r2, r8
 8006a10:	464b      	mov	r3, r9
 8006a12:	4606      	mov	r6, r0
 8006a14:	460f      	mov	r7, r1
 8006a16:	f7fa f87f 	bl	8000b18 <__aeabi_dcmpgt>
 8006a1a:	b9d0      	cbnz	r0, 8006a52 <_dtoa_r+0x6c2>
 8006a1c:	4642      	mov	r2, r8
 8006a1e:	464b      	mov	r3, r9
 8006a20:	4630      	mov	r0, r6
 8006a22:	4639      	mov	r1, r7
 8006a24:	f7fa f850 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a28:	b110      	cbz	r0, 8006a30 <_dtoa_r+0x6a0>
 8006a2a:	f01a 0f01 	tst.w	sl, #1
 8006a2e:	d110      	bne.n	8006a52 <_dtoa_r+0x6c2>
 8006a30:	4620      	mov	r0, r4
 8006a32:	ee18 1a10 	vmov	r1, s16
 8006a36:	f000 faf3 	bl	8007020 <_Bfree>
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	9800      	ldr	r0, [sp, #0]
 8006a3e:	702b      	strb	r3, [r5, #0]
 8006a40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a42:	3001      	adds	r0, #1
 8006a44:	6018      	str	r0, [r3, #0]
 8006a46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f43f acf1 	beq.w	8006430 <_dtoa_r+0xa0>
 8006a4e:	601d      	str	r5, [r3, #0]
 8006a50:	e4ee      	b.n	8006430 <_dtoa_r+0xa0>
 8006a52:	9f00      	ldr	r7, [sp, #0]
 8006a54:	462b      	mov	r3, r5
 8006a56:	461d      	mov	r5, r3
 8006a58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a5c:	2a39      	cmp	r2, #57	; 0x39
 8006a5e:	d106      	bne.n	8006a6e <_dtoa_r+0x6de>
 8006a60:	9a01      	ldr	r2, [sp, #4]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d1f7      	bne.n	8006a56 <_dtoa_r+0x6c6>
 8006a66:	9901      	ldr	r1, [sp, #4]
 8006a68:	2230      	movs	r2, #48	; 0x30
 8006a6a:	3701      	adds	r7, #1
 8006a6c:	700a      	strb	r2, [r1, #0]
 8006a6e:	781a      	ldrb	r2, [r3, #0]
 8006a70:	3201      	adds	r2, #1
 8006a72:	701a      	strb	r2, [r3, #0]
 8006a74:	e790      	b.n	8006998 <_dtoa_r+0x608>
 8006a76:	4ba6      	ldr	r3, [pc, #664]	; (8006d10 <_dtoa_r+0x980>)
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f7f9 fdbd 	bl	80005f8 <__aeabi_dmul>
 8006a7e:	2200      	movs	r2, #0
 8006a80:	2300      	movs	r3, #0
 8006a82:	4606      	mov	r6, r0
 8006a84:	460f      	mov	r7, r1
 8006a86:	f7fa f81f 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a8a:	2800      	cmp	r0, #0
 8006a8c:	d09d      	beq.n	80069ca <_dtoa_r+0x63a>
 8006a8e:	e7cf      	b.n	8006a30 <_dtoa_r+0x6a0>
 8006a90:	9a08      	ldr	r2, [sp, #32]
 8006a92:	2a00      	cmp	r2, #0
 8006a94:	f000 80d7 	beq.w	8006c46 <_dtoa_r+0x8b6>
 8006a98:	9a06      	ldr	r2, [sp, #24]
 8006a9a:	2a01      	cmp	r2, #1
 8006a9c:	f300 80ba 	bgt.w	8006c14 <_dtoa_r+0x884>
 8006aa0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006aa2:	2a00      	cmp	r2, #0
 8006aa4:	f000 80b2 	beq.w	8006c0c <_dtoa_r+0x87c>
 8006aa8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006aac:	9e07      	ldr	r6, [sp, #28]
 8006aae:	9d04      	ldr	r5, [sp, #16]
 8006ab0:	9a04      	ldr	r2, [sp, #16]
 8006ab2:	441a      	add	r2, r3
 8006ab4:	9204      	str	r2, [sp, #16]
 8006ab6:	9a05      	ldr	r2, [sp, #20]
 8006ab8:	2101      	movs	r1, #1
 8006aba:	441a      	add	r2, r3
 8006abc:	4620      	mov	r0, r4
 8006abe:	9205      	str	r2, [sp, #20]
 8006ac0:	f000 fb66 	bl	8007190 <__i2b>
 8006ac4:	4607      	mov	r7, r0
 8006ac6:	2d00      	cmp	r5, #0
 8006ac8:	dd0c      	ble.n	8006ae4 <_dtoa_r+0x754>
 8006aca:	9b05      	ldr	r3, [sp, #20]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	dd09      	ble.n	8006ae4 <_dtoa_r+0x754>
 8006ad0:	42ab      	cmp	r3, r5
 8006ad2:	9a04      	ldr	r2, [sp, #16]
 8006ad4:	bfa8      	it	ge
 8006ad6:	462b      	movge	r3, r5
 8006ad8:	1ad2      	subs	r2, r2, r3
 8006ada:	9204      	str	r2, [sp, #16]
 8006adc:	9a05      	ldr	r2, [sp, #20]
 8006ade:	1aed      	subs	r5, r5, r3
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	9305      	str	r3, [sp, #20]
 8006ae4:	9b07      	ldr	r3, [sp, #28]
 8006ae6:	b31b      	cbz	r3, 8006b30 <_dtoa_r+0x7a0>
 8006ae8:	9b08      	ldr	r3, [sp, #32]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	f000 80af 	beq.w	8006c4e <_dtoa_r+0x8be>
 8006af0:	2e00      	cmp	r6, #0
 8006af2:	dd13      	ble.n	8006b1c <_dtoa_r+0x78c>
 8006af4:	4639      	mov	r1, r7
 8006af6:	4632      	mov	r2, r6
 8006af8:	4620      	mov	r0, r4
 8006afa:	f000 fc09 	bl	8007310 <__pow5mult>
 8006afe:	ee18 2a10 	vmov	r2, s16
 8006b02:	4601      	mov	r1, r0
 8006b04:	4607      	mov	r7, r0
 8006b06:	4620      	mov	r0, r4
 8006b08:	f000 fb58 	bl	80071bc <__multiply>
 8006b0c:	ee18 1a10 	vmov	r1, s16
 8006b10:	4680      	mov	r8, r0
 8006b12:	4620      	mov	r0, r4
 8006b14:	f000 fa84 	bl	8007020 <_Bfree>
 8006b18:	ee08 8a10 	vmov	s16, r8
 8006b1c:	9b07      	ldr	r3, [sp, #28]
 8006b1e:	1b9a      	subs	r2, r3, r6
 8006b20:	d006      	beq.n	8006b30 <_dtoa_r+0x7a0>
 8006b22:	ee18 1a10 	vmov	r1, s16
 8006b26:	4620      	mov	r0, r4
 8006b28:	f000 fbf2 	bl	8007310 <__pow5mult>
 8006b2c:	ee08 0a10 	vmov	s16, r0
 8006b30:	2101      	movs	r1, #1
 8006b32:	4620      	mov	r0, r4
 8006b34:	f000 fb2c 	bl	8007190 <__i2b>
 8006b38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	4606      	mov	r6, r0
 8006b3e:	f340 8088 	ble.w	8006c52 <_dtoa_r+0x8c2>
 8006b42:	461a      	mov	r2, r3
 8006b44:	4601      	mov	r1, r0
 8006b46:	4620      	mov	r0, r4
 8006b48:	f000 fbe2 	bl	8007310 <__pow5mult>
 8006b4c:	9b06      	ldr	r3, [sp, #24]
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	4606      	mov	r6, r0
 8006b52:	f340 8081 	ble.w	8006c58 <_dtoa_r+0x8c8>
 8006b56:	f04f 0800 	mov.w	r8, #0
 8006b5a:	6933      	ldr	r3, [r6, #16]
 8006b5c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006b60:	6918      	ldr	r0, [r3, #16]
 8006b62:	f000 fac5 	bl	80070f0 <__hi0bits>
 8006b66:	f1c0 0020 	rsb	r0, r0, #32
 8006b6a:	9b05      	ldr	r3, [sp, #20]
 8006b6c:	4418      	add	r0, r3
 8006b6e:	f010 001f 	ands.w	r0, r0, #31
 8006b72:	f000 8092 	beq.w	8006c9a <_dtoa_r+0x90a>
 8006b76:	f1c0 0320 	rsb	r3, r0, #32
 8006b7a:	2b04      	cmp	r3, #4
 8006b7c:	f340 808a 	ble.w	8006c94 <_dtoa_r+0x904>
 8006b80:	f1c0 001c 	rsb	r0, r0, #28
 8006b84:	9b04      	ldr	r3, [sp, #16]
 8006b86:	4403      	add	r3, r0
 8006b88:	9304      	str	r3, [sp, #16]
 8006b8a:	9b05      	ldr	r3, [sp, #20]
 8006b8c:	4403      	add	r3, r0
 8006b8e:	4405      	add	r5, r0
 8006b90:	9305      	str	r3, [sp, #20]
 8006b92:	9b04      	ldr	r3, [sp, #16]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	dd07      	ble.n	8006ba8 <_dtoa_r+0x818>
 8006b98:	ee18 1a10 	vmov	r1, s16
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	4620      	mov	r0, r4
 8006ba0:	f000 fc10 	bl	80073c4 <__lshift>
 8006ba4:	ee08 0a10 	vmov	s16, r0
 8006ba8:	9b05      	ldr	r3, [sp, #20]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	dd05      	ble.n	8006bba <_dtoa_r+0x82a>
 8006bae:	4631      	mov	r1, r6
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	4620      	mov	r0, r4
 8006bb4:	f000 fc06 	bl	80073c4 <__lshift>
 8006bb8:	4606      	mov	r6, r0
 8006bba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d06e      	beq.n	8006c9e <_dtoa_r+0x90e>
 8006bc0:	ee18 0a10 	vmov	r0, s16
 8006bc4:	4631      	mov	r1, r6
 8006bc6:	f000 fc6d 	bl	80074a4 <__mcmp>
 8006bca:	2800      	cmp	r0, #0
 8006bcc:	da67      	bge.n	8006c9e <_dtoa_r+0x90e>
 8006bce:	9b00      	ldr	r3, [sp, #0]
 8006bd0:	3b01      	subs	r3, #1
 8006bd2:	ee18 1a10 	vmov	r1, s16
 8006bd6:	9300      	str	r3, [sp, #0]
 8006bd8:	220a      	movs	r2, #10
 8006bda:	2300      	movs	r3, #0
 8006bdc:	4620      	mov	r0, r4
 8006bde:	f000 fa41 	bl	8007064 <__multadd>
 8006be2:	9b08      	ldr	r3, [sp, #32]
 8006be4:	ee08 0a10 	vmov	s16, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	f000 81b1 	beq.w	8006f50 <_dtoa_r+0xbc0>
 8006bee:	2300      	movs	r3, #0
 8006bf0:	4639      	mov	r1, r7
 8006bf2:	220a      	movs	r2, #10
 8006bf4:	4620      	mov	r0, r4
 8006bf6:	f000 fa35 	bl	8007064 <__multadd>
 8006bfa:	9b02      	ldr	r3, [sp, #8]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	4607      	mov	r7, r0
 8006c00:	f300 808e 	bgt.w	8006d20 <_dtoa_r+0x990>
 8006c04:	9b06      	ldr	r3, [sp, #24]
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	dc51      	bgt.n	8006cae <_dtoa_r+0x91e>
 8006c0a:	e089      	b.n	8006d20 <_dtoa_r+0x990>
 8006c0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006c12:	e74b      	b.n	8006aac <_dtoa_r+0x71c>
 8006c14:	9b03      	ldr	r3, [sp, #12]
 8006c16:	1e5e      	subs	r6, r3, #1
 8006c18:	9b07      	ldr	r3, [sp, #28]
 8006c1a:	42b3      	cmp	r3, r6
 8006c1c:	bfbf      	itttt	lt
 8006c1e:	9b07      	ldrlt	r3, [sp, #28]
 8006c20:	9607      	strlt	r6, [sp, #28]
 8006c22:	1af2      	sublt	r2, r6, r3
 8006c24:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006c26:	bfb6      	itet	lt
 8006c28:	189b      	addlt	r3, r3, r2
 8006c2a:	1b9e      	subge	r6, r3, r6
 8006c2c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006c2e:	9b03      	ldr	r3, [sp, #12]
 8006c30:	bfb8      	it	lt
 8006c32:	2600      	movlt	r6, #0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	bfb7      	itett	lt
 8006c38:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006c3c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006c40:	1a9d      	sublt	r5, r3, r2
 8006c42:	2300      	movlt	r3, #0
 8006c44:	e734      	b.n	8006ab0 <_dtoa_r+0x720>
 8006c46:	9e07      	ldr	r6, [sp, #28]
 8006c48:	9d04      	ldr	r5, [sp, #16]
 8006c4a:	9f08      	ldr	r7, [sp, #32]
 8006c4c:	e73b      	b.n	8006ac6 <_dtoa_r+0x736>
 8006c4e:	9a07      	ldr	r2, [sp, #28]
 8006c50:	e767      	b.n	8006b22 <_dtoa_r+0x792>
 8006c52:	9b06      	ldr	r3, [sp, #24]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	dc18      	bgt.n	8006c8a <_dtoa_r+0x8fa>
 8006c58:	f1ba 0f00 	cmp.w	sl, #0
 8006c5c:	d115      	bne.n	8006c8a <_dtoa_r+0x8fa>
 8006c5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c62:	b993      	cbnz	r3, 8006c8a <_dtoa_r+0x8fa>
 8006c64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006c68:	0d1b      	lsrs	r3, r3, #20
 8006c6a:	051b      	lsls	r3, r3, #20
 8006c6c:	b183      	cbz	r3, 8006c90 <_dtoa_r+0x900>
 8006c6e:	9b04      	ldr	r3, [sp, #16]
 8006c70:	3301      	adds	r3, #1
 8006c72:	9304      	str	r3, [sp, #16]
 8006c74:	9b05      	ldr	r3, [sp, #20]
 8006c76:	3301      	adds	r3, #1
 8006c78:	9305      	str	r3, [sp, #20]
 8006c7a:	f04f 0801 	mov.w	r8, #1
 8006c7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f47f af6a 	bne.w	8006b5a <_dtoa_r+0x7ca>
 8006c86:	2001      	movs	r0, #1
 8006c88:	e76f      	b.n	8006b6a <_dtoa_r+0x7da>
 8006c8a:	f04f 0800 	mov.w	r8, #0
 8006c8e:	e7f6      	b.n	8006c7e <_dtoa_r+0x8ee>
 8006c90:	4698      	mov	r8, r3
 8006c92:	e7f4      	b.n	8006c7e <_dtoa_r+0x8ee>
 8006c94:	f43f af7d 	beq.w	8006b92 <_dtoa_r+0x802>
 8006c98:	4618      	mov	r0, r3
 8006c9a:	301c      	adds	r0, #28
 8006c9c:	e772      	b.n	8006b84 <_dtoa_r+0x7f4>
 8006c9e:	9b03      	ldr	r3, [sp, #12]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	dc37      	bgt.n	8006d14 <_dtoa_r+0x984>
 8006ca4:	9b06      	ldr	r3, [sp, #24]
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	dd34      	ble.n	8006d14 <_dtoa_r+0x984>
 8006caa:	9b03      	ldr	r3, [sp, #12]
 8006cac:	9302      	str	r3, [sp, #8]
 8006cae:	9b02      	ldr	r3, [sp, #8]
 8006cb0:	b96b      	cbnz	r3, 8006cce <_dtoa_r+0x93e>
 8006cb2:	4631      	mov	r1, r6
 8006cb4:	2205      	movs	r2, #5
 8006cb6:	4620      	mov	r0, r4
 8006cb8:	f000 f9d4 	bl	8007064 <__multadd>
 8006cbc:	4601      	mov	r1, r0
 8006cbe:	4606      	mov	r6, r0
 8006cc0:	ee18 0a10 	vmov	r0, s16
 8006cc4:	f000 fbee 	bl	80074a4 <__mcmp>
 8006cc8:	2800      	cmp	r0, #0
 8006cca:	f73f adbb 	bgt.w	8006844 <_dtoa_r+0x4b4>
 8006cce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cd0:	9d01      	ldr	r5, [sp, #4]
 8006cd2:	43db      	mvns	r3, r3
 8006cd4:	9300      	str	r3, [sp, #0]
 8006cd6:	f04f 0800 	mov.w	r8, #0
 8006cda:	4631      	mov	r1, r6
 8006cdc:	4620      	mov	r0, r4
 8006cde:	f000 f99f 	bl	8007020 <_Bfree>
 8006ce2:	2f00      	cmp	r7, #0
 8006ce4:	f43f aea4 	beq.w	8006a30 <_dtoa_r+0x6a0>
 8006ce8:	f1b8 0f00 	cmp.w	r8, #0
 8006cec:	d005      	beq.n	8006cfa <_dtoa_r+0x96a>
 8006cee:	45b8      	cmp	r8, r7
 8006cf0:	d003      	beq.n	8006cfa <_dtoa_r+0x96a>
 8006cf2:	4641      	mov	r1, r8
 8006cf4:	4620      	mov	r0, r4
 8006cf6:	f000 f993 	bl	8007020 <_Bfree>
 8006cfa:	4639      	mov	r1, r7
 8006cfc:	4620      	mov	r0, r4
 8006cfe:	f000 f98f 	bl	8007020 <_Bfree>
 8006d02:	e695      	b.n	8006a30 <_dtoa_r+0x6a0>
 8006d04:	2600      	movs	r6, #0
 8006d06:	4637      	mov	r7, r6
 8006d08:	e7e1      	b.n	8006cce <_dtoa_r+0x93e>
 8006d0a:	9700      	str	r7, [sp, #0]
 8006d0c:	4637      	mov	r7, r6
 8006d0e:	e599      	b.n	8006844 <_dtoa_r+0x4b4>
 8006d10:	40240000 	.word	0x40240000
 8006d14:	9b08      	ldr	r3, [sp, #32]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	f000 80ca 	beq.w	8006eb0 <_dtoa_r+0xb20>
 8006d1c:	9b03      	ldr	r3, [sp, #12]
 8006d1e:	9302      	str	r3, [sp, #8]
 8006d20:	2d00      	cmp	r5, #0
 8006d22:	dd05      	ble.n	8006d30 <_dtoa_r+0x9a0>
 8006d24:	4639      	mov	r1, r7
 8006d26:	462a      	mov	r2, r5
 8006d28:	4620      	mov	r0, r4
 8006d2a:	f000 fb4b 	bl	80073c4 <__lshift>
 8006d2e:	4607      	mov	r7, r0
 8006d30:	f1b8 0f00 	cmp.w	r8, #0
 8006d34:	d05b      	beq.n	8006dee <_dtoa_r+0xa5e>
 8006d36:	6879      	ldr	r1, [r7, #4]
 8006d38:	4620      	mov	r0, r4
 8006d3a:	f000 f931 	bl	8006fa0 <_Balloc>
 8006d3e:	4605      	mov	r5, r0
 8006d40:	b928      	cbnz	r0, 8006d4e <_dtoa_r+0x9be>
 8006d42:	4b87      	ldr	r3, [pc, #540]	; (8006f60 <_dtoa_r+0xbd0>)
 8006d44:	4602      	mov	r2, r0
 8006d46:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006d4a:	f7ff bb3b 	b.w	80063c4 <_dtoa_r+0x34>
 8006d4e:	693a      	ldr	r2, [r7, #16]
 8006d50:	3202      	adds	r2, #2
 8006d52:	0092      	lsls	r2, r2, #2
 8006d54:	f107 010c 	add.w	r1, r7, #12
 8006d58:	300c      	adds	r0, #12
 8006d5a:	f000 f913 	bl	8006f84 <memcpy>
 8006d5e:	2201      	movs	r2, #1
 8006d60:	4629      	mov	r1, r5
 8006d62:	4620      	mov	r0, r4
 8006d64:	f000 fb2e 	bl	80073c4 <__lshift>
 8006d68:	9b01      	ldr	r3, [sp, #4]
 8006d6a:	f103 0901 	add.w	r9, r3, #1
 8006d6e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006d72:	4413      	add	r3, r2
 8006d74:	9305      	str	r3, [sp, #20]
 8006d76:	f00a 0301 	and.w	r3, sl, #1
 8006d7a:	46b8      	mov	r8, r7
 8006d7c:	9304      	str	r3, [sp, #16]
 8006d7e:	4607      	mov	r7, r0
 8006d80:	4631      	mov	r1, r6
 8006d82:	ee18 0a10 	vmov	r0, s16
 8006d86:	f7ff fa77 	bl	8006278 <quorem>
 8006d8a:	4641      	mov	r1, r8
 8006d8c:	9002      	str	r0, [sp, #8]
 8006d8e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006d92:	ee18 0a10 	vmov	r0, s16
 8006d96:	f000 fb85 	bl	80074a4 <__mcmp>
 8006d9a:	463a      	mov	r2, r7
 8006d9c:	9003      	str	r0, [sp, #12]
 8006d9e:	4631      	mov	r1, r6
 8006da0:	4620      	mov	r0, r4
 8006da2:	f000 fb9b 	bl	80074dc <__mdiff>
 8006da6:	68c2      	ldr	r2, [r0, #12]
 8006da8:	f109 3bff 	add.w	fp, r9, #4294967295
 8006dac:	4605      	mov	r5, r0
 8006dae:	bb02      	cbnz	r2, 8006df2 <_dtoa_r+0xa62>
 8006db0:	4601      	mov	r1, r0
 8006db2:	ee18 0a10 	vmov	r0, s16
 8006db6:	f000 fb75 	bl	80074a4 <__mcmp>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	4629      	mov	r1, r5
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	9207      	str	r2, [sp, #28]
 8006dc2:	f000 f92d 	bl	8007020 <_Bfree>
 8006dc6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006dca:	ea43 0102 	orr.w	r1, r3, r2
 8006dce:	9b04      	ldr	r3, [sp, #16]
 8006dd0:	430b      	orrs	r3, r1
 8006dd2:	464d      	mov	r5, r9
 8006dd4:	d10f      	bne.n	8006df6 <_dtoa_r+0xa66>
 8006dd6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006dda:	d02a      	beq.n	8006e32 <_dtoa_r+0xaa2>
 8006ddc:	9b03      	ldr	r3, [sp, #12]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	dd02      	ble.n	8006de8 <_dtoa_r+0xa58>
 8006de2:	9b02      	ldr	r3, [sp, #8]
 8006de4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006de8:	f88b a000 	strb.w	sl, [fp]
 8006dec:	e775      	b.n	8006cda <_dtoa_r+0x94a>
 8006dee:	4638      	mov	r0, r7
 8006df0:	e7ba      	b.n	8006d68 <_dtoa_r+0x9d8>
 8006df2:	2201      	movs	r2, #1
 8006df4:	e7e2      	b.n	8006dbc <_dtoa_r+0xa2c>
 8006df6:	9b03      	ldr	r3, [sp, #12]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	db04      	blt.n	8006e06 <_dtoa_r+0xa76>
 8006dfc:	9906      	ldr	r1, [sp, #24]
 8006dfe:	430b      	orrs	r3, r1
 8006e00:	9904      	ldr	r1, [sp, #16]
 8006e02:	430b      	orrs	r3, r1
 8006e04:	d122      	bne.n	8006e4c <_dtoa_r+0xabc>
 8006e06:	2a00      	cmp	r2, #0
 8006e08:	ddee      	ble.n	8006de8 <_dtoa_r+0xa58>
 8006e0a:	ee18 1a10 	vmov	r1, s16
 8006e0e:	2201      	movs	r2, #1
 8006e10:	4620      	mov	r0, r4
 8006e12:	f000 fad7 	bl	80073c4 <__lshift>
 8006e16:	4631      	mov	r1, r6
 8006e18:	ee08 0a10 	vmov	s16, r0
 8006e1c:	f000 fb42 	bl	80074a4 <__mcmp>
 8006e20:	2800      	cmp	r0, #0
 8006e22:	dc03      	bgt.n	8006e2c <_dtoa_r+0xa9c>
 8006e24:	d1e0      	bne.n	8006de8 <_dtoa_r+0xa58>
 8006e26:	f01a 0f01 	tst.w	sl, #1
 8006e2a:	d0dd      	beq.n	8006de8 <_dtoa_r+0xa58>
 8006e2c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006e30:	d1d7      	bne.n	8006de2 <_dtoa_r+0xa52>
 8006e32:	2339      	movs	r3, #57	; 0x39
 8006e34:	f88b 3000 	strb.w	r3, [fp]
 8006e38:	462b      	mov	r3, r5
 8006e3a:	461d      	mov	r5, r3
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006e42:	2a39      	cmp	r2, #57	; 0x39
 8006e44:	d071      	beq.n	8006f2a <_dtoa_r+0xb9a>
 8006e46:	3201      	adds	r2, #1
 8006e48:	701a      	strb	r2, [r3, #0]
 8006e4a:	e746      	b.n	8006cda <_dtoa_r+0x94a>
 8006e4c:	2a00      	cmp	r2, #0
 8006e4e:	dd07      	ble.n	8006e60 <_dtoa_r+0xad0>
 8006e50:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006e54:	d0ed      	beq.n	8006e32 <_dtoa_r+0xaa2>
 8006e56:	f10a 0301 	add.w	r3, sl, #1
 8006e5a:	f88b 3000 	strb.w	r3, [fp]
 8006e5e:	e73c      	b.n	8006cda <_dtoa_r+0x94a>
 8006e60:	9b05      	ldr	r3, [sp, #20]
 8006e62:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006e66:	4599      	cmp	r9, r3
 8006e68:	d047      	beq.n	8006efa <_dtoa_r+0xb6a>
 8006e6a:	ee18 1a10 	vmov	r1, s16
 8006e6e:	2300      	movs	r3, #0
 8006e70:	220a      	movs	r2, #10
 8006e72:	4620      	mov	r0, r4
 8006e74:	f000 f8f6 	bl	8007064 <__multadd>
 8006e78:	45b8      	cmp	r8, r7
 8006e7a:	ee08 0a10 	vmov	s16, r0
 8006e7e:	f04f 0300 	mov.w	r3, #0
 8006e82:	f04f 020a 	mov.w	r2, #10
 8006e86:	4641      	mov	r1, r8
 8006e88:	4620      	mov	r0, r4
 8006e8a:	d106      	bne.n	8006e9a <_dtoa_r+0xb0a>
 8006e8c:	f000 f8ea 	bl	8007064 <__multadd>
 8006e90:	4680      	mov	r8, r0
 8006e92:	4607      	mov	r7, r0
 8006e94:	f109 0901 	add.w	r9, r9, #1
 8006e98:	e772      	b.n	8006d80 <_dtoa_r+0x9f0>
 8006e9a:	f000 f8e3 	bl	8007064 <__multadd>
 8006e9e:	4639      	mov	r1, r7
 8006ea0:	4680      	mov	r8, r0
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	220a      	movs	r2, #10
 8006ea6:	4620      	mov	r0, r4
 8006ea8:	f000 f8dc 	bl	8007064 <__multadd>
 8006eac:	4607      	mov	r7, r0
 8006eae:	e7f1      	b.n	8006e94 <_dtoa_r+0xb04>
 8006eb0:	9b03      	ldr	r3, [sp, #12]
 8006eb2:	9302      	str	r3, [sp, #8]
 8006eb4:	9d01      	ldr	r5, [sp, #4]
 8006eb6:	ee18 0a10 	vmov	r0, s16
 8006eba:	4631      	mov	r1, r6
 8006ebc:	f7ff f9dc 	bl	8006278 <quorem>
 8006ec0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006ec4:	9b01      	ldr	r3, [sp, #4]
 8006ec6:	f805 ab01 	strb.w	sl, [r5], #1
 8006eca:	1aea      	subs	r2, r5, r3
 8006ecc:	9b02      	ldr	r3, [sp, #8]
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	dd09      	ble.n	8006ee6 <_dtoa_r+0xb56>
 8006ed2:	ee18 1a10 	vmov	r1, s16
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	220a      	movs	r2, #10
 8006eda:	4620      	mov	r0, r4
 8006edc:	f000 f8c2 	bl	8007064 <__multadd>
 8006ee0:	ee08 0a10 	vmov	s16, r0
 8006ee4:	e7e7      	b.n	8006eb6 <_dtoa_r+0xb26>
 8006ee6:	9b02      	ldr	r3, [sp, #8]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	bfc8      	it	gt
 8006eec:	461d      	movgt	r5, r3
 8006eee:	9b01      	ldr	r3, [sp, #4]
 8006ef0:	bfd8      	it	le
 8006ef2:	2501      	movle	r5, #1
 8006ef4:	441d      	add	r5, r3
 8006ef6:	f04f 0800 	mov.w	r8, #0
 8006efa:	ee18 1a10 	vmov	r1, s16
 8006efe:	2201      	movs	r2, #1
 8006f00:	4620      	mov	r0, r4
 8006f02:	f000 fa5f 	bl	80073c4 <__lshift>
 8006f06:	4631      	mov	r1, r6
 8006f08:	ee08 0a10 	vmov	s16, r0
 8006f0c:	f000 faca 	bl	80074a4 <__mcmp>
 8006f10:	2800      	cmp	r0, #0
 8006f12:	dc91      	bgt.n	8006e38 <_dtoa_r+0xaa8>
 8006f14:	d102      	bne.n	8006f1c <_dtoa_r+0xb8c>
 8006f16:	f01a 0f01 	tst.w	sl, #1
 8006f1a:	d18d      	bne.n	8006e38 <_dtoa_r+0xaa8>
 8006f1c:	462b      	mov	r3, r5
 8006f1e:	461d      	mov	r5, r3
 8006f20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f24:	2a30      	cmp	r2, #48	; 0x30
 8006f26:	d0fa      	beq.n	8006f1e <_dtoa_r+0xb8e>
 8006f28:	e6d7      	b.n	8006cda <_dtoa_r+0x94a>
 8006f2a:	9a01      	ldr	r2, [sp, #4]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d184      	bne.n	8006e3a <_dtoa_r+0xaaa>
 8006f30:	9b00      	ldr	r3, [sp, #0]
 8006f32:	3301      	adds	r3, #1
 8006f34:	9300      	str	r3, [sp, #0]
 8006f36:	2331      	movs	r3, #49	; 0x31
 8006f38:	7013      	strb	r3, [r2, #0]
 8006f3a:	e6ce      	b.n	8006cda <_dtoa_r+0x94a>
 8006f3c:	4b09      	ldr	r3, [pc, #36]	; (8006f64 <_dtoa_r+0xbd4>)
 8006f3e:	f7ff ba95 	b.w	800646c <_dtoa_r+0xdc>
 8006f42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	f47f aa6e 	bne.w	8006426 <_dtoa_r+0x96>
 8006f4a:	4b07      	ldr	r3, [pc, #28]	; (8006f68 <_dtoa_r+0xbd8>)
 8006f4c:	f7ff ba8e 	b.w	800646c <_dtoa_r+0xdc>
 8006f50:	9b02      	ldr	r3, [sp, #8]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	dcae      	bgt.n	8006eb4 <_dtoa_r+0xb24>
 8006f56:	9b06      	ldr	r3, [sp, #24]
 8006f58:	2b02      	cmp	r3, #2
 8006f5a:	f73f aea8 	bgt.w	8006cae <_dtoa_r+0x91e>
 8006f5e:	e7a9      	b.n	8006eb4 <_dtoa_r+0xb24>
 8006f60:	080088a7 	.word	0x080088a7
 8006f64:	08008804 	.word	0x08008804
 8006f68:	08008828 	.word	0x08008828

08006f6c <_localeconv_r>:
 8006f6c:	4800      	ldr	r0, [pc, #0]	; (8006f70 <_localeconv_r+0x4>)
 8006f6e:	4770      	bx	lr
 8006f70:	20000160 	.word	0x20000160

08006f74 <malloc>:
 8006f74:	4b02      	ldr	r3, [pc, #8]	; (8006f80 <malloc+0xc>)
 8006f76:	4601      	mov	r1, r0
 8006f78:	6818      	ldr	r0, [r3, #0]
 8006f7a:	f000 bc17 	b.w	80077ac <_malloc_r>
 8006f7e:	bf00      	nop
 8006f80:	2000000c 	.word	0x2000000c

08006f84 <memcpy>:
 8006f84:	440a      	add	r2, r1
 8006f86:	4291      	cmp	r1, r2
 8006f88:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f8c:	d100      	bne.n	8006f90 <memcpy+0xc>
 8006f8e:	4770      	bx	lr
 8006f90:	b510      	push	{r4, lr}
 8006f92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f9a:	4291      	cmp	r1, r2
 8006f9c:	d1f9      	bne.n	8006f92 <memcpy+0xe>
 8006f9e:	bd10      	pop	{r4, pc}

08006fa0 <_Balloc>:
 8006fa0:	b570      	push	{r4, r5, r6, lr}
 8006fa2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006fa4:	4604      	mov	r4, r0
 8006fa6:	460d      	mov	r5, r1
 8006fa8:	b976      	cbnz	r6, 8006fc8 <_Balloc+0x28>
 8006faa:	2010      	movs	r0, #16
 8006fac:	f7ff ffe2 	bl	8006f74 <malloc>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	6260      	str	r0, [r4, #36]	; 0x24
 8006fb4:	b920      	cbnz	r0, 8006fc0 <_Balloc+0x20>
 8006fb6:	4b18      	ldr	r3, [pc, #96]	; (8007018 <_Balloc+0x78>)
 8006fb8:	4818      	ldr	r0, [pc, #96]	; (800701c <_Balloc+0x7c>)
 8006fba:	2166      	movs	r1, #102	; 0x66
 8006fbc:	f000 fdd6 	bl	8007b6c <__assert_func>
 8006fc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006fc4:	6006      	str	r6, [r0, #0]
 8006fc6:	60c6      	str	r6, [r0, #12]
 8006fc8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006fca:	68f3      	ldr	r3, [r6, #12]
 8006fcc:	b183      	cbz	r3, 8006ff0 <_Balloc+0x50>
 8006fce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006fd6:	b9b8      	cbnz	r0, 8007008 <_Balloc+0x68>
 8006fd8:	2101      	movs	r1, #1
 8006fda:	fa01 f605 	lsl.w	r6, r1, r5
 8006fde:	1d72      	adds	r2, r6, #5
 8006fe0:	0092      	lsls	r2, r2, #2
 8006fe2:	4620      	mov	r0, r4
 8006fe4:	f000 fb60 	bl	80076a8 <_calloc_r>
 8006fe8:	b160      	cbz	r0, 8007004 <_Balloc+0x64>
 8006fea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006fee:	e00e      	b.n	800700e <_Balloc+0x6e>
 8006ff0:	2221      	movs	r2, #33	; 0x21
 8006ff2:	2104      	movs	r1, #4
 8006ff4:	4620      	mov	r0, r4
 8006ff6:	f000 fb57 	bl	80076a8 <_calloc_r>
 8006ffa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ffc:	60f0      	str	r0, [r6, #12]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d1e4      	bne.n	8006fce <_Balloc+0x2e>
 8007004:	2000      	movs	r0, #0
 8007006:	bd70      	pop	{r4, r5, r6, pc}
 8007008:	6802      	ldr	r2, [r0, #0]
 800700a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800700e:	2300      	movs	r3, #0
 8007010:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007014:	e7f7      	b.n	8007006 <_Balloc+0x66>
 8007016:	bf00      	nop
 8007018:	08008835 	.word	0x08008835
 800701c:	080088b8 	.word	0x080088b8

08007020 <_Bfree>:
 8007020:	b570      	push	{r4, r5, r6, lr}
 8007022:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007024:	4605      	mov	r5, r0
 8007026:	460c      	mov	r4, r1
 8007028:	b976      	cbnz	r6, 8007048 <_Bfree+0x28>
 800702a:	2010      	movs	r0, #16
 800702c:	f7ff ffa2 	bl	8006f74 <malloc>
 8007030:	4602      	mov	r2, r0
 8007032:	6268      	str	r0, [r5, #36]	; 0x24
 8007034:	b920      	cbnz	r0, 8007040 <_Bfree+0x20>
 8007036:	4b09      	ldr	r3, [pc, #36]	; (800705c <_Bfree+0x3c>)
 8007038:	4809      	ldr	r0, [pc, #36]	; (8007060 <_Bfree+0x40>)
 800703a:	218a      	movs	r1, #138	; 0x8a
 800703c:	f000 fd96 	bl	8007b6c <__assert_func>
 8007040:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007044:	6006      	str	r6, [r0, #0]
 8007046:	60c6      	str	r6, [r0, #12]
 8007048:	b13c      	cbz	r4, 800705a <_Bfree+0x3a>
 800704a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800704c:	6862      	ldr	r2, [r4, #4]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007054:	6021      	str	r1, [r4, #0]
 8007056:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800705a:	bd70      	pop	{r4, r5, r6, pc}
 800705c:	08008835 	.word	0x08008835
 8007060:	080088b8 	.word	0x080088b8

08007064 <__multadd>:
 8007064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007068:	690d      	ldr	r5, [r1, #16]
 800706a:	4607      	mov	r7, r0
 800706c:	460c      	mov	r4, r1
 800706e:	461e      	mov	r6, r3
 8007070:	f101 0c14 	add.w	ip, r1, #20
 8007074:	2000      	movs	r0, #0
 8007076:	f8dc 3000 	ldr.w	r3, [ip]
 800707a:	b299      	uxth	r1, r3
 800707c:	fb02 6101 	mla	r1, r2, r1, r6
 8007080:	0c1e      	lsrs	r6, r3, #16
 8007082:	0c0b      	lsrs	r3, r1, #16
 8007084:	fb02 3306 	mla	r3, r2, r6, r3
 8007088:	b289      	uxth	r1, r1
 800708a:	3001      	adds	r0, #1
 800708c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007090:	4285      	cmp	r5, r0
 8007092:	f84c 1b04 	str.w	r1, [ip], #4
 8007096:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800709a:	dcec      	bgt.n	8007076 <__multadd+0x12>
 800709c:	b30e      	cbz	r6, 80070e2 <__multadd+0x7e>
 800709e:	68a3      	ldr	r3, [r4, #8]
 80070a0:	42ab      	cmp	r3, r5
 80070a2:	dc19      	bgt.n	80070d8 <__multadd+0x74>
 80070a4:	6861      	ldr	r1, [r4, #4]
 80070a6:	4638      	mov	r0, r7
 80070a8:	3101      	adds	r1, #1
 80070aa:	f7ff ff79 	bl	8006fa0 <_Balloc>
 80070ae:	4680      	mov	r8, r0
 80070b0:	b928      	cbnz	r0, 80070be <__multadd+0x5a>
 80070b2:	4602      	mov	r2, r0
 80070b4:	4b0c      	ldr	r3, [pc, #48]	; (80070e8 <__multadd+0x84>)
 80070b6:	480d      	ldr	r0, [pc, #52]	; (80070ec <__multadd+0x88>)
 80070b8:	21b5      	movs	r1, #181	; 0xb5
 80070ba:	f000 fd57 	bl	8007b6c <__assert_func>
 80070be:	6922      	ldr	r2, [r4, #16]
 80070c0:	3202      	adds	r2, #2
 80070c2:	f104 010c 	add.w	r1, r4, #12
 80070c6:	0092      	lsls	r2, r2, #2
 80070c8:	300c      	adds	r0, #12
 80070ca:	f7ff ff5b 	bl	8006f84 <memcpy>
 80070ce:	4621      	mov	r1, r4
 80070d0:	4638      	mov	r0, r7
 80070d2:	f7ff ffa5 	bl	8007020 <_Bfree>
 80070d6:	4644      	mov	r4, r8
 80070d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80070dc:	3501      	adds	r5, #1
 80070de:	615e      	str	r6, [r3, #20]
 80070e0:	6125      	str	r5, [r4, #16]
 80070e2:	4620      	mov	r0, r4
 80070e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070e8:	080088a7 	.word	0x080088a7
 80070ec:	080088b8 	.word	0x080088b8

080070f0 <__hi0bits>:
 80070f0:	0c03      	lsrs	r3, r0, #16
 80070f2:	041b      	lsls	r3, r3, #16
 80070f4:	b9d3      	cbnz	r3, 800712c <__hi0bits+0x3c>
 80070f6:	0400      	lsls	r0, r0, #16
 80070f8:	2310      	movs	r3, #16
 80070fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80070fe:	bf04      	itt	eq
 8007100:	0200      	lsleq	r0, r0, #8
 8007102:	3308      	addeq	r3, #8
 8007104:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007108:	bf04      	itt	eq
 800710a:	0100      	lsleq	r0, r0, #4
 800710c:	3304      	addeq	r3, #4
 800710e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007112:	bf04      	itt	eq
 8007114:	0080      	lsleq	r0, r0, #2
 8007116:	3302      	addeq	r3, #2
 8007118:	2800      	cmp	r0, #0
 800711a:	db05      	blt.n	8007128 <__hi0bits+0x38>
 800711c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007120:	f103 0301 	add.w	r3, r3, #1
 8007124:	bf08      	it	eq
 8007126:	2320      	moveq	r3, #32
 8007128:	4618      	mov	r0, r3
 800712a:	4770      	bx	lr
 800712c:	2300      	movs	r3, #0
 800712e:	e7e4      	b.n	80070fa <__hi0bits+0xa>

08007130 <__lo0bits>:
 8007130:	6803      	ldr	r3, [r0, #0]
 8007132:	f013 0207 	ands.w	r2, r3, #7
 8007136:	4601      	mov	r1, r0
 8007138:	d00b      	beq.n	8007152 <__lo0bits+0x22>
 800713a:	07da      	lsls	r2, r3, #31
 800713c:	d423      	bmi.n	8007186 <__lo0bits+0x56>
 800713e:	0798      	lsls	r0, r3, #30
 8007140:	bf49      	itett	mi
 8007142:	085b      	lsrmi	r3, r3, #1
 8007144:	089b      	lsrpl	r3, r3, #2
 8007146:	2001      	movmi	r0, #1
 8007148:	600b      	strmi	r3, [r1, #0]
 800714a:	bf5c      	itt	pl
 800714c:	600b      	strpl	r3, [r1, #0]
 800714e:	2002      	movpl	r0, #2
 8007150:	4770      	bx	lr
 8007152:	b298      	uxth	r0, r3
 8007154:	b9a8      	cbnz	r0, 8007182 <__lo0bits+0x52>
 8007156:	0c1b      	lsrs	r3, r3, #16
 8007158:	2010      	movs	r0, #16
 800715a:	b2da      	uxtb	r2, r3
 800715c:	b90a      	cbnz	r2, 8007162 <__lo0bits+0x32>
 800715e:	3008      	adds	r0, #8
 8007160:	0a1b      	lsrs	r3, r3, #8
 8007162:	071a      	lsls	r2, r3, #28
 8007164:	bf04      	itt	eq
 8007166:	091b      	lsreq	r3, r3, #4
 8007168:	3004      	addeq	r0, #4
 800716a:	079a      	lsls	r2, r3, #30
 800716c:	bf04      	itt	eq
 800716e:	089b      	lsreq	r3, r3, #2
 8007170:	3002      	addeq	r0, #2
 8007172:	07da      	lsls	r2, r3, #31
 8007174:	d403      	bmi.n	800717e <__lo0bits+0x4e>
 8007176:	085b      	lsrs	r3, r3, #1
 8007178:	f100 0001 	add.w	r0, r0, #1
 800717c:	d005      	beq.n	800718a <__lo0bits+0x5a>
 800717e:	600b      	str	r3, [r1, #0]
 8007180:	4770      	bx	lr
 8007182:	4610      	mov	r0, r2
 8007184:	e7e9      	b.n	800715a <__lo0bits+0x2a>
 8007186:	2000      	movs	r0, #0
 8007188:	4770      	bx	lr
 800718a:	2020      	movs	r0, #32
 800718c:	4770      	bx	lr
	...

08007190 <__i2b>:
 8007190:	b510      	push	{r4, lr}
 8007192:	460c      	mov	r4, r1
 8007194:	2101      	movs	r1, #1
 8007196:	f7ff ff03 	bl	8006fa0 <_Balloc>
 800719a:	4602      	mov	r2, r0
 800719c:	b928      	cbnz	r0, 80071aa <__i2b+0x1a>
 800719e:	4b05      	ldr	r3, [pc, #20]	; (80071b4 <__i2b+0x24>)
 80071a0:	4805      	ldr	r0, [pc, #20]	; (80071b8 <__i2b+0x28>)
 80071a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80071a6:	f000 fce1 	bl	8007b6c <__assert_func>
 80071aa:	2301      	movs	r3, #1
 80071ac:	6144      	str	r4, [r0, #20]
 80071ae:	6103      	str	r3, [r0, #16]
 80071b0:	bd10      	pop	{r4, pc}
 80071b2:	bf00      	nop
 80071b4:	080088a7 	.word	0x080088a7
 80071b8:	080088b8 	.word	0x080088b8

080071bc <__multiply>:
 80071bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c0:	4691      	mov	r9, r2
 80071c2:	690a      	ldr	r2, [r1, #16]
 80071c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	bfb8      	it	lt
 80071cc:	460b      	movlt	r3, r1
 80071ce:	460c      	mov	r4, r1
 80071d0:	bfbc      	itt	lt
 80071d2:	464c      	movlt	r4, r9
 80071d4:	4699      	movlt	r9, r3
 80071d6:	6927      	ldr	r7, [r4, #16]
 80071d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80071dc:	68a3      	ldr	r3, [r4, #8]
 80071de:	6861      	ldr	r1, [r4, #4]
 80071e0:	eb07 060a 	add.w	r6, r7, sl
 80071e4:	42b3      	cmp	r3, r6
 80071e6:	b085      	sub	sp, #20
 80071e8:	bfb8      	it	lt
 80071ea:	3101      	addlt	r1, #1
 80071ec:	f7ff fed8 	bl	8006fa0 <_Balloc>
 80071f0:	b930      	cbnz	r0, 8007200 <__multiply+0x44>
 80071f2:	4602      	mov	r2, r0
 80071f4:	4b44      	ldr	r3, [pc, #272]	; (8007308 <__multiply+0x14c>)
 80071f6:	4845      	ldr	r0, [pc, #276]	; (800730c <__multiply+0x150>)
 80071f8:	f240 115d 	movw	r1, #349	; 0x15d
 80071fc:	f000 fcb6 	bl	8007b6c <__assert_func>
 8007200:	f100 0514 	add.w	r5, r0, #20
 8007204:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007208:	462b      	mov	r3, r5
 800720a:	2200      	movs	r2, #0
 800720c:	4543      	cmp	r3, r8
 800720e:	d321      	bcc.n	8007254 <__multiply+0x98>
 8007210:	f104 0314 	add.w	r3, r4, #20
 8007214:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007218:	f109 0314 	add.w	r3, r9, #20
 800721c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007220:	9202      	str	r2, [sp, #8]
 8007222:	1b3a      	subs	r2, r7, r4
 8007224:	3a15      	subs	r2, #21
 8007226:	f022 0203 	bic.w	r2, r2, #3
 800722a:	3204      	adds	r2, #4
 800722c:	f104 0115 	add.w	r1, r4, #21
 8007230:	428f      	cmp	r7, r1
 8007232:	bf38      	it	cc
 8007234:	2204      	movcc	r2, #4
 8007236:	9201      	str	r2, [sp, #4]
 8007238:	9a02      	ldr	r2, [sp, #8]
 800723a:	9303      	str	r3, [sp, #12]
 800723c:	429a      	cmp	r2, r3
 800723e:	d80c      	bhi.n	800725a <__multiply+0x9e>
 8007240:	2e00      	cmp	r6, #0
 8007242:	dd03      	ble.n	800724c <__multiply+0x90>
 8007244:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007248:	2b00      	cmp	r3, #0
 800724a:	d05a      	beq.n	8007302 <__multiply+0x146>
 800724c:	6106      	str	r6, [r0, #16]
 800724e:	b005      	add	sp, #20
 8007250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007254:	f843 2b04 	str.w	r2, [r3], #4
 8007258:	e7d8      	b.n	800720c <__multiply+0x50>
 800725a:	f8b3 a000 	ldrh.w	sl, [r3]
 800725e:	f1ba 0f00 	cmp.w	sl, #0
 8007262:	d024      	beq.n	80072ae <__multiply+0xf2>
 8007264:	f104 0e14 	add.w	lr, r4, #20
 8007268:	46a9      	mov	r9, r5
 800726a:	f04f 0c00 	mov.w	ip, #0
 800726e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007272:	f8d9 1000 	ldr.w	r1, [r9]
 8007276:	fa1f fb82 	uxth.w	fp, r2
 800727a:	b289      	uxth	r1, r1
 800727c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007280:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007284:	f8d9 2000 	ldr.w	r2, [r9]
 8007288:	4461      	add	r1, ip
 800728a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800728e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007292:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007296:	b289      	uxth	r1, r1
 8007298:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800729c:	4577      	cmp	r7, lr
 800729e:	f849 1b04 	str.w	r1, [r9], #4
 80072a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80072a6:	d8e2      	bhi.n	800726e <__multiply+0xb2>
 80072a8:	9a01      	ldr	r2, [sp, #4]
 80072aa:	f845 c002 	str.w	ip, [r5, r2]
 80072ae:	9a03      	ldr	r2, [sp, #12]
 80072b0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80072b4:	3304      	adds	r3, #4
 80072b6:	f1b9 0f00 	cmp.w	r9, #0
 80072ba:	d020      	beq.n	80072fe <__multiply+0x142>
 80072bc:	6829      	ldr	r1, [r5, #0]
 80072be:	f104 0c14 	add.w	ip, r4, #20
 80072c2:	46ae      	mov	lr, r5
 80072c4:	f04f 0a00 	mov.w	sl, #0
 80072c8:	f8bc b000 	ldrh.w	fp, [ip]
 80072cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80072d0:	fb09 220b 	mla	r2, r9, fp, r2
 80072d4:	4492      	add	sl, r2
 80072d6:	b289      	uxth	r1, r1
 80072d8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80072dc:	f84e 1b04 	str.w	r1, [lr], #4
 80072e0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80072e4:	f8be 1000 	ldrh.w	r1, [lr]
 80072e8:	0c12      	lsrs	r2, r2, #16
 80072ea:	fb09 1102 	mla	r1, r9, r2, r1
 80072ee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80072f2:	4567      	cmp	r7, ip
 80072f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80072f8:	d8e6      	bhi.n	80072c8 <__multiply+0x10c>
 80072fa:	9a01      	ldr	r2, [sp, #4]
 80072fc:	50a9      	str	r1, [r5, r2]
 80072fe:	3504      	adds	r5, #4
 8007300:	e79a      	b.n	8007238 <__multiply+0x7c>
 8007302:	3e01      	subs	r6, #1
 8007304:	e79c      	b.n	8007240 <__multiply+0x84>
 8007306:	bf00      	nop
 8007308:	080088a7 	.word	0x080088a7
 800730c:	080088b8 	.word	0x080088b8

08007310 <__pow5mult>:
 8007310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007314:	4615      	mov	r5, r2
 8007316:	f012 0203 	ands.w	r2, r2, #3
 800731a:	4606      	mov	r6, r0
 800731c:	460f      	mov	r7, r1
 800731e:	d007      	beq.n	8007330 <__pow5mult+0x20>
 8007320:	4c25      	ldr	r4, [pc, #148]	; (80073b8 <__pow5mult+0xa8>)
 8007322:	3a01      	subs	r2, #1
 8007324:	2300      	movs	r3, #0
 8007326:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800732a:	f7ff fe9b 	bl	8007064 <__multadd>
 800732e:	4607      	mov	r7, r0
 8007330:	10ad      	asrs	r5, r5, #2
 8007332:	d03d      	beq.n	80073b0 <__pow5mult+0xa0>
 8007334:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007336:	b97c      	cbnz	r4, 8007358 <__pow5mult+0x48>
 8007338:	2010      	movs	r0, #16
 800733a:	f7ff fe1b 	bl	8006f74 <malloc>
 800733e:	4602      	mov	r2, r0
 8007340:	6270      	str	r0, [r6, #36]	; 0x24
 8007342:	b928      	cbnz	r0, 8007350 <__pow5mult+0x40>
 8007344:	4b1d      	ldr	r3, [pc, #116]	; (80073bc <__pow5mult+0xac>)
 8007346:	481e      	ldr	r0, [pc, #120]	; (80073c0 <__pow5mult+0xb0>)
 8007348:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800734c:	f000 fc0e 	bl	8007b6c <__assert_func>
 8007350:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007354:	6004      	str	r4, [r0, #0]
 8007356:	60c4      	str	r4, [r0, #12]
 8007358:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800735c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007360:	b94c      	cbnz	r4, 8007376 <__pow5mult+0x66>
 8007362:	f240 2171 	movw	r1, #625	; 0x271
 8007366:	4630      	mov	r0, r6
 8007368:	f7ff ff12 	bl	8007190 <__i2b>
 800736c:	2300      	movs	r3, #0
 800736e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007372:	4604      	mov	r4, r0
 8007374:	6003      	str	r3, [r0, #0]
 8007376:	f04f 0900 	mov.w	r9, #0
 800737a:	07eb      	lsls	r3, r5, #31
 800737c:	d50a      	bpl.n	8007394 <__pow5mult+0x84>
 800737e:	4639      	mov	r1, r7
 8007380:	4622      	mov	r2, r4
 8007382:	4630      	mov	r0, r6
 8007384:	f7ff ff1a 	bl	80071bc <__multiply>
 8007388:	4639      	mov	r1, r7
 800738a:	4680      	mov	r8, r0
 800738c:	4630      	mov	r0, r6
 800738e:	f7ff fe47 	bl	8007020 <_Bfree>
 8007392:	4647      	mov	r7, r8
 8007394:	106d      	asrs	r5, r5, #1
 8007396:	d00b      	beq.n	80073b0 <__pow5mult+0xa0>
 8007398:	6820      	ldr	r0, [r4, #0]
 800739a:	b938      	cbnz	r0, 80073ac <__pow5mult+0x9c>
 800739c:	4622      	mov	r2, r4
 800739e:	4621      	mov	r1, r4
 80073a0:	4630      	mov	r0, r6
 80073a2:	f7ff ff0b 	bl	80071bc <__multiply>
 80073a6:	6020      	str	r0, [r4, #0]
 80073a8:	f8c0 9000 	str.w	r9, [r0]
 80073ac:	4604      	mov	r4, r0
 80073ae:	e7e4      	b.n	800737a <__pow5mult+0x6a>
 80073b0:	4638      	mov	r0, r7
 80073b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073b6:	bf00      	nop
 80073b8:	08008a08 	.word	0x08008a08
 80073bc:	08008835 	.word	0x08008835
 80073c0:	080088b8 	.word	0x080088b8

080073c4 <__lshift>:
 80073c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073c8:	460c      	mov	r4, r1
 80073ca:	6849      	ldr	r1, [r1, #4]
 80073cc:	6923      	ldr	r3, [r4, #16]
 80073ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80073d2:	68a3      	ldr	r3, [r4, #8]
 80073d4:	4607      	mov	r7, r0
 80073d6:	4691      	mov	r9, r2
 80073d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80073dc:	f108 0601 	add.w	r6, r8, #1
 80073e0:	42b3      	cmp	r3, r6
 80073e2:	db0b      	blt.n	80073fc <__lshift+0x38>
 80073e4:	4638      	mov	r0, r7
 80073e6:	f7ff fddb 	bl	8006fa0 <_Balloc>
 80073ea:	4605      	mov	r5, r0
 80073ec:	b948      	cbnz	r0, 8007402 <__lshift+0x3e>
 80073ee:	4602      	mov	r2, r0
 80073f0:	4b2a      	ldr	r3, [pc, #168]	; (800749c <__lshift+0xd8>)
 80073f2:	482b      	ldr	r0, [pc, #172]	; (80074a0 <__lshift+0xdc>)
 80073f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80073f8:	f000 fbb8 	bl	8007b6c <__assert_func>
 80073fc:	3101      	adds	r1, #1
 80073fe:	005b      	lsls	r3, r3, #1
 8007400:	e7ee      	b.n	80073e0 <__lshift+0x1c>
 8007402:	2300      	movs	r3, #0
 8007404:	f100 0114 	add.w	r1, r0, #20
 8007408:	f100 0210 	add.w	r2, r0, #16
 800740c:	4618      	mov	r0, r3
 800740e:	4553      	cmp	r3, sl
 8007410:	db37      	blt.n	8007482 <__lshift+0xbe>
 8007412:	6920      	ldr	r0, [r4, #16]
 8007414:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007418:	f104 0314 	add.w	r3, r4, #20
 800741c:	f019 091f 	ands.w	r9, r9, #31
 8007420:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007424:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007428:	d02f      	beq.n	800748a <__lshift+0xc6>
 800742a:	f1c9 0e20 	rsb	lr, r9, #32
 800742e:	468a      	mov	sl, r1
 8007430:	f04f 0c00 	mov.w	ip, #0
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	fa02 f209 	lsl.w	r2, r2, r9
 800743a:	ea42 020c 	orr.w	r2, r2, ip
 800743e:	f84a 2b04 	str.w	r2, [sl], #4
 8007442:	f853 2b04 	ldr.w	r2, [r3], #4
 8007446:	4298      	cmp	r0, r3
 8007448:	fa22 fc0e 	lsr.w	ip, r2, lr
 800744c:	d8f2      	bhi.n	8007434 <__lshift+0x70>
 800744e:	1b03      	subs	r3, r0, r4
 8007450:	3b15      	subs	r3, #21
 8007452:	f023 0303 	bic.w	r3, r3, #3
 8007456:	3304      	adds	r3, #4
 8007458:	f104 0215 	add.w	r2, r4, #21
 800745c:	4290      	cmp	r0, r2
 800745e:	bf38      	it	cc
 8007460:	2304      	movcc	r3, #4
 8007462:	f841 c003 	str.w	ip, [r1, r3]
 8007466:	f1bc 0f00 	cmp.w	ip, #0
 800746a:	d001      	beq.n	8007470 <__lshift+0xac>
 800746c:	f108 0602 	add.w	r6, r8, #2
 8007470:	3e01      	subs	r6, #1
 8007472:	4638      	mov	r0, r7
 8007474:	612e      	str	r6, [r5, #16]
 8007476:	4621      	mov	r1, r4
 8007478:	f7ff fdd2 	bl	8007020 <_Bfree>
 800747c:	4628      	mov	r0, r5
 800747e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007482:	f842 0f04 	str.w	r0, [r2, #4]!
 8007486:	3301      	adds	r3, #1
 8007488:	e7c1      	b.n	800740e <__lshift+0x4a>
 800748a:	3904      	subs	r1, #4
 800748c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007490:	f841 2f04 	str.w	r2, [r1, #4]!
 8007494:	4298      	cmp	r0, r3
 8007496:	d8f9      	bhi.n	800748c <__lshift+0xc8>
 8007498:	e7ea      	b.n	8007470 <__lshift+0xac>
 800749a:	bf00      	nop
 800749c:	080088a7 	.word	0x080088a7
 80074a0:	080088b8 	.word	0x080088b8

080074a4 <__mcmp>:
 80074a4:	b530      	push	{r4, r5, lr}
 80074a6:	6902      	ldr	r2, [r0, #16]
 80074a8:	690c      	ldr	r4, [r1, #16]
 80074aa:	1b12      	subs	r2, r2, r4
 80074ac:	d10e      	bne.n	80074cc <__mcmp+0x28>
 80074ae:	f100 0314 	add.w	r3, r0, #20
 80074b2:	3114      	adds	r1, #20
 80074b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80074b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80074bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80074c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80074c4:	42a5      	cmp	r5, r4
 80074c6:	d003      	beq.n	80074d0 <__mcmp+0x2c>
 80074c8:	d305      	bcc.n	80074d6 <__mcmp+0x32>
 80074ca:	2201      	movs	r2, #1
 80074cc:	4610      	mov	r0, r2
 80074ce:	bd30      	pop	{r4, r5, pc}
 80074d0:	4283      	cmp	r3, r0
 80074d2:	d3f3      	bcc.n	80074bc <__mcmp+0x18>
 80074d4:	e7fa      	b.n	80074cc <__mcmp+0x28>
 80074d6:	f04f 32ff 	mov.w	r2, #4294967295
 80074da:	e7f7      	b.n	80074cc <__mcmp+0x28>

080074dc <__mdiff>:
 80074dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e0:	460c      	mov	r4, r1
 80074e2:	4606      	mov	r6, r0
 80074e4:	4611      	mov	r1, r2
 80074e6:	4620      	mov	r0, r4
 80074e8:	4690      	mov	r8, r2
 80074ea:	f7ff ffdb 	bl	80074a4 <__mcmp>
 80074ee:	1e05      	subs	r5, r0, #0
 80074f0:	d110      	bne.n	8007514 <__mdiff+0x38>
 80074f2:	4629      	mov	r1, r5
 80074f4:	4630      	mov	r0, r6
 80074f6:	f7ff fd53 	bl	8006fa0 <_Balloc>
 80074fa:	b930      	cbnz	r0, 800750a <__mdiff+0x2e>
 80074fc:	4b3a      	ldr	r3, [pc, #232]	; (80075e8 <__mdiff+0x10c>)
 80074fe:	4602      	mov	r2, r0
 8007500:	f240 2132 	movw	r1, #562	; 0x232
 8007504:	4839      	ldr	r0, [pc, #228]	; (80075ec <__mdiff+0x110>)
 8007506:	f000 fb31 	bl	8007b6c <__assert_func>
 800750a:	2301      	movs	r3, #1
 800750c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007510:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007514:	bfa4      	itt	ge
 8007516:	4643      	movge	r3, r8
 8007518:	46a0      	movge	r8, r4
 800751a:	4630      	mov	r0, r6
 800751c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007520:	bfa6      	itte	ge
 8007522:	461c      	movge	r4, r3
 8007524:	2500      	movge	r5, #0
 8007526:	2501      	movlt	r5, #1
 8007528:	f7ff fd3a 	bl	8006fa0 <_Balloc>
 800752c:	b920      	cbnz	r0, 8007538 <__mdiff+0x5c>
 800752e:	4b2e      	ldr	r3, [pc, #184]	; (80075e8 <__mdiff+0x10c>)
 8007530:	4602      	mov	r2, r0
 8007532:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007536:	e7e5      	b.n	8007504 <__mdiff+0x28>
 8007538:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800753c:	6926      	ldr	r6, [r4, #16]
 800753e:	60c5      	str	r5, [r0, #12]
 8007540:	f104 0914 	add.w	r9, r4, #20
 8007544:	f108 0514 	add.w	r5, r8, #20
 8007548:	f100 0e14 	add.w	lr, r0, #20
 800754c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007550:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007554:	f108 0210 	add.w	r2, r8, #16
 8007558:	46f2      	mov	sl, lr
 800755a:	2100      	movs	r1, #0
 800755c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007560:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007564:	fa1f f883 	uxth.w	r8, r3
 8007568:	fa11 f18b 	uxtah	r1, r1, fp
 800756c:	0c1b      	lsrs	r3, r3, #16
 800756e:	eba1 0808 	sub.w	r8, r1, r8
 8007572:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007576:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800757a:	fa1f f888 	uxth.w	r8, r8
 800757e:	1419      	asrs	r1, r3, #16
 8007580:	454e      	cmp	r6, r9
 8007582:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007586:	f84a 3b04 	str.w	r3, [sl], #4
 800758a:	d8e7      	bhi.n	800755c <__mdiff+0x80>
 800758c:	1b33      	subs	r3, r6, r4
 800758e:	3b15      	subs	r3, #21
 8007590:	f023 0303 	bic.w	r3, r3, #3
 8007594:	3304      	adds	r3, #4
 8007596:	3415      	adds	r4, #21
 8007598:	42a6      	cmp	r6, r4
 800759a:	bf38      	it	cc
 800759c:	2304      	movcc	r3, #4
 800759e:	441d      	add	r5, r3
 80075a0:	4473      	add	r3, lr
 80075a2:	469e      	mov	lr, r3
 80075a4:	462e      	mov	r6, r5
 80075a6:	4566      	cmp	r6, ip
 80075a8:	d30e      	bcc.n	80075c8 <__mdiff+0xec>
 80075aa:	f10c 0203 	add.w	r2, ip, #3
 80075ae:	1b52      	subs	r2, r2, r5
 80075b0:	f022 0203 	bic.w	r2, r2, #3
 80075b4:	3d03      	subs	r5, #3
 80075b6:	45ac      	cmp	ip, r5
 80075b8:	bf38      	it	cc
 80075ba:	2200      	movcc	r2, #0
 80075bc:	441a      	add	r2, r3
 80075be:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80075c2:	b17b      	cbz	r3, 80075e4 <__mdiff+0x108>
 80075c4:	6107      	str	r7, [r0, #16]
 80075c6:	e7a3      	b.n	8007510 <__mdiff+0x34>
 80075c8:	f856 8b04 	ldr.w	r8, [r6], #4
 80075cc:	fa11 f288 	uxtah	r2, r1, r8
 80075d0:	1414      	asrs	r4, r2, #16
 80075d2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80075d6:	b292      	uxth	r2, r2
 80075d8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80075dc:	f84e 2b04 	str.w	r2, [lr], #4
 80075e0:	1421      	asrs	r1, r4, #16
 80075e2:	e7e0      	b.n	80075a6 <__mdiff+0xca>
 80075e4:	3f01      	subs	r7, #1
 80075e6:	e7ea      	b.n	80075be <__mdiff+0xe2>
 80075e8:	080088a7 	.word	0x080088a7
 80075ec:	080088b8 	.word	0x080088b8

080075f0 <__d2b>:
 80075f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80075f4:	4689      	mov	r9, r1
 80075f6:	2101      	movs	r1, #1
 80075f8:	ec57 6b10 	vmov	r6, r7, d0
 80075fc:	4690      	mov	r8, r2
 80075fe:	f7ff fccf 	bl	8006fa0 <_Balloc>
 8007602:	4604      	mov	r4, r0
 8007604:	b930      	cbnz	r0, 8007614 <__d2b+0x24>
 8007606:	4602      	mov	r2, r0
 8007608:	4b25      	ldr	r3, [pc, #148]	; (80076a0 <__d2b+0xb0>)
 800760a:	4826      	ldr	r0, [pc, #152]	; (80076a4 <__d2b+0xb4>)
 800760c:	f240 310a 	movw	r1, #778	; 0x30a
 8007610:	f000 faac 	bl	8007b6c <__assert_func>
 8007614:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007618:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800761c:	bb35      	cbnz	r5, 800766c <__d2b+0x7c>
 800761e:	2e00      	cmp	r6, #0
 8007620:	9301      	str	r3, [sp, #4]
 8007622:	d028      	beq.n	8007676 <__d2b+0x86>
 8007624:	4668      	mov	r0, sp
 8007626:	9600      	str	r6, [sp, #0]
 8007628:	f7ff fd82 	bl	8007130 <__lo0bits>
 800762c:	9900      	ldr	r1, [sp, #0]
 800762e:	b300      	cbz	r0, 8007672 <__d2b+0x82>
 8007630:	9a01      	ldr	r2, [sp, #4]
 8007632:	f1c0 0320 	rsb	r3, r0, #32
 8007636:	fa02 f303 	lsl.w	r3, r2, r3
 800763a:	430b      	orrs	r3, r1
 800763c:	40c2      	lsrs	r2, r0
 800763e:	6163      	str	r3, [r4, #20]
 8007640:	9201      	str	r2, [sp, #4]
 8007642:	9b01      	ldr	r3, [sp, #4]
 8007644:	61a3      	str	r3, [r4, #24]
 8007646:	2b00      	cmp	r3, #0
 8007648:	bf14      	ite	ne
 800764a:	2202      	movne	r2, #2
 800764c:	2201      	moveq	r2, #1
 800764e:	6122      	str	r2, [r4, #16]
 8007650:	b1d5      	cbz	r5, 8007688 <__d2b+0x98>
 8007652:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007656:	4405      	add	r5, r0
 8007658:	f8c9 5000 	str.w	r5, [r9]
 800765c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007660:	f8c8 0000 	str.w	r0, [r8]
 8007664:	4620      	mov	r0, r4
 8007666:	b003      	add	sp, #12
 8007668:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800766c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007670:	e7d5      	b.n	800761e <__d2b+0x2e>
 8007672:	6161      	str	r1, [r4, #20]
 8007674:	e7e5      	b.n	8007642 <__d2b+0x52>
 8007676:	a801      	add	r0, sp, #4
 8007678:	f7ff fd5a 	bl	8007130 <__lo0bits>
 800767c:	9b01      	ldr	r3, [sp, #4]
 800767e:	6163      	str	r3, [r4, #20]
 8007680:	2201      	movs	r2, #1
 8007682:	6122      	str	r2, [r4, #16]
 8007684:	3020      	adds	r0, #32
 8007686:	e7e3      	b.n	8007650 <__d2b+0x60>
 8007688:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800768c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007690:	f8c9 0000 	str.w	r0, [r9]
 8007694:	6918      	ldr	r0, [r3, #16]
 8007696:	f7ff fd2b 	bl	80070f0 <__hi0bits>
 800769a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800769e:	e7df      	b.n	8007660 <__d2b+0x70>
 80076a0:	080088a7 	.word	0x080088a7
 80076a4:	080088b8 	.word	0x080088b8

080076a8 <_calloc_r>:
 80076a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076aa:	fba1 2402 	umull	r2, r4, r1, r2
 80076ae:	b94c      	cbnz	r4, 80076c4 <_calloc_r+0x1c>
 80076b0:	4611      	mov	r1, r2
 80076b2:	9201      	str	r2, [sp, #4]
 80076b4:	f000 f87a 	bl	80077ac <_malloc_r>
 80076b8:	9a01      	ldr	r2, [sp, #4]
 80076ba:	4605      	mov	r5, r0
 80076bc:	b930      	cbnz	r0, 80076cc <_calloc_r+0x24>
 80076be:	4628      	mov	r0, r5
 80076c0:	b003      	add	sp, #12
 80076c2:	bd30      	pop	{r4, r5, pc}
 80076c4:	220c      	movs	r2, #12
 80076c6:	6002      	str	r2, [r0, #0]
 80076c8:	2500      	movs	r5, #0
 80076ca:	e7f8      	b.n	80076be <_calloc_r+0x16>
 80076cc:	4621      	mov	r1, r4
 80076ce:	f7fe f941 	bl	8005954 <memset>
 80076d2:	e7f4      	b.n	80076be <_calloc_r+0x16>

080076d4 <_free_r>:
 80076d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076d6:	2900      	cmp	r1, #0
 80076d8:	d044      	beq.n	8007764 <_free_r+0x90>
 80076da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076de:	9001      	str	r0, [sp, #4]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	f1a1 0404 	sub.w	r4, r1, #4
 80076e6:	bfb8      	it	lt
 80076e8:	18e4      	addlt	r4, r4, r3
 80076ea:	f000 fa9b 	bl	8007c24 <__malloc_lock>
 80076ee:	4a1e      	ldr	r2, [pc, #120]	; (8007768 <_free_r+0x94>)
 80076f0:	9801      	ldr	r0, [sp, #4]
 80076f2:	6813      	ldr	r3, [r2, #0]
 80076f4:	b933      	cbnz	r3, 8007704 <_free_r+0x30>
 80076f6:	6063      	str	r3, [r4, #4]
 80076f8:	6014      	str	r4, [r2, #0]
 80076fa:	b003      	add	sp, #12
 80076fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007700:	f000 ba96 	b.w	8007c30 <__malloc_unlock>
 8007704:	42a3      	cmp	r3, r4
 8007706:	d908      	bls.n	800771a <_free_r+0x46>
 8007708:	6825      	ldr	r5, [r4, #0]
 800770a:	1961      	adds	r1, r4, r5
 800770c:	428b      	cmp	r3, r1
 800770e:	bf01      	itttt	eq
 8007710:	6819      	ldreq	r1, [r3, #0]
 8007712:	685b      	ldreq	r3, [r3, #4]
 8007714:	1949      	addeq	r1, r1, r5
 8007716:	6021      	streq	r1, [r4, #0]
 8007718:	e7ed      	b.n	80076f6 <_free_r+0x22>
 800771a:	461a      	mov	r2, r3
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	b10b      	cbz	r3, 8007724 <_free_r+0x50>
 8007720:	42a3      	cmp	r3, r4
 8007722:	d9fa      	bls.n	800771a <_free_r+0x46>
 8007724:	6811      	ldr	r1, [r2, #0]
 8007726:	1855      	adds	r5, r2, r1
 8007728:	42a5      	cmp	r5, r4
 800772a:	d10b      	bne.n	8007744 <_free_r+0x70>
 800772c:	6824      	ldr	r4, [r4, #0]
 800772e:	4421      	add	r1, r4
 8007730:	1854      	adds	r4, r2, r1
 8007732:	42a3      	cmp	r3, r4
 8007734:	6011      	str	r1, [r2, #0]
 8007736:	d1e0      	bne.n	80076fa <_free_r+0x26>
 8007738:	681c      	ldr	r4, [r3, #0]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	6053      	str	r3, [r2, #4]
 800773e:	4421      	add	r1, r4
 8007740:	6011      	str	r1, [r2, #0]
 8007742:	e7da      	b.n	80076fa <_free_r+0x26>
 8007744:	d902      	bls.n	800774c <_free_r+0x78>
 8007746:	230c      	movs	r3, #12
 8007748:	6003      	str	r3, [r0, #0]
 800774a:	e7d6      	b.n	80076fa <_free_r+0x26>
 800774c:	6825      	ldr	r5, [r4, #0]
 800774e:	1961      	adds	r1, r4, r5
 8007750:	428b      	cmp	r3, r1
 8007752:	bf04      	itt	eq
 8007754:	6819      	ldreq	r1, [r3, #0]
 8007756:	685b      	ldreq	r3, [r3, #4]
 8007758:	6063      	str	r3, [r4, #4]
 800775a:	bf04      	itt	eq
 800775c:	1949      	addeq	r1, r1, r5
 800775e:	6021      	streq	r1, [r4, #0]
 8007760:	6054      	str	r4, [r2, #4]
 8007762:	e7ca      	b.n	80076fa <_free_r+0x26>
 8007764:	b003      	add	sp, #12
 8007766:	bd30      	pop	{r4, r5, pc}
 8007768:	2000038c 	.word	0x2000038c

0800776c <sbrk_aligned>:
 800776c:	b570      	push	{r4, r5, r6, lr}
 800776e:	4e0e      	ldr	r6, [pc, #56]	; (80077a8 <sbrk_aligned+0x3c>)
 8007770:	460c      	mov	r4, r1
 8007772:	6831      	ldr	r1, [r6, #0]
 8007774:	4605      	mov	r5, r0
 8007776:	b911      	cbnz	r1, 800777e <sbrk_aligned+0x12>
 8007778:	f000 f9e8 	bl	8007b4c <_sbrk_r>
 800777c:	6030      	str	r0, [r6, #0]
 800777e:	4621      	mov	r1, r4
 8007780:	4628      	mov	r0, r5
 8007782:	f000 f9e3 	bl	8007b4c <_sbrk_r>
 8007786:	1c43      	adds	r3, r0, #1
 8007788:	d00a      	beq.n	80077a0 <sbrk_aligned+0x34>
 800778a:	1cc4      	adds	r4, r0, #3
 800778c:	f024 0403 	bic.w	r4, r4, #3
 8007790:	42a0      	cmp	r0, r4
 8007792:	d007      	beq.n	80077a4 <sbrk_aligned+0x38>
 8007794:	1a21      	subs	r1, r4, r0
 8007796:	4628      	mov	r0, r5
 8007798:	f000 f9d8 	bl	8007b4c <_sbrk_r>
 800779c:	3001      	adds	r0, #1
 800779e:	d101      	bne.n	80077a4 <sbrk_aligned+0x38>
 80077a0:	f04f 34ff 	mov.w	r4, #4294967295
 80077a4:	4620      	mov	r0, r4
 80077a6:	bd70      	pop	{r4, r5, r6, pc}
 80077a8:	20000390 	.word	0x20000390

080077ac <_malloc_r>:
 80077ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077b0:	1ccd      	adds	r5, r1, #3
 80077b2:	f025 0503 	bic.w	r5, r5, #3
 80077b6:	3508      	adds	r5, #8
 80077b8:	2d0c      	cmp	r5, #12
 80077ba:	bf38      	it	cc
 80077bc:	250c      	movcc	r5, #12
 80077be:	2d00      	cmp	r5, #0
 80077c0:	4607      	mov	r7, r0
 80077c2:	db01      	blt.n	80077c8 <_malloc_r+0x1c>
 80077c4:	42a9      	cmp	r1, r5
 80077c6:	d905      	bls.n	80077d4 <_malloc_r+0x28>
 80077c8:	230c      	movs	r3, #12
 80077ca:	603b      	str	r3, [r7, #0]
 80077cc:	2600      	movs	r6, #0
 80077ce:	4630      	mov	r0, r6
 80077d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077d4:	4e2e      	ldr	r6, [pc, #184]	; (8007890 <_malloc_r+0xe4>)
 80077d6:	f000 fa25 	bl	8007c24 <__malloc_lock>
 80077da:	6833      	ldr	r3, [r6, #0]
 80077dc:	461c      	mov	r4, r3
 80077de:	bb34      	cbnz	r4, 800782e <_malloc_r+0x82>
 80077e0:	4629      	mov	r1, r5
 80077e2:	4638      	mov	r0, r7
 80077e4:	f7ff ffc2 	bl	800776c <sbrk_aligned>
 80077e8:	1c43      	adds	r3, r0, #1
 80077ea:	4604      	mov	r4, r0
 80077ec:	d14d      	bne.n	800788a <_malloc_r+0xde>
 80077ee:	6834      	ldr	r4, [r6, #0]
 80077f0:	4626      	mov	r6, r4
 80077f2:	2e00      	cmp	r6, #0
 80077f4:	d140      	bne.n	8007878 <_malloc_r+0xcc>
 80077f6:	6823      	ldr	r3, [r4, #0]
 80077f8:	4631      	mov	r1, r6
 80077fa:	4638      	mov	r0, r7
 80077fc:	eb04 0803 	add.w	r8, r4, r3
 8007800:	f000 f9a4 	bl	8007b4c <_sbrk_r>
 8007804:	4580      	cmp	r8, r0
 8007806:	d13a      	bne.n	800787e <_malloc_r+0xd2>
 8007808:	6821      	ldr	r1, [r4, #0]
 800780a:	3503      	adds	r5, #3
 800780c:	1a6d      	subs	r5, r5, r1
 800780e:	f025 0503 	bic.w	r5, r5, #3
 8007812:	3508      	adds	r5, #8
 8007814:	2d0c      	cmp	r5, #12
 8007816:	bf38      	it	cc
 8007818:	250c      	movcc	r5, #12
 800781a:	4629      	mov	r1, r5
 800781c:	4638      	mov	r0, r7
 800781e:	f7ff ffa5 	bl	800776c <sbrk_aligned>
 8007822:	3001      	adds	r0, #1
 8007824:	d02b      	beq.n	800787e <_malloc_r+0xd2>
 8007826:	6823      	ldr	r3, [r4, #0]
 8007828:	442b      	add	r3, r5
 800782a:	6023      	str	r3, [r4, #0]
 800782c:	e00e      	b.n	800784c <_malloc_r+0xa0>
 800782e:	6822      	ldr	r2, [r4, #0]
 8007830:	1b52      	subs	r2, r2, r5
 8007832:	d41e      	bmi.n	8007872 <_malloc_r+0xc6>
 8007834:	2a0b      	cmp	r2, #11
 8007836:	d916      	bls.n	8007866 <_malloc_r+0xba>
 8007838:	1961      	adds	r1, r4, r5
 800783a:	42a3      	cmp	r3, r4
 800783c:	6025      	str	r5, [r4, #0]
 800783e:	bf18      	it	ne
 8007840:	6059      	strne	r1, [r3, #4]
 8007842:	6863      	ldr	r3, [r4, #4]
 8007844:	bf08      	it	eq
 8007846:	6031      	streq	r1, [r6, #0]
 8007848:	5162      	str	r2, [r4, r5]
 800784a:	604b      	str	r3, [r1, #4]
 800784c:	4638      	mov	r0, r7
 800784e:	f104 060b 	add.w	r6, r4, #11
 8007852:	f000 f9ed 	bl	8007c30 <__malloc_unlock>
 8007856:	f026 0607 	bic.w	r6, r6, #7
 800785a:	1d23      	adds	r3, r4, #4
 800785c:	1af2      	subs	r2, r6, r3
 800785e:	d0b6      	beq.n	80077ce <_malloc_r+0x22>
 8007860:	1b9b      	subs	r3, r3, r6
 8007862:	50a3      	str	r3, [r4, r2]
 8007864:	e7b3      	b.n	80077ce <_malloc_r+0x22>
 8007866:	6862      	ldr	r2, [r4, #4]
 8007868:	42a3      	cmp	r3, r4
 800786a:	bf0c      	ite	eq
 800786c:	6032      	streq	r2, [r6, #0]
 800786e:	605a      	strne	r2, [r3, #4]
 8007870:	e7ec      	b.n	800784c <_malloc_r+0xa0>
 8007872:	4623      	mov	r3, r4
 8007874:	6864      	ldr	r4, [r4, #4]
 8007876:	e7b2      	b.n	80077de <_malloc_r+0x32>
 8007878:	4634      	mov	r4, r6
 800787a:	6876      	ldr	r6, [r6, #4]
 800787c:	e7b9      	b.n	80077f2 <_malloc_r+0x46>
 800787e:	230c      	movs	r3, #12
 8007880:	603b      	str	r3, [r7, #0]
 8007882:	4638      	mov	r0, r7
 8007884:	f000 f9d4 	bl	8007c30 <__malloc_unlock>
 8007888:	e7a1      	b.n	80077ce <_malloc_r+0x22>
 800788a:	6025      	str	r5, [r4, #0]
 800788c:	e7de      	b.n	800784c <_malloc_r+0xa0>
 800788e:	bf00      	nop
 8007890:	2000038c 	.word	0x2000038c

08007894 <__ssputs_r>:
 8007894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007898:	688e      	ldr	r6, [r1, #8]
 800789a:	429e      	cmp	r6, r3
 800789c:	4682      	mov	sl, r0
 800789e:	460c      	mov	r4, r1
 80078a0:	4690      	mov	r8, r2
 80078a2:	461f      	mov	r7, r3
 80078a4:	d838      	bhi.n	8007918 <__ssputs_r+0x84>
 80078a6:	898a      	ldrh	r2, [r1, #12]
 80078a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80078ac:	d032      	beq.n	8007914 <__ssputs_r+0x80>
 80078ae:	6825      	ldr	r5, [r4, #0]
 80078b0:	6909      	ldr	r1, [r1, #16]
 80078b2:	eba5 0901 	sub.w	r9, r5, r1
 80078b6:	6965      	ldr	r5, [r4, #20]
 80078b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80078c0:	3301      	adds	r3, #1
 80078c2:	444b      	add	r3, r9
 80078c4:	106d      	asrs	r5, r5, #1
 80078c6:	429d      	cmp	r5, r3
 80078c8:	bf38      	it	cc
 80078ca:	461d      	movcc	r5, r3
 80078cc:	0553      	lsls	r3, r2, #21
 80078ce:	d531      	bpl.n	8007934 <__ssputs_r+0xa0>
 80078d0:	4629      	mov	r1, r5
 80078d2:	f7ff ff6b 	bl	80077ac <_malloc_r>
 80078d6:	4606      	mov	r6, r0
 80078d8:	b950      	cbnz	r0, 80078f0 <__ssputs_r+0x5c>
 80078da:	230c      	movs	r3, #12
 80078dc:	f8ca 3000 	str.w	r3, [sl]
 80078e0:	89a3      	ldrh	r3, [r4, #12]
 80078e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078e6:	81a3      	strh	r3, [r4, #12]
 80078e8:	f04f 30ff 	mov.w	r0, #4294967295
 80078ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078f0:	6921      	ldr	r1, [r4, #16]
 80078f2:	464a      	mov	r2, r9
 80078f4:	f7ff fb46 	bl	8006f84 <memcpy>
 80078f8:	89a3      	ldrh	r3, [r4, #12]
 80078fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80078fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007902:	81a3      	strh	r3, [r4, #12]
 8007904:	6126      	str	r6, [r4, #16]
 8007906:	6165      	str	r5, [r4, #20]
 8007908:	444e      	add	r6, r9
 800790a:	eba5 0509 	sub.w	r5, r5, r9
 800790e:	6026      	str	r6, [r4, #0]
 8007910:	60a5      	str	r5, [r4, #8]
 8007912:	463e      	mov	r6, r7
 8007914:	42be      	cmp	r6, r7
 8007916:	d900      	bls.n	800791a <__ssputs_r+0x86>
 8007918:	463e      	mov	r6, r7
 800791a:	6820      	ldr	r0, [r4, #0]
 800791c:	4632      	mov	r2, r6
 800791e:	4641      	mov	r1, r8
 8007920:	f000 f966 	bl	8007bf0 <memmove>
 8007924:	68a3      	ldr	r3, [r4, #8]
 8007926:	1b9b      	subs	r3, r3, r6
 8007928:	60a3      	str	r3, [r4, #8]
 800792a:	6823      	ldr	r3, [r4, #0]
 800792c:	4433      	add	r3, r6
 800792e:	6023      	str	r3, [r4, #0]
 8007930:	2000      	movs	r0, #0
 8007932:	e7db      	b.n	80078ec <__ssputs_r+0x58>
 8007934:	462a      	mov	r2, r5
 8007936:	f000 f981 	bl	8007c3c <_realloc_r>
 800793a:	4606      	mov	r6, r0
 800793c:	2800      	cmp	r0, #0
 800793e:	d1e1      	bne.n	8007904 <__ssputs_r+0x70>
 8007940:	6921      	ldr	r1, [r4, #16]
 8007942:	4650      	mov	r0, sl
 8007944:	f7ff fec6 	bl	80076d4 <_free_r>
 8007948:	e7c7      	b.n	80078da <__ssputs_r+0x46>
	...

0800794c <_svfiprintf_r>:
 800794c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007950:	4698      	mov	r8, r3
 8007952:	898b      	ldrh	r3, [r1, #12]
 8007954:	061b      	lsls	r3, r3, #24
 8007956:	b09d      	sub	sp, #116	; 0x74
 8007958:	4607      	mov	r7, r0
 800795a:	460d      	mov	r5, r1
 800795c:	4614      	mov	r4, r2
 800795e:	d50e      	bpl.n	800797e <_svfiprintf_r+0x32>
 8007960:	690b      	ldr	r3, [r1, #16]
 8007962:	b963      	cbnz	r3, 800797e <_svfiprintf_r+0x32>
 8007964:	2140      	movs	r1, #64	; 0x40
 8007966:	f7ff ff21 	bl	80077ac <_malloc_r>
 800796a:	6028      	str	r0, [r5, #0]
 800796c:	6128      	str	r0, [r5, #16]
 800796e:	b920      	cbnz	r0, 800797a <_svfiprintf_r+0x2e>
 8007970:	230c      	movs	r3, #12
 8007972:	603b      	str	r3, [r7, #0]
 8007974:	f04f 30ff 	mov.w	r0, #4294967295
 8007978:	e0d1      	b.n	8007b1e <_svfiprintf_r+0x1d2>
 800797a:	2340      	movs	r3, #64	; 0x40
 800797c:	616b      	str	r3, [r5, #20]
 800797e:	2300      	movs	r3, #0
 8007980:	9309      	str	r3, [sp, #36]	; 0x24
 8007982:	2320      	movs	r3, #32
 8007984:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007988:	f8cd 800c 	str.w	r8, [sp, #12]
 800798c:	2330      	movs	r3, #48	; 0x30
 800798e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007b38 <_svfiprintf_r+0x1ec>
 8007992:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007996:	f04f 0901 	mov.w	r9, #1
 800799a:	4623      	mov	r3, r4
 800799c:	469a      	mov	sl, r3
 800799e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079a2:	b10a      	cbz	r2, 80079a8 <_svfiprintf_r+0x5c>
 80079a4:	2a25      	cmp	r2, #37	; 0x25
 80079a6:	d1f9      	bne.n	800799c <_svfiprintf_r+0x50>
 80079a8:	ebba 0b04 	subs.w	fp, sl, r4
 80079ac:	d00b      	beq.n	80079c6 <_svfiprintf_r+0x7a>
 80079ae:	465b      	mov	r3, fp
 80079b0:	4622      	mov	r2, r4
 80079b2:	4629      	mov	r1, r5
 80079b4:	4638      	mov	r0, r7
 80079b6:	f7ff ff6d 	bl	8007894 <__ssputs_r>
 80079ba:	3001      	adds	r0, #1
 80079bc:	f000 80aa 	beq.w	8007b14 <_svfiprintf_r+0x1c8>
 80079c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079c2:	445a      	add	r2, fp
 80079c4:	9209      	str	r2, [sp, #36]	; 0x24
 80079c6:	f89a 3000 	ldrb.w	r3, [sl]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	f000 80a2 	beq.w	8007b14 <_svfiprintf_r+0x1c8>
 80079d0:	2300      	movs	r3, #0
 80079d2:	f04f 32ff 	mov.w	r2, #4294967295
 80079d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079da:	f10a 0a01 	add.w	sl, sl, #1
 80079de:	9304      	str	r3, [sp, #16]
 80079e0:	9307      	str	r3, [sp, #28]
 80079e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079e6:	931a      	str	r3, [sp, #104]	; 0x68
 80079e8:	4654      	mov	r4, sl
 80079ea:	2205      	movs	r2, #5
 80079ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079f0:	4851      	ldr	r0, [pc, #324]	; (8007b38 <_svfiprintf_r+0x1ec>)
 80079f2:	f7f8 fbf5 	bl	80001e0 <memchr>
 80079f6:	9a04      	ldr	r2, [sp, #16]
 80079f8:	b9d8      	cbnz	r0, 8007a32 <_svfiprintf_r+0xe6>
 80079fa:	06d0      	lsls	r0, r2, #27
 80079fc:	bf44      	itt	mi
 80079fe:	2320      	movmi	r3, #32
 8007a00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a04:	0711      	lsls	r1, r2, #28
 8007a06:	bf44      	itt	mi
 8007a08:	232b      	movmi	r3, #43	; 0x2b
 8007a0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a0e:	f89a 3000 	ldrb.w	r3, [sl]
 8007a12:	2b2a      	cmp	r3, #42	; 0x2a
 8007a14:	d015      	beq.n	8007a42 <_svfiprintf_r+0xf6>
 8007a16:	9a07      	ldr	r2, [sp, #28]
 8007a18:	4654      	mov	r4, sl
 8007a1a:	2000      	movs	r0, #0
 8007a1c:	f04f 0c0a 	mov.w	ip, #10
 8007a20:	4621      	mov	r1, r4
 8007a22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a26:	3b30      	subs	r3, #48	; 0x30
 8007a28:	2b09      	cmp	r3, #9
 8007a2a:	d94e      	bls.n	8007aca <_svfiprintf_r+0x17e>
 8007a2c:	b1b0      	cbz	r0, 8007a5c <_svfiprintf_r+0x110>
 8007a2e:	9207      	str	r2, [sp, #28]
 8007a30:	e014      	b.n	8007a5c <_svfiprintf_r+0x110>
 8007a32:	eba0 0308 	sub.w	r3, r0, r8
 8007a36:	fa09 f303 	lsl.w	r3, r9, r3
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	9304      	str	r3, [sp, #16]
 8007a3e:	46a2      	mov	sl, r4
 8007a40:	e7d2      	b.n	80079e8 <_svfiprintf_r+0x9c>
 8007a42:	9b03      	ldr	r3, [sp, #12]
 8007a44:	1d19      	adds	r1, r3, #4
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	9103      	str	r1, [sp, #12]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	bfbb      	ittet	lt
 8007a4e:	425b      	neglt	r3, r3
 8007a50:	f042 0202 	orrlt.w	r2, r2, #2
 8007a54:	9307      	strge	r3, [sp, #28]
 8007a56:	9307      	strlt	r3, [sp, #28]
 8007a58:	bfb8      	it	lt
 8007a5a:	9204      	strlt	r2, [sp, #16]
 8007a5c:	7823      	ldrb	r3, [r4, #0]
 8007a5e:	2b2e      	cmp	r3, #46	; 0x2e
 8007a60:	d10c      	bne.n	8007a7c <_svfiprintf_r+0x130>
 8007a62:	7863      	ldrb	r3, [r4, #1]
 8007a64:	2b2a      	cmp	r3, #42	; 0x2a
 8007a66:	d135      	bne.n	8007ad4 <_svfiprintf_r+0x188>
 8007a68:	9b03      	ldr	r3, [sp, #12]
 8007a6a:	1d1a      	adds	r2, r3, #4
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	9203      	str	r2, [sp, #12]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	bfb8      	it	lt
 8007a74:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a78:	3402      	adds	r4, #2
 8007a7a:	9305      	str	r3, [sp, #20]
 8007a7c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007b48 <_svfiprintf_r+0x1fc>
 8007a80:	7821      	ldrb	r1, [r4, #0]
 8007a82:	2203      	movs	r2, #3
 8007a84:	4650      	mov	r0, sl
 8007a86:	f7f8 fbab 	bl	80001e0 <memchr>
 8007a8a:	b140      	cbz	r0, 8007a9e <_svfiprintf_r+0x152>
 8007a8c:	2340      	movs	r3, #64	; 0x40
 8007a8e:	eba0 000a 	sub.w	r0, r0, sl
 8007a92:	fa03 f000 	lsl.w	r0, r3, r0
 8007a96:	9b04      	ldr	r3, [sp, #16]
 8007a98:	4303      	orrs	r3, r0
 8007a9a:	3401      	adds	r4, #1
 8007a9c:	9304      	str	r3, [sp, #16]
 8007a9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007aa2:	4826      	ldr	r0, [pc, #152]	; (8007b3c <_svfiprintf_r+0x1f0>)
 8007aa4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007aa8:	2206      	movs	r2, #6
 8007aaa:	f7f8 fb99 	bl	80001e0 <memchr>
 8007aae:	2800      	cmp	r0, #0
 8007ab0:	d038      	beq.n	8007b24 <_svfiprintf_r+0x1d8>
 8007ab2:	4b23      	ldr	r3, [pc, #140]	; (8007b40 <_svfiprintf_r+0x1f4>)
 8007ab4:	bb1b      	cbnz	r3, 8007afe <_svfiprintf_r+0x1b2>
 8007ab6:	9b03      	ldr	r3, [sp, #12]
 8007ab8:	3307      	adds	r3, #7
 8007aba:	f023 0307 	bic.w	r3, r3, #7
 8007abe:	3308      	adds	r3, #8
 8007ac0:	9303      	str	r3, [sp, #12]
 8007ac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ac4:	4433      	add	r3, r6
 8007ac6:	9309      	str	r3, [sp, #36]	; 0x24
 8007ac8:	e767      	b.n	800799a <_svfiprintf_r+0x4e>
 8007aca:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ace:	460c      	mov	r4, r1
 8007ad0:	2001      	movs	r0, #1
 8007ad2:	e7a5      	b.n	8007a20 <_svfiprintf_r+0xd4>
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	3401      	adds	r4, #1
 8007ad8:	9305      	str	r3, [sp, #20]
 8007ada:	4619      	mov	r1, r3
 8007adc:	f04f 0c0a 	mov.w	ip, #10
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ae6:	3a30      	subs	r2, #48	; 0x30
 8007ae8:	2a09      	cmp	r2, #9
 8007aea:	d903      	bls.n	8007af4 <_svfiprintf_r+0x1a8>
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d0c5      	beq.n	8007a7c <_svfiprintf_r+0x130>
 8007af0:	9105      	str	r1, [sp, #20]
 8007af2:	e7c3      	b.n	8007a7c <_svfiprintf_r+0x130>
 8007af4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007af8:	4604      	mov	r4, r0
 8007afa:	2301      	movs	r3, #1
 8007afc:	e7f0      	b.n	8007ae0 <_svfiprintf_r+0x194>
 8007afe:	ab03      	add	r3, sp, #12
 8007b00:	9300      	str	r3, [sp, #0]
 8007b02:	462a      	mov	r2, r5
 8007b04:	4b0f      	ldr	r3, [pc, #60]	; (8007b44 <_svfiprintf_r+0x1f8>)
 8007b06:	a904      	add	r1, sp, #16
 8007b08:	4638      	mov	r0, r7
 8007b0a:	f7fd ffcb 	bl	8005aa4 <_printf_float>
 8007b0e:	1c42      	adds	r2, r0, #1
 8007b10:	4606      	mov	r6, r0
 8007b12:	d1d6      	bne.n	8007ac2 <_svfiprintf_r+0x176>
 8007b14:	89ab      	ldrh	r3, [r5, #12]
 8007b16:	065b      	lsls	r3, r3, #25
 8007b18:	f53f af2c 	bmi.w	8007974 <_svfiprintf_r+0x28>
 8007b1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b1e:	b01d      	add	sp, #116	; 0x74
 8007b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b24:	ab03      	add	r3, sp, #12
 8007b26:	9300      	str	r3, [sp, #0]
 8007b28:	462a      	mov	r2, r5
 8007b2a:	4b06      	ldr	r3, [pc, #24]	; (8007b44 <_svfiprintf_r+0x1f8>)
 8007b2c:	a904      	add	r1, sp, #16
 8007b2e:	4638      	mov	r0, r7
 8007b30:	f7fe fa5c 	bl	8005fec <_printf_i>
 8007b34:	e7eb      	b.n	8007b0e <_svfiprintf_r+0x1c2>
 8007b36:	bf00      	nop
 8007b38:	08008a14 	.word	0x08008a14
 8007b3c:	08008a1e 	.word	0x08008a1e
 8007b40:	08005aa5 	.word	0x08005aa5
 8007b44:	08007895 	.word	0x08007895
 8007b48:	08008a1a 	.word	0x08008a1a

08007b4c <_sbrk_r>:
 8007b4c:	b538      	push	{r3, r4, r5, lr}
 8007b4e:	4d06      	ldr	r5, [pc, #24]	; (8007b68 <_sbrk_r+0x1c>)
 8007b50:	2300      	movs	r3, #0
 8007b52:	4604      	mov	r4, r0
 8007b54:	4608      	mov	r0, r1
 8007b56:	602b      	str	r3, [r5, #0]
 8007b58:	f7f9 fec0 	bl	80018dc <_sbrk>
 8007b5c:	1c43      	adds	r3, r0, #1
 8007b5e:	d102      	bne.n	8007b66 <_sbrk_r+0x1a>
 8007b60:	682b      	ldr	r3, [r5, #0]
 8007b62:	b103      	cbz	r3, 8007b66 <_sbrk_r+0x1a>
 8007b64:	6023      	str	r3, [r4, #0]
 8007b66:	bd38      	pop	{r3, r4, r5, pc}
 8007b68:	20000394 	.word	0x20000394

08007b6c <__assert_func>:
 8007b6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b6e:	4614      	mov	r4, r2
 8007b70:	461a      	mov	r2, r3
 8007b72:	4b09      	ldr	r3, [pc, #36]	; (8007b98 <__assert_func+0x2c>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4605      	mov	r5, r0
 8007b78:	68d8      	ldr	r0, [r3, #12]
 8007b7a:	b14c      	cbz	r4, 8007b90 <__assert_func+0x24>
 8007b7c:	4b07      	ldr	r3, [pc, #28]	; (8007b9c <__assert_func+0x30>)
 8007b7e:	9100      	str	r1, [sp, #0]
 8007b80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b84:	4906      	ldr	r1, [pc, #24]	; (8007ba0 <__assert_func+0x34>)
 8007b86:	462b      	mov	r3, r5
 8007b88:	f000 f80e 	bl	8007ba8 <fiprintf>
 8007b8c:	f000 faac 	bl	80080e8 <abort>
 8007b90:	4b04      	ldr	r3, [pc, #16]	; (8007ba4 <__assert_func+0x38>)
 8007b92:	461c      	mov	r4, r3
 8007b94:	e7f3      	b.n	8007b7e <__assert_func+0x12>
 8007b96:	bf00      	nop
 8007b98:	2000000c 	.word	0x2000000c
 8007b9c:	08008a25 	.word	0x08008a25
 8007ba0:	08008a32 	.word	0x08008a32
 8007ba4:	08008a60 	.word	0x08008a60

08007ba8 <fiprintf>:
 8007ba8:	b40e      	push	{r1, r2, r3}
 8007baa:	b503      	push	{r0, r1, lr}
 8007bac:	4601      	mov	r1, r0
 8007bae:	ab03      	add	r3, sp, #12
 8007bb0:	4805      	ldr	r0, [pc, #20]	; (8007bc8 <fiprintf+0x20>)
 8007bb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bb6:	6800      	ldr	r0, [r0, #0]
 8007bb8:	9301      	str	r3, [sp, #4]
 8007bba:	f000 f897 	bl	8007cec <_vfiprintf_r>
 8007bbe:	b002      	add	sp, #8
 8007bc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007bc4:	b003      	add	sp, #12
 8007bc6:	4770      	bx	lr
 8007bc8:	2000000c 	.word	0x2000000c

08007bcc <__ascii_mbtowc>:
 8007bcc:	b082      	sub	sp, #8
 8007bce:	b901      	cbnz	r1, 8007bd2 <__ascii_mbtowc+0x6>
 8007bd0:	a901      	add	r1, sp, #4
 8007bd2:	b142      	cbz	r2, 8007be6 <__ascii_mbtowc+0x1a>
 8007bd4:	b14b      	cbz	r3, 8007bea <__ascii_mbtowc+0x1e>
 8007bd6:	7813      	ldrb	r3, [r2, #0]
 8007bd8:	600b      	str	r3, [r1, #0]
 8007bda:	7812      	ldrb	r2, [r2, #0]
 8007bdc:	1e10      	subs	r0, r2, #0
 8007bde:	bf18      	it	ne
 8007be0:	2001      	movne	r0, #1
 8007be2:	b002      	add	sp, #8
 8007be4:	4770      	bx	lr
 8007be6:	4610      	mov	r0, r2
 8007be8:	e7fb      	b.n	8007be2 <__ascii_mbtowc+0x16>
 8007bea:	f06f 0001 	mvn.w	r0, #1
 8007bee:	e7f8      	b.n	8007be2 <__ascii_mbtowc+0x16>

08007bf0 <memmove>:
 8007bf0:	4288      	cmp	r0, r1
 8007bf2:	b510      	push	{r4, lr}
 8007bf4:	eb01 0402 	add.w	r4, r1, r2
 8007bf8:	d902      	bls.n	8007c00 <memmove+0x10>
 8007bfa:	4284      	cmp	r4, r0
 8007bfc:	4623      	mov	r3, r4
 8007bfe:	d807      	bhi.n	8007c10 <memmove+0x20>
 8007c00:	1e43      	subs	r3, r0, #1
 8007c02:	42a1      	cmp	r1, r4
 8007c04:	d008      	beq.n	8007c18 <memmove+0x28>
 8007c06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c0e:	e7f8      	b.n	8007c02 <memmove+0x12>
 8007c10:	4402      	add	r2, r0
 8007c12:	4601      	mov	r1, r0
 8007c14:	428a      	cmp	r2, r1
 8007c16:	d100      	bne.n	8007c1a <memmove+0x2a>
 8007c18:	bd10      	pop	{r4, pc}
 8007c1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c22:	e7f7      	b.n	8007c14 <memmove+0x24>

08007c24 <__malloc_lock>:
 8007c24:	4801      	ldr	r0, [pc, #4]	; (8007c2c <__malloc_lock+0x8>)
 8007c26:	f000 bc1f 	b.w	8008468 <__retarget_lock_acquire_recursive>
 8007c2a:	bf00      	nop
 8007c2c:	20000398 	.word	0x20000398

08007c30 <__malloc_unlock>:
 8007c30:	4801      	ldr	r0, [pc, #4]	; (8007c38 <__malloc_unlock+0x8>)
 8007c32:	f000 bc1a 	b.w	800846a <__retarget_lock_release_recursive>
 8007c36:	bf00      	nop
 8007c38:	20000398 	.word	0x20000398

08007c3c <_realloc_r>:
 8007c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c40:	4680      	mov	r8, r0
 8007c42:	4614      	mov	r4, r2
 8007c44:	460e      	mov	r6, r1
 8007c46:	b921      	cbnz	r1, 8007c52 <_realloc_r+0x16>
 8007c48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c4c:	4611      	mov	r1, r2
 8007c4e:	f7ff bdad 	b.w	80077ac <_malloc_r>
 8007c52:	b92a      	cbnz	r2, 8007c60 <_realloc_r+0x24>
 8007c54:	f7ff fd3e 	bl	80076d4 <_free_r>
 8007c58:	4625      	mov	r5, r4
 8007c5a:	4628      	mov	r0, r5
 8007c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c60:	f000 fc6a 	bl	8008538 <_malloc_usable_size_r>
 8007c64:	4284      	cmp	r4, r0
 8007c66:	4607      	mov	r7, r0
 8007c68:	d802      	bhi.n	8007c70 <_realloc_r+0x34>
 8007c6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007c6e:	d812      	bhi.n	8007c96 <_realloc_r+0x5a>
 8007c70:	4621      	mov	r1, r4
 8007c72:	4640      	mov	r0, r8
 8007c74:	f7ff fd9a 	bl	80077ac <_malloc_r>
 8007c78:	4605      	mov	r5, r0
 8007c7a:	2800      	cmp	r0, #0
 8007c7c:	d0ed      	beq.n	8007c5a <_realloc_r+0x1e>
 8007c7e:	42bc      	cmp	r4, r7
 8007c80:	4622      	mov	r2, r4
 8007c82:	4631      	mov	r1, r6
 8007c84:	bf28      	it	cs
 8007c86:	463a      	movcs	r2, r7
 8007c88:	f7ff f97c 	bl	8006f84 <memcpy>
 8007c8c:	4631      	mov	r1, r6
 8007c8e:	4640      	mov	r0, r8
 8007c90:	f7ff fd20 	bl	80076d4 <_free_r>
 8007c94:	e7e1      	b.n	8007c5a <_realloc_r+0x1e>
 8007c96:	4635      	mov	r5, r6
 8007c98:	e7df      	b.n	8007c5a <_realloc_r+0x1e>

08007c9a <__sfputc_r>:
 8007c9a:	6893      	ldr	r3, [r2, #8]
 8007c9c:	3b01      	subs	r3, #1
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	b410      	push	{r4}
 8007ca2:	6093      	str	r3, [r2, #8]
 8007ca4:	da08      	bge.n	8007cb8 <__sfputc_r+0x1e>
 8007ca6:	6994      	ldr	r4, [r2, #24]
 8007ca8:	42a3      	cmp	r3, r4
 8007caa:	db01      	blt.n	8007cb0 <__sfputc_r+0x16>
 8007cac:	290a      	cmp	r1, #10
 8007cae:	d103      	bne.n	8007cb8 <__sfputc_r+0x1e>
 8007cb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cb4:	f000 b94a 	b.w	8007f4c <__swbuf_r>
 8007cb8:	6813      	ldr	r3, [r2, #0]
 8007cba:	1c58      	adds	r0, r3, #1
 8007cbc:	6010      	str	r0, [r2, #0]
 8007cbe:	7019      	strb	r1, [r3, #0]
 8007cc0:	4608      	mov	r0, r1
 8007cc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <__sfputs_r>:
 8007cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cca:	4606      	mov	r6, r0
 8007ccc:	460f      	mov	r7, r1
 8007cce:	4614      	mov	r4, r2
 8007cd0:	18d5      	adds	r5, r2, r3
 8007cd2:	42ac      	cmp	r4, r5
 8007cd4:	d101      	bne.n	8007cda <__sfputs_r+0x12>
 8007cd6:	2000      	movs	r0, #0
 8007cd8:	e007      	b.n	8007cea <__sfputs_r+0x22>
 8007cda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cde:	463a      	mov	r2, r7
 8007ce0:	4630      	mov	r0, r6
 8007ce2:	f7ff ffda 	bl	8007c9a <__sfputc_r>
 8007ce6:	1c43      	adds	r3, r0, #1
 8007ce8:	d1f3      	bne.n	8007cd2 <__sfputs_r+0xa>
 8007cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007cec <_vfiprintf_r>:
 8007cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf0:	460d      	mov	r5, r1
 8007cf2:	b09d      	sub	sp, #116	; 0x74
 8007cf4:	4614      	mov	r4, r2
 8007cf6:	4698      	mov	r8, r3
 8007cf8:	4606      	mov	r6, r0
 8007cfa:	b118      	cbz	r0, 8007d04 <_vfiprintf_r+0x18>
 8007cfc:	6983      	ldr	r3, [r0, #24]
 8007cfe:	b90b      	cbnz	r3, 8007d04 <_vfiprintf_r+0x18>
 8007d00:	f000 fb14 	bl	800832c <__sinit>
 8007d04:	4b89      	ldr	r3, [pc, #548]	; (8007f2c <_vfiprintf_r+0x240>)
 8007d06:	429d      	cmp	r5, r3
 8007d08:	d11b      	bne.n	8007d42 <_vfiprintf_r+0x56>
 8007d0a:	6875      	ldr	r5, [r6, #4]
 8007d0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d0e:	07d9      	lsls	r1, r3, #31
 8007d10:	d405      	bmi.n	8007d1e <_vfiprintf_r+0x32>
 8007d12:	89ab      	ldrh	r3, [r5, #12]
 8007d14:	059a      	lsls	r2, r3, #22
 8007d16:	d402      	bmi.n	8007d1e <_vfiprintf_r+0x32>
 8007d18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d1a:	f000 fba5 	bl	8008468 <__retarget_lock_acquire_recursive>
 8007d1e:	89ab      	ldrh	r3, [r5, #12]
 8007d20:	071b      	lsls	r3, r3, #28
 8007d22:	d501      	bpl.n	8007d28 <_vfiprintf_r+0x3c>
 8007d24:	692b      	ldr	r3, [r5, #16]
 8007d26:	b9eb      	cbnz	r3, 8007d64 <_vfiprintf_r+0x78>
 8007d28:	4629      	mov	r1, r5
 8007d2a:	4630      	mov	r0, r6
 8007d2c:	f000 f96e 	bl	800800c <__swsetup_r>
 8007d30:	b1c0      	cbz	r0, 8007d64 <_vfiprintf_r+0x78>
 8007d32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d34:	07dc      	lsls	r4, r3, #31
 8007d36:	d50e      	bpl.n	8007d56 <_vfiprintf_r+0x6a>
 8007d38:	f04f 30ff 	mov.w	r0, #4294967295
 8007d3c:	b01d      	add	sp, #116	; 0x74
 8007d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d42:	4b7b      	ldr	r3, [pc, #492]	; (8007f30 <_vfiprintf_r+0x244>)
 8007d44:	429d      	cmp	r5, r3
 8007d46:	d101      	bne.n	8007d4c <_vfiprintf_r+0x60>
 8007d48:	68b5      	ldr	r5, [r6, #8]
 8007d4a:	e7df      	b.n	8007d0c <_vfiprintf_r+0x20>
 8007d4c:	4b79      	ldr	r3, [pc, #484]	; (8007f34 <_vfiprintf_r+0x248>)
 8007d4e:	429d      	cmp	r5, r3
 8007d50:	bf08      	it	eq
 8007d52:	68f5      	ldreq	r5, [r6, #12]
 8007d54:	e7da      	b.n	8007d0c <_vfiprintf_r+0x20>
 8007d56:	89ab      	ldrh	r3, [r5, #12]
 8007d58:	0598      	lsls	r0, r3, #22
 8007d5a:	d4ed      	bmi.n	8007d38 <_vfiprintf_r+0x4c>
 8007d5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d5e:	f000 fb84 	bl	800846a <__retarget_lock_release_recursive>
 8007d62:	e7e9      	b.n	8007d38 <_vfiprintf_r+0x4c>
 8007d64:	2300      	movs	r3, #0
 8007d66:	9309      	str	r3, [sp, #36]	; 0x24
 8007d68:	2320      	movs	r3, #32
 8007d6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d72:	2330      	movs	r3, #48	; 0x30
 8007d74:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007f38 <_vfiprintf_r+0x24c>
 8007d78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d7c:	f04f 0901 	mov.w	r9, #1
 8007d80:	4623      	mov	r3, r4
 8007d82:	469a      	mov	sl, r3
 8007d84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d88:	b10a      	cbz	r2, 8007d8e <_vfiprintf_r+0xa2>
 8007d8a:	2a25      	cmp	r2, #37	; 0x25
 8007d8c:	d1f9      	bne.n	8007d82 <_vfiprintf_r+0x96>
 8007d8e:	ebba 0b04 	subs.w	fp, sl, r4
 8007d92:	d00b      	beq.n	8007dac <_vfiprintf_r+0xc0>
 8007d94:	465b      	mov	r3, fp
 8007d96:	4622      	mov	r2, r4
 8007d98:	4629      	mov	r1, r5
 8007d9a:	4630      	mov	r0, r6
 8007d9c:	f7ff ff94 	bl	8007cc8 <__sfputs_r>
 8007da0:	3001      	adds	r0, #1
 8007da2:	f000 80aa 	beq.w	8007efa <_vfiprintf_r+0x20e>
 8007da6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007da8:	445a      	add	r2, fp
 8007daa:	9209      	str	r2, [sp, #36]	; 0x24
 8007dac:	f89a 3000 	ldrb.w	r3, [sl]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	f000 80a2 	beq.w	8007efa <_vfiprintf_r+0x20e>
 8007db6:	2300      	movs	r3, #0
 8007db8:	f04f 32ff 	mov.w	r2, #4294967295
 8007dbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007dc0:	f10a 0a01 	add.w	sl, sl, #1
 8007dc4:	9304      	str	r3, [sp, #16]
 8007dc6:	9307      	str	r3, [sp, #28]
 8007dc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007dcc:	931a      	str	r3, [sp, #104]	; 0x68
 8007dce:	4654      	mov	r4, sl
 8007dd0:	2205      	movs	r2, #5
 8007dd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dd6:	4858      	ldr	r0, [pc, #352]	; (8007f38 <_vfiprintf_r+0x24c>)
 8007dd8:	f7f8 fa02 	bl	80001e0 <memchr>
 8007ddc:	9a04      	ldr	r2, [sp, #16]
 8007dde:	b9d8      	cbnz	r0, 8007e18 <_vfiprintf_r+0x12c>
 8007de0:	06d1      	lsls	r1, r2, #27
 8007de2:	bf44      	itt	mi
 8007de4:	2320      	movmi	r3, #32
 8007de6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dea:	0713      	lsls	r3, r2, #28
 8007dec:	bf44      	itt	mi
 8007dee:	232b      	movmi	r3, #43	; 0x2b
 8007df0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007df4:	f89a 3000 	ldrb.w	r3, [sl]
 8007df8:	2b2a      	cmp	r3, #42	; 0x2a
 8007dfa:	d015      	beq.n	8007e28 <_vfiprintf_r+0x13c>
 8007dfc:	9a07      	ldr	r2, [sp, #28]
 8007dfe:	4654      	mov	r4, sl
 8007e00:	2000      	movs	r0, #0
 8007e02:	f04f 0c0a 	mov.w	ip, #10
 8007e06:	4621      	mov	r1, r4
 8007e08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e0c:	3b30      	subs	r3, #48	; 0x30
 8007e0e:	2b09      	cmp	r3, #9
 8007e10:	d94e      	bls.n	8007eb0 <_vfiprintf_r+0x1c4>
 8007e12:	b1b0      	cbz	r0, 8007e42 <_vfiprintf_r+0x156>
 8007e14:	9207      	str	r2, [sp, #28]
 8007e16:	e014      	b.n	8007e42 <_vfiprintf_r+0x156>
 8007e18:	eba0 0308 	sub.w	r3, r0, r8
 8007e1c:	fa09 f303 	lsl.w	r3, r9, r3
 8007e20:	4313      	orrs	r3, r2
 8007e22:	9304      	str	r3, [sp, #16]
 8007e24:	46a2      	mov	sl, r4
 8007e26:	e7d2      	b.n	8007dce <_vfiprintf_r+0xe2>
 8007e28:	9b03      	ldr	r3, [sp, #12]
 8007e2a:	1d19      	adds	r1, r3, #4
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	9103      	str	r1, [sp, #12]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	bfbb      	ittet	lt
 8007e34:	425b      	neglt	r3, r3
 8007e36:	f042 0202 	orrlt.w	r2, r2, #2
 8007e3a:	9307      	strge	r3, [sp, #28]
 8007e3c:	9307      	strlt	r3, [sp, #28]
 8007e3e:	bfb8      	it	lt
 8007e40:	9204      	strlt	r2, [sp, #16]
 8007e42:	7823      	ldrb	r3, [r4, #0]
 8007e44:	2b2e      	cmp	r3, #46	; 0x2e
 8007e46:	d10c      	bne.n	8007e62 <_vfiprintf_r+0x176>
 8007e48:	7863      	ldrb	r3, [r4, #1]
 8007e4a:	2b2a      	cmp	r3, #42	; 0x2a
 8007e4c:	d135      	bne.n	8007eba <_vfiprintf_r+0x1ce>
 8007e4e:	9b03      	ldr	r3, [sp, #12]
 8007e50:	1d1a      	adds	r2, r3, #4
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	9203      	str	r2, [sp, #12]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	bfb8      	it	lt
 8007e5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e5e:	3402      	adds	r4, #2
 8007e60:	9305      	str	r3, [sp, #20]
 8007e62:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007f48 <_vfiprintf_r+0x25c>
 8007e66:	7821      	ldrb	r1, [r4, #0]
 8007e68:	2203      	movs	r2, #3
 8007e6a:	4650      	mov	r0, sl
 8007e6c:	f7f8 f9b8 	bl	80001e0 <memchr>
 8007e70:	b140      	cbz	r0, 8007e84 <_vfiprintf_r+0x198>
 8007e72:	2340      	movs	r3, #64	; 0x40
 8007e74:	eba0 000a 	sub.w	r0, r0, sl
 8007e78:	fa03 f000 	lsl.w	r0, r3, r0
 8007e7c:	9b04      	ldr	r3, [sp, #16]
 8007e7e:	4303      	orrs	r3, r0
 8007e80:	3401      	adds	r4, #1
 8007e82:	9304      	str	r3, [sp, #16]
 8007e84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e88:	482c      	ldr	r0, [pc, #176]	; (8007f3c <_vfiprintf_r+0x250>)
 8007e8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e8e:	2206      	movs	r2, #6
 8007e90:	f7f8 f9a6 	bl	80001e0 <memchr>
 8007e94:	2800      	cmp	r0, #0
 8007e96:	d03f      	beq.n	8007f18 <_vfiprintf_r+0x22c>
 8007e98:	4b29      	ldr	r3, [pc, #164]	; (8007f40 <_vfiprintf_r+0x254>)
 8007e9a:	bb1b      	cbnz	r3, 8007ee4 <_vfiprintf_r+0x1f8>
 8007e9c:	9b03      	ldr	r3, [sp, #12]
 8007e9e:	3307      	adds	r3, #7
 8007ea0:	f023 0307 	bic.w	r3, r3, #7
 8007ea4:	3308      	adds	r3, #8
 8007ea6:	9303      	str	r3, [sp, #12]
 8007ea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eaa:	443b      	add	r3, r7
 8007eac:	9309      	str	r3, [sp, #36]	; 0x24
 8007eae:	e767      	b.n	8007d80 <_vfiprintf_r+0x94>
 8007eb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007eb4:	460c      	mov	r4, r1
 8007eb6:	2001      	movs	r0, #1
 8007eb8:	e7a5      	b.n	8007e06 <_vfiprintf_r+0x11a>
 8007eba:	2300      	movs	r3, #0
 8007ebc:	3401      	adds	r4, #1
 8007ebe:	9305      	str	r3, [sp, #20]
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	f04f 0c0a 	mov.w	ip, #10
 8007ec6:	4620      	mov	r0, r4
 8007ec8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ecc:	3a30      	subs	r2, #48	; 0x30
 8007ece:	2a09      	cmp	r2, #9
 8007ed0:	d903      	bls.n	8007eda <_vfiprintf_r+0x1ee>
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d0c5      	beq.n	8007e62 <_vfiprintf_r+0x176>
 8007ed6:	9105      	str	r1, [sp, #20]
 8007ed8:	e7c3      	b.n	8007e62 <_vfiprintf_r+0x176>
 8007eda:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ede:	4604      	mov	r4, r0
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e7f0      	b.n	8007ec6 <_vfiprintf_r+0x1da>
 8007ee4:	ab03      	add	r3, sp, #12
 8007ee6:	9300      	str	r3, [sp, #0]
 8007ee8:	462a      	mov	r2, r5
 8007eea:	4b16      	ldr	r3, [pc, #88]	; (8007f44 <_vfiprintf_r+0x258>)
 8007eec:	a904      	add	r1, sp, #16
 8007eee:	4630      	mov	r0, r6
 8007ef0:	f7fd fdd8 	bl	8005aa4 <_printf_float>
 8007ef4:	4607      	mov	r7, r0
 8007ef6:	1c78      	adds	r0, r7, #1
 8007ef8:	d1d6      	bne.n	8007ea8 <_vfiprintf_r+0x1bc>
 8007efa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007efc:	07d9      	lsls	r1, r3, #31
 8007efe:	d405      	bmi.n	8007f0c <_vfiprintf_r+0x220>
 8007f00:	89ab      	ldrh	r3, [r5, #12]
 8007f02:	059a      	lsls	r2, r3, #22
 8007f04:	d402      	bmi.n	8007f0c <_vfiprintf_r+0x220>
 8007f06:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f08:	f000 faaf 	bl	800846a <__retarget_lock_release_recursive>
 8007f0c:	89ab      	ldrh	r3, [r5, #12]
 8007f0e:	065b      	lsls	r3, r3, #25
 8007f10:	f53f af12 	bmi.w	8007d38 <_vfiprintf_r+0x4c>
 8007f14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f16:	e711      	b.n	8007d3c <_vfiprintf_r+0x50>
 8007f18:	ab03      	add	r3, sp, #12
 8007f1a:	9300      	str	r3, [sp, #0]
 8007f1c:	462a      	mov	r2, r5
 8007f1e:	4b09      	ldr	r3, [pc, #36]	; (8007f44 <_vfiprintf_r+0x258>)
 8007f20:	a904      	add	r1, sp, #16
 8007f22:	4630      	mov	r0, r6
 8007f24:	f7fe f862 	bl	8005fec <_printf_i>
 8007f28:	e7e4      	b.n	8007ef4 <_vfiprintf_r+0x208>
 8007f2a:	bf00      	nop
 8007f2c:	08008b8c 	.word	0x08008b8c
 8007f30:	08008bac 	.word	0x08008bac
 8007f34:	08008b6c 	.word	0x08008b6c
 8007f38:	08008a14 	.word	0x08008a14
 8007f3c:	08008a1e 	.word	0x08008a1e
 8007f40:	08005aa5 	.word	0x08005aa5
 8007f44:	08007cc9 	.word	0x08007cc9
 8007f48:	08008a1a 	.word	0x08008a1a

08007f4c <__swbuf_r>:
 8007f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f4e:	460e      	mov	r6, r1
 8007f50:	4614      	mov	r4, r2
 8007f52:	4605      	mov	r5, r0
 8007f54:	b118      	cbz	r0, 8007f5e <__swbuf_r+0x12>
 8007f56:	6983      	ldr	r3, [r0, #24]
 8007f58:	b90b      	cbnz	r3, 8007f5e <__swbuf_r+0x12>
 8007f5a:	f000 f9e7 	bl	800832c <__sinit>
 8007f5e:	4b21      	ldr	r3, [pc, #132]	; (8007fe4 <__swbuf_r+0x98>)
 8007f60:	429c      	cmp	r4, r3
 8007f62:	d12b      	bne.n	8007fbc <__swbuf_r+0x70>
 8007f64:	686c      	ldr	r4, [r5, #4]
 8007f66:	69a3      	ldr	r3, [r4, #24]
 8007f68:	60a3      	str	r3, [r4, #8]
 8007f6a:	89a3      	ldrh	r3, [r4, #12]
 8007f6c:	071a      	lsls	r2, r3, #28
 8007f6e:	d52f      	bpl.n	8007fd0 <__swbuf_r+0x84>
 8007f70:	6923      	ldr	r3, [r4, #16]
 8007f72:	b36b      	cbz	r3, 8007fd0 <__swbuf_r+0x84>
 8007f74:	6923      	ldr	r3, [r4, #16]
 8007f76:	6820      	ldr	r0, [r4, #0]
 8007f78:	1ac0      	subs	r0, r0, r3
 8007f7a:	6963      	ldr	r3, [r4, #20]
 8007f7c:	b2f6      	uxtb	r6, r6
 8007f7e:	4283      	cmp	r3, r0
 8007f80:	4637      	mov	r7, r6
 8007f82:	dc04      	bgt.n	8007f8e <__swbuf_r+0x42>
 8007f84:	4621      	mov	r1, r4
 8007f86:	4628      	mov	r0, r5
 8007f88:	f000 f93c 	bl	8008204 <_fflush_r>
 8007f8c:	bb30      	cbnz	r0, 8007fdc <__swbuf_r+0x90>
 8007f8e:	68a3      	ldr	r3, [r4, #8]
 8007f90:	3b01      	subs	r3, #1
 8007f92:	60a3      	str	r3, [r4, #8]
 8007f94:	6823      	ldr	r3, [r4, #0]
 8007f96:	1c5a      	adds	r2, r3, #1
 8007f98:	6022      	str	r2, [r4, #0]
 8007f9a:	701e      	strb	r6, [r3, #0]
 8007f9c:	6963      	ldr	r3, [r4, #20]
 8007f9e:	3001      	adds	r0, #1
 8007fa0:	4283      	cmp	r3, r0
 8007fa2:	d004      	beq.n	8007fae <__swbuf_r+0x62>
 8007fa4:	89a3      	ldrh	r3, [r4, #12]
 8007fa6:	07db      	lsls	r3, r3, #31
 8007fa8:	d506      	bpl.n	8007fb8 <__swbuf_r+0x6c>
 8007faa:	2e0a      	cmp	r6, #10
 8007fac:	d104      	bne.n	8007fb8 <__swbuf_r+0x6c>
 8007fae:	4621      	mov	r1, r4
 8007fb0:	4628      	mov	r0, r5
 8007fb2:	f000 f927 	bl	8008204 <_fflush_r>
 8007fb6:	b988      	cbnz	r0, 8007fdc <__swbuf_r+0x90>
 8007fb8:	4638      	mov	r0, r7
 8007fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fbc:	4b0a      	ldr	r3, [pc, #40]	; (8007fe8 <__swbuf_r+0x9c>)
 8007fbe:	429c      	cmp	r4, r3
 8007fc0:	d101      	bne.n	8007fc6 <__swbuf_r+0x7a>
 8007fc2:	68ac      	ldr	r4, [r5, #8]
 8007fc4:	e7cf      	b.n	8007f66 <__swbuf_r+0x1a>
 8007fc6:	4b09      	ldr	r3, [pc, #36]	; (8007fec <__swbuf_r+0xa0>)
 8007fc8:	429c      	cmp	r4, r3
 8007fca:	bf08      	it	eq
 8007fcc:	68ec      	ldreq	r4, [r5, #12]
 8007fce:	e7ca      	b.n	8007f66 <__swbuf_r+0x1a>
 8007fd0:	4621      	mov	r1, r4
 8007fd2:	4628      	mov	r0, r5
 8007fd4:	f000 f81a 	bl	800800c <__swsetup_r>
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	d0cb      	beq.n	8007f74 <__swbuf_r+0x28>
 8007fdc:	f04f 37ff 	mov.w	r7, #4294967295
 8007fe0:	e7ea      	b.n	8007fb8 <__swbuf_r+0x6c>
 8007fe2:	bf00      	nop
 8007fe4:	08008b8c 	.word	0x08008b8c
 8007fe8:	08008bac 	.word	0x08008bac
 8007fec:	08008b6c 	.word	0x08008b6c

08007ff0 <__ascii_wctomb>:
 8007ff0:	b149      	cbz	r1, 8008006 <__ascii_wctomb+0x16>
 8007ff2:	2aff      	cmp	r2, #255	; 0xff
 8007ff4:	bf85      	ittet	hi
 8007ff6:	238a      	movhi	r3, #138	; 0x8a
 8007ff8:	6003      	strhi	r3, [r0, #0]
 8007ffa:	700a      	strbls	r2, [r1, #0]
 8007ffc:	f04f 30ff 	movhi.w	r0, #4294967295
 8008000:	bf98      	it	ls
 8008002:	2001      	movls	r0, #1
 8008004:	4770      	bx	lr
 8008006:	4608      	mov	r0, r1
 8008008:	4770      	bx	lr
	...

0800800c <__swsetup_r>:
 800800c:	4b32      	ldr	r3, [pc, #200]	; (80080d8 <__swsetup_r+0xcc>)
 800800e:	b570      	push	{r4, r5, r6, lr}
 8008010:	681d      	ldr	r5, [r3, #0]
 8008012:	4606      	mov	r6, r0
 8008014:	460c      	mov	r4, r1
 8008016:	b125      	cbz	r5, 8008022 <__swsetup_r+0x16>
 8008018:	69ab      	ldr	r3, [r5, #24]
 800801a:	b913      	cbnz	r3, 8008022 <__swsetup_r+0x16>
 800801c:	4628      	mov	r0, r5
 800801e:	f000 f985 	bl	800832c <__sinit>
 8008022:	4b2e      	ldr	r3, [pc, #184]	; (80080dc <__swsetup_r+0xd0>)
 8008024:	429c      	cmp	r4, r3
 8008026:	d10f      	bne.n	8008048 <__swsetup_r+0x3c>
 8008028:	686c      	ldr	r4, [r5, #4]
 800802a:	89a3      	ldrh	r3, [r4, #12]
 800802c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008030:	0719      	lsls	r1, r3, #28
 8008032:	d42c      	bmi.n	800808e <__swsetup_r+0x82>
 8008034:	06dd      	lsls	r5, r3, #27
 8008036:	d411      	bmi.n	800805c <__swsetup_r+0x50>
 8008038:	2309      	movs	r3, #9
 800803a:	6033      	str	r3, [r6, #0]
 800803c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008040:	81a3      	strh	r3, [r4, #12]
 8008042:	f04f 30ff 	mov.w	r0, #4294967295
 8008046:	e03e      	b.n	80080c6 <__swsetup_r+0xba>
 8008048:	4b25      	ldr	r3, [pc, #148]	; (80080e0 <__swsetup_r+0xd4>)
 800804a:	429c      	cmp	r4, r3
 800804c:	d101      	bne.n	8008052 <__swsetup_r+0x46>
 800804e:	68ac      	ldr	r4, [r5, #8]
 8008050:	e7eb      	b.n	800802a <__swsetup_r+0x1e>
 8008052:	4b24      	ldr	r3, [pc, #144]	; (80080e4 <__swsetup_r+0xd8>)
 8008054:	429c      	cmp	r4, r3
 8008056:	bf08      	it	eq
 8008058:	68ec      	ldreq	r4, [r5, #12]
 800805a:	e7e6      	b.n	800802a <__swsetup_r+0x1e>
 800805c:	0758      	lsls	r0, r3, #29
 800805e:	d512      	bpl.n	8008086 <__swsetup_r+0x7a>
 8008060:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008062:	b141      	cbz	r1, 8008076 <__swsetup_r+0x6a>
 8008064:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008068:	4299      	cmp	r1, r3
 800806a:	d002      	beq.n	8008072 <__swsetup_r+0x66>
 800806c:	4630      	mov	r0, r6
 800806e:	f7ff fb31 	bl	80076d4 <_free_r>
 8008072:	2300      	movs	r3, #0
 8008074:	6363      	str	r3, [r4, #52]	; 0x34
 8008076:	89a3      	ldrh	r3, [r4, #12]
 8008078:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800807c:	81a3      	strh	r3, [r4, #12]
 800807e:	2300      	movs	r3, #0
 8008080:	6063      	str	r3, [r4, #4]
 8008082:	6923      	ldr	r3, [r4, #16]
 8008084:	6023      	str	r3, [r4, #0]
 8008086:	89a3      	ldrh	r3, [r4, #12]
 8008088:	f043 0308 	orr.w	r3, r3, #8
 800808c:	81a3      	strh	r3, [r4, #12]
 800808e:	6923      	ldr	r3, [r4, #16]
 8008090:	b94b      	cbnz	r3, 80080a6 <__swsetup_r+0x9a>
 8008092:	89a3      	ldrh	r3, [r4, #12]
 8008094:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008098:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800809c:	d003      	beq.n	80080a6 <__swsetup_r+0x9a>
 800809e:	4621      	mov	r1, r4
 80080a0:	4630      	mov	r0, r6
 80080a2:	f000 fa09 	bl	80084b8 <__smakebuf_r>
 80080a6:	89a0      	ldrh	r0, [r4, #12]
 80080a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080ac:	f010 0301 	ands.w	r3, r0, #1
 80080b0:	d00a      	beq.n	80080c8 <__swsetup_r+0xbc>
 80080b2:	2300      	movs	r3, #0
 80080b4:	60a3      	str	r3, [r4, #8]
 80080b6:	6963      	ldr	r3, [r4, #20]
 80080b8:	425b      	negs	r3, r3
 80080ba:	61a3      	str	r3, [r4, #24]
 80080bc:	6923      	ldr	r3, [r4, #16]
 80080be:	b943      	cbnz	r3, 80080d2 <__swsetup_r+0xc6>
 80080c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80080c4:	d1ba      	bne.n	800803c <__swsetup_r+0x30>
 80080c6:	bd70      	pop	{r4, r5, r6, pc}
 80080c8:	0781      	lsls	r1, r0, #30
 80080ca:	bf58      	it	pl
 80080cc:	6963      	ldrpl	r3, [r4, #20]
 80080ce:	60a3      	str	r3, [r4, #8]
 80080d0:	e7f4      	b.n	80080bc <__swsetup_r+0xb0>
 80080d2:	2000      	movs	r0, #0
 80080d4:	e7f7      	b.n	80080c6 <__swsetup_r+0xba>
 80080d6:	bf00      	nop
 80080d8:	2000000c 	.word	0x2000000c
 80080dc:	08008b8c 	.word	0x08008b8c
 80080e0:	08008bac 	.word	0x08008bac
 80080e4:	08008b6c 	.word	0x08008b6c

080080e8 <abort>:
 80080e8:	b508      	push	{r3, lr}
 80080ea:	2006      	movs	r0, #6
 80080ec:	f000 fa54 	bl	8008598 <raise>
 80080f0:	2001      	movs	r0, #1
 80080f2:	f7f9 fb7b 	bl	80017ec <_exit>
	...

080080f8 <__sflush_r>:
 80080f8:	898a      	ldrh	r2, [r1, #12]
 80080fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080fe:	4605      	mov	r5, r0
 8008100:	0710      	lsls	r0, r2, #28
 8008102:	460c      	mov	r4, r1
 8008104:	d458      	bmi.n	80081b8 <__sflush_r+0xc0>
 8008106:	684b      	ldr	r3, [r1, #4]
 8008108:	2b00      	cmp	r3, #0
 800810a:	dc05      	bgt.n	8008118 <__sflush_r+0x20>
 800810c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800810e:	2b00      	cmp	r3, #0
 8008110:	dc02      	bgt.n	8008118 <__sflush_r+0x20>
 8008112:	2000      	movs	r0, #0
 8008114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008118:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800811a:	2e00      	cmp	r6, #0
 800811c:	d0f9      	beq.n	8008112 <__sflush_r+0x1a>
 800811e:	2300      	movs	r3, #0
 8008120:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008124:	682f      	ldr	r7, [r5, #0]
 8008126:	602b      	str	r3, [r5, #0]
 8008128:	d032      	beq.n	8008190 <__sflush_r+0x98>
 800812a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800812c:	89a3      	ldrh	r3, [r4, #12]
 800812e:	075a      	lsls	r2, r3, #29
 8008130:	d505      	bpl.n	800813e <__sflush_r+0x46>
 8008132:	6863      	ldr	r3, [r4, #4]
 8008134:	1ac0      	subs	r0, r0, r3
 8008136:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008138:	b10b      	cbz	r3, 800813e <__sflush_r+0x46>
 800813a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800813c:	1ac0      	subs	r0, r0, r3
 800813e:	2300      	movs	r3, #0
 8008140:	4602      	mov	r2, r0
 8008142:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008144:	6a21      	ldr	r1, [r4, #32]
 8008146:	4628      	mov	r0, r5
 8008148:	47b0      	blx	r6
 800814a:	1c43      	adds	r3, r0, #1
 800814c:	89a3      	ldrh	r3, [r4, #12]
 800814e:	d106      	bne.n	800815e <__sflush_r+0x66>
 8008150:	6829      	ldr	r1, [r5, #0]
 8008152:	291d      	cmp	r1, #29
 8008154:	d82c      	bhi.n	80081b0 <__sflush_r+0xb8>
 8008156:	4a2a      	ldr	r2, [pc, #168]	; (8008200 <__sflush_r+0x108>)
 8008158:	40ca      	lsrs	r2, r1
 800815a:	07d6      	lsls	r6, r2, #31
 800815c:	d528      	bpl.n	80081b0 <__sflush_r+0xb8>
 800815e:	2200      	movs	r2, #0
 8008160:	6062      	str	r2, [r4, #4]
 8008162:	04d9      	lsls	r1, r3, #19
 8008164:	6922      	ldr	r2, [r4, #16]
 8008166:	6022      	str	r2, [r4, #0]
 8008168:	d504      	bpl.n	8008174 <__sflush_r+0x7c>
 800816a:	1c42      	adds	r2, r0, #1
 800816c:	d101      	bne.n	8008172 <__sflush_r+0x7a>
 800816e:	682b      	ldr	r3, [r5, #0]
 8008170:	b903      	cbnz	r3, 8008174 <__sflush_r+0x7c>
 8008172:	6560      	str	r0, [r4, #84]	; 0x54
 8008174:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008176:	602f      	str	r7, [r5, #0]
 8008178:	2900      	cmp	r1, #0
 800817a:	d0ca      	beq.n	8008112 <__sflush_r+0x1a>
 800817c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008180:	4299      	cmp	r1, r3
 8008182:	d002      	beq.n	800818a <__sflush_r+0x92>
 8008184:	4628      	mov	r0, r5
 8008186:	f7ff faa5 	bl	80076d4 <_free_r>
 800818a:	2000      	movs	r0, #0
 800818c:	6360      	str	r0, [r4, #52]	; 0x34
 800818e:	e7c1      	b.n	8008114 <__sflush_r+0x1c>
 8008190:	6a21      	ldr	r1, [r4, #32]
 8008192:	2301      	movs	r3, #1
 8008194:	4628      	mov	r0, r5
 8008196:	47b0      	blx	r6
 8008198:	1c41      	adds	r1, r0, #1
 800819a:	d1c7      	bne.n	800812c <__sflush_r+0x34>
 800819c:	682b      	ldr	r3, [r5, #0]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d0c4      	beq.n	800812c <__sflush_r+0x34>
 80081a2:	2b1d      	cmp	r3, #29
 80081a4:	d001      	beq.n	80081aa <__sflush_r+0xb2>
 80081a6:	2b16      	cmp	r3, #22
 80081a8:	d101      	bne.n	80081ae <__sflush_r+0xb6>
 80081aa:	602f      	str	r7, [r5, #0]
 80081ac:	e7b1      	b.n	8008112 <__sflush_r+0x1a>
 80081ae:	89a3      	ldrh	r3, [r4, #12]
 80081b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081b4:	81a3      	strh	r3, [r4, #12]
 80081b6:	e7ad      	b.n	8008114 <__sflush_r+0x1c>
 80081b8:	690f      	ldr	r7, [r1, #16]
 80081ba:	2f00      	cmp	r7, #0
 80081bc:	d0a9      	beq.n	8008112 <__sflush_r+0x1a>
 80081be:	0793      	lsls	r3, r2, #30
 80081c0:	680e      	ldr	r6, [r1, #0]
 80081c2:	bf08      	it	eq
 80081c4:	694b      	ldreq	r3, [r1, #20]
 80081c6:	600f      	str	r7, [r1, #0]
 80081c8:	bf18      	it	ne
 80081ca:	2300      	movne	r3, #0
 80081cc:	eba6 0807 	sub.w	r8, r6, r7
 80081d0:	608b      	str	r3, [r1, #8]
 80081d2:	f1b8 0f00 	cmp.w	r8, #0
 80081d6:	dd9c      	ble.n	8008112 <__sflush_r+0x1a>
 80081d8:	6a21      	ldr	r1, [r4, #32]
 80081da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80081dc:	4643      	mov	r3, r8
 80081de:	463a      	mov	r2, r7
 80081e0:	4628      	mov	r0, r5
 80081e2:	47b0      	blx	r6
 80081e4:	2800      	cmp	r0, #0
 80081e6:	dc06      	bgt.n	80081f6 <__sflush_r+0xfe>
 80081e8:	89a3      	ldrh	r3, [r4, #12]
 80081ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081ee:	81a3      	strh	r3, [r4, #12]
 80081f0:	f04f 30ff 	mov.w	r0, #4294967295
 80081f4:	e78e      	b.n	8008114 <__sflush_r+0x1c>
 80081f6:	4407      	add	r7, r0
 80081f8:	eba8 0800 	sub.w	r8, r8, r0
 80081fc:	e7e9      	b.n	80081d2 <__sflush_r+0xda>
 80081fe:	bf00      	nop
 8008200:	20400001 	.word	0x20400001

08008204 <_fflush_r>:
 8008204:	b538      	push	{r3, r4, r5, lr}
 8008206:	690b      	ldr	r3, [r1, #16]
 8008208:	4605      	mov	r5, r0
 800820a:	460c      	mov	r4, r1
 800820c:	b913      	cbnz	r3, 8008214 <_fflush_r+0x10>
 800820e:	2500      	movs	r5, #0
 8008210:	4628      	mov	r0, r5
 8008212:	bd38      	pop	{r3, r4, r5, pc}
 8008214:	b118      	cbz	r0, 800821e <_fflush_r+0x1a>
 8008216:	6983      	ldr	r3, [r0, #24]
 8008218:	b90b      	cbnz	r3, 800821e <_fflush_r+0x1a>
 800821a:	f000 f887 	bl	800832c <__sinit>
 800821e:	4b14      	ldr	r3, [pc, #80]	; (8008270 <_fflush_r+0x6c>)
 8008220:	429c      	cmp	r4, r3
 8008222:	d11b      	bne.n	800825c <_fflush_r+0x58>
 8008224:	686c      	ldr	r4, [r5, #4]
 8008226:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d0ef      	beq.n	800820e <_fflush_r+0xa>
 800822e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008230:	07d0      	lsls	r0, r2, #31
 8008232:	d404      	bmi.n	800823e <_fflush_r+0x3a>
 8008234:	0599      	lsls	r1, r3, #22
 8008236:	d402      	bmi.n	800823e <_fflush_r+0x3a>
 8008238:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800823a:	f000 f915 	bl	8008468 <__retarget_lock_acquire_recursive>
 800823e:	4628      	mov	r0, r5
 8008240:	4621      	mov	r1, r4
 8008242:	f7ff ff59 	bl	80080f8 <__sflush_r>
 8008246:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008248:	07da      	lsls	r2, r3, #31
 800824a:	4605      	mov	r5, r0
 800824c:	d4e0      	bmi.n	8008210 <_fflush_r+0xc>
 800824e:	89a3      	ldrh	r3, [r4, #12]
 8008250:	059b      	lsls	r3, r3, #22
 8008252:	d4dd      	bmi.n	8008210 <_fflush_r+0xc>
 8008254:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008256:	f000 f908 	bl	800846a <__retarget_lock_release_recursive>
 800825a:	e7d9      	b.n	8008210 <_fflush_r+0xc>
 800825c:	4b05      	ldr	r3, [pc, #20]	; (8008274 <_fflush_r+0x70>)
 800825e:	429c      	cmp	r4, r3
 8008260:	d101      	bne.n	8008266 <_fflush_r+0x62>
 8008262:	68ac      	ldr	r4, [r5, #8]
 8008264:	e7df      	b.n	8008226 <_fflush_r+0x22>
 8008266:	4b04      	ldr	r3, [pc, #16]	; (8008278 <_fflush_r+0x74>)
 8008268:	429c      	cmp	r4, r3
 800826a:	bf08      	it	eq
 800826c:	68ec      	ldreq	r4, [r5, #12]
 800826e:	e7da      	b.n	8008226 <_fflush_r+0x22>
 8008270:	08008b8c 	.word	0x08008b8c
 8008274:	08008bac 	.word	0x08008bac
 8008278:	08008b6c 	.word	0x08008b6c

0800827c <std>:
 800827c:	2300      	movs	r3, #0
 800827e:	b510      	push	{r4, lr}
 8008280:	4604      	mov	r4, r0
 8008282:	e9c0 3300 	strd	r3, r3, [r0]
 8008286:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800828a:	6083      	str	r3, [r0, #8]
 800828c:	8181      	strh	r1, [r0, #12]
 800828e:	6643      	str	r3, [r0, #100]	; 0x64
 8008290:	81c2      	strh	r2, [r0, #14]
 8008292:	6183      	str	r3, [r0, #24]
 8008294:	4619      	mov	r1, r3
 8008296:	2208      	movs	r2, #8
 8008298:	305c      	adds	r0, #92	; 0x5c
 800829a:	f7fd fb5b 	bl	8005954 <memset>
 800829e:	4b05      	ldr	r3, [pc, #20]	; (80082b4 <std+0x38>)
 80082a0:	6263      	str	r3, [r4, #36]	; 0x24
 80082a2:	4b05      	ldr	r3, [pc, #20]	; (80082b8 <std+0x3c>)
 80082a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80082a6:	4b05      	ldr	r3, [pc, #20]	; (80082bc <std+0x40>)
 80082a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80082aa:	4b05      	ldr	r3, [pc, #20]	; (80082c0 <std+0x44>)
 80082ac:	6224      	str	r4, [r4, #32]
 80082ae:	6323      	str	r3, [r4, #48]	; 0x30
 80082b0:	bd10      	pop	{r4, pc}
 80082b2:	bf00      	nop
 80082b4:	080085d1 	.word	0x080085d1
 80082b8:	080085f3 	.word	0x080085f3
 80082bc:	0800862b 	.word	0x0800862b
 80082c0:	0800864f 	.word	0x0800864f

080082c4 <_cleanup_r>:
 80082c4:	4901      	ldr	r1, [pc, #4]	; (80082cc <_cleanup_r+0x8>)
 80082c6:	f000 b8af 	b.w	8008428 <_fwalk_reent>
 80082ca:	bf00      	nop
 80082cc:	08008205 	.word	0x08008205

080082d0 <__sfmoreglue>:
 80082d0:	b570      	push	{r4, r5, r6, lr}
 80082d2:	2268      	movs	r2, #104	; 0x68
 80082d4:	1e4d      	subs	r5, r1, #1
 80082d6:	4355      	muls	r5, r2
 80082d8:	460e      	mov	r6, r1
 80082da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80082de:	f7ff fa65 	bl	80077ac <_malloc_r>
 80082e2:	4604      	mov	r4, r0
 80082e4:	b140      	cbz	r0, 80082f8 <__sfmoreglue+0x28>
 80082e6:	2100      	movs	r1, #0
 80082e8:	e9c0 1600 	strd	r1, r6, [r0]
 80082ec:	300c      	adds	r0, #12
 80082ee:	60a0      	str	r0, [r4, #8]
 80082f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80082f4:	f7fd fb2e 	bl	8005954 <memset>
 80082f8:	4620      	mov	r0, r4
 80082fa:	bd70      	pop	{r4, r5, r6, pc}

080082fc <__sfp_lock_acquire>:
 80082fc:	4801      	ldr	r0, [pc, #4]	; (8008304 <__sfp_lock_acquire+0x8>)
 80082fe:	f000 b8b3 	b.w	8008468 <__retarget_lock_acquire_recursive>
 8008302:	bf00      	nop
 8008304:	20000399 	.word	0x20000399

08008308 <__sfp_lock_release>:
 8008308:	4801      	ldr	r0, [pc, #4]	; (8008310 <__sfp_lock_release+0x8>)
 800830a:	f000 b8ae 	b.w	800846a <__retarget_lock_release_recursive>
 800830e:	bf00      	nop
 8008310:	20000399 	.word	0x20000399

08008314 <__sinit_lock_acquire>:
 8008314:	4801      	ldr	r0, [pc, #4]	; (800831c <__sinit_lock_acquire+0x8>)
 8008316:	f000 b8a7 	b.w	8008468 <__retarget_lock_acquire_recursive>
 800831a:	bf00      	nop
 800831c:	2000039a 	.word	0x2000039a

08008320 <__sinit_lock_release>:
 8008320:	4801      	ldr	r0, [pc, #4]	; (8008328 <__sinit_lock_release+0x8>)
 8008322:	f000 b8a2 	b.w	800846a <__retarget_lock_release_recursive>
 8008326:	bf00      	nop
 8008328:	2000039a 	.word	0x2000039a

0800832c <__sinit>:
 800832c:	b510      	push	{r4, lr}
 800832e:	4604      	mov	r4, r0
 8008330:	f7ff fff0 	bl	8008314 <__sinit_lock_acquire>
 8008334:	69a3      	ldr	r3, [r4, #24]
 8008336:	b11b      	cbz	r3, 8008340 <__sinit+0x14>
 8008338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800833c:	f7ff bff0 	b.w	8008320 <__sinit_lock_release>
 8008340:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008344:	6523      	str	r3, [r4, #80]	; 0x50
 8008346:	4b13      	ldr	r3, [pc, #76]	; (8008394 <__sinit+0x68>)
 8008348:	4a13      	ldr	r2, [pc, #76]	; (8008398 <__sinit+0x6c>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	62a2      	str	r2, [r4, #40]	; 0x28
 800834e:	42a3      	cmp	r3, r4
 8008350:	bf04      	itt	eq
 8008352:	2301      	moveq	r3, #1
 8008354:	61a3      	streq	r3, [r4, #24]
 8008356:	4620      	mov	r0, r4
 8008358:	f000 f820 	bl	800839c <__sfp>
 800835c:	6060      	str	r0, [r4, #4]
 800835e:	4620      	mov	r0, r4
 8008360:	f000 f81c 	bl	800839c <__sfp>
 8008364:	60a0      	str	r0, [r4, #8]
 8008366:	4620      	mov	r0, r4
 8008368:	f000 f818 	bl	800839c <__sfp>
 800836c:	2200      	movs	r2, #0
 800836e:	60e0      	str	r0, [r4, #12]
 8008370:	2104      	movs	r1, #4
 8008372:	6860      	ldr	r0, [r4, #4]
 8008374:	f7ff ff82 	bl	800827c <std>
 8008378:	68a0      	ldr	r0, [r4, #8]
 800837a:	2201      	movs	r2, #1
 800837c:	2109      	movs	r1, #9
 800837e:	f7ff ff7d 	bl	800827c <std>
 8008382:	68e0      	ldr	r0, [r4, #12]
 8008384:	2202      	movs	r2, #2
 8008386:	2112      	movs	r1, #18
 8008388:	f7ff ff78 	bl	800827c <std>
 800838c:	2301      	movs	r3, #1
 800838e:	61a3      	str	r3, [r4, #24]
 8008390:	e7d2      	b.n	8008338 <__sinit+0xc>
 8008392:	bf00      	nop
 8008394:	080087f0 	.word	0x080087f0
 8008398:	080082c5 	.word	0x080082c5

0800839c <__sfp>:
 800839c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800839e:	4607      	mov	r7, r0
 80083a0:	f7ff ffac 	bl	80082fc <__sfp_lock_acquire>
 80083a4:	4b1e      	ldr	r3, [pc, #120]	; (8008420 <__sfp+0x84>)
 80083a6:	681e      	ldr	r6, [r3, #0]
 80083a8:	69b3      	ldr	r3, [r6, #24]
 80083aa:	b913      	cbnz	r3, 80083b2 <__sfp+0x16>
 80083ac:	4630      	mov	r0, r6
 80083ae:	f7ff ffbd 	bl	800832c <__sinit>
 80083b2:	3648      	adds	r6, #72	; 0x48
 80083b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80083b8:	3b01      	subs	r3, #1
 80083ba:	d503      	bpl.n	80083c4 <__sfp+0x28>
 80083bc:	6833      	ldr	r3, [r6, #0]
 80083be:	b30b      	cbz	r3, 8008404 <__sfp+0x68>
 80083c0:	6836      	ldr	r6, [r6, #0]
 80083c2:	e7f7      	b.n	80083b4 <__sfp+0x18>
 80083c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80083c8:	b9d5      	cbnz	r5, 8008400 <__sfp+0x64>
 80083ca:	4b16      	ldr	r3, [pc, #88]	; (8008424 <__sfp+0x88>)
 80083cc:	60e3      	str	r3, [r4, #12]
 80083ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80083d2:	6665      	str	r5, [r4, #100]	; 0x64
 80083d4:	f000 f847 	bl	8008466 <__retarget_lock_init_recursive>
 80083d8:	f7ff ff96 	bl	8008308 <__sfp_lock_release>
 80083dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80083e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80083e4:	6025      	str	r5, [r4, #0]
 80083e6:	61a5      	str	r5, [r4, #24]
 80083e8:	2208      	movs	r2, #8
 80083ea:	4629      	mov	r1, r5
 80083ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80083f0:	f7fd fab0 	bl	8005954 <memset>
 80083f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80083f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80083fc:	4620      	mov	r0, r4
 80083fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008400:	3468      	adds	r4, #104	; 0x68
 8008402:	e7d9      	b.n	80083b8 <__sfp+0x1c>
 8008404:	2104      	movs	r1, #4
 8008406:	4638      	mov	r0, r7
 8008408:	f7ff ff62 	bl	80082d0 <__sfmoreglue>
 800840c:	4604      	mov	r4, r0
 800840e:	6030      	str	r0, [r6, #0]
 8008410:	2800      	cmp	r0, #0
 8008412:	d1d5      	bne.n	80083c0 <__sfp+0x24>
 8008414:	f7ff ff78 	bl	8008308 <__sfp_lock_release>
 8008418:	230c      	movs	r3, #12
 800841a:	603b      	str	r3, [r7, #0]
 800841c:	e7ee      	b.n	80083fc <__sfp+0x60>
 800841e:	bf00      	nop
 8008420:	080087f0 	.word	0x080087f0
 8008424:	ffff0001 	.word	0xffff0001

08008428 <_fwalk_reent>:
 8008428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800842c:	4606      	mov	r6, r0
 800842e:	4688      	mov	r8, r1
 8008430:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008434:	2700      	movs	r7, #0
 8008436:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800843a:	f1b9 0901 	subs.w	r9, r9, #1
 800843e:	d505      	bpl.n	800844c <_fwalk_reent+0x24>
 8008440:	6824      	ldr	r4, [r4, #0]
 8008442:	2c00      	cmp	r4, #0
 8008444:	d1f7      	bne.n	8008436 <_fwalk_reent+0xe>
 8008446:	4638      	mov	r0, r7
 8008448:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800844c:	89ab      	ldrh	r3, [r5, #12]
 800844e:	2b01      	cmp	r3, #1
 8008450:	d907      	bls.n	8008462 <_fwalk_reent+0x3a>
 8008452:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008456:	3301      	adds	r3, #1
 8008458:	d003      	beq.n	8008462 <_fwalk_reent+0x3a>
 800845a:	4629      	mov	r1, r5
 800845c:	4630      	mov	r0, r6
 800845e:	47c0      	blx	r8
 8008460:	4307      	orrs	r7, r0
 8008462:	3568      	adds	r5, #104	; 0x68
 8008464:	e7e9      	b.n	800843a <_fwalk_reent+0x12>

08008466 <__retarget_lock_init_recursive>:
 8008466:	4770      	bx	lr

08008468 <__retarget_lock_acquire_recursive>:
 8008468:	4770      	bx	lr

0800846a <__retarget_lock_release_recursive>:
 800846a:	4770      	bx	lr

0800846c <__swhatbuf_r>:
 800846c:	b570      	push	{r4, r5, r6, lr}
 800846e:	460e      	mov	r6, r1
 8008470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008474:	2900      	cmp	r1, #0
 8008476:	b096      	sub	sp, #88	; 0x58
 8008478:	4614      	mov	r4, r2
 800847a:	461d      	mov	r5, r3
 800847c:	da08      	bge.n	8008490 <__swhatbuf_r+0x24>
 800847e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008482:	2200      	movs	r2, #0
 8008484:	602a      	str	r2, [r5, #0]
 8008486:	061a      	lsls	r2, r3, #24
 8008488:	d410      	bmi.n	80084ac <__swhatbuf_r+0x40>
 800848a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800848e:	e00e      	b.n	80084ae <__swhatbuf_r+0x42>
 8008490:	466a      	mov	r2, sp
 8008492:	f000 f903 	bl	800869c <_fstat_r>
 8008496:	2800      	cmp	r0, #0
 8008498:	dbf1      	blt.n	800847e <__swhatbuf_r+0x12>
 800849a:	9a01      	ldr	r2, [sp, #4]
 800849c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80084a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80084a4:	425a      	negs	r2, r3
 80084a6:	415a      	adcs	r2, r3
 80084a8:	602a      	str	r2, [r5, #0]
 80084aa:	e7ee      	b.n	800848a <__swhatbuf_r+0x1e>
 80084ac:	2340      	movs	r3, #64	; 0x40
 80084ae:	2000      	movs	r0, #0
 80084b0:	6023      	str	r3, [r4, #0]
 80084b2:	b016      	add	sp, #88	; 0x58
 80084b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080084b8 <__smakebuf_r>:
 80084b8:	898b      	ldrh	r3, [r1, #12]
 80084ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80084bc:	079d      	lsls	r5, r3, #30
 80084be:	4606      	mov	r6, r0
 80084c0:	460c      	mov	r4, r1
 80084c2:	d507      	bpl.n	80084d4 <__smakebuf_r+0x1c>
 80084c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80084c8:	6023      	str	r3, [r4, #0]
 80084ca:	6123      	str	r3, [r4, #16]
 80084cc:	2301      	movs	r3, #1
 80084ce:	6163      	str	r3, [r4, #20]
 80084d0:	b002      	add	sp, #8
 80084d2:	bd70      	pop	{r4, r5, r6, pc}
 80084d4:	ab01      	add	r3, sp, #4
 80084d6:	466a      	mov	r2, sp
 80084d8:	f7ff ffc8 	bl	800846c <__swhatbuf_r>
 80084dc:	9900      	ldr	r1, [sp, #0]
 80084de:	4605      	mov	r5, r0
 80084e0:	4630      	mov	r0, r6
 80084e2:	f7ff f963 	bl	80077ac <_malloc_r>
 80084e6:	b948      	cbnz	r0, 80084fc <__smakebuf_r+0x44>
 80084e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084ec:	059a      	lsls	r2, r3, #22
 80084ee:	d4ef      	bmi.n	80084d0 <__smakebuf_r+0x18>
 80084f0:	f023 0303 	bic.w	r3, r3, #3
 80084f4:	f043 0302 	orr.w	r3, r3, #2
 80084f8:	81a3      	strh	r3, [r4, #12]
 80084fa:	e7e3      	b.n	80084c4 <__smakebuf_r+0xc>
 80084fc:	4b0d      	ldr	r3, [pc, #52]	; (8008534 <__smakebuf_r+0x7c>)
 80084fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8008500:	89a3      	ldrh	r3, [r4, #12]
 8008502:	6020      	str	r0, [r4, #0]
 8008504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008508:	81a3      	strh	r3, [r4, #12]
 800850a:	9b00      	ldr	r3, [sp, #0]
 800850c:	6163      	str	r3, [r4, #20]
 800850e:	9b01      	ldr	r3, [sp, #4]
 8008510:	6120      	str	r0, [r4, #16]
 8008512:	b15b      	cbz	r3, 800852c <__smakebuf_r+0x74>
 8008514:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008518:	4630      	mov	r0, r6
 800851a:	f000 f8d1 	bl	80086c0 <_isatty_r>
 800851e:	b128      	cbz	r0, 800852c <__smakebuf_r+0x74>
 8008520:	89a3      	ldrh	r3, [r4, #12]
 8008522:	f023 0303 	bic.w	r3, r3, #3
 8008526:	f043 0301 	orr.w	r3, r3, #1
 800852a:	81a3      	strh	r3, [r4, #12]
 800852c:	89a0      	ldrh	r0, [r4, #12]
 800852e:	4305      	orrs	r5, r0
 8008530:	81a5      	strh	r5, [r4, #12]
 8008532:	e7cd      	b.n	80084d0 <__smakebuf_r+0x18>
 8008534:	080082c5 	.word	0x080082c5

08008538 <_malloc_usable_size_r>:
 8008538:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800853c:	1f18      	subs	r0, r3, #4
 800853e:	2b00      	cmp	r3, #0
 8008540:	bfbc      	itt	lt
 8008542:	580b      	ldrlt	r3, [r1, r0]
 8008544:	18c0      	addlt	r0, r0, r3
 8008546:	4770      	bx	lr

08008548 <_raise_r>:
 8008548:	291f      	cmp	r1, #31
 800854a:	b538      	push	{r3, r4, r5, lr}
 800854c:	4604      	mov	r4, r0
 800854e:	460d      	mov	r5, r1
 8008550:	d904      	bls.n	800855c <_raise_r+0x14>
 8008552:	2316      	movs	r3, #22
 8008554:	6003      	str	r3, [r0, #0]
 8008556:	f04f 30ff 	mov.w	r0, #4294967295
 800855a:	bd38      	pop	{r3, r4, r5, pc}
 800855c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800855e:	b112      	cbz	r2, 8008566 <_raise_r+0x1e>
 8008560:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008564:	b94b      	cbnz	r3, 800857a <_raise_r+0x32>
 8008566:	4620      	mov	r0, r4
 8008568:	f000 f830 	bl	80085cc <_getpid_r>
 800856c:	462a      	mov	r2, r5
 800856e:	4601      	mov	r1, r0
 8008570:	4620      	mov	r0, r4
 8008572:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008576:	f000 b817 	b.w	80085a8 <_kill_r>
 800857a:	2b01      	cmp	r3, #1
 800857c:	d00a      	beq.n	8008594 <_raise_r+0x4c>
 800857e:	1c59      	adds	r1, r3, #1
 8008580:	d103      	bne.n	800858a <_raise_r+0x42>
 8008582:	2316      	movs	r3, #22
 8008584:	6003      	str	r3, [r0, #0]
 8008586:	2001      	movs	r0, #1
 8008588:	e7e7      	b.n	800855a <_raise_r+0x12>
 800858a:	2400      	movs	r4, #0
 800858c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008590:	4628      	mov	r0, r5
 8008592:	4798      	blx	r3
 8008594:	2000      	movs	r0, #0
 8008596:	e7e0      	b.n	800855a <_raise_r+0x12>

08008598 <raise>:
 8008598:	4b02      	ldr	r3, [pc, #8]	; (80085a4 <raise+0xc>)
 800859a:	4601      	mov	r1, r0
 800859c:	6818      	ldr	r0, [r3, #0]
 800859e:	f7ff bfd3 	b.w	8008548 <_raise_r>
 80085a2:	bf00      	nop
 80085a4:	2000000c 	.word	0x2000000c

080085a8 <_kill_r>:
 80085a8:	b538      	push	{r3, r4, r5, lr}
 80085aa:	4d07      	ldr	r5, [pc, #28]	; (80085c8 <_kill_r+0x20>)
 80085ac:	2300      	movs	r3, #0
 80085ae:	4604      	mov	r4, r0
 80085b0:	4608      	mov	r0, r1
 80085b2:	4611      	mov	r1, r2
 80085b4:	602b      	str	r3, [r5, #0]
 80085b6:	f7f9 f909 	bl	80017cc <_kill>
 80085ba:	1c43      	adds	r3, r0, #1
 80085bc:	d102      	bne.n	80085c4 <_kill_r+0x1c>
 80085be:	682b      	ldr	r3, [r5, #0]
 80085c0:	b103      	cbz	r3, 80085c4 <_kill_r+0x1c>
 80085c2:	6023      	str	r3, [r4, #0]
 80085c4:	bd38      	pop	{r3, r4, r5, pc}
 80085c6:	bf00      	nop
 80085c8:	20000394 	.word	0x20000394

080085cc <_getpid_r>:
 80085cc:	f7f9 b8f6 	b.w	80017bc <_getpid>

080085d0 <__sread>:
 80085d0:	b510      	push	{r4, lr}
 80085d2:	460c      	mov	r4, r1
 80085d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085d8:	f000 f894 	bl	8008704 <_read_r>
 80085dc:	2800      	cmp	r0, #0
 80085de:	bfab      	itete	ge
 80085e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80085e2:	89a3      	ldrhlt	r3, [r4, #12]
 80085e4:	181b      	addge	r3, r3, r0
 80085e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80085ea:	bfac      	ite	ge
 80085ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80085ee:	81a3      	strhlt	r3, [r4, #12]
 80085f0:	bd10      	pop	{r4, pc}

080085f2 <__swrite>:
 80085f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085f6:	461f      	mov	r7, r3
 80085f8:	898b      	ldrh	r3, [r1, #12]
 80085fa:	05db      	lsls	r3, r3, #23
 80085fc:	4605      	mov	r5, r0
 80085fe:	460c      	mov	r4, r1
 8008600:	4616      	mov	r6, r2
 8008602:	d505      	bpl.n	8008610 <__swrite+0x1e>
 8008604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008608:	2302      	movs	r3, #2
 800860a:	2200      	movs	r2, #0
 800860c:	f000 f868 	bl	80086e0 <_lseek_r>
 8008610:	89a3      	ldrh	r3, [r4, #12]
 8008612:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008616:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800861a:	81a3      	strh	r3, [r4, #12]
 800861c:	4632      	mov	r2, r6
 800861e:	463b      	mov	r3, r7
 8008620:	4628      	mov	r0, r5
 8008622:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008626:	f000 b817 	b.w	8008658 <_write_r>

0800862a <__sseek>:
 800862a:	b510      	push	{r4, lr}
 800862c:	460c      	mov	r4, r1
 800862e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008632:	f000 f855 	bl	80086e0 <_lseek_r>
 8008636:	1c43      	adds	r3, r0, #1
 8008638:	89a3      	ldrh	r3, [r4, #12]
 800863a:	bf15      	itete	ne
 800863c:	6560      	strne	r0, [r4, #84]	; 0x54
 800863e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008642:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008646:	81a3      	strheq	r3, [r4, #12]
 8008648:	bf18      	it	ne
 800864a:	81a3      	strhne	r3, [r4, #12]
 800864c:	bd10      	pop	{r4, pc}

0800864e <__sclose>:
 800864e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008652:	f000 b813 	b.w	800867c <_close_r>
	...

08008658 <_write_r>:
 8008658:	b538      	push	{r3, r4, r5, lr}
 800865a:	4d07      	ldr	r5, [pc, #28]	; (8008678 <_write_r+0x20>)
 800865c:	4604      	mov	r4, r0
 800865e:	4608      	mov	r0, r1
 8008660:	4611      	mov	r1, r2
 8008662:	2200      	movs	r2, #0
 8008664:	602a      	str	r2, [r5, #0]
 8008666:	461a      	mov	r2, r3
 8008668:	f7f9 f8e7 	bl	800183a <_write>
 800866c:	1c43      	adds	r3, r0, #1
 800866e:	d102      	bne.n	8008676 <_write_r+0x1e>
 8008670:	682b      	ldr	r3, [r5, #0]
 8008672:	b103      	cbz	r3, 8008676 <_write_r+0x1e>
 8008674:	6023      	str	r3, [r4, #0]
 8008676:	bd38      	pop	{r3, r4, r5, pc}
 8008678:	20000394 	.word	0x20000394

0800867c <_close_r>:
 800867c:	b538      	push	{r3, r4, r5, lr}
 800867e:	4d06      	ldr	r5, [pc, #24]	; (8008698 <_close_r+0x1c>)
 8008680:	2300      	movs	r3, #0
 8008682:	4604      	mov	r4, r0
 8008684:	4608      	mov	r0, r1
 8008686:	602b      	str	r3, [r5, #0]
 8008688:	f7f9 f8f3 	bl	8001872 <_close>
 800868c:	1c43      	adds	r3, r0, #1
 800868e:	d102      	bne.n	8008696 <_close_r+0x1a>
 8008690:	682b      	ldr	r3, [r5, #0]
 8008692:	b103      	cbz	r3, 8008696 <_close_r+0x1a>
 8008694:	6023      	str	r3, [r4, #0]
 8008696:	bd38      	pop	{r3, r4, r5, pc}
 8008698:	20000394 	.word	0x20000394

0800869c <_fstat_r>:
 800869c:	b538      	push	{r3, r4, r5, lr}
 800869e:	4d07      	ldr	r5, [pc, #28]	; (80086bc <_fstat_r+0x20>)
 80086a0:	2300      	movs	r3, #0
 80086a2:	4604      	mov	r4, r0
 80086a4:	4608      	mov	r0, r1
 80086a6:	4611      	mov	r1, r2
 80086a8:	602b      	str	r3, [r5, #0]
 80086aa:	f7f9 f8ee 	bl	800188a <_fstat>
 80086ae:	1c43      	adds	r3, r0, #1
 80086b0:	d102      	bne.n	80086b8 <_fstat_r+0x1c>
 80086b2:	682b      	ldr	r3, [r5, #0]
 80086b4:	b103      	cbz	r3, 80086b8 <_fstat_r+0x1c>
 80086b6:	6023      	str	r3, [r4, #0]
 80086b8:	bd38      	pop	{r3, r4, r5, pc}
 80086ba:	bf00      	nop
 80086bc:	20000394 	.word	0x20000394

080086c0 <_isatty_r>:
 80086c0:	b538      	push	{r3, r4, r5, lr}
 80086c2:	4d06      	ldr	r5, [pc, #24]	; (80086dc <_isatty_r+0x1c>)
 80086c4:	2300      	movs	r3, #0
 80086c6:	4604      	mov	r4, r0
 80086c8:	4608      	mov	r0, r1
 80086ca:	602b      	str	r3, [r5, #0]
 80086cc:	f7f9 f8ed 	bl	80018aa <_isatty>
 80086d0:	1c43      	adds	r3, r0, #1
 80086d2:	d102      	bne.n	80086da <_isatty_r+0x1a>
 80086d4:	682b      	ldr	r3, [r5, #0]
 80086d6:	b103      	cbz	r3, 80086da <_isatty_r+0x1a>
 80086d8:	6023      	str	r3, [r4, #0]
 80086da:	bd38      	pop	{r3, r4, r5, pc}
 80086dc:	20000394 	.word	0x20000394

080086e0 <_lseek_r>:
 80086e0:	b538      	push	{r3, r4, r5, lr}
 80086e2:	4d07      	ldr	r5, [pc, #28]	; (8008700 <_lseek_r+0x20>)
 80086e4:	4604      	mov	r4, r0
 80086e6:	4608      	mov	r0, r1
 80086e8:	4611      	mov	r1, r2
 80086ea:	2200      	movs	r2, #0
 80086ec:	602a      	str	r2, [r5, #0]
 80086ee:	461a      	mov	r2, r3
 80086f0:	f7f9 f8e6 	bl	80018c0 <_lseek>
 80086f4:	1c43      	adds	r3, r0, #1
 80086f6:	d102      	bne.n	80086fe <_lseek_r+0x1e>
 80086f8:	682b      	ldr	r3, [r5, #0]
 80086fa:	b103      	cbz	r3, 80086fe <_lseek_r+0x1e>
 80086fc:	6023      	str	r3, [r4, #0]
 80086fe:	bd38      	pop	{r3, r4, r5, pc}
 8008700:	20000394 	.word	0x20000394

08008704 <_read_r>:
 8008704:	b538      	push	{r3, r4, r5, lr}
 8008706:	4d07      	ldr	r5, [pc, #28]	; (8008724 <_read_r+0x20>)
 8008708:	4604      	mov	r4, r0
 800870a:	4608      	mov	r0, r1
 800870c:	4611      	mov	r1, r2
 800870e:	2200      	movs	r2, #0
 8008710:	602a      	str	r2, [r5, #0]
 8008712:	461a      	mov	r2, r3
 8008714:	f7f9 f874 	bl	8001800 <_read>
 8008718:	1c43      	adds	r3, r0, #1
 800871a:	d102      	bne.n	8008722 <_read_r+0x1e>
 800871c:	682b      	ldr	r3, [r5, #0]
 800871e:	b103      	cbz	r3, 8008722 <_read_r+0x1e>
 8008720:	6023      	str	r3, [r4, #0]
 8008722:	bd38      	pop	{r3, r4, r5, pc}
 8008724:	20000394 	.word	0x20000394

08008728 <_init>:
 8008728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800872a:	bf00      	nop
 800872c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800872e:	bc08      	pop	{r3}
 8008730:	469e      	mov	lr, r3
 8008732:	4770      	bx	lr

08008734 <_fini>:
 8008734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008736:	bf00      	nop
 8008738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800873a:	bc08      	pop	{r3}
 800873c:	469e      	mov	lr, r3
 800873e:	4770      	bx	lr
